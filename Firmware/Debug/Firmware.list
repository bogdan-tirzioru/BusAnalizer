
Firmware.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008ee8  080002a0  080002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001b0  08009188  08009188  00019188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08009338  08009338  00019338  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000008  08009340  08009340  00019340  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000008  08009348  08009348  00019348  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         000001e8  20000000  08009350  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00001d5c  200001e8  08009538  000201e8  2**2
                  ALLOC
  8 ._user_heap_stack 00002404  20001f44  08009538  00021f44  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  000201e8  2**0
                  CONTENTS, READONLY
 10 .debug_info   0004936d  00000000  00000000  00020216  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 000067a5  00000000  00000000  00069583  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_loc    0001efd2  00000000  00000000  0006fd28  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_aranges 00002008  00000000  00000000  0008ed00  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_ranges 00001ed0  00000000  00000000  00090d08  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_macro  0003eca6  00000000  00000000  00092bd8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   00031be3  00000000  00000000  000d187e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    00180c11  00000000  00000000  00103461  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .comment      00000053  00000000  00000000  00284072  2**0
                  CONTENTS, READONLY
 19 .debug_frame  00005f34  00000000  00000000  002840c8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	; (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	; (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	; (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	200001e8 	.word	0x200001e8
 80002bc:	00000000 	.word	0x00000000
 80002c0:	08009170 	.word	0x08009170

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	; (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	; (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	; (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	200001ec 	.word	0x200001ec
 80002dc:	08009170 	.word	0x08009170

080002e0 <memchr>:
 80002e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002e4:	2a10      	cmp	r2, #16
 80002e6:	db2b      	blt.n	8000340 <memchr+0x60>
 80002e8:	f010 0f07 	tst.w	r0, #7
 80002ec:	d008      	beq.n	8000300 <memchr+0x20>
 80002ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002f2:	3a01      	subs	r2, #1
 80002f4:	428b      	cmp	r3, r1
 80002f6:	d02d      	beq.n	8000354 <memchr+0x74>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	b342      	cbz	r2, 8000350 <memchr+0x70>
 80002fe:	d1f6      	bne.n	80002ee <memchr+0xe>
 8000300:	b4f0      	push	{r4, r5, r6, r7}
 8000302:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000306:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800030a:	f022 0407 	bic.w	r4, r2, #7
 800030e:	f07f 0700 	mvns.w	r7, #0
 8000312:	2300      	movs	r3, #0
 8000314:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000318:	3c08      	subs	r4, #8
 800031a:	ea85 0501 	eor.w	r5, r5, r1
 800031e:	ea86 0601 	eor.w	r6, r6, r1
 8000322:	fa85 f547 	uadd8	r5, r5, r7
 8000326:	faa3 f587 	sel	r5, r3, r7
 800032a:	fa86 f647 	uadd8	r6, r6, r7
 800032e:	faa5 f687 	sel	r6, r5, r7
 8000332:	b98e      	cbnz	r6, 8000358 <memchr+0x78>
 8000334:	d1ee      	bne.n	8000314 <memchr+0x34>
 8000336:	bcf0      	pop	{r4, r5, r6, r7}
 8000338:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800033c:	f002 0207 	and.w	r2, r2, #7
 8000340:	b132      	cbz	r2, 8000350 <memchr+0x70>
 8000342:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000346:	3a01      	subs	r2, #1
 8000348:	ea83 0301 	eor.w	r3, r3, r1
 800034c:	b113      	cbz	r3, 8000354 <memchr+0x74>
 800034e:	d1f8      	bne.n	8000342 <memchr+0x62>
 8000350:	2000      	movs	r0, #0
 8000352:	4770      	bx	lr
 8000354:	3801      	subs	r0, #1
 8000356:	4770      	bx	lr
 8000358:	2d00      	cmp	r5, #0
 800035a:	bf06      	itte	eq
 800035c:	4635      	moveq	r5, r6
 800035e:	3803      	subeq	r0, #3
 8000360:	3807      	subne	r0, #7
 8000362:	f015 0f01 	tst.w	r5, #1
 8000366:	d107      	bne.n	8000378 <memchr+0x98>
 8000368:	3001      	adds	r0, #1
 800036a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800036e:	bf02      	ittt	eq
 8000370:	3001      	addeq	r0, #1
 8000372:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000376:	3001      	addeq	r0, #1
 8000378:	bcf0      	pop	{r4, r5, r6, r7}
 800037a:	3801      	subs	r0, #1
 800037c:	4770      	bx	lr
 800037e:	bf00      	nop

08000380 <__aeabi_uldivmod>:
 8000380:	b953      	cbnz	r3, 8000398 <__aeabi_uldivmod+0x18>
 8000382:	b94a      	cbnz	r2, 8000398 <__aeabi_uldivmod+0x18>
 8000384:	2900      	cmp	r1, #0
 8000386:	bf08      	it	eq
 8000388:	2800      	cmpeq	r0, #0
 800038a:	bf1c      	itt	ne
 800038c:	f04f 31ff 	movne.w	r1, #4294967295
 8000390:	f04f 30ff 	movne.w	r0, #4294967295
 8000394:	f000 b96e 	b.w	8000674 <__aeabi_idiv0>
 8000398:	f1ad 0c08 	sub.w	ip, sp, #8
 800039c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003a0:	f000 f806 	bl	80003b0 <__udivmoddi4>
 80003a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003ac:	b004      	add	sp, #16
 80003ae:	4770      	bx	lr

080003b0 <__udivmoddi4>:
 80003b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003b4:	9d08      	ldr	r5, [sp, #32]
 80003b6:	4604      	mov	r4, r0
 80003b8:	468c      	mov	ip, r1
 80003ba:	2b00      	cmp	r3, #0
 80003bc:	f040 8083 	bne.w	80004c6 <__udivmoddi4+0x116>
 80003c0:	428a      	cmp	r2, r1
 80003c2:	4617      	mov	r7, r2
 80003c4:	d947      	bls.n	8000456 <__udivmoddi4+0xa6>
 80003c6:	fab2 f282 	clz	r2, r2
 80003ca:	b142      	cbz	r2, 80003de <__udivmoddi4+0x2e>
 80003cc:	f1c2 0020 	rsb	r0, r2, #32
 80003d0:	fa24 f000 	lsr.w	r0, r4, r0
 80003d4:	4091      	lsls	r1, r2
 80003d6:	4097      	lsls	r7, r2
 80003d8:	ea40 0c01 	orr.w	ip, r0, r1
 80003dc:	4094      	lsls	r4, r2
 80003de:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80003e2:	0c23      	lsrs	r3, r4, #16
 80003e4:	fbbc f6f8 	udiv	r6, ip, r8
 80003e8:	fa1f fe87 	uxth.w	lr, r7
 80003ec:	fb08 c116 	mls	r1, r8, r6, ip
 80003f0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003f4:	fb06 f10e 	mul.w	r1, r6, lr
 80003f8:	4299      	cmp	r1, r3
 80003fa:	d909      	bls.n	8000410 <__udivmoddi4+0x60>
 80003fc:	18fb      	adds	r3, r7, r3
 80003fe:	f106 30ff 	add.w	r0, r6, #4294967295
 8000402:	f080 8119 	bcs.w	8000638 <__udivmoddi4+0x288>
 8000406:	4299      	cmp	r1, r3
 8000408:	f240 8116 	bls.w	8000638 <__udivmoddi4+0x288>
 800040c:	3e02      	subs	r6, #2
 800040e:	443b      	add	r3, r7
 8000410:	1a5b      	subs	r3, r3, r1
 8000412:	b2a4      	uxth	r4, r4
 8000414:	fbb3 f0f8 	udiv	r0, r3, r8
 8000418:	fb08 3310 	mls	r3, r8, r0, r3
 800041c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000420:	fb00 fe0e 	mul.w	lr, r0, lr
 8000424:	45a6      	cmp	lr, r4
 8000426:	d909      	bls.n	800043c <__udivmoddi4+0x8c>
 8000428:	193c      	adds	r4, r7, r4
 800042a:	f100 33ff 	add.w	r3, r0, #4294967295
 800042e:	f080 8105 	bcs.w	800063c <__udivmoddi4+0x28c>
 8000432:	45a6      	cmp	lr, r4
 8000434:	f240 8102 	bls.w	800063c <__udivmoddi4+0x28c>
 8000438:	3802      	subs	r0, #2
 800043a:	443c      	add	r4, r7
 800043c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000440:	eba4 040e 	sub.w	r4, r4, lr
 8000444:	2600      	movs	r6, #0
 8000446:	b11d      	cbz	r5, 8000450 <__udivmoddi4+0xa0>
 8000448:	40d4      	lsrs	r4, r2
 800044a:	2300      	movs	r3, #0
 800044c:	e9c5 4300 	strd	r4, r3, [r5]
 8000450:	4631      	mov	r1, r6
 8000452:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000456:	b902      	cbnz	r2, 800045a <__udivmoddi4+0xaa>
 8000458:	deff      	udf	#255	; 0xff
 800045a:	fab2 f282 	clz	r2, r2
 800045e:	2a00      	cmp	r2, #0
 8000460:	d150      	bne.n	8000504 <__udivmoddi4+0x154>
 8000462:	1bcb      	subs	r3, r1, r7
 8000464:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000468:	fa1f f887 	uxth.w	r8, r7
 800046c:	2601      	movs	r6, #1
 800046e:	fbb3 fcfe 	udiv	ip, r3, lr
 8000472:	0c21      	lsrs	r1, r4, #16
 8000474:	fb0e 331c 	mls	r3, lr, ip, r3
 8000478:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800047c:	fb08 f30c 	mul.w	r3, r8, ip
 8000480:	428b      	cmp	r3, r1
 8000482:	d907      	bls.n	8000494 <__udivmoddi4+0xe4>
 8000484:	1879      	adds	r1, r7, r1
 8000486:	f10c 30ff 	add.w	r0, ip, #4294967295
 800048a:	d202      	bcs.n	8000492 <__udivmoddi4+0xe2>
 800048c:	428b      	cmp	r3, r1
 800048e:	f200 80e9 	bhi.w	8000664 <__udivmoddi4+0x2b4>
 8000492:	4684      	mov	ip, r0
 8000494:	1ac9      	subs	r1, r1, r3
 8000496:	b2a3      	uxth	r3, r4
 8000498:	fbb1 f0fe 	udiv	r0, r1, lr
 800049c:	fb0e 1110 	mls	r1, lr, r0, r1
 80004a0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80004a4:	fb08 f800 	mul.w	r8, r8, r0
 80004a8:	45a0      	cmp	r8, r4
 80004aa:	d907      	bls.n	80004bc <__udivmoddi4+0x10c>
 80004ac:	193c      	adds	r4, r7, r4
 80004ae:	f100 33ff 	add.w	r3, r0, #4294967295
 80004b2:	d202      	bcs.n	80004ba <__udivmoddi4+0x10a>
 80004b4:	45a0      	cmp	r8, r4
 80004b6:	f200 80d9 	bhi.w	800066c <__udivmoddi4+0x2bc>
 80004ba:	4618      	mov	r0, r3
 80004bc:	eba4 0408 	sub.w	r4, r4, r8
 80004c0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80004c4:	e7bf      	b.n	8000446 <__udivmoddi4+0x96>
 80004c6:	428b      	cmp	r3, r1
 80004c8:	d909      	bls.n	80004de <__udivmoddi4+0x12e>
 80004ca:	2d00      	cmp	r5, #0
 80004cc:	f000 80b1 	beq.w	8000632 <__udivmoddi4+0x282>
 80004d0:	2600      	movs	r6, #0
 80004d2:	e9c5 0100 	strd	r0, r1, [r5]
 80004d6:	4630      	mov	r0, r6
 80004d8:	4631      	mov	r1, r6
 80004da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004de:	fab3 f683 	clz	r6, r3
 80004e2:	2e00      	cmp	r6, #0
 80004e4:	d14a      	bne.n	800057c <__udivmoddi4+0x1cc>
 80004e6:	428b      	cmp	r3, r1
 80004e8:	d302      	bcc.n	80004f0 <__udivmoddi4+0x140>
 80004ea:	4282      	cmp	r2, r0
 80004ec:	f200 80b8 	bhi.w	8000660 <__udivmoddi4+0x2b0>
 80004f0:	1a84      	subs	r4, r0, r2
 80004f2:	eb61 0103 	sbc.w	r1, r1, r3
 80004f6:	2001      	movs	r0, #1
 80004f8:	468c      	mov	ip, r1
 80004fa:	2d00      	cmp	r5, #0
 80004fc:	d0a8      	beq.n	8000450 <__udivmoddi4+0xa0>
 80004fe:	e9c5 4c00 	strd	r4, ip, [r5]
 8000502:	e7a5      	b.n	8000450 <__udivmoddi4+0xa0>
 8000504:	f1c2 0320 	rsb	r3, r2, #32
 8000508:	fa20 f603 	lsr.w	r6, r0, r3
 800050c:	4097      	lsls	r7, r2
 800050e:	fa01 f002 	lsl.w	r0, r1, r2
 8000512:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000516:	40d9      	lsrs	r1, r3
 8000518:	4330      	orrs	r0, r6
 800051a:	0c03      	lsrs	r3, r0, #16
 800051c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000520:	fa1f f887 	uxth.w	r8, r7
 8000524:	fb0e 1116 	mls	r1, lr, r6, r1
 8000528:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800052c:	fb06 f108 	mul.w	r1, r6, r8
 8000530:	4299      	cmp	r1, r3
 8000532:	fa04 f402 	lsl.w	r4, r4, r2
 8000536:	d909      	bls.n	800054c <__udivmoddi4+0x19c>
 8000538:	18fb      	adds	r3, r7, r3
 800053a:	f106 3cff 	add.w	ip, r6, #4294967295
 800053e:	f080 808d 	bcs.w	800065c <__udivmoddi4+0x2ac>
 8000542:	4299      	cmp	r1, r3
 8000544:	f240 808a 	bls.w	800065c <__udivmoddi4+0x2ac>
 8000548:	3e02      	subs	r6, #2
 800054a:	443b      	add	r3, r7
 800054c:	1a5b      	subs	r3, r3, r1
 800054e:	b281      	uxth	r1, r0
 8000550:	fbb3 f0fe 	udiv	r0, r3, lr
 8000554:	fb0e 3310 	mls	r3, lr, r0, r3
 8000558:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800055c:	fb00 f308 	mul.w	r3, r0, r8
 8000560:	428b      	cmp	r3, r1
 8000562:	d907      	bls.n	8000574 <__udivmoddi4+0x1c4>
 8000564:	1879      	adds	r1, r7, r1
 8000566:	f100 3cff 	add.w	ip, r0, #4294967295
 800056a:	d273      	bcs.n	8000654 <__udivmoddi4+0x2a4>
 800056c:	428b      	cmp	r3, r1
 800056e:	d971      	bls.n	8000654 <__udivmoddi4+0x2a4>
 8000570:	3802      	subs	r0, #2
 8000572:	4439      	add	r1, r7
 8000574:	1acb      	subs	r3, r1, r3
 8000576:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800057a:	e778      	b.n	800046e <__udivmoddi4+0xbe>
 800057c:	f1c6 0c20 	rsb	ip, r6, #32
 8000580:	fa03 f406 	lsl.w	r4, r3, r6
 8000584:	fa22 f30c 	lsr.w	r3, r2, ip
 8000588:	431c      	orrs	r4, r3
 800058a:	fa20 f70c 	lsr.w	r7, r0, ip
 800058e:	fa01 f306 	lsl.w	r3, r1, r6
 8000592:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000596:	fa21 f10c 	lsr.w	r1, r1, ip
 800059a:	431f      	orrs	r7, r3
 800059c:	0c3b      	lsrs	r3, r7, #16
 800059e:	fbb1 f9fe 	udiv	r9, r1, lr
 80005a2:	fa1f f884 	uxth.w	r8, r4
 80005a6:	fb0e 1119 	mls	r1, lr, r9, r1
 80005aa:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80005ae:	fb09 fa08 	mul.w	sl, r9, r8
 80005b2:	458a      	cmp	sl, r1
 80005b4:	fa02 f206 	lsl.w	r2, r2, r6
 80005b8:	fa00 f306 	lsl.w	r3, r0, r6
 80005bc:	d908      	bls.n	80005d0 <__udivmoddi4+0x220>
 80005be:	1861      	adds	r1, r4, r1
 80005c0:	f109 30ff 	add.w	r0, r9, #4294967295
 80005c4:	d248      	bcs.n	8000658 <__udivmoddi4+0x2a8>
 80005c6:	458a      	cmp	sl, r1
 80005c8:	d946      	bls.n	8000658 <__udivmoddi4+0x2a8>
 80005ca:	f1a9 0902 	sub.w	r9, r9, #2
 80005ce:	4421      	add	r1, r4
 80005d0:	eba1 010a 	sub.w	r1, r1, sl
 80005d4:	b2bf      	uxth	r7, r7
 80005d6:	fbb1 f0fe 	udiv	r0, r1, lr
 80005da:	fb0e 1110 	mls	r1, lr, r0, r1
 80005de:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 80005e2:	fb00 f808 	mul.w	r8, r0, r8
 80005e6:	45b8      	cmp	r8, r7
 80005e8:	d907      	bls.n	80005fa <__udivmoddi4+0x24a>
 80005ea:	19e7      	adds	r7, r4, r7
 80005ec:	f100 31ff 	add.w	r1, r0, #4294967295
 80005f0:	d22e      	bcs.n	8000650 <__udivmoddi4+0x2a0>
 80005f2:	45b8      	cmp	r8, r7
 80005f4:	d92c      	bls.n	8000650 <__udivmoddi4+0x2a0>
 80005f6:	3802      	subs	r0, #2
 80005f8:	4427      	add	r7, r4
 80005fa:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80005fe:	eba7 0708 	sub.w	r7, r7, r8
 8000602:	fba0 8902 	umull	r8, r9, r0, r2
 8000606:	454f      	cmp	r7, r9
 8000608:	46c6      	mov	lr, r8
 800060a:	4649      	mov	r1, r9
 800060c:	d31a      	bcc.n	8000644 <__udivmoddi4+0x294>
 800060e:	d017      	beq.n	8000640 <__udivmoddi4+0x290>
 8000610:	b15d      	cbz	r5, 800062a <__udivmoddi4+0x27a>
 8000612:	ebb3 020e 	subs.w	r2, r3, lr
 8000616:	eb67 0701 	sbc.w	r7, r7, r1
 800061a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800061e:	40f2      	lsrs	r2, r6
 8000620:	ea4c 0202 	orr.w	r2, ip, r2
 8000624:	40f7      	lsrs	r7, r6
 8000626:	e9c5 2700 	strd	r2, r7, [r5]
 800062a:	2600      	movs	r6, #0
 800062c:	4631      	mov	r1, r6
 800062e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000632:	462e      	mov	r6, r5
 8000634:	4628      	mov	r0, r5
 8000636:	e70b      	b.n	8000450 <__udivmoddi4+0xa0>
 8000638:	4606      	mov	r6, r0
 800063a:	e6e9      	b.n	8000410 <__udivmoddi4+0x60>
 800063c:	4618      	mov	r0, r3
 800063e:	e6fd      	b.n	800043c <__udivmoddi4+0x8c>
 8000640:	4543      	cmp	r3, r8
 8000642:	d2e5      	bcs.n	8000610 <__udivmoddi4+0x260>
 8000644:	ebb8 0e02 	subs.w	lr, r8, r2
 8000648:	eb69 0104 	sbc.w	r1, r9, r4
 800064c:	3801      	subs	r0, #1
 800064e:	e7df      	b.n	8000610 <__udivmoddi4+0x260>
 8000650:	4608      	mov	r0, r1
 8000652:	e7d2      	b.n	80005fa <__udivmoddi4+0x24a>
 8000654:	4660      	mov	r0, ip
 8000656:	e78d      	b.n	8000574 <__udivmoddi4+0x1c4>
 8000658:	4681      	mov	r9, r0
 800065a:	e7b9      	b.n	80005d0 <__udivmoddi4+0x220>
 800065c:	4666      	mov	r6, ip
 800065e:	e775      	b.n	800054c <__udivmoddi4+0x19c>
 8000660:	4630      	mov	r0, r6
 8000662:	e74a      	b.n	80004fa <__udivmoddi4+0x14a>
 8000664:	f1ac 0c02 	sub.w	ip, ip, #2
 8000668:	4439      	add	r1, r7
 800066a:	e713      	b.n	8000494 <__udivmoddi4+0xe4>
 800066c:	3802      	subs	r0, #2
 800066e:	443c      	add	r4, r7
 8000670:	e724      	b.n	80004bc <__udivmoddi4+0x10c>
 8000672:	bf00      	nop

08000674 <__aeabi_idiv0>:
 8000674:	4770      	bx	lr
 8000676:	bf00      	nop

08000678 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000678:	b510      	push	{r4, lr}
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800067a:	2003      	movs	r0, #3
 800067c:	f000 f856 	bl	800072c <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8000680:	f002 f994 	bl	80029ac <HAL_RCC_GetSysClockFreq>
 8000684:	490f      	ldr	r1, [pc, #60]	; (80006c4 <HAL_Init+0x4c>)
 8000686:	698b      	ldr	r3, [r1, #24]
 8000688:	f3c3 2303 	ubfx	r3, r3, #8, #4
 800068c:	4a0e      	ldr	r2, [pc, #56]	; (80006c8 <HAL_Init+0x50>)
 800068e:	5cd3      	ldrb	r3, [r2, r3]
 8000690:	f003 031f 	and.w	r3, r3, #31
 8000694:	40d8      	lsrs	r0, r3
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8000696:	698b      	ldr	r3, [r1, #24]
 8000698:	f003 030f 	and.w	r3, r3, #15
 800069c:	5cd3      	ldrb	r3, [r2, r3]
 800069e:	f003 031f 	and.w	r3, r3, #31
 80006a2:	fa20 f303 	lsr.w	r3, r0, r3
 80006a6:	4a09      	ldr	r2, [pc, #36]	; (80006cc <HAL_Init+0x54>)
 80006a8:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80006aa:	4b09      	ldr	r3, [pc, #36]	; (80006d0 <HAL_Init+0x58>)
 80006ac:	6018      	str	r0, [r3, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80006ae:	2000      	movs	r0, #0
 80006b0:	f007 f9ec 	bl	8007a8c <HAL_InitTick>
 80006b4:	b110      	cbz	r0, 80006bc <HAL_Init+0x44>
  {
    return HAL_ERROR;
 80006b6:	2401      	movs	r4, #1
  /* Init the low level hardware */
  HAL_MspInit();

  /* Return function status */
  return HAL_OK;
}
 80006b8:	4620      	mov	r0, r4
 80006ba:	bd10      	pop	{r4, pc}
 80006bc:	4604      	mov	r4, r0
  HAL_MspInit();
 80006be:	f007 f867 	bl	8007790 <HAL_MspInit>
  return HAL_OK;
 80006c2:	e7f9      	b.n	80006b8 <HAL_Init+0x40>
 80006c4:	58024400 	.word	0x58024400
 80006c8:	08009204 	.word	0x08009204
 80006cc:	2000011c 	.word	0x2000011c
 80006d0:	20000118 	.word	0x20000118

080006d4 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += (uint32_t)uwTickFreq;
 80006d4:	4b03      	ldr	r3, [pc, #12]	; (80006e4 <HAL_IncTick+0x10>)
 80006d6:	781b      	ldrb	r3, [r3, #0]
 80006d8:	4a03      	ldr	r2, [pc, #12]	; (80006e8 <HAL_IncTick+0x14>)
 80006da:	6811      	ldr	r1, [r2, #0]
 80006dc:	440b      	add	r3, r1
 80006de:	6013      	str	r3, [r2, #0]
}
 80006e0:	4770      	bx	lr
 80006e2:	bf00      	nop
 80006e4:	20000000 	.word	0x20000000
 80006e8:	2000060c 	.word	0x2000060c

080006ec <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 80006ec:	4b01      	ldr	r3, [pc, #4]	; (80006f4 <HAL_GetTick+0x8>)
 80006ee:	6818      	ldr	r0, [r3, #0]
}
 80006f0:	4770      	bx	lr
 80006f2:	bf00      	nop
 80006f4:	2000060c 	.word	0x2000060c

080006f8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80006f8:	b538      	push	{r3, r4, r5, lr}
 80006fa:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 80006fc:	f7ff fff6 	bl	80006ec <HAL_GetTick>
 8000700:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000702:	f1b4 3fff 	cmp.w	r4, #4294967295
 8000706:	d002      	beq.n	800070e <HAL_Delay+0x16>
  {
    wait += (uint32_t)(uwTickFreq);
 8000708:	4b04      	ldr	r3, [pc, #16]	; (800071c <HAL_Delay+0x24>)
 800070a:	781b      	ldrb	r3, [r3, #0]
 800070c:	441c      	add	r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800070e:	f7ff ffed 	bl	80006ec <HAL_GetTick>
 8000712:	1b40      	subs	r0, r0, r5
 8000714:	42a0      	cmp	r0, r4
 8000716:	d3fa      	bcc.n	800070e <HAL_Delay+0x16>
  {
  }
}
 8000718:	bd38      	pop	{r3, r4, r5, pc}
 800071a:	bf00      	nop
 800071c:	20000000 	.word	0x20000000

08000720 <HAL_GetREVID>:
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
   return((DBGMCU->IDCODE) >> 16);
 8000720:	4b01      	ldr	r3, [pc, #4]	; (8000728 <HAL_GetREVID+0x8>)
 8000722:	6818      	ldr	r0, [r3, #0]
}
 8000724:	0c00      	lsrs	r0, r0, #16
 8000726:	4770      	bx	lr
 8000728:	5c001000 	.word	0x5c001000

0800072c <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800072c:	4906      	ldr	r1, [pc, #24]	; (8000748 <HAL_NVIC_SetPriorityGrouping+0x1c>)
 800072e:	68cb      	ldr	r3, [r1, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000730:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8000734:	041b      	lsls	r3, r3, #16
 8000736:	0c1b      	lsrs	r3, r3, #16
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000738:	0200      	lsls	r0, r0, #8
 800073a:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800073e:	4303      	orrs	r3, r0
  reg_value  =  (reg_value                                   |
 8000740:	4a02      	ldr	r2, [pc, #8]	; (800074c <HAL_NVIC_SetPriorityGrouping+0x20>)
 8000742:	431a      	orrs	r2, r3
  SCB->AIRCR =  reg_value;
 8000744:	60ca      	str	r2, [r1, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 8000746:	4770      	bx	lr
 8000748:	e000ed00 	.word	0xe000ed00
 800074c:	05fa0000 	.word	0x05fa0000

08000750 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000750:	b430      	push	{r4, r5}
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000752:	4b15      	ldr	r3, [pc, #84]	; (80007a8 <HAL_NVIC_SetPriority+0x58>)
 8000754:	68db      	ldr	r3, [r3, #12]
 8000756:	f3c3 2302 	ubfx	r3, r3, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800075a:	f1c3 0407 	rsb	r4, r3, #7
 800075e:	2c04      	cmp	r4, #4
 8000760:	bf28      	it	cs
 8000762:	2404      	movcs	r4, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000764:	1d1d      	adds	r5, r3, #4
 8000766:	2d06      	cmp	r5, #6
 8000768:	d914      	bls.n	8000794 <HAL_NVIC_SetPriority+0x44>
 800076a:	3b03      	subs	r3, #3

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800076c:	f04f 35ff 	mov.w	r5, #4294967295
 8000770:	fa05 f404 	lsl.w	r4, r5, r4
 8000774:	ea21 0104 	bic.w	r1, r1, r4
 8000778:	4099      	lsls	r1, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800077a:	fa05 f303 	lsl.w	r3, r5, r3
 800077e:	ea22 0303 	bic.w	r3, r2, r3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000782:	4319      	orrs	r1, r3
  if ((int32_t)(IRQn) >= 0)
 8000784:	2800      	cmp	r0, #0
 8000786:	db07      	blt.n	8000798 <HAL_NVIC_SetPriority+0x48>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000788:	0109      	lsls	r1, r1, #4
 800078a:	b2c9      	uxtb	r1, r1
 800078c:	4b07      	ldr	r3, [pc, #28]	; (80007ac <HAL_NVIC_SetPriority+0x5c>)
 800078e:	5419      	strb	r1, [r3, r0]
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8000790:	bc30      	pop	{r4, r5}
 8000792:	4770      	bx	lr
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000794:	2300      	movs	r3, #0
 8000796:	e7e9      	b.n	800076c <HAL_NVIC_SetPriority+0x1c>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000798:	f000 000f 	and.w	r0, r0, #15
 800079c:	0109      	lsls	r1, r1, #4
 800079e:	b2c9      	uxtb	r1, r1
 80007a0:	4b03      	ldr	r3, [pc, #12]	; (80007b0 <HAL_NVIC_SetPriority+0x60>)
 80007a2:	5419      	strb	r1, [r3, r0]
 80007a4:	e7f4      	b.n	8000790 <HAL_NVIC_SetPriority+0x40>
 80007a6:	bf00      	nop
 80007a8:	e000ed00 	.word	0xe000ed00
 80007ac:	e000e400 	.word	0xe000e400
 80007b0:	e000ed14 	.word	0xe000ed14

080007b4 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 80007b4:	2800      	cmp	r0, #0
 80007b6:	db07      	blt.n	80007c8 <HAL_NVIC_EnableIRQ+0x14>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80007b8:	f000 021f 	and.w	r2, r0, #31
 80007bc:	0940      	lsrs	r0, r0, #5
 80007be:	2301      	movs	r3, #1
 80007c0:	4093      	lsls	r3, r2
 80007c2:	4a02      	ldr	r2, [pc, #8]	; (80007cc <HAL_NVIC_EnableIRQ+0x18>)
 80007c4:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 80007c8:	4770      	bx	lr
 80007ca:	bf00      	nop
 80007cc:	e000e100 	.word	0xe000e100

080007d0 <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
 */
static HAL_StatusTypeDef FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 80007d0:	b430      	push	{r4, r5}
  uint32_t RAMcounter;
  uint32_t StartAddress;

  StartAddress = hfdcan->Init.MessageRAMOffset;
 80007d2:	6b44      	ldr	r4, [r0, #52]	; 0x34

  /* Standard filter list start address */
  MODIFY_REG(hfdcan->Instance->SIDFC, FDCAN_SIDFC_FLSSA, (StartAddress << FDCAN_SIDFC_FLSSA_Pos));
 80007d4:	6802      	ldr	r2, [r0, #0]
 80007d6:	f8d2 1084 	ldr.w	r1, [r2, #132]	; 0x84
 80007da:	4b70      	ldr	r3, [pc, #448]	; (800099c <FDCAN_CalcultateRamBlockAddresses+0x1cc>)
 80007dc:	4019      	ands	r1, r3
 80007de:	ea41 0184 	orr.w	r1, r1, r4, lsl #2
 80007e2:	f8c2 1084 	str.w	r1, [r2, #132]	; 0x84

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->SIDFC, FDCAN_SIDFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_SIDFC_LSS_Pos));
 80007e6:	6802      	ldr	r2, [r0, #0]
 80007e8:	f8d2 1084 	ldr.w	r1, [r2, #132]	; 0x84
 80007ec:	f421 017f 	bic.w	r1, r1, #16711680	; 0xff0000
 80007f0:	6b85      	ldr	r5, [r0, #56]	; 0x38
 80007f2:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 80007f6:	f8c2 1084 	str.w	r1, [r2, #132]	; 0x84

  /* Extended filter list start address */
  StartAddress += hfdcan->Init.StdFiltersNbr;
 80007fa:	6b82      	ldr	r2, [r0, #56]	; 0x38
 80007fc:	4422      	add	r2, r4
  MODIFY_REG(hfdcan->Instance->XIDFC, FDCAN_XIDFC_FLESA, (StartAddress << FDCAN_XIDFC_FLESA_Pos));
 80007fe:	6804      	ldr	r4, [r0, #0]
 8000800:	f8d4 1088 	ldr.w	r1, [r4, #136]	; 0x88
 8000804:	4019      	ands	r1, r3
 8000806:	ea41 0182 	orr.w	r1, r1, r2, lsl #2
 800080a:	f8c4 1088 	str.w	r1, [r4, #136]	; 0x88

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->XIDFC, FDCAN_XIDFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_XIDFC_LSE_Pos));
 800080e:	6804      	ldr	r4, [r0, #0]
 8000810:	f8d4 1088 	ldr.w	r1, [r4, #136]	; 0x88
 8000814:	f421 01fe 	bic.w	r1, r1, #8323072	; 0x7f0000
 8000818:	6bc5      	ldr	r5, [r0, #60]	; 0x3c
 800081a:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800081e:	f8c4 1088 	str.w	r1, [r4, #136]	; 0x88

  /* Rx FIFO 0 start address */
  StartAddress += (hfdcan->Init.ExtFiltersNbr * 2U);
 8000822:	6bc1      	ldr	r1, [r0, #60]	; 0x3c
 8000824:	eb02 0241 	add.w	r2, r2, r1, lsl #1
  MODIFY_REG(hfdcan->Instance->RXF0C, FDCAN_RXF0C_F0SA, (StartAddress << FDCAN_RXF0C_F0SA_Pos));
 8000828:	6804      	ldr	r4, [r0, #0]
 800082a:	f8d4 10a0 	ldr.w	r1, [r4, #160]	; 0xa0
 800082e:	4019      	ands	r1, r3
 8000830:	ea41 0182 	orr.w	r1, r1, r2, lsl #2
 8000834:	f8c4 10a0 	str.w	r1, [r4, #160]	; 0xa0

  /* Rx FIFO 0 elements number */
  MODIFY_REG(hfdcan->Instance->RXF0C, FDCAN_RXF0C_F0S, (hfdcan->Init.RxFifo0ElmtsNbr << FDCAN_RXF0C_F0S_Pos));
 8000838:	6804      	ldr	r4, [r0, #0]
 800083a:	f8d4 10a0 	ldr.w	r1, [r4, #160]	; 0xa0
 800083e:	f421 01fe 	bic.w	r1, r1, #8323072	; 0x7f0000
 8000842:	6c05      	ldr	r5, [r0, #64]	; 0x40
 8000844:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000848:	f8c4 10a0 	str.w	r1, [r4, #160]	; 0xa0

  /* Rx FIFO 1 start address */
  StartAddress += (hfdcan->Init.RxFifo0ElmtsNbr * hfdcan->Init.RxFifo0ElmtSize);
 800084c:	6c04      	ldr	r4, [r0, #64]	; 0x40
 800084e:	6c41      	ldr	r1, [r0, #68]	; 0x44
 8000850:	fb01 2404 	mla	r4, r1, r4, r2
  MODIFY_REG(hfdcan->Instance->RXF1C, FDCAN_RXF1C_F1SA, (StartAddress << FDCAN_RXF1C_F1SA_Pos));
 8000854:	6802      	ldr	r2, [r0, #0]
 8000856:	f8d2 10b0 	ldr.w	r1, [r2, #176]	; 0xb0
 800085a:	4019      	ands	r1, r3
 800085c:	ea41 0184 	orr.w	r1, r1, r4, lsl #2
 8000860:	f8c2 10b0 	str.w	r1, [r2, #176]	; 0xb0

  /* Rx FIFO 1 elements number */
  MODIFY_REG(hfdcan->Instance->RXF1C, FDCAN_RXF1C_F1S, (hfdcan->Init.RxFifo1ElmtsNbr << FDCAN_RXF1C_F1S_Pos));
 8000864:	6802      	ldr	r2, [r0, #0]
 8000866:	f8d2 10b0 	ldr.w	r1, [r2, #176]	; 0xb0
 800086a:	f421 01fe 	bic.w	r1, r1, #8323072	; 0x7f0000
 800086e:	6c85      	ldr	r5, [r0, #72]	; 0x48
 8000870:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000874:	f8c2 10b0 	str.w	r1, [r2, #176]	; 0xb0

  /* Rx buffer list start address */
  StartAddress += (hfdcan->Init.RxFifo1ElmtsNbr * hfdcan->Init.RxFifo1ElmtSize);
 8000878:	6c82      	ldr	r2, [r0, #72]	; 0x48
 800087a:	6cc1      	ldr	r1, [r0, #76]	; 0x4c
 800087c:	fb01 4402 	mla	r4, r1, r2, r4
  MODIFY_REG(hfdcan->Instance->RXBC, FDCAN_RXBC_RBSA, (StartAddress << FDCAN_RXBC_RBSA_Pos));
 8000880:	6802      	ldr	r2, [r0, #0]
 8000882:	f8d2 10ac 	ldr.w	r1, [r2, #172]	; 0xac
 8000886:	4019      	ands	r1, r3
 8000888:	ea41 0184 	orr.w	r1, r1, r4, lsl #2
 800088c:	f8c2 10ac 	str.w	r1, [r2, #172]	; 0xac

  /* Tx event FIFO start address */
  StartAddress += (hfdcan->Init.RxBuffersNbr * hfdcan->Init.RxBufferSize);
 8000890:	6d02      	ldr	r2, [r0, #80]	; 0x50
 8000892:	6d41      	ldr	r1, [r0, #84]	; 0x54
 8000894:	fb01 4202 	mla	r2, r1, r2, r4
  MODIFY_REG(hfdcan->Instance->TXEFC, FDCAN_TXEFC_EFSA, (StartAddress << FDCAN_TXEFC_EFSA_Pos));
 8000898:	6804      	ldr	r4, [r0, #0]
 800089a:	f8d4 10f0 	ldr.w	r1, [r4, #240]	; 0xf0
 800089e:	4019      	ands	r1, r3
 80008a0:	ea41 0182 	orr.w	r1, r1, r2, lsl #2
 80008a4:	f8c4 10f0 	str.w	r1, [r4, #240]	; 0xf0

  /* Tx event FIFO elements number */
  MODIFY_REG(hfdcan->Instance->TXEFC, FDCAN_TXEFC_EFS, (hfdcan->Init.TxEventsNbr << FDCAN_TXEFC_EFS_Pos));
 80008a8:	6804      	ldr	r4, [r0, #0]
 80008aa:	f8d4 10f0 	ldr.w	r1, [r4, #240]	; 0xf0
 80008ae:	f421 117c 	bic.w	r1, r1, #4128768	; 0x3f0000
 80008b2:	6d85      	ldr	r5, [r0, #88]	; 0x58
 80008b4:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 80008b8:	f8c4 10f0 	str.w	r1, [r4, #240]	; 0xf0

  /* Tx buffer list start address */
  StartAddress += (hfdcan->Init.TxEventsNbr * 2U);
 80008bc:	6d81      	ldr	r1, [r0, #88]	; 0x58
 80008be:	eb02 0241 	add.w	r2, r2, r1, lsl #1
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_TBSA, (StartAddress << FDCAN_TXBC_TBSA_Pos));
 80008c2:	6804      	ldr	r4, [r0, #0]
 80008c4:	f8d4 10c0 	ldr.w	r1, [r4, #192]	; 0xc0
 80008c8:	400b      	ands	r3, r1
 80008ca:	ea43 0282 	orr.w	r2, r3, r2, lsl #2
 80008ce:	f8c4 20c0 	str.w	r2, [r4, #192]	; 0xc0

  /* Dedicated Tx buffers number */
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_NDTB, (hfdcan->Init.TxBuffersNbr << FDCAN_TXBC_NDTB_Pos));
 80008d2:	6802      	ldr	r2, [r0, #0]
 80008d4:	f8d2 30c0 	ldr.w	r3, [r2, #192]	; 0xc0
 80008d8:	f423 137c 	bic.w	r3, r3, #4128768	; 0x3f0000
 80008dc:	6dc1      	ldr	r1, [r0, #92]	; 0x5c
 80008de:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80008e2:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0

  /* Tx FIFO/queue elements number */
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_TFQS, (hfdcan->Init.TxFifoQueueElmtsNbr << FDCAN_TXBC_TFQS_Pos));
 80008e6:	6802      	ldr	r2, [r0, #0]
 80008e8:	f8d2 30c0 	ldr.w	r3, [r2, #192]	; 0xc0
 80008ec:	f023 537c 	bic.w	r3, r3, #1056964608	; 0x3f000000
 80008f0:	6e01      	ldr	r1, [r0, #96]	; 0x60
 80008f2:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 80008f6:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0

  hfdcan->msgRam.StandardFilterSA = SRAMCAN_BASE + (hfdcan->Init.MessageRAMOffset * 4U);
 80008fa:	6b43      	ldr	r3, [r0, #52]	; 0x34
 80008fc:	4a28      	ldr	r2, [pc, #160]	; (80009a0 <FDCAN_CalcultateRamBlockAddresses+0x1d0>)
 80008fe:	441a      	add	r2, r3
 8000900:	0092      	lsls	r2, r2, #2
 8000902:	66c2      	str	r2, [r0, #108]	; 0x6c
  hfdcan->msgRam.ExtendedFilterSA = hfdcan->msgRam.StandardFilterSA + (hfdcan->Init.StdFiltersNbr * 4U);
 8000904:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8000906:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800090a:	6703      	str	r3, [r0, #112]	; 0x70
  hfdcan->msgRam.RxFIFO0SA = hfdcan->msgRam.ExtendedFilterSA + (hfdcan->Init.ExtFiltersNbr * 2U * 4U);
 800090c:	6bc1      	ldr	r1, [r0, #60]	; 0x3c
 800090e:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
 8000912:	6743      	str	r3, [r0, #116]	; 0x74
  hfdcan->msgRam.RxFIFO1SA = hfdcan->msgRam.RxFIFO0SA + (hfdcan->Init.RxFifo0ElmtsNbr * hfdcan->Init.RxFifo0ElmtSize * 4U);
 8000914:	6c04      	ldr	r4, [r0, #64]	; 0x40
 8000916:	6c41      	ldr	r1, [r0, #68]	; 0x44
 8000918:	fb01 f104 	mul.w	r1, r1, r4
 800091c:	eb03 0381 	add.w	r3, r3, r1, lsl #2
 8000920:	6783      	str	r3, [r0, #120]	; 0x78
  hfdcan->msgRam.RxBufferSA = hfdcan->msgRam.RxFIFO1SA + (hfdcan->Init.RxFifo1ElmtsNbr * hfdcan->Init.RxFifo1ElmtSize * 4U);
 8000922:	6c84      	ldr	r4, [r0, #72]	; 0x48
 8000924:	6cc1      	ldr	r1, [r0, #76]	; 0x4c
 8000926:	fb01 f104 	mul.w	r1, r1, r4
 800092a:	eb03 0381 	add.w	r3, r3, r1, lsl #2
 800092e:	67c3      	str	r3, [r0, #124]	; 0x7c
  hfdcan->msgRam.TxEventFIFOSA = hfdcan->msgRam.RxBufferSA + (hfdcan->Init.RxBuffersNbr * hfdcan->Init.RxBufferSize * 4U);
 8000930:	6d04      	ldr	r4, [r0, #80]	; 0x50
 8000932:	6d41      	ldr	r1, [r0, #84]	; 0x54
 8000934:	fb01 f104 	mul.w	r1, r1, r4
 8000938:	eb03 0381 	add.w	r3, r3, r1, lsl #2
 800093c:	f8c0 3080 	str.w	r3, [r0, #128]	; 0x80
  hfdcan->msgRam.TxBufferSA = hfdcan->msgRam.TxEventFIFOSA + (hfdcan->Init.TxEventsNbr * 2U * 4U);
 8000940:	6d81      	ldr	r1, [r0, #88]	; 0x58
 8000942:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
 8000946:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
  hfdcan->msgRam.TxFIFOQSA = hfdcan->msgRam.TxBufferSA + (hfdcan->Init.TxBuffersNbr * hfdcan->Init.TxElmtSize * 4U);
 800094a:	6dc4      	ldr	r4, [r0, #92]	; 0x5c
 800094c:	6e85      	ldr	r5, [r0, #104]	; 0x68
 800094e:	fb05 f404 	mul.w	r4, r5, r4
 8000952:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8000956:	f8c0 3088 	str.w	r3, [r0, #136]	; 0x88

  hfdcan->msgRam.EndAddress = hfdcan->msgRam.TxFIFOQSA + (hfdcan->Init.TxFifoQueueElmtsNbr * hfdcan->Init.TxElmtSize * 4U);
 800095a:	6e01      	ldr	r1, [r0, #96]	; 0x60
 800095c:	fb01 f105 	mul.w	r1, r1, r5
 8000960:	eb03 0381 	add.w	r3, r3, r1, lsl #2
 8000964:	f8c0 3090 	str.w	r3, [r0, #144]	; 0x90

  if (hfdcan->msgRam.EndAddress > FDCAN_MESSAGE_RAM_END_ADDRESS) /* Last address of the Message RAM */
 8000968:	490e      	ldr	r1, [pc, #56]	; (80009a4 <FDCAN_CalcultateRamBlockAddresses+0x1d4>)
 800096a:	428b      	cmp	r3, r1
 800096c:	d807      	bhi.n	800097e <FDCAN_CalcultateRamBlockAddresses+0x1ae>
    return HAL_ERROR;
  }
  else
  {
    /* Flush the allocated Message RAM area */
    for (RAMcounter = hfdcan->msgRam.StandardFilterSA; RAMcounter < hfdcan->msgRam.EndAddress; RAMcounter += 4U)
 800096e:	f8d0 3090 	ldr.w	r3, [r0, #144]	; 0x90
 8000972:	4293      	cmp	r3, r2
 8000974:	d90e      	bls.n	8000994 <FDCAN_CalcultateRamBlockAddresses+0x1c4>
    {
      *(uint32_t *)(RAMcounter) = 0x00000000;
 8000976:	2300      	movs	r3, #0
 8000978:	f842 3b04 	str.w	r3, [r2], #4
    for (RAMcounter = hfdcan->msgRam.StandardFilterSA; RAMcounter < hfdcan->msgRam.EndAddress; RAMcounter += 4U)
 800097c:	e7f7      	b.n	800096e <FDCAN_CalcultateRamBlockAddresses+0x19e>
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 800097e:	f8d0 309c 	ldr.w	r3, [r0, #156]	; 0x9c
 8000982:	f043 0320 	orr.w	r3, r3, #32
 8000986:	f8c0 309c 	str.w	r3, [r0, #156]	; 0x9c
    hfdcan->State = HAL_FDCAN_STATE_ERROR;
 800098a:	2303      	movs	r3, #3
 800098c:	f880 3098 	strb.w	r3, [r0, #152]	; 0x98
    return HAL_ERROR;
 8000990:	2001      	movs	r0, #1
 8000992:	e000      	b.n	8000996 <FDCAN_CalcultateRamBlockAddresses+0x1c6>
    }
  }

  /* Return function status */
  return HAL_OK;
 8000994:	2000      	movs	r0, #0
}
 8000996:	bc30      	pop	{r4, r5}
 8000998:	4770      	bx	lr
 800099a:	bf00      	nop
 800099c:	ffff0003 	.word	0xffff0003
 80009a0:	10002b00 	.word	0x10002b00
 80009a4:	4000d3fc 	.word	0x4000d3fc

080009a8 <FDCAN_CopyMessageToRAM>:
  * @param  pTxData pointer to a buffer containing the payload of the Tx frame.
  * @param  BufferIndex index of the buffer to be configured.
  * @retval HAL status
 */
static void FDCAN_CopyMessageToRAM(FDCAN_HandleTypeDef *hfdcan, FDCAN_TxHeaderTypeDef *pTxHeader, uint8_t *pTxData, uint32_t BufferIndex)
{
 80009a8:	b4f0      	push	{r4, r5, r6, r7}
  uint32_t TxElementW2;
  uint32_t *TxAddress;
  uint32_t ByteCounter;

  /* Build first word of Tx header element */
  if (pTxHeader->IdType == FDCAN_STANDARD_ID)
 80009aa:	684c      	ldr	r4, [r1, #4]
 80009ac:	2c00      	cmp	r4, #0
 80009ae:	d12f      	bne.n	8000a10 <FDCAN_CopyMessageToRAM+0x68>
  {
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 80009b0:	690e      	ldr	r6, [r1, #16]
                   FDCAN_STANDARD_ID |
                   pTxHeader->TxFrameType |
 80009b2:	688c      	ldr	r4, [r1, #8]
                   FDCAN_STANDARD_ID |
 80009b4:	4326      	orrs	r6, r4
                   (pTxHeader->Identifier << 18));
 80009b6:	680c      	ldr	r4, [r1, #0]
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 80009b8:	ea46 4684 	orr.w	r6, r6, r4, lsl #18
                   pTxHeader->TxFrameType |
                   pTxHeader->Identifier);
  }

  /* Build second word of Tx header element */
  TxElementW2 = ((pTxHeader->MessageMarker << 24) |
 80009bc:	6a0d      	ldr	r5, [r1, #32]
                 pTxHeader->TxEventFifoControl |
 80009be:	69cc      	ldr	r4, [r1, #28]
  TxElementW2 = ((pTxHeader->MessageMarker << 24) |
 80009c0:	ea44 6405 	orr.w	r4, r4, r5, lsl #24
                 pTxHeader->FDFormat |
 80009c4:	698d      	ldr	r5, [r1, #24]
                 pTxHeader->TxEventFifoControl |
 80009c6:	432c      	orrs	r4, r5
                 pTxHeader->BitRateSwitch |
 80009c8:	694d      	ldr	r5, [r1, #20]
                 pTxHeader->FDFormat |
 80009ca:	432c      	orrs	r4, r5
                 pTxHeader->DataLength);
 80009cc:	68cd      	ldr	r5, [r1, #12]
  TxElementW2 = ((pTxHeader->MessageMarker << 24) |
 80009ce:	432c      	orrs	r4, r5

  /* Calculate Tx element address */
  TxAddress = (uint32_t *)(hfdcan->msgRam.TxBufferSA + (BufferIndex * hfdcan->Init.TxElmtSize * 4U));
 80009d0:	f8d0 7084 	ldr.w	r7, [r0, #132]	; 0x84
 80009d4:	6e80      	ldr	r0, [r0, #104]	; 0x68
 80009d6:	fb03 f300 	mul.w	r3, r3, r0
 80009da:	eb07 0583 	add.w	r5, r7, r3, lsl #2

  /* Write Tx element header to the message RAM */
  *TxAddress = TxElementW1;
 80009de:	f847 6023 	str.w	r6, [r7, r3, lsl #2]
  TxAddress++;
  *TxAddress = TxElementW2;
 80009e2:	606c      	str	r4, [r5, #4]
  TxAddress++;
 80009e4:	3508      	adds	r5, #8

  /* Write Tx payload to the message RAM */
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength >> 16]; ByteCounter += 4U)
 80009e6:	2000      	movs	r0, #0
 80009e8:	89cb      	ldrh	r3, [r1, #14]
 80009ea:	4c0e      	ldr	r4, [pc, #56]	; (8000a24 <FDCAN_CopyMessageToRAM+0x7c>)
 80009ec:	5ce3      	ldrb	r3, [r4, r3]
 80009ee:	4283      	cmp	r3, r0
 80009f0:	d916      	bls.n	8000a20 <FDCAN_CopyMessageToRAM+0x78>
  {
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24) |
 80009f2:	1814      	adds	r4, r2, r0
 80009f4:	78e6      	ldrb	r6, [r4, #3]
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16) |
 80009f6:	78a3      	ldrb	r3, [r4, #2]
 80009f8:	041b      	lsls	r3, r3, #16
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24) |
 80009fa:	ea43 6306 	orr.w	r3, r3, r6, lsl #24
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8) |
 80009fe:	7864      	ldrb	r4, [r4, #1]
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16) |
 8000a00:	ea43 2304 	orr.w	r3, r3, r4, lsl #8
                  (uint32_t)pTxData[ByteCounter]);
 8000a04:	5c14      	ldrb	r4, [r2, r0]
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8) |
 8000a06:	4323      	orrs	r3, r4
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24) |
 8000a08:	f845 3b04 	str.w	r3, [r5], #4
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength >> 16]; ByteCounter += 4U)
 8000a0c:	3004      	adds	r0, #4
 8000a0e:	e7eb      	b.n	80009e8 <FDCAN_CopyMessageToRAM+0x40>
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8000a10:	690c      	ldr	r4, [r1, #16]
                   pTxHeader->TxFrameType |
 8000a12:	688e      	ldr	r6, [r1, #8]
                   FDCAN_EXTENDED_ID |
 8000a14:	4326      	orrs	r6, r4
                   pTxHeader->Identifier);
 8000a16:	680c      	ldr	r4, [r1, #0]
                   pTxHeader->TxFrameType |
 8000a18:	4326      	orrs	r6, r4
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8000a1a:	f046 4680 	orr.w	r6, r6, #1073741824	; 0x40000000
 8000a1e:	e7cd      	b.n	80009bc <FDCAN_CopyMessageToRAM+0x14>
    TxAddress++;
  }
}
 8000a20:	bcf0      	pop	{r4, r5, r6, r7}
 8000a22:	4770      	bx	lr
 8000a24:	08009188 	.word	0x08009188

08000a28 <HAL_FDCAN_Init>:
{
 8000a28:	b530      	push	{r4, r5, lr}
 8000a2a:	b095      	sub	sp, #84	; 0x54
 8000a2c:	4604      	mov	r4, r0
  const uint32_t CvtEltSize[] = {0, 0, 0, 0, 0, 1, 2, 3, 4, 0, 5, 0, 0, 0, 6, 0, 0, 0, 7};
 8000a2e:	224c      	movs	r2, #76	; 0x4c
 8000a30:	49a0      	ldr	r1, [pc, #640]	; (8000cb4 <HAL_FDCAN_Init+0x28c>)
 8000a32:	a801      	add	r0, sp, #4
 8000a34:	f007 fbd2 	bl	80081dc <memcpy>
  if (hfdcan == NULL)
 8000a38:	2c00      	cmp	r4, #0
 8000a3a:	f000 8138 	beq.w	8000cae <HAL_FDCAN_Init+0x286>
  if (hfdcan->Instance == FDCAN1)
 8000a3e:	6823      	ldr	r3, [r4, #0]
 8000a40:	4a9d      	ldr	r2, [pc, #628]	; (8000cb8 <HAL_FDCAN_Init+0x290>)
 8000a42:	4293      	cmp	r3, r2
 8000a44:	d020      	beq.n	8000a88 <HAL_FDCAN_Init+0x60>
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 8000a46:	f894 3098 	ldrb.w	r3, [r4, #152]	; 0x98
 8000a4a:	b30b      	cbz	r3, 8000a90 <HAL_FDCAN_Init+0x68>
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 8000a4c:	6822      	ldr	r2, [r4, #0]
 8000a4e:	6993      	ldr	r3, [r2, #24]
 8000a50:	f023 0310 	bic.w	r3, r3, #16
 8000a54:	6193      	str	r3, [r2, #24]
  tickstart = HAL_GetTick();
 8000a56:	f7ff fe49 	bl	80006ec <HAL_GetTick>
 8000a5a:	4605      	mov	r5, r0
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8000a5c:	6823      	ldr	r3, [r4, #0]
 8000a5e:	699a      	ldr	r2, [r3, #24]
 8000a60:	f012 0f08 	tst.w	r2, #8
 8000a64:	d01a      	beq.n	8000a9c <HAL_FDCAN_Init+0x74>
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8000a66:	f7ff fe41 	bl	80006ec <HAL_GetTick>
 8000a6a:	1b43      	subs	r3, r0, r5
 8000a6c:	2b0a      	cmp	r3, #10
 8000a6e:	d9f5      	bls.n	8000a5c <HAL_FDCAN_Init+0x34>
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8000a70:	f8d4 309c 	ldr.w	r3, [r4, #156]	; 0x9c
 8000a74:	f043 0301 	orr.w	r3, r3, #1
 8000a78:	f8c4 309c 	str.w	r3, [r4, #156]	; 0x9c
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8000a7c:	2303      	movs	r3, #3
 8000a7e:	f884 3098 	strb.w	r3, [r4, #152]	; 0x98
      return HAL_ERROR;
 8000a82:	2001      	movs	r0, #1
}
 8000a84:	b015      	add	sp, #84	; 0x54
 8000a86:	bd30      	pop	{r4, r5, pc}
    hfdcan->ttcan = (TTCAN_TypeDef *)((uint32_t)hfdcan->Instance + 0x100U);
 8000a88:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8000a8c:	6063      	str	r3, [r4, #4]
 8000a8e:	e7da      	b.n	8000a46 <HAL_FDCAN_Init+0x1e>
    hfdcan->Lock = HAL_UNLOCKED;
 8000a90:	f884 3099 	strb.w	r3, [r4, #153]	; 0x99
    HAL_FDCAN_MspInit(hfdcan);
 8000a94:	4620      	mov	r0, r4
 8000a96:	f006 fe8d 	bl	80077b4 <HAL_FDCAN_MspInit>
 8000a9a:	e7d7      	b.n	8000a4c <HAL_FDCAN_Init+0x24>
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8000a9c:	699a      	ldr	r2, [r3, #24]
 8000a9e:	f042 0201 	orr.w	r2, r2, #1
 8000aa2:	619a      	str	r2, [r3, #24]
  tickstart = HAL_GetTick();
 8000aa4:	f7ff fe22 	bl	80006ec <HAL_GetTick>
 8000aa8:	4605      	mov	r5, r0
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8000aaa:	6823      	ldr	r3, [r4, #0]
 8000aac:	699a      	ldr	r2, [r3, #24]
 8000aae:	f012 0f01 	tst.w	r2, #1
 8000ab2:	d10f      	bne.n	8000ad4 <HAL_FDCAN_Init+0xac>
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8000ab4:	f7ff fe1a 	bl	80006ec <HAL_GetTick>
 8000ab8:	1b40      	subs	r0, r0, r5
 8000aba:	280a      	cmp	r0, #10
 8000abc:	d9f5      	bls.n	8000aaa <HAL_FDCAN_Init+0x82>
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8000abe:	f8d4 309c 	ldr.w	r3, [r4, #156]	; 0x9c
 8000ac2:	f043 0301 	orr.w	r3, r3, #1
 8000ac6:	f8c4 309c 	str.w	r3, [r4, #156]	; 0x9c
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8000aca:	2303      	movs	r3, #3
 8000acc:	f884 3098 	strb.w	r3, [r4, #152]	; 0x98
      return HAL_ERROR;
 8000ad0:	2001      	movs	r0, #1
 8000ad2:	e7d7      	b.n	8000a84 <HAL_FDCAN_Init+0x5c>
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 8000ad4:	699a      	ldr	r2, [r3, #24]
 8000ad6:	f042 0202 	orr.w	r2, r2, #2
 8000ada:	619a      	str	r2, [r3, #24]
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 8000adc:	7c23      	ldrb	r3, [r4, #16]
 8000ade:	2b01      	cmp	r3, #1
 8000ae0:	d040      	beq.n	8000b64 <HAL_FDCAN_Init+0x13c>
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8000ae2:	6822      	ldr	r2, [r4, #0]
 8000ae4:	6993      	ldr	r3, [r2, #24]
 8000ae6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000aea:	6193      	str	r3, [r2, #24]
  if (hfdcan->Init.TransmitPause == ENABLE)
 8000aec:	7c63      	ldrb	r3, [r4, #17]
 8000aee:	2b01      	cmp	r3, #1
 8000af0:	d03e      	beq.n	8000b70 <HAL_FDCAN_Init+0x148>
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8000af2:	6822      	ldr	r2, [r4, #0]
 8000af4:	6993      	ldr	r3, [r2, #24]
 8000af6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8000afa:	6193      	str	r3, [r2, #24]
  if (hfdcan->Init.ProtocolException == ENABLE)
 8000afc:	7ca3      	ldrb	r3, [r4, #18]
 8000afe:	2b01      	cmp	r3, #1
 8000b00:	d03c      	beq.n	8000b7c <HAL_FDCAN_Init+0x154>
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8000b02:	6822      	ldr	r2, [r4, #0]
 8000b04:	6993      	ldr	r3, [r2, #24]
 8000b06:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000b0a:	6193      	str	r3, [r2, #24]
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 8000b0c:	6822      	ldr	r2, [r4, #0]
 8000b0e:	6993      	ldr	r3, [r2, #24]
 8000b10:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8000b14:	68a1      	ldr	r1, [r4, #8]
 8000b16:	430b      	orrs	r3, r1
 8000b18:	6193      	str	r3, [r2, #24]
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 8000b1a:	6822      	ldr	r2, [r4, #0]
 8000b1c:	6993      	ldr	r3, [r2, #24]
 8000b1e:	f023 03a4 	bic.w	r3, r3, #164	; 0xa4
 8000b22:	6193      	str	r3, [r2, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8000b24:	6822      	ldr	r2, [r4, #0]
 8000b26:	6913      	ldr	r3, [r2, #16]
 8000b28:	f023 0310 	bic.w	r3, r3, #16
 8000b2c:	6113      	str	r3, [r2, #16]
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 8000b2e:	68e3      	ldr	r3, [r4, #12]
 8000b30:	2b01      	cmp	r3, #1
 8000b32:	d029      	beq.n	8000b88 <HAL_FDCAN_Init+0x160>
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 8000b34:	2b00      	cmp	r3, #0
 8000b36:	d02c      	beq.n	8000b92 <HAL_FDCAN_Init+0x16a>
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 8000b38:	2b02      	cmp	r3, #2
 8000b3a:	f000 809b 	beq.w	8000c74 <HAL_FDCAN_Init+0x24c>
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 8000b3e:	6822      	ldr	r2, [r4, #0]
 8000b40:	6993      	ldr	r3, [r2, #24]
 8000b42:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000b46:	6193      	str	r3, [r2, #24]
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8000b48:	6822      	ldr	r2, [r4, #0]
 8000b4a:	6913      	ldr	r3, [r2, #16]
 8000b4c:	f043 0310 	orr.w	r3, r3, #16
 8000b50:	6113      	str	r3, [r2, #16]
      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 8000b52:	68e3      	ldr	r3, [r4, #12]
 8000b54:	2b03      	cmp	r3, #3
 8000b56:	d11c      	bne.n	8000b92 <HAL_FDCAN_Init+0x16a>
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8000b58:	6822      	ldr	r2, [r4, #0]
 8000b5a:	6993      	ldr	r3, [r2, #24]
 8000b5c:	f043 0320 	orr.w	r3, r3, #32
 8000b60:	6193      	str	r3, [r2, #24]
 8000b62:	e016      	b.n	8000b92 <HAL_FDCAN_Init+0x16a>
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8000b64:	6822      	ldr	r2, [r4, #0]
 8000b66:	6993      	ldr	r3, [r2, #24]
 8000b68:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8000b6c:	6193      	str	r3, [r2, #24]
 8000b6e:	e7bd      	b.n	8000aec <HAL_FDCAN_Init+0xc4>
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8000b70:	6822      	ldr	r2, [r4, #0]
 8000b72:	6993      	ldr	r3, [r2, #24]
 8000b74:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000b78:	6193      	str	r3, [r2, #24]
 8000b7a:	e7bf      	b.n	8000afc <HAL_FDCAN_Init+0xd4>
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8000b7c:	6822      	ldr	r2, [r4, #0]
 8000b7e:	6993      	ldr	r3, [r2, #24]
 8000b80:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8000b84:	6193      	str	r3, [r2, #24]
 8000b86:	e7c1      	b.n	8000b0c <HAL_FDCAN_Init+0xe4>
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 8000b88:	6822      	ldr	r2, [r4, #0]
 8000b8a:	6993      	ldr	r3, [r2, #24]
 8000b8c:	f043 0304 	orr.w	r3, r3, #4
 8000b90:	6193      	str	r3, [r2, #24]
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8000b92:	69a3      	ldr	r3, [r4, #24]
 8000b94:	1e5a      	subs	r2, r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8000b96:	69e3      	ldr	r3, [r4, #28]
 8000b98:	3b01      	subs	r3, #1
 8000b9a:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8000b9c:	ea43 6342 	orr.w	r3, r3, r2, lsl #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8000ba0:	6a22      	ldr	r2, [r4, #32]
 8000ba2:	3a01      	subs	r2, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8000ba4:	4313      	orrs	r3, r2
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 8000ba6:	6962      	ldr	r2, [r4, #20]
 8000ba8:	3a01      	subs	r2, #1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8000baa:	6821      	ldr	r1, [r4, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8000bac:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8000bb0:	61cb      	str	r3, [r1, #28]
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 8000bb2:	68a3      	ldr	r3, [r4, #8]
 8000bb4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8000bb8:	d062      	beq.n	8000c80 <HAL_FDCAN_Init+0x258>
  if (hfdcan->Init.TxFifoQueueElmtsNbr > 0U)
 8000bba:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8000bbc:	b133      	cbz	r3, 8000bcc <HAL_FDCAN_Init+0x1a4>
    SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 8000bbe:	6822      	ldr	r2, [r4, #0]
 8000bc0:	f8d2 30c0 	ldr.w	r3, [r2, #192]	; 0xc0
 8000bc4:	6e61      	ldr	r1, [r4, #100]	; 0x64
 8000bc6:	430b      	orrs	r3, r1
 8000bc8:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
  if ((hfdcan->Init.TxBuffersNbr + hfdcan->Init.TxFifoQueueElmtsNbr) > 0U)
 8000bcc:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8000bce:	6e22      	ldr	r2, [r4, #96]	; 0x60
 8000bd0:	42d3      	cmn	r3, r2
 8000bd2:	d00d      	beq.n	8000bf0 <HAL_FDCAN_Init+0x1c8>
    MODIFY_REG(hfdcan->Instance->TXESC, FDCAN_TXESC_TBDS, CvtEltSize[hfdcan->Init.TxElmtSize]);
 8000bd4:	6821      	ldr	r1, [r4, #0]
 8000bd6:	f8d1 30c8 	ldr.w	r3, [r1, #200]	; 0xc8
 8000bda:	f023 0307 	bic.w	r3, r3, #7
 8000bde:	6ea2      	ldr	r2, [r4, #104]	; 0x68
 8000be0:	a814      	add	r0, sp, #80	; 0x50
 8000be2:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 8000be6:	f852 2c4c 	ldr.w	r2, [r2, #-76]
 8000bea:	4313      	orrs	r3, r2
 8000bec:	f8c1 30c8 	str.w	r3, [r1, #200]	; 0xc8
  if (hfdcan->Init.RxFifo0ElmtsNbr > 0U)
 8000bf0:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8000bf2:	b16b      	cbz	r3, 8000c10 <HAL_FDCAN_Init+0x1e8>
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_F0DS, (CvtEltSize[hfdcan->Init.RxFifo0ElmtSize] << FDCAN_RXESC_F0DS_Pos));
 8000bf4:	6821      	ldr	r1, [r4, #0]
 8000bf6:	f8d1 30bc 	ldr.w	r3, [r1, #188]	; 0xbc
 8000bfa:	f023 0307 	bic.w	r3, r3, #7
 8000bfe:	6c62      	ldr	r2, [r4, #68]	; 0x44
 8000c00:	a814      	add	r0, sp, #80	; 0x50
 8000c02:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 8000c06:	f852 2c4c 	ldr.w	r2, [r2, #-76]
 8000c0a:	4313      	orrs	r3, r2
 8000c0c:	f8c1 30bc 	str.w	r3, [r1, #188]	; 0xbc
  if (hfdcan->Init.RxFifo1ElmtsNbr > 0U)
 8000c10:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8000c12:	b173      	cbz	r3, 8000c32 <HAL_FDCAN_Init+0x20a>
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_F1DS, (CvtEltSize[hfdcan->Init.RxFifo1ElmtSize] << FDCAN_RXESC_F1DS_Pos));
 8000c14:	6821      	ldr	r1, [r4, #0]
 8000c16:	f8d1 30bc 	ldr.w	r3, [r1, #188]	; 0xbc
 8000c1a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8000c1e:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
 8000c20:	a814      	add	r0, sp, #80	; 0x50
 8000c22:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 8000c26:	f852 2c4c 	ldr.w	r2, [r2, #-76]
 8000c2a:	ea43 1302 	orr.w	r3, r3, r2, lsl #4
 8000c2e:	f8c1 30bc 	str.w	r3, [r1, #188]	; 0xbc
  if (hfdcan->Init.RxBuffersNbr > 0U)
 8000c32:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8000c34:	b173      	cbz	r3, 8000c54 <HAL_FDCAN_Init+0x22c>
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_RBDS, (CvtEltSize[hfdcan->Init.RxBufferSize] << FDCAN_RXESC_RBDS_Pos));
 8000c36:	6821      	ldr	r1, [r4, #0]
 8000c38:	f8d1 30bc 	ldr.w	r3, [r1, #188]	; 0xbc
 8000c3c:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8000c40:	6d62      	ldr	r2, [r4, #84]	; 0x54
 8000c42:	a814      	add	r0, sp, #80	; 0x50
 8000c44:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 8000c48:	f852 2c4c 	ldr.w	r2, [r2, #-76]
 8000c4c:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8000c50:	f8c1 30bc 	str.w	r3, [r1, #188]	; 0xbc
  if (hfdcan->Instance == FDCAN1)
 8000c54:	6822      	ldr	r2, [r4, #0]
 8000c56:	4b18      	ldr	r3, [pc, #96]	; (8000cb8 <HAL_FDCAN_Init+0x290>)
 8000c58:	429a      	cmp	r2, r3
 8000c5a:	d022      	beq.n	8000ca2 <HAL_FDCAN_Init+0x27a>
  hfdcan->LatestTxFifoQRequest = 0U;
 8000c5c:	2300      	movs	r3, #0
 8000c5e:	f8c4 3094 	str.w	r3, [r4, #148]	; 0x94
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8000c62:	f8c4 309c 	str.w	r3, [r4, #156]	; 0x9c
  hfdcan->State = HAL_FDCAN_STATE_READY;
 8000c66:	2301      	movs	r3, #1
 8000c68:	f884 3098 	strb.w	r3, [r4, #152]	; 0x98
  status = FDCAN_CalcultateRamBlockAddresses(hfdcan);
 8000c6c:	4620      	mov	r0, r4
 8000c6e:	f7ff fdaf 	bl	80007d0 <FDCAN_CalcultateRamBlockAddresses>
  return status;
 8000c72:	e707      	b.n	8000a84 <HAL_FDCAN_Init+0x5c>
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8000c74:	6822      	ldr	r2, [r4, #0]
 8000c76:	6993      	ldr	r3, [r2, #24]
 8000c78:	f043 0320 	orr.w	r3, r3, #32
 8000c7c:	6193      	str	r3, [r2, #24]
 8000c7e:	e788      	b.n	8000b92 <HAL_FDCAN_Init+0x16a>
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 8000c80:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8000c82:	3b01      	subs	r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)    | \
 8000c84:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8000c86:	3a01      	subs	r2, #1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 8000c88:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)    | \
 8000c8c:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8000c8e:	3a01      	subs	r2, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)    | \
 8000c90:	ea43 1302 	orr.w	r3, r3, r2, lsl #4
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 8000c94:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8000c96:	3a01      	subs	r2, #1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 8000c98:	6821      	ldr	r1, [r4, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)    | \
 8000c9a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 8000c9e:	60cb      	str	r3, [r1, #12]
 8000ca0:	e78b      	b.n	8000bba <HAL_FDCAN_Init+0x192>
    CLEAR_BIT(hfdcan->ttcan->TTOCF, FDCAN_TTOCF_OM);
 8000ca2:	6862      	ldr	r2, [r4, #4]
 8000ca4:	6893      	ldr	r3, [r2, #8]
 8000ca6:	f023 0303 	bic.w	r3, r3, #3
 8000caa:	6093      	str	r3, [r2, #8]
 8000cac:	e7d6      	b.n	8000c5c <HAL_FDCAN_Init+0x234>
    return HAL_ERROR;
 8000cae:	2001      	movs	r0, #1
 8000cb0:	e6e8      	b.n	8000a84 <HAL_FDCAN_Init+0x5c>
 8000cb2:	bf00      	nop
 8000cb4:	08009198 	.word	0x08009198
 8000cb8:	4000a000 	.word	0x4000a000

08000cbc <HAL_FDCAN_ConfigFilter>:
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 8000cbc:	f890 3098 	ldrb.w	r3, [r0, #152]	; 0x98
  if ((state == HAL_FDCAN_STATE_READY) || (state == HAL_FDCAN_STATE_BUSY))
 8000cc0:	3b01      	subs	r3, #1
 8000cc2:	b2db      	uxtb	r3, r3
 8000cc4:	2b01      	cmp	r3, #1
 8000cc6:	d907      	bls.n	8000cd8 <HAL_FDCAN_ConfigFilter+0x1c>
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_INITIALIZED;
 8000cc8:	f8d0 309c 	ldr.w	r3, [r0, #156]	; 0x9c
 8000ccc:	f043 0302 	orr.w	r3, r3, #2
 8000cd0:	f8c0 309c 	str.w	r3, [r0, #156]	; 0x9c
    return HAL_ERROR;
 8000cd4:	2001      	movs	r0, #1
 8000cd6:	4770      	bx	lr
    if (sFilterConfig->FilterConfig == FDCAN_FILTER_TO_RXBUFFER)
 8000cd8:	68cb      	ldr	r3, [r1, #12]
    if (sFilterConfig->IdType == FDCAN_STANDARD_ID)
 8000cda:	680a      	ldr	r2, [r1, #0]
 8000cdc:	b9d2      	cbnz	r2, 8000d14 <HAL_FDCAN_ConfigFilter+0x58>
      if (sFilterConfig->FilterConfig == FDCAN_FILTER_TO_RXBUFFER)
 8000cde:	2b07      	cmp	r3, #7
 8000ce0:	d00e      	beq.n	8000d00 <HAL_FDCAN_ConfigFilter+0x44>
        FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 8000ce2:	688a      	ldr	r2, [r1, #8]
                           (sFilterConfig->FilterConfig << 27U) |
 8000ce4:	06db      	lsls	r3, r3, #27
        FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 8000ce6:	ea43 7382 	orr.w	r3, r3, r2, lsl #30
                           (sFilterConfig->FilterID1 << 16U)    |
 8000cea:	690a      	ldr	r2, [r1, #16]
                           (sFilterConfig->FilterConfig << 27U) |
 8000cec:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
                           sFilterConfig->FilterID2);
 8000cf0:	694a      	ldr	r2, [r1, #20]
        FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 8000cf2:	4313      	orrs	r3, r2
      FilterAddress = (uint32_t *)(hfdcan->msgRam.StandardFilterSA + (sFilterConfig->FilterIndex * 4U));
 8000cf4:	6ec2      	ldr	r2, [r0, #108]	; 0x6c
 8000cf6:	6849      	ldr	r1, [r1, #4]
      *FilterAddress = FilterElementW1;
 8000cf8:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
    return HAL_OK;
 8000cfc:	2000      	movs	r0, #0
}
 8000cfe:	4770      	bx	lr
                           (sFilterConfig->FilterID1 << 16U)       |
 8000d00:	690a      	ldr	r2, [r1, #16]
                           (sFilterConfig->IsCalibrationMsg << 8U) |
 8000d02:	69cb      	ldr	r3, [r1, #28]
 8000d04:	021b      	lsls	r3, r3, #8
                           (sFilterConfig->FilterID1 << 16U)       |
 8000d06:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
                           sFilterConfig->RxBufferIndex);
 8000d0a:	698a      	ldr	r2, [r1, #24]
                           (sFilterConfig->IsCalibrationMsg << 8U) |
 8000d0c:	4313      	orrs	r3, r2
        FilterElementW1 = ((FDCAN_FILTER_TO_RXBUFFER << 27U)       |
 8000d0e:	f043 5360 	orr.w	r3, r3, #939524096	; 0x38000000
 8000d12:	e7ef      	b.n	8000cf4 <HAL_FDCAN_ConfigFilter+0x38>
{
 8000d14:	b410      	push	{r4}
      FilterElementW1 = ((sFilterConfig->FilterConfig << 29U) | sFilterConfig->FilterID1);
 8000d16:	690a      	ldr	r2, [r1, #16]
 8000d18:	ea42 7243 	orr.w	r2, r2, r3, lsl #29
      if (sFilterConfig->FilterConfig == FDCAN_FILTER_TO_RXBUFFER)
 8000d1c:	2b07      	cmp	r3, #7
 8000d1e:	d00e      	beq.n	8000d3e <HAL_FDCAN_ConfigFilter+0x82>
        FilterElementW2 = ((sFilterConfig->FilterType << 30U) | sFilterConfig->FilterID2);
 8000d20:	688c      	ldr	r4, [r1, #8]
 8000d22:	694b      	ldr	r3, [r1, #20]
 8000d24:	ea43 7384 	orr.w	r3, r3, r4, lsl #30
      FilterAddress = (uint32_t *)(hfdcan->msgRam.ExtendedFilterSA + (sFilterConfig->FilterIndex * 4U * 2U));
 8000d28:	6f00      	ldr	r0, [r0, #112]	; 0x70
 8000d2a:	6849      	ldr	r1, [r1, #4]
 8000d2c:	eb00 04c1 	add.w	r4, r0, r1, lsl #3
      *FilterAddress = FilterElementW1;
 8000d30:	f840 2031 	str.w	r2, [r0, r1, lsl #3]
      *FilterAddress = FilterElementW2;
 8000d34:	6063      	str	r3, [r4, #4]
    return HAL_OK;
 8000d36:	2000      	movs	r0, #0
}
 8000d38:	f85d 4b04 	ldr.w	r4, [sp], #4
 8000d3c:	4770      	bx	lr
        FilterElementW2 = sFilterConfig->RxBufferIndex;
 8000d3e:	698b      	ldr	r3, [r1, #24]
 8000d40:	e7f2      	b.n	8000d28 <HAL_FDCAN_ConfigFilter+0x6c>

08000d42 <HAL_FDCAN_ConfigGlobalFilter>:
{
 8000d42:	b410      	push	{r4}
  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 8000d44:	f890 4098 	ldrb.w	r4, [r0, #152]	; 0x98
 8000d48:	b2e4      	uxtb	r4, r4
 8000d4a:	2c01      	cmp	r4, #1
 8000d4c:	d009      	beq.n	8000d62 <HAL_FDCAN_ConfigGlobalFilter+0x20>
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
 8000d4e:	f8d0 309c 	ldr.w	r3, [r0, #156]	; 0x9c
 8000d52:	f043 0304 	orr.w	r3, r3, #4
 8000d56:	f8c0 309c 	str.w	r3, [r0, #156]	; 0x9c
    return HAL_ERROR;
 8000d5a:	2001      	movs	r0, #1
}
 8000d5c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8000d60:	4770      	bx	lr
                             (NonMatchingExt << FDCAN_GFC_ANFE_Pos)  |
 8000d62:	0092      	lsls	r2, r2, #2
    hfdcan->Instance->GFC = ((NonMatchingStd << FDCAN_GFC_ANFS_Pos)  |
 8000d64:	ea42 1201 	orr.w	r2, r2, r1, lsl #4
                             (NonMatchingExt << FDCAN_GFC_ANFE_Pos)  |
 8000d68:	ea42 0243 	orr.w	r2, r2, r3, lsl #1
    hfdcan->Instance->GFC = ((NonMatchingStd << FDCAN_GFC_ANFS_Pos)  |
 8000d6c:	6803      	ldr	r3, [r0, #0]
                             (RejectRemoteStd << FDCAN_GFC_RRFS_Pos) |
 8000d6e:	9901      	ldr	r1, [sp, #4]
 8000d70:	430a      	orrs	r2, r1
    hfdcan->Instance->GFC = ((NonMatchingStd << FDCAN_GFC_ANFS_Pos)  |
 8000d72:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    return HAL_OK;
 8000d76:	2000      	movs	r0, #0
 8000d78:	e7f0      	b.n	8000d5c <HAL_FDCAN_ConfigGlobalFilter+0x1a>

08000d7a <HAL_FDCAN_Start>:
  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 8000d7a:	f890 3098 	ldrb.w	r3, [r0, #152]	; 0x98
 8000d7e:	b2db      	uxtb	r3, r3
 8000d80:	2b01      	cmp	r3, #1
 8000d82:	d007      	beq.n	8000d94 <HAL_FDCAN_Start+0x1a>
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
 8000d84:	f8d0 309c 	ldr.w	r3, [r0, #156]	; 0x9c
 8000d88:	f043 0304 	orr.w	r3, r3, #4
 8000d8c:	f8c0 309c 	str.w	r3, [r0, #156]	; 0x9c
    return HAL_ERROR;
 8000d90:	2001      	movs	r0, #1
}
 8000d92:	4770      	bx	lr
    hfdcan->State = HAL_FDCAN_STATE_BUSY;
 8000d94:	2302      	movs	r3, #2
 8000d96:	f880 3098 	strb.w	r3, [r0, #152]	; 0x98
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8000d9a:	6802      	ldr	r2, [r0, #0]
 8000d9c:	6993      	ldr	r3, [r2, #24]
 8000d9e:	f023 0301 	bic.w	r3, r3, #1
 8000da2:	6193      	str	r3, [r2, #24]
    hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8000da4:	2300      	movs	r3, #0
 8000da6:	f8c0 309c 	str.w	r3, [r0, #156]	; 0x9c
    return HAL_OK;
 8000daa:	4618      	mov	r0, r3
 8000dac:	4770      	bx	lr

08000dae <HAL_FDCAN_AddMessageToTxFifoQ>:
{
 8000dae:	b538      	push	{r3, r4, r5, lr}
 8000db0:	4604      	mov	r4, r0
  if (hfdcan->State == HAL_FDCAN_STATE_BUSY)
 8000db2:	f890 3098 	ldrb.w	r3, [r0, #152]	; 0x98
 8000db6:	b2db      	uxtb	r3, r3
 8000db8:	2b02      	cmp	r3, #2
 8000dba:	d12b      	bne.n	8000e14 <HAL_FDCAN_AddMessageToTxFifoQ+0x66>
    if ((hfdcan->Instance->TXBC & FDCAN_TXBC_TFQS) == 0U)
 8000dbc:	6803      	ldr	r3, [r0, #0]
 8000dbe:	f8d3 00c0 	ldr.w	r0, [r3, #192]	; 0xc0
 8000dc2:	f010 5f7c 	tst.w	r0, #1056964608	; 0x3f000000
 8000dc6:	d00c      	beq.n	8000de2 <HAL_FDCAN_AddMessageToTxFifoQ+0x34>
    if ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQF) != 0U)
 8000dc8:	f8d3 00c4 	ldr.w	r0, [r3, #196]	; 0xc4
 8000dcc:	f410 1f00 	tst.w	r0, #2097152	; 0x200000
 8000dd0:	d00f      	beq.n	8000df2 <HAL_FDCAN_AddMessageToTxFifoQ+0x44>
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_FULL;
 8000dd2:	f8d4 309c 	ldr.w	r3, [r4, #156]	; 0x9c
 8000dd6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000dda:	f8c4 309c 	str.w	r3, [r4, #156]	; 0x9c
      return HAL_ERROR;
 8000dde:	2001      	movs	r0, #1
 8000de0:	e01f      	b.n	8000e22 <HAL_FDCAN_AddMessageToTxFifoQ+0x74>
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 8000de2:	f8d4 309c 	ldr.w	r3, [r4, #156]	; 0x9c
 8000de6:	f043 0320 	orr.w	r3, r3, #32
 8000dea:	f8c4 309c 	str.w	r3, [r4, #156]	; 0x9c
      return HAL_ERROR;
 8000dee:	2001      	movs	r0, #1
 8000df0:	e017      	b.n	8000e22 <HAL_FDCAN_AddMessageToTxFifoQ+0x74>
      PutIndex = ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQPI) >> FDCAN_TXFQS_TFQPI_Pos);
 8000df2:	f8d3 50c4 	ldr.w	r5, [r3, #196]	; 0xc4
 8000df6:	f3c5 4504 	ubfx	r5, r5, #16, #5
      FDCAN_CopyMessageToRAM(hfdcan, pTxHeader, pTxData, PutIndex);
 8000dfa:	462b      	mov	r3, r5
 8000dfc:	4620      	mov	r0, r4
 8000dfe:	f7ff fdd3 	bl	80009a8 <FDCAN_CopyMessageToRAM>
      hfdcan->Instance->TXBAR = ((uint32_t)1 << PutIndex);
 8000e02:	6822      	ldr	r2, [r4, #0]
 8000e04:	2301      	movs	r3, #1
 8000e06:	40ab      	lsls	r3, r5
 8000e08:	f8c2 30d0 	str.w	r3, [r2, #208]	; 0xd0
      hfdcan->LatestTxFifoQRequest = ((uint32_t)1 << PutIndex);
 8000e0c:	f8c4 3094 	str.w	r3, [r4, #148]	; 0x94
    return HAL_OK;
 8000e10:	2000      	movs	r0, #0
 8000e12:	e006      	b.n	8000e22 <HAL_FDCAN_AddMessageToTxFifoQ+0x74>
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 8000e14:	f8d0 309c 	ldr.w	r3, [r0, #156]	; 0x9c
 8000e18:	f043 0308 	orr.w	r3, r3, #8
 8000e1c:	f8c0 309c 	str.w	r3, [r0, #156]	; 0x9c
    return HAL_ERROR;
 8000e20:	2001      	movs	r0, #1
}
 8000e22:	bd38      	pop	{r3, r4, r5, pc}

08000e24 <HAL_FDCAN_GetRxMessage>:
{
 8000e24:	b4f0      	push	{r4, r5, r6, r7}
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 8000e26:	f890 4098 	ldrb.w	r4, [r0, #152]	; 0x98
 8000e2a:	b2e4      	uxtb	r4, r4
  if (state == HAL_FDCAN_STATE_BUSY)
 8000e2c:	2c02      	cmp	r4, #2
 8000e2e:	f040 80d2 	bne.w	8000fd6 <HAL_FDCAN_GetRxMessage+0x1b2>
    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 8000e32:	2940      	cmp	r1, #64	; 0x40
 8000e34:	d00c      	beq.n	8000e50 <HAL_FDCAN_GetRxMessage+0x2c>
    else if (RxLocation == FDCAN_RX_FIFO1) /* Rx element is assigned to the Rx FIFO 1 */
 8000e36:	2941      	cmp	r1, #65	; 0x41
 8000e38:	d03c      	beq.n	8000eb4 <HAL_FDCAN_GetRxMessage+0x90>
      if (RxLocation >= hfdcan->Init.RxBuffersNbr)
 8000e3a:	6d04      	ldr	r4, [r0, #80]	; 0x50
 8000e3c:	428c      	cmp	r4, r1
 8000e3e:	d86b      	bhi.n	8000f18 <HAL_FDCAN_GetRxMessage+0xf4>
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 8000e40:	f8d0 309c 	ldr.w	r3, [r0, #156]	; 0x9c
 8000e44:	f043 0320 	orr.w	r3, r3, #32
 8000e48:	f8c0 309c 	str.w	r3, [r0, #156]	; 0x9c
        return HAL_ERROR;
 8000e4c:	2001      	movs	r0, #1
 8000e4e:	e0c9      	b.n	8000fe4 <HAL_FDCAN_GetRxMessage+0x1c0>
      if ((hfdcan->Instance->RXF0C & FDCAN_RXF0C_F0S) == 0U)
 8000e50:	6804      	ldr	r4, [r0, #0]
 8000e52:	f8d4 50a0 	ldr.w	r5, [r4, #160]	; 0xa0
 8000e56:	f415 0ffe 	tst.w	r5, #8323072	; 0x7f0000
 8000e5a:	d00c      	beq.n	8000e76 <HAL_FDCAN_GetRxMessage+0x52>
      if ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0FL) == 0U)
 8000e5c:	f8d4 50a4 	ldr.w	r5, [r4, #164]	; 0xa4
 8000e60:	f015 0f7f 	tst.w	r5, #127	; 0x7f
 8000e64:	d10f      	bne.n	8000e86 <HAL_FDCAN_GetRxMessage+0x62>
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 8000e66:	f8d0 309c 	ldr.w	r3, [r0, #156]	; 0x9c
 8000e6a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000e6e:	f8c0 309c 	str.w	r3, [r0, #156]	; 0x9c
        return HAL_ERROR;
 8000e72:	2001      	movs	r0, #1
 8000e74:	e0b6      	b.n	8000fe4 <HAL_FDCAN_GetRxMessage+0x1c0>
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 8000e76:	f8d0 309c 	ldr.w	r3, [r0, #156]	; 0x9c
 8000e7a:	f043 0320 	orr.w	r3, r3, #32
 8000e7e:	f8c0 309c 	str.w	r3, [r0, #156]	; 0x9c
        return HAL_ERROR;
 8000e82:	2001      	movs	r0, #1
 8000e84:	e0ae      	b.n	8000fe4 <HAL_FDCAN_GetRxMessage+0x1c0>
        if(((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0F) >> FDCAN_RXF0S_F0F_Pos) == 1U)
 8000e86:	f8d4 50a4 	ldr.w	r5, [r4, #164]	; 0xa4
 8000e8a:	f3c5 6c00 	ubfx	ip, r5, #24, #1
 8000e8e:	f015 7f80 	tst.w	r5, #16777216	; 0x1000000
 8000e92:	d003      	beq.n	8000e9c <HAL_FDCAN_GetRxMessage+0x78>
          if(((hfdcan->Instance->RXF0C & FDCAN_RXF0C_F0OM) >> FDCAN_RXF0C_F0OM_Pos) == FDCAN_RX_FIFO_OVERWRITE)
 8000e94:	f8d4 50a0 	ldr.w	r5, [r4, #160]	; 0xa0
  uint32_t GetIndex = 0;
 8000e98:	f04f 0c00 	mov.w	ip, #0
        GetIndex += ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0GI) >> FDCAN_RXF0S_F0GI_Pos);
 8000e9c:	f8d4 40a4 	ldr.w	r4, [r4, #164]	; 0xa4
 8000ea0:	f3c4 2405 	ubfx	r4, r4, #8, #6
 8000ea4:	44a4      	add	ip, r4
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO0SA + (GetIndex * hfdcan->Init.RxFifo0ElmtSize * 4U));
 8000ea6:	6f44      	ldr	r4, [r0, #116]	; 0x74
 8000ea8:	6c45      	ldr	r5, [r0, #68]	; 0x44
 8000eaa:	fb0c f505 	mul.w	r5, ip, r5
 8000eae:	eb04 0485 	add.w	r4, r4, r5, lsl #2
 8000eb2:	e039      	b.n	8000f28 <HAL_FDCAN_GetRxMessage+0x104>
      if ((hfdcan->Instance->RXF1C & FDCAN_RXF1C_F1S) == 0U)
 8000eb4:	6804      	ldr	r4, [r0, #0]
 8000eb6:	f8d4 50b0 	ldr.w	r5, [r4, #176]	; 0xb0
 8000eba:	f415 0ffe 	tst.w	r5, #8323072	; 0x7f0000
 8000ebe:	d00c      	beq.n	8000eda <HAL_FDCAN_GetRxMessage+0xb6>
      if ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1FL) == 0U)
 8000ec0:	f8d4 50b4 	ldr.w	r5, [r4, #180]	; 0xb4
 8000ec4:	f015 0f7f 	tst.w	r5, #127	; 0x7f
 8000ec8:	d10f      	bne.n	8000eea <HAL_FDCAN_GetRxMessage+0xc6>
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 8000eca:	f8d0 309c 	ldr.w	r3, [r0, #156]	; 0x9c
 8000ece:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000ed2:	f8c0 309c 	str.w	r3, [r0, #156]	; 0x9c
        return HAL_ERROR;
 8000ed6:	2001      	movs	r0, #1
 8000ed8:	e084      	b.n	8000fe4 <HAL_FDCAN_GetRxMessage+0x1c0>
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 8000eda:	f8d0 309c 	ldr.w	r3, [r0, #156]	; 0x9c
 8000ede:	f043 0320 	orr.w	r3, r3, #32
 8000ee2:	f8c0 309c 	str.w	r3, [r0, #156]	; 0x9c
        return HAL_ERROR;
 8000ee6:	2001      	movs	r0, #1
 8000ee8:	e07c      	b.n	8000fe4 <HAL_FDCAN_GetRxMessage+0x1c0>
        if(((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1F) >> FDCAN_RXF1S_F1F_Pos) == 1U)
 8000eea:	f8d4 50b4 	ldr.w	r5, [r4, #180]	; 0xb4
 8000eee:	f3c5 6c00 	ubfx	ip, r5, #24, #1
 8000ef2:	f015 7f80 	tst.w	r5, #16777216	; 0x1000000
 8000ef6:	d003      	beq.n	8000f00 <HAL_FDCAN_GetRxMessage+0xdc>
          if(((hfdcan->Instance->RXF1C & FDCAN_RXF1C_F1OM) >> FDCAN_RXF1C_F1OM_Pos) == FDCAN_RX_FIFO_OVERWRITE)
 8000ef8:	f8d4 50b0 	ldr.w	r5, [r4, #176]	; 0xb0
  uint32_t GetIndex = 0;
 8000efc:	f04f 0c00 	mov.w	ip, #0
        GetIndex += ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1GI) >> FDCAN_RXF1S_F1GI_Pos);
 8000f00:	f8d4 40b4 	ldr.w	r4, [r4, #180]	; 0xb4
 8000f04:	f3c4 2405 	ubfx	r4, r4, #8, #6
 8000f08:	44a4      	add	ip, r4
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO1SA + (GetIndex * hfdcan->Init.RxFifo1ElmtSize * 4U));
 8000f0a:	6f84      	ldr	r4, [r0, #120]	; 0x78
 8000f0c:	6cc5      	ldr	r5, [r0, #76]	; 0x4c
 8000f0e:	fb0c f505 	mul.w	r5, ip, r5
 8000f12:	eb04 0485 	add.w	r4, r4, r5, lsl #2
 8000f16:	e007      	b.n	8000f28 <HAL_FDCAN_GetRxMessage+0x104>
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxBufferSA + (RxLocation * hfdcan->Init.RxBufferSize * 4U));
 8000f18:	6fc4      	ldr	r4, [r0, #124]	; 0x7c
 8000f1a:	6d45      	ldr	r5, [r0, #84]	; 0x54
 8000f1c:	fb01 f505 	mul.w	r5, r1, r5
 8000f20:	eb04 0485 	add.w	r4, r4, r5, lsl #2
  uint32_t GetIndex = 0;
 8000f24:	f04f 0c00 	mov.w	ip, #0
    pRxHeader->IdType = *RxAddress & FDCAN_ELEMENT_MASK_XTD;
 8000f28:	6825      	ldr	r5, [r4, #0]
 8000f2a:	f005 4580 	and.w	r5, r5, #1073741824	; 0x40000000
 8000f2e:	6055      	str	r5, [r2, #4]
    if (pRxHeader->IdType == FDCAN_STANDARD_ID) /* Standard ID element */
 8000f30:	2d00      	cmp	r5, #0
 8000f32:	d12c      	bne.n	8000f8e <HAL_FDCAN_GetRxMessage+0x16a>
      pRxHeader->Identifier = ((*RxAddress & FDCAN_ELEMENT_MASK_STDID) >> 18);
 8000f34:	6825      	ldr	r5, [r4, #0]
 8000f36:	f3c5 458a 	ubfx	r5, r5, #18, #11
 8000f3a:	6015      	str	r5, [r2, #0]
    pRxHeader->RxFrameType = (*RxAddress & FDCAN_ELEMENT_MASK_RTR);
 8000f3c:	6825      	ldr	r5, [r4, #0]
 8000f3e:	f005 5500 	and.w	r5, r5, #536870912	; 0x20000000
 8000f42:	6095      	str	r5, [r2, #8]
    pRxHeader->ErrorStateIndicator = (*RxAddress & FDCAN_ELEMENT_MASK_ESI);
 8000f44:	6825      	ldr	r5, [r4, #0]
 8000f46:	f005 4500 	and.w	r5, r5, #2147483648	; 0x80000000
 8000f4a:	6115      	str	r5, [r2, #16]
    pRxHeader->RxTimestamp = (*RxAddress & FDCAN_ELEMENT_MASK_TS);
 8000f4c:	88a5      	ldrh	r5, [r4, #4]
 8000f4e:	61d5      	str	r5, [r2, #28]
    pRxHeader->DataLength = (*RxAddress & FDCAN_ELEMENT_MASK_DLC);
 8000f50:	6865      	ldr	r5, [r4, #4]
 8000f52:	f405 2570 	and.w	r5, r5, #983040	; 0xf0000
 8000f56:	60d5      	str	r5, [r2, #12]
    pRxHeader->BitRateSwitch = (*RxAddress & FDCAN_ELEMENT_MASK_BRS);
 8000f58:	6865      	ldr	r5, [r4, #4]
 8000f5a:	f405 1580 	and.w	r5, r5, #1048576	; 0x100000
 8000f5e:	6155      	str	r5, [r2, #20]
    pRxHeader->FDFormat = (*RxAddress & FDCAN_ELEMENT_MASK_FDF);
 8000f60:	6865      	ldr	r5, [r4, #4]
 8000f62:	f405 1500 	and.w	r5, r5, #2097152	; 0x200000
 8000f66:	6195      	str	r5, [r2, #24]
    pRxHeader->FilterIndex = ((*RxAddress & FDCAN_ELEMENT_MASK_FIDX) >> 24);
 8000f68:	79e5      	ldrb	r5, [r4, #7]
 8000f6a:	f005 057f 	and.w	r5, r5, #127	; 0x7f
 8000f6e:	6215      	str	r5, [r2, #32]
    pRxHeader->IsFilterMatchingFrame = ((*RxAddress & FDCAN_ELEMENT_MASK_ANMF) >> 31);
 8000f70:	6865      	ldr	r5, [r4, #4]
 8000f72:	0fed      	lsrs	r5, r5, #31
 8000f74:	6255      	str	r5, [r2, #36]	; 0x24
    RxAddress++;
 8000f76:	f104 0508 	add.w	r5, r4, #8
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength >> 16]; ByteCounter++)
 8000f7a:	2400      	movs	r4, #0
 8000f7c:	89d6      	ldrh	r6, [r2, #14]
 8000f7e:	4f1a      	ldr	r7, [pc, #104]	; (8000fe8 <HAL_FDCAN_GetRxMessage+0x1c4>)
 8000f80:	5dbe      	ldrb	r6, [r7, r6]
 8000f82:	42a6      	cmp	r6, r4
 8000f84:	d908      	bls.n	8000f98 <HAL_FDCAN_GetRxMessage+0x174>
      pRxData[ByteCounter] = pData[ByteCounter];
 8000f86:	5d2e      	ldrb	r6, [r5, r4]
 8000f88:	551e      	strb	r6, [r3, r4]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength >> 16]; ByteCounter++)
 8000f8a:	3401      	adds	r4, #1
 8000f8c:	e7f6      	b.n	8000f7c <HAL_FDCAN_GetRxMessage+0x158>
      pRxHeader->Identifier = (*RxAddress & FDCAN_ELEMENT_MASK_EXTID);
 8000f8e:	6825      	ldr	r5, [r4, #0]
 8000f90:	f025 4560 	bic.w	r5, r5, #3758096384	; 0xe0000000
 8000f94:	6015      	str	r5, [r2, #0]
 8000f96:	e7d1      	b.n	8000f3c <HAL_FDCAN_GetRxMessage+0x118>
    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 8000f98:	2940      	cmp	r1, #64	; 0x40
 8000f9a:	d00a      	beq.n	8000fb2 <HAL_FDCAN_GetRxMessage+0x18e>
    else if (RxLocation == FDCAN_RX_FIFO1) /* Rx element is assigned to the Rx FIFO 1 */
 8000f9c:	2941      	cmp	r1, #65	; 0x41
 8000f9e:	d00d      	beq.n	8000fbc <HAL_FDCAN_GetRxMessage+0x198>
      if (RxLocation < FDCAN_RX_BUFFER32)
 8000fa0:	291f      	cmp	r1, #31
 8000fa2:	d80f      	bhi.n	8000fc4 <HAL_FDCAN_GetRxMessage+0x1a0>
        hfdcan->Instance->NDAT1 = ((uint32_t)1 << RxLocation);
 8000fa4:	6802      	ldr	r2, [r0, #0]
 8000fa6:	2301      	movs	r3, #1
 8000fa8:	fa03 f101 	lsl.w	r1, r3, r1
 8000fac:	f8c2 1098 	str.w	r1, [r2, #152]	; 0x98
 8000fb0:	e002      	b.n	8000fb8 <HAL_FDCAN_GetRxMessage+0x194>
      hfdcan->Instance->RXF0A = GetIndex;
 8000fb2:	6803      	ldr	r3, [r0, #0]
 8000fb4:	f8c3 c0a8 	str.w	ip, [r3, #168]	; 0xa8
    return HAL_OK;
 8000fb8:	2000      	movs	r0, #0
 8000fba:	e013      	b.n	8000fe4 <HAL_FDCAN_GetRxMessage+0x1c0>
      hfdcan->Instance->RXF1A = GetIndex;
 8000fbc:	6803      	ldr	r3, [r0, #0]
 8000fbe:	f8c3 c0b8 	str.w	ip, [r3, #184]	; 0xb8
 8000fc2:	e7f9      	b.n	8000fb8 <HAL_FDCAN_GetRxMessage+0x194>
        hfdcan->Instance->NDAT2 = ((uint32_t)1 << (RxLocation & 0x1FU));
 8000fc4:	f001 011f 	and.w	r1, r1, #31
 8000fc8:	6802      	ldr	r2, [r0, #0]
 8000fca:	2301      	movs	r3, #1
 8000fcc:	fa03 f101 	lsl.w	r1, r3, r1
 8000fd0:	f8c2 109c 	str.w	r1, [r2, #156]	; 0x9c
 8000fd4:	e7f0      	b.n	8000fb8 <HAL_FDCAN_GetRxMessage+0x194>
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 8000fd6:	f8d0 309c 	ldr.w	r3, [r0, #156]	; 0x9c
 8000fda:	f043 0308 	orr.w	r3, r3, #8
 8000fde:	f8c0 309c 	str.w	r3, [r0, #156]	; 0x9c
    return HAL_ERROR;
 8000fe2:	2001      	movs	r0, #1
}
 8000fe4:	bcf0      	pop	{r4, r5, r6, r7}
 8000fe6:	4770      	bx	lr
 8000fe8:	08009188 	.word	0x08009188

08000fec <HAL_FDCAN_ActivateNotification>:
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 8000fec:	f890 3098 	ldrb.w	r3, [r0, #152]	; 0x98
  if ((state == HAL_FDCAN_STATE_READY) || (state == HAL_FDCAN_STATE_BUSY))
 8000ff0:	3b01      	subs	r3, #1
 8000ff2:	b2db      	uxtb	r3, r3
 8000ff4:	2b01      	cmp	r3, #1
 8000ff6:	d907      	bls.n	8001008 <HAL_FDCAN_ActivateNotification+0x1c>
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_INITIALIZED;
 8000ff8:	f8d0 309c 	ldr.w	r3, [r0, #156]	; 0x9c
 8000ffc:	f043 0302 	orr.w	r3, r3, #2
 8001000:	f8c0 309c 	str.w	r3, [r0, #156]	; 0x9c
    return HAL_ERROR;
 8001004:	2001      	movs	r0, #1
}
 8001006:	4770      	bx	lr
{
 8001008:	b410      	push	{r4}
    if ((ActiveITs & hfdcan->Instance->ILS) == 0U)
 800100a:	6803      	ldr	r3, [r0, #0]
 800100c:	6d9c      	ldr	r4, [r3, #88]	; 0x58
 800100e:	420c      	tst	r4, r1
 8001010:	d124      	bne.n	800105c <HAL_FDCAN_ActivateNotification+0x70>
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE0);
 8001012:	6ddc      	ldr	r4, [r3, #92]	; 0x5c
 8001014:	f044 0401 	orr.w	r4, r4, #1
 8001018:	65dc      	str	r4, [r3, #92]	; 0x5c
    if ((ActiveITs & FDCAN_IT_TX_COMPLETE) != 0U)
 800101a:	f411 7f00 	tst.w	r1, #512	; 0x200
 800101e:	d005      	beq.n	800102c <HAL_FDCAN_ActivateNotification+0x40>
      SET_BIT(hfdcan->Instance->TXBTIE, BufferIndexes);
 8001020:	6804      	ldr	r4, [r0, #0]
 8001022:	f8d4 30e0 	ldr.w	r3, [r4, #224]	; 0xe0
 8001026:	4313      	orrs	r3, r2
 8001028:	f8c4 30e0 	str.w	r3, [r4, #224]	; 0xe0
    if ((ActiveITs & FDCAN_IT_TX_ABORT_COMPLETE) != 0U)
 800102c:	f411 6f80 	tst.w	r1, #1024	; 0x400
 8001030:	d005      	beq.n	800103e <HAL_FDCAN_ActivateNotification+0x52>
      SET_BIT(hfdcan->Instance->TXBCIE, BufferIndexes);
 8001032:	6804      	ldr	r4, [r0, #0]
 8001034:	f8d4 30e4 	ldr.w	r3, [r4, #228]	; 0xe4
 8001038:	431a      	orrs	r2, r3
 800103a:	f8c4 20e4 	str.w	r2, [r4, #228]	; 0xe4
    __HAL_FDCAN_ENABLE_IT(hfdcan, ActiveITs);
 800103e:	6800      	ldr	r0, [r0, #0]
 8001040:	6d43      	ldr	r3, [r0, #84]	; 0x54
 8001042:	4a0c      	ldr	r2, [pc, #48]	; (8001074 <HAL_FDCAN_ActivateNotification+0x88>)
 8001044:	400a      	ands	r2, r1
 8001046:	4313      	orrs	r3, r2
 8001048:	6543      	str	r3, [r0, #84]	; 0x54
 800104a:	4a0b      	ldr	r2, [pc, #44]	; (8001078 <HAL_FDCAN_ActivateNotification+0x8c>)
 800104c:	6953      	ldr	r3, [r2, #20]
 800104e:	ea43 7191 	orr.w	r1, r3, r1, lsr #30
 8001052:	6151      	str	r1, [r2, #20]
    return HAL_OK;
 8001054:	2000      	movs	r0, #0
}
 8001056:	f85d 4b04 	ldr.w	r4, [sp], #4
 800105a:	4770      	bx	lr
    else if ((ActiveITs & hfdcan->Instance->ILS) == ActiveITs)
 800105c:	6d9c      	ldr	r4, [r3, #88]	; 0x58
 800105e:	ea31 0404 	bics.w	r4, r1, r4
 8001062:	d002      	beq.n	800106a <HAL_FDCAN_ActivateNotification+0x7e>
      hfdcan->Instance->ILE = (FDCAN_INTERRUPT_LINE0 | FDCAN_INTERRUPT_LINE1);
 8001064:	2403      	movs	r4, #3
 8001066:	65dc      	str	r4, [r3, #92]	; 0x5c
 8001068:	e7d7      	b.n	800101a <HAL_FDCAN_ActivateNotification+0x2e>
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE1);
 800106a:	6ddc      	ldr	r4, [r3, #92]	; 0x5c
 800106c:	f044 0402 	orr.w	r4, r4, #2
 8001070:	65dc      	str	r4, [r3, #92]	; 0x5c
 8001072:	e7d2      	b.n	800101a <HAL_FDCAN_ActivateNotification+0x2e>
 8001074:	3fcfffff 	.word	0x3fcfffff
 8001078:	4000a800 	.word	0x4000a800

0800107c <HAL_FDCAN_ClockCalibrationCallback>:
}
 800107c:	4770      	bx	lr

0800107e <HAL_FDCAN_TxEventFifoCallback>:
}
 800107e:	4770      	bx	lr

08001080 <HAL_FDCAN_RxFifo1Callback>:
}
 8001080:	4770      	bx	lr

08001082 <HAL_FDCAN_TxFifoEmptyCallback>:
}
 8001082:	4770      	bx	lr

08001084 <HAL_FDCAN_TxBufferCompleteCallback>:
}
 8001084:	4770      	bx	lr

08001086 <HAL_FDCAN_TxBufferAbortCallback>:
}
 8001086:	4770      	bx	lr

08001088 <HAL_FDCAN_RxBufferNewMessageCallback>:
}
 8001088:	4770      	bx	lr

0800108a <HAL_FDCAN_TimestampWraparoundCallback>:
}
 800108a:	4770      	bx	lr

0800108c <HAL_FDCAN_TimeoutOccurredCallback>:
}
 800108c:	4770      	bx	lr

0800108e <HAL_FDCAN_HighPriorityMessageCallback>:
}
 800108e:	4770      	bx	lr

08001090 <HAL_FDCAN_ErrorCallback>:
}
 8001090:	4770      	bx	lr

08001092 <HAL_FDCAN_ErrorStatusCallback>:
}
 8001092:	4770      	bx	lr

08001094 <HAL_FDCAN_TT_ScheduleSyncCallback>:
}
 8001094:	4770      	bx	lr

08001096 <HAL_FDCAN_TT_TimeMarkCallback>:
}
 8001096:	4770      	bx	lr

08001098 <HAL_FDCAN_TT_StopWatchCallback>:
}
 8001098:	4770      	bx	lr

0800109a <HAL_FDCAN_TT_GlobalTimeCallback>:
}
 800109a:	4770      	bx	lr

0800109c <HAL_FDCAN_IRQHandler>:
{
 800109c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80010a0:	4604      	mov	r4, r0
  ClkCalibrationITs = (FDCAN_CCU->IR << 30);
 80010a2:	4b95      	ldr	r3, [pc, #596]	; (80012f8 <HAL_FDCAN_IRQHandler+0x25c>)
 80010a4:	691a      	ldr	r2, [r3, #16]
  ClkCalibrationITs &= (FDCAN_CCU->IE << 30);
 80010a6:	695b      	ldr	r3, [r3, #20]
 80010a8:	ea4f 7a83 	mov.w	sl, r3, lsl #30
 80010ac:	ea0a 7a82 	and.w	sl, sl, r2, lsl #30
  TxEventFifoITs = hfdcan->Instance->IR & FDCAN_TX_EVENT_FIFO_MASK;
 80010b0:	6803      	ldr	r3, [r0, #0]
 80010b2:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80010b4:	f402 4970 	and.w	r9, r2, #61440	; 0xf000
  TxEventFifoITs &= hfdcan->Instance->IE;
 80010b8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80010ba:	ea09 0902 	and.w	r9, r9, r2
  RxFifo0ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO0_MASK;
 80010be:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80010c0:	f002 080f 	and.w	r8, r2, #15
  RxFifo0ITs &= hfdcan->Instance->IE;
 80010c4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80010c6:	ea08 0802 	and.w	r8, r8, r2
  RxFifo1ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO1_MASK;
 80010ca:	6d1f      	ldr	r7, [r3, #80]	; 0x50
 80010cc:	f007 07f0 	and.w	r7, r7, #240	; 0xf0
  RxFifo1ITs &= hfdcan->Instance->IE;
 80010d0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80010d2:	4017      	ands	r7, r2
  Errors = hfdcan->Instance->IR & FDCAN_ERROR_MASK;
 80010d4:	6d1d      	ldr	r5, [r3, #80]	; 0x50
 80010d6:	f005 5571 	and.w	r5, r5, #1010827264	; 0x3c400000
  Errors &= hfdcan->Instance->IE;
 80010da:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80010dc:	4015      	ands	r5, r2
  ErrorStatusITs = hfdcan->Instance->IR & FDCAN_ERROR_STATUS_MASK;
 80010de:	6d1e      	ldr	r6, [r3, #80]	; 0x50
 80010e0:	f006 7660 	and.w	r6, r6, #58720256	; 0x3800000
  ErrorStatusITs &= hfdcan->Instance->IE;
 80010e4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80010e6:	4016      	ands	r6, r2
  if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_RX_HIGH_PRIORITY_MSG) != 0U)
 80010e8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80010ea:	f412 7f80 	tst.w	r2, #256	; 0x100
 80010ee:	d003      	beq.n	80010f8 <HAL_FDCAN_IRQHandler+0x5c>
    if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG) != 0U)
 80010f0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80010f2:	f412 7f80 	tst.w	r2, #256	; 0x100
 80010f6:	d178      	bne.n	80011ea <HAL_FDCAN_IRQHandler+0x14e>
  if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TX_ABORT_COMPLETE) != 0U)
 80010f8:	6823      	ldr	r3, [r4, #0]
 80010fa:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80010fc:	f412 6f80 	tst.w	r2, #1024	; 0x400
 8001100:	d003      	beq.n	800110a <HAL_FDCAN_IRQHandler+0x6e>
    if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TX_ABORT_COMPLETE) != 0U)
 8001102:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001104:	f412 6f80 	tst.w	r2, #1024	; 0x400
 8001108:	d178      	bne.n	80011fc <HAL_FDCAN_IRQHandler+0x160>
  if (ClkCalibrationITs != 0U)
 800110a:	f1ba 0f00 	cmp.w	sl, #0
 800110e:	f040 8084 	bne.w	800121a <HAL_FDCAN_IRQHandler+0x17e>
  if (TxEventFifoITs != 0U)
 8001112:	f1b9 0f00 	cmp.w	r9, #0
 8001116:	f040 808c 	bne.w	8001232 <HAL_FDCAN_IRQHandler+0x196>
  if (RxFifo0ITs != 0U)
 800111a:	f1b8 0f00 	cmp.w	r8, #0
 800111e:	f040 8094 	bne.w	800124a <HAL_FDCAN_IRQHandler+0x1ae>
  if (RxFifo1ITs != 0U)
 8001122:	2f00      	cmp	r7, #0
 8001124:	f040 809d 	bne.w	8001262 <HAL_FDCAN_IRQHandler+0x1c6>
  if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TX_FIFO_EMPTY) != 0U)
 8001128:	6823      	ldr	r3, [r4, #0]
 800112a:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800112c:	f412 6f00 	tst.w	r2, #2048	; 0x800
 8001130:	d004      	beq.n	800113c <HAL_FDCAN_IRQHandler+0xa0>
    if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TX_FIFO_EMPTY) != 0U)
 8001132:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001134:	f412 6f00 	tst.w	r2, #2048	; 0x800
 8001138:	f040 809d 	bne.w	8001276 <HAL_FDCAN_IRQHandler+0x1da>
  if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TX_COMPLETE) != 0U)
 800113c:	6823      	ldr	r3, [r4, #0]
 800113e:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8001140:	f412 7f00 	tst.w	r2, #512	; 0x200
 8001144:	d004      	beq.n	8001150 <HAL_FDCAN_IRQHandler+0xb4>
    if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TX_COMPLETE) != 0U)
 8001146:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001148:	f412 7f00 	tst.w	r2, #512	; 0x200
 800114c:	f040 809d 	bne.w	800128a <HAL_FDCAN_IRQHandler+0x1ee>
  if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_RX_BUFFER_NEW_MESSAGE) != 0U)
 8001150:	6823      	ldr	r3, [r4, #0]
 8001152:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8001154:	f412 2f00 	tst.w	r2, #524288	; 0x80000
 8001158:	d004      	beq.n	8001164 <HAL_FDCAN_IRQHandler+0xc8>
    if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_RX_BUFFER_NEW_MESSAGE) != 0U)
 800115a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800115c:	f412 2f00 	tst.w	r2, #524288	; 0x80000
 8001160:	f040 80a2 	bne.w	80012a8 <HAL_FDCAN_IRQHandler+0x20c>
  if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TIMESTAMP_WRAPAROUND) != 0U)
 8001164:	6823      	ldr	r3, [r4, #0]
 8001166:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8001168:	f412 3f80 	tst.w	r2, #65536	; 0x10000
 800116c:	d004      	beq.n	8001178 <HAL_FDCAN_IRQHandler+0xdc>
    if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TIMESTAMP_WRAPAROUND) != 0U)
 800116e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001170:	f412 3f80 	tst.w	r2, #65536	; 0x10000
 8001174:	f040 80a2 	bne.w	80012bc <HAL_FDCAN_IRQHandler+0x220>
  if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TIMEOUT_OCCURRED) != 0U)
 8001178:	6823      	ldr	r3, [r4, #0]
 800117a:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800117c:	f412 2f80 	tst.w	r2, #262144	; 0x40000
 8001180:	d004      	beq.n	800118c <HAL_FDCAN_IRQHandler+0xf0>
    if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TIMEOUT_OCCURRED) != 0U)
 8001182:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001184:	f412 2f80 	tst.w	r2, #262144	; 0x40000
 8001188:	f040 80a2 	bne.w	80012d0 <HAL_FDCAN_IRQHandler+0x234>
  if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_RAM_ACCESS_FAILURE) != 0U)
 800118c:	6823      	ldr	r3, [r4, #0]
 800118e:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8001190:	f412 3f00 	tst.w	r2, #131072	; 0x20000
 8001194:	d00f      	beq.n	80011b6 <HAL_FDCAN_IRQHandler+0x11a>
    if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_RAM_ACCESS_FAILURE) != 0U)
 8001196:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001198:	f412 3f00 	tst.w	r2, #131072	; 0x20000
 800119c:	d00b      	beq.n	80011b6 <HAL_FDCAN_IRQHandler+0x11a>
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RAM_ACCESS_FAILURE);
 800119e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80011a2:	651a      	str	r2, [r3, #80]	; 0x50
 80011a4:	4b54      	ldr	r3, [pc, #336]	; (80012f8 <HAL_FDCAN_IRQHandler+0x25c>)
 80011a6:	2200      	movs	r2, #0
 80011a8:	611a      	str	r2, [r3, #16]
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_RAM_ACCESS;
 80011aa:	f8d4 309c 	ldr.w	r3, [r4, #156]	; 0x9c
 80011ae:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80011b2:	f8c4 309c 	str.w	r3, [r4, #156]	; 0x9c
  if (ErrorStatusITs != 0U)
 80011b6:	2e00      	cmp	r6, #0
 80011b8:	f040 8094 	bne.w	80012e4 <HAL_FDCAN_IRQHandler+0x248>
  if (Errors != 0U)
 80011bc:	b14d      	cbz	r5, 80011d2 <HAL_FDCAN_IRQHandler+0x136>
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, Errors);
 80011be:	6823      	ldr	r3, [r4, #0]
 80011c0:	651d      	str	r5, [r3, #80]	; 0x50
 80011c2:	0faa      	lsrs	r2, r5, #30
 80011c4:	4b4c      	ldr	r3, [pc, #304]	; (80012f8 <HAL_FDCAN_IRQHandler+0x25c>)
 80011c6:	611a      	str	r2, [r3, #16]
    hfdcan->ErrorCode |= Errors;
 80011c8:	f8d4 309c 	ldr.w	r3, [r4, #156]	; 0x9c
 80011cc:	431d      	orrs	r5, r3
 80011ce:	f8c4 509c 	str.w	r5, [r4, #156]	; 0x9c
  if (hfdcan->Instance == FDCAN1)
 80011d2:	6822      	ldr	r2, [r4, #0]
 80011d4:	4b49      	ldr	r3, [pc, #292]	; (80012fc <HAL_FDCAN_IRQHandler+0x260>)
 80011d6:	429a      	cmp	r2, r3
 80011d8:	f000 8092 	beq.w	8001300 <HAL_FDCAN_IRQHandler+0x264>
  if (hfdcan->ErrorCode != HAL_FDCAN_ERROR_NONE)
 80011dc:	f8d4 309c 	ldr.w	r3, [r4, #156]	; 0x9c
 80011e0:	2b00      	cmp	r3, #0
 80011e2:	f040 80ed 	bne.w	80013c0 <HAL_FDCAN_IRQHandler+0x324>
}
 80011e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG);
 80011ea:	f44f 7280 	mov.w	r2, #256	; 0x100
 80011ee:	651a      	str	r2, [r3, #80]	; 0x50
 80011f0:	4b41      	ldr	r3, [pc, #260]	; (80012f8 <HAL_FDCAN_IRQHandler+0x25c>)
 80011f2:	2200      	movs	r2, #0
 80011f4:	611a      	str	r2, [r3, #16]
      HAL_FDCAN_HighPriorityMessageCallback(hfdcan);
 80011f6:	f7ff ff4a 	bl	800108e <HAL_FDCAN_HighPriorityMessageCallback>
 80011fa:	e77d      	b.n	80010f8 <HAL_FDCAN_IRQHandler+0x5c>
      AbortedBuffers = hfdcan->Instance->TXBCF;
 80011fc:	f8d3 10dc 	ldr.w	r1, [r3, #220]	; 0xdc
      AbortedBuffers &= hfdcan->Instance->TXBCIE;
 8001200:	f8d3 20e4 	ldr.w	r2, [r3, #228]	; 0xe4
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_ABORT_COMPLETE);
 8001204:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8001208:	6518      	str	r0, [r3, #80]	; 0x50
 800120a:	4b3b      	ldr	r3, [pc, #236]	; (80012f8 <HAL_FDCAN_IRQHandler+0x25c>)
 800120c:	2000      	movs	r0, #0
 800120e:	6118      	str	r0, [r3, #16]
      HAL_FDCAN_TxBufferAbortCallback(hfdcan, AbortedBuffers);
 8001210:	4011      	ands	r1, r2
 8001212:	4620      	mov	r0, r4
 8001214:	f7ff ff37 	bl	8001086 <HAL_FDCAN_TxBufferAbortCallback>
 8001218:	e777      	b.n	800110a <HAL_FDCAN_IRQHandler+0x6e>
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, ClkCalibrationITs);
 800121a:	6823      	ldr	r3, [r4, #0]
 800121c:	2200      	movs	r2, #0
 800121e:	651a      	str	r2, [r3, #80]	; 0x50
 8001220:	ea4f 729a 	mov.w	r2, sl, lsr #30
 8001224:	4b34      	ldr	r3, [pc, #208]	; (80012f8 <HAL_FDCAN_IRQHandler+0x25c>)
 8001226:	611a      	str	r2, [r3, #16]
    HAL_FDCAN_ClockCalibrationCallback(hfdcan, ClkCalibrationITs);
 8001228:	4651      	mov	r1, sl
 800122a:	4620      	mov	r0, r4
 800122c:	f7ff ff26 	bl	800107c <HAL_FDCAN_ClockCalibrationCallback>
 8001230:	e76f      	b.n	8001112 <HAL_FDCAN_IRQHandler+0x76>
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, TxEventFifoITs);
 8001232:	6823      	ldr	r3, [r4, #0]
 8001234:	f8c3 9050 	str.w	r9, [r3, #80]	; 0x50
 8001238:	ea4f 7299 	mov.w	r2, r9, lsr #30
 800123c:	4b2e      	ldr	r3, [pc, #184]	; (80012f8 <HAL_FDCAN_IRQHandler+0x25c>)
 800123e:	611a      	str	r2, [r3, #16]
    HAL_FDCAN_TxEventFifoCallback(hfdcan, TxEventFifoITs);
 8001240:	4649      	mov	r1, r9
 8001242:	4620      	mov	r0, r4
 8001244:	f7ff ff1b 	bl	800107e <HAL_FDCAN_TxEventFifoCallback>
 8001248:	e767      	b.n	800111a <HAL_FDCAN_IRQHandler+0x7e>
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo0ITs);
 800124a:	6823      	ldr	r3, [r4, #0]
 800124c:	f8c3 8050 	str.w	r8, [r3, #80]	; 0x50
 8001250:	ea4f 7298 	mov.w	r2, r8, lsr #30
 8001254:	4b28      	ldr	r3, [pc, #160]	; (80012f8 <HAL_FDCAN_IRQHandler+0x25c>)
 8001256:	611a      	str	r2, [r3, #16]
    HAL_FDCAN_RxFifo0Callback(hfdcan, RxFifo0ITs);
 8001258:	4641      	mov	r1, r8
 800125a:	4620      	mov	r0, r4
 800125c:	f006 fa2a 	bl	80076b4 <HAL_FDCAN_RxFifo0Callback>
 8001260:	e75f      	b.n	8001122 <HAL_FDCAN_IRQHandler+0x86>
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo1ITs);
 8001262:	6823      	ldr	r3, [r4, #0]
 8001264:	651f      	str	r7, [r3, #80]	; 0x50
 8001266:	0fba      	lsrs	r2, r7, #30
 8001268:	4b23      	ldr	r3, [pc, #140]	; (80012f8 <HAL_FDCAN_IRQHandler+0x25c>)
 800126a:	611a      	str	r2, [r3, #16]
    HAL_FDCAN_RxFifo1Callback(hfdcan, RxFifo1ITs);
 800126c:	4639      	mov	r1, r7
 800126e:	4620      	mov	r0, r4
 8001270:	f7ff ff06 	bl	8001080 <HAL_FDCAN_RxFifo1Callback>
 8001274:	e758      	b.n	8001128 <HAL_FDCAN_IRQHandler+0x8c>
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_FIFO_EMPTY);
 8001276:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800127a:	651a      	str	r2, [r3, #80]	; 0x50
 800127c:	4b1e      	ldr	r3, [pc, #120]	; (80012f8 <HAL_FDCAN_IRQHandler+0x25c>)
 800127e:	2200      	movs	r2, #0
 8001280:	611a      	str	r2, [r3, #16]
      HAL_FDCAN_TxFifoEmptyCallback(hfdcan);
 8001282:	4620      	mov	r0, r4
 8001284:	f7ff fefd 	bl	8001082 <HAL_FDCAN_TxFifoEmptyCallback>
 8001288:	e758      	b.n	800113c <HAL_FDCAN_IRQHandler+0xa0>
      TransmittedBuffers = hfdcan->Instance->TXBTO;
 800128a:	f8d3 10d8 	ldr.w	r1, [r3, #216]	; 0xd8
      TransmittedBuffers &= hfdcan->Instance->TXBTIE;
 800128e:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_COMPLETE);
 8001292:	f44f 7000 	mov.w	r0, #512	; 0x200
 8001296:	6518      	str	r0, [r3, #80]	; 0x50
 8001298:	4b17      	ldr	r3, [pc, #92]	; (80012f8 <HAL_FDCAN_IRQHandler+0x25c>)
 800129a:	2000      	movs	r0, #0
 800129c:	6118      	str	r0, [r3, #16]
      HAL_FDCAN_TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
 800129e:	4011      	ands	r1, r2
 80012a0:	4620      	mov	r0, r4
 80012a2:	f7ff feef 	bl	8001084 <HAL_FDCAN_TxBufferCompleteCallback>
 80012a6:	e753      	b.n	8001150 <HAL_FDCAN_IRQHandler+0xb4>
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RX_BUFFER_NEW_MESSAGE);
 80012a8:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 80012ac:	651a      	str	r2, [r3, #80]	; 0x50
 80012ae:	4b12      	ldr	r3, [pc, #72]	; (80012f8 <HAL_FDCAN_IRQHandler+0x25c>)
 80012b0:	2200      	movs	r2, #0
 80012b2:	611a      	str	r2, [r3, #16]
      HAL_FDCAN_RxBufferNewMessageCallback(hfdcan);
 80012b4:	4620      	mov	r0, r4
 80012b6:	f7ff fee7 	bl	8001088 <HAL_FDCAN_RxBufferNewMessageCallback>
 80012ba:	e753      	b.n	8001164 <HAL_FDCAN_IRQHandler+0xc8>
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMESTAMP_WRAPAROUND);
 80012bc:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80012c0:	651a      	str	r2, [r3, #80]	; 0x50
 80012c2:	4b0d      	ldr	r3, [pc, #52]	; (80012f8 <HAL_FDCAN_IRQHandler+0x25c>)
 80012c4:	2200      	movs	r2, #0
 80012c6:	611a      	str	r2, [r3, #16]
      HAL_FDCAN_TimestampWraparoundCallback(hfdcan);
 80012c8:	4620      	mov	r0, r4
 80012ca:	f7ff fede 	bl	800108a <HAL_FDCAN_TimestampWraparoundCallback>
 80012ce:	e753      	b.n	8001178 <HAL_FDCAN_IRQHandler+0xdc>
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMEOUT_OCCURRED);
 80012d0:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 80012d4:	651a      	str	r2, [r3, #80]	; 0x50
 80012d6:	4b08      	ldr	r3, [pc, #32]	; (80012f8 <HAL_FDCAN_IRQHandler+0x25c>)
 80012d8:	2200      	movs	r2, #0
 80012da:	611a      	str	r2, [r3, #16]
      HAL_FDCAN_TimeoutOccurredCallback(hfdcan);
 80012dc:	4620      	mov	r0, r4
 80012de:	f7ff fed5 	bl	800108c <HAL_FDCAN_TimeoutOccurredCallback>
 80012e2:	e753      	b.n	800118c <HAL_FDCAN_IRQHandler+0xf0>
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, ErrorStatusITs);
 80012e4:	6823      	ldr	r3, [r4, #0]
 80012e6:	651e      	str	r6, [r3, #80]	; 0x50
 80012e8:	0fb2      	lsrs	r2, r6, #30
 80012ea:	4b03      	ldr	r3, [pc, #12]	; (80012f8 <HAL_FDCAN_IRQHandler+0x25c>)
 80012ec:	611a      	str	r2, [r3, #16]
    HAL_FDCAN_ErrorStatusCallback(hfdcan, ErrorStatusITs);
 80012ee:	4631      	mov	r1, r6
 80012f0:	4620      	mov	r0, r4
 80012f2:	f7ff fece 	bl	8001092 <HAL_FDCAN_ErrorStatusCallback>
 80012f6:	e761      	b.n	80011bc <HAL_FDCAN_IRQHandler+0x120>
 80012f8:	4000a800 	.word	0x4000a800
 80012fc:	4000a000 	.word	0x4000a000
    if ((hfdcan->ttcan->TTOCF & FDCAN_TTOCF_OM) != 0U)
 8001300:	6863      	ldr	r3, [r4, #4]
 8001302:	689a      	ldr	r2, [r3, #8]
 8001304:	f012 0f03 	tst.w	r2, #3
 8001308:	f43f af68 	beq.w	80011dc <HAL_FDCAN_IRQHandler+0x140>
      TTSchedSyncITs = hfdcan->ttcan->TTIR & FDCAN_TT_SCHEDULE_SYNC_MASK;
 800130c:	6a19      	ldr	r1, [r3, #32]
 800130e:	f001 010f 	and.w	r1, r1, #15
      TTSchedSyncITs &= hfdcan->ttcan->TTIE;
 8001312:	6a5a      	ldr	r2, [r3, #36]	; 0x24
      TTTimeMarkITs = hfdcan->ttcan->TTIR & FDCAN_TT_TIME_MARK_MASK;
 8001314:	6a18      	ldr	r0, [r3, #32]
 8001316:	f000 0830 	and.w	r8, r0, #48	; 0x30
      TTTimeMarkITs &= hfdcan->ttcan->TTIE;
 800131a:	6a58      	ldr	r0, [r3, #36]	; 0x24
 800131c:	ea08 0800 	and.w	r8, r8, r0
      TTGlobTimeITs = hfdcan->ttcan->TTIR & FDCAN_TT_GLOBAL_TIME_MASK;
 8001320:	6a1f      	ldr	r7, [r3, #32]
 8001322:	f407 77c0 	and.w	r7, r7, #384	; 0x180
      TTGlobTimeITs &= hfdcan->ttcan->TTIE;
 8001326:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8001328:	4007      	ands	r7, r0
      TTDistErrors = hfdcan->ttcan->TTIR & FDCAN_TT_DISTURBING_ERROR_MASK;
 800132a:	6a1e      	ldr	r6, [r3, #32]
 800132c:	f406 46fc 	and.w	r6, r6, #32256	; 0x7e00
      TTDistErrors &= hfdcan->ttcan->TTIE;
 8001330:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8001332:	4006      	ands	r6, r0
      TTFatalErrors = hfdcan->ttcan->TTIR & FDCAN_TT_FATAL_ERROR_MASK;
 8001334:	6a1d      	ldr	r5, [r3, #32]
 8001336:	f405 25f0 	and.w	r5, r5, #491520	; 0x78000
      TTFatalErrors &= hfdcan->ttcan->TTIE;
 800133a:	6a58      	ldr	r0, [r3, #36]	; 0x24
 800133c:	4005      	ands	r5, r0
      if (TTSchedSyncITs != 0U)
 800133e:	4011      	ands	r1, r2
 8001340:	d11f      	bne.n	8001382 <HAL_FDCAN_IRQHandler+0x2e6>
      if (TTTimeMarkITs != 0U)
 8001342:	f1b8 0f00 	cmp.w	r8, #0
 8001346:	d121      	bne.n	800138c <HAL_FDCAN_IRQHandler+0x2f0>
      if (__HAL_FDCAN_TT_GET_IT_SOURCE(hfdcan, FDCAN_TT_IT_STOP_WATCH) != 0U)
 8001348:	6863      	ldr	r3, [r4, #4]
 800134a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800134c:	f012 0f40 	tst.w	r2, #64	; 0x40
 8001350:	d003      	beq.n	800135a <HAL_FDCAN_IRQHandler+0x2be>
        if (__HAL_FDCAN_TT_GET_FLAG(hfdcan, FDCAN_TT_FLAG_STOP_WATCH) != 0U)
 8001352:	6a1a      	ldr	r2, [r3, #32]
 8001354:	f012 0f40 	tst.w	r2, #64	; 0x40
 8001358:	d120      	bne.n	800139c <HAL_FDCAN_IRQHandler+0x300>
      if (TTGlobTimeITs != 0U)
 800135a:	bb57      	cbnz	r7, 80013b2 <HAL_FDCAN_IRQHandler+0x316>
      if (TTDistErrors != 0U)
 800135c:	b136      	cbz	r6, 800136c <HAL_FDCAN_IRQHandler+0x2d0>
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTDistErrors);
 800135e:	6863      	ldr	r3, [r4, #4]
 8001360:	621e      	str	r6, [r3, #32]
        hfdcan->ErrorCode |= TTDistErrors;
 8001362:	f8d4 309c 	ldr.w	r3, [r4, #156]	; 0x9c
 8001366:	431e      	orrs	r6, r3
 8001368:	f8c4 609c 	str.w	r6, [r4, #156]	; 0x9c
      if (TTFatalErrors != 0U)
 800136c:	2d00      	cmp	r5, #0
 800136e:	f43f af35 	beq.w	80011dc <HAL_FDCAN_IRQHandler+0x140>
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTFatalErrors);
 8001372:	6863      	ldr	r3, [r4, #4]
 8001374:	621d      	str	r5, [r3, #32]
        hfdcan->ErrorCode |= TTFatalErrors;
 8001376:	f8d4 309c 	ldr.w	r3, [r4, #156]	; 0x9c
 800137a:	431d      	orrs	r5, r3
 800137c:	f8c4 509c 	str.w	r5, [r4, #156]	; 0x9c
 8001380:	e72c      	b.n	80011dc <HAL_FDCAN_IRQHandler+0x140>
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTSchedSyncITs);
 8001382:	6219      	str	r1, [r3, #32]
        HAL_FDCAN_TT_ScheduleSyncCallback(hfdcan, TTSchedSyncITs);
 8001384:	4620      	mov	r0, r4
 8001386:	f7ff fe85 	bl	8001094 <HAL_FDCAN_TT_ScheduleSyncCallback>
 800138a:	e7da      	b.n	8001342 <HAL_FDCAN_IRQHandler+0x2a6>
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTTimeMarkITs);
 800138c:	6863      	ldr	r3, [r4, #4]
 800138e:	f8c3 8020 	str.w	r8, [r3, #32]
        HAL_FDCAN_TT_TimeMarkCallback(hfdcan, TTTimeMarkITs);
 8001392:	4641      	mov	r1, r8
 8001394:	4620      	mov	r0, r4
 8001396:	f7ff fe7e 	bl	8001096 <HAL_FDCAN_TT_TimeMarkCallback>
 800139a:	e7d5      	b.n	8001348 <HAL_FDCAN_IRQHandler+0x2ac>
          SWTime = ((hfdcan->ttcan->TTCPT & FDCAN_TTCPT_SWV) >> FDCAN_TTCPT_SWV_Pos);
 800139c:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
          SWCycleCount = ((hfdcan->ttcan->TTCPT & FDCAN_TTCPT_CCV) >> FDCAN_TTCPT_CCV_Pos);
 800139e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
          __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, FDCAN_TT_FLAG_STOP_WATCH);
 80013a0:	2040      	movs	r0, #64	; 0x40
 80013a2:	6218      	str	r0, [r3, #32]
          HAL_FDCAN_TT_StopWatchCallback(hfdcan, SWTime, SWCycleCount);
 80013a4:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 80013a8:	0c09      	lsrs	r1, r1, #16
 80013aa:	4620      	mov	r0, r4
 80013ac:	f7ff fe74 	bl	8001098 <HAL_FDCAN_TT_StopWatchCallback>
 80013b0:	e7d3      	b.n	800135a <HAL_FDCAN_IRQHandler+0x2be>
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTGlobTimeITs);
 80013b2:	6863      	ldr	r3, [r4, #4]
 80013b4:	621f      	str	r7, [r3, #32]
        HAL_FDCAN_TT_GlobalTimeCallback(hfdcan, TTGlobTimeITs);
 80013b6:	4639      	mov	r1, r7
 80013b8:	4620      	mov	r0, r4
 80013ba:	f7ff fe6e 	bl	800109a <HAL_FDCAN_TT_GlobalTimeCallback>
 80013be:	e7cd      	b.n	800135c <HAL_FDCAN_IRQHandler+0x2c0>
    HAL_FDCAN_ErrorCallback(hfdcan);
 80013c0:	4620      	mov	r0, r4
 80013c2:	f7ff fe65 	bl	8001090 <HAL_FDCAN_ErrorCallback>
}
 80013c6:	e70e      	b.n	80011e6 <HAL_FDCAN_IRQHandler+0x14a>

080013c8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80013c8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80013ca:	b083      	sub	sp, #12
  uint32_t position = 0x00U;
 80013cc:	2300      	movs	r3, #0
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80013ce:	e03a      	b.n	8001446 <HAL_GPIO_Init+0x7e>
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();

        temp = SYSCFG->EXTICR[position >> 2U];
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80013d0:	2409      	movs	r4, #9
 80013d2:	e000      	b.n	80013d6 <HAL_GPIO_Init+0xe>
 80013d4:	2400      	movs	r4, #0
 80013d6:	40b4      	lsls	r4, r6
 80013d8:	433c      	orrs	r4, r7
        SYSCFG->EXTICR[position >> 2U] = temp;
 80013da:	3502      	adds	r5, #2
 80013dc:	4e6f      	ldr	r6, [pc, #444]	; (800159c <HAL_GPIO_Init+0x1d4>)
 80013de:	f846 4025 	str.w	r4, [r6, r5, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 80013e2:	4c6f      	ldr	r4, [pc, #444]	; (80015a0 <HAL_GPIO_Init+0x1d8>)
 80013e4:	6825      	ldr	r5, [r4, #0]
        temp &= ~(iocurrent);
 80013e6:	43d4      	mvns	r4, r2
 80013e8:	ea25 0602 	bic.w	r6, r5, r2
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80013ec:	684f      	ldr	r7, [r1, #4]
 80013ee:	f417 3f80 	tst.w	r7, #65536	; 0x10000
 80013f2:	d001      	beq.n	80013f8 <HAL_GPIO_Init+0x30>
        {
          temp |= iocurrent;
 80013f4:	ea42 0605 	orr.w	r6, r2, r5
        }
        EXTI_CurrentCPU->IMR1 = temp;
 80013f8:	4d69      	ldr	r5, [pc, #420]	; (80015a0 <HAL_GPIO_Init+0x1d8>)
 80013fa:	602e      	str	r6, [r5, #0]

        temp = EXTI_CurrentCPU->EMR1;
 80013fc:	686e      	ldr	r6, [r5, #4]
        temp &= ~(iocurrent);
 80013fe:	ea04 0506 	and.w	r5, r4, r6
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001402:	684f      	ldr	r7, [r1, #4]
 8001404:	f417 3f00 	tst.w	r7, #131072	; 0x20000
 8001408:	d001      	beq.n	800140e <HAL_GPIO_Init+0x46>
        {
          temp |= iocurrent;
 800140a:	ea42 0506 	orr.w	r5, r2, r6
        }
        EXTI_CurrentCPU->EMR1 = temp;
 800140e:	4e64      	ldr	r6, [pc, #400]	; (80015a0 <HAL_GPIO_Init+0x1d8>)
 8001410:	6075      	str	r5, [r6, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001412:	f04f 45b0 	mov.w	r5, #1476395008	; 0x58000000
 8001416:	682d      	ldr	r5, [r5, #0]
        temp &= ~(iocurrent);
 8001418:	ea04 0605 	and.w	r6, r4, r5
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800141c:	684f      	ldr	r7, [r1, #4]
 800141e:	f417 1f80 	tst.w	r7, #1048576	; 0x100000
 8001422:	d001      	beq.n	8001428 <HAL_GPIO_Init+0x60>
        {
          temp |= iocurrent;
 8001424:	ea42 0605 	orr.w	r6, r2, r5
        }
        EXTI->RTSR1 = temp;
 8001428:	f04f 45b0 	mov.w	r5, #1476395008	; 0x58000000
 800142c:	602e      	str	r6, [r5, #0]

        temp = EXTI->FTSR1;
 800142e:	686d      	ldr	r5, [r5, #4]
        temp &= ~(iocurrent);
 8001430:	402c      	ands	r4, r5
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001432:	684e      	ldr	r6, [r1, #4]
 8001434:	f416 1f00 	tst.w	r6, #2097152	; 0x200000
 8001438:	d001      	beq.n	800143e <HAL_GPIO_Init+0x76>
        {
          temp |= iocurrent;
 800143a:	ea42 0405 	orr.w	r4, r2, r5
        }
        EXTI->FTSR1 = temp;
 800143e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001442:	6054      	str	r4, [r2, #4]
      }
    }

    position++;
 8001444:	3301      	adds	r3, #1
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8001446:	680a      	ldr	r2, [r1, #0]
 8001448:	fa32 f403 	lsrs.w	r4, r2, r3
 800144c:	f000 80a3 	beq.w	8001596 <HAL_GPIO_Init+0x1ce>
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8001450:	2401      	movs	r4, #1
 8001452:	409c      	lsls	r4, r3
    if (iocurrent != 0x00U)
 8001454:	4022      	ands	r2, r4
 8001456:	d0f5      	beq.n	8001444 <HAL_GPIO_Init+0x7c>
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001458:	684d      	ldr	r5, [r1, #4]
 800145a:	1e6e      	subs	r6, r5, #1
 800145c:	2d11      	cmp	r5, #17
 800145e:	bf18      	it	ne
 8001460:	2e01      	cmpne	r6, #1
 8001462:	d901      	bls.n	8001468 <HAL_GPIO_Init+0xa0>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001464:	2d12      	cmp	r5, #18
 8001466:	d112      	bne.n	800148e <HAL_GPIO_Init+0xc6>
        temp = GPIOx->OSPEEDR;
 8001468:	6886      	ldr	r6, [r0, #8]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800146a:	005f      	lsls	r7, r3, #1
 800146c:	2503      	movs	r5, #3
 800146e:	40bd      	lsls	r5, r7
 8001470:	ea26 0605 	bic.w	r6, r6, r5
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001474:	68cd      	ldr	r5, [r1, #12]
 8001476:	40bd      	lsls	r5, r7
 8001478:	4335      	orrs	r5, r6
        GPIOx->OSPEEDR = temp;
 800147a:	6085      	str	r5, [r0, #8]
        temp = GPIOx->OTYPER;
 800147c:	6846      	ldr	r6, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800147e:	ea26 0604 	bic.w	r6, r6, r4
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8001482:	684d      	ldr	r5, [r1, #4]
 8001484:	f3c5 1400 	ubfx	r4, r5, #4, #1
 8001488:	409c      	lsls	r4, r3
 800148a:	4334      	orrs	r4, r6
        GPIOx->OTYPER = temp;
 800148c:	6044      	str	r4, [r0, #4]
      temp = GPIOx->PUPDR;
 800148e:	68c7      	ldr	r7, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001490:	005e      	lsls	r6, r3, #1
 8001492:	2503      	movs	r5, #3
 8001494:	40b5      	lsls	r5, r6
 8001496:	43ec      	mvns	r4, r5
 8001498:	ea27 0705 	bic.w	r7, r7, r5
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800149c:	688d      	ldr	r5, [r1, #8]
 800149e:	40b5      	lsls	r5, r6
 80014a0:	433d      	orrs	r5, r7
      GPIOx->PUPDR = temp;
 80014a2:	60c5      	str	r5, [r0, #12]
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80014a4:	684d      	ldr	r5, [r1, #4]
 80014a6:	2d12      	cmp	r5, #18
 80014a8:	bf18      	it	ne
 80014aa:	2d02      	cmpne	r5, #2
 80014ac:	d113      	bne.n	80014d6 <HAL_GPIO_Init+0x10e>
        temp = GPIOx->AFR[position >> 3U];
 80014ae:	08df      	lsrs	r7, r3, #3
 80014b0:	3708      	adds	r7, #8
 80014b2:	f850 e027 	ldr.w	lr, [r0, r7, lsl #2]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80014b6:	f003 0507 	and.w	r5, r3, #7
 80014ba:	ea4f 0c85 	mov.w	ip, r5, lsl #2
 80014be:	250f      	movs	r5, #15
 80014c0:	fa05 f50c 	lsl.w	r5, r5, ip
 80014c4:	ea2e 0e05 	bic.w	lr, lr, r5
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80014c8:	690d      	ldr	r5, [r1, #16]
 80014ca:	fa05 f50c 	lsl.w	r5, r5, ip
 80014ce:	ea45 050e 	orr.w	r5, r5, lr
        GPIOx->AFR[position >> 3U] = temp;
 80014d2:	f840 5027 	str.w	r5, [r0, r7, lsl #2]
      temp = GPIOx->MODER;
 80014d6:	6805      	ldr	r5, [r0, #0]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80014d8:	4025      	ands	r5, r4
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80014da:	684c      	ldr	r4, [r1, #4]
 80014dc:	f004 0403 	and.w	r4, r4, #3
 80014e0:	40b4      	lsls	r4, r6
 80014e2:	432c      	orrs	r4, r5
      GPIOx->MODER = temp;
 80014e4:	6004      	str	r4, [r0, #0]
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80014e6:	684c      	ldr	r4, [r1, #4]
 80014e8:	f014 5f80 	tst.w	r4, #268435456	; 0x10000000
 80014ec:	d0aa      	beq.n	8001444 <HAL_GPIO_Init+0x7c>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80014ee:	4c2d      	ldr	r4, [pc, #180]	; (80015a4 <HAL_GPIO_Init+0x1dc>)
 80014f0:	f8d4 50f4 	ldr.w	r5, [r4, #244]	; 0xf4
 80014f4:	f045 0502 	orr.w	r5, r5, #2
 80014f8:	f8c4 50f4 	str.w	r5, [r4, #244]	; 0xf4
 80014fc:	f8d4 40f4 	ldr.w	r4, [r4, #244]	; 0xf4
 8001500:	f004 0402 	and.w	r4, r4, #2
 8001504:	9401      	str	r4, [sp, #4]
 8001506:	9c01      	ldr	r4, [sp, #4]
        temp = SYSCFG->EXTICR[position >> 2U];
 8001508:	089d      	lsrs	r5, r3, #2
 800150a:	1cae      	adds	r6, r5, #2
 800150c:	4c23      	ldr	r4, [pc, #140]	; (800159c <HAL_GPIO_Init+0x1d4>)
 800150e:	f854 7026 	ldr.w	r7, [r4, r6, lsl #2]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8001512:	f003 0403 	and.w	r4, r3, #3
 8001516:	00a6      	lsls	r6, r4, #2
 8001518:	240f      	movs	r4, #15
 800151a:	40b4      	lsls	r4, r6
 800151c:	ea27 0704 	bic.w	r7, r7, r4
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8001520:	4c21      	ldr	r4, [pc, #132]	; (80015a8 <HAL_GPIO_Init+0x1e0>)
 8001522:	42a0      	cmp	r0, r4
 8001524:	f43f af56 	beq.w	80013d4 <HAL_GPIO_Init+0xc>
 8001528:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 800152c:	42a0      	cmp	r0, r4
 800152e:	d022      	beq.n	8001576 <HAL_GPIO_Init+0x1ae>
 8001530:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8001534:	42a0      	cmp	r0, r4
 8001536:	d020      	beq.n	800157a <HAL_GPIO_Init+0x1b2>
 8001538:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 800153c:	42a0      	cmp	r0, r4
 800153e:	d01e      	beq.n	800157e <HAL_GPIO_Init+0x1b6>
 8001540:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8001544:	42a0      	cmp	r0, r4
 8001546:	d01c      	beq.n	8001582 <HAL_GPIO_Init+0x1ba>
 8001548:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 800154c:	42a0      	cmp	r0, r4
 800154e:	d01a      	beq.n	8001586 <HAL_GPIO_Init+0x1be>
 8001550:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8001554:	42a0      	cmp	r0, r4
 8001556:	d018      	beq.n	800158a <HAL_GPIO_Init+0x1c2>
 8001558:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 800155c:	42a0      	cmp	r0, r4
 800155e:	d016      	beq.n	800158e <HAL_GPIO_Init+0x1c6>
 8001560:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8001564:	42a0      	cmp	r0, r4
 8001566:	d014      	beq.n	8001592 <HAL_GPIO_Init+0x1ca>
 8001568:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 800156c:	42a0      	cmp	r0, r4
 800156e:	f43f af2f 	beq.w	80013d0 <HAL_GPIO_Init+0x8>
 8001572:	240a      	movs	r4, #10
 8001574:	e72f      	b.n	80013d6 <HAL_GPIO_Init+0xe>
 8001576:	2401      	movs	r4, #1
 8001578:	e72d      	b.n	80013d6 <HAL_GPIO_Init+0xe>
 800157a:	2402      	movs	r4, #2
 800157c:	e72b      	b.n	80013d6 <HAL_GPIO_Init+0xe>
 800157e:	2403      	movs	r4, #3
 8001580:	e729      	b.n	80013d6 <HAL_GPIO_Init+0xe>
 8001582:	2404      	movs	r4, #4
 8001584:	e727      	b.n	80013d6 <HAL_GPIO_Init+0xe>
 8001586:	2405      	movs	r4, #5
 8001588:	e725      	b.n	80013d6 <HAL_GPIO_Init+0xe>
 800158a:	2406      	movs	r4, #6
 800158c:	e723      	b.n	80013d6 <HAL_GPIO_Init+0xe>
 800158e:	2407      	movs	r4, #7
 8001590:	e721      	b.n	80013d6 <HAL_GPIO_Init+0xe>
 8001592:	2408      	movs	r4, #8
 8001594:	e71f      	b.n	80013d6 <HAL_GPIO_Init+0xe>
  }
}
 8001596:	b003      	add	sp, #12
 8001598:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800159a:	bf00      	nop
 800159c:	58000400 	.word	0x58000400
 80015a0:	58000080 	.word	0x58000080
 80015a4:	58024400 	.word	0x58024400
 80015a8:	58020000 	.word	0x58020000

080015ac <HAL_I2C_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80015ac:	2800      	cmp	r0, #0
 80015ae:	d057      	beq.n	8001660 <HAL_I2C_Init+0xb4>
{
 80015b0:	b510      	push	{r4, lr}
 80015b2:	4604      	mov	r4, r0
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80015b4:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 80015b8:	2b00      	cmp	r3, #0
 80015ba:	d041      	beq.n	8001640 <HAL_I2C_Init+0x94>
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80015bc:	2324      	movs	r3, #36	; 0x24
 80015be:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80015c2:	6822      	ldr	r2, [r4, #0]
 80015c4:	6813      	ldr	r3, [r2, #0]
 80015c6:	f023 0301 	bic.w	r3, r3, #1
 80015ca:	6013      	str	r3, [r2, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80015cc:	6863      	ldr	r3, [r4, #4]
 80015ce:	6822      	ldr	r2, [r4, #0]
 80015d0:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
 80015d4:	6113      	str	r3, [r2, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80015d6:	6822      	ldr	r2, [r4, #0]
 80015d8:	6893      	ldr	r3, [r2, #8]
 80015da:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80015de:	6093      	str	r3, [r2, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80015e0:	68e3      	ldr	r3, [r4, #12]
 80015e2:	2b01      	cmp	r3, #1
 80015e4:	d031      	beq.n	800164a <HAL_I2C_Init+0x9e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80015e6:	68a3      	ldr	r3, [r4, #8]
 80015e8:	6822      	ldr	r2, [r4, #0]
 80015ea:	f443 4304 	orr.w	r3, r3, #33792	; 0x8400
 80015ee:	6093      	str	r3, [r2, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80015f0:	68e3      	ldr	r3, [r4, #12]
 80015f2:	2b02      	cmp	r3, #2
 80015f4:	d02f      	beq.n	8001656 <HAL_I2C_Init+0xaa>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80015f6:	6822      	ldr	r2, [r4, #0]
 80015f8:	6851      	ldr	r1, [r2, #4]
 80015fa:	4b1a      	ldr	r3, [pc, #104]	; (8001664 <HAL_I2C_Init+0xb8>)
 80015fc:	430b      	orrs	r3, r1
 80015fe:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8001600:	6822      	ldr	r2, [r4, #0]
 8001602:	68d3      	ldr	r3, [r2, #12]
 8001604:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8001608:	60d3      	str	r3, [r2, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 800160a:	6923      	ldr	r3, [r4, #16]
 800160c:	6962      	ldr	r2, [r4, #20]
 800160e:	4313      	orrs	r3, r2
 8001610:	69a1      	ldr	r1, [r4, #24]
 8001612:	6822      	ldr	r2, [r4, #0]
 8001614:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8001618:	60d3      	str	r3, [r2, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800161a:	69e3      	ldr	r3, [r4, #28]
 800161c:	6a21      	ldr	r1, [r4, #32]
 800161e:	6822      	ldr	r2, [r4, #0]
 8001620:	430b      	orrs	r3, r1
 8001622:	6013      	str	r3, [r2, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001624:	6822      	ldr	r2, [r4, #0]
 8001626:	6813      	ldr	r3, [r2, #0]
 8001628:	f043 0301 	orr.w	r3, r3, #1
 800162c:	6013      	str	r3, [r2, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800162e:	2000      	movs	r0, #0
 8001630:	6460      	str	r0, [r4, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8001632:	2320      	movs	r3, #32
 8001634:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8001638:	6320      	str	r0, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800163a:	f884 0042 	strb.w	r0, [r4, #66]	; 0x42

  return HAL_OK;
}
 800163e:	bd10      	pop	{r4, pc}
    hi2c->Lock = HAL_UNLOCKED;
 8001640:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
    HAL_I2C_MspInit(hi2c);
 8001644:	f006 f944 	bl	80078d0 <HAL_I2C_MspInit>
 8001648:	e7b8      	b.n	80015bc <HAL_I2C_Init+0x10>
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800164a:	68a3      	ldr	r3, [r4, #8]
 800164c:	6822      	ldr	r2, [r4, #0]
 800164e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001652:	6093      	str	r3, [r2, #8]
 8001654:	e7cc      	b.n	80015f0 <HAL_I2C_Init+0x44>
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8001656:	6823      	ldr	r3, [r4, #0]
 8001658:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800165c:	605a      	str	r2, [r3, #4]
 800165e:	e7ca      	b.n	80015f6 <HAL_I2C_Init+0x4a>
    return HAL_ERROR;
 8001660:	2001      	movs	r0, #1
}
 8001662:	4770      	bx	lr
 8001664:	02008000 	.word	0x02008000

08001668 <HAL_I2CEx_ConfigAnalogFilter>:
{
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001668:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 800166c:	b2db      	uxtb	r3, r3
 800166e:	2b20      	cmp	r3, #32
 8001670:	d124      	bne.n	80016bc <HAL_I2CEx_ConfigAnalogFilter+0x54>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001672:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 8001676:	2b01      	cmp	r3, #1
 8001678:	d022      	beq.n	80016c0 <HAL_I2CEx_ConfigAnalogFilter+0x58>
 800167a:	2301      	movs	r3, #1
 800167c:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001680:	2324      	movs	r3, #36	; 0x24
 8001682:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001686:	6802      	ldr	r2, [r0, #0]
 8001688:	6813      	ldr	r3, [r2, #0]
 800168a:	f023 0301 	bic.w	r3, r3, #1
 800168e:	6013      	str	r3, [r2, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8001690:	6802      	ldr	r2, [r0, #0]
 8001692:	6813      	ldr	r3, [r2, #0]
 8001694:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8001698:	6013      	str	r3, [r2, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800169a:	6802      	ldr	r2, [r0, #0]
 800169c:	6813      	ldr	r3, [r2, #0]
 800169e:	4319      	orrs	r1, r3
 80016a0:	6011      	str	r1, [r2, #0]

    __HAL_I2C_ENABLE(hi2c);
 80016a2:	6802      	ldr	r2, [r0, #0]
 80016a4:	6813      	ldr	r3, [r2, #0]
 80016a6:	f043 0301 	orr.w	r3, r3, #1
 80016aa:	6013      	str	r3, [r2, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80016ac:	2320      	movs	r3, #32
 80016ae:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80016b2:	2300      	movs	r3, #0
 80016b4:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40

    return HAL_OK;
 80016b8:	4618      	mov	r0, r3
 80016ba:	4770      	bx	lr
  }
  else
  {
    return HAL_BUSY;
 80016bc:	2002      	movs	r0, #2
 80016be:	4770      	bx	lr
    __HAL_LOCK(hi2c);
 80016c0:	2002      	movs	r0, #2
  }
}
 80016c2:	4770      	bx	lr

080016c4 <HAL_I2CEx_ConfigDigitalFilter>:

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80016c4:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 80016c8:	b2db      	uxtb	r3, r3
 80016ca:	2b20      	cmp	r3, #32
 80016cc:	d122      	bne.n	8001714 <HAL_I2CEx_ConfigDigitalFilter+0x50>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80016ce:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 80016d2:	2b01      	cmp	r3, #1
 80016d4:	d020      	beq.n	8001718 <HAL_I2CEx_ConfigDigitalFilter+0x54>
 80016d6:	2301      	movs	r3, #1
 80016d8:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80016dc:	2324      	movs	r3, #36	; 0x24
 80016de:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80016e2:	6802      	ldr	r2, [r0, #0]
 80016e4:	6813      	ldr	r3, [r2, #0]
 80016e6:	f023 0301 	bic.w	r3, r3, #1
 80016ea:	6013      	str	r3, [r2, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80016ec:	6802      	ldr	r2, [r0, #0]
 80016ee:	6813      	ldr	r3, [r2, #0]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80016f0:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80016f4:	ea43 2101 	orr.w	r1, r3, r1, lsl #8

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80016f8:	6011      	str	r1, [r2, #0]

    __HAL_I2C_ENABLE(hi2c);
 80016fa:	6802      	ldr	r2, [r0, #0]
 80016fc:	6813      	ldr	r3, [r2, #0]
 80016fe:	f043 0301 	orr.w	r3, r3, #1
 8001702:	6013      	str	r3, [r2, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001704:	2320      	movs	r3, #32
 8001706:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800170a:	2300      	movs	r3, #0
 800170c:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40

    return HAL_OK;
 8001710:	4618      	mov	r0, r3
 8001712:	4770      	bx	lr
  }
  else
  {
    return HAL_BUSY;
 8001714:	2002      	movs	r0, #2
 8001716:	4770      	bx	lr
    __HAL_LOCK(hi2c);
 8001718:	2002      	movs	r0, #2
  }
}
 800171a:	4770      	bx	lr

0800171c <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800171c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001720:	b082      	sub	sp, #8
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001722:	f8d0 8000 	ldr.w	r8, [r0]
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];

  if (ep->xfer_count > ep->xfer_len)
 8001726:	ebc1 03c1 	rsb	r3, r1, r1, lsl #3
 800172a:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 800172e:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8001730:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001732:	429a      	cmp	r2, r3
 8001734:	d855      	bhi.n	80017e2 <PCD_WriteEmptyTxFifo+0xc6>
 8001736:	4607      	mov	r7, r0
 8001738:	460c      	mov	r4, r1
 800173a:	46c1      	mov	r9, r8
  {
    return HAL_ERROR;
  }

  len = ep->xfer_len - ep->xfer_count;
 800173c:	1a9b      	subs	r3, r3, r2

  if (len > ep->maxpacket)
 800173e:	ebc1 02c1 	rsb	r2, r1, r1, lsl #3
 8001742:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 8001746:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8001748:	429a      	cmp	r2, r3
 800174a:	d300      	bcc.n	800174e <PCD_WriteEmptyTxFifo+0x32>
  len = ep->xfer_len - ep->xfer_count;
 800174c:	461a      	mov	r2, r3
  {
    len = ep->maxpacket;
  }

  len32b = (len + 3U) / 4U;
 800174e:	f102 0a03 	add.w	sl, r2, #3
 8001752:	ea4f 0a9a 	mov.w	sl, sl, lsr #2

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8001756:	e015      	b.n	8001784 <PCD_WriteEmptyTxFifo+0x68>

    if (len > ep->maxpacket)
    {
      len = ep->maxpacket;
    }
    len32b = (len + 3U) / 4U;
 8001758:	f106 0a03 	add.w	sl, r6, #3
 800175c:	ea4f 0a9a 	mov.w	sl, sl, lsr #2

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8001760:	ebc4 05c4 	rsb	r5, r4, r4, lsl #3
 8001764:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 8001768:	6ca9      	ldr	r1, [r5, #72]	; 0x48
 800176a:	7c3b      	ldrb	r3, [r7, #16]
 800176c:	9300      	str	r3, [sp, #0]
 800176e:	b2b3      	uxth	r3, r6
 8001770:	b2e2      	uxtb	r2, r4
 8001772:	4640      	mov	r0, r8
 8001774:	f004 fac6 	bl	8005d04 <USB_WritePacket>
                          (uint8_t)hpcd->Init.dma_enable);

    ep->xfer_buff  += len;
 8001778:	6cab      	ldr	r3, [r5, #72]	; 0x48
 800177a:	4433      	add	r3, r6
 800177c:	64ab      	str	r3, [r5, #72]	; 0x48
    ep->xfer_count += len;
 800177e:	6d6b      	ldr	r3, [r5, #84]	; 0x54
 8001780:	441e      	add	r6, r3
 8001782:	656e      	str	r6, [r5, #84]	; 0x54
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8001784:	eb09 1344 	add.w	r3, r9, r4, lsl #5
 8001788:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800178c:	699b      	ldr	r3, [r3, #24]
 800178e:	b29b      	uxth	r3, r3
 8001790:	4553      	cmp	r3, sl
 8001792:	d312      	bcc.n	80017ba <PCD_WriteEmptyTxFifo+0x9e>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8001794:	ebc4 02c4 	rsb	r2, r4, r4, lsl #3
 8001798:	eb07 0282 	add.w	r2, r7, r2, lsl #2
 800179c:	6d51      	ldr	r1, [r2, #84]	; 0x54
 800179e:	6d13      	ldr	r3, [r2, #80]	; 0x50
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80017a0:	4299      	cmp	r1, r3
 80017a2:	d20a      	bcs.n	80017ba <PCD_WriteEmptyTxFifo+0x9e>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80017a4:	b14b      	cbz	r3, 80017ba <PCD_WriteEmptyTxFifo+0x9e>
    len = ep->xfer_len - ep->xfer_count;
 80017a6:	1a5b      	subs	r3, r3, r1
    if (len > ep->maxpacket)
 80017a8:	ebc4 02c4 	rsb	r2, r4, r4, lsl #3
 80017ac:	eb07 0282 	add.w	r2, r7, r2, lsl #2
 80017b0:	6c56      	ldr	r6, [r2, #68]	; 0x44
 80017b2:	429e      	cmp	r6, r3
 80017b4:	d3d0      	bcc.n	8001758 <PCD_WriteEmptyTxFifo+0x3c>
    len = ep->xfer_len - ep->xfer_count;
 80017b6:	461e      	mov	r6, r3
 80017b8:	e7ce      	b.n	8001758 <PCD_WriteEmptyTxFifo+0x3c>
  }

  if (ep->xfer_len <= ep->xfer_count)
 80017ba:	ebc4 00c4 	rsb	r0, r4, r4, lsl #3
 80017be:	eb07 0780 	add.w	r7, r7, r0, lsl #2
 80017c2:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80017c4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80017c6:	429a      	cmp	r2, r3
 80017c8:	d80f      	bhi.n	80017ea <PCD_WriteEmptyTxFifo+0xce>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80017ca:	f004 040f 	and.w	r4, r4, #15
 80017ce:	2301      	movs	r3, #1
 80017d0:	40a3      	lsls	r3, r4
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80017d2:	f8d8 4834 	ldr.w	r4, [r8, #2100]	; 0x834
 80017d6:	ea24 0403 	bic.w	r4, r4, r3
 80017da:	f8c8 4834 	str.w	r4, [r8, #2100]	; 0x834
  }

  return HAL_OK;
 80017de:	2000      	movs	r0, #0
 80017e0:	e000      	b.n	80017e4 <PCD_WriteEmptyTxFifo+0xc8>
    return HAL_ERROR;
 80017e2:	2001      	movs	r0, #1
}
 80017e4:	b002      	add	sp, #8
 80017e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  return HAL_OK;
 80017ea:	2000      	movs	r0, #0
 80017ec:	e7fa      	b.n	80017e4 <PCD_WriteEmptyTxFifo+0xc8>

080017ee <HAL_PCD_Init>:
{
 80017ee:	b5f0      	push	{r4, r5, r6, r7, lr}
 80017f0:	b08b      	sub	sp, #44	; 0x2c
  if (hpcd == NULL)
 80017f2:	2800      	cmp	r0, #0
 80017f4:	f000 8093 	beq.w	800191e <HAL_PCD_Init+0x130>
 80017f8:	4605      	mov	r5, r0
  USBx = hpcd->Instance;
 80017fa:	6804      	ldr	r4, [r0, #0]
  if (hpcd->State == HAL_PCD_STATE_RESET)
 80017fc:	f890 33bd 	ldrb.w	r3, [r0, #957]	; 0x3bd
 8001800:	b32b      	cbz	r3, 800184e <HAL_PCD_Init+0x60>
  hpcd->State = HAL_PCD_STATE_BUSY;
 8001802:	2303      	movs	r3, #3
 8001804:	f885 33bd 	strb.w	r3, [r5, #957]	; 0x3bd
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8001808:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800180a:	f413 7f80 	tst.w	r3, #256	; 0x100
 800180e:	d101      	bne.n	8001814 <HAL_PCD_Init+0x26>
    hpcd->Init.dma_enable = 0U;
 8001810:	2300      	movs	r3, #0
 8001812:	612b      	str	r3, [r5, #16]
  __HAL_PCD_DISABLE(hpcd);
 8001814:	6828      	ldr	r0, [r5, #0]
 8001816:	f004 f80f 	bl	8005838 <USB_DisableGlobalInt>
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800181a:	462c      	mov	r4, r5
 800181c:	f854 7b10 	ldr.w	r7, [r4], #16
 8001820:	466e      	mov	r6, sp
 8001822:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001824:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8001826:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001828:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 800182a:	e894 0003 	ldmia.w	r4, {r0, r1}
 800182e:	e886 0003 	stmia.w	r6, {r0, r1}
 8001832:	1d2b      	adds	r3, r5, #4
 8001834:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001836:	4638      	mov	r0, r7
 8001838:	f003 ff40 	bl	80056bc <USB_CoreInit>
 800183c:	4604      	mov	r4, r0
 800183e:	b158      	cbz	r0, 8001858 <HAL_PCD_Init+0x6a>
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001840:	2302      	movs	r3, #2
 8001842:	f885 33bd 	strb.w	r3, [r5, #957]	; 0x3bd
    return HAL_ERROR;
 8001846:	2401      	movs	r4, #1
}
 8001848:	4620      	mov	r0, r4
 800184a:	b00b      	add	sp, #44	; 0x2c
 800184c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    hpcd->Lock = HAL_UNLOCKED;
 800184e:	f880 33bc 	strb.w	r3, [r0, #956]	; 0x3bc
    HAL_PCD_MspInit(hpcd);
 8001852:	f006 fa71 	bl	8007d38 <HAL_PCD_MspInit>
 8001856:	e7d4      	b.n	8001802 <HAL_PCD_Init+0x14>
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8001858:	2100      	movs	r1, #0
 800185a:	6828      	ldr	r0, [r5, #0]
 800185c:	f003 fff2 	bl	8005844 <USB_SetCurrentMode>
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001860:	4623      	mov	r3, r4
 8001862:	e016      	b.n	8001892 <HAL_PCD_Init+0xa4>
    hpcd->IN_ep[i].is_in = 1U;
 8001864:	ebc3 02c3 	rsb	r2, r3, r3, lsl #3
 8001868:	eb05 0282 	add.w	r2, r5, r2, lsl #2
 800186c:	2101      	movs	r1, #1
 800186e:	f882 103d 	strb.w	r1, [r2, #61]	; 0x3d
    hpcd->IN_ep[i].num = i;
 8001872:	f882 303c 	strb.w	r3, [r2, #60]	; 0x3c
    hpcd->IN_ep[i].tx_fifo_num = i;
 8001876:	f8a2 3042 	strh.w	r3, [r2, #66]	; 0x42
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800187a:	2100      	movs	r1, #0
 800187c:	f882 103f 	strb.w	r1, [r2, #63]	; 0x3f
    hpcd->IN_ep[i].maxpacket = 0U;
 8001880:	6451      	str	r1, [r2, #68]	; 0x44
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001882:	6491      	str	r1, [r2, #72]	; 0x48
    hpcd->IN_ep[i].xfer_len = 0U;
 8001884:	ebc3 02c3 	rsb	r2, r3, r3, lsl #3
 8001888:	eb05 0282 	add.w	r2, r5, r2, lsl #2
 800188c:	6511      	str	r1, [r2, #80]	; 0x50
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800188e:	3301      	adds	r3, #1
 8001890:	b2db      	uxtb	r3, r3
 8001892:	6869      	ldr	r1, [r5, #4]
 8001894:	428b      	cmp	r3, r1
 8001896:	d3e5      	bcc.n	8001864 <HAL_PCD_Init+0x76>
 8001898:	e016      	b.n	80018c8 <HAL_PCD_Init+0xda>
    hpcd->OUT_ep[i].is_in = 0U;
 800189a:	ebc4 03c4 	rsb	r3, r4, r4, lsl #3
 800189e:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 80018a2:	2200      	movs	r2, #0
 80018a4:	f883 21fd 	strb.w	r2, [r3, #509]	; 0x1fd
    hpcd->OUT_ep[i].num = i;
 80018a8:	f883 41fc 	strb.w	r4, [r3, #508]	; 0x1fc
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80018ac:	f883 21ff 	strb.w	r2, [r3, #511]	; 0x1ff
    hpcd->OUT_ep[i].maxpacket = 0U;
 80018b0:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80018b4:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
    hpcd->OUT_ep[i].xfer_len = 0U;
 80018b8:	ebc4 03c4 	rsb	r3, r4, r4, lsl #3
 80018bc:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 80018c0:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80018c4:	3401      	adds	r4, #1
 80018c6:	b2e4      	uxtb	r4, r4
 80018c8:	42a1      	cmp	r1, r4
 80018ca:	d8e6      	bhi.n	800189a <HAL_PCD_Init+0xac>
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80018cc:	462c      	mov	r4, r5
 80018ce:	f854 7b10 	ldr.w	r7, [r4], #16
 80018d2:	466e      	mov	r6, sp
 80018d4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80018d6:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 80018d8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80018da:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 80018dc:	e894 0003 	ldmia.w	r4, {r0, r1}
 80018e0:	e886 0003 	stmia.w	r6, {r0, r1}
 80018e4:	1d2b      	adds	r3, r5, #4
 80018e6:	cb0e      	ldmia	r3, {r1, r2, r3}
 80018e8:	4638      	mov	r0, r7
 80018ea:	f003 fff1 	bl	80058d0 <USB_DevInit>
 80018ee:	4604      	mov	r4, r0
 80018f0:	b960      	cbnz	r0, 800190c <HAL_PCD_Init+0x11e>
  hpcd->USB_Address = 0U;
 80018f2:	2300      	movs	r3, #0
 80018f4:	f885 3038 	strb.w	r3, [r5, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 80018f8:	2301      	movs	r3, #1
 80018fa:	f885 33bd 	strb.w	r3, [r5, #957]	; 0x3bd
  if (hpcd->Init.lpm_enable == 1U)
 80018fe:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8001900:	2b01      	cmp	r3, #1
 8001902:	d008      	beq.n	8001916 <HAL_PCD_Init+0x128>
  (void)USB_DevDisconnect(hpcd->Instance);
 8001904:	6828      	ldr	r0, [r5, #0]
 8001906:	f004 fba3 	bl	8006050 <USB_DevDisconnect>
  return HAL_OK;
 800190a:	e79d      	b.n	8001848 <HAL_PCD_Init+0x5a>
    hpcd->State = HAL_PCD_STATE_ERROR;
 800190c:	2302      	movs	r3, #2
 800190e:	f885 33bd 	strb.w	r3, [r5, #957]	; 0x3bd
    return HAL_ERROR;
 8001912:	2401      	movs	r4, #1
 8001914:	e798      	b.n	8001848 <HAL_PCD_Init+0x5a>
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8001916:	4628      	mov	r0, r5
 8001918:	f000 fcda 	bl	80022d0 <HAL_PCDEx_ActivateLPM>
 800191c:	e7f2      	b.n	8001904 <HAL_PCD_Init+0x116>
    return HAL_ERROR;
 800191e:	2401      	movs	r4, #1
 8001920:	e792      	b.n	8001848 <HAL_PCD_Init+0x5a>

08001922 <HAL_PCD_Start>:
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001922:	6802      	ldr	r2, [r0, #0]
  __HAL_LOCK(hpcd);
 8001924:	f890 33bc 	ldrb.w	r3, [r0, #956]	; 0x3bc
 8001928:	2b01      	cmp	r3, #1
 800192a:	d019      	beq.n	8001960 <HAL_PCD_Start+0x3e>
{
 800192c:	b510      	push	{r4, lr}
 800192e:	4604      	mov	r4, r0
  __HAL_LOCK(hpcd);
 8001930:	2301      	movs	r3, #1
 8001932:	f880 33bc 	strb.w	r3, [r0, #956]	; 0x3bc
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8001936:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8001938:	2b01      	cmp	r3, #1
 800193a:	d009      	beq.n	8001950 <HAL_PCD_Start+0x2e>
  (void)USB_DevConnect(hpcd->Instance);
 800193c:	6820      	ldr	r0, [r4, #0]
 800193e:	f004 fb7b 	bl	8006038 <USB_DevConnect>
  __HAL_PCD_ENABLE(hpcd);
 8001942:	6820      	ldr	r0, [r4, #0]
 8001944:	f003 ff72 	bl	800582c <USB_EnableGlobalInt>
  __HAL_UNLOCK(hpcd);
 8001948:	2000      	movs	r0, #0
 800194a:	f884 03bc 	strb.w	r0, [r4, #956]	; 0x3bc
}
 800194e:	bd10      	pop	{r4, pc}
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 8001950:	6983      	ldr	r3, [r0, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8001952:	2b01      	cmp	r3, #1
 8001954:	d0f2      	beq.n	800193c <HAL_PCD_Start+0x1a>
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8001956:	6b93      	ldr	r3, [r2, #56]	; 0x38
 8001958:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800195c:	6393      	str	r3, [r2, #56]	; 0x38
 800195e:	e7ed      	b.n	800193c <HAL_PCD_Start+0x1a>
  __HAL_LOCK(hpcd);
 8001960:	2002      	movs	r0, #2
}
 8001962:	4770      	bx	lr

08001964 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8001964:	b570      	push	{r4, r5, r6, lr}
 8001966:	4604      	mov	r4, r0
 8001968:	460d      	mov	r5, r1
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800196a:	6800      	ldr	r0, [r0, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800196c:	6c06      	ldr	r6, [r0, #64]	; 0x40
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800196e:	eb00 1341 	add.w	r3, r0, r1, lsl #5
 8001972:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001976:	689a      	ldr	r2, [r3, #8]

  if (hpcd->Init.dma_enable == 1U)
 8001978:	6921      	ldr	r1, [r4, #16]
 800197a:	2901      	cmp	r1, #1
 800197c:	d011      	beq.n	80019a2 <PCD_EP_OutXfrComplete_int+0x3e>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 800197e:	4935      	ldr	r1, [pc, #212]	; (8001a54 <PCD_EP_OutXfrComplete_int+0xf0>)
 8001980:	428e      	cmp	r6, r1
 8001982:	d050      	beq.n	8001a26 <PCD_EP_OutXfrComplete_int+0xc2>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8001984:	b93d      	cbnz	r5, 8001996 <PCD_EP_OutXfrComplete_int+0x32>
 8001986:	ebc5 03c5 	rsb	r3, r5, r5, lsl #3
 800198a:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800198e:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8001992:	2b00      	cmp	r3, #0
 8001994:	d058      	beq.n	8001a48 <PCD_EP_OutXfrComplete_int+0xe4>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8001996:	b2e9      	uxtb	r1, r5
 8001998:	4620      	mov	r0, r4
 800199a:	f006 fa1b 	bl	8007dd4 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
}
 800199e:	2000      	movs	r0, #0
 80019a0:	bd70      	pop	{r4, r5, r6, pc}
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 80019a2:	f012 0f08 	tst.w	r2, #8
 80019a6:	d009      	beq.n	80019bc <PCD_EP_OutXfrComplete_int+0x58>
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80019a8:	492b      	ldr	r1, [pc, #172]	; (8001a58 <PCD_EP_OutXfrComplete_int+0xf4>)
 80019aa:	428e      	cmp	r6, r1
 80019ac:	d9f7      	bls.n	800199e <PCD_EP_OutXfrComplete_int+0x3a>
 80019ae:	f412 4f00 	tst.w	r2, #32768	; 0x8000
 80019b2:	d0f4      	beq.n	800199e <PCD_EP_OutXfrComplete_int+0x3a>
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80019b4:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80019b8:	609a      	str	r2, [r3, #8]
 80019ba:	e7f0      	b.n	800199e <PCD_EP_OutXfrComplete_int+0x3a>
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 80019bc:	f012 0f20 	tst.w	r2, #32
 80019c0:	d002      	beq.n	80019c8 <PCD_EP_OutXfrComplete_int+0x64>
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80019c2:	2220      	movs	r2, #32
 80019c4:	609a      	str	r2, [r3, #8]
 80019c6:	e7ea      	b.n	800199e <PCD_EP_OutXfrComplete_int+0x3a>
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 80019c8:	f012 0f28 	tst.w	r2, #40	; 0x28
 80019cc:	d1e7      	bne.n	800199e <PCD_EP_OutXfrComplete_int+0x3a>
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80019ce:	4922      	ldr	r1, [pc, #136]	; (8001a58 <PCD_EP_OutXfrComplete_int+0xf4>)
 80019d0:	428e      	cmp	r6, r1
 80019d2:	d906      	bls.n	80019e2 <PCD_EP_OutXfrComplete_int+0x7e>
 80019d4:	f412 4f00 	tst.w	r2, #32768	; 0x8000
 80019d8:	d003      	beq.n	80019e2 <PCD_EP_OutXfrComplete_int+0x7e>
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80019da:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80019de:	609a      	str	r2, [r3, #8]
 80019e0:	e7dd      	b.n	800199e <PCD_EP_OutXfrComplete_int+0x3a>
          hpcd->OUT_ep[epnum].maxpacket -
 80019e2:	ebc5 02c5 	rsb	r2, r5, r5, lsl #3
 80019e6:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 80019ea:	f8d2 1204 	ldr.w	r1, [r2, #516]	; 0x204
          (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 80019ee:	691b      	ldr	r3, [r3, #16]
 80019f0:	f3c3 0312 	ubfx	r3, r3, #0, #19
          hpcd->OUT_ep[epnum].maxpacket -
 80019f4:	1ac9      	subs	r1, r1, r3
        hpcd->OUT_ep[epnum].xfer_count =
 80019f6:	f8c2 1214 	str.w	r1, [r2, #532]	; 0x214
        hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;
 80019fa:	f8d2 1204 	ldr.w	r1, [r2, #516]	; 0x204
 80019fe:	f8d2 3208 	ldr.w	r3, [r2, #520]	; 0x208
 8001a02:	440b      	add	r3, r1
 8001a04:	f8c2 3208 	str.w	r3, [r2, #520]	; 0x208
        if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8001a08:	b915      	cbnz	r5, 8001a10 <PCD_EP_OutXfrComplete_int+0xac>
 8001a0a:	f8d2 3210 	ldr.w	r3, [r2, #528]	; 0x210
 8001a0e:	b123      	cbz	r3, 8001a1a <PCD_EP_OutXfrComplete_int+0xb6>
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8001a10:	b2e9      	uxtb	r1, r5
 8001a12:	4620      	mov	r0, r4
 8001a14:	f006 f9de 	bl	8007dd4 <HAL_PCD_DataOutStageCallback>
 8001a18:	e7c1      	b.n	800199e <PCD_EP_OutXfrComplete_int+0x3a>
          (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8001a1a:	f504 7271 	add.w	r2, r4, #964	; 0x3c4
 8001a1e:	2101      	movs	r1, #1
 8001a20:	f004 fb68 	bl	80060f4 <USB_EP0_OutStart>
 8001a24:	e7f4      	b.n	8001a10 <PCD_EP_OutXfrComplete_int+0xac>
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8001a26:	f412 4f00 	tst.w	r2, #32768	; 0x8000
 8001a2a:	d003      	beq.n	8001a34 <PCD_EP_OutXfrComplete_int+0xd0>
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8001a2c:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8001a30:	609a      	str	r2, [r3, #8]
 8001a32:	e7b4      	b.n	800199e <PCD_EP_OutXfrComplete_int+0x3a>
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8001a34:	f012 0f20 	tst.w	r2, #32
 8001a38:	d001      	beq.n	8001a3e <PCD_EP_OutXfrComplete_int+0xda>
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8001a3a:	2220      	movs	r2, #32
 8001a3c:	609a      	str	r2, [r3, #8]
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8001a3e:	b2e9      	uxtb	r1, r5
 8001a40:	4620      	mov	r0, r4
 8001a42:	f006 f9c7 	bl	8007dd4 <HAL_PCD_DataOutStageCallback>
 8001a46:	e7aa      	b.n	800199e <PCD_EP_OutXfrComplete_int+0x3a>
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8001a48:	f504 7271 	add.w	r2, r4, #964	; 0x3c4
 8001a4c:	2100      	movs	r1, #0
 8001a4e:	f004 fb51 	bl	80060f4 <USB_EP0_OutStart>
 8001a52:	e7a0      	b.n	8001996 <PCD_EP_OutXfrComplete_int+0x32>
 8001a54:	4f54310a 	.word	0x4f54310a
 8001a58:	4f54300a 	.word	0x4f54300a

08001a5c <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8001a5c:	b538      	push	{r3, r4, r5, lr}
 8001a5e:	4604      	mov	r4, r0
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001a60:	6803      	ldr	r3, [r0, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8001a62:	6c1d      	ldr	r5, [r3, #64]	; 0x40
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8001a64:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 8001a68:	f8d3 1b08 	ldr.w	r1, [r3, #2824]	; 0xb08

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8001a6c:	4a0e      	ldr	r2, [pc, #56]	; (8001aa8 <PCD_EP_OutSetupPacket_int+0x4c>)
 8001a6e:	4295      	cmp	r5, r2
 8001a70:	d907      	bls.n	8001a82 <PCD_EP_OutSetupPacket_int+0x26>
 8001a72:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001a76:	f411 4f00 	tst.w	r1, #32768	; 0x8000
 8001a7a:	d002      	beq.n	8001a82 <PCD_EP_OutSetupPacket_int+0x26>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8001a7c:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8001a80:	609a      	str	r2, [r3, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8001a82:	4620      	mov	r0, r4
 8001a84:	f006 f99e 	bl	8007dc4 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8001a88:	4b07      	ldr	r3, [pc, #28]	; (8001aa8 <PCD_EP_OutSetupPacket_int+0x4c>)
 8001a8a:	429d      	cmp	r5, r3
 8001a8c:	d902      	bls.n	8001a94 <PCD_EP_OutSetupPacket_int+0x38>
 8001a8e:	6923      	ldr	r3, [r4, #16]
 8001a90:	2b01      	cmp	r3, #1
 8001a92:	d001      	beq.n	8001a98 <PCD_EP_OutSetupPacket_int+0x3c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
  }

  return HAL_OK;
}
 8001a94:	2000      	movs	r0, #0
 8001a96:	bd38      	pop	{r3, r4, r5, pc}
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8001a98:	f504 7271 	add.w	r2, r4, #964	; 0x3c4
 8001a9c:	2101      	movs	r1, #1
 8001a9e:	6820      	ldr	r0, [r4, #0]
 8001aa0:	f004 fb28 	bl	80060f4 <USB_EP0_OutStart>
 8001aa4:	e7f6      	b.n	8001a94 <PCD_EP_OutSetupPacket_int+0x38>
 8001aa6:	bf00      	nop
 8001aa8:	4f54300a 	.word	0x4f54300a

08001aac <HAL_PCD_IRQHandler>:
{
 8001aac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001ab0:	b083      	sub	sp, #12
 8001ab2:	4604      	mov	r4, r0
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001ab4:	6805      	ldr	r5, [r0, #0]
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8001ab6:	4628      	mov	r0, r5
 8001ab8:	f004 fb07 	bl	80060ca <USB_GetMode>
 8001abc:	b110      	cbz	r0, 8001ac4 <HAL_PCD_IRQHandler+0x18>
}
 8001abe:	b003      	add	sp, #12
 8001ac0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001ac4:	462f      	mov	r7, r5
 8001ac6:	4606      	mov	r6, r0
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8001ac8:	6820      	ldr	r0, [r4, #0]
 8001aca:	f004 facd 	bl	8006068 <USB_ReadInterrupts>
 8001ace:	2800      	cmp	r0, #0
 8001ad0:	d0f5      	beq.n	8001abe <HAL_PCD_IRQHandler+0x12>
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8001ad2:	6820      	ldr	r0, [r4, #0]
 8001ad4:	f004 fac8 	bl	8006068 <USB_ReadInterrupts>
 8001ad8:	f010 0f02 	tst.w	r0, #2
 8001adc:	d004      	beq.n	8001ae8 <HAL_PCD_IRQHandler+0x3c>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8001ade:	6822      	ldr	r2, [r4, #0]
 8001ae0:	6953      	ldr	r3, [r2, #20]
 8001ae2:	f003 0302 	and.w	r3, r3, #2
 8001ae6:	6153      	str	r3, [r2, #20]
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8001ae8:	6820      	ldr	r0, [r4, #0]
 8001aea:	f004 fabd 	bl	8006068 <USB_ReadInterrupts>
 8001aee:	f010 0f10 	tst.w	r0, #16
 8001af2:	d015      	beq.n	8001b20 <HAL_PCD_IRQHandler+0x74>
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001af4:	6822      	ldr	r2, [r4, #0]
 8001af6:	6993      	ldr	r3, [r2, #24]
 8001af8:	f023 0310 	bic.w	r3, r3, #16
 8001afc:	6193      	str	r3, [r2, #24]
      temp = USBx->GRXSTSP;
 8001afe:	f8d5 8020 	ldr.w	r8, [r5, #32]
      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 8001b02:	f008 090f 	and.w	r9, r8, #15
      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8001b06:	f3c8 4343 	ubfx	r3, r8, #17, #4
 8001b0a:	2b02      	cmp	r3, #2
 8001b0c:	f000 8085 	beq.w	8001c1a <HAL_PCD_IRQHandler+0x16e>
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 8001b10:	2b06      	cmp	r3, #6
 8001b12:	f000 80aa 	beq.w	8001c6a <HAL_PCD_IRQHandler+0x1be>
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001b16:	6822      	ldr	r2, [r4, #0]
 8001b18:	6993      	ldr	r3, [r2, #24]
 8001b1a:	f043 0310 	orr.w	r3, r3, #16
 8001b1e:	6193      	str	r3, [r2, #24]
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8001b20:	6820      	ldr	r0, [r4, #0]
 8001b22:	f004 faa1 	bl	8006068 <USB_ReadInterrupts>
 8001b26:	f410 2f00 	tst.w	r0, #524288	; 0x80000
 8001b2a:	f040 80b0 	bne.w	8001c8e <HAL_PCD_IRQHandler+0x1e2>
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8001b2e:	6820      	ldr	r0, [r4, #0]
 8001b30:	f004 fa9a 	bl	8006068 <USB_ReadInterrupts>
 8001b34:	f410 2f80 	tst.w	r0, #262144	; 0x40000
 8001b38:	f040 80f4 	bne.w	8001d24 <HAL_PCD_IRQHandler+0x278>
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8001b3c:	6820      	ldr	r0, [r4, #0]
 8001b3e:	f004 fa93 	bl	8006068 <USB_ReadInterrupts>
 8001b42:	2800      	cmp	r0, #0
 8001b44:	f2c0 8160 	blt.w	8001e08 <HAL_PCD_IRQHandler+0x35c>
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8001b48:	6820      	ldr	r0, [r4, #0]
 8001b4a:	f004 fa8d 	bl	8006068 <USB_ReadInterrupts>
 8001b4e:	f410 6f00 	tst.w	r0, #2048	; 0x800
 8001b52:	d00a      	beq.n	8001b6a <HAL_PCD_IRQHandler+0xbe>
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8001b54:	f8d5 3808 	ldr.w	r3, [r5, #2056]	; 0x808
 8001b58:	f013 0f01 	tst.w	r3, #1
 8001b5c:	f040 816e 	bne.w	8001e3c <HAL_PCD_IRQHandler+0x390>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8001b60:	6822      	ldr	r2, [r4, #0]
 8001b62:	6953      	ldr	r3, [r2, #20]
 8001b64:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001b68:	6153      	str	r3, [r2, #20]
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 8001b6a:	6820      	ldr	r0, [r4, #0]
 8001b6c:	f004 fa7c 	bl	8006068 <USB_ReadInterrupts>
 8001b70:	f010 6f00 	tst.w	r0, #134217728	; 0x8000000
 8001b74:	d015      	beq.n	8001ba2 <HAL_PCD_IRQHandler+0xf6>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 8001b76:	6822      	ldr	r2, [r4, #0]
 8001b78:	6953      	ldr	r3, [r2, #20]
 8001b7a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8001b7e:	6153      	str	r3, [r2, #20]
      if (hpcd->LPM_State == LPM_L0)
 8001b80:	f894 33f4 	ldrb.w	r3, [r4, #1012]	; 0x3f4
 8001b84:	2b00      	cmp	r3, #0
 8001b86:	f040 815d 	bne.w	8001e44 <HAL_PCD_IRQHandler+0x398>
        hpcd->LPM_State = LPM_L1;
 8001b8a:	2101      	movs	r1, #1
 8001b8c:	f884 13f4 	strb.w	r1, [r4, #1012]	; 0x3f4
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 8001b90:	6823      	ldr	r3, [r4, #0]
 8001b92:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001b94:	f3c3 0383 	ubfx	r3, r3, #2, #4
 8001b98:	f8c4 33f8 	str.w	r3, [r4, #1016]	; 0x3f8
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8001b9c:	4620      	mov	r0, r4
 8001b9e:	f000 fbab 	bl	80022f8 <HAL_PCDEx_LPM_Callback>
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8001ba2:	6820      	ldr	r0, [r4, #0]
 8001ba4:	f004 fa60 	bl	8006068 <USB_ReadInterrupts>
 8001ba8:	f410 5f80 	tst.w	r0, #4096	; 0x1000
 8001bac:	f040 814e 	bne.w	8001e4c <HAL_PCD_IRQHandler+0x3a0>
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8001bb0:	6820      	ldr	r0, [r4, #0]
 8001bb2:	f004 fa59 	bl	8006068 <USB_ReadInterrupts>
 8001bb6:	f410 5f00 	tst.w	r0, #8192	; 0x2000
 8001bba:	f040 81ac 	bne.w	8001f16 <HAL_PCD_IRQHandler+0x46a>
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8001bbe:	6820      	ldr	r0, [r4, #0]
 8001bc0:	f004 fa52 	bl	8006068 <USB_ReadInterrupts>
 8001bc4:	f010 0f08 	tst.w	r0, #8
 8001bc8:	f040 81bd 	bne.w	8001f46 <HAL_PCD_IRQHandler+0x49a>
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8001bcc:	6820      	ldr	r0, [r4, #0]
 8001bce:	f004 fa4b 	bl	8006068 <USB_ReadInterrupts>
 8001bd2:	f410 1f80 	tst.w	r0, #1048576	; 0x100000
 8001bd6:	f040 81bf 	bne.w	8001f58 <HAL_PCD_IRQHandler+0x4ac>
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8001bda:	6820      	ldr	r0, [r4, #0]
 8001bdc:	f004 fa44 	bl	8006068 <USB_ReadInterrupts>
 8001be0:	f410 1f00 	tst.w	r0, #2097152	; 0x200000
 8001be4:	f040 81c2 	bne.w	8001f6c <HAL_PCD_IRQHandler+0x4c0>
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8001be8:	6820      	ldr	r0, [r4, #0]
 8001bea:	f004 fa3d 	bl	8006068 <USB_ReadInterrupts>
 8001bee:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8001bf2:	f040 81c5 	bne.w	8001f80 <HAL_PCD_IRQHandler+0x4d4>
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8001bf6:	6820      	ldr	r0, [r4, #0]
 8001bf8:	f004 fa36 	bl	8006068 <USB_ReadInterrupts>
 8001bfc:	f010 0f04 	tst.w	r0, #4
 8001c00:	f43f af5d 	beq.w	8001abe <HAL_PCD_IRQHandler+0x12>
      temp = hpcd->Instance->GOTGINT;
 8001c04:	6823      	ldr	r3, [r4, #0]
 8001c06:	685d      	ldr	r5, [r3, #4]
      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8001c08:	f015 0f04 	tst.w	r5, #4
 8001c0c:	f040 81c1 	bne.w	8001f92 <HAL_PCD_IRQHandler+0x4e6>
      hpcd->Instance->GOTGINT |= temp;
 8001c10:	6822      	ldr	r2, [r4, #0]
 8001c12:	6853      	ldr	r3, [r2, #4]
 8001c14:	432b      	orrs	r3, r5
 8001c16:	6053      	str	r3, [r2, #4]
 8001c18:	e751      	b.n	8001abe <HAL_PCD_IRQHandler+0x12>
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 8001c1a:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8001c1e:	ea18 0f03 	tst.w	r8, r3
 8001c22:	f43f af78 	beq.w	8001b16 <HAL_PCD_IRQHandler+0x6a>
                               (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));
 8001c26:	ea4f 1b18 	mov.w	fp, r8, lsr #4
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8001c2a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001c2e:	9301      	str	r3, [sp, #4]
 8001c30:	ebc9 0ac9 	rsb	sl, r9, r9, lsl #3
 8001c34:	eb04 0a8a 	add.w	sl, r4, sl, lsl #2
 8001c38:	f3c8 120a 	ubfx	r2, r8, #4, #11
 8001c3c:	f8da 1208 	ldr.w	r1, [sl, #520]	; 0x208
 8001c40:	4628      	mov	r0, r5
 8001c42:	f004 f97d 	bl	8005f40 <USB_ReadPacket>
          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001c46:	f3cb 0b0a 	ubfx	fp, fp, #0, #11
 8001c4a:	f8da 3208 	ldr.w	r3, [sl, #520]	; 0x208
 8001c4e:	445b      	add	r3, fp
 8001c50:	f8ca 3208 	str.w	r3, [sl, #520]	; 0x208
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001c54:	9b01      	ldr	r3, [sp, #4]
 8001c56:	eba3 0309 	sub.w	r3, r3, r9
 8001c5a:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8001c5e:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8001c62:	445b      	add	r3, fp
 8001c64:	f8ca 3214 	str.w	r3, [sl, #532]	; 0x214
 8001c68:	e755      	b.n	8001b16 <HAL_PCD_IRQHandler+0x6a>
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8001c6a:	2208      	movs	r2, #8
 8001c6c:	f504 7171 	add.w	r1, r4, #964	; 0x3c4
 8001c70:	4628      	mov	r0, r5
 8001c72:	f004 f965 	bl	8005f40 <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001c76:	f3c8 180a 	ubfx	r8, r8, #4, #11
 8001c7a:	ebc9 02c9 	rsb	r2, r9, r9, lsl #3
 8001c7e:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 8001c82:	f8d2 3214 	ldr.w	r3, [r2, #532]	; 0x214
 8001c86:	4443      	add	r3, r8
 8001c88:	f8c2 3214 	str.w	r3, [r2, #532]	; 0x214
 8001c8c:	e743      	b.n	8001b16 <HAL_PCD_IRQHandler+0x6a>
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8001c8e:	6820      	ldr	r0, [r4, #0]
 8001c90:	f004 f9ee 	bl	8006070 <USB_ReadDevAllOutEpInterrupt>
 8001c94:	4680      	mov	r8, r0
      epnum = 0U;
 8001c96:	46b1      	mov	r9, r6
      while (ep_intr != 0U)
 8001c98:	e017      	b.n	8001cca <HAL_PCD_IRQHandler+0x21e>
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8001c9a:	eb07 1349 	add.w	r3, r7, r9, lsl #5
 8001c9e:	2201      	movs	r2, #1
 8001ca0:	f8c3 2b08 	str.w	r2, [r3, #2824]	; 0xb08
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8001ca4:	4649      	mov	r1, r9
 8001ca6:	4620      	mov	r0, r4
 8001ca8:	f7ff fe5c 	bl	8001964 <PCD_EP_OutXfrComplete_int>
 8001cac:	e01d      	b.n	8001cea <HAL_PCD_IRQHandler+0x23e>
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8001cae:	eb07 1349 	add.w	r3, r7, r9, lsl #5
 8001cb2:	2208      	movs	r2, #8
 8001cb4:	f8c3 2b08 	str.w	r2, [r3, #2824]	; 0xb08
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8001cb8:	4649      	mov	r1, r9
 8001cba:	4620      	mov	r0, r4
 8001cbc:	f7ff fece 	bl	8001a5c <PCD_EP_OutSetupPacket_int>
 8001cc0:	e016      	b.n	8001cf0 <HAL_PCD_IRQHandler+0x244>
        epnum++;
 8001cc2:	f109 0901 	add.w	r9, r9, #1
        ep_intr >>= 1U;
 8001cc6:	ea4f 0858 	mov.w	r8, r8, lsr #1
      while (ep_intr != 0U)
 8001cca:	f1b8 0f00 	cmp.w	r8, #0
 8001cce:	f43f af2e 	beq.w	8001b2e <HAL_PCD_IRQHandler+0x82>
        if ((ep_intr & 0x1U) != 0U)
 8001cd2:	f018 0f01 	tst.w	r8, #1
 8001cd6:	d0f4      	beq.n	8001cc2 <HAL_PCD_IRQHandler+0x216>
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8001cd8:	fa5f f189 	uxtb.w	r1, r9
 8001cdc:	6820      	ldr	r0, [r4, #0]
 8001cde:	f004 f9d7 	bl	8006090 <USB_ReadDevOutEPInterrupt>
 8001ce2:	4682      	mov	sl, r0
          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8001ce4:	f010 0f01 	tst.w	r0, #1
 8001ce8:	d1d7      	bne.n	8001c9a <HAL_PCD_IRQHandler+0x1ee>
          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8001cea:	f01a 0f08 	tst.w	sl, #8
 8001cee:	d1de      	bne.n	8001cae <HAL_PCD_IRQHandler+0x202>
          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8001cf0:	f01a 0f10 	tst.w	sl, #16
 8001cf4:	d004      	beq.n	8001d00 <HAL_PCD_IRQHandler+0x254>
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8001cf6:	eb07 1349 	add.w	r3, r7, r9, lsl #5
 8001cfa:	2210      	movs	r2, #16
 8001cfc:	f8c3 2b08 	str.w	r2, [r3, #2824]	; 0xb08
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8001d00:	f01a 0f20 	tst.w	sl, #32
 8001d04:	d004      	beq.n	8001d10 <HAL_PCD_IRQHandler+0x264>
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8001d06:	eb07 1349 	add.w	r3, r7, r9, lsl #5
 8001d0a:	2220      	movs	r2, #32
 8001d0c:	f8c3 2b08 	str.w	r2, [r3, #2824]	; 0xb08
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8001d10:	f41a 5f00 	tst.w	sl, #8192	; 0x2000
 8001d14:	d0d5      	beq.n	8001cc2 <HAL_PCD_IRQHandler+0x216>
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8001d16:	eb07 1349 	add.w	r3, r7, r9, lsl #5
 8001d1a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001d1e:	f8c3 2b08 	str.w	r2, [r3, #2824]	; 0xb08
 8001d22:	e7ce      	b.n	8001cc2 <HAL_PCD_IRQHandler+0x216>
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8001d24:	6820      	ldr	r0, [r4, #0]
 8001d26:	f004 f9ab 	bl	8006080 <USB_ReadDevAllInEpInterrupt>
 8001d2a:	4680      	mov	r8, r0
      epnum = 0U;
 8001d2c:	46b1      	mov	r9, r6
      while (ep_intr != 0U)
 8001d2e:	e02a      	b.n	8001d86 <HAL_PCD_IRQHandler+0x2da>
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8001d30:	4659      	mov	r1, fp
 8001d32:	4620      	mov	r0, r4
 8001d34:	f006 f85a 	bl	8007dec <HAL_PCD_DataInStageCallback>
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8001d38:	f01a 0f08 	tst.w	sl, #8
 8001d3c:	d004      	beq.n	8001d48 <HAL_PCD_IRQHandler+0x29c>
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8001d3e:	eb07 1349 	add.w	r3, r7, r9, lsl #5
 8001d42:	2208      	movs	r2, #8
 8001d44:	f8c3 2908 	str.w	r2, [r3, #2312]	; 0x908
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8001d48:	f01a 0f10 	tst.w	sl, #16
 8001d4c:	d004      	beq.n	8001d58 <HAL_PCD_IRQHandler+0x2ac>
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8001d4e:	eb07 1349 	add.w	r3, r7, r9, lsl #5
 8001d52:	2210      	movs	r2, #16
 8001d54:	f8c3 2908 	str.w	r2, [r3, #2312]	; 0x908
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8001d58:	f01a 0f40 	tst.w	sl, #64	; 0x40
 8001d5c:	d004      	beq.n	8001d68 <HAL_PCD_IRQHandler+0x2bc>
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8001d5e:	eb07 1349 	add.w	r3, r7, r9, lsl #5
 8001d62:	2240      	movs	r2, #64	; 0x40
 8001d64:	f8c3 2908 	str.w	r2, [r3, #2312]	; 0x908
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8001d68:	f01a 0f02 	tst.w	sl, #2
 8001d6c:	d004      	beq.n	8001d78 <HAL_PCD_IRQHandler+0x2cc>
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8001d6e:	eb07 1349 	add.w	r3, r7, r9, lsl #5
 8001d72:	2202      	movs	r2, #2
 8001d74:	f8c3 2908 	str.w	r2, [r3, #2312]	; 0x908
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8001d78:	f01a 0f80 	tst.w	sl, #128	; 0x80
 8001d7c:	d13f      	bne.n	8001dfe <HAL_PCD_IRQHandler+0x352>
        epnum++;
 8001d7e:	f109 0901 	add.w	r9, r9, #1
        ep_intr >>= 1U;
 8001d82:	ea4f 0858 	mov.w	r8, r8, lsr #1
      while (ep_intr != 0U)
 8001d86:	f1b8 0f00 	cmp.w	r8, #0
 8001d8a:	f43f aed7 	beq.w	8001b3c <HAL_PCD_IRQHandler+0x90>
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8001d8e:	f018 0f01 	tst.w	r8, #1
 8001d92:	d0f4      	beq.n	8001d7e <HAL_PCD_IRQHandler+0x2d2>
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8001d94:	fa5f fb89 	uxtb.w	fp, r9
 8001d98:	4659      	mov	r1, fp
 8001d9a:	6820      	ldr	r0, [r4, #0]
 8001d9c:	f004 f981 	bl	80060a2 <USB_ReadDevInEPInterrupt>
 8001da0:	4682      	mov	sl, r0
          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8001da2:	f010 0f01 	tst.w	r0, #1
 8001da6:	d0c7      	beq.n	8001d38 <HAL_PCD_IRQHandler+0x28c>
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8001da8:	f009 030f 	and.w	r3, r9, #15
 8001dac:	2101      	movs	r1, #1
 8001dae:	fa01 f203 	lsl.w	r2, r1, r3
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8001db2:	f8d7 3834 	ldr.w	r3, [r7, #2100]	; 0x834
 8001db6:	ea23 0302 	bic.w	r3, r3, r2
 8001dba:	f8c7 3834 	str.w	r3, [r7, #2100]	; 0x834
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8001dbe:	eb07 1349 	add.w	r3, r7, r9, lsl #5
 8001dc2:	f8c3 1908 	str.w	r1, [r3, #2312]	; 0x908
            if (hpcd->Init.dma_enable == 1U)
 8001dc6:	6923      	ldr	r3, [r4, #16]
 8001dc8:	428b      	cmp	r3, r1
 8001dca:	d1b1      	bne.n	8001d30 <HAL_PCD_IRQHandler+0x284>
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8001dcc:	ebc9 03c9 	rsb	r3, r9, r9, lsl #3
 8001dd0:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8001dd4:	6c59      	ldr	r1, [r3, #68]	; 0x44
 8001dd6:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8001dd8:	440a      	add	r2, r1
 8001dda:	649a      	str	r2, [r3, #72]	; 0x48
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8001ddc:	f1b9 0f00 	cmp.w	r9, #0
 8001de0:	d1a6      	bne.n	8001d30 <HAL_PCD_IRQHandler+0x284>
 8001de2:	ebc9 03c9 	rsb	r3, r9, r9, lsl #3
 8001de6:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8001dea:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001dec:	2b00      	cmp	r3, #0
 8001dee:	d19f      	bne.n	8001d30 <HAL_PCD_IRQHandler+0x284>
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8001df0:	f504 7271 	add.w	r2, r4, #964	; 0x3c4
 8001df4:	2101      	movs	r1, #1
 8001df6:	6820      	ldr	r0, [r4, #0]
 8001df8:	f004 f97c 	bl	80060f4 <USB_EP0_OutStart>
 8001dfc:	e798      	b.n	8001d30 <HAL_PCD_IRQHandler+0x284>
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8001dfe:	4649      	mov	r1, r9
 8001e00:	4620      	mov	r0, r4
 8001e02:	f7ff fc8b 	bl	800171c <PCD_WriteEmptyTxFifo>
 8001e06:	e7ba      	b.n	8001d7e <HAL_PCD_IRQHandler+0x2d2>
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8001e08:	f8d5 3804 	ldr.w	r3, [r5, #2052]	; 0x804
 8001e0c:	f023 0301 	bic.w	r3, r3, #1
 8001e10:	f8c5 3804 	str.w	r3, [r5, #2052]	; 0x804
      if (hpcd->LPM_State == LPM_L1)
 8001e14:	f894 33f4 	ldrb.w	r3, [r4, #1012]	; 0x3f4
 8001e18:	2b01      	cmp	r3, #1
 8001e1a:	d008      	beq.n	8001e2e <HAL_PCD_IRQHandler+0x382>
        HAL_PCD_ResumeCallback(hpcd);
 8001e1c:	4620      	mov	r0, r4
 8001e1e:	f006 f825 	bl	8007e6c <HAL_PCD_ResumeCallback>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8001e22:	6822      	ldr	r2, [r4, #0]
 8001e24:	6953      	ldr	r3, [r2, #20]
 8001e26:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8001e2a:	6153      	str	r3, [r2, #20]
 8001e2c:	e68c      	b.n	8001b48 <HAL_PCD_IRQHandler+0x9c>
        hpcd->LPM_State = LPM_L0;
 8001e2e:	2100      	movs	r1, #0
 8001e30:	f884 13f4 	strb.w	r1, [r4, #1012]	; 0x3f4
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8001e34:	4620      	mov	r0, r4
 8001e36:	f000 fa5f 	bl	80022f8 <HAL_PCDEx_LPM_Callback>
 8001e3a:	e7f2      	b.n	8001e22 <HAL_PCD_IRQHandler+0x376>
        HAL_PCD_SuspendCallback(hpcd);
 8001e3c:	4620      	mov	r0, r4
 8001e3e:	f005 fffd 	bl	8007e3c <HAL_PCD_SuspendCallback>
 8001e42:	e68d      	b.n	8001b60 <HAL_PCD_IRQHandler+0xb4>
        HAL_PCD_SuspendCallback(hpcd);
 8001e44:	4620      	mov	r0, r4
 8001e46:	f005 fff9 	bl	8007e3c <HAL_PCD_SuspendCallback>
 8001e4a:	e6aa      	b.n	8001ba2 <HAL_PCD_IRQHandler+0xf6>
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8001e4c:	f505 6800 	add.w	r8, r5, #2048	; 0x800
 8001e50:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8001e54:	f023 0301 	bic.w	r3, r3, #1
 8001e58:	f8c8 3004 	str.w	r3, [r8, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8001e5c:	2110      	movs	r1, #16
 8001e5e:	6820      	ldr	r0, [r4, #0]
 8001e60:	f003 fd08 	bl	8005874 <USB_FlushTxFifo>
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001e64:	e020      	b.n	8001ea8 <HAL_PCD_IRQHandler+0x3fc>
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8001e66:	eb07 1346 	add.w	r3, r7, r6, lsl #5
 8001e6a:	f64f 317f 	movw	r1, #64383	; 0xfb7f
 8001e6e:	f8c3 1908 	str.w	r1, [r3, #2312]	; 0x908
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8001e72:	f8d3 2900 	ldr.w	r2, [r3, #2304]	; 0x900
 8001e76:	f422 1200 	bic.w	r2, r2, #2097152	; 0x200000
 8001e7a:	f8c3 2900 	str.w	r2, [r3, #2304]	; 0x900
        USBx_INEP(i)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8001e7e:	f8d3 2900 	ldr.w	r2, [r3, #2304]	; 0x900
 8001e82:	f042 6200 	orr.w	r2, r2, #134217728	; 0x8000000
 8001e86:	f8c3 2900 	str.w	r2, [r3, #2304]	; 0x900
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8001e8a:	f8c3 1b08 	str.w	r1, [r3, #2824]	; 0xb08
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8001e8e:	f8d3 2b00 	ldr.w	r2, [r3, #2816]	; 0xb00
 8001e92:	f422 1200 	bic.w	r2, r2, #2097152	; 0x200000
 8001e96:	f8c3 2b00 	str.w	r2, [r3, #2816]	; 0xb00
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8001e9a:	f8d3 2b00 	ldr.w	r2, [r3, #2816]	; 0xb00
 8001e9e:	f042 6200 	orr.w	r2, r2, #134217728	; 0x8000000
 8001ea2:	f8c3 2b00 	str.w	r2, [r3, #2816]	; 0xb00
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001ea6:	3601      	adds	r6, #1
 8001ea8:	6863      	ldr	r3, [r4, #4]
 8001eaa:	42b3      	cmp	r3, r6
 8001eac:	d8db      	bhi.n	8001e66 <HAL_PCD_IRQHandler+0x3ba>
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8001eae:	f8d8 301c 	ldr.w	r3, [r8, #28]
 8001eb2:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8001eb6:	f8c8 301c 	str.w	r3, [r8, #28]
      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8001eba:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8001ebc:	b1eb      	cbz	r3, 8001efa <HAL_PCD_IRQHandler+0x44e>
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8001ebe:	f8d8 3084 	ldr.w	r3, [r8, #132]	; 0x84
 8001ec2:	f043 030b 	orr.w	r3, r3, #11
 8001ec6:	f8c8 3084 	str.w	r3, [r8, #132]	; 0x84
        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8001eca:	f8d8 3044 	ldr.w	r3, [r8, #68]	; 0x44
 8001ece:	f043 030b 	orr.w	r3, r3, #11
 8001ed2:	f8c8 3044 	str.w	r3, [r8, #68]	; 0x44
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8001ed6:	f8d5 3800 	ldr.w	r3, [r5, #2048]	; 0x800
 8001eda:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8001ede:	f8c5 3800 	str.w	r3, [r5, #2048]	; 0x800
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8001ee2:	f504 7271 	add.w	r2, r4, #964	; 0x3c4
 8001ee6:	7c21      	ldrb	r1, [r4, #16]
 8001ee8:	6820      	ldr	r0, [r4, #0]
 8001eea:	f004 f903 	bl	80060f4 <USB_EP0_OutStart>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8001eee:	6822      	ldr	r2, [r4, #0]
 8001ef0:	6953      	ldr	r3, [r2, #20]
 8001ef2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001ef6:	6153      	str	r3, [r2, #20]
 8001ef8:	e65a      	b.n	8001bb0 <HAL_PCD_IRQHandler+0x104>
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8001efa:	f8d8 2014 	ldr.w	r2, [r8, #20]
 8001efe:	f242 032b 	movw	r3, #8235	; 0x202b
 8001f02:	4313      	orrs	r3, r2
 8001f04:	f8c8 3014 	str.w	r3, [r8, #20]
        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8001f08:	f8d8 3010 	ldr.w	r3, [r8, #16]
 8001f0c:	f043 030b 	orr.w	r3, r3, #11
 8001f10:	f8c8 3010 	str.w	r3, [r8, #16]
 8001f14:	e7df      	b.n	8001ed6 <HAL_PCD_IRQHandler+0x42a>
      (void)USB_ActivateSetup(hpcd->Instance);
 8001f16:	6820      	ldr	r0, [r4, #0]
 8001f18:	f004 f8dc 	bl	80060d4 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8001f1c:	6820      	ldr	r0, [r4, #0]
 8001f1e:	f003 fd9f 	bl	8005a60 <USB_GetDevSpeed>
 8001f22:	60e0      	str	r0, [r4, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8001f24:	6825      	ldr	r5, [r4, #0]
 8001f26:	f000 ff85 	bl	8002e34 <HAL_RCC_GetHCLKFreq>
 8001f2a:	4601      	mov	r1, r0
 8001f2c:	7b22      	ldrb	r2, [r4, #12]
 8001f2e:	4628      	mov	r0, r5
 8001f30:	f003 fc0a 	bl	8005748 <USB_SetTurnaroundTime>
      HAL_PCD_ResetCallback(hpcd);
 8001f34:	4620      	mov	r0, r4
 8001f36:	f005 ff6a 	bl	8007e0e <HAL_PCD_ResetCallback>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8001f3a:	6822      	ldr	r2, [r4, #0]
 8001f3c:	6953      	ldr	r3, [r2, #20]
 8001f3e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001f42:	6153      	str	r3, [r2, #20]
 8001f44:	e63b      	b.n	8001bbe <HAL_PCD_IRQHandler+0x112>
      HAL_PCD_SOFCallback(hpcd);
 8001f46:	4620      	mov	r0, r4
 8001f48:	f005 ff5b 	bl	8007e02 <HAL_PCD_SOFCallback>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8001f4c:	6822      	ldr	r2, [r4, #0]
 8001f4e:	6953      	ldr	r3, [r2, #20]
 8001f50:	f003 0308 	and.w	r3, r3, #8
 8001f54:	6153      	str	r3, [r2, #20]
 8001f56:	e639      	b.n	8001bcc <HAL_PCD_IRQHandler+0x120>
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8001f58:	2100      	movs	r1, #0
 8001f5a:	4620      	mov	r0, r4
 8001f5c:	f005 ff92 	bl	8007e84 <HAL_PCD_ISOINIncompleteCallback>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8001f60:	6822      	ldr	r2, [r4, #0]
 8001f62:	6953      	ldr	r3, [r2, #20]
 8001f64:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001f68:	6153      	str	r3, [r2, #20]
 8001f6a:	e636      	b.n	8001bda <HAL_PCD_IRQHandler+0x12e>
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8001f6c:	2100      	movs	r1, #0
 8001f6e:	4620      	mov	r0, r4
 8001f70:	f005 ff82 	bl	8007e78 <HAL_PCD_ISOOUTIncompleteCallback>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8001f74:	6822      	ldr	r2, [r4, #0]
 8001f76:	6953      	ldr	r3, [r2, #20]
 8001f78:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001f7c:	6153      	str	r3, [r2, #20]
 8001f7e:	e633      	b.n	8001be8 <HAL_PCD_IRQHandler+0x13c>
      HAL_PCD_ConnectCallback(hpcd);
 8001f80:	4620      	mov	r0, r4
 8001f82:	f005 ff85 	bl	8007e90 <HAL_PCD_ConnectCallback>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8001f86:	6822      	ldr	r2, [r4, #0]
 8001f88:	6953      	ldr	r3, [r2, #20]
 8001f8a:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8001f8e:	6153      	str	r3, [r2, #20]
 8001f90:	e631      	b.n	8001bf6 <HAL_PCD_IRQHandler+0x14a>
        HAL_PCD_DisconnectCallback(hpcd);
 8001f92:	4620      	mov	r0, r4
 8001f94:	f005 ff82 	bl	8007e9c <HAL_PCD_DisconnectCallback>
 8001f98:	e63a      	b.n	8001c10 <HAL_PCD_IRQHandler+0x164>

08001f9a <HAL_PCD_SetAddress>:
  __HAL_LOCK(hpcd);
 8001f9a:	f890 33bc 	ldrb.w	r3, [r0, #956]	; 0x3bc
 8001f9e:	2b01      	cmp	r3, #1
 8001fa0:	d00d      	beq.n	8001fbe <HAL_PCD_SetAddress+0x24>
{
 8001fa2:	b510      	push	{r4, lr}
 8001fa4:	4604      	mov	r4, r0
  __HAL_LOCK(hpcd);
 8001fa6:	2301      	movs	r3, #1
 8001fa8:	f880 33bc 	strb.w	r3, [r0, #956]	; 0x3bc
  hpcd->USB_Address = address;
 8001fac:	f880 1038 	strb.w	r1, [r0, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8001fb0:	6800      	ldr	r0, [r0, #0]
 8001fb2:	f004 f831 	bl	8006018 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8001fb6:	2000      	movs	r0, #0
 8001fb8:	f884 03bc 	strb.w	r0, [r4, #956]	; 0x3bc
}
 8001fbc:	bd10      	pop	{r4, pc}
  __HAL_LOCK(hpcd);
 8001fbe:	2002      	movs	r0, #2
}
 8001fc0:	4770      	bx	lr

08001fc2 <HAL_PCD_EP_Open>:
{
 8001fc2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001fc4:	4607      	mov	r7, r0
 8001fc6:	460c      	mov	r4, r1
  if ((ep_addr & 0x80U) == 0x80U)
 8001fc8:	f011 0f80 	tst.w	r1, #128	; 0x80
 8001fcc:	d127      	bne.n	800201e <HAL_PCD_EP_Open+0x5c>
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001fce:	f001 050f 	and.w	r5, r1, #15
 8001fd2:	ebc5 06c5 	rsb	r6, r5, r5, lsl #3
 8001fd6:	00b6      	lsls	r6, r6, #2
 8001fd8:	f506 76fc 	add.w	r6, r6, #504	; 0x1f8
 8001fdc:	4406      	add	r6, r0
 8001fde:	1d31      	adds	r1, r6, #4
    ep->is_in = 0U;
 8001fe0:	ebc5 05c5 	rsb	r5, r5, r5, lsl #3
 8001fe4:	eb00 0585 	add.w	r5, r0, r5, lsl #2
 8001fe8:	2000      	movs	r0, #0
 8001fea:	f885 01fd 	strb.w	r0, [r5, #509]	; 0x1fd
  ep->num = ep_addr & EP_ADDR_MSK;
 8001fee:	f004 040f 	and.w	r4, r4, #15
 8001ff2:	700c      	strb	r4, [r1, #0]
  ep->maxpacket = ep_mps;
 8001ff4:	608a      	str	r2, [r1, #8]
  ep->type = ep_type;
 8001ff6:	70cb      	strb	r3, [r1, #3]
  if (ep->is_in != 0U)
 8001ff8:	784a      	ldrb	r2, [r1, #1]
 8001ffa:	b102      	cbz	r2, 8001ffe <HAL_PCD_EP_Open+0x3c>
    ep->tx_fifo_num = ep->num;
 8001ffc:	80cc      	strh	r4, [r1, #6]
  if (ep_type == EP_TYPE_BULK)
 8001ffe:	2b02      	cmp	r3, #2
 8002000:	d01d      	beq.n	800203e <HAL_PCD_EP_Open+0x7c>
  __HAL_LOCK(hpcd);
 8002002:	f897 33bc 	ldrb.w	r3, [r7, #956]	; 0x3bc
 8002006:	2b01      	cmp	r3, #1
 8002008:	d01c      	beq.n	8002044 <HAL_PCD_EP_Open+0x82>
 800200a:	2301      	movs	r3, #1
 800200c:	f887 33bc 	strb.w	r3, [r7, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8002010:	6838      	ldr	r0, [r7, #0]
 8002012:	f003 fd35 	bl	8005a80 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002016:	2000      	movs	r0, #0
 8002018:	f887 03bc 	strb.w	r0, [r7, #956]	; 0x3bc
}
 800201c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800201e:	f001 000f 	and.w	r0, r1, #15
 8002022:	ebc0 01c0 	rsb	r1, r0, r0, lsl #3
 8002026:	0089      	lsls	r1, r1, #2
 8002028:	3138      	adds	r1, #56	; 0x38
 800202a:	4439      	add	r1, r7
 800202c:	3104      	adds	r1, #4
    ep->is_in = 1U;
 800202e:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
 8002032:	eb07 0080 	add.w	r0, r7, r0, lsl #2
 8002036:	2501      	movs	r5, #1
 8002038:	f880 503d 	strb.w	r5, [r0, #61]	; 0x3d
 800203c:	e7d7      	b.n	8001fee <HAL_PCD_EP_Open+0x2c>
    ep->data_pid_start = 0U;
 800203e:	2300      	movs	r3, #0
 8002040:	710b      	strb	r3, [r1, #4]
 8002042:	e7de      	b.n	8002002 <HAL_PCD_EP_Open+0x40>
  __HAL_LOCK(hpcd);
 8002044:	2002      	movs	r0, #2
 8002046:	e7e9      	b.n	800201c <HAL_PCD_EP_Open+0x5a>

08002048 <HAL_PCD_EP_Close>:
{
 8002048:	b510      	push	{r4, lr}
 800204a:	4604      	mov	r4, r0
 800204c:	460a      	mov	r2, r1
  if ((ep_addr & 0x80U) == 0x80U)
 800204e:	f011 0f80 	tst.w	r1, #128	; 0x80
 8002052:	d120      	bne.n	8002096 <HAL_PCD_EP_Close+0x4e>
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002054:	f001 000f 	and.w	r0, r1, #15
 8002058:	ebc0 03c0 	rsb	r3, r0, r0, lsl #3
 800205c:	009b      	lsls	r3, r3, #2
 800205e:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8002062:	4423      	add	r3, r4
 8002064:	1d19      	adds	r1, r3, #4
    ep->is_in = 0U;
 8002066:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
 800206a:	eb04 0080 	add.w	r0, r4, r0, lsl #2
 800206e:	2300      	movs	r3, #0
 8002070:	f880 31fd 	strb.w	r3, [r0, #509]	; 0x1fd
  ep->num   = ep_addr & EP_ADDR_MSK;
 8002074:	f002 020f 	and.w	r2, r2, #15
 8002078:	700a      	strb	r2, [r1, #0]
  __HAL_LOCK(hpcd);
 800207a:	f894 33bc 	ldrb.w	r3, [r4, #956]	; 0x3bc
 800207e:	2b01      	cmp	r3, #1
 8002080:	d019      	beq.n	80020b6 <HAL_PCD_EP_Close+0x6e>
 8002082:	2301      	movs	r3, #1
 8002084:	f884 33bc 	strb.w	r3, [r4, #956]	; 0x3bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8002088:	6820      	ldr	r0, [r4, #0]
 800208a:	f003 fd41 	bl	8005b10 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800208e:	2000      	movs	r0, #0
 8002090:	f884 03bc 	strb.w	r0, [r4, #956]	; 0x3bc
}
 8002094:	bd10      	pop	{r4, pc}
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002096:	f001 000f 	and.w	r0, r1, #15
 800209a:	ebc0 03c0 	rsb	r3, r0, r0, lsl #3
 800209e:	009b      	lsls	r3, r3, #2
 80020a0:	3338      	adds	r3, #56	; 0x38
 80020a2:	4423      	add	r3, r4
 80020a4:	1d19      	adds	r1, r3, #4
    ep->is_in = 1U;
 80020a6:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
 80020aa:	eb04 0080 	add.w	r0, r4, r0, lsl #2
 80020ae:	2301      	movs	r3, #1
 80020b0:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
 80020b4:	e7de      	b.n	8002074 <HAL_PCD_EP_Close+0x2c>
  __HAL_LOCK(hpcd);
 80020b6:	2002      	movs	r0, #2
 80020b8:	e7ec      	b.n	8002094 <HAL_PCD_EP_Close+0x4c>

080020ba <HAL_PCD_EP_Receive>:
{
 80020ba:	b538      	push	{r3, r4, r5, lr}
  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80020bc:	f001 040f 	and.w	r4, r1, #15
 80020c0:	ebc4 01c4 	rsb	r1, r4, r4, lsl #3
 80020c4:	0089      	lsls	r1, r1, #2
 80020c6:	f501 71fc 	add.w	r1, r1, #504	; 0x1f8
 80020ca:	4401      	add	r1, r0
 80020cc:	3104      	adds	r1, #4
  ep->xfer_buff = pBuf;
 80020ce:	ebc4 05c4 	rsb	r5, r4, r4, lsl #3
 80020d2:	eb00 0585 	add.w	r5, r0, r5, lsl #2
 80020d6:	f8c5 2208 	str.w	r2, [r5, #520]	; 0x208
  ep->xfer_len = len;
 80020da:	f8c5 3210 	str.w	r3, [r5, #528]	; 0x210
  ep->xfer_count = 0U;
 80020de:	2300      	movs	r3, #0
 80020e0:	f8c5 3214 	str.w	r3, [r5, #532]	; 0x214
  ep->is_in = 0U;
 80020e4:	f885 31fd 	strb.w	r3, [r5, #509]	; 0x1fd
  ep->num = ep_addr & EP_ADDR_MSK;
 80020e8:	f885 41fc 	strb.w	r4, [r5, #508]	; 0x1fc
  if (hpcd->Init.dma_enable == 1U)
 80020ec:	6903      	ldr	r3, [r0, #16]
 80020ee:	2b01      	cmp	r3, #1
 80020f0:	d006      	beq.n	8002100 <HAL_PCD_EP_Receive+0x46>
  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80020f2:	b964      	cbnz	r4, 800210e <HAL_PCD_EP_Receive+0x54>
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80020f4:	b2da      	uxtb	r2, r3
 80020f6:	6800      	ldr	r0, [r0, #0]
 80020f8:	f003 fd78 	bl	8005bec <USB_EP0StartXfer>
}
 80020fc:	2000      	movs	r0, #0
 80020fe:	bd38      	pop	{r3, r4, r5, pc}
    ep->dma_addr = (uint32_t)pBuf;
 8002100:	ebc4 05c4 	rsb	r5, r4, r4, lsl #3
 8002104:	eb00 0585 	add.w	r5, r0, r5, lsl #2
 8002108:	f8c5 220c 	str.w	r2, [r5, #524]	; 0x20c
 800210c:	e7f1      	b.n	80020f2 <HAL_PCD_EP_Receive+0x38>
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800210e:	b2da      	uxtb	r2, r3
 8002110:	6800      	ldr	r0, [r0, #0]
 8002112:	f003 fe0b 	bl	8005d2c <USB_EPStartXfer>
 8002116:	e7f1      	b.n	80020fc <HAL_PCD_EP_Receive+0x42>

08002118 <HAL_PCD_EP_GetRxCount>:
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8002118:	f001 010f 	and.w	r1, r1, #15
 800211c:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
 8002120:	eb00 0181 	add.w	r1, r0, r1, lsl #2
}
 8002124:	f8d1 0214 	ldr.w	r0, [r1, #532]	; 0x214
 8002128:	4770      	bx	lr

0800212a <HAL_PCD_EP_Transmit>:
{
 800212a:	b538      	push	{r3, r4, r5, lr}
  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800212c:	f001 040f 	and.w	r4, r1, #15
 8002130:	ebc4 01c4 	rsb	r1, r4, r4, lsl #3
 8002134:	0089      	lsls	r1, r1, #2
 8002136:	3138      	adds	r1, #56	; 0x38
 8002138:	4401      	add	r1, r0
 800213a:	3104      	adds	r1, #4
  ep->xfer_buff = pBuf;
 800213c:	ebc4 05c4 	rsb	r5, r4, r4, lsl #3
 8002140:	eb00 0585 	add.w	r5, r0, r5, lsl #2
 8002144:	64aa      	str	r2, [r5, #72]	; 0x48
  ep->xfer_len = len;
 8002146:	652b      	str	r3, [r5, #80]	; 0x50
  ep->xfer_count = 0U;
 8002148:	2300      	movs	r3, #0
 800214a:	656b      	str	r3, [r5, #84]	; 0x54
  ep->is_in = 1U;
 800214c:	2301      	movs	r3, #1
 800214e:	f885 303d 	strb.w	r3, [r5, #61]	; 0x3d
  ep->num = ep_addr & EP_ADDR_MSK;
 8002152:	f885 403c 	strb.w	r4, [r5, #60]	; 0x3c
  if (hpcd->Init.dma_enable == 1U)
 8002156:	6903      	ldr	r3, [r0, #16]
 8002158:	2b01      	cmp	r3, #1
 800215a:	d006      	beq.n	800216a <HAL_PCD_EP_Transmit+0x40>
  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800215c:	b95c      	cbnz	r4, 8002176 <HAL_PCD_EP_Transmit+0x4c>
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800215e:	b2da      	uxtb	r2, r3
 8002160:	6800      	ldr	r0, [r0, #0]
 8002162:	f003 fd43 	bl	8005bec <USB_EP0StartXfer>
}
 8002166:	2000      	movs	r0, #0
 8002168:	bd38      	pop	{r3, r4, r5, pc}
    ep->dma_addr = (uint32_t)pBuf;
 800216a:	ebc4 05c4 	rsb	r5, r4, r4, lsl #3
 800216e:	eb00 0585 	add.w	r5, r0, r5, lsl #2
 8002172:	64ea      	str	r2, [r5, #76]	; 0x4c
 8002174:	e7f2      	b.n	800215c <HAL_PCD_EP_Transmit+0x32>
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002176:	b2da      	uxtb	r2, r3
 8002178:	6800      	ldr	r0, [r0, #0]
 800217a:	f003 fdd7 	bl	8005d2c <USB_EPStartXfer>
 800217e:	e7f2      	b.n	8002166 <HAL_PCD_EP_Transmit+0x3c>

08002180 <HAL_PCD_EP_SetStall>:
{
 8002180:	b538      	push	{r3, r4, r5, lr}
  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8002182:	f001 050f 	and.w	r5, r1, #15
 8002186:	6842      	ldr	r2, [r0, #4]
 8002188:	4295      	cmp	r5, r2
 800218a:	d839      	bhi.n	8002200 <HAL_PCD_EP_SetStall+0x80>
 800218c:	4604      	mov	r4, r0
 800218e:	460b      	mov	r3, r1
  if ((0x80U & ep_addr) == 0x80U)
 8002190:	f011 0f80 	tst.w	r1, #128	; 0x80
 8002194:	d11f      	bne.n	80021d6 <HAL_PCD_EP_SetStall+0x56>
    ep = &hpcd->OUT_ep[ep_addr];
 8002196:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
 800219a:	0089      	lsls	r1, r1, #2
 800219c:	f501 71fc 	add.w	r1, r1, #504	; 0x1f8
 80021a0:	4401      	add	r1, r0
 80021a2:	3104      	adds	r1, #4
    ep->is_in = 0U;
 80021a4:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 80021a8:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 80021ac:	2200      	movs	r2, #0
 80021ae:	f883 21fd 	strb.w	r2, [r3, #509]	; 0x1fd
  ep->is_stall = 1U;
 80021b2:	2301      	movs	r3, #1
 80021b4:	708b      	strb	r3, [r1, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80021b6:	700d      	strb	r5, [r1, #0]
  __HAL_LOCK(hpcd);
 80021b8:	f894 33bc 	ldrb.w	r3, [r4, #956]	; 0x3bc
 80021bc:	2b01      	cmp	r3, #1
 80021be:	d021      	beq.n	8002204 <HAL_PCD_EP_SetStall+0x84>
 80021c0:	2301      	movs	r3, #1
 80021c2:	f884 33bc 	strb.w	r3, [r4, #956]	; 0x3bc
  (void)USB_EPSetStall(hpcd->Instance, ep);
 80021c6:	6820      	ldr	r0, [r4, #0]
 80021c8:	f003 fecb 	bl	8005f62 <USB_EPSetStall>
  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80021cc:	b18d      	cbz	r5, 80021f2 <HAL_PCD_EP_SetStall+0x72>
  __HAL_UNLOCK(hpcd);
 80021ce:	2000      	movs	r0, #0
 80021d0:	f884 03bc 	strb.w	r0, [r4, #956]	; 0x3bc
}
 80021d4:	bd38      	pop	{r3, r4, r5, pc}
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80021d6:	ebc5 01c5 	rsb	r1, r5, r5, lsl #3
 80021da:	0089      	lsls	r1, r1, #2
 80021dc:	3138      	adds	r1, #56	; 0x38
 80021de:	4401      	add	r1, r0
 80021e0:	3104      	adds	r1, #4
    ep->is_in = 1U;
 80021e2:	ebc5 03c5 	rsb	r3, r5, r5, lsl #3
 80021e6:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 80021ea:	2201      	movs	r2, #1
 80021ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 80021f0:	e7df      	b.n	80021b2 <HAL_PCD_EP_SetStall+0x32>
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 80021f2:	f504 7271 	add.w	r2, r4, #964	; 0x3c4
 80021f6:	7c21      	ldrb	r1, [r4, #16]
 80021f8:	6820      	ldr	r0, [r4, #0]
 80021fa:	f003 ff7b 	bl	80060f4 <USB_EP0_OutStart>
 80021fe:	e7e6      	b.n	80021ce <HAL_PCD_EP_SetStall+0x4e>
    return HAL_ERROR;
 8002200:	2001      	movs	r0, #1
 8002202:	e7e7      	b.n	80021d4 <HAL_PCD_EP_SetStall+0x54>
  __HAL_LOCK(hpcd);
 8002204:	2002      	movs	r0, #2
 8002206:	e7e5      	b.n	80021d4 <HAL_PCD_EP_SetStall+0x54>

08002208 <HAL_PCD_EP_ClrStall>:
  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8002208:	f001 030f 	and.w	r3, r1, #15
 800220c:	6842      	ldr	r2, [r0, #4]
 800220e:	4293      	cmp	r3, r2
 8002210:	d831      	bhi.n	8002276 <HAL_PCD_EP_ClrStall+0x6e>
{
 8002212:	b510      	push	{r4, lr}
 8002214:	4604      	mov	r4, r0
  if ((0x80U & ep_addr) == 0x80U)
 8002216:	f011 0f80 	tst.w	r1, #128	; 0x80
 800221a:	d11e      	bne.n	800225a <HAL_PCD_EP_ClrStall+0x52>
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800221c:	ebc3 01c3 	rsb	r1, r3, r3, lsl #3
 8002220:	0089      	lsls	r1, r1, #2
 8002222:	f501 71fc 	add.w	r1, r1, #504	; 0x1f8
 8002226:	4401      	add	r1, r0
 8002228:	3104      	adds	r1, #4
    ep->is_in = 0U;
 800222a:	ebc3 02c3 	rsb	r2, r3, r3, lsl #3
 800222e:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 8002232:	2000      	movs	r0, #0
 8002234:	f882 01fd 	strb.w	r0, [r2, #509]	; 0x1fd
  ep->is_stall = 0U;
 8002238:	2200      	movs	r2, #0
 800223a:	708a      	strb	r2, [r1, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800223c:	700b      	strb	r3, [r1, #0]
  __HAL_LOCK(hpcd);
 800223e:	f894 33bc 	ldrb.w	r3, [r4, #956]	; 0x3bc
 8002242:	2b01      	cmp	r3, #1
 8002244:	d019      	beq.n	800227a <HAL_PCD_EP_ClrStall+0x72>
 8002246:	2301      	movs	r3, #1
 8002248:	f884 33bc 	strb.w	r3, [r4, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 800224c:	6820      	ldr	r0, [r4, #0]
 800224e:	f003 feb5 	bl	8005fbc <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8002252:	2000      	movs	r0, #0
 8002254:	f884 03bc 	strb.w	r0, [r4, #956]	; 0x3bc
}
 8002258:	bd10      	pop	{r4, pc}
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800225a:	ebc3 01c3 	rsb	r1, r3, r3, lsl #3
 800225e:	0089      	lsls	r1, r1, #2
 8002260:	3138      	adds	r1, #56	; 0x38
 8002262:	4401      	add	r1, r0
 8002264:	3104      	adds	r1, #4
    ep->is_in = 1U;
 8002266:	ebc3 02c3 	rsb	r2, r3, r3, lsl #3
 800226a:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 800226e:	2001      	movs	r0, #1
 8002270:	f882 003d 	strb.w	r0, [r2, #61]	; 0x3d
 8002274:	e7e0      	b.n	8002238 <HAL_PCD_EP_ClrStall+0x30>
    return HAL_ERROR;
 8002276:	2001      	movs	r0, #1
}
 8002278:	4770      	bx	lr
  __HAL_LOCK(hpcd);
 800227a:	2002      	movs	r0, #2
 800227c:	e7ec      	b.n	8002258 <HAL_PCD_EP_ClrStall+0x50>

0800227e <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 800227e:	b430      	push	{r4, r5}
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8002280:	6804      	ldr	r4, [r0, #0]
 8002282:	6a60      	ldr	r0, [r4, #36]	; 0x24

  if (fifo == 0U)
 8002284:	b919      	cbnz	r1, 800228e <HAL_PCDEx_SetTxFiFo+0x10>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8002286:	ea40 4002 	orr.w	r0, r0, r2, lsl #16
 800228a:	62a0      	str	r0, [r4, #40]	; 0x28
 800228c:	e018      	b.n	80022c0 <HAL_PCDEx_SetTxFiFo+0x42>
 800228e:	460d      	mov	r5, r1
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8002290:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8002292:	eb00 4013 	add.w	r0, r0, r3, lsr #16
    for (i = 0U; i < (fifo - 1U); i++)
 8002296:	2300      	movs	r3, #0
 8002298:	1e69      	subs	r1, r5, #1
 800229a:	428b      	cmp	r3, r1
 800229c:	d209      	bcs.n	80022b2 <HAL_PCDEx_SetTxFiFo+0x34>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 800229e:	f103 0140 	add.w	r1, r3, #64	; 0x40
 80022a2:	eb04 0181 	add.w	r1, r4, r1, lsl #2
 80022a6:	6849      	ldr	r1, [r1, #4]
 80022a8:	eb00 4011 	add.w	r0, r0, r1, lsr #16
    for (i = 0U; i < (fifo - 1U); i++)
 80022ac:	3301      	adds	r3, #1
 80022ae:	b2db      	uxtb	r3, r3
 80022b0:	e7f2      	b.n	8002298 <HAL_PCDEx_SetTxFiFo+0x1a>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 80022b2:	ea40 4002 	orr.w	r0, r0, r2, lsl #16
 80022b6:	f105 013f 	add.w	r1, r5, #63	; 0x3f
 80022ba:	eb04 0181 	add.w	r1, r4, r1, lsl #2
 80022be:	6048      	str	r0, [r1, #4]
  }

  return HAL_OK;
}
 80022c0:	2000      	movs	r0, #0
 80022c2:	bc30      	pop	{r4, r5}
 80022c4:	4770      	bx	lr

080022c6 <HAL_PCDEx_SetRxFiFo>:
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
  hpcd->Instance->GRXFSIZ = size;
 80022c6:	6803      	ldr	r3, [r0, #0]
 80022c8:	6259      	str	r1, [r3, #36]	; 0x24

  return HAL_OK;
}
 80022ca:	2000      	movs	r0, #0
 80022cc:	4770      	bx	lr
	...

080022d0 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 80022d0:	4603      	mov	r3, r0
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80022d2:	6802      	ldr	r2, [r0, #0]

  hpcd->lpm_active = 1U;
 80022d4:	2101      	movs	r1, #1
 80022d6:	f8c0 13fc 	str.w	r1, [r0, #1020]	; 0x3fc
  hpcd->LPM_State = LPM_L0;
 80022da:	2000      	movs	r0, #0
 80022dc:	f883 03f4 	strb.w	r0, [r3, #1012]	; 0x3f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 80022e0:	6993      	ldr	r3, [r2, #24]
 80022e2:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80022e6:	6193      	str	r3, [r2, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 80022e8:	6d51      	ldr	r1, [r2, #84]	; 0x54
 80022ea:	4b02      	ldr	r3, [pc, #8]	; (80022f4 <HAL_PCDEx_ActivateLPM+0x24>)
 80022ec:	430b      	orrs	r3, r1
 80022ee:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
}
 80022f0:	4770      	bx	lr
 80022f2:	bf00      	nop
 80022f4:	10000003 	.word	0x10000003

080022f8 <HAL_PCDEx_LPM_Callback>:
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 80022f8:	4770      	bx	lr
	...

080022fc <HAL_PWREx_ConfigSupply>:
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 80022fc:	4b13      	ldr	r3, [pc, #76]	; (800234c <HAL_PWREx_ConfigSupply+0x50>)
 80022fe:	68db      	ldr	r3, [r3, #12]
 8002300:	f013 0f04 	tst.w	r3, #4
 8002304:	d107      	bne.n	8002316 <HAL_PWREx_ConfigSupply+0x1a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8002306:	4b11      	ldr	r3, [pc, #68]	; (800234c <HAL_PWREx_ConfigSupply+0x50>)
 8002308:	68db      	ldr	r3, [r3, #12]
 800230a:	f003 0307 	and.w	r3, r3, #7
 800230e:	4283      	cmp	r3, r0
 8002310:	d01a      	beq.n	8002348 <HAL_PWREx_ConfigSupply+0x4c>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8002312:	2001      	movs	r0, #1
 8002314:	4770      	bx	lr
{
 8002316:	b510      	push	{r4, lr}
      return HAL_OK;
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8002318:	4a0c      	ldr	r2, [pc, #48]	; (800234c <HAL_PWREx_ConfigSupply+0x50>)
 800231a:	68d3      	ldr	r3, [r2, #12]
 800231c:	f023 0307 	bic.w	r3, r3, #7
 8002320:	4318      	orrs	r0, r3
 8002322:	60d0      	str	r0, [r2, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8002324:	f7fe f9e2 	bl	80006ec <HAL_GetTick>
 8002328:	4604      	mov	r4, r0

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800232a:	4b08      	ldr	r3, [pc, #32]	; (800234c <HAL_PWREx_ConfigSupply+0x50>)
 800232c:	685b      	ldr	r3, [r3, #4]
 800232e:	f413 5f00 	tst.w	r3, #8192	; 0x2000
 8002332:	d107      	bne.n	8002344 <HAL_PWREx_ConfigSupply+0x48>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8002334:	f7fe f9da 	bl	80006ec <HAL_GetTick>
 8002338:	1b00      	subs	r0, r0, r4
 800233a:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 800233e:	d9f4      	bls.n	800232a <HAL_PWREx_ConfigSupply+0x2e>
    {
      return HAL_ERROR;
 8002340:	2001      	movs	r0, #1
 8002342:	e000      	b.n	8002346 <HAL_PWREx_ConfigSupply+0x4a>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8002344:	2000      	movs	r0, #0
}
 8002346:	bd10      	pop	{r4, pc}
      return HAL_OK;
 8002348:	2000      	movs	r0, #0
}
 800234a:	4770      	bx	lr
 800234c:	58024800 	.word	0x58024800

08002350 <HAL_PWREx_EnableUSBVoltageDetector>:
  * @retval None.
  */
void HAL_PWREx_EnableUSBVoltageDetector (void)
{
  /* Enable the USB voltage detector */
  SET_BIT (PWR->CR3, PWR_CR3_USB33DEN);
 8002350:	4a02      	ldr	r2, [pc, #8]	; (800235c <HAL_PWREx_EnableUSBVoltageDetector+0xc>)
 8002352:	68d3      	ldr	r3, [r2, #12]
 8002354:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002358:	60d3      	str	r3, [r2, #12]
}
 800235a:	4770      	bx	lr
 800235c:	58024800 	.word	0x58024800

08002360 <HAL_RCC_OscConfig>:
{
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002360:	2800      	cmp	r0, #0
 8002362:	f000 8304 	beq.w	800296e <HAL_RCC_OscConfig+0x60e>
{
 8002366:	b538      	push	{r3, r4, r5, lr}
 8002368:	4604      	mov	r4, r0
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800236a:	6803      	ldr	r3, [r0, #0]
 800236c:	f013 0f01 	tst.w	r3, #1
 8002370:	d025      	beq.n	80023be <HAL_RCC_OscConfig+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002372:	4aae      	ldr	r2, [pc, #696]	; (800262c <HAL_RCC_OscConfig+0x2cc>)
 8002374:	6913      	ldr	r3, [r2, #16]
 8002376:	f003 0338 	and.w	r3, r3, #56	; 0x38
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800237a:	6a92      	ldr	r2, [r2, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 800237c:	2b10      	cmp	r3, #16
 800237e:	d015      	beq.n	80023ac <HAL_RCC_OscConfig+0x4c>
 8002380:	2b18      	cmp	r3, #24
 8002382:	d00f      	beq.n	80023a4 <HAL_RCC_OscConfig+0x44>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002384:	6863      	ldr	r3, [r4, #4]
 8002386:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800238a:	d03f      	beq.n	800240c <HAL_RCC_OscConfig+0xac>
 800238c:	2b00      	cmp	r3, #0
 800238e:	d153      	bne.n	8002438 <HAL_RCC_OscConfig+0xd8>
 8002390:	4ba6      	ldr	r3, [pc, #664]	; (800262c <HAL_RCC_OscConfig+0x2cc>)
 8002392:	681a      	ldr	r2, [r3, #0]
 8002394:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8002398:	601a      	str	r2, [r3, #0]
 800239a:	681a      	ldr	r2, [r3, #0]
 800239c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80023a0:	601a      	str	r2, [r3, #0]
 80023a2:	e038      	b.n	8002416 <HAL_RCC_OscConfig+0xb6>
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 80023a4:	f002 0203 	and.w	r2, r2, #3
 80023a8:	2a02      	cmp	r2, #2
 80023aa:	d1eb      	bne.n	8002384 <HAL_RCC_OscConfig+0x24>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80023ac:	4b9f      	ldr	r3, [pc, #636]	; (800262c <HAL_RCC_OscConfig+0x2cc>)
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 80023b4:	d003      	beq.n	80023be <HAL_RCC_OscConfig+0x5e>
 80023b6:	6863      	ldr	r3, [r4, #4]
 80023b8:	2b00      	cmp	r3, #0
 80023ba:	f000 82da 	beq.w	8002972 <HAL_RCC_OscConfig+0x612>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80023be:	6823      	ldr	r3, [r4, #0]
 80023c0:	f013 0f02 	tst.w	r3, #2
 80023c4:	f000 808b 	beq.w	80024de <HAL_RCC_OscConfig+0x17e>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80023c8:	4a98      	ldr	r2, [pc, #608]	; (800262c <HAL_RCC_OscConfig+0x2cc>)
 80023ca:	6913      	ldr	r3, [r2, #16]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80023cc:	6a92      	ldr	r2, [r2, #40]	; 0x28
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 80023ce:	f013 0338 	ands.w	r3, r3, #56	; 0x38
 80023d2:	d05a      	beq.n	800248a <HAL_RCC_OscConfig+0x12a>
 80023d4:	2b18      	cmp	r3, #24
 80023d6:	d055      	beq.n	8002484 <HAL_RCC_OscConfig+0x124>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80023d8:	68e3      	ldr	r3, [r4, #12]
 80023da:	2b00      	cmp	r3, #0
 80023dc:	f000 80c8 	beq.w	8002570 <HAL_RCC_OscConfig+0x210>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80023e0:	4992      	ldr	r1, [pc, #584]	; (800262c <HAL_RCC_OscConfig+0x2cc>)
 80023e2:	680a      	ldr	r2, [r1, #0]
 80023e4:	f022 0219 	bic.w	r2, r2, #25
 80023e8:	4313      	orrs	r3, r2
 80023ea:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80023ec:	f7fe f97e 	bl	80006ec <HAL_GetTick>
 80023f0:	4605      	mov	r5, r0

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80023f2:	4b8e      	ldr	r3, [pc, #568]	; (800262c <HAL_RCC_OscConfig+0x2cc>)
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	f013 0f04 	tst.w	r3, #4
 80023fa:	f040 8097 	bne.w	800252c <HAL_RCC_OscConfig+0x1cc>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80023fe:	f7fe f975 	bl	80006ec <HAL_GetTick>
 8002402:	1b40      	subs	r0, r0, r5
 8002404:	2802      	cmp	r0, #2
 8002406:	d9f4      	bls.n	80023f2 <HAL_RCC_OscConfig+0x92>
          {
            return HAL_TIMEOUT;
 8002408:	2003      	movs	r0, #3
 800240a:	e2b9      	b.n	8002980 <HAL_RCC_OscConfig+0x620>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800240c:	4a87      	ldr	r2, [pc, #540]	; (800262c <HAL_RCC_OscConfig+0x2cc>)
 800240e:	6813      	ldr	r3, [r2, #0]
 8002410:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002414:	6013      	str	r3, [r2, #0]
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002416:	6863      	ldr	r3, [r4, #4]
 8002418:	b32b      	cbz	r3, 8002466 <HAL_RCC_OscConfig+0x106>
        tickstart = HAL_GetTick();
 800241a:	f7fe f967 	bl	80006ec <HAL_GetTick>
 800241e:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002420:	4b82      	ldr	r3, [pc, #520]	; (800262c <HAL_RCC_OscConfig+0x2cc>)
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8002428:	d1c9      	bne.n	80023be <HAL_RCC_OscConfig+0x5e>
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800242a:	f7fe f95f 	bl	80006ec <HAL_GetTick>
 800242e:	1b40      	subs	r0, r0, r5
 8002430:	2864      	cmp	r0, #100	; 0x64
 8002432:	d9f5      	bls.n	8002420 <HAL_RCC_OscConfig+0xc0>
            return HAL_TIMEOUT;
 8002434:	2003      	movs	r0, #3
 8002436:	e2a3      	b.n	8002980 <HAL_RCC_OscConfig+0x620>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002438:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800243c:	d009      	beq.n	8002452 <HAL_RCC_OscConfig+0xf2>
 800243e:	4b7b      	ldr	r3, [pc, #492]	; (800262c <HAL_RCC_OscConfig+0x2cc>)
 8002440:	681a      	ldr	r2, [r3, #0]
 8002442:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8002446:	601a      	str	r2, [r3, #0]
 8002448:	681a      	ldr	r2, [r3, #0]
 800244a:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800244e:	601a      	str	r2, [r3, #0]
 8002450:	e7e1      	b.n	8002416 <HAL_RCC_OscConfig+0xb6>
 8002452:	4b76      	ldr	r3, [pc, #472]	; (800262c <HAL_RCC_OscConfig+0x2cc>)
 8002454:	681a      	ldr	r2, [r3, #0]
 8002456:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 800245a:	601a      	str	r2, [r3, #0]
 800245c:	681a      	ldr	r2, [r3, #0]
 800245e:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8002462:	601a      	str	r2, [r3, #0]
 8002464:	e7d7      	b.n	8002416 <HAL_RCC_OscConfig+0xb6>
        tickstart = HAL_GetTick();
 8002466:	f7fe f941 	bl	80006ec <HAL_GetTick>
 800246a:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800246c:	4b6f      	ldr	r3, [pc, #444]	; (800262c <HAL_RCC_OscConfig+0x2cc>)
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8002474:	d0a3      	beq.n	80023be <HAL_RCC_OscConfig+0x5e>
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002476:	f7fe f939 	bl	80006ec <HAL_GetTick>
 800247a:	1b40      	subs	r0, r0, r5
 800247c:	2864      	cmp	r0, #100	; 0x64
 800247e:	d9f5      	bls.n	800246c <HAL_RCC_OscConfig+0x10c>
            return HAL_TIMEOUT;
 8002480:	2003      	movs	r0, #3
 8002482:	e27d      	b.n	8002980 <HAL_RCC_OscConfig+0x620>
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8002484:	f012 0f03 	tst.w	r2, #3
 8002488:	d1a6      	bne.n	80023d8 <HAL_RCC_OscConfig+0x78>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800248a:	4b68      	ldr	r3, [pc, #416]	; (800262c <HAL_RCC_OscConfig+0x2cc>)
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	f013 0f04 	tst.w	r3, #4
 8002492:	d003      	beq.n	800249c <HAL_RCC_OscConfig+0x13c>
 8002494:	68e3      	ldr	r3, [r4, #12]
 8002496:	2b00      	cmp	r3, #0
 8002498:	f000 826d 	beq.w	8002976 <HAL_RCC_OscConfig+0x616>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800249c:	f7fe f940 	bl	8000720 <HAL_GetREVID>
 80024a0:	f241 0303 	movw	r3, #4099	; 0x1003
 80024a4:	4298      	cmp	r0, r3
 80024a6:	d812      	bhi.n	80024ce <HAL_RCC_OscConfig+0x16e>
 80024a8:	6922      	ldr	r2, [r4, #16]
 80024aa:	2a40      	cmp	r2, #64	; 0x40
 80024ac:	d007      	beq.n	80024be <HAL_RCC_OscConfig+0x15e>
 80024ae:	495f      	ldr	r1, [pc, #380]	; (800262c <HAL_RCC_OscConfig+0x2cc>)
 80024b0:	684b      	ldr	r3, [r1, #4]
 80024b2:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 80024b6:	ea43 3302 	orr.w	r3, r3, r2, lsl #12
 80024ba:	604b      	str	r3, [r1, #4]
 80024bc:	e00f      	b.n	80024de <HAL_RCC_OscConfig+0x17e>
 80024be:	4a5b      	ldr	r2, [pc, #364]	; (800262c <HAL_RCC_OscConfig+0x2cc>)
 80024c0:	6853      	ldr	r3, [r2, #4]
 80024c2:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 80024c6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80024ca:	6053      	str	r3, [r2, #4]
 80024cc:	e007      	b.n	80024de <HAL_RCC_OscConfig+0x17e>
 80024ce:	4a57      	ldr	r2, [pc, #348]	; (800262c <HAL_RCC_OscConfig+0x2cc>)
 80024d0:	6853      	ldr	r3, [r2, #4]
 80024d2:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 80024d6:	6921      	ldr	r1, [r4, #16]
 80024d8:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 80024dc:	6053      	str	r3, [r2, #4]
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 80024de:	6823      	ldr	r3, [r4, #0]
 80024e0:	f013 0f10 	tst.w	r3, #16
 80024e4:	f000 8086 	beq.w	80025f4 <HAL_RCC_OscConfig+0x294>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80024e8:	4a50      	ldr	r2, [pc, #320]	; (800262c <HAL_RCC_OscConfig+0x2cc>)
 80024ea:	6913      	ldr	r3, [r2, #16]
 80024ec:	f003 0338 	and.w	r3, r3, #56	; 0x38
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80024f0:	6a92      	ldr	r2, [r2, #40]	; 0x28
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 80024f2:	2b08      	cmp	r3, #8
 80024f4:	d054      	beq.n	80025a0 <HAL_RCC_OscConfig+0x240>
 80024f6:	2b18      	cmp	r3, #24
 80024f8:	d04e      	beq.n	8002598 <HAL_RCC_OscConfig+0x238>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 80024fa:	69e3      	ldr	r3, [r4, #28]
 80024fc:	2b00      	cmp	r3, #0
 80024fe:	f000 80b9 	beq.w	8002674 <HAL_RCC_OscConfig+0x314>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8002502:	4a4a      	ldr	r2, [pc, #296]	; (800262c <HAL_RCC_OscConfig+0x2cc>)
 8002504:	6813      	ldr	r3, [r2, #0]
 8002506:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800250a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800250c:	f7fe f8ee 	bl	80006ec <HAL_GetTick>
 8002510:	4605      	mov	r5, r0

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002512:	4b46      	ldr	r3, [pc, #280]	; (800262c <HAL_RCC_OscConfig+0x2cc>)
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	f413 7f80 	tst.w	r3, #256	; 0x100
 800251a:	f040 8089 	bne.w	8002630 <HAL_RCC_OscConfig+0x2d0>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 800251e:	f7fe f8e5 	bl	80006ec <HAL_GetTick>
 8002522:	1b40      	subs	r0, r0, r5
 8002524:	2802      	cmp	r0, #2
 8002526:	d9f4      	bls.n	8002512 <HAL_RCC_OscConfig+0x1b2>
          {
            return HAL_TIMEOUT;
 8002528:	2003      	movs	r0, #3
 800252a:	e229      	b.n	8002980 <HAL_RCC_OscConfig+0x620>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800252c:	f7fe f8f8 	bl	8000720 <HAL_GetREVID>
 8002530:	f241 0303 	movw	r3, #4099	; 0x1003
 8002534:	4298      	cmp	r0, r3
 8002536:	d812      	bhi.n	800255e <HAL_RCC_OscConfig+0x1fe>
 8002538:	6922      	ldr	r2, [r4, #16]
 800253a:	2a40      	cmp	r2, #64	; 0x40
 800253c:	d007      	beq.n	800254e <HAL_RCC_OscConfig+0x1ee>
 800253e:	493b      	ldr	r1, [pc, #236]	; (800262c <HAL_RCC_OscConfig+0x2cc>)
 8002540:	684b      	ldr	r3, [r1, #4]
 8002542:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8002546:	ea43 3302 	orr.w	r3, r3, r2, lsl #12
 800254a:	604b      	str	r3, [r1, #4]
 800254c:	e7c7      	b.n	80024de <HAL_RCC_OscConfig+0x17e>
 800254e:	4a37      	ldr	r2, [pc, #220]	; (800262c <HAL_RCC_OscConfig+0x2cc>)
 8002550:	6853      	ldr	r3, [r2, #4]
 8002552:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8002556:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800255a:	6053      	str	r3, [r2, #4]
 800255c:	e7bf      	b.n	80024de <HAL_RCC_OscConfig+0x17e>
 800255e:	4a33      	ldr	r2, [pc, #204]	; (800262c <HAL_RCC_OscConfig+0x2cc>)
 8002560:	6853      	ldr	r3, [r2, #4]
 8002562:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8002566:	6921      	ldr	r1, [r4, #16]
 8002568:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 800256c:	6053      	str	r3, [r2, #4]
 800256e:	e7b6      	b.n	80024de <HAL_RCC_OscConfig+0x17e>
        __HAL_RCC_HSI_DISABLE();
 8002570:	4a2e      	ldr	r2, [pc, #184]	; (800262c <HAL_RCC_OscConfig+0x2cc>)
 8002572:	6813      	ldr	r3, [r2, #0]
 8002574:	f023 0301 	bic.w	r3, r3, #1
 8002578:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 800257a:	f7fe f8b7 	bl	80006ec <HAL_GetTick>
 800257e:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002580:	4b2a      	ldr	r3, [pc, #168]	; (800262c <HAL_RCC_OscConfig+0x2cc>)
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	f013 0f04 	tst.w	r3, #4
 8002588:	d0a9      	beq.n	80024de <HAL_RCC_OscConfig+0x17e>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800258a:	f7fe f8af 	bl	80006ec <HAL_GetTick>
 800258e:	1b40      	subs	r0, r0, r5
 8002590:	2802      	cmp	r0, #2
 8002592:	d9f5      	bls.n	8002580 <HAL_RCC_OscConfig+0x220>
            return HAL_TIMEOUT;
 8002594:	2003      	movs	r0, #3
 8002596:	e1f3      	b.n	8002980 <HAL_RCC_OscConfig+0x620>
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8002598:	f002 0203 	and.w	r2, r2, #3
 800259c:	2a01      	cmp	r2, #1
 800259e:	d1ac      	bne.n	80024fa <HAL_RCC_OscConfig+0x19a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80025a0:	4b22      	ldr	r3, [pc, #136]	; (800262c <HAL_RCC_OscConfig+0x2cc>)
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	f413 7f80 	tst.w	r3, #256	; 0x100
 80025a8:	d003      	beq.n	80025b2 <HAL_RCC_OscConfig+0x252>
 80025aa:	69e3      	ldr	r3, [r4, #28]
 80025ac:	2b80      	cmp	r3, #128	; 0x80
 80025ae:	f040 81e4 	bne.w	800297a <HAL_RCC_OscConfig+0x61a>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80025b2:	f7fe f8b5 	bl	8000720 <HAL_GetREVID>
 80025b6:	f241 0303 	movw	r3, #4099	; 0x1003
 80025ba:	4298      	cmp	r0, r3
 80025bc:	d812      	bhi.n	80025e4 <HAL_RCC_OscConfig+0x284>
 80025be:	6a22      	ldr	r2, [r4, #32]
 80025c0:	2a20      	cmp	r2, #32
 80025c2:	d007      	beq.n	80025d4 <HAL_RCC_OscConfig+0x274>
 80025c4:	4919      	ldr	r1, [pc, #100]	; (800262c <HAL_RCC_OscConfig+0x2cc>)
 80025c6:	684b      	ldr	r3, [r1, #4]
 80025c8:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 80025cc:	ea43 6382 	orr.w	r3, r3, r2, lsl #26
 80025d0:	604b      	str	r3, [r1, #4]
 80025d2:	e00f      	b.n	80025f4 <HAL_RCC_OscConfig+0x294>
 80025d4:	4a15      	ldr	r2, [pc, #84]	; (800262c <HAL_RCC_OscConfig+0x2cc>)
 80025d6:	6853      	ldr	r3, [r2, #4]
 80025d8:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 80025dc:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80025e0:	6053      	str	r3, [r2, #4]
 80025e2:	e007      	b.n	80025f4 <HAL_RCC_OscConfig+0x294>
 80025e4:	4a11      	ldr	r2, [pc, #68]	; (800262c <HAL_RCC_OscConfig+0x2cc>)
 80025e6:	68d3      	ldr	r3, [r2, #12]
 80025e8:	f023 537c 	bic.w	r3, r3, #1056964608	; 0x3f000000
 80025ec:	6a21      	ldr	r1, [r4, #32]
 80025ee:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 80025f2:	60d3      	str	r3, [r2, #12]
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80025f4:	6823      	ldr	r3, [r4, #0]
 80025f6:	f013 0f08 	tst.w	r3, #8
 80025fa:	d063      	beq.n	80026c4 <HAL_RCC_OscConfig+0x364>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80025fc:	6963      	ldr	r3, [r4, #20]
 80025fe:	2b00      	cmp	r3, #0
 8002600:	d04c      	beq.n	800269c <HAL_RCC_OscConfig+0x33c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002602:	4a0a      	ldr	r2, [pc, #40]	; (800262c <HAL_RCC_OscConfig+0x2cc>)
 8002604:	6f53      	ldr	r3, [r2, #116]	; 0x74
 8002606:	f043 0301 	orr.w	r3, r3, #1
 800260a:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800260c:	f7fe f86e 	bl	80006ec <HAL_GetTick>
 8002610:	4605      	mov	r5, r0

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002612:	4b06      	ldr	r3, [pc, #24]	; (800262c <HAL_RCC_OscConfig+0x2cc>)
 8002614:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002616:	f013 0f02 	tst.w	r3, #2
 800261a:	d153      	bne.n	80026c4 <HAL_RCC_OscConfig+0x364>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800261c:	f7fe f866 	bl	80006ec <HAL_GetTick>
 8002620:	1b40      	subs	r0, r0, r5
 8002622:	2802      	cmp	r0, #2
 8002624:	d9f5      	bls.n	8002612 <HAL_RCC_OscConfig+0x2b2>
        {
          return HAL_TIMEOUT;
 8002626:	2003      	movs	r0, #3
 8002628:	e1aa      	b.n	8002980 <HAL_RCC_OscConfig+0x620>
 800262a:	bf00      	nop
 800262c:	58024400 	.word	0x58024400
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002630:	f7fe f876 	bl	8000720 <HAL_GetREVID>
 8002634:	f241 0303 	movw	r3, #4099	; 0x1003
 8002638:	4298      	cmp	r0, r3
 800263a:	d812      	bhi.n	8002662 <HAL_RCC_OscConfig+0x302>
 800263c:	6a22      	ldr	r2, [r4, #32]
 800263e:	2a20      	cmp	r2, #32
 8002640:	d007      	beq.n	8002652 <HAL_RCC_OscConfig+0x2f2>
 8002642:	4985      	ldr	r1, [pc, #532]	; (8002858 <HAL_RCC_OscConfig+0x4f8>)
 8002644:	684b      	ldr	r3, [r1, #4]
 8002646:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 800264a:	ea43 6382 	orr.w	r3, r3, r2, lsl #26
 800264e:	604b      	str	r3, [r1, #4]
 8002650:	e7d0      	b.n	80025f4 <HAL_RCC_OscConfig+0x294>
 8002652:	4a81      	ldr	r2, [pc, #516]	; (8002858 <HAL_RCC_OscConfig+0x4f8>)
 8002654:	6853      	ldr	r3, [r2, #4]
 8002656:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 800265a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800265e:	6053      	str	r3, [r2, #4]
 8002660:	e7c8      	b.n	80025f4 <HAL_RCC_OscConfig+0x294>
 8002662:	4a7d      	ldr	r2, [pc, #500]	; (8002858 <HAL_RCC_OscConfig+0x4f8>)
 8002664:	68d3      	ldr	r3, [r2, #12]
 8002666:	f023 537c 	bic.w	r3, r3, #1056964608	; 0x3f000000
 800266a:	6a21      	ldr	r1, [r4, #32]
 800266c:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 8002670:	60d3      	str	r3, [r2, #12]
 8002672:	e7bf      	b.n	80025f4 <HAL_RCC_OscConfig+0x294>
        __HAL_RCC_CSI_DISABLE();
 8002674:	4a78      	ldr	r2, [pc, #480]	; (8002858 <HAL_RCC_OscConfig+0x4f8>)
 8002676:	6813      	ldr	r3, [r2, #0]
 8002678:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800267c:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 800267e:	f7fe f835 	bl	80006ec <HAL_GetTick>
 8002682:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8002684:	4b74      	ldr	r3, [pc, #464]	; (8002858 <HAL_RCC_OscConfig+0x4f8>)
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	f413 7f80 	tst.w	r3, #256	; 0x100
 800268c:	d0b2      	beq.n	80025f4 <HAL_RCC_OscConfig+0x294>
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 800268e:	f7fe f82d 	bl	80006ec <HAL_GetTick>
 8002692:	1b40      	subs	r0, r0, r5
 8002694:	2802      	cmp	r0, #2
 8002696:	d9f5      	bls.n	8002684 <HAL_RCC_OscConfig+0x324>
            return HAL_TIMEOUT;
 8002698:	2003      	movs	r0, #3
 800269a:	e171      	b.n	8002980 <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800269c:	4a6e      	ldr	r2, [pc, #440]	; (8002858 <HAL_RCC_OscConfig+0x4f8>)
 800269e:	6f53      	ldr	r3, [r2, #116]	; 0x74
 80026a0:	f023 0301 	bic.w	r3, r3, #1
 80026a4:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80026a6:	f7fe f821 	bl	80006ec <HAL_GetTick>
 80026aa:	4605      	mov	r5, r0

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80026ac:	4b6a      	ldr	r3, [pc, #424]	; (8002858 <HAL_RCC_OscConfig+0x4f8>)
 80026ae:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80026b0:	f013 0f02 	tst.w	r3, #2
 80026b4:	d006      	beq.n	80026c4 <HAL_RCC_OscConfig+0x364>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80026b6:	f7fe f819 	bl	80006ec <HAL_GetTick>
 80026ba:	1b40      	subs	r0, r0, r5
 80026bc:	2802      	cmp	r0, #2
 80026be:	d9f5      	bls.n	80026ac <HAL_RCC_OscConfig+0x34c>
        {
          return HAL_TIMEOUT;
 80026c0:	2003      	movs	r0, #3
 80026c2:	e15d      	b.n	8002980 <HAL_RCC_OscConfig+0x620>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80026c4:	6823      	ldr	r3, [r4, #0]
 80026c6:	f013 0f20 	tst.w	r3, #32
 80026ca:	d029      	beq.n	8002720 <HAL_RCC_OscConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 80026cc:	69a3      	ldr	r3, [r4, #24]
 80026ce:	b19b      	cbz	r3, 80026f8 <HAL_RCC_OscConfig+0x398>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80026d0:	4a61      	ldr	r2, [pc, #388]	; (8002858 <HAL_RCC_OscConfig+0x4f8>)
 80026d2:	6813      	ldr	r3, [r2, #0]
 80026d4:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80026d8:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80026da:	f7fe f807 	bl	80006ec <HAL_GetTick>
 80026de:	4605      	mov	r5, r0

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80026e0:	4b5d      	ldr	r3, [pc, #372]	; (8002858 <HAL_RCC_OscConfig+0x4f8>)
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	f413 5f00 	tst.w	r3, #8192	; 0x2000
 80026e8:	d11a      	bne.n	8002720 <HAL_RCC_OscConfig+0x3c0>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 80026ea:	f7fd ffff 	bl	80006ec <HAL_GetTick>
 80026ee:	1b40      	subs	r0, r0, r5
 80026f0:	2802      	cmp	r0, #2
 80026f2:	d9f5      	bls.n	80026e0 <HAL_RCC_OscConfig+0x380>
        {
          return HAL_TIMEOUT;
 80026f4:	2003      	movs	r0, #3
 80026f6:	e143      	b.n	8002980 <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80026f8:	4a57      	ldr	r2, [pc, #348]	; (8002858 <HAL_RCC_OscConfig+0x4f8>)
 80026fa:	6813      	ldr	r3, [r2, #0]
 80026fc:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002700:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8002702:	f7fd fff3 	bl	80006ec <HAL_GetTick>
 8002706:	4605      	mov	r5, r0

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8002708:	4b53      	ldr	r3, [pc, #332]	; (8002858 <HAL_RCC_OscConfig+0x4f8>)
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	f413 5f00 	tst.w	r3, #8192	; 0x2000
 8002710:	d006      	beq.n	8002720 <HAL_RCC_OscConfig+0x3c0>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8002712:	f7fd ffeb 	bl	80006ec <HAL_GetTick>
 8002716:	1b40      	subs	r0, r0, r5
 8002718:	2802      	cmp	r0, #2
 800271a:	d9f5      	bls.n	8002708 <HAL_RCC_OscConfig+0x3a8>
        {
          return HAL_TIMEOUT;
 800271c:	2003      	movs	r0, #3
 800271e:	e12f      	b.n	8002980 <HAL_RCC_OscConfig+0x620>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002720:	6823      	ldr	r3, [r4, #0]
 8002722:	f013 0f04 	tst.w	r3, #4
 8002726:	d121      	bne.n	800276c <HAL_RCC_OscConfig+0x40c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002728:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800272a:	2b00      	cmp	r3, #0
 800272c:	f000 8127 	beq.w	800297e <HAL_RCC_OscConfig+0x61e>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8002730:	4a49      	ldr	r2, [pc, #292]	; (8002858 <HAL_RCC_OscConfig+0x4f8>)
 8002732:	6912      	ldr	r2, [r2, #16]
 8002734:	f002 0238 	and.w	r2, r2, #56	; 0x38
 8002738:	2a18      	cmp	r2, #24
 800273a:	f000 80ef 	beq.w	800291c <HAL_RCC_OscConfig+0x5bc>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800273e:	2b02      	cmp	r3, #2
 8002740:	d075      	beq.n	800282e <HAL_RCC_OscConfig+0x4ce>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002742:	4a45      	ldr	r2, [pc, #276]	; (8002858 <HAL_RCC_OscConfig+0x4f8>)
 8002744:	6813      	ldr	r3, [r2, #0]
 8002746:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800274a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800274c:	f7fd ffce 	bl	80006ec <HAL_GetTick>
 8002750:	4604      	mov	r4, r0

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002752:	4b41      	ldr	r3, [pc, #260]	; (8002858 <HAL_RCC_OscConfig+0x4f8>)
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 800275a:	f000 80dd 	beq.w	8002918 <HAL_RCC_OscConfig+0x5b8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800275e:	f7fd ffc5 	bl	80006ec <HAL_GetTick>
 8002762:	1b00      	subs	r0, r0, r4
 8002764:	2802      	cmp	r0, #2
 8002766:	d9f4      	bls.n	8002752 <HAL_RCC_OscConfig+0x3f2>
          {
            return HAL_TIMEOUT;
 8002768:	2003      	movs	r0, #3
 800276a:	e109      	b.n	8002980 <HAL_RCC_OscConfig+0x620>
    PWR->CR1 |= PWR_CR1_DBP;
 800276c:	4a3b      	ldr	r2, [pc, #236]	; (800285c <HAL_RCC_OscConfig+0x4fc>)
 800276e:	6813      	ldr	r3, [r2, #0]
 8002770:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002774:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 8002776:	f7fd ffb9 	bl	80006ec <HAL_GetTick>
 800277a:	4605      	mov	r5, r0
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800277c:	4b37      	ldr	r3, [pc, #220]	; (800285c <HAL_RCC_OscConfig+0x4fc>)
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	f413 7f80 	tst.w	r3, #256	; 0x100
 8002784:	d106      	bne.n	8002794 <HAL_RCC_OscConfig+0x434>
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8002786:	f7fd ffb1 	bl	80006ec <HAL_GetTick>
 800278a:	1b40      	subs	r0, r0, r5
 800278c:	2864      	cmp	r0, #100	; 0x64
 800278e:	d9f5      	bls.n	800277c <HAL_RCC_OscConfig+0x41c>
        return HAL_TIMEOUT;
 8002790:	2003      	movs	r0, #3
 8002792:	e0f5      	b.n	8002980 <HAL_RCC_OscConfig+0x620>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002794:	68a3      	ldr	r3, [r4, #8]
 8002796:	2b01      	cmp	r3, #1
 8002798:	d00a      	beq.n	80027b0 <HAL_RCC_OscConfig+0x450>
 800279a:	bb0b      	cbnz	r3, 80027e0 <HAL_RCC_OscConfig+0x480>
 800279c:	4b2e      	ldr	r3, [pc, #184]	; (8002858 <HAL_RCC_OscConfig+0x4f8>)
 800279e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80027a0:	f022 0201 	bic.w	r2, r2, #1
 80027a4:	671a      	str	r2, [r3, #112]	; 0x70
 80027a6:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80027a8:	f022 0204 	bic.w	r2, r2, #4
 80027ac:	671a      	str	r2, [r3, #112]	; 0x70
 80027ae:	e004      	b.n	80027ba <HAL_RCC_OscConfig+0x45a>
 80027b0:	4a29      	ldr	r2, [pc, #164]	; (8002858 <HAL_RCC_OscConfig+0x4f8>)
 80027b2:	6f13      	ldr	r3, [r2, #112]	; 0x70
 80027b4:	f043 0301 	orr.w	r3, r3, #1
 80027b8:	6713      	str	r3, [r2, #112]	; 0x70
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80027ba:	68a3      	ldr	r3, [r4, #8]
 80027bc:	b333      	cbz	r3, 800280c <HAL_RCC_OscConfig+0x4ac>
      tickstart = HAL_GetTick();
 80027be:	f7fd ff95 	bl	80006ec <HAL_GetTick>
 80027c2:	4605      	mov	r5, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80027c4:	4b24      	ldr	r3, [pc, #144]	; (8002858 <HAL_RCC_OscConfig+0x4f8>)
 80027c6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80027c8:	f013 0f02 	tst.w	r3, #2
 80027cc:	d1ac      	bne.n	8002728 <HAL_RCC_OscConfig+0x3c8>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80027ce:	f7fd ff8d 	bl	80006ec <HAL_GetTick>
 80027d2:	1b40      	subs	r0, r0, r5
 80027d4:	f241 3388 	movw	r3, #5000	; 0x1388
 80027d8:	4298      	cmp	r0, r3
 80027da:	d9f3      	bls.n	80027c4 <HAL_RCC_OscConfig+0x464>
          return HAL_TIMEOUT;
 80027dc:	2003      	movs	r0, #3
 80027de:	e0cf      	b.n	8002980 <HAL_RCC_OscConfig+0x620>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80027e0:	2b05      	cmp	r3, #5
 80027e2:	d009      	beq.n	80027f8 <HAL_RCC_OscConfig+0x498>
 80027e4:	4b1c      	ldr	r3, [pc, #112]	; (8002858 <HAL_RCC_OscConfig+0x4f8>)
 80027e6:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80027e8:	f022 0201 	bic.w	r2, r2, #1
 80027ec:	671a      	str	r2, [r3, #112]	; 0x70
 80027ee:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80027f0:	f022 0204 	bic.w	r2, r2, #4
 80027f4:	671a      	str	r2, [r3, #112]	; 0x70
 80027f6:	e7e0      	b.n	80027ba <HAL_RCC_OscConfig+0x45a>
 80027f8:	4b17      	ldr	r3, [pc, #92]	; (8002858 <HAL_RCC_OscConfig+0x4f8>)
 80027fa:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80027fc:	f042 0204 	orr.w	r2, r2, #4
 8002800:	671a      	str	r2, [r3, #112]	; 0x70
 8002802:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002804:	f042 0201 	orr.w	r2, r2, #1
 8002808:	671a      	str	r2, [r3, #112]	; 0x70
 800280a:	e7d6      	b.n	80027ba <HAL_RCC_OscConfig+0x45a>
      tickstart = HAL_GetTick();
 800280c:	f7fd ff6e 	bl	80006ec <HAL_GetTick>
 8002810:	4605      	mov	r5, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002812:	4b11      	ldr	r3, [pc, #68]	; (8002858 <HAL_RCC_OscConfig+0x4f8>)
 8002814:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002816:	f013 0f02 	tst.w	r3, #2
 800281a:	d085      	beq.n	8002728 <HAL_RCC_OscConfig+0x3c8>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800281c:	f7fd ff66 	bl	80006ec <HAL_GetTick>
 8002820:	1b40      	subs	r0, r0, r5
 8002822:	f241 3388 	movw	r3, #5000	; 0x1388
 8002826:	4298      	cmp	r0, r3
 8002828:	d9f3      	bls.n	8002812 <HAL_RCC_OscConfig+0x4b2>
          return HAL_TIMEOUT;
 800282a:	2003      	movs	r0, #3
 800282c:	e0a8      	b.n	8002980 <HAL_RCC_OscConfig+0x620>
        __HAL_RCC_PLL_DISABLE();
 800282e:	4a0a      	ldr	r2, [pc, #40]	; (8002858 <HAL_RCC_OscConfig+0x4f8>)
 8002830:	6813      	ldr	r3, [r2, #0]
 8002832:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002836:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8002838:	f7fd ff58 	bl	80006ec <HAL_GetTick>
 800283c:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800283e:	4b06      	ldr	r3, [pc, #24]	; (8002858 <HAL_RCC_OscConfig+0x4f8>)
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8002846:	d00b      	beq.n	8002860 <HAL_RCC_OscConfig+0x500>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002848:	f7fd ff50 	bl	80006ec <HAL_GetTick>
 800284c:	1b40      	subs	r0, r0, r5
 800284e:	2802      	cmp	r0, #2
 8002850:	d9f5      	bls.n	800283e <HAL_RCC_OscConfig+0x4de>
            return HAL_TIMEOUT;
 8002852:	2003      	movs	r0, #3
 8002854:	e094      	b.n	8002980 <HAL_RCC_OscConfig+0x620>
 8002856:	bf00      	nop
 8002858:	58024400 	.word	0x58024400
 800285c:	58024800 	.word	0x58024800
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002860:	4b4f      	ldr	r3, [pc, #316]	; (80029a0 <HAL_RCC_OscConfig+0x640>)
 8002862:	6a99      	ldr	r1, [r3, #40]	; 0x28
 8002864:	4a4f      	ldr	r2, [pc, #316]	; (80029a4 <HAL_RCC_OscConfig+0x644>)
 8002866:	400a      	ands	r2, r1
 8002868:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 800286a:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 800286c:	ea41 1100 	orr.w	r1, r1, r0, lsl #4
 8002870:	430a      	orrs	r2, r1
 8002872:	629a      	str	r2, [r3, #40]	; 0x28
 8002874:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8002876:	3a01      	subs	r2, #1
 8002878:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800287c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800287e:	3901      	subs	r1, #1
 8002880:	0249      	lsls	r1, r1, #9
 8002882:	b289      	uxth	r1, r1
 8002884:	430a      	orrs	r2, r1
 8002886:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8002888:	3901      	subs	r1, #1
 800288a:	0409      	lsls	r1, r1, #16
 800288c:	f401 01fe 	and.w	r1, r1, #8323072	; 0x7f0000
 8002890:	430a      	orrs	r2, r1
 8002892:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8002894:	3901      	subs	r1, #1
 8002896:	0609      	lsls	r1, r1, #24
 8002898:	f001 41fe 	and.w	r1, r1, #2130706432	; 0x7f000000
 800289c:	430a      	orrs	r2, r1
 800289e:	631a      	str	r2, [r3, #48]	; 0x30
         __HAL_RCC_PLLFRACN_DISABLE();
 80028a0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80028a2:	f022 0201 	bic.w	r2, r2, #1
 80028a6:	62da      	str	r2, [r3, #44]	; 0x2c
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80028a8:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80028aa:	4a3f      	ldr	r2, [pc, #252]	; (80029a8 <HAL_RCC_OscConfig+0x648>)
 80028ac:	400a      	ands	r2, r1
 80028ae:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 80028b0:	ea42 02c1 	orr.w	r2, r2, r1, lsl #3
 80028b4:	635a      	str	r2, [r3, #52]	; 0x34
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 80028b6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80028b8:	f022 020c 	bic.w	r2, r2, #12
 80028bc:	6c21      	ldr	r1, [r4, #64]	; 0x40
 80028be:	430a      	orrs	r2, r1
 80028c0:	62da      	str	r2, [r3, #44]	; 0x2c
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 80028c2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80028c4:	f022 0202 	bic.w	r2, r2, #2
 80028c8:	6c61      	ldr	r1, [r4, #68]	; 0x44
 80028ca:	430a      	orrs	r2, r1
 80028cc:	62da      	str	r2, [r3, #44]	; 0x2c
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 80028ce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80028d0:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 80028d4:	62da      	str	r2, [r3, #44]	; 0x2c
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80028d6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80028d8:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 80028dc:	62da      	str	r2, [r3, #44]	; 0x2c
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 80028de:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80028e0:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 80028e4:	62da      	str	r2, [r3, #44]	; 0x2c
         __HAL_RCC_PLLFRACN_ENABLE();
 80028e6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80028e8:	f042 0201 	orr.w	r2, r2, #1
 80028ec:	62da      	str	r2, [r3, #44]	; 0x2c
        __HAL_RCC_PLL_ENABLE();
 80028ee:	681a      	ldr	r2, [r3, #0]
 80028f0:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 80028f4:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80028f6:	f7fd fef9 	bl	80006ec <HAL_GetTick>
 80028fa:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80028fc:	4b28      	ldr	r3, [pc, #160]	; (80029a0 <HAL_RCC_OscConfig+0x640>)
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8002904:	d106      	bne.n	8002914 <HAL_RCC_OscConfig+0x5b4>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002906:	f7fd fef1 	bl	80006ec <HAL_GetTick>
 800290a:	1b00      	subs	r0, r0, r4
 800290c:	2802      	cmp	r0, #2
 800290e:	d9f5      	bls.n	80028fc <HAL_RCC_OscConfig+0x59c>
            return HAL_TIMEOUT;
 8002910:	2003      	movs	r0, #3
 8002912:	e035      	b.n	8002980 <HAL_RCC_OscConfig+0x620>
      {
        return HAL_ERROR;
      }
    }
  }
  return HAL_OK;
 8002914:	2000      	movs	r0, #0
 8002916:	e033      	b.n	8002980 <HAL_RCC_OscConfig+0x620>
 8002918:	2000      	movs	r0, #0
 800291a:	e031      	b.n	8002980 <HAL_RCC_OscConfig+0x620>
      temp1_pllckcfg = RCC->PLLCKSELR;
 800291c:	4a20      	ldr	r2, [pc, #128]	; (80029a0 <HAL_RCC_OscConfig+0x640>)
 800291e:	6a91      	ldr	r1, [r2, #40]	; 0x28
      temp2_pllckcfg = RCC->PLL1DIVR;
 8002920:	6b10      	ldr	r0, [r2, #48]	; 0x30
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002922:	2b01      	cmp	r3, #1
 8002924:	d02d      	beq.n	8002982 <HAL_RCC_OscConfig+0x622>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002926:	f001 0303 	and.w	r3, r1, #3
 800292a:	6aa2      	ldr	r2, [r4, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800292c:	4293      	cmp	r3, r2
 800292e:	d12a      	bne.n	8002986 <HAL_RCC_OscConfig+0x626>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8002930:	f3c1 1105 	ubfx	r1, r1, #4, #6
 8002934:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002936:	4299      	cmp	r1, r3
 8002938:	d127      	bne.n	800298a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800293a:	f3c0 0208 	ubfx	r2, r0, #0, #9
 800293e:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8002940:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8002942:	429a      	cmp	r2, r3
 8002944:	d123      	bne.n	800298e <HAL_RCC_OscConfig+0x62e>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8002946:	f3c0 2246 	ubfx	r2, r0, #9, #7
 800294a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800294c:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800294e:	429a      	cmp	r2, r3
 8002950:	d11f      	bne.n	8002992 <HAL_RCC_OscConfig+0x632>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8002952:	f3c0 4206 	ubfx	r2, r0, #16, #7
 8002956:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8002958:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800295a:	429a      	cmp	r2, r3
 800295c:	d11b      	bne.n	8002996 <HAL_RCC_OscConfig+0x636>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 800295e:	f3c0 6006 	ubfx	r0, r0, #24, #7
 8002962:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8002964:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8002966:	4298      	cmp	r0, r3
 8002968:	d117      	bne.n	800299a <HAL_RCC_OscConfig+0x63a>
  return HAL_OK;
 800296a:	2000      	movs	r0, #0
 800296c:	e008      	b.n	8002980 <HAL_RCC_OscConfig+0x620>
    return HAL_ERROR;
 800296e:	2001      	movs	r0, #1
}
 8002970:	4770      	bx	lr
        return HAL_ERROR;
 8002972:	2001      	movs	r0, #1
 8002974:	e004      	b.n	8002980 <HAL_RCC_OscConfig+0x620>
        return HAL_ERROR;
 8002976:	2001      	movs	r0, #1
 8002978:	e002      	b.n	8002980 <HAL_RCC_OscConfig+0x620>
        return HAL_ERROR;
 800297a:	2001      	movs	r0, #1
 800297c:	e000      	b.n	8002980 <HAL_RCC_OscConfig+0x620>
  return HAL_OK;
 800297e:	2000      	movs	r0, #0
}
 8002980:	bd38      	pop	{r3, r4, r5, pc}
        return HAL_ERROR;
 8002982:	2001      	movs	r0, #1
 8002984:	e7fc      	b.n	8002980 <HAL_RCC_OscConfig+0x620>
 8002986:	2001      	movs	r0, #1
 8002988:	e7fa      	b.n	8002980 <HAL_RCC_OscConfig+0x620>
 800298a:	2001      	movs	r0, #1
 800298c:	e7f8      	b.n	8002980 <HAL_RCC_OscConfig+0x620>
 800298e:	2001      	movs	r0, #1
 8002990:	e7f6      	b.n	8002980 <HAL_RCC_OscConfig+0x620>
 8002992:	2001      	movs	r0, #1
 8002994:	e7f4      	b.n	8002980 <HAL_RCC_OscConfig+0x620>
 8002996:	2001      	movs	r0, #1
 8002998:	e7f2      	b.n	8002980 <HAL_RCC_OscConfig+0x620>
 800299a:	2001      	movs	r0, #1
 800299c:	e7f0      	b.n	8002980 <HAL_RCC_OscConfig+0x620>
 800299e:	bf00      	nop
 80029a0:	58024400 	.word	0x58024400
 80029a4:	fffffc0c 	.word	0xfffffc0c
 80029a8:	ffff0007 	.word	0xffff0007

080029ac <HAL_RCC_GetSysClockFreq>:
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 80029ac:	4b74      	ldr	r3, [pc, #464]	; (8002b80 <HAL_RCC_GetSysClockFreq+0x1d4>)
 80029ae:	691b      	ldr	r3, [r3, #16]
 80029b0:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80029b4:	2b10      	cmp	r3, #16
 80029b6:	f000 80df 	beq.w	8002b78 <HAL_RCC_GetSysClockFreq+0x1cc>
 80029ba:	2b18      	cmp	r3, #24
 80029bc:	d010      	beq.n	80029e0 <HAL_RCC_GetSysClockFreq+0x34>
 80029be:	b10b      	cbz	r3, 80029c4 <HAL_RCC_GetSysClockFreq+0x18>
 80029c0:	4870      	ldr	r0, [pc, #448]	; (8002b84 <HAL_RCC_GetSysClockFreq+0x1d8>)
 80029c2:	4770      	bx	lr
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80029c4:	4b6e      	ldr	r3, [pc, #440]	; (8002b80 <HAL_RCC_GetSysClockFreq+0x1d4>)
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	f013 0f20 	tst.w	r3, #32
 80029cc:	f000 80d6 	beq.w	8002b7c <HAL_RCC_GetSysClockFreq+0x1d0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80029d0:	4b6b      	ldr	r3, [pc, #428]	; (8002b80 <HAL_RCC_GetSysClockFreq+0x1d4>)
 80029d2:	6818      	ldr	r0, [r3, #0]
 80029d4:	f3c0 00c1 	ubfx	r0, r0, #3, #2
 80029d8:	4b6b      	ldr	r3, [pc, #428]	; (8002b88 <HAL_RCC_GetSysClockFreq+0x1dc>)
 80029da:	fa23 f000 	lsr.w	r0, r3, r0
 80029de:	4770      	bx	lr
{
 80029e0:	b410      	push	{r4}
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80029e2:	4a67      	ldr	r2, [pc, #412]	; (8002b80 <HAL_RCC_GetSysClockFreq+0x1d4>)
 80029e4:	6a91      	ldr	r1, [r2, #40]	; 0x28
 80029e6:	f001 0103 	and.w	r1, r1, #3
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 80029ea:	6a94      	ldr	r4, [r2, #40]	; 0x28
 80029ec:	f3c4 1005 	ubfx	r0, r4, #4, #6
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 80029f0:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 80029f2:	f003 0301 	and.w	r3, r3, #1
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 80029f6:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80029f8:	f3c2 02cc 	ubfx	r2, r2, #3, #13
 80029fc:	fb03 f302 	mul.w	r3, r3, r2
 8002a00:	ee07 3a90 	vmov	s15, r3
 8002a04:	eef8 7a67 	vcvt.f32.u32	s15, s15

    if (pllm != 0U)
 8002a08:	f414 7f7c 	tst.w	r4, #1008	; 0x3f0
 8002a0c:	f000 8094 	beq.w	8002b38 <HAL_RCC_GetSysClockFreq+0x18c>
    {
      switch (pllsource)
 8002a10:	2901      	cmp	r1, #1
 8002a12:	d066      	beq.n	8002ae2 <HAL_RCC_GetSysClockFreq+0x136>
 8002a14:	2902      	cmp	r1, #2
 8002a16:	f000 8092 	beq.w	8002b3e <HAL_RCC_GetSysClockFreq+0x192>
 8002a1a:	b1e1      	cbz	r1, 8002a56 <HAL_RCC_GetSysClockFreq+0xaa>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        break;

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8002a1c:	ee07 0a10 	vmov	s14, r0
 8002a20:	eef8 6a47 	vcvt.f32.u32	s13, s14
 8002a24:	ed9f 6a59 	vldr	s12, [pc, #356]	; 8002b8c <HAL_RCC_GetSysClockFreq+0x1e0>
 8002a28:	ee86 7a26 	vdiv.f32	s14, s12, s13
 8002a2c:	4b54      	ldr	r3, [pc, #336]	; (8002b80 <HAL_RCC_GetSysClockFreq+0x1d4>)
 8002a2e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a30:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002a34:	ee06 3a90 	vmov	s13, r3
 8002a38:	eef8 6a66 	vcvt.f32.u32	s13, s13
 8002a3c:	ed9f 6a54 	vldr	s12, [pc, #336]	; 8002b90 <HAL_RCC_GetSysClockFreq+0x1e4>
 8002a40:	ee67 7a86 	vmul.f32	s15, s15, s12
 8002a44:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002a48:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002a4c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002a50:	ee27 7a27 	vmul.f32	s14, s14, s15
        break;
 8002a54:	e061      	b.n	8002b1a <HAL_RCC_GetSysClockFreq+0x16e>
       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002a56:	4b4a      	ldr	r3, [pc, #296]	; (8002b80 <HAL_RCC_GetSysClockFreq+0x1d4>)
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	f013 0f20 	tst.w	r3, #32
 8002a5e:	d023      	beq.n	8002aa8 <HAL_RCC_GetSysClockFreq+0xfc>
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8002a60:	4947      	ldr	r1, [pc, #284]	; (8002b80 <HAL_RCC_GetSysClockFreq+0x1d4>)
 8002a62:	680a      	ldr	r2, [r1, #0]
 8002a64:	f3c2 02c1 	ubfx	r2, r2, #3, #2
 8002a68:	4b47      	ldr	r3, [pc, #284]	; (8002b88 <HAL_RCC_GetSysClockFreq+0x1dc>)
 8002a6a:	40d3      	lsrs	r3, r2
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8002a6c:	ee07 3a10 	vmov	s14, r3
 8002a70:	eef8 6a47 	vcvt.f32.u32	s13, s14
 8002a74:	ee07 0a10 	vmov	s14, r0
 8002a78:	eeb8 6a47 	vcvt.f32.u32	s12, s14
 8002a7c:	ee86 7a86 	vdiv.f32	s14, s13, s12
 8002a80:	6b0b      	ldr	r3, [r1, #48]	; 0x30
 8002a82:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002a86:	ee06 3a90 	vmov	s13, r3
 8002a8a:	eef8 6a66 	vcvt.f32.u32	s13, s13
 8002a8e:	ed9f 6a40 	vldr	s12, [pc, #256]	; 8002b90 <HAL_RCC_GetSysClockFreq+0x1e4>
 8002a92:	ee67 7a86 	vmul.f32	s15, s15, s12
 8002a96:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002a9a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002a9e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002aa2:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002aa6:	e038      	b.n	8002b1a <HAL_RCC_GetSysClockFreq+0x16e>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8002aa8:	ee07 0a10 	vmov	s14, r0
 8002aac:	eef8 6a47 	vcvt.f32.u32	s13, s14
 8002ab0:	ed9f 6a38 	vldr	s12, [pc, #224]	; 8002b94 <HAL_RCC_GetSysClockFreq+0x1e8>
 8002ab4:	ee86 7a26 	vdiv.f32	s14, s12, s13
 8002ab8:	4b31      	ldr	r3, [pc, #196]	; (8002b80 <HAL_RCC_GetSysClockFreq+0x1d4>)
 8002aba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002abc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002ac0:	ee06 3a90 	vmov	s13, r3
 8002ac4:	eef8 6a66 	vcvt.f32.u32	s13, s13
 8002ac8:	ed9f 6a31 	vldr	s12, [pc, #196]	; 8002b90 <HAL_RCC_GetSysClockFreq+0x1e4>
 8002acc:	ee67 7a86 	vmul.f32	s15, s15, s12
 8002ad0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002ad4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002ad8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002adc:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002ae0:	e01b      	b.n	8002b1a <HAL_RCC_GetSysClockFreq+0x16e>
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8002ae2:	ee07 0a10 	vmov	s14, r0
 8002ae6:	eef8 6a47 	vcvt.f32.u32	s13, s14
 8002aea:	ed9f 6a28 	vldr	s12, [pc, #160]	; 8002b8c <HAL_RCC_GetSysClockFreq+0x1e0>
 8002aee:	ee86 7a26 	vdiv.f32	s14, s12, s13
 8002af2:	4b23      	ldr	r3, [pc, #140]	; (8002b80 <HAL_RCC_GetSysClockFreq+0x1d4>)
 8002af4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002af6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002afa:	ee06 3a90 	vmov	s13, r3
 8002afe:	eef8 6a66 	vcvt.f32.u32	s13, s13
 8002b02:	ed9f 6a23 	vldr	s12, [pc, #140]	; 8002b90 <HAL_RCC_GetSysClockFreq+0x1e4>
 8002b06:	ee67 7a86 	vmul.f32	s15, s15, s12
 8002b0a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002b0e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002b12:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002b16:	ee27 7a27 	vmul.f32	s14, s14, s15
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 8002b1a:	4b19      	ldr	r3, [pc, #100]	; (8002b80 <HAL_RCC_GetSysClockFreq+0x1d4>)
 8002b1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b1e:	f3c3 2346 	ubfx	r3, r3, #9, #7
 8002b22:	3301      	adds	r3, #1
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 8002b24:	ee07 3a90 	vmov	s15, r3
 8002b28:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002b2c:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8002b30:	eefc 7ae6 	vcvt.u32.f32	s15, s13
 8002b34:	ee17 0a90 	vmov	r0, s15
    sysclockfreq = CSI_VALUE;
    break;
  }

  return sysclockfreq;
}
 8002b38:	f85d 4b04 	ldr.w	r4, [sp], #4
 8002b3c:	4770      	bx	lr
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8002b3e:	ee07 0a10 	vmov	s14, r0
 8002b42:	eef8 6a47 	vcvt.f32.u32	s13, s14
 8002b46:	ed9f 6a14 	vldr	s12, [pc, #80]	; 8002b98 <HAL_RCC_GetSysClockFreq+0x1ec>
 8002b4a:	ee86 7a26 	vdiv.f32	s14, s12, s13
 8002b4e:	4b0c      	ldr	r3, [pc, #48]	; (8002b80 <HAL_RCC_GetSysClockFreq+0x1d4>)
 8002b50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b52:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002b56:	ee06 3a90 	vmov	s13, r3
 8002b5a:	eef8 6a66 	vcvt.f32.u32	s13, s13
 8002b5e:	ed9f 6a0c 	vldr	s12, [pc, #48]	; 8002b90 <HAL_RCC_GetSysClockFreq+0x1e4>
 8002b62:	ee67 7a86 	vmul.f32	s15, s15, s12
 8002b66:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002b6a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002b6e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002b72:	ee27 7a27 	vmul.f32	s14, s14, s15
        break;
 8002b76:	e7d0      	b.n	8002b1a <HAL_RCC_GetSysClockFreq+0x16e>
    sysclockfreq = HSE_VALUE;
 8002b78:	4808      	ldr	r0, [pc, #32]	; (8002b9c <HAL_RCC_GetSysClockFreq+0x1f0>)
 8002b7a:	4770      	bx	lr
        sysclockfreq = (uint32_t) HSI_VALUE;
 8002b7c:	4802      	ldr	r0, [pc, #8]	; (8002b88 <HAL_RCC_GetSysClockFreq+0x1dc>)
}
 8002b7e:	4770      	bx	lr
 8002b80:	58024400 	.word	0x58024400
 8002b84:	003d0900 	.word	0x003d0900
 8002b88:	03d09000 	.word	0x03d09000
 8002b8c:	4a742400 	.word	0x4a742400
 8002b90:	39000000 	.word	0x39000000
 8002b94:	4c742400 	.word	0x4c742400
 8002b98:	4af42400 	.word	0x4af42400
 8002b9c:	007a1200 	.word	0x007a1200

08002ba0 <HAL_RCC_ClockConfig>:
  if(RCC_ClkInitStruct == NULL)
 8002ba0:	2800      	cmp	r0, #0
 8002ba2:	f000 8132 	beq.w	8002e0a <HAL_RCC_ClockConfig+0x26a>
{
 8002ba6:	b570      	push	{r4, r5, r6, lr}
 8002ba8:	460d      	mov	r5, r1
 8002baa:	4604      	mov	r4, r0
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002bac:	4b9b      	ldr	r3, [pc, #620]	; (8002e1c <HAL_RCC_ClockConfig+0x27c>)
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	f003 030f 	and.w	r3, r3, #15
 8002bb4:	428b      	cmp	r3, r1
 8002bb6:	d20b      	bcs.n	8002bd0 <HAL_RCC_ClockConfig+0x30>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002bb8:	4a98      	ldr	r2, [pc, #608]	; (8002e1c <HAL_RCC_ClockConfig+0x27c>)
 8002bba:	6813      	ldr	r3, [r2, #0]
 8002bbc:	f023 030f 	bic.w	r3, r3, #15
 8002bc0:	430b      	orrs	r3, r1
 8002bc2:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002bc4:	6813      	ldr	r3, [r2, #0]
 8002bc6:	f003 030f 	and.w	r3, r3, #15
 8002bca:	428b      	cmp	r3, r1
 8002bcc:	f040 811f 	bne.w	8002e0e <HAL_RCC_ClockConfig+0x26e>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8002bd0:	6823      	ldr	r3, [r4, #0]
 8002bd2:	f013 0f04 	tst.w	r3, #4
 8002bd6:	d00c      	beq.n	8002bf2 <HAL_RCC_ClockConfig+0x52>
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8002bd8:	6922      	ldr	r2, [r4, #16]
 8002bda:	4b91      	ldr	r3, [pc, #580]	; (8002e20 <HAL_RCC_ClockConfig+0x280>)
 8002bdc:	699b      	ldr	r3, [r3, #24]
 8002bde:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002be2:	429a      	cmp	r2, r3
 8002be4:	d905      	bls.n	8002bf2 <HAL_RCC_ClockConfig+0x52>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8002be6:	498e      	ldr	r1, [pc, #568]	; (8002e20 <HAL_RCC_ClockConfig+0x280>)
 8002be8:	698b      	ldr	r3, [r1, #24]
 8002bea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002bee:	431a      	orrs	r2, r3
 8002bf0:	618a      	str	r2, [r1, #24]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002bf2:	6823      	ldr	r3, [r4, #0]
 8002bf4:	f013 0f08 	tst.w	r3, #8
 8002bf8:	d00c      	beq.n	8002c14 <HAL_RCC_ClockConfig+0x74>
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8002bfa:	6962      	ldr	r2, [r4, #20]
 8002bfc:	4b88      	ldr	r3, [pc, #544]	; (8002e20 <HAL_RCC_ClockConfig+0x280>)
 8002bfe:	69db      	ldr	r3, [r3, #28]
 8002c00:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002c04:	429a      	cmp	r2, r3
 8002c06:	d905      	bls.n	8002c14 <HAL_RCC_ClockConfig+0x74>
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8002c08:	4985      	ldr	r1, [pc, #532]	; (8002e20 <HAL_RCC_ClockConfig+0x280>)
 8002c0a:	69cb      	ldr	r3, [r1, #28]
 8002c0c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002c10:	431a      	orrs	r2, r3
 8002c12:	61ca      	str	r2, [r1, #28]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002c14:	6823      	ldr	r3, [r4, #0]
 8002c16:	f013 0f10 	tst.w	r3, #16
 8002c1a:	d00c      	beq.n	8002c36 <HAL_RCC_ClockConfig+0x96>
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8002c1c:	69a2      	ldr	r2, [r4, #24]
 8002c1e:	4b80      	ldr	r3, [pc, #512]	; (8002e20 <HAL_RCC_ClockConfig+0x280>)
 8002c20:	69db      	ldr	r3, [r3, #28]
 8002c22:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8002c26:	429a      	cmp	r2, r3
 8002c28:	d905      	bls.n	8002c36 <HAL_RCC_ClockConfig+0x96>
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8002c2a:	497d      	ldr	r1, [pc, #500]	; (8002e20 <HAL_RCC_ClockConfig+0x280>)
 8002c2c:	69cb      	ldr	r3, [r1, #28]
 8002c2e:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8002c32:	431a      	orrs	r2, r3
 8002c34:	61ca      	str	r2, [r1, #28]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8002c36:	6823      	ldr	r3, [r4, #0]
 8002c38:	f013 0f20 	tst.w	r3, #32
 8002c3c:	d00c      	beq.n	8002c58 <HAL_RCC_ClockConfig+0xb8>
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8002c3e:	69e2      	ldr	r2, [r4, #28]
 8002c40:	4b77      	ldr	r3, [pc, #476]	; (8002e20 <HAL_RCC_ClockConfig+0x280>)
 8002c42:	6a1b      	ldr	r3, [r3, #32]
 8002c44:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002c48:	429a      	cmp	r2, r3
 8002c4a:	d905      	bls.n	8002c58 <HAL_RCC_ClockConfig+0xb8>
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8002c4c:	4974      	ldr	r1, [pc, #464]	; (8002e20 <HAL_RCC_ClockConfig+0x280>)
 8002c4e:	6a0b      	ldr	r3, [r1, #32]
 8002c50:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002c54:	431a      	orrs	r2, r3
 8002c56:	620a      	str	r2, [r1, #32]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002c58:	6823      	ldr	r3, [r4, #0]
 8002c5a:	f013 0f02 	tst.w	r3, #2
 8002c5e:	d00c      	beq.n	8002c7a <HAL_RCC_ClockConfig+0xda>
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8002c60:	68e2      	ldr	r2, [r4, #12]
 8002c62:	4b6f      	ldr	r3, [pc, #444]	; (8002e20 <HAL_RCC_ClockConfig+0x280>)
 8002c64:	699b      	ldr	r3, [r3, #24]
 8002c66:	f003 030f 	and.w	r3, r3, #15
 8002c6a:	429a      	cmp	r2, r3
 8002c6c:	d905      	bls.n	8002c7a <HAL_RCC_ClockConfig+0xda>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002c6e:	496c      	ldr	r1, [pc, #432]	; (8002e20 <HAL_RCC_ClockConfig+0x280>)
 8002c70:	698b      	ldr	r3, [r1, #24]
 8002c72:	f023 030f 	bic.w	r3, r3, #15
 8002c76:	431a      	orrs	r2, r3
 8002c78:	618a      	str	r2, [r1, #24]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002c7a:	6823      	ldr	r3, [r4, #0]
 8002c7c:	f013 0f01 	tst.w	r3, #1
 8002c80:	d041      	beq.n	8002d06 <HAL_RCC_ClockConfig+0x166>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8002c82:	4a67      	ldr	r2, [pc, #412]	; (8002e20 <HAL_RCC_ClockConfig+0x280>)
 8002c84:	6993      	ldr	r3, [r2, #24]
 8002c86:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002c8a:	68a1      	ldr	r1, [r4, #8]
 8002c8c:	430b      	orrs	r3, r1
 8002c8e:	6193      	str	r3, [r2, #24]
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002c90:	6863      	ldr	r3, [r4, #4]
 8002c92:	2b02      	cmp	r3, #2
 8002c94:	d00a      	beq.n	8002cac <HAL_RCC_ClockConfig+0x10c>
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002c96:	2b03      	cmp	r3, #3
 8002c98:	d027      	beq.n	8002cea <HAL_RCC_ClockConfig+0x14a>
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8002c9a:	2b01      	cmp	r3, #1
 8002c9c:	d02c      	beq.n	8002cf8 <HAL_RCC_ClockConfig+0x158>
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002c9e:	4a60      	ldr	r2, [pc, #384]	; (8002e20 <HAL_RCC_ClockConfig+0x280>)
 8002ca0:	6812      	ldr	r2, [r2, #0]
 8002ca2:	f012 0f04 	tst.w	r2, #4
 8002ca6:	d106      	bne.n	8002cb6 <HAL_RCC_ClockConfig+0x116>
          return HAL_ERROR;
 8002ca8:	2001      	movs	r0, #1
 8002caa:	e0ad      	b.n	8002e08 <HAL_RCC_ClockConfig+0x268>
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002cac:	6812      	ldr	r2, [r2, #0]
 8002cae:	f412 3f00 	tst.w	r2, #131072	; 0x20000
 8002cb2:	f000 80ae 	beq.w	8002e12 <HAL_RCC_ClockConfig+0x272>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002cb6:	495a      	ldr	r1, [pc, #360]	; (8002e20 <HAL_RCC_ClockConfig+0x280>)
 8002cb8:	690a      	ldr	r2, [r1, #16]
 8002cba:	f022 0207 	bic.w	r2, r2, #7
 8002cbe:	4313      	orrs	r3, r2
 8002cc0:	610b      	str	r3, [r1, #16]
      tickstart = HAL_GetTick();
 8002cc2:	f7fd fd13 	bl	80006ec <HAL_GetTick>
 8002cc6:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002cc8:	4b55      	ldr	r3, [pc, #340]	; (8002e20 <HAL_RCC_ClockConfig+0x280>)
 8002cca:	691b      	ldr	r3, [r3, #16]
 8002ccc:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002cd0:	6862      	ldr	r2, [r4, #4]
 8002cd2:	ebb3 0fc2 	cmp.w	r3, r2, lsl #3
 8002cd6:	d016      	beq.n	8002d06 <HAL_RCC_ClockConfig+0x166>
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002cd8:	f7fd fd08 	bl	80006ec <HAL_GetTick>
 8002cdc:	1b80      	subs	r0, r0, r6
 8002cde:	f241 3388 	movw	r3, #5000	; 0x1388
 8002ce2:	4298      	cmp	r0, r3
 8002ce4:	d9f0      	bls.n	8002cc8 <HAL_RCC_ClockConfig+0x128>
            return HAL_TIMEOUT;
 8002ce6:	2003      	movs	r0, #3
 8002ce8:	e08e      	b.n	8002e08 <HAL_RCC_ClockConfig+0x268>
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002cea:	4a4d      	ldr	r2, [pc, #308]	; (8002e20 <HAL_RCC_ClockConfig+0x280>)
 8002cec:	6812      	ldr	r2, [r2, #0]
 8002cee:	f012 7f00 	tst.w	r2, #33554432	; 0x2000000
 8002cf2:	d1e0      	bne.n	8002cb6 <HAL_RCC_ClockConfig+0x116>
          return HAL_ERROR;
 8002cf4:	2001      	movs	r0, #1
 8002cf6:	e087      	b.n	8002e08 <HAL_RCC_ClockConfig+0x268>
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002cf8:	4a49      	ldr	r2, [pc, #292]	; (8002e20 <HAL_RCC_ClockConfig+0x280>)
 8002cfa:	6812      	ldr	r2, [r2, #0]
 8002cfc:	f412 7f80 	tst.w	r2, #256	; 0x100
 8002d00:	d1d9      	bne.n	8002cb6 <HAL_RCC_ClockConfig+0x116>
          return HAL_ERROR;
 8002d02:	2001      	movs	r0, #1
 8002d04:	e080      	b.n	8002e08 <HAL_RCC_ClockConfig+0x268>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002d06:	6823      	ldr	r3, [r4, #0]
 8002d08:	f013 0f02 	tst.w	r3, #2
 8002d0c:	d00c      	beq.n	8002d28 <HAL_RCC_ClockConfig+0x188>
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8002d0e:	68e2      	ldr	r2, [r4, #12]
 8002d10:	4b43      	ldr	r3, [pc, #268]	; (8002e20 <HAL_RCC_ClockConfig+0x280>)
 8002d12:	699b      	ldr	r3, [r3, #24]
 8002d14:	f003 030f 	and.w	r3, r3, #15
 8002d18:	429a      	cmp	r2, r3
 8002d1a:	d205      	bcs.n	8002d28 <HAL_RCC_ClockConfig+0x188>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002d1c:	4940      	ldr	r1, [pc, #256]	; (8002e20 <HAL_RCC_ClockConfig+0x280>)
 8002d1e:	698b      	ldr	r3, [r1, #24]
 8002d20:	f023 030f 	bic.w	r3, r3, #15
 8002d24:	431a      	orrs	r2, r3
 8002d26:	618a      	str	r2, [r1, #24]
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002d28:	4b3c      	ldr	r3, [pc, #240]	; (8002e1c <HAL_RCC_ClockConfig+0x27c>)
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	f003 030f 	and.w	r3, r3, #15
 8002d30:	42ab      	cmp	r3, r5
 8002d32:	d90a      	bls.n	8002d4a <HAL_RCC_ClockConfig+0x1aa>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002d34:	4a39      	ldr	r2, [pc, #228]	; (8002e1c <HAL_RCC_ClockConfig+0x27c>)
 8002d36:	6813      	ldr	r3, [r2, #0]
 8002d38:	f023 030f 	bic.w	r3, r3, #15
 8002d3c:	432b      	orrs	r3, r5
 8002d3e:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002d40:	6813      	ldr	r3, [r2, #0]
 8002d42:	f003 030f 	and.w	r3, r3, #15
 8002d46:	42ab      	cmp	r3, r5
 8002d48:	d165      	bne.n	8002e16 <HAL_RCC_ClockConfig+0x276>
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8002d4a:	6823      	ldr	r3, [r4, #0]
 8002d4c:	f013 0f04 	tst.w	r3, #4
 8002d50:	d00c      	beq.n	8002d6c <HAL_RCC_ClockConfig+0x1cc>
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8002d52:	6922      	ldr	r2, [r4, #16]
 8002d54:	4b32      	ldr	r3, [pc, #200]	; (8002e20 <HAL_RCC_ClockConfig+0x280>)
 8002d56:	699b      	ldr	r3, [r3, #24]
 8002d58:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002d5c:	429a      	cmp	r2, r3
 8002d5e:	d205      	bcs.n	8002d6c <HAL_RCC_ClockConfig+0x1cc>
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8002d60:	492f      	ldr	r1, [pc, #188]	; (8002e20 <HAL_RCC_ClockConfig+0x280>)
 8002d62:	698b      	ldr	r3, [r1, #24]
 8002d64:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002d68:	431a      	orrs	r2, r3
 8002d6a:	618a      	str	r2, [r1, #24]
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002d6c:	6823      	ldr	r3, [r4, #0]
 8002d6e:	f013 0f08 	tst.w	r3, #8
 8002d72:	d00c      	beq.n	8002d8e <HAL_RCC_ClockConfig+0x1ee>
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8002d74:	6962      	ldr	r2, [r4, #20]
 8002d76:	4b2a      	ldr	r3, [pc, #168]	; (8002e20 <HAL_RCC_ClockConfig+0x280>)
 8002d78:	69db      	ldr	r3, [r3, #28]
 8002d7a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002d7e:	429a      	cmp	r2, r3
 8002d80:	d205      	bcs.n	8002d8e <HAL_RCC_ClockConfig+0x1ee>
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8002d82:	4927      	ldr	r1, [pc, #156]	; (8002e20 <HAL_RCC_ClockConfig+0x280>)
 8002d84:	69cb      	ldr	r3, [r1, #28]
 8002d86:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002d8a:	431a      	orrs	r2, r3
 8002d8c:	61ca      	str	r2, [r1, #28]
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002d8e:	6823      	ldr	r3, [r4, #0]
 8002d90:	f013 0f10 	tst.w	r3, #16
 8002d94:	d00c      	beq.n	8002db0 <HAL_RCC_ClockConfig+0x210>
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8002d96:	69a2      	ldr	r2, [r4, #24]
 8002d98:	4b21      	ldr	r3, [pc, #132]	; (8002e20 <HAL_RCC_ClockConfig+0x280>)
 8002d9a:	69db      	ldr	r3, [r3, #28]
 8002d9c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8002da0:	429a      	cmp	r2, r3
 8002da2:	d205      	bcs.n	8002db0 <HAL_RCC_ClockConfig+0x210>
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8002da4:	491e      	ldr	r1, [pc, #120]	; (8002e20 <HAL_RCC_ClockConfig+0x280>)
 8002da6:	69cb      	ldr	r3, [r1, #28]
 8002da8:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8002dac:	431a      	orrs	r2, r3
 8002dae:	61ca      	str	r2, [r1, #28]
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8002db0:	6823      	ldr	r3, [r4, #0]
 8002db2:	f013 0f20 	tst.w	r3, #32
 8002db6:	d00c      	beq.n	8002dd2 <HAL_RCC_ClockConfig+0x232>
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8002db8:	69e2      	ldr	r2, [r4, #28]
 8002dba:	4b19      	ldr	r3, [pc, #100]	; (8002e20 <HAL_RCC_ClockConfig+0x280>)
 8002dbc:	6a1b      	ldr	r3, [r3, #32]
 8002dbe:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002dc2:	429a      	cmp	r2, r3
 8002dc4:	d205      	bcs.n	8002dd2 <HAL_RCC_ClockConfig+0x232>
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8002dc6:	4916      	ldr	r1, [pc, #88]	; (8002e20 <HAL_RCC_ClockConfig+0x280>)
 8002dc8:	6a0b      	ldr	r3, [r1, #32]
 8002dca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002dce:	431a      	orrs	r2, r3
 8002dd0:	620a      	str	r2, [r1, #32]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8002dd2:	f7ff fdeb 	bl	80029ac <HAL_RCC_GetSysClockFreq>
 8002dd6:	4912      	ldr	r1, [pc, #72]	; (8002e20 <HAL_RCC_ClockConfig+0x280>)
 8002dd8:	698b      	ldr	r3, [r1, #24]
 8002dda:	f3c3 2303 	ubfx	r3, r3, #8, #4
 8002dde:	4a11      	ldr	r2, [pc, #68]	; (8002e24 <HAL_RCC_ClockConfig+0x284>)
 8002de0:	5cd3      	ldrb	r3, [r2, r3]
 8002de2:	f003 031f 	and.w	r3, r3, #31
 8002de6:	40d8      	lsrs	r0, r3
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8002de8:	698b      	ldr	r3, [r1, #24]
 8002dea:	f003 030f 	and.w	r3, r3, #15
 8002dee:	5cd3      	ldrb	r3, [r2, r3]
 8002df0:	f003 031f 	and.w	r3, r3, #31
 8002df4:	fa20 f303 	lsr.w	r3, r0, r3
 8002df8:	4a0b      	ldr	r2, [pc, #44]	; (8002e28 <HAL_RCC_ClockConfig+0x288>)
 8002dfa:	6013      	str	r3, [r2, #0]
  SystemCoreClock = common_system_clock;
 8002dfc:	4b0b      	ldr	r3, [pc, #44]	; (8002e2c <HAL_RCC_ClockConfig+0x28c>)
 8002dfe:	6018      	str	r0, [r3, #0]
  halstatus = HAL_InitTick (uwTickPrio);
 8002e00:	4b0b      	ldr	r3, [pc, #44]	; (8002e30 <HAL_RCC_ClockConfig+0x290>)
 8002e02:	6818      	ldr	r0, [r3, #0]
 8002e04:	f004 fe42 	bl	8007a8c <HAL_InitTick>
}
 8002e08:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_ERROR;
 8002e0a:	2001      	movs	r0, #1
}
 8002e0c:	4770      	bx	lr
      return HAL_ERROR;
 8002e0e:	2001      	movs	r0, #1
 8002e10:	e7fa      	b.n	8002e08 <HAL_RCC_ClockConfig+0x268>
          return HAL_ERROR;
 8002e12:	2001      	movs	r0, #1
 8002e14:	e7f8      	b.n	8002e08 <HAL_RCC_ClockConfig+0x268>
      return HAL_ERROR;
 8002e16:	2001      	movs	r0, #1
 8002e18:	e7f6      	b.n	8002e08 <HAL_RCC_ClockConfig+0x268>
 8002e1a:	bf00      	nop
 8002e1c:	52002000 	.word	0x52002000
 8002e20:	58024400 	.word	0x58024400
 8002e24:	08009204 	.word	0x08009204
 8002e28:	2000011c 	.word	0x2000011c
 8002e2c:	20000118 	.word	0x20000118
 8002e30:	20000004 	.word	0x20000004

08002e34 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002e34:	b508      	push	{r3, lr}
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8002e36:	f7ff fdb9 	bl	80029ac <HAL_RCC_GetSysClockFreq>
 8002e3a:	4a0b      	ldr	r2, [pc, #44]	; (8002e68 <HAL_RCC_GetHCLKFreq+0x34>)
 8002e3c:	6993      	ldr	r3, [r2, #24]
 8002e3e:	f3c3 2303 	ubfx	r3, r3, #8, #4
 8002e42:	490a      	ldr	r1, [pc, #40]	; (8002e6c <HAL_RCC_GetHCLKFreq+0x38>)
 8002e44:	5ccb      	ldrb	r3, [r1, r3]
 8002e46:	f003 031f 	and.w	r3, r3, #31
 8002e4a:	fa20 f303 	lsr.w	r3, r0, r3
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8002e4e:	6992      	ldr	r2, [r2, #24]
 8002e50:	f002 020f 	and.w	r2, r2, #15
 8002e54:	5c88      	ldrb	r0, [r1, r2]
 8002e56:	f000 001f 	and.w	r0, r0, #31
 8002e5a:	fa23 f000 	lsr.w	r0, r3, r0
 8002e5e:	4a04      	ldr	r2, [pc, #16]	; (8002e70 <HAL_RCC_GetHCLKFreq+0x3c>)
 8002e60:	6010      	str	r0, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8002e62:	4a04      	ldr	r2, [pc, #16]	; (8002e74 <HAL_RCC_GetHCLKFreq+0x40>)
 8002e64:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
}
 8002e66:	bd08      	pop	{r3, pc}
 8002e68:	58024400 	.word	0x58024400
 8002e6c:	08009204 	.word	0x08009204
 8002e70:	2000011c 	.word	0x2000011c
 8002e74:	20000118 	.word	0x20000118

08002e78 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002e78:	b508      	push	{r3, lr}
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8002e7a:	f7ff ffdb 	bl	8002e34 <HAL_RCC_GetHCLKFreq>
 8002e7e:	4b05      	ldr	r3, [pc, #20]	; (8002e94 <HAL_RCC_GetPCLK1Freq+0x1c>)
 8002e80:	69db      	ldr	r3, [r3, #28]
 8002e82:	f3c3 1302 	ubfx	r3, r3, #4, #3
 8002e86:	4a04      	ldr	r2, [pc, #16]	; (8002e98 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002e88:	5cd3      	ldrb	r3, [r2, r3]
 8002e8a:	f003 031f 	and.w	r3, r3, #31
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8002e8e:	40d8      	lsrs	r0, r3
 8002e90:	bd08      	pop	{r3, pc}
 8002e92:	bf00      	nop
 8002e94:	58024400 	.word	0x58024400
 8002e98:	08009204 	.word	0x08009204

08002e9c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002e9c:	b508      	push	{r3, lr}
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8002e9e:	f7ff ffc9 	bl	8002e34 <HAL_RCC_GetHCLKFreq>
 8002ea2:	4b05      	ldr	r3, [pc, #20]	; (8002eb8 <HAL_RCC_GetPCLK2Freq+0x1c>)
 8002ea4:	69db      	ldr	r3, [r3, #28]
 8002ea6:	f3c3 2302 	ubfx	r3, r3, #8, #3
 8002eaa:	4a04      	ldr	r2, [pc, #16]	; (8002ebc <HAL_RCC_GetPCLK2Freq+0x20>)
 8002eac:	5cd3      	ldrb	r3, [r2, r3]
 8002eae:	f003 031f 	and.w	r3, r3, #31
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8002eb2:	40d8      	lsrs	r0, r3
 8002eb4:	bd08      	pop	{r3, pc}
 8002eb6:	bf00      	nop
 8002eb8:	58024400 	.word	0x58024400
 8002ebc:	08009204 	.word	0x08009204

08002ec0 <HAL_RCC_GetClockConfig>:
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 | RCC_CLOCKTYPE_PCLK1 |
 8002ec0:	233f      	movs	r3, #63	; 0x3f
 8002ec2:	6003      	str	r3, [r0, #0]
                                 RCC_CLOCKTYPE_PCLK2 |  RCC_CLOCKTYPE_D3PCLK1  ;

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8002ec4:	4b11      	ldr	r3, [pc, #68]	; (8002f0c <HAL_RCC_GetClockConfig+0x4c>)
 8002ec6:	691a      	ldr	r2, [r3, #16]
 8002ec8:	f002 0207 	and.w	r2, r2, #7
 8002ecc:	6042      	str	r2, [r0, #4]

#if defined(RCC_D1CFGR_D1CPRE)
  /* Get the SYSCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1CPRE);
 8002ece:	699a      	ldr	r2, [r3, #24]
 8002ed0:	f402 6270 	and.w	r2, r2, #3840	; 0xf00
 8002ed4:	6082      	str	r2, [r0, #8]

  /* Get the D1HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_HPRE);
 8002ed6:	699a      	ldr	r2, [r3, #24]
 8002ed8:	f002 020f 	and.w	r2, r2, #15
 8002edc:	60c2      	str	r2, [r0, #12]

  /* Get the APB3 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB3CLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1PPRE);
 8002ede:	699a      	ldr	r2, [r3, #24]
 8002ee0:	f002 0270 	and.w	r2, r2, #112	; 0x70
 8002ee4:	6102      	str	r2, [r0, #16]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1);
 8002ee6:	69da      	ldr	r2, [r3, #28]
 8002ee8:	f002 0270 	and.w	r2, r2, #112	; 0x70
 8002eec:	6142      	str	r2, [r0, #20]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2);
 8002eee:	69da      	ldr	r2, [r3, #28]
 8002ef0:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
 8002ef4:	6182      	str	r2, [r0, #24]

  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->D3CFGR & RCC_D3CFGR_D3PPRE);
 8002ef6:	6a1b      	ldr	r3, [r3, #32]
 8002ef8:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002efc:	61c3      	str	r3, [r0, #28]
  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE);
#endif

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8002efe:	4b04      	ldr	r3, [pc, #16]	; (8002f10 <HAL_RCC_GetClockConfig+0x50>)
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	f003 030f 	and.w	r3, r3, #15
 8002f06:	600b      	str	r3, [r1, #0]
}
 8002f08:	4770      	bx	lr
 8002f0a:	bf00      	nop
 8002f0c:	58024400 	.word	0x58024400
 8002f10:	52002000 	.word	0x52002000

08002f14 <RCCEx_PLL2_Config>:
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8002f14:	4b40      	ldr	r3, [pc, #256]	; (8003018 <RCCEx_PLL2_Config+0x104>)
 8002f16:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f18:	f003 0303 	and.w	r3, r3, #3
 8002f1c:	2b03      	cmp	r3, #3
 8002f1e:	d079      	beq.n	8003014 <RCCEx_PLL2_Config+0x100>
{
 8002f20:	b570      	push	{r4, r5, r6, lr}
 8002f22:	4605      	mov	r5, r0
 8002f24:	460e      	mov	r6, r1


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8002f26:	4a3c      	ldr	r2, [pc, #240]	; (8003018 <RCCEx_PLL2_Config+0x104>)
 8002f28:	6813      	ldr	r3, [r2, #0]
 8002f2a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8002f2e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002f30:	f7fd fbdc 	bl	80006ec <HAL_GetTick>
 8002f34:	4604      	mov	r4, r0

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8002f36:	4b38      	ldr	r3, [pc, #224]	; (8003018 <RCCEx_PLL2_Config+0x104>)
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	f013 6f00 	tst.w	r3, #134217728	; 0x8000000
 8002f3e:	d006      	beq.n	8002f4e <RCCEx_PLL2_Config+0x3a>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8002f40:	f7fd fbd4 	bl	80006ec <HAL_GetTick>
 8002f44:	1b03      	subs	r3, r0, r4
 8002f46:	2b02      	cmp	r3, #2
 8002f48:	d9f5      	bls.n	8002f36 <RCCEx_PLL2_Config+0x22>
      {
        return HAL_TIMEOUT;
 8002f4a:	2003      	movs	r0, #3

  }


  return status;
}
 8002f4c:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8002f4e:	4b32      	ldr	r3, [pc, #200]	; (8003018 <RCCEx_PLL2_Config+0x104>)
 8002f50:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002f52:	f422 327c 	bic.w	r2, r2, #258048	; 0x3f000
 8002f56:	6829      	ldr	r1, [r5, #0]
 8002f58:	ea42 3201 	orr.w	r2, r2, r1, lsl #12
 8002f5c:	629a      	str	r2, [r3, #40]	; 0x28
 8002f5e:	686a      	ldr	r2, [r5, #4]
 8002f60:	3a01      	subs	r2, #1
 8002f62:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002f66:	68a9      	ldr	r1, [r5, #8]
 8002f68:	3901      	subs	r1, #1
 8002f6a:	0249      	lsls	r1, r1, #9
 8002f6c:	b289      	uxth	r1, r1
 8002f6e:	430a      	orrs	r2, r1
 8002f70:	68e9      	ldr	r1, [r5, #12]
 8002f72:	3901      	subs	r1, #1
 8002f74:	0409      	lsls	r1, r1, #16
 8002f76:	f401 01fe 	and.w	r1, r1, #8323072	; 0x7f0000
 8002f7a:	430a      	orrs	r2, r1
 8002f7c:	6929      	ldr	r1, [r5, #16]
 8002f7e:	3901      	subs	r1, #1
 8002f80:	0609      	lsls	r1, r1, #24
 8002f82:	f001 41fe 	and.w	r1, r1, #2130706432	; 0x7f000000
 8002f86:	430a      	orrs	r2, r1
 8002f88:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8002f8a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002f8c:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 8002f90:	6969      	ldr	r1, [r5, #20]
 8002f92:	430a      	orrs	r2, r1
 8002f94:	62da      	str	r2, [r3, #44]	; 0x2c
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8002f96:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002f98:	f022 0220 	bic.w	r2, r2, #32
 8002f9c:	69a9      	ldr	r1, [r5, #24]
 8002f9e:	430a      	orrs	r2, r1
 8002fa0:	62da      	str	r2, [r3, #44]	; 0x2c
    __HAL_RCC_PLL2FRACN_DISABLE();
 8002fa2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002fa4:	f022 0210 	bic.w	r2, r2, #16
 8002fa8:	62da      	str	r2, [r3, #44]	; 0x2c
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8002faa:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 8002fac:	4a1b      	ldr	r2, [pc, #108]	; (800301c <RCCEx_PLL2_Config+0x108>)
 8002fae:	400a      	ands	r2, r1
 8002fb0:	69e9      	ldr	r1, [r5, #28]
 8002fb2:	ea42 02c1 	orr.w	r2, r2, r1, lsl #3
 8002fb6:	63da      	str	r2, [r3, #60]	; 0x3c
    __HAL_RCC_PLL2FRACN_ENABLE();
 8002fb8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002fba:	f042 0210 	orr.w	r2, r2, #16
 8002fbe:	62da      	str	r2, [r3, #44]	; 0x2c
    if(Divider == DIVIDER_P_UPDATE)
 8002fc0:	b9c6      	cbnz	r6, 8002ff4 <RCCEx_PLL2_Config+0xe0>
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8002fc2:	461a      	mov	r2, r3
 8002fc4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002fc6:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8002fca:	62d3      	str	r3, [r2, #44]	; 0x2c
    __HAL_RCC_PLL2_ENABLE();
 8002fcc:	4a12      	ldr	r2, [pc, #72]	; (8003018 <RCCEx_PLL2_Config+0x104>)
 8002fce:	6813      	ldr	r3, [r2, #0]
 8002fd0:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002fd4:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 8002fd6:	f7fd fb89 	bl	80006ec <HAL_GetTick>
 8002fda:	4604      	mov	r4, r0
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8002fdc:	4b0e      	ldr	r3, [pc, #56]	; (8003018 <RCCEx_PLL2_Config+0x104>)
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	f013 6f00 	tst.w	r3, #134217728	; 0x8000000
 8002fe4:	d114      	bne.n	8003010 <RCCEx_PLL2_Config+0xfc>
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8002fe6:	f7fd fb81 	bl	80006ec <HAL_GetTick>
 8002fea:	1b00      	subs	r0, r0, r4
 8002fec:	2802      	cmp	r0, #2
 8002fee:	d9f5      	bls.n	8002fdc <RCCEx_PLL2_Config+0xc8>
        return HAL_TIMEOUT;
 8002ff0:	2003      	movs	r0, #3
 8002ff2:	e7ab      	b.n	8002f4c <RCCEx_PLL2_Config+0x38>
    else if(Divider == DIVIDER_Q_UPDATE)
 8002ff4:	2e01      	cmp	r6, #1
 8002ff6:	d005      	beq.n	8003004 <RCCEx_PLL2_Config+0xf0>
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8002ff8:	4a07      	ldr	r2, [pc, #28]	; (8003018 <RCCEx_PLL2_Config+0x104>)
 8002ffa:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8002ffc:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8003000:	62d3      	str	r3, [r2, #44]	; 0x2c
 8003002:	e7e3      	b.n	8002fcc <RCCEx_PLL2_Config+0xb8>
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8003004:	4a04      	ldr	r2, [pc, #16]	; (8003018 <RCCEx_PLL2_Config+0x104>)
 8003006:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8003008:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800300c:	62d3      	str	r3, [r2, #44]	; 0x2c
 800300e:	e7dd      	b.n	8002fcc <RCCEx_PLL2_Config+0xb8>
  return status;
 8003010:	2000      	movs	r0, #0
 8003012:	e79b      	b.n	8002f4c <RCCEx_PLL2_Config+0x38>
    return HAL_ERROR;
 8003014:	2001      	movs	r0, #1
}
 8003016:	4770      	bx	lr
 8003018:	58024400 	.word	0x58024400
 800301c:	ffff0007 	.word	0xffff0007

08003020 <RCCEx_PLL3_Config>:
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8003020:	4b40      	ldr	r3, [pc, #256]	; (8003124 <RCCEx_PLL3_Config+0x104>)
 8003022:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003024:	f003 0303 	and.w	r3, r3, #3
 8003028:	2b03      	cmp	r3, #3
 800302a:	d079      	beq.n	8003120 <RCCEx_PLL3_Config+0x100>
{
 800302c:	b570      	push	{r4, r5, r6, lr}
 800302e:	4605      	mov	r5, r0
 8003030:	460e      	mov	r6, r1


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8003032:	4a3c      	ldr	r2, [pc, #240]	; (8003124 <RCCEx_PLL3_Config+0x104>)
 8003034:	6813      	ldr	r3, [r2, #0]
 8003036:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800303a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800303c:	f7fd fb56 	bl	80006ec <HAL_GetTick>
 8003040:	4604      	mov	r4, r0
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8003042:	4b38      	ldr	r3, [pc, #224]	; (8003124 <RCCEx_PLL3_Config+0x104>)
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	f013 5f00 	tst.w	r3, #536870912	; 0x20000000
 800304a:	d006      	beq.n	800305a <RCCEx_PLL3_Config+0x3a>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 800304c:	f7fd fb4e 	bl	80006ec <HAL_GetTick>
 8003050:	1b03      	subs	r3, r0, r4
 8003052:	2b02      	cmp	r3, #2
 8003054:	d9f5      	bls.n	8003042 <RCCEx_PLL3_Config+0x22>
      {
        return HAL_TIMEOUT;
 8003056:	2003      	movs	r0, #3

  }


  return status;
}
 8003058:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800305a:	4b32      	ldr	r3, [pc, #200]	; (8003124 <RCCEx_PLL3_Config+0x104>)
 800305c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800305e:	f022 727c 	bic.w	r2, r2, #66060288	; 0x3f00000
 8003062:	6829      	ldr	r1, [r5, #0]
 8003064:	ea42 5201 	orr.w	r2, r2, r1, lsl #20
 8003068:	629a      	str	r2, [r3, #40]	; 0x28
 800306a:	686a      	ldr	r2, [r5, #4]
 800306c:	3a01      	subs	r2, #1
 800306e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003072:	68a9      	ldr	r1, [r5, #8]
 8003074:	3901      	subs	r1, #1
 8003076:	0249      	lsls	r1, r1, #9
 8003078:	b289      	uxth	r1, r1
 800307a:	430a      	orrs	r2, r1
 800307c:	68e9      	ldr	r1, [r5, #12]
 800307e:	3901      	subs	r1, #1
 8003080:	0409      	lsls	r1, r1, #16
 8003082:	f401 01fe 	and.w	r1, r1, #8323072	; 0x7f0000
 8003086:	430a      	orrs	r2, r1
 8003088:	6929      	ldr	r1, [r5, #16]
 800308a:	3901      	subs	r1, #1
 800308c:	0609      	lsls	r1, r1, #24
 800308e:	f001 41fe 	and.w	r1, r1, #2130706432	; 0x7f000000
 8003092:	430a      	orrs	r2, r1
 8003094:	641a      	str	r2, [r3, #64]	; 0x40
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8003096:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003098:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 800309c:	6969      	ldr	r1, [r5, #20]
 800309e:	430a      	orrs	r2, r1
 80030a0:	62da      	str	r2, [r3, #44]	; 0x2c
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 80030a2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80030a4:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80030a8:	69a9      	ldr	r1, [r5, #24]
 80030aa:	430a      	orrs	r2, r1
 80030ac:	62da      	str	r2, [r3, #44]	; 0x2c
    __HAL_RCC_PLL3FRACN_DISABLE();
 80030ae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80030b0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80030b4:	62da      	str	r2, [r3, #44]	; 0x2c
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 80030b6:	6c59      	ldr	r1, [r3, #68]	; 0x44
 80030b8:	4a1b      	ldr	r2, [pc, #108]	; (8003128 <RCCEx_PLL3_Config+0x108>)
 80030ba:	400a      	ands	r2, r1
 80030bc:	69e9      	ldr	r1, [r5, #28]
 80030be:	ea42 02c1 	orr.w	r2, r2, r1, lsl #3
 80030c2:	645a      	str	r2, [r3, #68]	; 0x44
    __HAL_RCC_PLL3FRACN_ENABLE();
 80030c4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80030c6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80030ca:	62da      	str	r2, [r3, #44]	; 0x2c
    if(Divider == DIVIDER_P_UPDATE)
 80030cc:	b9c6      	cbnz	r6, 8003100 <RCCEx_PLL3_Config+0xe0>
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 80030ce:	461a      	mov	r2, r3
 80030d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030d2:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80030d6:	62d3      	str	r3, [r2, #44]	; 0x2c
    __HAL_RCC_PLL3_ENABLE();
 80030d8:	4a12      	ldr	r2, [pc, #72]	; (8003124 <RCCEx_PLL3_Config+0x104>)
 80030da:	6813      	ldr	r3, [r2, #0]
 80030dc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80030e0:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 80030e2:	f7fd fb03 	bl	80006ec <HAL_GetTick>
 80030e6:	4604      	mov	r4, r0
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80030e8:	4b0e      	ldr	r3, [pc, #56]	; (8003124 <RCCEx_PLL3_Config+0x104>)
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	f013 5f00 	tst.w	r3, #536870912	; 0x20000000
 80030f0:	d114      	bne.n	800311c <RCCEx_PLL3_Config+0xfc>
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 80030f2:	f7fd fafb 	bl	80006ec <HAL_GetTick>
 80030f6:	1b00      	subs	r0, r0, r4
 80030f8:	2802      	cmp	r0, #2
 80030fa:	d9f5      	bls.n	80030e8 <RCCEx_PLL3_Config+0xc8>
        return HAL_TIMEOUT;
 80030fc:	2003      	movs	r0, #3
 80030fe:	e7ab      	b.n	8003058 <RCCEx_PLL3_Config+0x38>
    else if(Divider == DIVIDER_Q_UPDATE)
 8003100:	2e01      	cmp	r6, #1
 8003102:	d005      	beq.n	8003110 <RCCEx_PLL3_Config+0xf0>
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8003104:	4a07      	ldr	r2, [pc, #28]	; (8003124 <RCCEx_PLL3_Config+0x104>)
 8003106:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8003108:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800310c:	62d3      	str	r3, [r2, #44]	; 0x2c
 800310e:	e7e3      	b.n	80030d8 <RCCEx_PLL3_Config+0xb8>
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8003110:	4a04      	ldr	r2, [pc, #16]	; (8003124 <RCCEx_PLL3_Config+0x104>)
 8003112:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8003114:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8003118:	62d3      	str	r3, [r2, #44]	; 0x2c
 800311a:	e7dd      	b.n	80030d8 <RCCEx_PLL3_Config+0xb8>
  return status;
 800311c:	2000      	movs	r0, #0
 800311e:	e79b      	b.n	8003058 <RCCEx_PLL3_Config+0x38>
    return HAL_ERROR;
 8003120:	2001      	movs	r0, #1
}
 8003122:	4770      	bx	lr
 8003124:	58024400 	.word	0x58024400
 8003128:	ffff0007 	.word	0xffff0007

0800312c <HAL_RCCEx_PeriphCLKConfig>:
{
 800312c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800312e:	4604      	mov	r4, r0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003130:	6803      	ldr	r3, [r0, #0]
 8003132:	f013 6f00 	tst.w	r3, #134217728	; 0x8000000
 8003136:	d030      	beq.n	800319a <HAL_RCCEx_PeriphCLKConfig+0x6e>
    switch(PeriphClkInit->SpdifrxClockSelection)
 8003138:	6e43      	ldr	r3, [r0, #100]	; 0x64
 800313a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800313e:	d026      	beq.n	800318e <HAL_RCCEx_PeriphCLKConfig+0x62>
 8003140:	d80e      	bhi.n	8003160 <HAL_RCCEx_PeriphCLKConfig+0x34>
 8003142:	b1eb      	cbz	r3, 8003180 <HAL_RCCEx_PeriphCLKConfig+0x54>
 8003144:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003148:	d107      	bne.n	800315a <HAL_RCCEx_PeriphCLKConfig+0x2e>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800314a:	2102      	movs	r1, #2
 800314c:	3004      	adds	r0, #4
 800314e:	f7ff fee1 	bl	8002f14 <RCCEx_PLL2_Config>
 8003152:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 8003154:	b145      	cbz	r5, 8003168 <HAL_RCCEx_PeriphCLKConfig+0x3c>
 8003156:	462e      	mov	r6, r5
 8003158:	e021      	b.n	800319e <HAL_RCCEx_PeriphCLKConfig+0x72>
    switch(PeriphClkInit->SpdifrxClockSelection)
 800315a:	2601      	movs	r6, #1
 800315c:	4635      	mov	r5, r6
 800315e:	e01e      	b.n	800319e <HAL_RCCEx_PeriphCLKConfig+0x72>
 8003160:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8003164:	d109      	bne.n	800317a <HAL_RCCEx_PeriphCLKConfig+0x4e>
 8003166:	2500      	movs	r5, #0
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8003168:	4a96      	ldr	r2, [pc, #600]	; (80033c4 <HAL_RCCEx_PeriphCLKConfig+0x298>)
 800316a:	6d13      	ldr	r3, [r2, #80]	; 0x50
 800316c:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8003170:	6e61      	ldr	r1, [r4, #100]	; 0x64
 8003172:	430b      	orrs	r3, r1
 8003174:	6513      	str	r3, [r2, #80]	; 0x50
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003176:	2600      	movs	r6, #0
 8003178:	e011      	b.n	800319e <HAL_RCCEx_PeriphCLKConfig+0x72>
    switch(PeriphClkInit->SpdifrxClockSelection)
 800317a:	2601      	movs	r6, #1
 800317c:	4635      	mov	r5, r6
 800317e:	e00e      	b.n	800319e <HAL_RCCEx_PeriphCLKConfig+0x72>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003180:	4a90      	ldr	r2, [pc, #576]	; (80033c4 <HAL_RCCEx_PeriphCLKConfig+0x298>)
 8003182:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8003184:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003188:	62d3      	str	r3, [r2, #44]	; 0x2c
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800318a:	2500      	movs	r5, #0
 800318c:	e7ec      	b.n	8003168 <HAL_RCCEx_PeriphCLKConfig+0x3c>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800318e:	2102      	movs	r1, #2
 8003190:	3024      	adds	r0, #36	; 0x24
 8003192:	f7ff ff45 	bl	8003020 <RCCEx_PLL3_Config>
 8003196:	4605      	mov	r5, r0
      break;
 8003198:	e7dc      	b.n	8003154 <HAL_RCCEx_PeriphCLKConfig+0x28>
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800319a:	2600      	movs	r6, #0
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800319c:	4635      	mov	r5, r6
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800319e:	6823      	ldr	r3, [r4, #0]
 80031a0:	f413 7f80 	tst.w	r3, #256	; 0x100
 80031a4:	d014      	beq.n	80031d0 <HAL_RCCEx_PeriphCLKConfig+0xa4>
    switch(PeriphClkInit->Sai1ClockSelection)
 80031a6:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80031a8:	2b04      	cmp	r3, #4
 80031aa:	d830      	bhi.n	800320e <HAL_RCCEx_PeriphCLKConfig+0xe2>
 80031ac:	e8df f003 	tbb	[pc, r3]
 80031b0:	08282203 	.word	0x08282203
 80031b4:	08          	.byte	0x08
 80031b5:	00          	.byte	0x00
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80031b6:	4a83      	ldr	r2, [pc, #524]	; (80033c4 <HAL_RCCEx_PeriphCLKConfig+0x298>)
 80031b8:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 80031ba:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80031be:	62d3      	str	r3, [r2, #44]	; 0x2c
    if(ret == HAL_OK)
 80031c0:	bb45      	cbnz	r5, 8003214 <HAL_RCCEx_PeriphCLKConfig+0xe8>
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80031c2:	4a80      	ldr	r2, [pc, #512]	; (80033c4 <HAL_RCCEx_PeriphCLKConfig+0x298>)
 80031c4:	6d13      	ldr	r3, [r2, #80]	; 0x50
 80031c6:	f023 0307 	bic.w	r3, r3, #7
 80031ca:	6d61      	ldr	r1, [r4, #84]	; 0x54
 80031cc:	430b      	orrs	r3, r1
 80031ce:	6513      	str	r3, [r2, #80]	; 0x50
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 80031d0:	6823      	ldr	r3, [r4, #0]
 80031d2:	f413 7f00 	tst.w	r3, #512	; 0x200
 80031d6:	d02f      	beq.n	8003238 <HAL_RCCEx_PeriphCLKConfig+0x10c>
    switch(PeriphClkInit->Sai23ClockSelection)
 80031d8:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80031da:	2b80      	cmp	r3, #128	; 0x80
 80031dc:	d04a      	beq.n	8003274 <HAL_RCCEx_PeriphCLKConfig+0x148>
 80031de:	d81e      	bhi.n	800321e <HAL_RCCEx_PeriphCLKConfig+0xf2>
 80031e0:	2b00      	cmp	r3, #0
 80031e2:	d041      	beq.n	8003268 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 80031e4:	2b40      	cmp	r3, #64	; 0x40
 80031e6:	d117      	bne.n	8003218 <HAL_RCCEx_PeriphCLKConfig+0xec>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80031e8:	2100      	movs	r1, #0
 80031ea:	1d20      	adds	r0, r4, #4
 80031ec:	f7ff fe92 	bl	8002f14 <RCCEx_PLL2_Config>
 80031f0:	4605      	mov	r5, r0
      break;
 80031f2:	e019      	b.n	8003228 <HAL_RCCEx_PeriphCLKConfig+0xfc>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80031f4:	2100      	movs	r1, #0
 80031f6:	1d20      	adds	r0, r4, #4
 80031f8:	f7ff fe8c 	bl	8002f14 <RCCEx_PLL2_Config>
 80031fc:	4605      	mov	r5, r0
      break;
 80031fe:	e7df      	b.n	80031c0 <HAL_RCCEx_PeriphCLKConfig+0x94>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8003200:	2100      	movs	r1, #0
 8003202:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8003206:	f7ff ff0b 	bl	8003020 <RCCEx_PLL3_Config>
 800320a:	4605      	mov	r5, r0
      break;
 800320c:	e7d8      	b.n	80031c0 <HAL_RCCEx_PeriphCLKConfig+0x94>
    switch(PeriphClkInit->Sai1ClockSelection)
 800320e:	2601      	movs	r6, #1
 8003210:	4635      	mov	r5, r6
 8003212:	e7dd      	b.n	80031d0 <HAL_RCCEx_PeriphCLKConfig+0xa4>
 8003214:	462e      	mov	r6, r5
 8003216:	e7db      	b.n	80031d0 <HAL_RCCEx_PeriphCLKConfig+0xa4>
    switch(PeriphClkInit->Sai23ClockSelection)
 8003218:	2601      	movs	r6, #1
 800321a:	4635      	mov	r5, r6
 800321c:	e00c      	b.n	8003238 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 800321e:	2bc0      	cmp	r3, #192	; 0xc0
 8003220:	d002      	beq.n	8003228 <HAL_RCCEx_PeriphCLKConfig+0xfc>
 8003222:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003226:	d11c      	bne.n	8003262 <HAL_RCCEx_PeriphCLKConfig+0x136>
    if(ret == HAL_OK)
 8003228:	bb5d      	cbnz	r5, 8003282 <HAL_RCCEx_PeriphCLKConfig+0x156>
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 800322a:	4a66      	ldr	r2, [pc, #408]	; (80033c4 <HAL_RCCEx_PeriphCLKConfig+0x298>)
 800322c:	6d13      	ldr	r3, [r2, #80]	; 0x50
 800322e:	f423 73e0 	bic.w	r3, r3, #448	; 0x1c0
 8003232:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8003234:	430b      	orrs	r3, r1
 8003236:	6513      	str	r3, [r2, #80]	; 0x50
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8003238:	6823      	ldr	r3, [r4, #0]
 800323a:	f413 6f80 	tst.w	r3, #1024	; 0x400
 800323e:	d034      	beq.n	80032aa <HAL_RCCEx_PeriphCLKConfig+0x17e>
    switch(PeriphClkInit->Sai4AClockSelection)
 8003240:	f8d4 30a4 	ldr.w	r3, [r4, #164]	; 0xa4
 8003244:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003248:	d04d      	beq.n	80032e6 <HAL_RCCEx_PeriphCLKConfig+0x1ba>
 800324a:	d81f      	bhi.n	800328c <HAL_RCCEx_PeriphCLKConfig+0x160>
 800324c:	2b00      	cmp	r3, #0
 800324e:	d044      	beq.n	80032da <HAL_RCCEx_PeriphCLKConfig+0x1ae>
 8003250:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003254:	d117      	bne.n	8003286 <HAL_RCCEx_PeriphCLKConfig+0x15a>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003256:	2100      	movs	r1, #0
 8003258:	1d20      	adds	r0, r4, #4
 800325a:	f7ff fe5b 	bl	8002f14 <RCCEx_PLL2_Config>
 800325e:	4605      	mov	r5, r0
      break;
 8003260:	e01a      	b.n	8003298 <HAL_RCCEx_PeriphCLKConfig+0x16c>
    switch(PeriphClkInit->Sai23ClockSelection)
 8003262:	2601      	movs	r6, #1
 8003264:	4635      	mov	r5, r6
 8003266:	e7e7      	b.n	8003238 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003268:	4a56      	ldr	r2, [pc, #344]	; (80033c4 <HAL_RCCEx_PeriphCLKConfig+0x298>)
 800326a:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 800326c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003270:	62d3      	str	r3, [r2, #44]	; 0x2c
      break;
 8003272:	e7d9      	b.n	8003228 <HAL_RCCEx_PeriphCLKConfig+0xfc>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8003274:	2100      	movs	r1, #0
 8003276:	f104 0024 	add.w	r0, r4, #36	; 0x24
 800327a:	f7ff fed1 	bl	8003020 <RCCEx_PLL3_Config>
 800327e:	4605      	mov	r5, r0
      break;
 8003280:	e7d2      	b.n	8003228 <HAL_RCCEx_PeriphCLKConfig+0xfc>
 8003282:	462e      	mov	r6, r5
 8003284:	e7d8      	b.n	8003238 <HAL_RCCEx_PeriphCLKConfig+0x10c>
    switch(PeriphClkInit->Sai4AClockSelection)
 8003286:	2601      	movs	r6, #1
 8003288:	4635      	mov	r5, r6
 800328a:	e00e      	b.n	80032aa <HAL_RCCEx_PeriphCLKConfig+0x17e>
 800328c:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8003290:	d002      	beq.n	8003298 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 8003292:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003296:	d11d      	bne.n	80032d4 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    if(ret == HAL_OK)
 8003298:	bb65      	cbnz	r5, 80032f4 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 800329a:	4a4a      	ldr	r2, [pc, #296]	; (80033c4 <HAL_RCCEx_PeriphCLKConfig+0x298>)
 800329c:	6d93      	ldr	r3, [r2, #88]	; 0x58
 800329e:	f423 0360 	bic.w	r3, r3, #14680064	; 0xe00000
 80032a2:	f8d4 10a4 	ldr.w	r1, [r4, #164]	; 0xa4
 80032a6:	430b      	orrs	r3, r1
 80032a8:	6593      	str	r3, [r2, #88]	; 0x58
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 80032aa:	6823      	ldr	r3, [r4, #0]
 80032ac:	f413 6f00 	tst.w	r3, #2048	; 0x800
 80032b0:	d035      	beq.n	800331e <HAL_RCCEx_PeriphCLKConfig+0x1f2>
    switch(PeriphClkInit->Sai4BClockSelection)
 80032b2:	f8d4 30a8 	ldr.w	r3, [r4, #168]	; 0xa8
 80032b6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80032ba:	d053      	beq.n	8003364 <HAL_RCCEx_PeriphCLKConfig+0x238>
 80032bc:	d81f      	bhi.n	80032fe <HAL_RCCEx_PeriphCLKConfig+0x1d2>
 80032be:	2b00      	cmp	r3, #0
 80032c0:	d04a      	beq.n	8003358 <HAL_RCCEx_PeriphCLKConfig+0x22c>
 80032c2:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80032c6:	d117      	bne.n	80032f8 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80032c8:	2100      	movs	r1, #0
 80032ca:	1d20      	adds	r0, r4, #4
 80032cc:	f7ff fe22 	bl	8002f14 <RCCEx_PLL2_Config>
 80032d0:	4605      	mov	r5, r0
      break;
 80032d2:	e01a      	b.n	800330a <HAL_RCCEx_PeriphCLKConfig+0x1de>
    switch(PeriphClkInit->Sai4AClockSelection)
 80032d4:	2601      	movs	r6, #1
 80032d6:	4635      	mov	r5, r6
 80032d8:	e7e7      	b.n	80032aa <HAL_RCCEx_PeriphCLKConfig+0x17e>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80032da:	4a3a      	ldr	r2, [pc, #232]	; (80033c4 <HAL_RCCEx_PeriphCLKConfig+0x298>)
 80032dc:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 80032de:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80032e2:	62d3      	str	r3, [r2, #44]	; 0x2c
      break;
 80032e4:	e7d8      	b.n	8003298 <HAL_RCCEx_PeriphCLKConfig+0x16c>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80032e6:	2100      	movs	r1, #0
 80032e8:	f104 0024 	add.w	r0, r4, #36	; 0x24
 80032ec:	f7ff fe98 	bl	8003020 <RCCEx_PLL3_Config>
 80032f0:	4605      	mov	r5, r0
      break;
 80032f2:	e7d1      	b.n	8003298 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 80032f4:	462e      	mov	r6, r5
 80032f6:	e7d8      	b.n	80032aa <HAL_RCCEx_PeriphCLKConfig+0x17e>
    switch(PeriphClkInit->Sai4BClockSelection)
 80032f8:	2601      	movs	r6, #1
 80032fa:	4635      	mov	r5, r6
 80032fc:	e00f      	b.n	800331e <HAL_RCCEx_PeriphCLKConfig+0x1f2>
 80032fe:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8003302:	d002      	beq.n	800330a <HAL_RCCEx_PeriphCLKConfig+0x1de>
 8003304:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003308:	d123      	bne.n	8003352 <HAL_RCCEx_PeriphCLKConfig+0x226>
    if(ret == HAL_OK)
 800330a:	2d00      	cmp	r5, #0
 800330c:	d131      	bne.n	8003372 <HAL_RCCEx_PeriphCLKConfig+0x246>
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 800330e:	4a2d      	ldr	r2, [pc, #180]	; (80033c4 <HAL_RCCEx_PeriphCLKConfig+0x298>)
 8003310:	6d93      	ldr	r3, [r2, #88]	; 0x58
 8003312:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8003316:	f8d4 10a8 	ldr.w	r1, [r4, #168]	; 0xa8
 800331a:	430b      	orrs	r3, r1
 800331c:	6593      	str	r3, [r2, #88]	; 0x58
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 800331e:	6823      	ldr	r3, [r4, #0]
 8003320:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8003324:	d02e      	beq.n	8003384 <HAL_RCCEx_PeriphCLKConfig+0x258>
    switch(PeriphClkInit->QspiClockSelection)
 8003326:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8003328:	2b20      	cmp	r3, #32
 800332a:	d03f      	beq.n	80033ac <HAL_RCCEx_PeriphCLKConfig+0x280>
 800332c:	d826      	bhi.n	800337c <HAL_RCCEx_PeriphCLKConfig+0x250>
 800332e:	b133      	cbz	r3, 800333e <HAL_RCCEx_PeriphCLKConfig+0x212>
 8003330:	2b10      	cmp	r3, #16
 8003332:	d120      	bne.n	8003376 <HAL_RCCEx_PeriphCLKConfig+0x24a>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003334:	4a23      	ldr	r2, [pc, #140]	; (80033c4 <HAL_RCCEx_PeriphCLKConfig+0x298>)
 8003336:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8003338:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800333c:	62d3      	str	r3, [r2, #44]	; 0x2c
    if(ret == HAL_OK)
 800333e:	2d00      	cmp	r5, #0
 8003340:	d13a      	bne.n	80033b8 <HAL_RCCEx_PeriphCLKConfig+0x28c>
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8003342:	4a20      	ldr	r2, [pc, #128]	; (80033c4 <HAL_RCCEx_PeriphCLKConfig+0x298>)
 8003344:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 8003346:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 800334a:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800334c:	430b      	orrs	r3, r1
 800334e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003350:	e018      	b.n	8003384 <HAL_RCCEx_PeriphCLKConfig+0x258>
    switch(PeriphClkInit->Sai4BClockSelection)
 8003352:	2601      	movs	r6, #1
 8003354:	4635      	mov	r5, r6
 8003356:	e7e2      	b.n	800331e <HAL_RCCEx_PeriphCLKConfig+0x1f2>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003358:	4a1a      	ldr	r2, [pc, #104]	; (80033c4 <HAL_RCCEx_PeriphCLKConfig+0x298>)
 800335a:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 800335c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003360:	62d3      	str	r3, [r2, #44]	; 0x2c
      break;
 8003362:	e7d2      	b.n	800330a <HAL_RCCEx_PeriphCLKConfig+0x1de>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003364:	2100      	movs	r1, #0
 8003366:	f104 0024 	add.w	r0, r4, #36	; 0x24
 800336a:	f7ff fe59 	bl	8003020 <RCCEx_PLL3_Config>
 800336e:	4605      	mov	r5, r0
      break;
 8003370:	e7cb      	b.n	800330a <HAL_RCCEx_PeriphCLKConfig+0x1de>
 8003372:	462e      	mov	r6, r5
 8003374:	e7d3      	b.n	800331e <HAL_RCCEx_PeriphCLKConfig+0x1f2>
    switch(PeriphClkInit->QspiClockSelection)
 8003376:	2601      	movs	r6, #1
 8003378:	4635      	mov	r5, r6
 800337a:	e003      	b.n	8003384 <HAL_RCCEx_PeriphCLKConfig+0x258>
 800337c:	2b30      	cmp	r3, #48	; 0x30
 800337e:	d0de      	beq.n	800333e <HAL_RCCEx_PeriphCLKConfig+0x212>
 8003380:	2601      	movs	r6, #1
 8003382:	4635      	mov	r5, r6
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8003384:	6823      	ldr	r3, [r4, #0]
 8003386:	f413 5f80 	tst.w	r3, #4096	; 0x1000
 800338a:	d02c      	beq.n	80033e6 <HAL_RCCEx_PeriphCLKConfig+0x2ba>
    switch(PeriphClkInit->Spi123ClockSelection)
 800338c:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 800338e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003392:	d04d      	beq.n	8003430 <HAL_RCCEx_PeriphCLKConfig+0x304>
 8003394:	d818      	bhi.n	80033c8 <HAL_RCCEx_PeriphCLKConfig+0x29c>
 8003396:	2b00      	cmp	r3, #0
 8003398:	d044      	beq.n	8003424 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
 800339a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800339e:	d10d      	bne.n	80033bc <HAL_RCCEx_PeriphCLKConfig+0x290>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80033a0:	2100      	movs	r1, #0
 80033a2:	1d20      	adds	r0, r4, #4
 80033a4:	f7ff fdb6 	bl	8002f14 <RCCEx_PLL2_Config>
 80033a8:	4605      	mov	r5, r0
      break;
 80033aa:	e013      	b.n	80033d4 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80033ac:	2102      	movs	r1, #2
 80033ae:	1d20      	adds	r0, r4, #4
 80033b0:	f7ff fdb0 	bl	8002f14 <RCCEx_PLL2_Config>
 80033b4:	4605      	mov	r5, r0
      break;
 80033b6:	e7c2      	b.n	800333e <HAL_RCCEx_PeriphCLKConfig+0x212>
 80033b8:	462e      	mov	r6, r5
 80033ba:	e7e3      	b.n	8003384 <HAL_RCCEx_PeriphCLKConfig+0x258>
    switch(PeriphClkInit->Spi123ClockSelection)
 80033bc:	2601      	movs	r6, #1
 80033be:	4635      	mov	r5, r6
 80033c0:	e011      	b.n	80033e6 <HAL_RCCEx_PeriphCLKConfig+0x2ba>
 80033c2:	bf00      	nop
 80033c4:	58024400 	.word	0x58024400
 80033c8:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80033cc:	d002      	beq.n	80033d4 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 80033ce:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80033d2:	d124      	bne.n	800341e <HAL_RCCEx_PeriphCLKConfig+0x2f2>
    if(ret == HAL_OK)
 80033d4:	2d00      	cmp	r5, #0
 80033d6:	d132      	bne.n	800343e <HAL_RCCEx_PeriphCLKConfig+0x312>
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 80033d8:	4a98      	ldr	r2, [pc, #608]	; (800363c <HAL_RCCEx_PeriphCLKConfig+0x510>)
 80033da:	6d13      	ldr	r3, [r2, #80]	; 0x50
 80033dc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80033e0:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 80033e2:	430b      	orrs	r3, r1
 80033e4:	6513      	str	r3, [r2, #80]	; 0x50
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 80033e6:	6823      	ldr	r3, [r4, #0]
 80033e8:	f413 5f00 	tst.w	r3, #8192	; 0x2000
 80033ec:	d037      	beq.n	800345e <HAL_RCCEx_PeriphCLKConfig+0x332>
    switch(PeriphClkInit->Spi45ClockSelection)
 80033ee:	6e23      	ldr	r3, [r4, #96]	; 0x60
 80033f0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80033f4:	d051      	beq.n	800349a <HAL_RCCEx_PeriphCLKConfig+0x36e>
 80033f6:	d827      	bhi.n	8003448 <HAL_RCCEx_PeriphCLKConfig+0x31c>
 80033f8:	b13b      	cbz	r3, 800340a <HAL_RCCEx_PeriphCLKConfig+0x2de>
 80033fa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80033fe:	d120      	bne.n	8003442 <HAL_RCCEx_PeriphCLKConfig+0x316>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8003400:	2101      	movs	r1, #1
 8003402:	1d20      	adds	r0, r4, #4
 8003404:	f7ff fd86 	bl	8002f14 <RCCEx_PLL2_Config>
 8003408:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 800340a:	2d00      	cmp	r5, #0
 800340c:	d14c      	bne.n	80034a8 <HAL_RCCEx_PeriphCLKConfig+0x37c>
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 800340e:	4a8b      	ldr	r2, [pc, #556]	; (800363c <HAL_RCCEx_PeriphCLKConfig+0x510>)
 8003410:	6d13      	ldr	r3, [r2, #80]	; 0x50
 8003412:	f423 23e0 	bic.w	r3, r3, #458752	; 0x70000
 8003416:	6e21      	ldr	r1, [r4, #96]	; 0x60
 8003418:	430b      	orrs	r3, r1
 800341a:	6513      	str	r3, [r2, #80]	; 0x50
 800341c:	e01f      	b.n	800345e <HAL_RCCEx_PeriphCLKConfig+0x332>
    switch(PeriphClkInit->Spi123ClockSelection)
 800341e:	2601      	movs	r6, #1
 8003420:	4635      	mov	r5, r6
 8003422:	e7e0      	b.n	80033e6 <HAL_RCCEx_PeriphCLKConfig+0x2ba>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003424:	4a85      	ldr	r2, [pc, #532]	; (800363c <HAL_RCCEx_PeriphCLKConfig+0x510>)
 8003426:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8003428:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800342c:	62d3      	str	r3, [r2, #44]	; 0x2c
      break;
 800342e:	e7d1      	b.n	80033d4 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8003430:	2100      	movs	r1, #0
 8003432:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8003436:	f7ff fdf3 	bl	8003020 <RCCEx_PLL3_Config>
 800343a:	4605      	mov	r5, r0
      break;
 800343c:	e7ca      	b.n	80033d4 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800343e:	462e      	mov	r6, r5
 8003440:	e7d1      	b.n	80033e6 <HAL_RCCEx_PeriphCLKConfig+0x2ba>
    switch(PeriphClkInit->Spi45ClockSelection)
 8003442:	2601      	movs	r6, #1
 8003444:	4635      	mov	r5, r6
 8003446:	e00a      	b.n	800345e <HAL_RCCEx_PeriphCLKConfig+0x332>
 8003448:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800344c:	d0dd      	beq.n	800340a <HAL_RCCEx_PeriphCLKConfig+0x2de>
 800344e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003452:	d0da      	beq.n	800340a <HAL_RCCEx_PeriphCLKConfig+0x2de>
 8003454:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8003458:	d0d7      	beq.n	800340a <HAL_RCCEx_PeriphCLKConfig+0x2de>
 800345a:	2601      	movs	r6, #1
 800345c:	4635      	mov	r5, r6
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 800345e:	6823      	ldr	r3, [r4, #0]
 8003460:	f413 4f80 	tst.w	r3, #16384	; 0x4000
 8003464:	d030      	beq.n	80034c8 <HAL_RCCEx_PeriphCLKConfig+0x39c>
    switch(PeriphClkInit->Spi6ClockSelection)
 8003466:	f8d4 30ac 	ldr.w	r3, [r4, #172]	; 0xac
 800346a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800346e:	d044      	beq.n	80034fa <HAL_RCCEx_PeriphCLKConfig+0x3ce>
 8003470:	d81f      	bhi.n	80034b2 <HAL_RCCEx_PeriphCLKConfig+0x386>
 8003472:	b13b      	cbz	r3, 8003484 <HAL_RCCEx_PeriphCLKConfig+0x358>
 8003474:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003478:	d118      	bne.n	80034ac <HAL_RCCEx_PeriphCLKConfig+0x380>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800347a:	2101      	movs	r1, #1
 800347c:	1d20      	adds	r0, r4, #4
 800347e:	f7ff fd49 	bl	8002f14 <RCCEx_PLL2_Config>
 8003482:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 8003484:	2d00      	cmp	r5, #0
 8003486:	d13f      	bne.n	8003508 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8003488:	4a6c      	ldr	r2, [pc, #432]	; (800363c <HAL_RCCEx_PeriphCLKConfig+0x510>)
 800348a:	6d93      	ldr	r3, [r2, #88]	; 0x58
 800348c:	f023 43e0 	bic.w	r3, r3, #1879048192	; 0x70000000
 8003490:	f8d4 10ac 	ldr.w	r1, [r4, #172]	; 0xac
 8003494:	430b      	orrs	r3, r1
 8003496:	6593      	str	r3, [r2, #88]	; 0x58
 8003498:	e016      	b.n	80034c8 <HAL_RCCEx_PeriphCLKConfig+0x39c>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800349a:	2101      	movs	r1, #1
 800349c:	f104 0024 	add.w	r0, r4, #36	; 0x24
 80034a0:	f7ff fdbe 	bl	8003020 <RCCEx_PLL3_Config>
 80034a4:	4605      	mov	r5, r0
      break;
 80034a6:	e7b0      	b.n	800340a <HAL_RCCEx_PeriphCLKConfig+0x2de>
 80034a8:	462e      	mov	r6, r5
 80034aa:	e7d8      	b.n	800345e <HAL_RCCEx_PeriphCLKConfig+0x332>
    switch(PeriphClkInit->Spi6ClockSelection)
 80034ac:	2601      	movs	r6, #1
 80034ae:	4635      	mov	r5, r6
 80034b0:	e00a      	b.n	80034c8 <HAL_RCCEx_PeriphCLKConfig+0x39c>
 80034b2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80034b6:	d0e5      	beq.n	8003484 <HAL_RCCEx_PeriphCLKConfig+0x358>
 80034b8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80034bc:	d0e2      	beq.n	8003484 <HAL_RCCEx_PeriphCLKConfig+0x358>
 80034be:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80034c2:	d0df      	beq.n	8003484 <HAL_RCCEx_PeriphCLKConfig+0x358>
 80034c4:	2601      	movs	r6, #1
 80034c6:	4635      	mov	r5, r6
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80034c8:	6823      	ldr	r3, [r4, #0]
 80034ca:	f413 4f00 	tst.w	r3, #32768	; 0x8000
 80034ce:	d009      	beq.n	80034e4 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
    switch(PeriphClkInit->FdcanClockSelection)
 80034d0:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 80034d2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80034d6:	d019      	beq.n	800350c <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 80034d8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80034dc:	d024      	beq.n	8003528 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
 80034de:	b1d3      	cbz	r3, 8003516 <HAL_RCCEx_PeriphCLKConfig+0x3ea>
 80034e0:	2601      	movs	r6, #1
 80034e2:	4635      	mov	r5, r6
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 80034e4:	6823      	ldr	r3, [r4, #0]
 80034e6:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
 80034ea:	d03d      	beq.n	8003568 <HAL_RCCEx_PeriphCLKConfig+0x43c>
    switch(PeriphClkInit->FmcClockSelection)
 80034ec:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80034ee:	2b03      	cmp	r3, #3
 80034f0:	d836      	bhi.n	8003560 <HAL_RCCEx_PeriphCLKConfig+0x434>
 80034f2:	e8df f003 	tbb	[pc, r3]
 80034f6:	2126      	.short	0x2126
 80034f8:	262f      	.short	0x262f
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80034fa:	2101      	movs	r1, #1
 80034fc:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8003500:	f7ff fd8e 	bl	8003020 <RCCEx_PLL3_Config>
 8003504:	4605      	mov	r5, r0
      break;
 8003506:	e7bd      	b.n	8003484 <HAL_RCCEx_PeriphCLKConfig+0x358>
 8003508:	462e      	mov	r6, r5
 800350a:	e7dd      	b.n	80034c8 <HAL_RCCEx_PeriphCLKConfig+0x39c>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800350c:	4a4b      	ldr	r2, [pc, #300]	; (800363c <HAL_RCCEx_PeriphCLKConfig+0x510>)
 800350e:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8003510:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003514:	62d3      	str	r3, [r2, #44]	; 0x2c
    if(ret == HAL_OK)
 8003516:	b96d      	cbnz	r5, 8003534 <HAL_RCCEx_PeriphCLKConfig+0x408>
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8003518:	4a48      	ldr	r2, [pc, #288]	; (800363c <HAL_RCCEx_PeriphCLKConfig+0x510>)
 800351a:	6d13      	ldr	r3, [r2, #80]	; 0x50
 800351c:	f023 5340 	bic.w	r3, r3, #805306368	; 0x30000000
 8003520:	6ee1      	ldr	r1, [r4, #108]	; 0x6c
 8003522:	430b      	orrs	r3, r1
 8003524:	6513      	str	r3, [r2, #80]	; 0x50
 8003526:	e7dd      	b.n	80034e4 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8003528:	2101      	movs	r1, #1
 800352a:	1d20      	adds	r0, r4, #4
 800352c:	f7ff fcf2 	bl	8002f14 <RCCEx_PLL2_Config>
 8003530:	4605      	mov	r5, r0
      break;
 8003532:	e7f0      	b.n	8003516 <HAL_RCCEx_PeriphCLKConfig+0x3ea>
 8003534:	462e      	mov	r6, r5
 8003536:	e7d5      	b.n	80034e4 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003538:	4a40      	ldr	r2, [pc, #256]	; (800363c <HAL_RCCEx_PeriphCLKConfig+0x510>)
 800353a:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 800353c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003540:	62d3      	str	r3, [r2, #44]	; 0x2c
    if(ret == HAL_OK)
 8003542:	b985      	cbnz	r5, 8003566 <HAL_RCCEx_PeriphCLKConfig+0x43a>
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8003544:	4a3d      	ldr	r2, [pc, #244]	; (800363c <HAL_RCCEx_PeriphCLKConfig+0x510>)
 8003546:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 8003548:	f023 0303 	bic.w	r3, r3, #3
 800354c:	6c61      	ldr	r1, [r4, #68]	; 0x44
 800354e:	430b      	orrs	r3, r1
 8003550:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003552:	e009      	b.n	8003568 <HAL_RCCEx_PeriphCLKConfig+0x43c>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8003554:	2102      	movs	r1, #2
 8003556:	1d20      	adds	r0, r4, #4
 8003558:	f7ff fcdc 	bl	8002f14 <RCCEx_PLL2_Config>
 800355c:	4605      	mov	r5, r0
      break;
 800355e:	e7f0      	b.n	8003542 <HAL_RCCEx_PeriphCLKConfig+0x416>
    switch(PeriphClkInit->FmcClockSelection)
 8003560:	2601      	movs	r6, #1
 8003562:	4635      	mov	r5, r6
 8003564:	e000      	b.n	8003568 <HAL_RCCEx_PeriphCLKConfig+0x43c>
 8003566:	462e      	mov	r6, r5
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003568:	6823      	ldr	r3, [r4, #0]
 800356a:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 800356e:	d11f      	bne.n	80035b0 <HAL_RCCEx_PeriphCLKConfig+0x484>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8003570:	6823      	ldr	r3, [r4, #0]
 8003572:	f013 0f01 	tst.w	r3, #1
 8003576:	f000 809b 	beq.w	80036b0 <HAL_RCCEx_PeriphCLKConfig+0x584>
    switch(PeriphClkInit->Usart16ClockSelection)
 800357a:	6fa3      	ldr	r3, [r4, #120]	; 0x78
 800357c:	2b28      	cmp	r3, #40	; 0x28
 800357e:	f200 8095 	bhi.w	80036ac <HAL_RCCEx_PeriphCLKConfig+0x580>
 8003582:	e8df f003 	tbb	[pc, r3]
 8003586:	9383      	.short	0x9383
 8003588:	93939393 	.word	0x93939393
 800358c:	937e9393 	.word	0x937e9393
 8003590:	93939393 	.word	0x93939393
 8003594:	938c9393 	.word	0x938c9393
 8003598:	93939393 	.word	0x93939393
 800359c:	93839393 	.word	0x93839393
 80035a0:	93939393 	.word	0x93939393
 80035a4:	93839393 	.word	0x93839393
 80035a8:	93939393 	.word	0x93939393
 80035ac:	9393      	.short	0x9393
 80035ae:	83          	.byte	0x83
 80035af:	00          	.byte	0x00
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80035b0:	4a23      	ldr	r2, [pc, #140]	; (8003640 <HAL_RCCEx_PeriphCLKConfig+0x514>)
 80035b2:	6813      	ldr	r3, [r2, #0]
 80035b4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80035b8:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 80035ba:	f7fd f897 	bl	80006ec <HAL_GetTick>
 80035be:	4607      	mov	r7, r0
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80035c0:	4b1f      	ldr	r3, [pc, #124]	; (8003640 <HAL_RCCEx_PeriphCLKConfig+0x514>)
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	f413 7f80 	tst.w	r3, #256	; 0x100
 80035c8:	d105      	bne.n	80035d6 <HAL_RCCEx_PeriphCLKConfig+0x4aa>
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80035ca:	f7fd f88f 	bl	80006ec <HAL_GetTick>
 80035ce:	1bc0      	subs	r0, r0, r7
 80035d0:	2864      	cmp	r0, #100	; 0x64
 80035d2:	d9f5      	bls.n	80035c0 <HAL_RCCEx_PeriphCLKConfig+0x494>
        ret = HAL_TIMEOUT;
 80035d4:	2503      	movs	r5, #3
    if(ret == HAL_OK)
 80035d6:	2d00      	cmp	r5, #0
 80035d8:	d14f      	bne.n	800367a <HAL_RCCEx_PeriphCLKConfig+0x54e>
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 80035da:	4b18      	ldr	r3, [pc, #96]	; (800363c <HAL_RCCEx_PeriphCLKConfig+0x510>)
 80035dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80035de:	f8d4 20b0 	ldr.w	r2, [r4, #176]	; 0xb0
 80035e2:	4053      	eors	r3, r2
 80035e4:	f413 7f40 	tst.w	r3, #768	; 0x300
 80035e8:	d00c      	beq.n	8003604 <HAL_RCCEx_PeriphCLKConfig+0x4d8>
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80035ea:	4b14      	ldr	r3, [pc, #80]	; (800363c <HAL_RCCEx_PeriphCLKConfig+0x510>)
 80035ec:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80035ee:	f422 7240 	bic.w	r2, r2, #768	; 0x300
        __HAL_RCC_BACKUPRESET_FORCE();
 80035f2:	6f19      	ldr	r1, [r3, #112]	; 0x70
 80035f4:	f441 3180 	orr.w	r1, r1, #65536	; 0x10000
 80035f8:	6719      	str	r1, [r3, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 80035fa:	6f19      	ldr	r1, [r3, #112]	; 0x70
 80035fc:	f421 3180 	bic.w	r1, r1, #65536	; 0x10000
 8003600:	6719      	str	r1, [r3, #112]	; 0x70
        RCC->BDCR = tmpreg;
 8003602:	671a      	str	r2, [r3, #112]	; 0x70
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8003604:	f8d4 30b0 	ldr.w	r3, [r4, #176]	; 0xb0
 8003608:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800360c:	d01a      	beq.n	8003644 <HAL_RCCEx_PeriphCLKConfig+0x518>
      if(ret == HAL_OK)
 800360e:	2d00      	cmp	r5, #0
 8003610:	d135      	bne.n	800367e <HAL_RCCEx_PeriphCLKConfig+0x552>
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003612:	f8d4 30b0 	ldr.w	r3, [r4, #176]	; 0xb0
 8003616:	f403 7240 	and.w	r2, r3, #768	; 0x300
 800361a:	f5b2 7f40 	cmp.w	r2, #768	; 0x300
 800361e:	d022      	beq.n	8003666 <HAL_RCCEx_PeriphCLKConfig+0x53a>
 8003620:	4a06      	ldr	r2, [pc, #24]	; (800363c <HAL_RCCEx_PeriphCLKConfig+0x510>)
 8003622:	6913      	ldr	r3, [r2, #16]
 8003624:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8003628:	6113      	str	r3, [r2, #16]
 800362a:	4904      	ldr	r1, [pc, #16]	; (800363c <HAL_RCCEx_PeriphCLKConfig+0x510>)
 800362c:	6f0b      	ldr	r3, [r1, #112]	; 0x70
 800362e:	f8d4 20b0 	ldr.w	r2, [r4, #176]	; 0xb0
 8003632:	f3c2 020b 	ubfx	r2, r2, #0, #12
 8003636:	4313      	orrs	r3, r2
 8003638:	670b      	str	r3, [r1, #112]	; 0x70
 800363a:	e799      	b.n	8003570 <HAL_RCCEx_PeriphCLKConfig+0x444>
 800363c:	58024400 	.word	0x58024400
 8003640:	58024800 	.word	0x58024800
        tickstart = HAL_GetTick();
 8003644:	f7fd f852 	bl	80006ec <HAL_GetTick>
 8003648:	4607      	mov	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800364a:	4b87      	ldr	r3, [pc, #540]	; (8003868 <HAL_RCCEx_PeriphCLKConfig+0x73c>)
 800364c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800364e:	f013 0f02 	tst.w	r3, #2
 8003652:	d1dc      	bne.n	800360e <HAL_RCCEx_PeriphCLKConfig+0x4e2>
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003654:	f7fd f84a 	bl	80006ec <HAL_GetTick>
 8003658:	1bc0      	subs	r0, r0, r7
 800365a:	f241 3388 	movw	r3, #5000	; 0x1388
 800365e:	4298      	cmp	r0, r3
 8003660:	d9f3      	bls.n	800364a <HAL_RCCEx_PeriphCLKConfig+0x51e>
            ret = HAL_TIMEOUT;
 8003662:	2503      	movs	r5, #3
 8003664:	e7d3      	b.n	800360e <HAL_RCCEx_PeriphCLKConfig+0x4e2>
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003666:	4880      	ldr	r0, [pc, #512]	; (8003868 <HAL_RCCEx_PeriphCLKConfig+0x73c>)
 8003668:	6902      	ldr	r2, [r0, #16]
 800366a:	f422 527c 	bic.w	r2, r2, #16128	; 0x3f00
 800366e:	497f      	ldr	r1, [pc, #508]	; (800386c <HAL_RCCEx_PeriphCLKConfig+0x740>)
 8003670:	ea01 1313 	and.w	r3, r1, r3, lsr #4
 8003674:	4313      	orrs	r3, r2
 8003676:	6103      	str	r3, [r0, #16]
 8003678:	e7d7      	b.n	800362a <HAL_RCCEx_PeriphCLKConfig+0x4fe>
      status = ret;
 800367a:	462e      	mov	r6, r5
 800367c:	e778      	b.n	8003570 <HAL_RCCEx_PeriphCLKConfig+0x444>
        status = ret;
 800367e:	462e      	mov	r6, r5
 8003680:	e776      	b.n	8003570 <HAL_RCCEx_PeriphCLKConfig+0x444>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8003682:	2101      	movs	r1, #1
 8003684:	1d20      	adds	r0, r4, #4
 8003686:	f7ff fc45 	bl	8002f14 <RCCEx_PLL2_Config>
 800368a:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 800368c:	b9e5      	cbnz	r5, 80036c8 <HAL_RCCEx_PeriphCLKConfig+0x59c>
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 800368e:	4a76      	ldr	r2, [pc, #472]	; (8003868 <HAL_RCCEx_PeriphCLKConfig+0x73c>)
 8003690:	6d53      	ldr	r3, [r2, #84]	; 0x54
 8003692:	f023 0338 	bic.w	r3, r3, #56	; 0x38
 8003696:	6fa1      	ldr	r1, [r4, #120]	; 0x78
 8003698:	430b      	orrs	r3, r1
 800369a:	6553      	str	r3, [r2, #84]	; 0x54
 800369c:	e008      	b.n	80036b0 <HAL_RCCEx_PeriphCLKConfig+0x584>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800369e:	2101      	movs	r1, #1
 80036a0:	f104 0024 	add.w	r0, r4, #36	; 0x24
 80036a4:	f7ff fcbc 	bl	8003020 <RCCEx_PLL3_Config>
 80036a8:	4605      	mov	r5, r0
      break;
 80036aa:	e7ef      	b.n	800368c <HAL_RCCEx_PeriphCLKConfig+0x560>
    switch(PeriphClkInit->Usart16ClockSelection)
 80036ac:	2601      	movs	r6, #1
 80036ae:	4635      	mov	r5, r6
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 80036b0:	6823      	ldr	r3, [r4, #0]
 80036b2:	f013 0f02 	tst.w	r3, #2
 80036b6:	d022      	beq.n	80036fe <HAL_RCCEx_PeriphCLKConfig+0x5d2>
    switch(PeriphClkInit->Usart234578ClockSelection)
 80036b8:	6f63      	ldr	r3, [r4, #116]	; 0x74
 80036ba:	2b05      	cmp	r3, #5
 80036bc:	d81b      	bhi.n	80036f6 <HAL_RCCEx_PeriphCLKConfig+0x5ca>
 80036be:	e8df f003 	tbb	[pc, r3]
 80036c2:	050a      	.short	0x050a
 80036c4:	0a0a0a13 	.word	0x0a0a0a13
 80036c8:	462e      	mov	r6, r5
 80036ca:	e7f1      	b.n	80036b0 <HAL_RCCEx_PeriphCLKConfig+0x584>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80036cc:	2101      	movs	r1, #1
 80036ce:	1d20      	adds	r0, r4, #4
 80036d0:	f7ff fc20 	bl	8002f14 <RCCEx_PLL2_Config>
 80036d4:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 80036d6:	b98d      	cbnz	r5, 80036fc <HAL_RCCEx_PeriphCLKConfig+0x5d0>
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 80036d8:	4a63      	ldr	r2, [pc, #396]	; (8003868 <HAL_RCCEx_PeriphCLKConfig+0x73c>)
 80036da:	6d53      	ldr	r3, [r2, #84]	; 0x54
 80036dc:	f023 0307 	bic.w	r3, r3, #7
 80036e0:	6f61      	ldr	r1, [r4, #116]	; 0x74
 80036e2:	430b      	orrs	r3, r1
 80036e4:	6553      	str	r3, [r2, #84]	; 0x54
 80036e6:	e00a      	b.n	80036fe <HAL_RCCEx_PeriphCLKConfig+0x5d2>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80036e8:	2101      	movs	r1, #1
 80036ea:	f104 0024 	add.w	r0, r4, #36	; 0x24
 80036ee:	f7ff fc97 	bl	8003020 <RCCEx_PLL3_Config>
 80036f2:	4605      	mov	r5, r0
      break;
 80036f4:	e7ef      	b.n	80036d6 <HAL_RCCEx_PeriphCLKConfig+0x5aa>
    switch(PeriphClkInit->Usart234578ClockSelection)
 80036f6:	2601      	movs	r6, #1
 80036f8:	4635      	mov	r5, r6
 80036fa:	e000      	b.n	80036fe <HAL_RCCEx_PeriphCLKConfig+0x5d2>
 80036fc:	462e      	mov	r6, r5
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80036fe:	6823      	ldr	r3, [r4, #0]
 8003700:	f013 0f04 	tst.w	r3, #4
 8003704:	d022      	beq.n	800374c <HAL_RCCEx_PeriphCLKConfig+0x620>
    switch(PeriphClkInit->Lpuart1ClockSelection)
 8003706:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 800370a:	2b05      	cmp	r3, #5
 800370c:	d81a      	bhi.n	8003744 <HAL_RCCEx_PeriphCLKConfig+0x618>
 800370e:	e8df f003 	tbb	[pc, r3]
 8003712:	0308      	.short	0x0308
 8003714:	08080812 	.word	0x08080812
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8003718:	2101      	movs	r1, #1
 800371a:	1d20      	adds	r0, r4, #4
 800371c:	f7ff fbfa 	bl	8002f14 <RCCEx_PLL2_Config>
 8003720:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 8003722:	b995      	cbnz	r5, 800374a <HAL_RCCEx_PeriphCLKConfig+0x61e>
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003724:	4a50      	ldr	r2, [pc, #320]	; (8003868 <HAL_RCCEx_PeriphCLKConfig+0x73c>)
 8003726:	6d93      	ldr	r3, [r2, #88]	; 0x58
 8003728:	f023 0307 	bic.w	r3, r3, #7
 800372c:	f8d4 1090 	ldr.w	r1, [r4, #144]	; 0x90
 8003730:	430b      	orrs	r3, r1
 8003732:	6593      	str	r3, [r2, #88]	; 0x58
 8003734:	e00a      	b.n	800374c <HAL_RCCEx_PeriphCLKConfig+0x620>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8003736:	2101      	movs	r1, #1
 8003738:	f104 0024 	add.w	r0, r4, #36	; 0x24
 800373c:	f7ff fc70 	bl	8003020 <RCCEx_PLL3_Config>
 8003740:	4605      	mov	r5, r0
      break;
 8003742:	e7ee      	b.n	8003722 <HAL_RCCEx_PeriphCLKConfig+0x5f6>
    switch(PeriphClkInit->Lpuart1ClockSelection)
 8003744:	2601      	movs	r6, #1
 8003746:	4635      	mov	r5, r6
 8003748:	e000      	b.n	800374c <HAL_RCCEx_PeriphCLKConfig+0x620>
 800374a:	462e      	mov	r6, r5
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800374c:	6823      	ldr	r3, [r4, #0]
 800374e:	f013 0f20 	tst.w	r3, #32
 8003752:	d027      	beq.n	80037a4 <HAL_RCCEx_PeriphCLKConfig+0x678>
    switch(PeriphClkInit->Lptim1ClockSelection)
 8003754:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
 8003758:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800375c:	d040      	beq.n	80037e0 <HAL_RCCEx_PeriphCLKConfig+0x6b4>
 800375e:	d816      	bhi.n	800378e <HAL_RCCEx_PeriphCLKConfig+0x662>
 8003760:	b13b      	cbz	r3, 8003772 <HAL_RCCEx_PeriphCLKConfig+0x646>
 8003762:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003766:	d10f      	bne.n	8003788 <HAL_RCCEx_PeriphCLKConfig+0x65c>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003768:	2100      	movs	r1, #0
 800376a:	1d20      	adds	r0, r4, #4
 800376c:	f7ff fbd2 	bl	8002f14 <RCCEx_PLL2_Config>
 8003770:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 8003772:	2d00      	cmp	r5, #0
 8003774:	d13b      	bne.n	80037ee <HAL_RCCEx_PeriphCLKConfig+0x6c2>
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003776:	4a3c      	ldr	r2, [pc, #240]	; (8003868 <HAL_RCCEx_PeriphCLKConfig+0x73c>)
 8003778:	6d53      	ldr	r3, [r2, #84]	; 0x54
 800377a:	f023 43e0 	bic.w	r3, r3, #1879048192	; 0x70000000
 800377e:	f8d4 108c 	ldr.w	r1, [r4, #140]	; 0x8c
 8003782:	430b      	orrs	r3, r1
 8003784:	6553      	str	r3, [r2, #84]	; 0x54
 8003786:	e00d      	b.n	80037a4 <HAL_RCCEx_PeriphCLKConfig+0x678>
    switch(PeriphClkInit->Lptim1ClockSelection)
 8003788:	2601      	movs	r6, #1
 800378a:	4635      	mov	r5, r6
 800378c:	e00a      	b.n	80037a4 <HAL_RCCEx_PeriphCLKConfig+0x678>
 800378e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003792:	d0ee      	beq.n	8003772 <HAL_RCCEx_PeriphCLKConfig+0x646>
 8003794:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003798:	d0eb      	beq.n	8003772 <HAL_RCCEx_PeriphCLKConfig+0x646>
 800379a:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800379e:	d0e8      	beq.n	8003772 <HAL_RCCEx_PeriphCLKConfig+0x646>
 80037a0:	2601      	movs	r6, #1
 80037a2:	4635      	mov	r5, r6
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 80037a4:	6823      	ldr	r3, [r4, #0]
 80037a6:	f013 0f40 	tst.w	r3, #64	; 0x40
 80037aa:	d030      	beq.n	800380e <HAL_RCCEx_PeriphCLKConfig+0x6e2>
    switch(PeriphClkInit->Lptim2ClockSelection)
 80037ac:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
 80037b0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80037b4:	d04b      	beq.n	800384e <HAL_RCCEx_PeriphCLKConfig+0x722>
 80037b6:	d81f      	bhi.n	80037f8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>
 80037b8:	b13b      	cbz	r3, 80037ca <HAL_RCCEx_PeriphCLKConfig+0x69e>
 80037ba:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80037be:	d118      	bne.n	80037f2 <HAL_RCCEx_PeriphCLKConfig+0x6c6>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80037c0:	2100      	movs	r1, #0
 80037c2:	1d20      	adds	r0, r4, #4
 80037c4:	f7ff fba6 	bl	8002f14 <RCCEx_PLL2_Config>
 80037c8:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 80037ca:	2d00      	cmp	r5, #0
 80037cc:	d146      	bne.n	800385c <HAL_RCCEx_PeriphCLKConfig+0x730>
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80037ce:	4a26      	ldr	r2, [pc, #152]	; (8003868 <HAL_RCCEx_PeriphCLKConfig+0x73c>)
 80037d0:	6d93      	ldr	r3, [r2, #88]	; 0x58
 80037d2:	f423 53e0 	bic.w	r3, r3, #7168	; 0x1c00
 80037d6:	f8d4 1098 	ldr.w	r1, [r4, #152]	; 0x98
 80037da:	430b      	orrs	r3, r1
 80037dc:	6593      	str	r3, [r2, #88]	; 0x58
 80037de:	e016      	b.n	800380e <HAL_RCCEx_PeriphCLKConfig+0x6e2>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80037e0:	2102      	movs	r1, #2
 80037e2:	f104 0024 	add.w	r0, r4, #36	; 0x24
 80037e6:	f7ff fc1b 	bl	8003020 <RCCEx_PLL3_Config>
 80037ea:	4605      	mov	r5, r0
      break;
 80037ec:	e7c1      	b.n	8003772 <HAL_RCCEx_PeriphCLKConfig+0x646>
 80037ee:	462e      	mov	r6, r5
 80037f0:	e7d8      	b.n	80037a4 <HAL_RCCEx_PeriphCLKConfig+0x678>
    switch(PeriphClkInit->Lptim2ClockSelection)
 80037f2:	2601      	movs	r6, #1
 80037f4:	4635      	mov	r5, r6
 80037f6:	e00a      	b.n	800380e <HAL_RCCEx_PeriphCLKConfig+0x6e2>
 80037f8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80037fc:	d0e5      	beq.n	80037ca <HAL_RCCEx_PeriphCLKConfig+0x69e>
 80037fe:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8003802:	d0e2      	beq.n	80037ca <HAL_RCCEx_PeriphCLKConfig+0x69e>
 8003804:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003808:	d0df      	beq.n	80037ca <HAL_RCCEx_PeriphCLKConfig+0x69e>
 800380a:	2601      	movs	r6, #1
 800380c:	4635      	mov	r5, r6
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 800380e:	6823      	ldr	r3, [r4, #0]
 8003810:	f013 0f80 	tst.w	r3, #128	; 0x80
 8003814:	d037      	beq.n	8003886 <HAL_RCCEx_PeriphCLKConfig+0x75a>
    switch(PeriphClkInit->Lptim345ClockSelection)
 8003816:	f8d4 309c 	ldr.w	r3, [r4, #156]	; 0x9c
 800381a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800381e:	f000 80a2 	beq.w	8003966 <HAL_RCCEx_PeriphCLKConfig+0x83a>
 8003822:	d825      	bhi.n	8003870 <HAL_RCCEx_PeriphCLKConfig+0x744>
 8003824:	b13b      	cbz	r3, 8003836 <HAL_RCCEx_PeriphCLKConfig+0x70a>
 8003826:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800382a:	d119      	bne.n	8003860 <HAL_RCCEx_PeriphCLKConfig+0x734>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800382c:	2100      	movs	r1, #0
 800382e:	1d20      	adds	r0, r4, #4
 8003830:	f7ff fb70 	bl	8002f14 <RCCEx_PLL2_Config>
 8003834:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 8003836:	2d00      	cmp	r5, #0
 8003838:	f040 809c 	bne.w	8003974 <HAL_RCCEx_PeriphCLKConfig+0x848>
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 800383c:	4a0a      	ldr	r2, [pc, #40]	; (8003868 <HAL_RCCEx_PeriphCLKConfig+0x73c>)
 800383e:	6d93      	ldr	r3, [r2, #88]	; 0x58
 8003840:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8003844:	f8d4 109c 	ldr.w	r1, [r4, #156]	; 0x9c
 8003848:	430b      	orrs	r3, r1
 800384a:	6593      	str	r3, [r2, #88]	; 0x58
 800384c:	e01b      	b.n	8003886 <HAL_RCCEx_PeriphCLKConfig+0x75a>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800384e:	2102      	movs	r1, #2
 8003850:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8003854:	f7ff fbe4 	bl	8003020 <RCCEx_PLL3_Config>
 8003858:	4605      	mov	r5, r0
      break;
 800385a:	e7b6      	b.n	80037ca <HAL_RCCEx_PeriphCLKConfig+0x69e>
 800385c:	462e      	mov	r6, r5
 800385e:	e7d6      	b.n	800380e <HAL_RCCEx_PeriphCLKConfig+0x6e2>
    switch(PeriphClkInit->Lptim345ClockSelection)
 8003860:	2601      	movs	r6, #1
 8003862:	4635      	mov	r5, r6
 8003864:	e00f      	b.n	8003886 <HAL_RCCEx_PeriphCLKConfig+0x75a>
 8003866:	bf00      	nop
 8003868:	58024400 	.word	0x58024400
 800386c:	00ffffcf 	.word	0x00ffffcf
 8003870:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003874:	d0df      	beq.n	8003836 <HAL_RCCEx_PeriphCLKConfig+0x70a>
 8003876:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800387a:	d0dc      	beq.n	8003836 <HAL_RCCEx_PeriphCLKConfig+0x70a>
 800387c:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8003880:	d0d9      	beq.n	8003836 <HAL_RCCEx_PeriphCLKConfig+0x70a>
 8003882:	2601      	movs	r6, #1
 8003884:	4635      	mov	r5, r6
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8003886:	6823      	ldr	r3, [r4, #0]
 8003888:	f013 0f08 	tst.w	r3, #8
 800388c:	d00c      	beq.n	80038a8 <HAL_RCCEx_PeriphCLKConfig+0x77c>
    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 800388e:	f8d4 3080 	ldr.w	r3, [r4, #128]	; 0x80
 8003892:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003896:	d06f      	beq.n	8003978 <HAL_RCCEx_PeriphCLKConfig+0x84c>
      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8003898:	4a8e      	ldr	r2, [pc, #568]	; (8003ad4 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 800389a:	6d53      	ldr	r3, [r2, #84]	; 0x54
 800389c:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80038a0:	f8d4 1080 	ldr.w	r1, [r4, #128]	; 0x80
 80038a4:	430b      	orrs	r3, r1
 80038a6:	6553      	str	r3, [r2, #84]	; 0x54
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80038a8:	6823      	ldr	r3, [r4, #0]
 80038aa:	f013 0f10 	tst.w	r3, #16
 80038ae:	d00c      	beq.n	80038ca <HAL_RCCEx_PeriphCLKConfig+0x79e>
    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 80038b0:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
 80038b4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80038b8:	d067      	beq.n	800398a <HAL_RCCEx_PeriphCLKConfig+0x85e>
      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80038ba:	4a86      	ldr	r2, [pc, #536]	; (8003ad4 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 80038bc:	6d93      	ldr	r3, [r2, #88]	; 0x58
 80038be:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80038c2:	f8d4 1094 	ldr.w	r1, [r4, #148]	; 0x94
 80038c6:	430b      	orrs	r3, r1
 80038c8:	6593      	str	r3, [r2, #88]	; 0x58
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80038ca:	6823      	ldr	r3, [r4, #0]
 80038cc:	f413 2f00 	tst.w	r3, #524288	; 0x80000
 80038d0:	d00b      	beq.n	80038ea <HAL_RCCEx_PeriphCLKConfig+0x7be>
    switch(PeriphClkInit->AdcClockSelection)
 80038d2:	f8d4 30a0 	ldr.w	r3, [r4, #160]	; 0xa0
 80038d6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80038da:	d06e      	beq.n	80039ba <HAL_RCCEx_PeriphCLKConfig+0x88e>
 80038dc:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80038e0:	d061      	beq.n	80039a6 <HAL_RCCEx_PeriphCLKConfig+0x87a>
 80038e2:	2b00      	cmp	r3, #0
 80038e4:	d05a      	beq.n	800399c <HAL_RCCEx_PeriphCLKConfig+0x870>
 80038e6:	2601      	movs	r6, #1
 80038e8:	4635      	mov	r5, r6
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80038ea:	6823      	ldr	r3, [r4, #0]
 80038ec:	f413 2f80 	tst.w	r3, #262144	; 0x40000
 80038f0:	d00c      	beq.n	800390c <HAL_RCCEx_PeriphCLKConfig+0x7e0>
    switch(PeriphClkInit->UsbClockSelection)
 80038f2:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
 80038f6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80038fa:	d076      	beq.n	80039ea <HAL_RCCEx_PeriphCLKConfig+0x8be>
 80038fc:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8003900:	d069      	beq.n	80039d6 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
 8003902:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003906:	d061      	beq.n	80039cc <HAL_RCCEx_PeriphCLKConfig+0x8a0>
 8003908:	2601      	movs	r6, #1
 800390a:	4635      	mov	r5, r6
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800390c:	6823      	ldr	r3, [r4, #0]
 800390e:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 8003912:	d007      	beq.n	8003924 <HAL_RCCEx_PeriphCLKConfig+0x7f8>
    switch(PeriphClkInit->SdmmcClockSelection)
 8003914:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8003916:	2b00      	cmp	r3, #0
 8003918:	d070      	beq.n	80039fc <HAL_RCCEx_PeriphCLKConfig+0x8d0>
 800391a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800391e:	d07b      	beq.n	8003a18 <HAL_RCCEx_PeriphCLKConfig+0x8ec>
 8003920:	2601      	movs	r6, #1
 8003922:	4635      	mov	r5, r6
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8003924:	6823      	ldr	r3, [r4, #0]
 8003926:	f013 5f00 	tst.w	r3, #536870912	; 0x20000000
 800392a:	d17d      	bne.n	8003a28 <HAL_RCCEx_PeriphCLKConfig+0x8fc>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800392c:	6823      	ldr	r3, [r4, #0]
 800392e:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8003932:	f000 8086 	beq.w	8003a42 <HAL_RCCEx_PeriphCLKConfig+0x916>
    switch(PeriphClkInit->RngClockSelection)
 8003936:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
 8003938:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800393c:	f000 80ba 	beq.w	8003ab4 <HAL_RCCEx_PeriphCLKConfig+0x988>
 8003940:	d97c      	bls.n	8003a3c <HAL_RCCEx_PeriphCLKConfig+0x910>
 8003942:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003946:	d003      	beq.n	8003950 <HAL_RCCEx_PeriphCLKConfig+0x824>
 8003948:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800394c:	f040 80b0 	bne.w	8003ab0 <HAL_RCCEx_PeriphCLKConfig+0x984>
    if(ret == HAL_OK)
 8003950:	2d00      	cmp	r5, #0
 8003952:	f040 80b5 	bne.w	8003ac0 <HAL_RCCEx_PeriphCLKConfig+0x994>
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003956:	4a5f      	ldr	r2, [pc, #380]	; (8003ad4 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 8003958:	6d53      	ldr	r3, [r2, #84]	; 0x54
 800395a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800395e:	6fe1      	ldr	r1, [r4, #124]	; 0x7c
 8003960:	430b      	orrs	r3, r1
 8003962:	6553      	str	r3, [r2, #84]	; 0x54
 8003964:	e06d      	b.n	8003a42 <HAL_RCCEx_PeriphCLKConfig+0x916>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8003966:	2102      	movs	r1, #2
 8003968:	f104 0024 	add.w	r0, r4, #36	; 0x24
 800396c:	f7ff fb58 	bl	8003020 <RCCEx_PLL3_Config>
 8003970:	4605      	mov	r5, r0
      break;
 8003972:	e760      	b.n	8003836 <HAL_RCCEx_PeriphCLKConfig+0x70a>
 8003974:	462e      	mov	r6, r5
 8003976:	e786      	b.n	8003886 <HAL_RCCEx_PeriphCLKConfig+0x75a>
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8003978:	2102      	movs	r1, #2
 800397a:	f104 0024 	add.w	r0, r4, #36	; 0x24
 800397e:	f7ff fb4f 	bl	8003020 <RCCEx_PLL3_Config>
 8003982:	2800      	cmp	r0, #0
 8003984:	d088      	beq.n	8003898 <HAL_RCCEx_PeriphCLKConfig+0x76c>
          status = HAL_ERROR;
 8003986:	2601      	movs	r6, #1
 8003988:	e786      	b.n	8003898 <HAL_RCCEx_PeriphCLKConfig+0x76c>
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 800398a:	2102      	movs	r1, #2
 800398c:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8003990:	f7ff fb46 	bl	8003020 <RCCEx_PLL3_Config>
 8003994:	2800      	cmp	r0, #0
 8003996:	d090      	beq.n	80038ba <HAL_RCCEx_PeriphCLKConfig+0x78e>
        status = HAL_ERROR;
 8003998:	2601      	movs	r6, #1
 800399a:	e78e      	b.n	80038ba <HAL_RCCEx_PeriphCLKConfig+0x78e>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800399c:	2100      	movs	r1, #0
 800399e:	1d20      	adds	r0, r4, #4
 80039a0:	f7ff fab8 	bl	8002f14 <RCCEx_PLL2_Config>
 80039a4:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 80039a6:	b97d      	cbnz	r5, 80039c8 <HAL_RCCEx_PeriphCLKConfig+0x89c>
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80039a8:	4a4a      	ldr	r2, [pc, #296]	; (8003ad4 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 80039aa:	6d93      	ldr	r3, [r2, #88]	; 0x58
 80039ac:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 80039b0:	f8d4 10a0 	ldr.w	r1, [r4, #160]	; 0xa0
 80039b4:	430b      	orrs	r3, r1
 80039b6:	6593      	str	r3, [r2, #88]	; 0x58
 80039b8:	e797      	b.n	80038ea <HAL_RCCEx_PeriphCLKConfig+0x7be>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80039ba:	2102      	movs	r1, #2
 80039bc:	f104 0024 	add.w	r0, r4, #36	; 0x24
 80039c0:	f7ff fb2e 	bl	8003020 <RCCEx_PLL3_Config>
 80039c4:	4605      	mov	r5, r0
      break;
 80039c6:	e7ee      	b.n	80039a6 <HAL_RCCEx_PeriphCLKConfig+0x87a>
 80039c8:	462e      	mov	r6, r5
 80039ca:	e78e      	b.n	80038ea <HAL_RCCEx_PeriphCLKConfig+0x7be>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80039cc:	4a41      	ldr	r2, [pc, #260]	; (8003ad4 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 80039ce:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 80039d0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80039d4:	62d3      	str	r3, [r2, #44]	; 0x2c
    if(ret == HAL_OK)
 80039d6:	b97d      	cbnz	r5, 80039f8 <HAL_RCCEx_PeriphCLKConfig+0x8cc>
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80039d8:	4a3e      	ldr	r2, [pc, #248]	; (8003ad4 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 80039da:	6d53      	ldr	r3, [r2, #84]	; 0x54
 80039dc:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 80039e0:	f8d4 1084 	ldr.w	r1, [r4, #132]	; 0x84
 80039e4:	430b      	orrs	r3, r1
 80039e6:	6553      	str	r3, [r2, #84]	; 0x54
 80039e8:	e790      	b.n	800390c <HAL_RCCEx_PeriphCLKConfig+0x7e0>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80039ea:	2101      	movs	r1, #1
 80039ec:	f104 0024 	add.w	r0, r4, #36	; 0x24
 80039f0:	f7ff fb16 	bl	8003020 <RCCEx_PLL3_Config>
 80039f4:	4605      	mov	r5, r0
      break;
 80039f6:	e7ee      	b.n	80039d6 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
 80039f8:	462e      	mov	r6, r5
 80039fa:	e787      	b.n	800390c <HAL_RCCEx_PeriphCLKConfig+0x7e0>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80039fc:	4a35      	ldr	r2, [pc, #212]	; (8003ad4 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 80039fe:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8003a00:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003a04:	62d3      	str	r3, [r2, #44]	; 0x2c
    if(ret == HAL_OK)
 8003a06:	b96d      	cbnz	r5, 8003a24 <HAL_RCCEx_PeriphCLKConfig+0x8f8>
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8003a08:	4a32      	ldr	r2, [pc, #200]	; (8003ad4 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 8003a0a:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 8003a0c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003a10:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 8003a12:	430b      	orrs	r3, r1
 8003a14:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003a16:	e785      	b.n	8003924 <HAL_RCCEx_PeriphCLKConfig+0x7f8>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8003a18:	2102      	movs	r1, #2
 8003a1a:	1d20      	adds	r0, r4, #4
 8003a1c:	f7ff fa7a 	bl	8002f14 <RCCEx_PLL2_Config>
 8003a20:	4605      	mov	r5, r0
      break;
 8003a22:	e7f0      	b.n	8003a06 <HAL_RCCEx_PeriphCLKConfig+0x8da>
 8003a24:	462e      	mov	r6, r5
 8003a26:	e77d      	b.n	8003924 <HAL_RCCEx_PeriphCLKConfig+0x7f8>
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 8003a28:	2102      	movs	r1, #2
 8003a2a:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8003a2e:	f7ff faf7 	bl	8003020 <RCCEx_PLL3_Config>
 8003a32:	2800      	cmp	r0, #0
 8003a34:	f43f af7a 	beq.w	800392c <HAL_RCCEx_PeriphCLKConfig+0x800>
      status=HAL_ERROR;
 8003a38:	2601      	movs	r6, #1
 8003a3a:	e777      	b.n	800392c <HAL_RCCEx_PeriphCLKConfig+0x800>
    switch(PeriphClkInit->RngClockSelection)
 8003a3c:	2b00      	cmp	r3, #0
 8003a3e:	d087      	beq.n	8003950 <HAL_RCCEx_PeriphCLKConfig+0x824>
 8003a40:	2601      	movs	r6, #1
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8003a42:	6823      	ldr	r3, [r4, #0]
 8003a44:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8003a48:	d006      	beq.n	8003a58 <HAL_RCCEx_PeriphCLKConfig+0x92c>
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8003a4a:	4a22      	ldr	r2, [pc, #136]	; (8003ad4 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 8003a4c:	6d13      	ldr	r3, [r2, #80]	; 0x50
 8003a4e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8003a52:	6f21      	ldr	r1, [r4, #112]	; 0x70
 8003a54:	430b      	orrs	r3, r1
 8003a56:	6513      	str	r3, [r2, #80]	; 0x50
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8003a58:	6823      	ldr	r3, [r4, #0]
 8003a5a:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 8003a5e:	d007      	beq.n	8003a70 <HAL_RCCEx_PeriphCLKConfig+0x944>
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8003a60:	4a1c      	ldr	r2, [pc, #112]	; (8003ad4 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 8003a62:	6913      	ldr	r3, [r2, #16]
 8003a64:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003a68:	f8d4 10b4 	ldr.w	r1, [r4, #180]	; 0xb4
 8003a6c:	430b      	orrs	r3, r1
 8003a6e:	6113      	str	r3, [r2, #16]
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8003a70:	6823      	ldr	r3, [r4, #0]
 8003a72:	f413 1f00 	tst.w	r3, #2097152	; 0x200000
 8003a76:	d006      	beq.n	8003a86 <HAL_RCCEx_PeriphCLKConfig+0x95a>
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8003a78:	4a16      	ldr	r2, [pc, #88]	; (8003ad4 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 8003a7a:	6d13      	ldr	r3, [r2, #80]	; 0x50
 8003a7c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003a80:	6ea1      	ldr	r1, [r4, #104]	; 0x68
 8003a82:	430b      	orrs	r3, r1
 8003a84:	6513      	str	r3, [r2, #80]	; 0x50
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8003a86:	6823      	ldr	r3, [r4, #0]
 8003a88:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 8003a8c:	d009      	beq.n	8003aa2 <HAL_RCCEx_PeriphCLKConfig+0x976>
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8003a8e:	4b11      	ldr	r3, [pc, #68]	; (8003ad4 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 8003a90:	691a      	ldr	r2, [r3, #16]
 8003a92:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003a96:	611a      	str	r2, [r3, #16]
 8003a98:	691a      	ldr	r2, [r3, #16]
 8003a9a:	f8d4 10b8 	ldr.w	r1, [r4, #184]	; 0xb8
 8003a9e:	430a      	orrs	r2, r1
 8003aa0:	611a      	str	r2, [r3, #16]
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8003aa2:	6823      	ldr	r3, [r4, #0]
 8003aa4:	2b00      	cmp	r3, #0
 8003aa6:	db0d      	blt.n	8003ac4 <HAL_RCCEx_PeriphCLKConfig+0x998>
  if (status == HAL_OK)
 8003aa8:	b106      	cbz	r6, 8003aac <HAL_RCCEx_PeriphCLKConfig+0x980>
  return HAL_ERROR;
 8003aaa:	2601      	movs	r6, #1
}
 8003aac:	4630      	mov	r0, r6
 8003aae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    switch(PeriphClkInit->RngClockSelection)
 8003ab0:	2601      	movs	r6, #1
 8003ab2:	e7c6      	b.n	8003a42 <HAL_RCCEx_PeriphCLKConfig+0x916>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003ab4:	4a07      	ldr	r2, [pc, #28]	; (8003ad4 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 8003ab6:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8003ab8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003abc:	62d3      	str	r3, [r2, #44]	; 0x2c
      break;
 8003abe:	e747      	b.n	8003950 <HAL_RCCEx_PeriphCLKConfig+0x824>
 8003ac0:	462e      	mov	r6, r5
 8003ac2:	e7be      	b.n	8003a42 <HAL_RCCEx_PeriphCLKConfig+0x916>
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8003ac4:	4a03      	ldr	r2, [pc, #12]	; (8003ad4 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 8003ac6:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 8003ac8:	f023 5340 	bic.w	r3, r3, #805306368	; 0x30000000
 8003acc:	6d21      	ldr	r1, [r4, #80]	; 0x50
 8003ace:	430b      	orrs	r3, r1
 8003ad0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003ad2:	e7e9      	b.n	8003aa8 <HAL_RCCEx_PeriphCLKConfig+0x97c>
 8003ad4:	58024400 	.word	0x58024400

08003ad8 <HAL_RCCEx_GetD3PCLK1Freq>:
{
 8003ad8:	b508      	push	{r3, lr}
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8003ada:	f7ff f9ab 	bl	8002e34 <HAL_RCC_GetHCLKFreq>
 8003ade:	4b05      	ldr	r3, [pc, #20]	; (8003af4 <HAL_RCCEx_GetD3PCLK1Freq+0x1c>)
 8003ae0:	6a1b      	ldr	r3, [r3, #32]
 8003ae2:	f3c3 1302 	ubfx	r3, r3, #4, #3
 8003ae6:	4a04      	ldr	r2, [pc, #16]	; (8003af8 <HAL_RCCEx_GetD3PCLK1Freq+0x20>)
 8003ae8:	5cd3      	ldrb	r3, [r2, r3]
 8003aea:	f003 031f 	and.w	r3, r3, #31
}
 8003aee:	40d8      	lsrs	r0, r3
 8003af0:	bd08      	pop	{r3, pc}
 8003af2:	bf00      	nop
 8003af4:	58024400 	.word	0x58024400
 8003af8:	08009204 	.word	0x08009204

08003afc <HAL_RCCEx_GetPLL2ClockFreq>:
{
 8003afc:	b430      	push	{r4, r5}
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8003afe:	4a78      	ldr	r2, [pc, #480]	; (8003ce0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>)
 8003b00:	6a91      	ldr	r1, [r2, #40]	; 0x28
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 8003b02:	6a94      	ldr	r4, [r2, #40]	; 0x28
 8003b04:	f3c4 3505 	ubfx	r5, r4, #12, #6
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8003b08:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8003b0a:	f3c3 1300 	ubfx	r3, r3, #4, #1
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 8003b0e:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8003b10:	f3c2 02cc 	ubfx	r2, r2, #3, #13
 8003b14:	fb03 f302 	mul.w	r3, r3, r2
  if (pll2m != 0U)
 8003b18:	f414 3f7c 	tst.w	r4, #258048	; 0x3f000
 8003b1c:	f000 80da 	beq.w	8003cd4 <HAL_RCCEx_GetPLL2ClockFreq+0x1d8>
 8003b20:	f001 0103 	and.w	r1, r1, #3
 8003b24:	ee07 3a90 	vmov	s15, r3
 8003b28:	eef8 7a67 	vcvt.f32.u32	s15, s15
    switch (pllsource)
 8003b2c:	2901      	cmp	r1, #1
 8003b2e:	d066      	beq.n	8003bfe <HAL_RCCEx_GetPLL2ClockFreq+0x102>
 8003b30:	2902      	cmp	r1, #2
 8003b32:	f000 80b2 	beq.w	8003c9a <HAL_RCCEx_GetPLL2ClockFreq+0x19e>
 8003b36:	b1e1      	cbz	r1, 8003b72 <HAL_RCCEx_GetPLL2ClockFreq+0x76>
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8003b38:	ee07 5a10 	vmov	s14, r5
 8003b3c:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 8003b40:	ed9f 6a68 	vldr	s12, [pc, #416]	; 8003ce4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e8>
 8003b44:	eec6 6a07 	vdiv.f32	s13, s12, s14
 8003b48:	4b65      	ldr	r3, [pc, #404]	; (8003ce0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>)
 8003b4a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b4c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003b50:	ee07 3a10 	vmov	s14, r3
 8003b54:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 8003b58:	ed9f 6a63 	vldr	s12, [pc, #396]	; 8003ce8 <HAL_RCCEx_GetPLL2ClockFreq+0x1ec>
 8003b5c:	ee67 7a86 	vmul.f32	s15, s15, s12
 8003b60:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003b64:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003b68:	ee77 7a87 	vadd.f32	s15, s15, s14
 8003b6c:	ee66 6aa7 	vmul.f32	s13, s13, s15
      break;
 8003b70:	e061      	b.n	8003c36 <HAL_RCCEx_GetPLL2ClockFreq+0x13a>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003b72:	4b5b      	ldr	r3, [pc, #364]	; (8003ce0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>)
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	f013 0f20 	tst.w	r3, #32
 8003b7a:	d023      	beq.n	8003bc4 <HAL_RCCEx_GetPLL2ClockFreq+0xc8>
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8003b7c:	4958      	ldr	r1, [pc, #352]	; (8003ce0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>)
 8003b7e:	680a      	ldr	r2, [r1, #0]
 8003b80:	f3c2 02c1 	ubfx	r2, r2, #3, #2
 8003b84:	4b59      	ldr	r3, [pc, #356]	; (8003cec <HAL_RCCEx_GetPLL2ClockFreq+0x1f0>)
 8003b86:	40d3      	lsrs	r3, r2
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8003b88:	ee07 3a10 	vmov	s14, r3
 8003b8c:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 8003b90:	ee06 5a90 	vmov	s13, r5
 8003b94:	eeb8 6a66 	vcvt.f32.u32	s12, s13
 8003b98:	eec7 6a06 	vdiv.f32	s13, s14, s12
 8003b9c:	6b8b      	ldr	r3, [r1, #56]	; 0x38
 8003b9e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003ba2:	ee07 3a10 	vmov	s14, r3
 8003ba6:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 8003baa:	ed9f 6a4f 	vldr	s12, [pc, #316]	; 8003ce8 <HAL_RCCEx_GetPLL2ClockFreq+0x1ec>
 8003bae:	ee67 7a86 	vmul.f32	s15, s15, s12
 8003bb2:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003bb6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003bba:	ee77 7a87 	vadd.f32	s15, s15, s14
 8003bbe:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8003bc2:	e038      	b.n	8003c36 <HAL_RCCEx_GetPLL2ClockFreq+0x13a>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8003bc4:	ee07 5a10 	vmov	s14, r5
 8003bc8:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 8003bcc:	ed9f 6a48 	vldr	s12, [pc, #288]	; 8003cf0 <HAL_RCCEx_GetPLL2ClockFreq+0x1f4>
 8003bd0:	eec6 6a07 	vdiv.f32	s13, s12, s14
 8003bd4:	4b42      	ldr	r3, [pc, #264]	; (8003ce0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>)
 8003bd6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003bd8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003bdc:	ee07 3a10 	vmov	s14, r3
 8003be0:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 8003be4:	ed9f 6a40 	vldr	s12, [pc, #256]	; 8003ce8 <HAL_RCCEx_GetPLL2ClockFreq+0x1ec>
 8003be8:	ee67 7a86 	vmul.f32	s15, s15, s12
 8003bec:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003bf0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003bf4:	ee77 7a87 	vadd.f32	s15, s15, s14
 8003bf8:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8003bfc:	e01b      	b.n	8003c36 <HAL_RCCEx_GetPLL2ClockFreq+0x13a>
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8003bfe:	ee07 5a10 	vmov	s14, r5
 8003c02:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 8003c06:	ed9f 6a37 	vldr	s12, [pc, #220]	; 8003ce4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e8>
 8003c0a:	eec6 6a07 	vdiv.f32	s13, s12, s14
 8003c0e:	4b34      	ldr	r3, [pc, #208]	; (8003ce0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>)
 8003c10:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c12:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003c16:	ee07 3a10 	vmov	s14, r3
 8003c1a:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 8003c1e:	ed9f 6a32 	vldr	s12, [pc, #200]	; 8003ce8 <HAL_RCCEx_GetPLL2ClockFreq+0x1ec>
 8003c22:	ee67 7a86 	vmul.f32	s15, s15, s12
 8003c26:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003c2a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003c2e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8003c32:	ee66 6aa7 	vmul.f32	s13, s13, s15
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 8003c36:	4a2a      	ldr	r2, [pc, #168]	; (8003ce0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>)
 8003c38:	6b93      	ldr	r3, [r2, #56]	; 0x38
 8003c3a:	f3c3 2346 	ubfx	r3, r3, #9, #7
 8003c3e:	ee07 3a10 	vmov	s14, r3
 8003c42:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 8003c46:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 8003c4a:	ee37 7a06 	vadd.f32	s14, s14, s12
 8003c4e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003c52:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003c56:	edc0 7a00 	vstr	s15, [r0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 8003c5a:	6b93      	ldr	r3, [r2, #56]	; 0x38
 8003c5c:	f3c3 4306 	ubfx	r3, r3, #16, #7
 8003c60:	ee07 3a10 	vmov	s14, r3
 8003c64:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 8003c68:	ee37 7a06 	vadd.f32	s14, s14, s12
 8003c6c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003c70:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003c74:	edc0 7a01 	vstr	s15, [r0, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 8003c78:	6b93      	ldr	r3, [r2, #56]	; 0x38
 8003c7a:	f3c3 6306 	ubfx	r3, r3, #24, #7
 8003c7e:	ee07 3a90 	vmov	s15, r3
 8003c82:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003c86:	ee77 7a86 	vadd.f32	s15, s15, s12
 8003c8a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003c8e:	eebc 7ac7 	vcvt.u32.f32	s14, s14
 8003c92:	ed80 7a02 	vstr	s14, [r0, #8]
}
 8003c96:	bc30      	pop	{r4, r5}
 8003c98:	4770      	bx	lr
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8003c9a:	ee07 5a10 	vmov	s14, r5
 8003c9e:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 8003ca2:	ed9f 6a14 	vldr	s12, [pc, #80]	; 8003cf4 <HAL_RCCEx_GetPLL2ClockFreq+0x1f8>
 8003ca6:	eec6 6a07 	vdiv.f32	s13, s12, s14
 8003caa:	4b0d      	ldr	r3, [pc, #52]	; (8003ce0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>)
 8003cac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003cae:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003cb2:	ee07 3a10 	vmov	s14, r3
 8003cb6:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 8003cba:	ed9f 6a0b 	vldr	s12, [pc, #44]	; 8003ce8 <HAL_RCCEx_GetPLL2ClockFreq+0x1ec>
 8003cbe:	ee67 7a86 	vmul.f32	s15, s15, s12
 8003cc2:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003cc6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003cca:	ee77 7a87 	vadd.f32	s15, s15, s14
 8003cce:	ee66 6aa7 	vmul.f32	s13, s13, s15
      break;
 8003cd2:	e7b0      	b.n	8003c36 <HAL_RCCEx_GetPLL2ClockFreq+0x13a>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8003cd4:	2300      	movs	r3, #0
 8003cd6:	6003      	str	r3, [r0, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8003cd8:	6043      	str	r3, [r0, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8003cda:	6083      	str	r3, [r0, #8]
}
 8003cdc:	e7db      	b.n	8003c96 <HAL_RCCEx_GetPLL2ClockFreq+0x19a>
 8003cde:	bf00      	nop
 8003ce0:	58024400 	.word	0x58024400
 8003ce4:	4a742400 	.word	0x4a742400
 8003ce8:	39000000 	.word	0x39000000
 8003cec:	03d09000 	.word	0x03d09000
 8003cf0:	4c742400 	.word	0x4c742400
 8003cf4:	4af42400 	.word	0x4af42400

08003cf8 <HAL_RCCEx_GetPLL3ClockFreq>:
{
 8003cf8:	b430      	push	{r4, r5}
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8003cfa:	4a78      	ldr	r2, [pc, #480]	; (8003edc <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>)
 8003cfc:	6a91      	ldr	r1, [r2, #40]	; 0x28
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 8003cfe:	6a94      	ldr	r4, [r2, #40]	; 0x28
 8003d00:	f3c4 5505 	ubfx	r5, r4, #20, #6
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8003d04:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8003d06:	f3c3 2300 	ubfx	r3, r3, #8, #1
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 8003d0a:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8003d0c:	f3c2 02cc 	ubfx	r2, r2, #3, #13
 8003d10:	fb03 f302 	mul.w	r3, r3, r2
  if (pll3m != 0U)
 8003d14:	f014 7f7c 	tst.w	r4, #66060288	; 0x3f00000
 8003d18:	f000 80da 	beq.w	8003ed0 <HAL_RCCEx_GetPLL3ClockFreq+0x1d8>
 8003d1c:	f001 0103 	and.w	r1, r1, #3
 8003d20:	ee07 3a90 	vmov	s15, r3
 8003d24:	eef8 7a67 	vcvt.f32.u32	s15, s15
    switch (pllsource)
 8003d28:	2901      	cmp	r1, #1
 8003d2a:	d066      	beq.n	8003dfa <HAL_RCCEx_GetPLL3ClockFreq+0x102>
 8003d2c:	2902      	cmp	r1, #2
 8003d2e:	f000 80b2 	beq.w	8003e96 <HAL_RCCEx_GetPLL3ClockFreq+0x19e>
 8003d32:	b1e1      	cbz	r1, 8003d6e <HAL_RCCEx_GetPLL3ClockFreq+0x76>
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8003d34:	ee07 5a10 	vmov	s14, r5
 8003d38:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 8003d3c:	ed9f 6a68 	vldr	s12, [pc, #416]	; 8003ee0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e8>
 8003d40:	eec6 6a07 	vdiv.f32	s13, s12, s14
 8003d44:	4b65      	ldr	r3, [pc, #404]	; (8003edc <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>)
 8003d46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d48:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003d4c:	ee07 3a10 	vmov	s14, r3
 8003d50:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 8003d54:	ed9f 6a63 	vldr	s12, [pc, #396]	; 8003ee4 <HAL_RCCEx_GetPLL3ClockFreq+0x1ec>
 8003d58:	ee67 7a86 	vmul.f32	s15, s15, s12
 8003d5c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003d60:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003d64:	ee77 7a87 	vadd.f32	s15, s15, s14
 8003d68:	ee66 6aa7 	vmul.f32	s13, s13, s15
      break;
 8003d6c:	e061      	b.n	8003e32 <HAL_RCCEx_GetPLL3ClockFreq+0x13a>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003d6e:	4b5b      	ldr	r3, [pc, #364]	; (8003edc <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>)
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	f013 0f20 	tst.w	r3, #32
 8003d76:	d023      	beq.n	8003dc0 <HAL_RCCEx_GetPLL3ClockFreq+0xc8>
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8003d78:	4958      	ldr	r1, [pc, #352]	; (8003edc <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>)
 8003d7a:	680a      	ldr	r2, [r1, #0]
 8003d7c:	f3c2 02c1 	ubfx	r2, r2, #3, #2
 8003d80:	4b59      	ldr	r3, [pc, #356]	; (8003ee8 <HAL_RCCEx_GetPLL3ClockFreq+0x1f0>)
 8003d82:	40d3      	lsrs	r3, r2
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8003d84:	ee07 3a10 	vmov	s14, r3
 8003d88:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 8003d8c:	ee06 5a90 	vmov	s13, r5
 8003d90:	eeb8 6a66 	vcvt.f32.u32	s12, s13
 8003d94:	eec7 6a06 	vdiv.f32	s13, s14, s12
 8003d98:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8003d9a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003d9e:	ee07 3a10 	vmov	s14, r3
 8003da2:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 8003da6:	ed9f 6a4f 	vldr	s12, [pc, #316]	; 8003ee4 <HAL_RCCEx_GetPLL3ClockFreq+0x1ec>
 8003daa:	ee67 7a86 	vmul.f32	s15, s15, s12
 8003dae:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003db2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003db6:	ee77 7a87 	vadd.f32	s15, s15, s14
 8003dba:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8003dbe:	e038      	b.n	8003e32 <HAL_RCCEx_GetPLL3ClockFreq+0x13a>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8003dc0:	ee07 5a10 	vmov	s14, r5
 8003dc4:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 8003dc8:	ed9f 6a48 	vldr	s12, [pc, #288]	; 8003eec <HAL_RCCEx_GetPLL3ClockFreq+0x1f4>
 8003dcc:	eec6 6a07 	vdiv.f32	s13, s12, s14
 8003dd0:	4b42      	ldr	r3, [pc, #264]	; (8003edc <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>)
 8003dd2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003dd4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003dd8:	ee07 3a10 	vmov	s14, r3
 8003ddc:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 8003de0:	ed9f 6a40 	vldr	s12, [pc, #256]	; 8003ee4 <HAL_RCCEx_GetPLL3ClockFreq+0x1ec>
 8003de4:	ee67 7a86 	vmul.f32	s15, s15, s12
 8003de8:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003dec:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003df0:	ee77 7a87 	vadd.f32	s15, s15, s14
 8003df4:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8003df8:	e01b      	b.n	8003e32 <HAL_RCCEx_GetPLL3ClockFreq+0x13a>
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8003dfa:	ee07 5a10 	vmov	s14, r5
 8003dfe:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 8003e02:	ed9f 6a37 	vldr	s12, [pc, #220]	; 8003ee0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e8>
 8003e06:	eec6 6a07 	vdiv.f32	s13, s12, s14
 8003e0a:	4b34      	ldr	r3, [pc, #208]	; (8003edc <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>)
 8003e0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e0e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003e12:	ee07 3a10 	vmov	s14, r3
 8003e16:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 8003e1a:	ed9f 6a32 	vldr	s12, [pc, #200]	; 8003ee4 <HAL_RCCEx_GetPLL3ClockFreq+0x1ec>
 8003e1e:	ee67 7a86 	vmul.f32	s15, s15, s12
 8003e22:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003e26:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003e2a:	ee77 7a87 	vadd.f32	s15, s15, s14
 8003e2e:	ee66 6aa7 	vmul.f32	s13, s13, s15
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 8003e32:	4a2a      	ldr	r2, [pc, #168]	; (8003edc <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>)
 8003e34:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8003e36:	f3c3 2346 	ubfx	r3, r3, #9, #7
 8003e3a:	ee07 3a10 	vmov	s14, r3
 8003e3e:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 8003e42:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 8003e46:	ee37 7a06 	vadd.f32	s14, s14, s12
 8003e4a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003e4e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003e52:	edc0 7a00 	vstr	s15, [r0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 8003e56:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8003e58:	f3c3 4306 	ubfx	r3, r3, #16, #7
 8003e5c:	ee07 3a10 	vmov	s14, r3
 8003e60:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 8003e64:	ee37 7a06 	vadd.f32	s14, s14, s12
 8003e68:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003e6c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003e70:	edc0 7a01 	vstr	s15, [r0, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 8003e74:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8003e76:	f3c3 6306 	ubfx	r3, r3, #24, #7
 8003e7a:	ee07 3a90 	vmov	s15, r3
 8003e7e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003e82:	ee77 7a86 	vadd.f32	s15, s15, s12
 8003e86:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003e8a:	eebc 7ac7 	vcvt.u32.f32	s14, s14
 8003e8e:	ed80 7a02 	vstr	s14, [r0, #8]
}
 8003e92:	bc30      	pop	{r4, r5}
 8003e94:	4770      	bx	lr
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8003e96:	ee07 5a10 	vmov	s14, r5
 8003e9a:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 8003e9e:	ed9f 6a14 	vldr	s12, [pc, #80]	; 8003ef0 <HAL_RCCEx_GetPLL3ClockFreq+0x1f8>
 8003ea2:	eec6 6a07 	vdiv.f32	s13, s12, s14
 8003ea6:	4b0d      	ldr	r3, [pc, #52]	; (8003edc <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>)
 8003ea8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003eaa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003eae:	ee07 3a10 	vmov	s14, r3
 8003eb2:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 8003eb6:	ed9f 6a0b 	vldr	s12, [pc, #44]	; 8003ee4 <HAL_RCCEx_GetPLL3ClockFreq+0x1ec>
 8003eba:	ee67 7a86 	vmul.f32	s15, s15, s12
 8003ebe:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003ec2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003ec6:	ee77 7a87 	vadd.f32	s15, s15, s14
 8003eca:	ee66 6aa7 	vmul.f32	s13, s13, s15
      break;
 8003ece:	e7b0      	b.n	8003e32 <HAL_RCCEx_GetPLL3ClockFreq+0x13a>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8003ed0:	2300      	movs	r3, #0
 8003ed2:	6003      	str	r3, [r0, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8003ed4:	6043      	str	r3, [r0, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8003ed6:	6083      	str	r3, [r0, #8]
}
 8003ed8:	e7db      	b.n	8003e92 <HAL_RCCEx_GetPLL3ClockFreq+0x19a>
 8003eda:	bf00      	nop
 8003edc:	58024400 	.word	0x58024400
 8003ee0:	4a742400 	.word	0x4a742400
 8003ee4:	39000000 	.word	0x39000000
 8003ee8:	03d09000 	.word	0x03d09000
 8003eec:	4c742400 	.word	0x4c742400
 8003ef0:	4af42400 	.word	0x4af42400

08003ef4 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8003ef4:	b538      	push	{r3, r4, r5, lr}
 8003ef6:	4604      	mov	r4, r0
  /* Clear RSF flag */
#if defined(RTC_ICSR_RSF)
  hrtc->Instance->ICSR &= (uint32_t)RTC_RSF_MASK;
#endif /* RTC_ICSR_RSF */
#if defined(RTC_ISR_RSF)
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8003ef8:	6802      	ldr	r2, [r0, #0]
 8003efa:	68d3      	ldr	r3, [r2, #12]
 8003efc:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003f00:	60d3      	str	r3, [r2, #12]
#endif /* RTC_ISR_RSF */

  tickstart = HAL_GetTick();
 8003f02:	f7fc fbf3 	bl	80006ec <HAL_GetTick>
 8003f06:	4605      	mov	r5, r0
  /* Wait the registers to be synchronised */
#if defined(RTC_ICSR_RSF)
  while ((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
#endif /* RTC_ICSR_RSF */
#if defined(RTC_ISR_RSF)
    while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8003f08:	6823      	ldr	r3, [r4, #0]
 8003f0a:	68db      	ldr	r3, [r3, #12]
 8003f0c:	f013 0f20 	tst.w	r3, #32
 8003f10:	d107      	bne.n	8003f22 <HAL_RTC_WaitForSynchro+0x2e>
#endif /* RTC_ISR_RSF */
    {
      if((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8003f12:	f7fc fbeb 	bl	80006ec <HAL_GetTick>
 8003f16:	1b40      	subs	r0, r0, r5
 8003f18:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8003f1c:	d9f4      	bls.n	8003f08 <HAL_RTC_WaitForSynchro+0x14>
      {
        return HAL_TIMEOUT;
 8003f1e:	2003      	movs	r0, #3
 8003f20:	e000      	b.n	8003f24 <HAL_RTC_WaitForSynchro+0x30>
      }
    }

  return HAL_OK;
 8003f22:	2000      	movs	r0, #0
}
 8003f24:	bd38      	pop	{r3, r4, r5, pc}

08003f26 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8003f26:	b570      	push	{r4, r5, r6, lr}
      }
    }
  }
#endif /* RTC_ICSR_INITF */
#if defined(RTC_ISR_INITF)
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8003f28:	6803      	ldr	r3, [r0, #0]
 8003f2a:	68da      	ldr	r2, [r3, #12]
 8003f2c:	f012 0f40 	tst.w	r2, #64	; 0x40
 8003f30:	d002      	beq.n	8003f38 <RTC_EnterInitMode+0x12>
  HAL_StatusTypeDef status = HAL_OK;
 8003f32:	2600      	movs	r6, #0
    }
  }
#endif /* RTC_ISR_INITF */

  return status;
}
 8003f34:	4630      	mov	r0, r6
 8003f36:	bd70      	pop	{r4, r5, r6, pc}
 8003f38:	4604      	mov	r4, r0
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8003f3a:	f04f 32ff 	mov.w	r2, #4294967295
 8003f3e:	60da      	str	r2, [r3, #12]
    tickstart = HAL_GetTick();
 8003f40:	f7fc fbd4 	bl	80006ec <HAL_GetTick>
 8003f44:	4605      	mov	r5, r0
  HAL_StatusTypeDef status = HAL_OK;
 8003f46:	2600      	movs	r6, #0
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8003f48:	6823      	ldr	r3, [r4, #0]
 8003f4a:	68db      	ldr	r3, [r3, #12]
 8003f4c:	f013 0f40 	tst.w	r3, #64	; 0x40
 8003f50:	d1f0      	bne.n	8003f34 <RTC_EnterInitMode+0xe>
      if((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 8003f52:	f7fc fbcb 	bl	80006ec <HAL_GetTick>
 8003f56:	1b40      	subs	r0, r0, r5
 8003f58:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8003f5c:	d9f4      	bls.n	8003f48 <RTC_EnterInitMode+0x22>
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8003f5e:	2603      	movs	r6, #3
 8003f60:	f884 6021 	strb.w	r6, [r4, #33]	; 0x21
 8003f64:	e7f0      	b.n	8003f48 <RTC_EnterInitMode+0x22>
	...

08003f68 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8003f68:	b510      	push	{r4, lr}
 8003f6a:	4604      	mov	r4, r0
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);

#elif defined(RTC_ISR_INITF)

  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ISR, RTC_ISR_INITF);
 8003f6c:	4b10      	ldr	r3, [pc, #64]	; (8003fb0 <RTC_ExitInitMode+0x48>)
 8003f6e:	68da      	ldr	r2, [r3, #12]
 8003f70:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003f74:	60da      	str	r2, [r3, #12]

#endif /* RTC_ISR_INITF */
  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 8003f76:	689b      	ldr	r3, [r3, #8]
 8003f78:	f013 0f20 	tst.w	r3, #32
 8003f7c:	d106      	bne.n	8003f8c <RTC_ExitInitMode+0x24>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8003f7e:	f7ff ffb9 	bl	8003ef4 <HAL_RTC_WaitForSynchro>
 8003f82:	b198      	cbz	r0, 8003fac <RTC_ExitInitMode+0x44>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8003f84:	2003      	movs	r0, #3
 8003f86:	f884 0021 	strb.w	r0, [r4, #33]	; 0x21
      status = HAL_TIMEOUT;
 8003f8a:	e00f      	b.n	8003fac <RTC_ExitInitMode+0x44>
    }
  }
  else
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8003f8c:	4a08      	ldr	r2, [pc, #32]	; (8003fb0 <RTC_ExitInitMode+0x48>)
 8003f8e:	6893      	ldr	r3, [r2, #8]
 8003f90:	f023 0320 	bic.w	r3, r3, #32
 8003f94:	6093      	str	r3, [r2, #8]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8003f96:	f7ff ffad 	bl	8003ef4 <HAL_RTC_WaitForSynchro>
 8003f9a:	b110      	cbz	r0, 8003fa2 <RTC_ExitInitMode+0x3a>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8003f9c:	2003      	movs	r0, #3
 8003f9e:	f884 0021 	strb.w	r0, [r4, #33]	; 0x21
      status = HAL_TIMEOUT;
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8003fa2:	4a03      	ldr	r2, [pc, #12]	; (8003fb0 <RTC_ExitInitMode+0x48>)
 8003fa4:	6893      	ldr	r3, [r2, #8]
 8003fa6:	f043 0320 	orr.w	r3, r3, #32
 8003faa:	6093      	str	r3, [r2, #8]
  }

  return status;
}
 8003fac:	bd10      	pop	{r4, pc}
 8003fae:	bf00      	nop
 8003fb0:	58004000 	.word	0x58004000

08003fb4 <HAL_RTC_Init>:
  if(hrtc != NULL)
 8003fb4:	2800      	cmp	r0, #0
 8003fb6:	d044      	beq.n	8004042 <HAL_RTC_Init+0x8e>
{
 8003fb8:	b538      	push	{r3, r4, r5, lr}
 8003fba:	4604      	mov	r4, r0
    if(hrtc->State == HAL_RTC_STATE_RESET)
 8003fbc:	f890 3021 	ldrb.w	r3, [r0, #33]	; 0x21
 8003fc0:	b1a3      	cbz	r3, 8003fec <HAL_RTC_Init+0x38>
    hrtc->State = HAL_RTC_STATE_BUSY;
 8003fc2:	2302      	movs	r3, #2
 8003fc4:	f884 3021 	strb.w	r3, [r4, #33]	; 0x21
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8003fc8:	6823      	ldr	r3, [r4, #0]
 8003fca:	22ca      	movs	r2, #202	; 0xca
 8003fcc:	625a      	str	r2, [r3, #36]	; 0x24
 8003fce:	6823      	ldr	r3, [r4, #0]
 8003fd0:	2253      	movs	r2, #83	; 0x53
 8003fd2:	625a      	str	r2, [r3, #36]	; 0x24
    status = RTC_EnterInitMode(hrtc);
 8003fd4:	4620      	mov	r0, r4
 8003fd6:	f7ff ffa6 	bl	8003f26 <RTC_EnterInitMode>
    if (status == HAL_OK)
 8003fda:	b160      	cbz	r0, 8003ff6 <HAL_RTC_Init+0x42>
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003fdc:	6823      	ldr	r3, [r4, #0]
 8003fde:	22ff      	movs	r2, #255	; 0xff
 8003fe0:	625a      	str	r2, [r3, #36]	; 0x24
    if (status == HAL_OK)
 8003fe2:	b910      	cbnz	r0, 8003fea <HAL_RTC_Init+0x36>
      hrtc->State = HAL_RTC_STATE_READY;
 8003fe4:	2301      	movs	r3, #1
 8003fe6:	f884 3021 	strb.w	r3, [r4, #33]	; 0x21
}
 8003fea:	bd38      	pop	{r3, r4, r5, pc}
      hrtc->Lock = HAL_UNLOCKED;
 8003fec:	f880 3020 	strb.w	r3, [r0, #32]
      HAL_RTC_MspInit(hrtc);
 8003ff0:	f003 fcaa 	bl	8007948 <HAL_RTC_MspInit>
 8003ff4:	e7e5      	b.n	8003fc2 <HAL_RTC_Init+0xe>
      hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL);
 8003ff6:	6822      	ldr	r2, [r4, #0]
 8003ff8:	6891      	ldr	r1, [r2, #8]
 8003ffa:	4b13      	ldr	r3, [pc, #76]	; (8004048 <HAL_RTC_Init+0x94>)
 8003ffc:	400b      	ands	r3, r1
 8003ffe:	6093      	str	r3, [r2, #8]
      hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8004000:	6821      	ldr	r1, [r4, #0]
 8004002:	688a      	ldr	r2, [r1, #8]
 8004004:	6863      	ldr	r3, [r4, #4]
 8004006:	6920      	ldr	r0, [r4, #16]
 8004008:	4303      	orrs	r3, r0
 800400a:	69a0      	ldr	r0, [r4, #24]
 800400c:	4303      	orrs	r3, r0
 800400e:	4313      	orrs	r3, r2
 8004010:	608b      	str	r3, [r1, #8]
      hrtc->Instance->PRER = (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos) | (hrtc->Init.SynchPrediv << RTC_PRER_PREDIV_S_Pos);
 8004012:	68a1      	ldr	r1, [r4, #8]
 8004014:	68e3      	ldr	r3, [r4, #12]
 8004016:	6822      	ldr	r2, [r4, #0]
 8004018:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800401c:	6113      	str	r3, [r2, #16]
      status = RTC_ExitInitMode(hrtc);
 800401e:	4620      	mov	r0, r4
 8004020:	f7ff ffa2 	bl	8003f68 <RTC_ExitInitMode>
      if(status == HAL_OK)
 8004024:	2800      	cmp	r0, #0
 8004026:	d1d9      	bne.n	8003fdc <HAL_RTC_Init+0x28>
        hrtc->Instance->OR &= ~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 8004028:	6822      	ldr	r2, [r4, #0]
 800402a:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 800402c:	f023 0303 	bic.w	r3, r3, #3
 8004030:	64d3      	str	r3, [r2, #76]	; 0x4c
        hrtc->Instance->OR |= (hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 8004032:	6821      	ldr	r1, [r4, #0]
 8004034:	6ccb      	ldr	r3, [r1, #76]	; 0x4c
 8004036:	69e2      	ldr	r2, [r4, #28]
 8004038:	6965      	ldr	r5, [r4, #20]
 800403a:	432a      	orrs	r2, r5
 800403c:	4313      	orrs	r3, r2
 800403e:	64cb      	str	r3, [r1, #76]	; 0x4c
 8004040:	e7cc      	b.n	8003fdc <HAL_RTC_Init+0x28>
  HAL_StatusTypeDef status = HAL_ERROR;
 8004042:	2001      	movs	r0, #1
}
 8004044:	4770      	bx	lr
 8004046:	bf00      	nop
 8004048:	ff8fffbf 	.word	0xff8fffbf

0800404c <RTC_ByteToBcd2>:
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
  uint32_t bcdhigh = 0U;
 800404c:	2300      	movs	r3, #0
  uint8_t  bcdlow  = Value;

  while (bcdlow >= 10U)
 800404e:	2809      	cmp	r0, #9
 8004050:	d903      	bls.n	800405a <RTC_ByteToBcd2+0xe>
  {
    bcdhigh++;
 8004052:	3301      	adds	r3, #1
    bcdlow -= 10U;
 8004054:	380a      	subs	r0, #10
 8004056:	b2c0      	uxtb	r0, r0
 8004058:	e7f9      	b.n	800404e <RTC_ByteToBcd2+0x2>
  }

  return ((uint8_t)(bcdhigh << 4U) | bcdlow);
 800405a:	011b      	lsls	r3, r3, #4
 800405c:	b2db      	uxtb	r3, r3
}
 800405e:	4318      	orrs	r0, r3
 8004060:	4770      	bx	lr
	...

08004064 <HAL_RTC_SetTime>:
  __HAL_LOCK(hrtc);
 8004064:	f890 3020 	ldrb.w	r3, [r0, #32]
 8004068:	2b01      	cmp	r3, #1
 800406a:	d05b      	beq.n	8004124 <HAL_RTC_SetTime+0xc0>
{
 800406c:	b570      	push	{r4, r5, r6, lr}
 800406e:	4604      	mov	r4, r0
 8004070:	460d      	mov	r5, r1
 8004072:	4616      	mov	r6, r2
  __HAL_LOCK(hrtc);
 8004074:	2301      	movs	r3, #1
 8004076:	f880 3020 	strb.w	r3, [r0, #32]
  hrtc->State = HAL_RTC_STATE_BUSY;
 800407a:	2302      	movs	r3, #2
 800407c:	f880 3021 	strb.w	r3, [r0, #33]	; 0x21
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8004080:	6803      	ldr	r3, [r0, #0]
 8004082:	22ca      	movs	r2, #202	; 0xca
 8004084:	625a      	str	r2, [r3, #36]	; 0x24
 8004086:	6803      	ldr	r3, [r0, #0]
 8004088:	2253      	movs	r2, #83	; 0x53
 800408a:	625a      	str	r2, [r3, #36]	; 0x24
  status = RTC_EnterInitMode(hrtc);
 800408c:	f7ff ff4b 	bl	8003f26 <RTC_EnterInitMode>
  if (status == HAL_OK)
 8004090:	bb58      	cbnz	r0, 80040ea <HAL_RTC_SetTime+0x86>
    if(Format == RTC_FORMAT_BIN)
 8004092:	2e00      	cmp	r6, #0
 8004094:	d134      	bne.n	8004100 <HAL_RTC_SetTime+0x9c>
      if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8004096:	6823      	ldr	r3, [r4, #0]
 8004098:	689b      	ldr	r3, [r3, #8]
 800409a:	f013 0f40 	tst.w	r3, #64	; 0x40
 800409e:	d101      	bne.n	80040a4 <HAL_RTC_SetTime+0x40>
        sTime->TimeFormat = 0x00U;
 80040a0:	2300      	movs	r3, #0
 80040a2:	70eb      	strb	r3, [r5, #3]
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 80040a4:	7828      	ldrb	r0, [r5, #0]
 80040a6:	f7ff ffd1 	bl	800404c <RTC_ByteToBcd2>
 80040aa:	0406      	lsls	r6, r0, #16
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 80040ac:	7868      	ldrb	r0, [r5, #1]
 80040ae:	f7ff ffcd 	bl	800404c <RTC_ByteToBcd2>
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 80040b2:	ea46 2600 	orr.w	r6, r6, r0, lsl #8
                          ((uint32_t)RTC_ByteToBcd2(sTime->Seconds) << RTC_TR_SU_Pos)  | \
 80040b6:	78a8      	ldrb	r0, [r5, #2]
 80040b8:	f7ff ffc8 	bl	800404c <RTC_ByteToBcd2>
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 80040bc:	4330      	orrs	r0, r6
                          (((uint32_t)sTime->TimeFormat) << RTC_TR_PM_Pos));
 80040be:	78eb      	ldrb	r3, [r5, #3]
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 80040c0:	ea40 5083 	orr.w	r0, r0, r3, lsl #22
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 80040c4:	6822      	ldr	r2, [r4, #0]
 80040c6:	4b18      	ldr	r3, [pc, #96]	; (8004128 <HAL_RTC_SetTime+0xc4>)
 80040c8:	4003      	ands	r3, r0
 80040ca:	6013      	str	r3, [r2, #0]
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BKP);
 80040cc:	6822      	ldr	r2, [r4, #0]
 80040ce:	6893      	ldr	r3, [r2, #8]
 80040d0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80040d4:	6093      	str	r3, [r2, #8]
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 80040d6:	6821      	ldr	r1, [r4, #0]
 80040d8:	688b      	ldr	r3, [r1, #8]
 80040da:	68ea      	ldr	r2, [r5, #12]
 80040dc:	6928      	ldr	r0, [r5, #16]
 80040de:	4302      	orrs	r2, r0
 80040e0:	4313      	orrs	r3, r2
 80040e2:	608b      	str	r3, [r1, #8]
    status = RTC_ExitInitMode(hrtc);
 80040e4:	4620      	mov	r0, r4
 80040e6:	f7ff ff3f 	bl	8003f68 <RTC_ExitInitMode>
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80040ea:	6823      	ldr	r3, [r4, #0]
 80040ec:	22ff      	movs	r2, #255	; 0xff
 80040ee:	625a      	str	r2, [r3, #36]	; 0x24
  if (status == HAL_OK)
 80040f0:	b910      	cbnz	r0, 80040f8 <HAL_RTC_SetTime+0x94>
    hrtc->State = HAL_RTC_STATE_READY;
 80040f2:	2301      	movs	r3, #1
 80040f4:	f884 3021 	strb.w	r3, [r4, #33]	; 0x21
  __HAL_UNLOCK(hrtc);
 80040f8:	2300      	movs	r3, #0
 80040fa:	f884 3020 	strb.w	r3, [r4, #32]
}
 80040fe:	bd70      	pop	{r4, r5, r6, pc}
      if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8004100:	6823      	ldr	r3, [r4, #0]
 8004102:	689b      	ldr	r3, [r3, #8]
 8004104:	f013 0f40 	tst.w	r3, #64	; 0x40
 8004108:	d101      	bne.n	800410e <HAL_RTC_SetTime+0xaa>
        sTime->TimeFormat = 0x00U;
 800410a:	2300      	movs	r3, #0
 800410c:	70eb      	strb	r3, [r5, #3]
      tmpreg = (((uint32_t)(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800410e:	782b      	ldrb	r3, [r5, #0]
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8004110:	7868      	ldrb	r0, [r5, #1]
 8004112:	0200      	lsls	r0, r0, #8
      tmpreg = (((uint32_t)(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8004114:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
                ((uint32_t)(sTime->Seconds) << RTC_TR_SU_Pos)  | \
 8004118:	78ab      	ldrb	r3, [r5, #2]
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800411a:	4318      	orrs	r0, r3
                ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 800411c:	78eb      	ldrb	r3, [r5, #3]
      tmpreg = (((uint32_t)(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800411e:	ea40 5083 	orr.w	r0, r0, r3, lsl #22
 8004122:	e7cf      	b.n	80040c4 <HAL_RTC_SetTime+0x60>
  __HAL_LOCK(hrtc);
 8004124:	2002      	movs	r0, #2
}
 8004126:	4770      	bx	lr
 8004128:	007f7f7f 	.word	0x007f7f7f

0800412c <HAL_RTC_SetDate>:
  __HAL_LOCK(hrtc);
 800412c:	f890 3020 	ldrb.w	r3, [r0, #32]
 8004130:	2b01      	cmp	r3, #1
 8004132:	d04a      	beq.n	80041ca <HAL_RTC_SetDate+0x9e>
{
 8004134:	b570      	push	{r4, r5, r6, lr}
 8004136:	4604      	mov	r4, r0
 8004138:	460e      	mov	r6, r1
  __HAL_LOCK(hrtc);
 800413a:	2301      	movs	r3, #1
 800413c:	f880 3020 	strb.w	r3, [r0, #32]
  hrtc->State = HAL_RTC_STATE_BUSY;
 8004140:	2302      	movs	r3, #2
 8004142:	f880 3021 	strb.w	r3, [r0, #33]	; 0x21
  if((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8004146:	b93a      	cbnz	r2, 8004158 <HAL_RTC_SetDate+0x2c>
 8004148:	784b      	ldrb	r3, [r1, #1]
 800414a:	f013 0f10 	tst.w	r3, #16
 800414e:	d003      	beq.n	8004158 <HAL_RTC_SetDate+0x2c>
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8004150:	f003 03ef 	and.w	r3, r3, #239	; 0xef
 8004154:	330a      	adds	r3, #10
 8004156:	704b      	strb	r3, [r1, #1]
  if(Format == RTC_FORMAT_BIN)
 8004158:	bb22      	cbnz	r2, 80041a4 <HAL_RTC_SetDate+0x78>
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 800415a:	78f0      	ldrb	r0, [r6, #3]
 800415c:	f7ff ff76 	bl	800404c <RTC_ByteToBcd2>
 8004160:	0405      	lsls	r5, r0, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8004162:	7870      	ldrb	r0, [r6, #1]
 8004164:	f7ff ff72 	bl	800404c <RTC_ByteToBcd2>
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8004168:	ea45 2500 	orr.w	r5, r5, r0, lsl #8
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date)  << RTC_DR_DU_Pos) | \
 800416c:	78b0      	ldrb	r0, [r6, #2]
 800416e:	f7ff ff6d 	bl	800404c <RTC_ByteToBcd2>
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8004172:	4305      	orrs	r5, r0
                  ((uint32_t)sDate->WeekDay               << RTC_DR_WDU_Pos));
 8004174:	7830      	ldrb	r0, [r6, #0]
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8004176:	ea45 3540 	orr.w	r5, r5, r0, lsl #13
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800417a:	6823      	ldr	r3, [r4, #0]
 800417c:	22ca      	movs	r2, #202	; 0xca
 800417e:	625a      	str	r2, [r3, #36]	; 0x24
 8004180:	6823      	ldr	r3, [r4, #0]
 8004182:	2253      	movs	r2, #83	; 0x53
 8004184:	625a      	str	r2, [r3, #36]	; 0x24
  status = RTC_EnterInitMode(hrtc);
 8004186:	4620      	mov	r0, r4
 8004188:	f7ff fecd 	bl	8003f26 <RTC_EnterInitMode>
  if (status == HAL_OK)
 800418c:	b1a8      	cbz	r0, 80041ba <HAL_RTC_SetDate+0x8e>
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800418e:	6823      	ldr	r3, [r4, #0]
 8004190:	22ff      	movs	r2, #255	; 0xff
 8004192:	625a      	str	r2, [r3, #36]	; 0x24
  if (status == HAL_OK)
 8004194:	b910      	cbnz	r0, 800419c <HAL_RTC_SetDate+0x70>
    hrtc->State = HAL_RTC_STATE_READY;
 8004196:	2301      	movs	r3, #1
 8004198:	f884 3021 	strb.w	r3, [r4, #33]	; 0x21
  __HAL_UNLOCK(hrtc);
 800419c:	2300      	movs	r3, #0
 800419e:	f884 3020 	strb.w	r3, [r4, #32]
}
 80041a2:	bd70      	pop	{r4, r5, r6, pc}
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 80041a4:	78f3      	ldrb	r3, [r6, #3]
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 80041a6:	7875      	ldrb	r5, [r6, #1]
 80041a8:	022d      	lsls	r5, r5, #8
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 80041aa:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
                  (((uint32_t)sDate->Date)    << RTC_DR_DU_Pos) | \
 80041ae:	78b0      	ldrb	r0, [r6, #2]
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 80041b0:	4305      	orrs	r5, r0
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 80041b2:	7830      	ldrb	r0, [r6, #0]
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 80041b4:	ea45 3540 	orr.w	r5, r5, r0, lsl #13
 80041b8:	e7df      	b.n	800417a <HAL_RTC_SetDate+0x4e>
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 80041ba:	6822      	ldr	r2, [r4, #0]
 80041bc:	4b04      	ldr	r3, [pc, #16]	; (80041d0 <HAL_RTC_SetDate+0xa4>)
 80041be:	402b      	ands	r3, r5
 80041c0:	6053      	str	r3, [r2, #4]
    status = RTC_ExitInitMode(hrtc);
 80041c2:	4620      	mov	r0, r4
 80041c4:	f7ff fed0 	bl	8003f68 <RTC_ExitInitMode>
 80041c8:	e7e1      	b.n	800418e <HAL_RTC_SetDate+0x62>
  __HAL_LOCK(hrtc);
 80041ca:	2002      	movs	r0, #2
}
 80041cc:	4770      	bx	lr
 80041ce:	bf00      	nop
 80041d0:	00ffff3f 	.word	0x00ffff3f

080041d4 <SPI_GetPacketSize>:
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(SPI_HandleTypeDef *hspi)
{
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 80041d4:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
 80041d6:	095b      	lsrs	r3, r3, #5
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 80041d8:	68c0      	ldr	r0, [r0, #12]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 80041da:	3008      	adds	r0, #8
 80041dc:	08c0      	lsrs	r0, r0, #3

  return data_size * fifo_threashold;
}
 80041de:	fb03 0000 	mla	r0, r3, r0, r0
 80041e2:	4770      	bx	lr

080041e4 <HAL_SPI_Init>:
  if (hspi == NULL)
 80041e4:	2800      	cmp	r0, #0
 80041e6:	f000 8097 	beq.w	8004318 <HAL_SPI_Init+0x134>
{
 80041ea:	b570      	push	{r4, r5, r6, lr}
 80041ec:	4604      	mov	r4, r0
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80041ee:	2300      	movs	r3, #0
 80041f0:	6283      	str	r3, [r0, #40]	; 0x28
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 80041f2:	6805      	ldr	r5, [r0, #0]
 80041f4:	4b4c      	ldr	r3, [pc, #304]	; (8004328 <HAL_SPI_Init+0x144>)
 80041f6:	4e4d      	ldr	r6, [pc, #308]	; (800432c <HAL_SPI_Init+0x148>)
 80041f8:	429d      	cmp	r5, r3
 80041fa:	bf18      	it	ne
 80041fc:	42b5      	cmpne	r5, r6
 80041fe:	bf14      	ite	ne
 8004200:	2601      	movne	r6, #1
 8004202:	2600      	moveq	r6, #0
 8004204:	d007      	beq.n	8004216 <HAL_SPI_Init+0x32>
 8004206:	f5a3 4374 	sub.w	r3, r3, #62464	; 0xf400
 800420a:	429d      	cmp	r5, r3
 800420c:	d003      	beq.n	8004216 <HAL_SPI_Init+0x32>
 800420e:	68c3      	ldr	r3, [r0, #12]
 8004210:	2b0f      	cmp	r3, #15
 8004212:	f200 8083 	bhi.w	800431c <HAL_SPI_Init+0x138>
  packet_length = SPI_GetPacketSize(hspi);
 8004216:	4620      	mov	r0, r4
 8004218:	f7ff ffdc 	bl	80041d4 <SPI_GetPacketSize>
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800421c:	b126      	cbz	r6, 8004228 <HAL_SPI_Init+0x44>
 800421e:	4b44      	ldr	r3, [pc, #272]	; (8004330 <HAL_SPI_Init+0x14c>)
 8004220:	429d      	cmp	r5, r3
 8004222:	d001      	beq.n	8004228 <HAL_SPI_Init+0x44>
 8004224:	2808      	cmp	r0, #8
 8004226:	d87b      	bhi.n	8004320 <HAL_SPI_Init+0x13c>
 8004228:	4a3f      	ldr	r2, [pc, #252]	; (8004328 <HAL_SPI_Init+0x144>)
 800422a:	4b40      	ldr	r3, [pc, #256]	; (800432c <HAL_SPI_Init+0x148>)
 800422c:	429d      	cmp	r5, r3
 800422e:	bf18      	it	ne
 8004230:	4295      	cmpne	r5, r2
 8004232:	d003      	beq.n	800423c <HAL_SPI_Init+0x58>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8004234:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004238:	429d      	cmp	r5, r3
 800423a:	d101      	bne.n	8004240 <HAL_SPI_Init+0x5c>
 800423c:	2810      	cmp	r0, #16
 800423e:	d871      	bhi.n	8004324 <HAL_SPI_Init+0x140>
  if (hspi->State == HAL_SPI_STATE_RESET)
 8004240:	f894 3081 	ldrb.w	r3, [r4, #129]	; 0x81
 8004244:	2b00      	cmp	r3, #0
 8004246:	d054      	beq.n	80042f2 <HAL_SPI_Init+0x10e>
  hspi->State = HAL_SPI_STATE_BUSY;
 8004248:	2302      	movs	r3, #2
 800424a:	f884 3081 	strb.w	r3, [r4, #129]	; 0x81
  __HAL_SPI_DISABLE(hspi);
 800424e:	6822      	ldr	r2, [r4, #0]
 8004250:	6813      	ldr	r3, [r2, #0]
 8004252:	f023 0301 	bic.w	r3, r3, #1
 8004256:	6013      	str	r3, [r2, #0]
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW))
 8004258:	69a3      	ldr	r3, [r4, #24]
 800425a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800425e:	d04e      	beq.n	80042fe <HAL_SPI_Init+0x11a>
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 8004260:	69e3      	ldr	r3, [r4, #28]
 8004262:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8004264:	4313      	orrs	r3, r2
 8004266:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8004268:	4313      	orrs	r3, r2
 800426a:	68e1      	ldr	r1, [r4, #12]
 800426c:	6822      	ldr	r2, [r4, #0]
 800426e:	430b      	orrs	r3, r1
 8004270:	6093      	str	r3, [r2, #8]
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode     | hspi->Init.TIMode           | hspi->Init.NSSPolarity             |
 8004272:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8004274:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8004276:	4313      	orrs	r3, r2
 8004278:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 800427a:	4313      	orrs	r3, r2
 800427c:	69a2      	ldr	r2, [r4, #24]
 800427e:	4313      	orrs	r3, r2
 8004280:	6922      	ldr	r2, [r4, #16]
 8004282:	4313      	orrs	r3, r2
 8004284:	6962      	ldr	r2, [r4, #20]
 8004286:	4313      	orrs	r3, r2
 8004288:	6a22      	ldr	r2, [r4, #32]
 800428a:	4313      	orrs	r3, r2
 800428c:	6862      	ldr	r2, [r4, #4]
 800428e:	4313      	orrs	r3, r2
 8004290:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
 8004292:	4313      	orrs	r3, r2
 8004294:	68a2      	ldr	r2, [r4, #8]
 8004296:	4313      	orrs	r3, r2
 8004298:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 800429a:	4313      	orrs	r3, r2
 800429c:	6da1      	ldr	r1, [r4, #88]	; 0x58
 800429e:	6822      	ldr	r2, [r4, #0]
 80042a0:	430b      	orrs	r3, r1
 80042a2:	60d3      	str	r3, [r2, #12]
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 80042a4:	6863      	ldr	r3, [r4, #4]
 80042a6:	b96b      	cbnz	r3, 80042c4 <HAL_SPI_Init+0xe0>
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 80042a8:	6822      	ldr	r2, [r4, #0]
 80042aa:	6893      	ldr	r3, [r2, #8]
 80042ac:	f423 53c0 	bic.w	r3, r3, #6144	; 0x1800
 80042b0:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80042b4:	6093      	str	r3, [r2, #8]
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 80042b6:	6822      	ldr	r2, [r4, #0]
 80042b8:	6893      	ldr	r3, [r2, #8]
 80042ba:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80042be:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80042c2:	6093      	str	r3, [r2, #8]
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80042c4:	6822      	ldr	r2, [r4, #0]
 80042c6:	6d13      	ldr	r3, [r2, #80]	; 0x50
 80042c8:	f023 0301 	bic.w	r3, r3, #1
 80042cc:	6513      	str	r3, [r2, #80]	; 0x50
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 80042ce:	6863      	ldr	r3, [r4, #4]
 80042d0:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 80042d4:	d006      	beq.n	80042e4 <HAL_SPI_Init+0x100>
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 80042d6:	6822      	ldr	r2, [r4, #0]
 80042d8:	68d3      	ldr	r3, [r2, #12]
 80042da:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80042de:	6d61      	ldr	r1, [r4, #84]	; 0x54
 80042e0:	430b      	orrs	r3, r1
 80042e2:	60d3      	str	r3, [r2, #12]
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80042e4:	2000      	movs	r0, #0
 80042e6:	f8c4 0084 	str.w	r0, [r4, #132]	; 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 80042ea:	2301      	movs	r3, #1
 80042ec:	f884 3081 	strb.w	r3, [r4, #129]	; 0x81
}
 80042f0:	bd70      	pop	{r4, r5, r6, pc}
    hspi->Lock = HAL_UNLOCKED;
 80042f2:	f884 3080 	strb.w	r3, [r4, #128]	; 0x80
    HAL_SPI_MspInit(hspi);
 80042f6:	4620      	mov	r0, r4
 80042f8:	f003 fb36 	bl	8007968 <HAL_SPI_MspInit>
 80042fc:	e7a4      	b.n	8004248 <HAL_SPI_Init+0x64>
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW))
 80042fe:	6863      	ldr	r3, [r4, #4]
 8004300:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004304:	d1ac      	bne.n	8004260 <HAL_SPI_Init+0x7c>
 8004306:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8004308:	2b00      	cmp	r3, #0
 800430a:	d1a9      	bne.n	8004260 <HAL_SPI_Init+0x7c>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 800430c:	6822      	ldr	r2, [r4, #0]
 800430e:	6813      	ldr	r3, [r2, #0]
 8004310:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8004314:	6013      	str	r3, [r2, #0]
 8004316:	e7a3      	b.n	8004260 <HAL_SPI_Init+0x7c>
    return HAL_ERROR;
 8004318:	2001      	movs	r0, #1
}
 800431a:	4770      	bx	lr
    return HAL_ERROR;
 800431c:	2001      	movs	r0, #1
 800431e:	e7e7      	b.n	80042f0 <HAL_SPI_Init+0x10c>
    return HAL_ERROR;
 8004320:	2001      	movs	r0, #1
 8004322:	e7e5      	b.n	80042f0 <HAL_SPI_Init+0x10c>
 8004324:	2001      	movs	r0, #1
 8004326:	e7e3      	b.n	80042f0 <HAL_SPI_Init+0x10c>
 8004328:	40013000 	.word	0x40013000
 800432c:	40003800 	.word	0x40003800
 8004330:	40003c00 	.word	0x40003c00

08004334 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004334:	b4f0      	push	{r4, r5, r6, r7}
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004336:	6a03      	ldr	r3, [r0, #32]
 8004338:	f023 0301 	bic.w	r3, r3, #1
 800433c:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800433e:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004340:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004342:	6985      	ldr	r5, [r0, #24]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004344:	4a1e      	ldr	r2, [pc, #120]	; (80043c0 <TIM_OC1_SetConfig+0x8c>)
 8004346:	402a      	ands	r2, r5
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004348:	680e      	ldr	r6, [r1, #0]
 800434a:	4316      	orrs	r6, r2

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800434c:	f023 0302 	bic.w	r3, r3, #2
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004350:	688d      	ldr	r5, [r1, #8]
 8004352:	432b      	orrs	r3, r5

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004354:	4a1b      	ldr	r2, [pc, #108]	; (80043c4 <TIM_OC1_SetConfig+0x90>)
 8004356:	4d1c      	ldr	r5, [pc, #112]	; (80043c8 <TIM_OC1_SetConfig+0x94>)
 8004358:	42a8      	cmp	r0, r5
 800435a:	bf18      	it	ne
 800435c:	4290      	cmpne	r0, r2
 800435e:	bf0c      	ite	eq
 8004360:	2201      	moveq	r2, #1
 8004362:	2200      	movne	r2, #0
 8004364:	d00c      	beq.n	8004380 <TIM_OC1_SetConfig+0x4c>
 8004366:	f505 4580 	add.w	r5, r5, #16384	; 0x4000
 800436a:	42a8      	cmp	r0, r5
 800436c:	bf14      	ite	ne
 800436e:	2500      	movne	r5, #0
 8004370:	2501      	moveq	r5, #1
 8004372:	4f16      	ldr	r7, [pc, #88]	; (80043cc <TIM_OC1_SetConfig+0x98>)
 8004374:	42b8      	cmp	r0, r7
 8004376:	d003      	beq.n	8004380 <TIM_OC1_SetConfig+0x4c>
 8004378:	b915      	cbnz	r5, 8004380 <TIM_OC1_SetConfig+0x4c>
 800437a:	4d15      	ldr	r5, [pc, #84]	; (80043d0 <TIM_OC1_SetConfig+0x9c>)
 800437c:	42a8      	cmp	r0, r5
 800437e:	d105      	bne.n	800438c <TIM_OC1_SetConfig+0x58>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004380:	f023 0308 	bic.w	r3, r3, #8
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004384:	68cd      	ldr	r5, [r1, #12]
 8004386:	432b      	orrs	r3, r5
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004388:	f023 0304 	bic.w	r3, r3, #4
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800438c:	b95a      	cbnz	r2, 80043a6 <TIM_OC1_SetConfig+0x72>
 800438e:	4a11      	ldr	r2, [pc, #68]	; (80043d4 <TIM_OC1_SetConfig+0xa0>)
 8004390:	4290      	cmp	r0, r2
 8004392:	bf14      	ite	ne
 8004394:	2200      	movne	r2, #0
 8004396:	2201      	moveq	r2, #1
 8004398:	4d0c      	ldr	r5, [pc, #48]	; (80043cc <TIM_OC1_SetConfig+0x98>)
 800439a:	42a8      	cmp	r0, r5
 800439c:	d003      	beq.n	80043a6 <TIM_OC1_SetConfig+0x72>
 800439e:	b912      	cbnz	r2, 80043a6 <TIM_OC1_SetConfig+0x72>
 80043a0:	4a0b      	ldr	r2, [pc, #44]	; (80043d0 <TIM_OC1_SetConfig+0x9c>)
 80043a2:	4290      	cmp	r0, r2
 80043a4:	d105      	bne.n	80043b2 <TIM_OC1_SetConfig+0x7e>
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80043a6:	f424 7240 	bic.w	r2, r4, #768	; 0x300
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80043aa:	694c      	ldr	r4, [r1, #20]
 80043ac:	4314      	orrs	r4, r2
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80043ae:	698a      	ldr	r2, [r1, #24]
 80043b0:	4314      	orrs	r4, r2
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80043b2:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80043b4:	6186      	str	r6, [r0, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80043b6:	684a      	ldr	r2, [r1, #4]
 80043b8:	6342      	str	r2, [r0, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80043ba:	6203      	str	r3, [r0, #32]
}
 80043bc:	bcf0      	pop	{r4, r5, r6, r7}
 80043be:	4770      	bx	lr
 80043c0:	fffeff8c 	.word	0xfffeff8c
 80043c4:	40010000 	.word	0x40010000
 80043c8:	40010400 	.word	0x40010400
 80043cc:	40014000 	.word	0x40014000
 80043d0:	40014800 	.word	0x40014800
 80043d4:	40014400 	.word	0x40014400

080043d8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80043d8:	b470      	push	{r4, r5, r6}
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80043da:	6a03      	ldr	r3, [r0, #32]
 80043dc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80043e0:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80043e2:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80043e4:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80043e6:	69c2      	ldr	r2, [r0, #28]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80043e8:	f022 0273 	bic.w	r2, r2, #115	; 0x73
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80043ec:	680e      	ldr	r6, [r1, #0]
 80043ee:	4316      	orrs	r6, r2

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80043f0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80043f4:	688a      	ldr	r2, [r1, #8]
 80043f6:	ea43 2302 	orr.w	r3, r3, r2, lsl #8

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80043fa:	4a16      	ldr	r2, [pc, #88]	; (8004454 <TIM_OC3_SetConfig+0x7c>)
 80043fc:	4d16      	ldr	r5, [pc, #88]	; (8004458 <TIM_OC3_SetConfig+0x80>)
 80043fe:	42a8      	cmp	r0, r5
 8004400:	bf18      	it	ne
 8004402:	4290      	cmpne	r0, r2
 8004404:	bf0c      	ite	eq
 8004406:	2201      	moveq	r2, #1
 8004408:	2200      	movne	r2, #0
 800440a:	d106      	bne.n	800441a <TIM_OC3_SetConfig+0x42>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800440c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004410:	68cd      	ldr	r5, [r1, #12]
 8004412:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004416:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800441a:	b95a      	cbnz	r2, 8004434 <TIM_OC3_SetConfig+0x5c>
 800441c:	4a0f      	ldr	r2, [pc, #60]	; (800445c <TIM_OC3_SetConfig+0x84>)
 800441e:	4290      	cmp	r0, r2
 8004420:	bf14      	ite	ne
 8004422:	2200      	movne	r2, #0
 8004424:	2201      	moveq	r2, #1
 8004426:	4d0e      	ldr	r5, [pc, #56]	; (8004460 <TIM_OC3_SetConfig+0x88>)
 8004428:	42a8      	cmp	r0, r5
 800442a:	d003      	beq.n	8004434 <TIM_OC3_SetConfig+0x5c>
 800442c:	b912      	cbnz	r2, 8004434 <TIM_OC3_SetConfig+0x5c>
 800442e:	4a0d      	ldr	r2, [pc, #52]	; (8004464 <TIM_OC3_SetConfig+0x8c>)
 8004430:	4290      	cmp	r0, r2
 8004432:	d107      	bne.n	8004444 <TIM_OC3_SetConfig+0x6c>
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004434:	f424 5440 	bic.w	r4, r4, #12288	; 0x3000
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004438:	694a      	ldr	r2, [r1, #20]
 800443a:	ea44 1402 	orr.w	r4, r4, r2, lsl #4
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800443e:	698a      	ldr	r2, [r1, #24]
 8004440:	ea44 1402 	orr.w	r4, r4, r2, lsl #4
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004444:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004446:	61c6      	str	r6, [r0, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004448:	684a      	ldr	r2, [r1, #4]
 800444a:	63c2      	str	r2, [r0, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800444c:	6203      	str	r3, [r0, #32]
}
 800444e:	bc70      	pop	{r4, r5, r6}
 8004450:	4770      	bx	lr
 8004452:	bf00      	nop
 8004454:	40010000 	.word	0x40010000
 8004458:	40010400 	.word	0x40010400
 800445c:	40014400 	.word	0x40014400
 8004460:	40014000 	.word	0x40014000
 8004464:	40014800 	.word	0x40014800

08004468 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004468:	b470      	push	{r4, r5, r6}
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800446a:	6a03      	ldr	r3, [r0, #32]
 800446c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004470:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004472:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004474:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004476:	69c2      	ldr	r2, [r0, #28]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004478:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800447c:	680d      	ldr	r5, [r1, #0]
 800447e:	ea42 2205 	orr.w	r2, r2, r5, lsl #8

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004482:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004486:	688d      	ldr	r5, [r1, #8]
 8004488:	ea43 3305 	orr.w	r3, r3, r5, lsl #12

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800448c:	4e0f      	ldr	r6, [pc, #60]	; (80044cc <TIM_OC4_SetConfig+0x64>)
 800448e:	4d10      	ldr	r5, [pc, #64]	; (80044d0 <TIM_OC4_SetConfig+0x68>)
 8004490:	42a8      	cmp	r0, r5
 8004492:	bf18      	it	ne
 8004494:	42b0      	cmpne	r0, r6
 8004496:	d00d      	beq.n	80044b4 <TIM_OC4_SetConfig+0x4c>
 8004498:	f505 4580 	add.w	r5, r5, #16384	; 0x4000
 800449c:	42a8      	cmp	r0, r5
 800449e:	bf14      	ite	ne
 80044a0:	2500      	movne	r5, #0
 80044a2:	2501      	moveq	r5, #1
 80044a4:	f506 4680 	add.w	r6, r6, #16384	; 0x4000
 80044a8:	42b0      	cmp	r0, r6
 80044aa:	d003      	beq.n	80044b4 <TIM_OC4_SetConfig+0x4c>
 80044ac:	b915      	cbnz	r5, 80044b4 <TIM_OC4_SetConfig+0x4c>
 80044ae:	4d09      	ldr	r5, [pc, #36]	; (80044d4 <TIM_OC4_SetConfig+0x6c>)
 80044b0:	42a8      	cmp	r0, r5
 80044b2:	d104      	bne.n	80044be <TIM_OC4_SetConfig+0x56>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80044b4:	f424 4480 	bic.w	r4, r4, #16384	; 0x4000

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80044b8:	694d      	ldr	r5, [r1, #20]
 80044ba:	ea44 1485 	orr.w	r4, r4, r5, lsl #6
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80044be:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80044c0:	61c2      	str	r2, [r0, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80044c2:	684a      	ldr	r2, [r1, #4]
 80044c4:	6402      	str	r2, [r0, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80044c6:	6203      	str	r3, [r0, #32]
}
 80044c8:	bc70      	pop	{r4, r5, r6}
 80044ca:	4770      	bx	lr
 80044cc:	40010000 	.word	0x40010000
 80044d0:	40010400 	.word	0x40010400
 80044d4:	40014800 	.word	0x40014800

080044d8 <TIM_OC5_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 80044d8:	b470      	push	{r4, r5, r6}
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80044da:	6a03      	ldr	r3, [r0, #32]
 80044dc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80044e0:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80044e2:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80044e4:	6842      	ldr	r2, [r0, #4]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80044e6:	6d44      	ldr	r4, [r0, #84]	; 0x54

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80044e8:	f024 0470 	bic.w	r4, r4, #112	; 0x70
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80044ec:	680d      	ldr	r5, [r1, #0]
 80044ee:	432c      	orrs	r4, r5

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80044f0:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80044f4:	688d      	ldr	r5, [r1, #8]
 80044f6:	ea43 4305 	orr.w	r3, r3, r5, lsl #16

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80044fa:	4e10      	ldr	r6, [pc, #64]	; (800453c <TIM_OC5_SetConfig+0x64>)
 80044fc:	4d10      	ldr	r5, [pc, #64]	; (8004540 <TIM_OC5_SetConfig+0x68>)
 80044fe:	42a8      	cmp	r0, r5
 8004500:	bf18      	it	ne
 8004502:	42b0      	cmpne	r0, r6
 8004504:	d00d      	beq.n	8004522 <TIM_OC5_SetConfig+0x4a>
 8004506:	f505 4580 	add.w	r5, r5, #16384	; 0x4000
 800450a:	42a8      	cmp	r0, r5
 800450c:	bf14      	ite	ne
 800450e:	2500      	movne	r5, #0
 8004510:	2501      	moveq	r5, #1
 8004512:	f506 4680 	add.w	r6, r6, #16384	; 0x4000
 8004516:	42b0      	cmp	r0, r6
 8004518:	d003      	beq.n	8004522 <TIM_OC5_SetConfig+0x4a>
 800451a:	b915      	cbnz	r5, 8004522 <TIM_OC5_SetConfig+0x4a>
 800451c:	4d09      	ldr	r5, [pc, #36]	; (8004544 <TIM_OC5_SetConfig+0x6c>)
 800451e:	42a8      	cmp	r0, r5
 8004520:	d104      	bne.n	800452c <TIM_OC5_SetConfig+0x54>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8004522:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8004526:	694d      	ldr	r5, [r1, #20]
 8004528:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800452c:	6042      	str	r2, [r0, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800452e:	6544      	str	r4, [r0, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8004530:	684a      	ldr	r2, [r1, #4]
 8004532:	6582      	str	r2, [r0, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004534:	6203      	str	r3, [r0, #32]
}
 8004536:	bc70      	pop	{r4, r5, r6}
 8004538:	4770      	bx	lr
 800453a:	bf00      	nop
 800453c:	40010000 	.word	0x40010000
 8004540:	40010400 	.word	0x40010400
 8004544:	40014800 	.word	0x40014800

08004548 <TIM_OC6_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8004548:	b470      	push	{r4, r5, r6}
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800454a:	6a03      	ldr	r3, [r0, #32]
 800454c:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8004550:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004552:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004554:	6844      	ldr	r4, [r0, #4]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8004556:	6d42      	ldr	r2, [r0, #84]	; 0x54

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8004558:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800455c:	680d      	ldr	r5, [r1, #0]
 800455e:	ea42 2205 	orr.w	r2, r2, r5, lsl #8

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8004562:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8004566:	688d      	ldr	r5, [r1, #8]
 8004568:	ea43 5305 	orr.w	r3, r3, r5, lsl #20

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800456c:	4e0f      	ldr	r6, [pc, #60]	; (80045ac <TIM_OC6_SetConfig+0x64>)
 800456e:	4d10      	ldr	r5, [pc, #64]	; (80045b0 <TIM_OC6_SetConfig+0x68>)
 8004570:	42a8      	cmp	r0, r5
 8004572:	bf18      	it	ne
 8004574:	42b0      	cmpne	r0, r6
 8004576:	d00d      	beq.n	8004594 <TIM_OC6_SetConfig+0x4c>
 8004578:	f505 4580 	add.w	r5, r5, #16384	; 0x4000
 800457c:	42a8      	cmp	r0, r5
 800457e:	bf14      	ite	ne
 8004580:	2500      	movne	r5, #0
 8004582:	2501      	moveq	r5, #1
 8004584:	f506 4680 	add.w	r6, r6, #16384	; 0x4000
 8004588:	42b0      	cmp	r0, r6
 800458a:	d003      	beq.n	8004594 <TIM_OC6_SetConfig+0x4c>
 800458c:	b915      	cbnz	r5, 8004594 <TIM_OC6_SetConfig+0x4c>
 800458e:	4d09      	ldr	r5, [pc, #36]	; (80045b4 <TIM_OC6_SetConfig+0x6c>)
 8004590:	42a8      	cmp	r0, r5
 8004592:	d104      	bne.n	800459e <TIM_OC6_SetConfig+0x56>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8004594:	f424 3400 	bic.w	r4, r4, #131072	; 0x20000
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8004598:	694d      	ldr	r5, [r1, #20]
 800459a:	ea44 2485 	orr.w	r4, r4, r5, lsl #10
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800459e:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80045a0:	6542      	str	r2, [r0, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80045a2:	684a      	ldr	r2, [r1, #4]
 80045a4:	65c2      	str	r2, [r0, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80045a6:	6203      	str	r3, [r0, #32]
}
 80045a8:	bc70      	pop	{r4, r5, r6}
 80045aa:	4770      	bx	lr
 80045ac:	40010000 	.word	0x40010000
 80045b0:	40010400 	.word	0x40010400
 80045b4:	40014800 	.word	0x40014800

080045b8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80045b8:	b430      	push	{r4, r5}
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80045ba:	6a03      	ldr	r3, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80045bc:	6a05      	ldr	r5, [r0, #32]
 80045be:	f025 0501 	bic.w	r5, r5, #1
 80045c2:	6205      	str	r5, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 80045c4:	6984      	ldr	r4, [r0, #24]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80045c6:	f024 04f0 	bic.w	r4, r4, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80045ca:	ea44 1402 	orr.w	r4, r4, r2, lsl #4

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80045ce:	f023 030a 	bic.w	r3, r3, #10
  tmpccer |= TIM_ICPolarity;
 80045d2:	430b      	orrs	r3, r1

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80045d4:	6184      	str	r4, [r0, #24]
  TIMx->CCER = tmpccer;
 80045d6:	6203      	str	r3, [r0, #32]
}
 80045d8:	bc30      	pop	{r4, r5}
 80045da:	4770      	bx	lr

080045dc <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80045dc:	b430      	push	{r4, r5}
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80045de:	6a05      	ldr	r5, [r0, #32]
 80045e0:	f025 0510 	bic.w	r5, r5, #16
 80045e4:	6205      	str	r5, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 80045e6:	6984      	ldr	r4, [r0, #24]
  tmpccer = TIMx->CCER;
 80045e8:	6a03      	ldr	r3, [r0, #32]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80045ea:	f424 4470 	bic.w	r4, r4, #61440	; 0xf000
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80045ee:	ea44 3402 	orr.w	r4, r4, r2, lsl #12

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80045f2:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
  tmpccer |= (TIM_ICPolarity << 4U);
 80045f6:	ea43 1301 	orr.w	r3, r3, r1, lsl #4

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80045fa:	6184      	str	r4, [r0, #24]
  TIMx->CCER = tmpccer;
 80045fc:	6203      	str	r3, [r0, #32]
}
 80045fe:	bc30      	pop	{r4, r5}
 8004600:	4770      	bx	lr
	...

08004604 <TIM_ITRx_SetConfig>:
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004604:	6882      	ldr	r2, [r0, #8]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004606:	4b03      	ldr	r3, [pc, #12]	; (8004614 <TIM_ITRx_SetConfig+0x10>)
 8004608:	4013      	ands	r3, r2
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800460a:	430b      	orrs	r3, r1
 800460c:	f043 0307 	orr.w	r3, r3, #7
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004610:	6083      	str	r3, [r0, #8]
}
 8004612:	4770      	bx	lr
 8004614:	ffcfff8f 	.word	0xffcfff8f

08004618 <HAL_TIM_Base_Start>:
  if (htim->State != HAL_TIM_STATE_READY)
 8004618:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 800461c:	b2db      	uxtb	r3, r3
 800461e:	2b01      	cmp	r3, #1
 8004620:	d111      	bne.n	8004646 <HAL_TIM_Base_Start+0x2e>
  htim->State = HAL_TIM_STATE_BUSY;
 8004622:	2302      	movs	r3, #2
 8004624:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004628:	6802      	ldr	r2, [r0, #0]
 800462a:	6891      	ldr	r1, [r2, #8]
 800462c:	4b08      	ldr	r3, [pc, #32]	; (8004650 <HAL_TIM_Base_Start+0x38>)
 800462e:	400b      	ands	r3, r1
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004630:	2b06      	cmp	r3, #6
 8004632:	bf18      	it	ne
 8004634:	f5b3 3f80 	cmpne.w	r3, #65536	; 0x10000
 8004638:	d007      	beq.n	800464a <HAL_TIM_Base_Start+0x32>
    __HAL_TIM_ENABLE(htim);
 800463a:	6813      	ldr	r3, [r2, #0]
 800463c:	f043 0301 	orr.w	r3, r3, #1
 8004640:	6013      	str	r3, [r2, #0]
  return HAL_OK;
 8004642:	2000      	movs	r0, #0
 8004644:	4770      	bx	lr
    return HAL_ERROR;
 8004646:	2001      	movs	r0, #1
 8004648:	4770      	bx	lr
  return HAL_OK;
 800464a:	2000      	movs	r0, #0
}
 800464c:	4770      	bx	lr
 800464e:	bf00      	nop
 8004650:	00010007 	.word	0x00010007

08004654 <HAL_TIM_Base_Start_IT>:
  if (htim->State != HAL_TIM_STATE_READY)
 8004654:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8004658:	b2db      	uxtb	r3, r3
 800465a:	2b01      	cmp	r3, #1
 800465c:	d116      	bne.n	800468c <HAL_TIM_Base_Start_IT+0x38>
  htim->State = HAL_TIM_STATE_BUSY;
 800465e:	2302      	movs	r3, #2
 8004660:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004664:	6802      	ldr	r2, [r0, #0]
 8004666:	68d3      	ldr	r3, [r2, #12]
 8004668:	f043 0301 	orr.w	r3, r3, #1
 800466c:	60d3      	str	r3, [r2, #12]
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800466e:	6802      	ldr	r2, [r0, #0]
 8004670:	6891      	ldr	r1, [r2, #8]
 8004672:	4b08      	ldr	r3, [pc, #32]	; (8004694 <HAL_TIM_Base_Start_IT+0x40>)
 8004674:	400b      	ands	r3, r1
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004676:	2b06      	cmp	r3, #6
 8004678:	bf18      	it	ne
 800467a:	f5b3 3f80 	cmpne.w	r3, #65536	; 0x10000
 800467e:	d007      	beq.n	8004690 <HAL_TIM_Base_Start_IT+0x3c>
    __HAL_TIM_ENABLE(htim);
 8004680:	6813      	ldr	r3, [r2, #0]
 8004682:	f043 0301 	orr.w	r3, r3, #1
 8004686:	6013      	str	r3, [r2, #0]
  return HAL_OK;
 8004688:	2000      	movs	r0, #0
 800468a:	4770      	bx	lr
    return HAL_ERROR;
 800468c:	2001      	movs	r0, #1
 800468e:	4770      	bx	lr
  return HAL_OK;
 8004690:	2000      	movs	r0, #0
}
 8004692:	4770      	bx	lr
 8004694:	00010007 	.word	0x00010007

08004698 <HAL_TIM_OC_MspInit>:
}
 8004698:	4770      	bx	lr

0800469a <HAL_TIM_OC_DelayElapsedCallback>:
}
 800469a:	4770      	bx	lr

0800469c <HAL_TIM_IC_CaptureCallback>:
}
 800469c:	4770      	bx	lr

0800469e <HAL_TIM_PWM_PulseFinishedCallback>:
}
 800469e:	4770      	bx	lr

080046a0 <HAL_TIM_TriggerCallback>:
}
 80046a0:	4770      	bx	lr

080046a2 <HAL_TIM_IRQHandler>:
{
 80046a2:	b510      	push	{r4, lr}
 80046a4:	4604      	mov	r4, r0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80046a6:	6803      	ldr	r3, [r0, #0]
 80046a8:	691a      	ldr	r2, [r3, #16]
 80046aa:	f012 0f02 	tst.w	r2, #2
 80046ae:	d011      	beq.n	80046d4 <HAL_TIM_IRQHandler+0x32>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80046b0:	68da      	ldr	r2, [r3, #12]
 80046b2:	f012 0f02 	tst.w	r2, #2
 80046b6:	d00d      	beq.n	80046d4 <HAL_TIM_IRQHandler+0x32>
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80046b8:	f06f 0202 	mvn.w	r2, #2
 80046bc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80046be:	2301      	movs	r3, #1
 80046c0:	7703      	strb	r3, [r0, #28]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80046c2:	6803      	ldr	r3, [r0, #0]
 80046c4:	699b      	ldr	r3, [r3, #24]
 80046c6:	f013 0f03 	tst.w	r3, #3
 80046ca:	d079      	beq.n	80047c0 <HAL_TIM_IRQHandler+0x11e>
          HAL_TIM_IC_CaptureCallback(htim);
 80046cc:	f7ff ffe6 	bl	800469c <HAL_TIM_IC_CaptureCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80046d0:	2300      	movs	r3, #0
 80046d2:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80046d4:	6823      	ldr	r3, [r4, #0]
 80046d6:	691a      	ldr	r2, [r3, #16]
 80046d8:	f012 0f04 	tst.w	r2, #4
 80046dc:	d012      	beq.n	8004704 <HAL_TIM_IRQHandler+0x62>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80046de:	68da      	ldr	r2, [r3, #12]
 80046e0:	f012 0f04 	tst.w	r2, #4
 80046e4:	d00e      	beq.n	8004704 <HAL_TIM_IRQHandler+0x62>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80046e6:	f06f 0204 	mvn.w	r2, #4
 80046ea:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80046ec:	2302      	movs	r3, #2
 80046ee:	7723      	strb	r3, [r4, #28]
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80046f0:	6823      	ldr	r3, [r4, #0]
 80046f2:	699b      	ldr	r3, [r3, #24]
 80046f4:	f413 7f40 	tst.w	r3, #768	; 0x300
 80046f8:	d068      	beq.n	80047cc <HAL_TIM_IRQHandler+0x12a>
        HAL_TIM_IC_CaptureCallback(htim);
 80046fa:	4620      	mov	r0, r4
 80046fc:	f7ff ffce 	bl	800469c <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004700:	2300      	movs	r3, #0
 8004702:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004704:	6823      	ldr	r3, [r4, #0]
 8004706:	691a      	ldr	r2, [r3, #16]
 8004708:	f012 0f08 	tst.w	r2, #8
 800470c:	d012      	beq.n	8004734 <HAL_TIM_IRQHandler+0x92>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800470e:	68da      	ldr	r2, [r3, #12]
 8004710:	f012 0f08 	tst.w	r2, #8
 8004714:	d00e      	beq.n	8004734 <HAL_TIM_IRQHandler+0x92>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004716:	f06f 0208 	mvn.w	r2, #8
 800471a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800471c:	2304      	movs	r3, #4
 800471e:	7723      	strb	r3, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004720:	6823      	ldr	r3, [r4, #0]
 8004722:	69db      	ldr	r3, [r3, #28]
 8004724:	f013 0f03 	tst.w	r3, #3
 8004728:	d057      	beq.n	80047da <HAL_TIM_IRQHandler+0x138>
        HAL_TIM_IC_CaptureCallback(htim);
 800472a:	4620      	mov	r0, r4
 800472c:	f7ff ffb6 	bl	800469c <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004730:	2300      	movs	r3, #0
 8004732:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004734:	6823      	ldr	r3, [r4, #0]
 8004736:	691a      	ldr	r2, [r3, #16]
 8004738:	f012 0f10 	tst.w	r2, #16
 800473c:	d012      	beq.n	8004764 <HAL_TIM_IRQHandler+0xc2>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800473e:	68da      	ldr	r2, [r3, #12]
 8004740:	f012 0f10 	tst.w	r2, #16
 8004744:	d00e      	beq.n	8004764 <HAL_TIM_IRQHandler+0xc2>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004746:	f06f 0210 	mvn.w	r2, #16
 800474a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800474c:	2308      	movs	r3, #8
 800474e:	7723      	strb	r3, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004750:	6823      	ldr	r3, [r4, #0]
 8004752:	69db      	ldr	r3, [r3, #28]
 8004754:	f413 7f40 	tst.w	r3, #768	; 0x300
 8004758:	d046      	beq.n	80047e8 <HAL_TIM_IRQHandler+0x146>
        HAL_TIM_IC_CaptureCallback(htim);
 800475a:	4620      	mov	r0, r4
 800475c:	f7ff ff9e 	bl	800469c <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004760:	2300      	movs	r3, #0
 8004762:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004764:	6823      	ldr	r3, [r4, #0]
 8004766:	691a      	ldr	r2, [r3, #16]
 8004768:	f012 0f01 	tst.w	r2, #1
 800476c:	d003      	beq.n	8004776 <HAL_TIM_IRQHandler+0xd4>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800476e:	68da      	ldr	r2, [r3, #12]
 8004770:	f012 0f01 	tst.w	r2, #1
 8004774:	d13f      	bne.n	80047f6 <HAL_TIM_IRQHandler+0x154>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004776:	6823      	ldr	r3, [r4, #0]
 8004778:	691a      	ldr	r2, [r3, #16]
 800477a:	f012 0f80 	tst.w	r2, #128	; 0x80
 800477e:	d003      	beq.n	8004788 <HAL_TIM_IRQHandler+0xe6>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004780:	68da      	ldr	r2, [r3, #12]
 8004782:	f012 0f80 	tst.w	r2, #128	; 0x80
 8004786:	d13d      	bne.n	8004804 <HAL_TIM_IRQHandler+0x162>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8004788:	6823      	ldr	r3, [r4, #0]
 800478a:	691a      	ldr	r2, [r3, #16]
 800478c:	f412 7f80 	tst.w	r2, #256	; 0x100
 8004790:	d003      	beq.n	800479a <HAL_TIM_IRQHandler+0xf8>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004792:	68da      	ldr	r2, [r3, #12]
 8004794:	f012 0f80 	tst.w	r2, #128	; 0x80
 8004798:	d13b      	bne.n	8004812 <HAL_TIM_IRQHandler+0x170>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800479a:	6823      	ldr	r3, [r4, #0]
 800479c:	691a      	ldr	r2, [r3, #16]
 800479e:	f012 0f40 	tst.w	r2, #64	; 0x40
 80047a2:	d003      	beq.n	80047ac <HAL_TIM_IRQHandler+0x10a>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80047a4:	68da      	ldr	r2, [r3, #12]
 80047a6:	f012 0f40 	tst.w	r2, #64	; 0x40
 80047aa:	d139      	bne.n	8004820 <HAL_TIM_IRQHandler+0x17e>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80047ac:	6823      	ldr	r3, [r4, #0]
 80047ae:	691a      	ldr	r2, [r3, #16]
 80047b0:	f012 0f20 	tst.w	r2, #32
 80047b4:	d003      	beq.n	80047be <HAL_TIM_IRQHandler+0x11c>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80047b6:	68da      	ldr	r2, [r3, #12]
 80047b8:	f012 0f20 	tst.w	r2, #32
 80047bc:	d137      	bne.n	800482e <HAL_TIM_IRQHandler+0x18c>
}
 80047be:	bd10      	pop	{r4, pc}
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80047c0:	f7ff ff6b 	bl	800469a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80047c4:	4620      	mov	r0, r4
 80047c6:	f7ff ff6a 	bl	800469e <HAL_TIM_PWM_PulseFinishedCallback>
 80047ca:	e781      	b.n	80046d0 <HAL_TIM_IRQHandler+0x2e>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80047cc:	4620      	mov	r0, r4
 80047ce:	f7ff ff64 	bl	800469a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80047d2:	4620      	mov	r0, r4
 80047d4:	f7ff ff63 	bl	800469e <HAL_TIM_PWM_PulseFinishedCallback>
 80047d8:	e792      	b.n	8004700 <HAL_TIM_IRQHandler+0x5e>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80047da:	4620      	mov	r0, r4
 80047dc:	f7ff ff5d 	bl	800469a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80047e0:	4620      	mov	r0, r4
 80047e2:	f7ff ff5c 	bl	800469e <HAL_TIM_PWM_PulseFinishedCallback>
 80047e6:	e7a3      	b.n	8004730 <HAL_TIM_IRQHandler+0x8e>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80047e8:	4620      	mov	r0, r4
 80047ea:	f7ff ff56 	bl	800469a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80047ee:	4620      	mov	r0, r4
 80047f0:	f7ff ff55 	bl	800469e <HAL_TIM_PWM_PulseFinishedCallback>
 80047f4:	e7b4      	b.n	8004760 <HAL_TIM_IRQHandler+0xbe>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80047f6:	f06f 0201 	mvn.w	r2, #1
 80047fa:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 80047fc:	4620      	mov	r0, r4
 80047fe:	f002 ff87 	bl	8007710 <HAL_TIM_PeriodElapsedCallback>
 8004802:	e7b8      	b.n	8004776 <HAL_TIM_IRQHandler+0xd4>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004804:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004808:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 800480a:	4620      	mov	r0, r4
 800480c:	f000 fa53 	bl	8004cb6 <HAL_TIMEx_BreakCallback>
 8004810:	e7ba      	b.n	8004788 <HAL_TIM_IRQHandler+0xe6>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8004812:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8004816:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_Break2Callback(htim);
 8004818:	4620      	mov	r0, r4
 800481a:	f000 fa4d 	bl	8004cb8 <HAL_TIMEx_Break2Callback>
 800481e:	e7bc      	b.n	800479a <HAL_TIM_IRQHandler+0xf8>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004820:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004824:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 8004826:	4620      	mov	r0, r4
 8004828:	f7ff ff3a 	bl	80046a0 <HAL_TIM_TriggerCallback>
 800482c:	e7be      	b.n	80047ac <HAL_TIM_IRQHandler+0x10a>
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800482e:	f06f 0220 	mvn.w	r2, #32
 8004832:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_CommutCallback(htim);
 8004834:	4620      	mov	r0, r4
 8004836:	f000 fa3d 	bl	8004cb4 <HAL_TIMEx_CommutCallback>
}
 800483a:	e7c0      	b.n	80047be <HAL_TIM_IRQHandler+0x11c>

0800483c <TIM_Base_SetConfig>:
{
 800483c:	b470      	push	{r4, r5, r6}
  tmpcr1 = TIMx->CR1;
 800483e:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004840:	4c37      	ldr	r4, [pc, #220]	; (8004920 <TIM_Base_SetConfig+0xe4>)
 8004842:	42a0      	cmp	r0, r4
 8004844:	bf14      	ite	ne
 8004846:	2400      	movne	r4, #0
 8004848:	2401      	moveq	r4, #1
 800484a:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 800484e:	bf14      	ite	ne
 8004850:	4622      	movne	r2, r4
 8004852:	f044 0201 	orreq.w	r2, r4, #1
 8004856:	b9aa      	cbnz	r2, 8004884 <TIM_Base_SetConfig+0x48>
 8004858:	4d32      	ldr	r5, [pc, #200]	; (8004924 <TIM_Base_SetConfig+0xe8>)
 800485a:	42a8      	cmp	r0, r5
 800485c:	bf14      	ite	ne
 800485e:	2500      	movne	r5, #0
 8004860:	2501      	moveq	r5, #1
 8004862:	4e31      	ldr	r6, [pc, #196]	; (8004928 <TIM_Base_SetConfig+0xec>)
 8004864:	42b0      	cmp	r0, r6
 8004866:	d00d      	beq.n	8004884 <TIM_Base_SetConfig+0x48>
 8004868:	b965      	cbnz	r5, 8004884 <TIM_Base_SetConfig+0x48>
 800486a:	f105 4580 	add.w	r5, r5, #1073741824	; 0x40000000
 800486e:	f505 3582 	add.w	r5, r5, #66560	; 0x10400
 8004872:	42a8      	cmp	r0, r5
 8004874:	bf14      	ite	ne
 8004876:	2500      	movne	r5, #0
 8004878:	2501      	moveq	r5, #1
 800487a:	f506 6600 	add.w	r6, r6, #2048	; 0x800
 800487e:	42b0      	cmp	r0, r6
 8004880:	d000      	beq.n	8004884 <TIM_Base_SetConfig+0x48>
 8004882:	b11d      	cbz	r5, 800488c <TIM_Base_SetConfig+0x50>
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004884:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8004888:	684d      	ldr	r5, [r1, #4]
 800488a:	432b      	orrs	r3, r5
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800488c:	bb12      	cbnz	r2, 80048d4 <TIM_Base_SetConfig+0x98>
 800488e:	4a25      	ldr	r2, [pc, #148]	; (8004924 <TIM_Base_SetConfig+0xe8>)
 8004890:	4290      	cmp	r0, r2
 8004892:	bf14      	ite	ne
 8004894:	2200      	movne	r2, #0
 8004896:	2201      	moveq	r2, #1
 8004898:	4d23      	ldr	r5, [pc, #140]	; (8004928 <TIM_Base_SetConfig+0xec>)
 800489a:	42a8      	cmp	r0, r5
 800489c:	d01a      	beq.n	80048d4 <TIM_Base_SetConfig+0x98>
 800489e:	b9ca      	cbnz	r2, 80048d4 <TIM_Base_SetConfig+0x98>
 80048a0:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
 80048a4:	f502 3282 	add.w	r2, r2, #66560	; 0x10400
 80048a8:	4290      	cmp	r0, r2
 80048aa:	bf14      	ite	ne
 80048ac:	2200      	movne	r2, #0
 80048ae:	2201      	moveq	r2, #1
 80048b0:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 80048b4:	42a8      	cmp	r0, r5
 80048b6:	d00d      	beq.n	80048d4 <TIM_Base_SetConfig+0x98>
 80048b8:	b962      	cbnz	r2, 80048d4 <TIM_Base_SetConfig+0x98>
 80048ba:	4a1c      	ldr	r2, [pc, #112]	; (800492c <TIM_Base_SetConfig+0xf0>)
 80048bc:	4290      	cmp	r0, r2
 80048be:	bf14      	ite	ne
 80048c0:	2200      	movne	r2, #0
 80048c2:	2201      	moveq	r2, #1
 80048c4:	f505 359a 	add.w	r5, r5, #78848	; 0x13400
 80048c8:	42a8      	cmp	r0, r5
 80048ca:	d003      	beq.n	80048d4 <TIM_Base_SetConfig+0x98>
 80048cc:	b912      	cbnz	r2, 80048d4 <TIM_Base_SetConfig+0x98>
 80048ce:	4a18      	ldr	r2, [pc, #96]	; (8004930 <TIM_Base_SetConfig+0xf4>)
 80048d0:	4290      	cmp	r0, r2
 80048d2:	d103      	bne.n	80048dc <TIM_Base_SetConfig+0xa0>
    tmpcr1 &= ~TIM_CR1_CKD;
 80048d4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80048d8:	68ca      	ldr	r2, [r1, #12]
 80048da:	4313      	orrs	r3, r2
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80048dc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80048e0:	694a      	ldr	r2, [r1, #20]
 80048e2:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 80048e4:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 80048e6:	688a      	ldr	r2, [r1, #8]
 80048e8:	62c2      	str	r2, [r0, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 80048ea:	680a      	ldr	r2, [r1, #0]
 80048ec:	6282      	str	r2, [r0, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80048ee:	4b11      	ldr	r3, [pc, #68]	; (8004934 <TIM_Base_SetConfig+0xf8>)
 80048f0:	4298      	cmp	r0, r3
 80048f2:	bf14      	ite	ne
 80048f4:	4623      	movne	r3, r4
 80048f6:	f044 0301 	orreq.w	r3, r4, #1
 80048fa:	b95b      	cbnz	r3, 8004914 <TIM_Base_SetConfig+0xd8>
 80048fc:	4b0b      	ldr	r3, [pc, #44]	; (800492c <TIM_Base_SetConfig+0xf0>)
 80048fe:	4298      	cmp	r0, r3
 8004900:	bf14      	ite	ne
 8004902:	2300      	movne	r3, #0
 8004904:	2301      	moveq	r3, #1
 8004906:	4a0c      	ldr	r2, [pc, #48]	; (8004938 <TIM_Base_SetConfig+0xfc>)
 8004908:	4290      	cmp	r0, r2
 800490a:	d003      	beq.n	8004914 <TIM_Base_SetConfig+0xd8>
 800490c:	b913      	cbnz	r3, 8004914 <TIM_Base_SetConfig+0xd8>
 800490e:	4b08      	ldr	r3, [pc, #32]	; (8004930 <TIM_Base_SetConfig+0xf4>)
 8004910:	4298      	cmp	r0, r3
 8004912:	d101      	bne.n	8004918 <TIM_Base_SetConfig+0xdc>
    TIMx->RCR = Structure->RepetitionCounter;
 8004914:	690b      	ldr	r3, [r1, #16]
 8004916:	6303      	str	r3, [r0, #48]	; 0x30
  TIMx->EGR = TIM_EGR_UG;
 8004918:	2301      	movs	r3, #1
 800491a:	6143      	str	r3, [r0, #20]
}
 800491c:	bc70      	pop	{r4, r5, r6}
 800491e:	4770      	bx	lr
 8004920:	40010000 	.word	0x40010000
 8004924:	40000800 	.word	0x40000800
 8004928:	40000400 	.word	0x40000400
 800492c:	40014400 	.word	0x40014400
 8004930:	40014800 	.word	0x40014800
 8004934:	40010400 	.word	0x40010400
 8004938:	40014000 	.word	0x40014000

0800493c <HAL_TIM_Base_Init>:
  if (htim == NULL)
 800493c:	b360      	cbz	r0, 8004998 <HAL_TIM_Base_Init+0x5c>
{
 800493e:	b510      	push	{r4, lr}
 8004940:	4604      	mov	r4, r0
  if (htim->State == HAL_TIM_STATE_RESET)
 8004942:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8004946:	b313      	cbz	r3, 800498e <HAL_TIM_Base_Init+0x52>
  htim->State = HAL_TIM_STATE_BUSY;
 8004948:	2302      	movs	r3, #2
 800494a:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800494e:	4621      	mov	r1, r4
 8004950:	f851 0b04 	ldr.w	r0, [r1], #4
 8004954:	f7ff ff72 	bl	800483c <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004958:	2301      	movs	r3, #1
 800495a:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800495e:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
 8004962:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 8004966:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 800496a:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
 800496e:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004972:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004976:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 800497a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800497e:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
 8004982:	f884 3047 	strb.w	r3, [r4, #71]	; 0x47
  htim->State = HAL_TIM_STATE_READY;
 8004986:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 800498a:	2000      	movs	r0, #0
}
 800498c:	bd10      	pop	{r4, pc}
    htim->Lock = HAL_UNLOCKED;
 800498e:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 8004992:	f003 f825 	bl	80079e0 <HAL_TIM_Base_MspInit>
 8004996:	e7d7      	b.n	8004948 <HAL_TIM_Base_Init+0xc>
    return HAL_ERROR;
 8004998:	2001      	movs	r0, #1
}
 800499a:	4770      	bx	lr

0800499c <HAL_TIM_OC_Init>:
  if (htim == NULL)
 800499c:	b360      	cbz	r0, 80049f8 <HAL_TIM_OC_Init+0x5c>
{
 800499e:	b510      	push	{r4, lr}
 80049a0:	4604      	mov	r4, r0
  if (htim->State == HAL_TIM_STATE_RESET)
 80049a2:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 80049a6:	b313      	cbz	r3, 80049ee <HAL_TIM_OC_Init+0x52>
  htim->State = HAL_TIM_STATE_BUSY;
 80049a8:	2302      	movs	r3, #2
 80049aa:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 80049ae:	4621      	mov	r1, r4
 80049b0:	f851 0b04 	ldr.w	r0, [r1], #4
 80049b4:	f7ff ff42 	bl	800483c <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80049b8:	2301      	movs	r3, #1
 80049ba:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80049be:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
 80049c2:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 80049c6:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 80049ca:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
 80049ce:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80049d2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80049d6:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 80049da:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80049de:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
 80049e2:	f884 3047 	strb.w	r3, [r4, #71]	; 0x47
  htim->State = HAL_TIM_STATE_READY;
 80049e6:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 80049ea:	2000      	movs	r0, #0
}
 80049ec:	bd10      	pop	{r4, pc}
    htim->Lock = HAL_UNLOCKED;
 80049ee:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    HAL_TIM_OC_MspInit(htim);
 80049f2:	f7ff fe51 	bl	8004698 <HAL_TIM_OC_MspInit>
 80049f6:	e7d7      	b.n	80049a8 <HAL_TIM_OC_Init+0xc>
    return HAL_ERROR;
 80049f8:	2001      	movs	r0, #1
}
 80049fa:	4770      	bx	lr

080049fc <TIM_OC2_SetConfig>:
{
 80049fc:	b470      	push	{r4, r5, r6}
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80049fe:	6a03      	ldr	r3, [r0, #32]
 8004a00:	f023 0310 	bic.w	r3, r3, #16
 8004a04:	6203      	str	r3, [r0, #32]
  tmpccer = TIMx->CCER;
 8004a06:	6a03      	ldr	r3, [r0, #32]
  tmpcr2 =  TIMx->CR2;
 8004a08:	6844      	ldr	r4, [r0, #4]
  tmpccmrx = TIMx->CCMR1;
 8004a0a:	6985      	ldr	r5, [r0, #24]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004a0c:	4a1a      	ldr	r2, [pc, #104]	; (8004a78 <TIM_OC2_SetConfig+0x7c>)
 8004a0e:	402a      	ands	r2, r5
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004a10:	680e      	ldr	r6, [r1, #0]
 8004a12:	ea42 2606 	orr.w	r6, r2, r6, lsl #8
  tmpccer &= ~TIM_CCER_CC2P;
 8004a16:	f023 0320 	bic.w	r3, r3, #32
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004a1a:	688a      	ldr	r2, [r1, #8]
 8004a1c:	ea43 1302 	orr.w	r3, r3, r2, lsl #4
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004a20:	4a16      	ldr	r2, [pc, #88]	; (8004a7c <TIM_OC2_SetConfig+0x80>)
 8004a22:	4d17      	ldr	r5, [pc, #92]	; (8004a80 <TIM_OC2_SetConfig+0x84>)
 8004a24:	42a8      	cmp	r0, r5
 8004a26:	bf18      	it	ne
 8004a28:	4290      	cmpne	r0, r2
 8004a2a:	bf0c      	ite	eq
 8004a2c:	2201      	moveq	r2, #1
 8004a2e:	2200      	movne	r2, #0
 8004a30:	d106      	bne.n	8004a40 <TIM_OC2_SetConfig+0x44>
    tmpccer &= ~TIM_CCER_CC2NP;
 8004a32:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004a36:	68cd      	ldr	r5, [r1, #12]
 8004a38:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
    tmpccer &= ~TIM_CCER_CC2NE;
 8004a3c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004a40:	b95a      	cbnz	r2, 8004a5a <TIM_OC2_SetConfig+0x5e>
 8004a42:	4a10      	ldr	r2, [pc, #64]	; (8004a84 <TIM_OC2_SetConfig+0x88>)
 8004a44:	4290      	cmp	r0, r2
 8004a46:	bf14      	ite	ne
 8004a48:	2200      	movne	r2, #0
 8004a4a:	2201      	moveq	r2, #1
 8004a4c:	4d0e      	ldr	r5, [pc, #56]	; (8004a88 <TIM_OC2_SetConfig+0x8c>)
 8004a4e:	42a8      	cmp	r0, r5
 8004a50:	d003      	beq.n	8004a5a <TIM_OC2_SetConfig+0x5e>
 8004a52:	b912      	cbnz	r2, 8004a5a <TIM_OC2_SetConfig+0x5e>
 8004a54:	4a0d      	ldr	r2, [pc, #52]	; (8004a8c <TIM_OC2_SetConfig+0x90>)
 8004a56:	4290      	cmp	r0, r2
 8004a58:	d107      	bne.n	8004a6a <TIM_OC2_SetConfig+0x6e>
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004a5a:	f424 6440 	bic.w	r4, r4, #3072	; 0xc00
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004a5e:	694a      	ldr	r2, [r1, #20]
 8004a60:	ea44 0482 	orr.w	r4, r4, r2, lsl #2
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004a64:	698a      	ldr	r2, [r1, #24]
 8004a66:	ea44 0482 	orr.w	r4, r4, r2, lsl #2
  TIMx->CR2 = tmpcr2;
 8004a6a:	6044      	str	r4, [r0, #4]
  TIMx->CCMR1 = tmpccmrx;
 8004a6c:	6186      	str	r6, [r0, #24]
  TIMx->CCR2 = OC_Config->Pulse;
 8004a6e:	684a      	ldr	r2, [r1, #4]
 8004a70:	6382      	str	r2, [r0, #56]	; 0x38
  TIMx->CCER = tmpccer;
 8004a72:	6203      	str	r3, [r0, #32]
}
 8004a74:	bc70      	pop	{r4, r5, r6}
 8004a76:	4770      	bx	lr
 8004a78:	feff8cff 	.word	0xfeff8cff
 8004a7c:	40010000 	.word	0x40010000
 8004a80:	40010400 	.word	0x40010400
 8004a84:	40014400 	.word	0x40014400
 8004a88:	40014000 	.word	0x40014000
 8004a8c:	40014800 	.word	0x40014800

08004a90 <HAL_TIM_OC_ConfigChannel>:
  __HAL_LOCK(htim);
 8004a90:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8004a94:	2b01      	cmp	r3, #1
 8004a96:	d02e      	beq.n	8004af6 <HAL_TIM_OC_ConfigChannel+0x66>
{
 8004a98:	b510      	push	{r4, lr}
 8004a9a:	4604      	mov	r4, r0
  __HAL_LOCK(htim);
 8004a9c:	2301      	movs	r3, #1
 8004a9e:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  switch (Channel)
 8004aa2:	2a14      	cmp	r2, #20
 8004aa4:	d80f      	bhi.n	8004ac6 <HAL_TIM_OC_ConfigChannel+0x36>
 8004aa6:	e8df f002 	tbb	[pc, r2]
 8004aaa:	0e0b      	.short	0x0e0b
 8004aac:	0e120e0e 	.word	0x0e120e0e
 8004ab0:	0e160e0e 	.word	0x0e160e0e
 8004ab4:	0e1a0e0e 	.word	0x0e1a0e0e
 8004ab8:	0e1e0e0e 	.word	0x0e1e0e0e
 8004abc:	0e0e      	.short	0x0e0e
 8004abe:	22          	.byte	0x22
 8004abf:	00          	.byte	0x00
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004ac0:	6800      	ldr	r0, [r0, #0]
 8004ac2:	f7ff fc37 	bl	8004334 <TIM_OC1_SetConfig>
  __HAL_UNLOCK(htim);
 8004ac6:	2000      	movs	r0, #0
 8004ac8:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
}
 8004acc:	bd10      	pop	{r4, pc}
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004ace:	6800      	ldr	r0, [r0, #0]
 8004ad0:	f7ff ff94 	bl	80049fc <TIM_OC2_SetConfig>
      break;
 8004ad4:	e7f7      	b.n	8004ac6 <HAL_TIM_OC_ConfigChannel+0x36>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004ad6:	6800      	ldr	r0, [r0, #0]
 8004ad8:	f7ff fc7e 	bl	80043d8 <TIM_OC3_SetConfig>
      break;
 8004adc:	e7f3      	b.n	8004ac6 <HAL_TIM_OC_ConfigChannel+0x36>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004ade:	6800      	ldr	r0, [r0, #0]
 8004ae0:	f7ff fcc2 	bl	8004468 <TIM_OC4_SetConfig>
      break;
 8004ae4:	e7ef      	b.n	8004ac6 <HAL_TIM_OC_ConfigChannel+0x36>
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8004ae6:	6800      	ldr	r0, [r0, #0]
 8004ae8:	f7ff fcf6 	bl	80044d8 <TIM_OC5_SetConfig>
      break;
 8004aec:	e7eb      	b.n	8004ac6 <HAL_TIM_OC_ConfigChannel+0x36>
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8004aee:	6800      	ldr	r0, [r0, #0]
 8004af0:	f7ff fd2a 	bl	8004548 <TIM_OC6_SetConfig>
      break;
 8004af4:	e7e7      	b.n	8004ac6 <HAL_TIM_OC_ConfigChannel+0x36>
  __HAL_LOCK(htim);
 8004af6:	2002      	movs	r0, #2
}
 8004af8:	4770      	bx	lr

08004afa <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004afa:	b410      	push	{r4}
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004afc:	6884      	ldr	r4, [r0, #8]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004afe:	f424 447f 	bic.w	r4, r4, #65280	; 0xff00

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004b02:	ea42 2203 	orr.w	r2, r2, r3, lsl #8
 8004b06:	430a      	orrs	r2, r1
 8004b08:	4322      	orrs	r2, r4

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004b0a:	6082      	str	r2, [r0, #8]
}
 8004b0c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004b10:	4770      	bx	lr
	...

08004b14 <HAL_TIM_ConfigClockSource>:
  __HAL_LOCK(htim);
 8004b14:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8004b18:	2b01      	cmp	r3, #1
 8004b1a:	d077      	beq.n	8004c0c <HAL_TIM_ConfigClockSource+0xf8>
{
 8004b1c:	b510      	push	{r4, lr}
 8004b1e:	4604      	mov	r4, r0
  __HAL_LOCK(htim);
 8004b20:	2301      	movs	r3, #1
 8004b22:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  htim->State = HAL_TIM_STATE_BUSY;
 8004b26:	2302      	movs	r3, #2
 8004b28:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  tmpsmcr = htim->Instance->SMCR;
 8004b2c:	6802      	ldr	r2, [r0, #0]
 8004b2e:	6890      	ldr	r0, [r2, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004b30:	4b37      	ldr	r3, [pc, #220]	; (8004c10 <HAL_TIM_ConfigClockSource+0xfc>)
 8004b32:	4003      	ands	r3, r0
  htim->Instance->SMCR = tmpsmcr;
 8004b34:	6093      	str	r3, [r2, #8]
  switch (sClockSourceConfig->ClockSource)
 8004b36:	680b      	ldr	r3, [r1, #0]
 8004b38:	2b60      	cmp	r3, #96	; 0x60
 8004b3a:	d053      	beq.n	8004be4 <HAL_TIM_ConfigClockSource+0xd0>
 8004b3c:	d90e      	bls.n	8004b5c <HAL_TIM_ConfigClockSource+0x48>
 8004b3e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004b42:	d043      	beq.n	8004bcc <HAL_TIM_ConfigClockSource+0xb8>
 8004b44:	d92d      	bls.n	8004ba2 <HAL_TIM_ConfigClockSource+0x8e>
 8004b46:	4a33      	ldr	r2, [pc, #204]	; (8004c14 <HAL_TIM_ConfigClockSource+0x100>)
 8004b48:	4293      	cmp	r3, r2
 8004b4a:	d025      	beq.n	8004b98 <HAL_TIM_ConfigClockSource+0x84>
 8004b4c:	d937      	bls.n	8004bbe <HAL_TIM_ConfigClockSource+0xaa>
 8004b4e:	4a32      	ldr	r2, [pc, #200]	; (8004c18 <HAL_TIM_ConfigClockSource+0x104>)
 8004b50:	4293      	cmp	r3, r2
 8004b52:	d021      	beq.n	8004b98 <HAL_TIM_ConfigClockSource+0x84>
 8004b54:	3210      	adds	r2, #16
 8004b56:	4293      	cmp	r3, r2
 8004b58:	d01e      	beq.n	8004b98 <HAL_TIM_ConfigClockSource+0x84>
 8004b5a:	e013      	b.n	8004b84 <HAL_TIM_ConfigClockSource+0x70>
 8004b5c:	2b40      	cmp	r3, #64	; 0x40
 8004b5e:	d04b      	beq.n	8004bf8 <HAL_TIM_ConfigClockSource+0xe4>
 8004b60:	d90b      	bls.n	8004b7a <HAL_TIM_ConfigClockSource+0x66>
 8004b62:	2b50      	cmp	r3, #80	; 0x50
 8004b64:	d10e      	bne.n	8004b84 <HAL_TIM_ConfigClockSource+0x70>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004b66:	68ca      	ldr	r2, [r1, #12]
 8004b68:	6849      	ldr	r1, [r1, #4]
 8004b6a:	6820      	ldr	r0, [r4, #0]
 8004b6c:	f7ff fd24 	bl	80045b8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004b70:	2150      	movs	r1, #80	; 0x50
 8004b72:	6820      	ldr	r0, [r4, #0]
 8004b74:	f7ff fd46 	bl	8004604 <TIM_ITRx_SetConfig>
      break;
 8004b78:	e004      	b.n	8004b84 <HAL_TIM_ConfigClockSource+0x70>
  switch (sClockSourceConfig->ClockSource)
 8004b7a:	2b20      	cmp	r3, #32
 8004b7c:	d00c      	beq.n	8004b98 <HAL_TIM_ConfigClockSource+0x84>
 8004b7e:	d908      	bls.n	8004b92 <HAL_TIM_ConfigClockSource+0x7e>
 8004b80:	2b30      	cmp	r3, #48	; 0x30
 8004b82:	d009      	beq.n	8004b98 <HAL_TIM_ConfigClockSource+0x84>
  htim->State = HAL_TIM_STATE_READY;
 8004b84:	2301      	movs	r3, #1
 8004b86:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 8004b8a:	2000      	movs	r0, #0
 8004b8c:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
}
 8004b90:	bd10      	pop	{r4, pc}
  switch (sClockSourceConfig->ClockSource)
 8004b92:	b10b      	cbz	r3, 8004b98 <HAL_TIM_ConfigClockSource+0x84>
 8004b94:	2b10      	cmp	r3, #16
 8004b96:	d1f5      	bne.n	8004b84 <HAL_TIM_ConfigClockSource+0x70>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004b98:	4619      	mov	r1, r3
 8004b9a:	6820      	ldr	r0, [r4, #0]
 8004b9c:	f7ff fd32 	bl	8004604 <TIM_ITRx_SetConfig>
      break;
 8004ba0:	e7f0      	b.n	8004b84 <HAL_TIM_ConfigClockSource+0x70>
  switch (sClockSourceConfig->ClockSource)
 8004ba2:	2b70      	cmp	r3, #112	; 0x70
 8004ba4:	d1ee      	bne.n	8004b84 <HAL_TIM_ConfigClockSource+0x70>
      TIM_ETR_SetConfig(htim->Instance,
 8004ba6:	68cb      	ldr	r3, [r1, #12]
 8004ba8:	684a      	ldr	r2, [r1, #4]
 8004baa:	6889      	ldr	r1, [r1, #8]
 8004bac:	6820      	ldr	r0, [r4, #0]
 8004bae:	f7ff ffa4 	bl	8004afa <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8004bb2:	6822      	ldr	r2, [r4, #0]
 8004bb4:	6893      	ldr	r3, [r2, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004bb6:	f043 0377 	orr.w	r3, r3, #119	; 0x77
      htim->Instance->SMCR = tmpsmcr;
 8004bba:	6093      	str	r3, [r2, #8]
      break;
 8004bbc:	e7e2      	b.n	8004b84 <HAL_TIM_ConfigClockSource+0x70>
  switch (sClockSourceConfig->ClockSource)
 8004bbe:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004bc2:	d0e9      	beq.n	8004b98 <HAL_TIM_ConfigClockSource+0x84>
 8004bc4:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8004bc8:	d0e6      	beq.n	8004b98 <HAL_TIM_ConfigClockSource+0x84>
 8004bca:	e7db      	b.n	8004b84 <HAL_TIM_ConfigClockSource+0x70>
      TIM_ETR_SetConfig(htim->Instance,
 8004bcc:	68cb      	ldr	r3, [r1, #12]
 8004bce:	684a      	ldr	r2, [r1, #4]
 8004bd0:	6889      	ldr	r1, [r1, #8]
 8004bd2:	6820      	ldr	r0, [r4, #0]
 8004bd4:	f7ff ff91 	bl	8004afa <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004bd8:	6822      	ldr	r2, [r4, #0]
 8004bda:	6893      	ldr	r3, [r2, #8]
 8004bdc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004be0:	6093      	str	r3, [r2, #8]
      break;
 8004be2:	e7cf      	b.n	8004b84 <HAL_TIM_ConfigClockSource+0x70>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004be4:	68ca      	ldr	r2, [r1, #12]
 8004be6:	6849      	ldr	r1, [r1, #4]
 8004be8:	6820      	ldr	r0, [r4, #0]
 8004bea:	f7ff fcf7 	bl	80045dc <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004bee:	2160      	movs	r1, #96	; 0x60
 8004bf0:	6820      	ldr	r0, [r4, #0]
 8004bf2:	f7ff fd07 	bl	8004604 <TIM_ITRx_SetConfig>
      break;
 8004bf6:	e7c5      	b.n	8004b84 <HAL_TIM_ConfigClockSource+0x70>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004bf8:	68ca      	ldr	r2, [r1, #12]
 8004bfa:	6849      	ldr	r1, [r1, #4]
 8004bfc:	6820      	ldr	r0, [r4, #0]
 8004bfe:	f7ff fcdb 	bl	80045b8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004c02:	2140      	movs	r1, #64	; 0x40
 8004c04:	6820      	ldr	r0, [r4, #0]
 8004c06:	f7ff fcfd 	bl	8004604 <TIM_ITRx_SetConfig>
      break;
 8004c0a:	e7bb      	b.n	8004b84 <HAL_TIM_ConfigClockSource+0x70>
  __HAL_LOCK(htim);
 8004c0c:	2002      	movs	r0, #2
}
 8004c0e:	4770      	bx	lr
 8004c10:	ffce0088 	.word	0xffce0088
 8004c14:	00100020 	.word	0x00100020
 8004c18:	00100030 	.word	0x00100030

08004c1c <HAL_TIMEx_MasterConfigSynchronization>:
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004c1c:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8004c20:	2b01      	cmp	r3, #1
 8004c22:	d041      	beq.n	8004ca8 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
{
 8004c24:	b470      	push	{r4, r5, r6}
  __HAL_LOCK(htim);
 8004c26:	2301      	movs	r3, #1
 8004c28:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004c2c:	2302      	movs	r3, #2
 8004c2e:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004c32:	6803      	ldr	r3, [r0, #0]
 8004c34:	685a      	ldr	r2, [r3, #4]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004c36:	689d      	ldr	r5, [r3, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8004c38:	4e1c      	ldr	r6, [pc, #112]	; (8004cac <HAL_TIMEx_MasterConfigSynchronization+0x90>)
 8004c3a:	4c1d      	ldr	r4, [pc, #116]	; (8004cb0 <HAL_TIMEx_MasterConfigSynchronization+0x94>)
 8004c3c:	42a3      	cmp	r3, r4
 8004c3e:	bf18      	it	ne
 8004c40:	42b3      	cmpne	r3, r6
 8004c42:	d103      	bne.n	8004c4c <HAL_TIMEx_MasterConfigSynchronization+0x30>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8004c44:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8004c48:	684c      	ldr	r4, [r1, #4]
 8004c4a:	4322      	orrs	r2, r4
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004c4c:	f022 0270 	bic.w	r2, r2, #112	; 0x70
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004c50:	680c      	ldr	r4, [r1, #0]
 8004c52:	4322      	orrs	r2, r4

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004c54:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004c56:	6803      	ldr	r3, [r0, #0]
 8004c58:	4a14      	ldr	r2, [pc, #80]	; (8004cac <HAL_TIMEx_MasterConfigSynchronization+0x90>)
 8004c5a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004c5e:	bf18      	it	ne
 8004c60:	4293      	cmpne	r3, r2
 8004c62:	d013      	beq.n	8004c8c <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8004c64:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 8004c68:	4293      	cmp	r3, r2
 8004c6a:	d00f      	beq.n	8004c8c <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8004c6c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8004c70:	4293      	cmp	r3, r2
 8004c72:	d00b      	beq.n	8004c8c <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8004c74:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8004c78:	4293      	cmp	r3, r2
 8004c7a:	d007      	beq.n	8004c8c <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8004c7c:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 8004c80:	4293      	cmp	r3, r2
 8004c82:	d003      	beq.n	8004c8c <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8004c84:	f5a2 426c 	sub.w	r2, r2, #60416	; 0xec00
 8004c88:	4293      	cmp	r3, r2
 8004c8a:	d104      	bne.n	8004c96 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004c8c:	f025 0580 	bic.w	r5, r5, #128	; 0x80
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004c90:	688a      	ldr	r2, [r1, #8]
 8004c92:	4315      	orrs	r5, r2

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004c94:	609d      	str	r5, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004c96:	2301      	movs	r3, #1
 8004c98:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004c9c:	2300      	movs	r3, #0
 8004c9e:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c

  return HAL_OK;
 8004ca2:	4618      	mov	r0, r3
}
 8004ca4:	bc70      	pop	{r4, r5, r6}
 8004ca6:	4770      	bx	lr
  __HAL_LOCK(htim);
 8004ca8:	2002      	movs	r0, #2
}
 8004caa:	4770      	bx	lr
 8004cac:	40010000 	.word	0x40010000
 8004cb0:	40010400 	.word	0x40010400

08004cb4 <HAL_TIMEx_CommutCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004cb4:	4770      	bx	lr

08004cb6 <HAL_TIMEx_BreakCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004cb6:	4770      	bx	lr

08004cb8 <HAL_TIMEx_Break2Callback>:
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8004cb8:	4770      	bx	lr
	...

08004cbc <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004cbc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004cc0:	b086      	sub	sp, #24
 8004cc2:	4604      	mov	r4, r0
  uint32_t pclk;

  /* Check the parameters */
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  if (UART_INSTANCE_LOWPOWER(huart))
 8004cc4:	6801      	ldr	r1, [r0, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004cc6:	6883      	ldr	r3, [r0, #8]
 8004cc8:	6902      	ldr	r2, [r0, #16]
 8004cca:	4313      	orrs	r3, r2
 8004ccc:	6942      	ldr	r2, [r0, #20]
 8004cce:	4313      	orrs	r3, r2
 8004cd0:	69c2      	ldr	r2, [r0, #28]
 8004cd2:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)huart->FifoMode;
 8004cd4:	6e42      	ldr	r2, [r0, #100]	; 0x64
 8004cd6:	4313      	orrs	r3, r2
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004cd8:	6808      	ldr	r0, [r1, #0]
 8004cda:	4a88      	ldr	r2, [pc, #544]	; (8004efc <UART_SetConfig+0x240>)
 8004cdc:	4002      	ands	r2, r0
 8004cde:	431a      	orrs	r2, r3
 8004ce0:	600a      	str	r2, [r1, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004ce2:	6822      	ldr	r2, [r4, #0]
 8004ce4:	6853      	ldr	r3, [r2, #4]
 8004ce6:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8004cea:	68e1      	ldr	r1, [r4, #12]
 8004cec:	430b      	orrs	r3, r1
 8004cee:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004cf0:	69a1      	ldr	r1, [r4, #24]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004cf2:	6822      	ldr	r2, [r4, #0]
 8004cf4:	4b82      	ldr	r3, [pc, #520]	; (8004f00 <UART_SetConfig+0x244>)
 8004cf6:	429a      	cmp	r2, r3
 8004cf8:	d001      	beq.n	8004cfe <UART_SetConfig+0x42>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8004cfa:	6a23      	ldr	r3, [r4, #32]
 8004cfc:	4319      	orrs	r1, r3
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004cfe:	6890      	ldr	r0, [r2, #8]
 8004d00:	4b80      	ldr	r3, [pc, #512]	; (8004f04 <UART_SetConfig+0x248>)
 8004d02:	4003      	ands	r3, r0
 8004d04:	430b      	orrs	r3, r1
 8004d06:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8004d08:	6822      	ldr	r2, [r4, #0]
 8004d0a:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8004d0c:	f023 030f 	bic.w	r3, r3, #15
 8004d10:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8004d12:	430b      	orrs	r3, r1
 8004d14:	62d3      	str	r3, [r2, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004d16:	6822      	ldr	r2, [r4, #0]
 8004d18:	4b7b      	ldr	r3, [pc, #492]	; (8004f08 <UART_SetConfig+0x24c>)
 8004d1a:	429a      	cmp	r2, r3
 8004d1c:	d021      	beq.n	8004d62 <UART_SetConfig+0xa6>
 8004d1e:	4b7b      	ldr	r3, [pc, #492]	; (8004f0c <UART_SetConfig+0x250>)
 8004d20:	429a      	cmp	r2, r3
 8004d22:	f000 808c 	beq.w	8004e3e <UART_SetConfig+0x182>
 8004d26:	4b7a      	ldr	r3, [pc, #488]	; (8004f10 <UART_SetConfig+0x254>)
 8004d28:	429a      	cmp	r2, r3
 8004d2a:	f000 80a2 	beq.w	8004e72 <UART_SetConfig+0x1b6>
 8004d2e:	4b79      	ldr	r3, [pc, #484]	; (8004f14 <UART_SetConfig+0x258>)
 8004d30:	429a      	cmp	r2, r3
 8004d32:	f000 80b5 	beq.w	8004ea0 <UART_SetConfig+0x1e4>
 8004d36:	4b78      	ldr	r3, [pc, #480]	; (8004f18 <UART_SetConfig+0x25c>)
 8004d38:	429a      	cmp	r2, r3
 8004d3a:	f000 80c8 	beq.w	8004ece <UART_SetConfig+0x212>
 8004d3e:	4b77      	ldr	r3, [pc, #476]	; (8004f1c <UART_SetConfig+0x260>)
 8004d40:	429a      	cmp	r2, r3
 8004d42:	f000 80f3 	beq.w	8004f2c <UART_SetConfig+0x270>
 8004d46:	4b76      	ldr	r3, [pc, #472]	; (8004f20 <UART_SetConfig+0x264>)
 8004d48:	429a      	cmp	r2, r3
 8004d4a:	f000 8118 	beq.w	8004f7e <UART_SetConfig+0x2c2>
 8004d4e:	4b75      	ldr	r3, [pc, #468]	; (8004f24 <UART_SetConfig+0x268>)
 8004d50:	429a      	cmp	r2, r3
 8004d52:	f000 812b 	beq.w	8004fac <UART_SetConfig+0x2f0>
 8004d56:	4b6a      	ldr	r3, [pc, #424]	; (8004f00 <UART_SetConfig+0x244>)
 8004d58:	429a      	cmp	r2, r3
 8004d5a:	f000 813e 	beq.w	8004fda <UART_SetConfig+0x31e>
 8004d5e:	2380      	movs	r3, #128	; 0x80
 8004d60:	e033      	b.n	8004dca <UART_SetConfig+0x10e>
 8004d62:	4b71      	ldr	r3, [pc, #452]	; (8004f28 <UART_SetConfig+0x26c>)
 8004d64:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004d66:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004d6a:	2b28      	cmp	r3, #40	; 0x28
 8004d6c:	d865      	bhi.n	8004e3a <UART_SetConfig+0x17e>
 8004d6e:	e8df f013 	tbh	[pc, r3, lsl #1]
 8004d72:	0029      	.short	0x0029
 8004d74:	00640064 	.word	0x00640064
 8004d78:	00640064 	.word	0x00640064
 8004d7c:	00640064 	.word	0x00640064
 8004d80:	014c0064 	.word	0x014c0064
 8004d84:	00640064 	.word	0x00640064
 8004d88:	00640064 	.word	0x00640064
 8004d8c:	00640064 	.word	0x00640064
 8004d90:	002b0064 	.word	0x002b0064
 8004d94:	00640064 	.word	0x00640064
 8004d98:	00640064 	.word	0x00640064
 8004d9c:	00640064 	.word	0x00640064
 8004da0:	005e0064 	.word	0x005e0064
 8004da4:	00640064 	.word	0x00640064
 8004da8:	00640064 	.word	0x00640064
 8004dac:	00640064 	.word	0x00640064
 8004db0:	00600064 	.word	0x00600064
 8004db4:	00640064 	.word	0x00640064
 8004db8:	00640064 	.word	0x00640064
 8004dbc:	00640064 	.word	0x00640064
 8004dc0:	00620064 	.word	0x00620064
 8004dc4:	2301      	movs	r3, #1
 8004dc6:	e000      	b.n	8004dca <UART_SetConfig+0x10e>
 8004dc8:	2308      	movs	r3, #8

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8004dca:	494d      	ldr	r1, [pc, #308]	; (8004f00 <UART_SetConfig+0x244>)
 8004dcc:	428a      	cmp	r2, r1
 8004dce:	f000 812e 	beq.w	800502e <UART_SetConfig+0x372>
        }
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004dd2:	69e0      	ldr	r0, [r4, #28]
 8004dd4:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 8004dd8:	f000 81b0 	beq.w	800513c <UART_SetConfig+0x480>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004ddc:	2b20      	cmp	r3, #32
 8004dde:	f200 8209 	bhi.w	80051f4 <UART_SetConfig+0x538>
 8004de2:	2b20      	cmp	r3, #32
 8004de4:	f200 825d 	bhi.w	80052a2 <UART_SetConfig+0x5e6>
 8004de8:	e8df f013 	tbh	[pc, r3, lsl #1]
 8004dec:	0230022a 	.word	0x0230022a
 8004df0:	025b025b 	.word	0x025b025b
 8004df4:	025b0233 	.word	0x025b0233
 8004df8:	025b025b 	.word	0x025b025b
 8004dfc:	025b0238 	.word	0x025b0238
 8004e00:	025b025b 	.word	0x025b025b
 8004e04:	025b025b 	.word	0x025b025b
 8004e08:	025b025b 	.word	0x025b025b
 8004e0c:	025b023d 	.word	0x025b023d
 8004e10:	025b025b 	.word	0x025b025b
 8004e14:	025b025b 	.word	0x025b025b
 8004e18:	025b025b 	.word	0x025b025b
 8004e1c:	025b025b 	.word	0x025b025b
 8004e20:	025b025b 	.word	0x025b025b
 8004e24:	025b025b 	.word	0x025b025b
 8004e28:	025b025b 	.word	0x025b025b
 8004e2c:	0249      	.short	0x0249
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004e2e:	2310      	movs	r3, #16
 8004e30:	e7cb      	b.n	8004dca <UART_SetConfig+0x10e>
 8004e32:	2320      	movs	r3, #32
 8004e34:	e7c9      	b.n	8004dca <UART_SetConfig+0x10e>
 8004e36:	2340      	movs	r3, #64	; 0x40
 8004e38:	e7c7      	b.n	8004dca <UART_SetConfig+0x10e>
 8004e3a:	2380      	movs	r3, #128	; 0x80
 8004e3c:	e7c5      	b.n	8004dca <UART_SetConfig+0x10e>
 8004e3e:	4b3a      	ldr	r3, [pc, #232]	; (8004f28 <UART_SetConfig+0x26c>)
 8004e40:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004e42:	f003 0307 	and.w	r3, r3, #7
 8004e46:	2b05      	cmp	r3, #5
 8004e48:	d811      	bhi.n	8004e6e <UART_SetConfig+0x1b2>
 8004e4a:	e8df f013 	tbh	[pc, r3, lsl #1]
 8004e4e:	0006      	.short	0x0006
 8004e50:	000800e0 	.word	0x000800e0
 8004e54:	000c000a 	.word	0x000c000a
 8004e58:	000e      	.short	0x000e
 8004e5a:	2300      	movs	r3, #0
 8004e5c:	e7b5      	b.n	8004dca <UART_SetConfig+0x10e>
 8004e5e:	2308      	movs	r3, #8
 8004e60:	e7b3      	b.n	8004dca <UART_SetConfig+0x10e>
 8004e62:	2310      	movs	r3, #16
 8004e64:	e7b1      	b.n	8004dca <UART_SetConfig+0x10e>
 8004e66:	2320      	movs	r3, #32
 8004e68:	e7af      	b.n	8004dca <UART_SetConfig+0x10e>
 8004e6a:	2340      	movs	r3, #64	; 0x40
 8004e6c:	e7ad      	b.n	8004dca <UART_SetConfig+0x10e>
 8004e6e:	2380      	movs	r3, #128	; 0x80
 8004e70:	e7ab      	b.n	8004dca <UART_SetConfig+0x10e>
 8004e72:	4b2d      	ldr	r3, [pc, #180]	; (8004f28 <UART_SetConfig+0x26c>)
 8004e74:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004e76:	f003 0307 	and.w	r3, r3, #7
 8004e7a:	2b05      	cmp	r3, #5
 8004e7c:	d80e      	bhi.n	8004e9c <UART_SetConfig+0x1e0>
 8004e7e:	e8df f003 	tbb	[pc, r3]
 8004e82:	c803      	.short	0xc803
 8004e84:	0b090705 	.word	0x0b090705
 8004e88:	2300      	movs	r3, #0
 8004e8a:	e79e      	b.n	8004dca <UART_SetConfig+0x10e>
 8004e8c:	2308      	movs	r3, #8
 8004e8e:	e79c      	b.n	8004dca <UART_SetConfig+0x10e>
 8004e90:	2310      	movs	r3, #16
 8004e92:	e79a      	b.n	8004dca <UART_SetConfig+0x10e>
 8004e94:	2320      	movs	r3, #32
 8004e96:	e798      	b.n	8004dca <UART_SetConfig+0x10e>
 8004e98:	2340      	movs	r3, #64	; 0x40
 8004e9a:	e796      	b.n	8004dca <UART_SetConfig+0x10e>
 8004e9c:	2380      	movs	r3, #128	; 0x80
 8004e9e:	e794      	b.n	8004dca <UART_SetConfig+0x10e>
 8004ea0:	4b21      	ldr	r3, [pc, #132]	; (8004f28 <UART_SetConfig+0x26c>)
 8004ea2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004ea4:	f003 0307 	and.w	r3, r3, #7
 8004ea8:	2b05      	cmp	r3, #5
 8004eaa:	d80e      	bhi.n	8004eca <UART_SetConfig+0x20e>
 8004eac:	e8df f003 	tbb	[pc, r3]
 8004eb0:	0705b303 	.word	0x0705b303
 8004eb4:	0b09      	.short	0x0b09
 8004eb6:	2300      	movs	r3, #0
 8004eb8:	e787      	b.n	8004dca <UART_SetConfig+0x10e>
 8004eba:	2308      	movs	r3, #8
 8004ebc:	e785      	b.n	8004dca <UART_SetConfig+0x10e>
 8004ebe:	2310      	movs	r3, #16
 8004ec0:	e783      	b.n	8004dca <UART_SetConfig+0x10e>
 8004ec2:	2320      	movs	r3, #32
 8004ec4:	e781      	b.n	8004dca <UART_SetConfig+0x10e>
 8004ec6:	2340      	movs	r3, #64	; 0x40
 8004ec8:	e77f      	b.n	8004dca <UART_SetConfig+0x10e>
 8004eca:	2380      	movs	r3, #128	; 0x80
 8004ecc:	e77d      	b.n	8004dca <UART_SetConfig+0x10e>
 8004ece:	4b16      	ldr	r3, [pc, #88]	; (8004f28 <UART_SetConfig+0x26c>)
 8004ed0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004ed2:	f003 0307 	and.w	r3, r3, #7
 8004ed6:	2b05      	cmp	r3, #5
 8004ed8:	d80e      	bhi.n	8004ef8 <UART_SetConfig+0x23c>
 8004eda:	e8df f003 	tbb	[pc, r3]
 8004ede:	9e03      	.short	0x9e03
 8004ee0:	0b090705 	.word	0x0b090705
 8004ee4:	2300      	movs	r3, #0
 8004ee6:	e770      	b.n	8004dca <UART_SetConfig+0x10e>
 8004ee8:	2308      	movs	r3, #8
 8004eea:	e76e      	b.n	8004dca <UART_SetConfig+0x10e>
 8004eec:	2310      	movs	r3, #16
 8004eee:	e76c      	b.n	8004dca <UART_SetConfig+0x10e>
 8004ef0:	2320      	movs	r3, #32
 8004ef2:	e76a      	b.n	8004dca <UART_SetConfig+0x10e>
 8004ef4:	2340      	movs	r3, #64	; 0x40
 8004ef6:	e768      	b.n	8004dca <UART_SetConfig+0x10e>
 8004ef8:	2380      	movs	r3, #128	; 0x80
 8004efa:	e766      	b.n	8004dca <UART_SetConfig+0x10e>
 8004efc:	cfff69f3 	.word	0xcfff69f3
 8004f00:	58000c00 	.word	0x58000c00
 8004f04:	11fff4ff 	.word	0x11fff4ff
 8004f08:	40011000 	.word	0x40011000
 8004f0c:	40004400 	.word	0x40004400
 8004f10:	40004800 	.word	0x40004800
 8004f14:	40004c00 	.word	0x40004c00
 8004f18:	40005000 	.word	0x40005000
 8004f1c:	40011400 	.word	0x40011400
 8004f20:	40007800 	.word	0x40007800
 8004f24:	40007c00 	.word	0x40007c00
 8004f28:	58024400 	.word	0x58024400
 8004f2c:	4b7e      	ldr	r3, [pc, #504]	; (8005128 <UART_SetConfig+0x46c>)
 8004f2e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004f30:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004f34:	2b28      	cmp	r3, #40	; 0x28
 8004f36:	d820      	bhi.n	8004f7a <UART_SetConfig+0x2be>
 8004f38:	e8df f003 	tbb	[pc, r3]
 8004f3c:	1f1f1f15 	.word	0x1f1f1f15
 8004f40:	1f1f1f1f 	.word	0x1f1f1f1f
 8004f44:	1f1f1f71 	.word	0x1f1f1f71
 8004f48:	1f1f1f1f 	.word	0x1f1f1f1f
 8004f4c:	1f1f1f17 	.word	0x1f1f1f17
 8004f50:	1f1f1f1f 	.word	0x1f1f1f1f
 8004f54:	1f1f1f19 	.word	0x1f1f1f19
 8004f58:	1f1f1f1f 	.word	0x1f1f1f1f
 8004f5c:	1f1f1f1b 	.word	0x1f1f1f1b
 8004f60:	1f1f1f1f 	.word	0x1f1f1f1f
 8004f64:	1d          	.byte	0x1d
 8004f65:	00          	.byte	0x00
 8004f66:	2301      	movs	r3, #1
 8004f68:	e72f      	b.n	8004dca <UART_SetConfig+0x10e>
 8004f6a:	2308      	movs	r3, #8
 8004f6c:	e72d      	b.n	8004dca <UART_SetConfig+0x10e>
 8004f6e:	2310      	movs	r3, #16
 8004f70:	e72b      	b.n	8004dca <UART_SetConfig+0x10e>
 8004f72:	2320      	movs	r3, #32
 8004f74:	e729      	b.n	8004dca <UART_SetConfig+0x10e>
 8004f76:	2340      	movs	r3, #64	; 0x40
 8004f78:	e727      	b.n	8004dca <UART_SetConfig+0x10e>
 8004f7a:	2380      	movs	r3, #128	; 0x80
 8004f7c:	e725      	b.n	8004dca <UART_SetConfig+0x10e>
 8004f7e:	4b6a      	ldr	r3, [pc, #424]	; (8005128 <UART_SetConfig+0x46c>)
 8004f80:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004f82:	f003 0307 	and.w	r3, r3, #7
 8004f86:	2b05      	cmp	r3, #5
 8004f88:	d80e      	bhi.n	8004fa8 <UART_SetConfig+0x2ec>
 8004f8a:	e8df f003 	tbb	[pc, r3]
 8004f8e:	4a03      	.short	0x4a03
 8004f90:	0b090705 	.word	0x0b090705
 8004f94:	2300      	movs	r3, #0
 8004f96:	e718      	b.n	8004dca <UART_SetConfig+0x10e>
 8004f98:	2308      	movs	r3, #8
 8004f9a:	e716      	b.n	8004dca <UART_SetConfig+0x10e>
 8004f9c:	2310      	movs	r3, #16
 8004f9e:	e714      	b.n	8004dca <UART_SetConfig+0x10e>
 8004fa0:	2320      	movs	r3, #32
 8004fa2:	e712      	b.n	8004dca <UART_SetConfig+0x10e>
 8004fa4:	2340      	movs	r3, #64	; 0x40
 8004fa6:	e710      	b.n	8004dca <UART_SetConfig+0x10e>
 8004fa8:	2380      	movs	r3, #128	; 0x80
 8004faa:	e70e      	b.n	8004dca <UART_SetConfig+0x10e>
 8004fac:	4b5e      	ldr	r3, [pc, #376]	; (8005128 <UART_SetConfig+0x46c>)
 8004fae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004fb0:	f003 0307 	and.w	r3, r3, #7
 8004fb4:	2b05      	cmp	r3, #5
 8004fb6:	d80e      	bhi.n	8004fd6 <UART_SetConfig+0x31a>
 8004fb8:	e8df f003 	tbb	[pc, r3]
 8004fbc:	07053503 	.word	0x07053503
 8004fc0:	0b09      	.short	0x0b09
 8004fc2:	2300      	movs	r3, #0
 8004fc4:	e701      	b.n	8004dca <UART_SetConfig+0x10e>
 8004fc6:	2308      	movs	r3, #8
 8004fc8:	e6ff      	b.n	8004dca <UART_SetConfig+0x10e>
 8004fca:	2310      	movs	r3, #16
 8004fcc:	e6fd      	b.n	8004dca <UART_SetConfig+0x10e>
 8004fce:	2320      	movs	r3, #32
 8004fd0:	e6fb      	b.n	8004dca <UART_SetConfig+0x10e>
 8004fd2:	2340      	movs	r3, #64	; 0x40
 8004fd4:	e6f9      	b.n	8004dca <UART_SetConfig+0x10e>
 8004fd6:	2380      	movs	r3, #128	; 0x80
 8004fd8:	e6f7      	b.n	8004dca <UART_SetConfig+0x10e>
 8004fda:	f503 330e 	add.w	r3, r3, #145408	; 0x23800
 8004fde:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004fe0:	f003 0307 	and.w	r3, r3, #7
 8004fe4:	2b05      	cmp	r3, #5
 8004fe6:	d80e      	bhi.n	8005006 <UART_SetConfig+0x34a>
 8004fe8:	e8df f003 	tbb	[pc, r3]
 8004fec:	07051f03 	.word	0x07051f03
 8004ff0:	0b09      	.short	0x0b09
 8004ff2:	2302      	movs	r3, #2
 8004ff4:	e6e9      	b.n	8004dca <UART_SetConfig+0x10e>
 8004ff6:	2308      	movs	r3, #8
 8004ff8:	e6e7      	b.n	8004dca <UART_SetConfig+0x10e>
 8004ffa:	2310      	movs	r3, #16
 8004ffc:	e6e5      	b.n	8004dca <UART_SetConfig+0x10e>
 8004ffe:	2320      	movs	r3, #32
 8005000:	e6e3      	b.n	8004dca <UART_SetConfig+0x10e>
 8005002:	2340      	movs	r3, #64	; 0x40
 8005004:	e6e1      	b.n	8004dca <UART_SetConfig+0x10e>
 8005006:	2380      	movs	r3, #128	; 0x80
 8005008:	e6df      	b.n	8004dca <UART_SetConfig+0x10e>
 800500a:	2304      	movs	r3, #4
 800500c:	e6dd      	b.n	8004dca <UART_SetConfig+0x10e>
 800500e:	2304      	movs	r3, #4
 8005010:	e6db      	b.n	8004dca <UART_SetConfig+0x10e>
 8005012:	2304      	movs	r3, #4
 8005014:	e6d9      	b.n	8004dca <UART_SetConfig+0x10e>
 8005016:	2304      	movs	r3, #4
 8005018:	e6d7      	b.n	8004dca <UART_SetConfig+0x10e>
 800501a:	2304      	movs	r3, #4
 800501c:	e6d5      	b.n	8004dca <UART_SetConfig+0x10e>
 800501e:	2304      	movs	r3, #4
 8005020:	e6d3      	b.n	8004dca <UART_SetConfig+0x10e>
 8005022:	2304      	movs	r3, #4
 8005024:	e6d1      	b.n	8004dca <UART_SetConfig+0x10e>
 8005026:	2304      	movs	r3, #4
 8005028:	e6cf      	b.n	8004dca <UART_SetConfig+0x10e>
 800502a:	2304      	movs	r3, #4
 800502c:	e6cd      	b.n	8004dca <UART_SetConfig+0x10e>
    switch (clocksource)
 800502e:	2b20      	cmp	r3, #32
 8005030:	d827      	bhi.n	8005082 <UART_SetConfig+0x3c6>
 8005032:	2b02      	cmp	r3, #2
 8005034:	f0c0 8127 	bcc.w	8005286 <UART_SetConfig+0x5ca>
 8005038:	3b02      	subs	r3, #2
 800503a:	2b1e      	cmp	r3, #30
 800503c:	f200 8125 	bhi.w	800528a <UART_SetConfig+0x5ce>
 8005040:	e8df f013 	tbh	[pc, r3, lsl #1]
 8005044:	01230052 	.word	0x01230052
 8005048:	01230058 	.word	0x01230058
 800504c:	01230123 	.word	0x01230123
 8005050:	0123005d 	.word	0x0123005d
 8005054:	01230123 	.word	0x01230123
 8005058:	01230123 	.word	0x01230123
 800505c:	01230123 	.word	0x01230123
 8005060:	01230062 	.word	0x01230062
 8005064:	01230123 	.word	0x01230123
 8005068:	01230123 	.word	0x01230123
 800506c:	01230123 	.word	0x01230123
 8005070:	01230123 	.word	0x01230123
 8005074:	01230123 	.word	0x01230123
 8005078:	01230123 	.word	0x01230123
 800507c:	01230123 	.word	0x01230123
 8005080:	006e      	.short	0x006e
 8005082:	2b40      	cmp	r3, #64	; 0x40
 8005084:	d12e      	bne.n	80050e4 <UART_SetConfig+0x428>
        pclk = (uint32_t) LSE_VALUE;
 8005086:	f44f 4000 	mov.w	r0, #32768	; 0x8000
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800508a:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800508c:	4b27      	ldr	r3, [pc, #156]	; (800512c <UART_SetConfig+0x470>)
 800508e:	f833 2012 	ldrh.w	r2, [r3, r2, lsl #1]
 8005092:	fbb0 f3f2 	udiv	r3, r0, r2
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005096:	6865      	ldr	r5, [r4, #4]
 8005098:	eb05 0145 	add.w	r1, r5, r5, lsl #1
 800509c:	4299      	cmp	r1, r3
 800509e:	f200 80f6 	bhi.w	800528e <UART_SetConfig+0x5d2>
 80050a2:	ebb3 3f05 	cmp.w	r3, r5, lsl #12
 80050a6:	f200 80f4 	bhi.w	8005292 <UART_SetConfig+0x5d6>
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, (uint64_t)huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80050aa:	f04f 0800 	mov.w	r8, #0
 80050ae:	b292      	uxth	r2, r2
 80050b0:	2300      	movs	r3, #0
 80050b2:	4641      	mov	r1, r8
 80050b4:	f7fb f964 	bl	8000380 <__aeabi_uldivmod>
 80050b8:	020f      	lsls	r7, r1, #8
 80050ba:	ea47 6710 	orr.w	r7, r7, r0, lsr #24
 80050be:	0206      	lsls	r6, r0, #8
 80050c0:	0868      	lsrs	r0, r5, #1
 80050c2:	462a      	mov	r2, r5
 80050c4:	4643      	mov	r3, r8
 80050c6:	1830      	adds	r0, r6, r0
 80050c8:	f147 0100 	adc.w	r1, r7, #0
 80050cc:	f7fb f958 	bl	8000380 <__aeabi_uldivmod>
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80050d0:	f5a0 7240 	sub.w	r2, r0, #768	; 0x300
 80050d4:	4b16      	ldr	r3, [pc, #88]	; (8005130 <UART_SetConfig+0x474>)
 80050d6:	429a      	cmp	r2, r3
 80050d8:	f200 80dd 	bhi.w	8005296 <UART_SetConfig+0x5da>
          huart->Instance->BRR = usartdiv;
 80050dc:	6823      	ldr	r3, [r4, #0]
 80050de:	60d8      	str	r0, [r3, #12]
 80050e0:	4640      	mov	r0, r8
 80050e2:	e0a2      	b.n	800522a <UART_SetConfig+0x56e>
    switch (clocksource)
 80050e4:	2001      	movs	r0, #1
 80050e6:	e0a0      	b.n	800522a <UART_SetConfig+0x56e>
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 80050e8:	f7fe fcf6 	bl	8003ad8 <HAL_RCCEx_GetD3PCLK1Freq>
    if (pclk != 0U)
 80050ec:	2800      	cmp	r0, #0
 80050ee:	d1cc      	bne.n	800508a <UART_SetConfig+0x3ce>
 80050f0:	2000      	movs	r0, #0
 80050f2:	e09a      	b.n	800522a <UART_SetConfig+0x56e>
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80050f4:	a803      	add	r0, sp, #12
 80050f6:	f7fe fd01 	bl	8003afc <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80050fa:	9804      	ldr	r0, [sp, #16]
        break;
 80050fc:	e7f6      	b.n	80050ec <UART_SetConfig+0x430>
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80050fe:	4668      	mov	r0, sp
 8005100:	f7fe fdfa 	bl	8003cf8 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8005104:	9801      	ldr	r0, [sp, #4]
        break;
 8005106:	e7f1      	b.n	80050ec <UART_SetConfig+0x430>
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005108:	4b07      	ldr	r3, [pc, #28]	; (8005128 <UART_SetConfig+0x46c>)
 800510a:	681b      	ldr	r3, [r3, #0]
 800510c:	f013 0f20 	tst.w	r3, #32
 8005110:	d008      	beq.n	8005124 <UART_SetConfig+0x468>
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8005112:	4b05      	ldr	r3, [pc, #20]	; (8005128 <UART_SetConfig+0x46c>)
 8005114:	681b      	ldr	r3, [r3, #0]
 8005116:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 800511a:	4806      	ldr	r0, [pc, #24]	; (8005134 <UART_SetConfig+0x478>)
 800511c:	40d8      	lsrs	r0, r3
 800511e:	e7e5      	b.n	80050ec <UART_SetConfig+0x430>
    switch (clocksource)
 8005120:	4805      	ldr	r0, [pc, #20]	; (8005138 <UART_SetConfig+0x47c>)
 8005122:	e7b2      	b.n	800508a <UART_SetConfig+0x3ce>
          pclk = (uint32_t) HSI_VALUE;
 8005124:	4803      	ldr	r0, [pc, #12]	; (8005134 <UART_SetConfig+0x478>)
 8005126:	e7b0      	b.n	800508a <UART_SetConfig+0x3ce>
 8005128:	58024400 	.word	0x58024400
 800512c:	080091e4 	.word	0x080091e4
 8005130:	000ffcff 	.word	0x000ffcff
 8005134:	03d09000 	.word	0x03d09000
 8005138:	003d0900 	.word	0x003d0900
    switch (clocksource)
 800513c:	2b20      	cmp	r3, #32
 800513e:	d815      	bhi.n	800516c <UART_SetConfig+0x4b0>
 8005140:	2b20      	cmp	r3, #32
 8005142:	f200 80aa 	bhi.w	800529a <UART_SetConfig+0x5de>
 8005146:	e8df f003 	tbb	[pc, r3]
 800514a:	3832      	.short	0x3832
 800514c:	a83ba8a8 	.word	0xa83ba8a8
 8005150:	a840a8a8 	.word	0xa840a8a8
 8005154:	a8a8a8a8 	.word	0xa8a8a8a8
 8005158:	a845a8a8 	.word	0xa845a8a8
 800515c:	a8a8a8a8 	.word	0xa8a8a8a8
 8005160:	a8a8a8a8 	.word	0xa8a8a8a8
 8005164:	a8a8a8a8 	.word	0xa8a8a8a8
 8005168:	a8a8      	.short	0xa8a8
 800516a:	51          	.byte	0x51
 800516b:	00          	.byte	0x00
 800516c:	2b40      	cmp	r3, #64	; 0x40
 800516e:	d11c      	bne.n	80051aa <UART_SetConfig+0x4ee>
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005170:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8005172:	4b4e      	ldr	r3, [pc, #312]	; (80052ac <UART_SetConfig+0x5f0>)
 8005174:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8005178:	fbb0 f0f3 	udiv	r0, r0, r3
 800517c:	6862      	ldr	r2, [r4, #4]
 800517e:	0853      	lsrs	r3, r2, #1
 8005180:	eb03 0040 	add.w	r0, r3, r0, lsl #1
 8005184:	fbb0 f0f2 	udiv	r0, r0, r2
 8005188:	b280      	uxth	r0, r0
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800518a:	f1a0 0210 	sub.w	r2, r0, #16
 800518e:	f64f 73ef 	movw	r3, #65519	; 0xffef
 8005192:	429a      	cmp	r2, r3
 8005194:	f200 8083 	bhi.w	800529e <UART_SetConfig+0x5e2>
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005198:	f020 030f 	bic.w	r3, r0, #15
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800519c:	f3c0 0042 	ubfx	r0, r0, #1, #3
 80051a0:	4318      	orrs	r0, r3
        huart->Instance->BRR = brrtemp;
 80051a2:	6823      	ldr	r3, [r4, #0]
 80051a4:	60d8      	str	r0, [r3, #12]
 80051a6:	2000      	movs	r0, #0
 80051a8:	e03f      	b.n	800522a <UART_SetConfig+0x56e>
    switch (clocksource)
 80051aa:	2001      	movs	r0, #1
 80051ac:	e03d      	b.n	800522a <UART_SetConfig+0x56e>
        pclk = HAL_RCC_GetPCLK1Freq();
 80051ae:	f7fd fe63 	bl	8002e78 <HAL_RCC_GetPCLK1Freq>
    if (pclk != 0U)
 80051b2:	2800      	cmp	r0, #0
 80051b4:	d1dc      	bne.n	8005170 <UART_SetConfig+0x4b4>
 80051b6:	2000      	movs	r0, #0
 80051b8:	e037      	b.n	800522a <UART_SetConfig+0x56e>
        pclk = HAL_RCC_GetPCLK2Freq();
 80051ba:	f7fd fe6f 	bl	8002e9c <HAL_RCC_GetPCLK2Freq>
        break;
 80051be:	e7f8      	b.n	80051b2 <UART_SetConfig+0x4f6>
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80051c0:	a803      	add	r0, sp, #12
 80051c2:	f7fe fc9b 	bl	8003afc <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80051c6:	9804      	ldr	r0, [sp, #16]
        break;
 80051c8:	e7f3      	b.n	80051b2 <UART_SetConfig+0x4f6>
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80051ca:	4668      	mov	r0, sp
 80051cc:	f7fe fd94 	bl	8003cf8 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80051d0:	9801      	ldr	r0, [sp, #4]
        break;
 80051d2:	e7ee      	b.n	80051b2 <UART_SetConfig+0x4f6>
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80051d4:	4b36      	ldr	r3, [pc, #216]	; (80052b0 <UART_SetConfig+0x5f4>)
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	f013 0f20 	tst.w	r3, #32
 80051dc:	d008      	beq.n	80051f0 <UART_SetConfig+0x534>
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80051de:	4b34      	ldr	r3, [pc, #208]	; (80052b0 <UART_SetConfig+0x5f4>)
 80051e0:	681b      	ldr	r3, [r3, #0]
 80051e2:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 80051e6:	4833      	ldr	r0, [pc, #204]	; (80052b4 <UART_SetConfig+0x5f8>)
 80051e8:	40d8      	lsrs	r0, r3
 80051ea:	e7e2      	b.n	80051b2 <UART_SetConfig+0x4f6>
    switch (clocksource)
 80051ec:	4832      	ldr	r0, [pc, #200]	; (80052b8 <UART_SetConfig+0x5fc>)
 80051ee:	e7bf      	b.n	8005170 <UART_SetConfig+0x4b4>
          pclk = (uint32_t) HSI_VALUE;
 80051f0:	4830      	ldr	r0, [pc, #192]	; (80052b4 <UART_SetConfig+0x5f8>)
 80051f2:	e7bd      	b.n	8005170 <UART_SetConfig+0x4b4>
    switch (clocksource)
 80051f4:	2b40      	cmp	r3, #64	; 0x40
 80051f6:	d117      	bne.n	8005228 <UART_SetConfig+0x56c>
        break;
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
        break;
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80051f8:	f44f 4000 	mov.w	r0, #32768	; 0x8000
    }

    if (pclk != 0U)
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80051fc:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80051fe:	4b2b      	ldr	r3, [pc, #172]	; (80052ac <UART_SetConfig+0x5f0>)
 8005200:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8005204:	fbb0 f0f3 	udiv	r0, r0, r3
 8005208:	6863      	ldr	r3, [r4, #4]
 800520a:	eb00 0053 	add.w	r0, r0, r3, lsr #1
 800520e:	fbb0 f0f3 	udiv	r0, r0, r3
 8005212:	b280      	uxth	r0, r0
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005214:	f1a0 0210 	sub.w	r2, r0, #16
 8005218:	f64f 73ef 	movw	r3, #65519	; 0xffef
 800521c:	429a      	cmp	r2, r3
 800521e:	d842      	bhi.n	80052a6 <UART_SetConfig+0x5ea>
      {
        huart->Instance->BRR = usartdiv;
 8005220:	6823      	ldr	r3, [r4, #0]
 8005222:	60d8      	str	r0, [r3, #12]
 8005224:	2000      	movs	r0, #0
 8005226:	e000      	b.n	800522a <UART_SetConfig+0x56e>
    switch (clocksource)
 8005228:	2001      	movs	r0, #1
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800522a:	2301      	movs	r3, #1
 800522c:	f8a4 306a 	strh.w	r3, [r4, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8005230:	f8a4 3068 	strh.w	r3, [r4, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005234:	2300      	movs	r3, #0
 8005236:	66e3      	str	r3, [r4, #108]	; 0x6c
  huart->TxISR = NULL;
 8005238:	6723      	str	r3, [r4, #112]	; 0x70

  return ret;
}
 800523a:	b006      	add	sp, #24
 800523c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        pclk = HAL_RCC_GetPCLK1Freq();
 8005240:	f7fd fe1a 	bl	8002e78 <HAL_RCC_GetPCLK1Freq>
    if (pclk != 0U)
 8005244:	2800      	cmp	r0, #0
 8005246:	d1d9      	bne.n	80051fc <UART_SetConfig+0x540>
 8005248:	2000      	movs	r0, #0
 800524a:	e7ee      	b.n	800522a <UART_SetConfig+0x56e>
        pclk = HAL_RCC_GetPCLK2Freq();
 800524c:	f7fd fe26 	bl	8002e9c <HAL_RCC_GetPCLK2Freq>
        break;
 8005250:	e7f8      	b.n	8005244 <UART_SetConfig+0x588>
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005252:	a803      	add	r0, sp, #12
 8005254:	f7fe fc52 	bl	8003afc <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8005258:	9804      	ldr	r0, [sp, #16]
        break;
 800525a:	e7f3      	b.n	8005244 <UART_SetConfig+0x588>
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800525c:	4668      	mov	r0, sp
 800525e:	f7fe fd4b 	bl	8003cf8 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8005262:	9801      	ldr	r0, [sp, #4]
        break;
 8005264:	e7ee      	b.n	8005244 <UART_SetConfig+0x588>
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005266:	4b12      	ldr	r3, [pc, #72]	; (80052b0 <UART_SetConfig+0x5f4>)
 8005268:	681b      	ldr	r3, [r3, #0]
 800526a:	f013 0f20 	tst.w	r3, #32
 800526e:	d008      	beq.n	8005282 <UART_SetConfig+0x5c6>
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8005270:	4b0f      	ldr	r3, [pc, #60]	; (80052b0 <UART_SetConfig+0x5f4>)
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 8005278:	480e      	ldr	r0, [pc, #56]	; (80052b4 <UART_SetConfig+0x5f8>)
 800527a:	40d8      	lsrs	r0, r3
 800527c:	e7e2      	b.n	8005244 <UART_SetConfig+0x588>
    switch (clocksource)
 800527e:	480e      	ldr	r0, [pc, #56]	; (80052b8 <UART_SetConfig+0x5fc>)
 8005280:	e7bc      	b.n	80051fc <UART_SetConfig+0x540>
          pclk = (uint32_t) HSI_VALUE;
 8005282:	480c      	ldr	r0, [pc, #48]	; (80052b4 <UART_SetConfig+0x5f8>)
 8005284:	e7ba      	b.n	80051fc <UART_SetConfig+0x540>
    switch (clocksource)
 8005286:	2001      	movs	r0, #1
 8005288:	e7cf      	b.n	800522a <UART_SetConfig+0x56e>
 800528a:	2001      	movs	r0, #1
 800528c:	e7cd      	b.n	800522a <UART_SetConfig+0x56e>
        ret = HAL_ERROR;
 800528e:	2001      	movs	r0, #1
 8005290:	e7cb      	b.n	800522a <UART_SetConfig+0x56e>
 8005292:	2001      	movs	r0, #1
 8005294:	e7c9      	b.n	800522a <UART_SetConfig+0x56e>
          ret = HAL_ERROR;
 8005296:	2001      	movs	r0, #1
 8005298:	e7c7      	b.n	800522a <UART_SetConfig+0x56e>
    switch (clocksource)
 800529a:	2001      	movs	r0, #1
 800529c:	e7c5      	b.n	800522a <UART_SetConfig+0x56e>
        ret = HAL_ERROR;
 800529e:	2001      	movs	r0, #1
 80052a0:	e7c3      	b.n	800522a <UART_SetConfig+0x56e>
    switch (clocksource)
 80052a2:	2001      	movs	r0, #1
 80052a4:	e7c1      	b.n	800522a <UART_SetConfig+0x56e>
        ret = HAL_ERROR;
 80052a6:	2001      	movs	r0, #1
 80052a8:	e7bf      	b.n	800522a <UART_SetConfig+0x56e>
 80052aa:	bf00      	nop
 80052ac:	080091e4 	.word	0x080091e4
 80052b0:	58024400 	.word	0x58024400
 80052b4:	03d09000 	.word	0x03d09000
 80052b8:	003d0900 	.word	0x003d0900

080052bc <UART_AdvFeatureConfig>:
{
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80052bc:	6a83      	ldr	r3, [r0, #40]	; 0x28
 80052be:	f013 0f01 	tst.w	r3, #1
 80052c2:	d006      	beq.n	80052d2 <UART_AdvFeatureConfig+0x16>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80052c4:	6802      	ldr	r2, [r0, #0]
 80052c6:	6853      	ldr	r3, [r2, #4]
 80052c8:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80052cc:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
 80052ce:	430b      	orrs	r3, r1
 80052d0:	6053      	str	r3, [r2, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80052d2:	6a83      	ldr	r3, [r0, #40]	; 0x28
 80052d4:	f013 0f02 	tst.w	r3, #2
 80052d8:	d006      	beq.n	80052e8 <UART_AdvFeatureConfig+0x2c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80052da:	6802      	ldr	r2, [r0, #0]
 80052dc:	6853      	ldr	r3, [r2, #4]
 80052de:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80052e2:	6b01      	ldr	r1, [r0, #48]	; 0x30
 80052e4:	430b      	orrs	r3, r1
 80052e6:	6053      	str	r3, [r2, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80052e8:	6a83      	ldr	r3, [r0, #40]	; 0x28
 80052ea:	f013 0f04 	tst.w	r3, #4
 80052ee:	d006      	beq.n	80052fe <UART_AdvFeatureConfig+0x42>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80052f0:	6802      	ldr	r2, [r0, #0]
 80052f2:	6853      	ldr	r3, [r2, #4]
 80052f4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80052f8:	6b41      	ldr	r1, [r0, #52]	; 0x34
 80052fa:	430b      	orrs	r3, r1
 80052fc:	6053      	str	r3, [r2, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80052fe:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8005300:	f013 0f08 	tst.w	r3, #8
 8005304:	d006      	beq.n	8005314 <UART_AdvFeatureConfig+0x58>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005306:	6802      	ldr	r2, [r0, #0]
 8005308:	6853      	ldr	r3, [r2, #4]
 800530a:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800530e:	6b81      	ldr	r1, [r0, #56]	; 0x38
 8005310:	430b      	orrs	r3, r1
 8005312:	6053      	str	r3, [r2, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005314:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8005316:	f013 0f10 	tst.w	r3, #16
 800531a:	d006      	beq.n	800532a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800531c:	6802      	ldr	r2, [r0, #0]
 800531e:	6893      	ldr	r3, [r2, #8]
 8005320:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005324:	6bc1      	ldr	r1, [r0, #60]	; 0x3c
 8005326:	430b      	orrs	r3, r1
 8005328:	6093      	str	r3, [r2, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800532a:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800532c:	f013 0f20 	tst.w	r3, #32
 8005330:	d006      	beq.n	8005340 <UART_AdvFeatureConfig+0x84>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005332:	6802      	ldr	r2, [r0, #0]
 8005334:	6893      	ldr	r3, [r2, #8]
 8005336:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800533a:	6c01      	ldr	r1, [r0, #64]	; 0x40
 800533c:	430b      	orrs	r3, r1
 800533e:	6093      	str	r3, [r2, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005340:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8005342:	f013 0f40 	tst.w	r3, #64	; 0x40
 8005346:	d00a      	beq.n	800535e <UART_AdvFeatureConfig+0xa2>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005348:	6802      	ldr	r2, [r0, #0]
 800534a:	6853      	ldr	r3, [r2, #4]
 800534c:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8005350:	6c41      	ldr	r1, [r0, #68]	; 0x44
 8005352:	430b      	orrs	r3, r1
 8005354:	6053      	str	r3, [r2, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005356:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8005358:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800535c:	d00b      	beq.n	8005376 <UART_AdvFeatureConfig+0xba>
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800535e:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8005360:	f013 0f80 	tst.w	r3, #128	; 0x80
 8005364:	d006      	beq.n	8005374 <UART_AdvFeatureConfig+0xb8>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005366:	6802      	ldr	r2, [r0, #0]
 8005368:	6853      	ldr	r3, [r2, #4]
 800536a:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 800536e:	6cc1      	ldr	r1, [r0, #76]	; 0x4c
 8005370:	430b      	orrs	r3, r1
 8005372:	6053      	str	r3, [r2, #4]
  }
}
 8005374:	4770      	bx	lr
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005376:	6802      	ldr	r2, [r0, #0]
 8005378:	6853      	ldr	r3, [r2, #4]
 800537a:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 800537e:	6c81      	ldr	r1, [r0, #72]	; 0x48
 8005380:	430b      	orrs	r3, r1
 8005382:	6053      	str	r3, [r2, #4]
 8005384:	e7eb      	b.n	800535e <UART_AdvFeatureConfig+0xa2>

08005386 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005386:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800538a:	4605      	mov	r5, r0
 800538c:	460f      	mov	r7, r1
 800538e:	4616      	mov	r6, r2
 8005390:	4699      	mov	r9, r3
 8005392:	f8dd 8020 	ldr.w	r8, [sp, #32]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005396:	682c      	ldr	r4, [r5, #0]
 8005398:	69e4      	ldr	r4, [r4, #28]
 800539a:	ea37 0304 	bics.w	r3, r7, r4
 800539e:	bf0c      	ite	eq
 80053a0:	2401      	moveq	r4, #1
 80053a2:	2400      	movne	r4, #0
 80053a4:	42b4      	cmp	r4, r6
 80053a6:	d141      	bne.n	800542c <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80053a8:	f1b8 3fff 	cmp.w	r8, #4294967295
 80053ac:	d0f3      	beq.n	8005396 <UART_WaitOnFlagUntilTimeout+0x10>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80053ae:	f7fb f99d 	bl	80006ec <HAL_GetTick>
 80053b2:	eba0 0009 	sub.w	r0, r0, r9
 80053b6:	4540      	cmp	r0, r8
 80053b8:	d824      	bhi.n	8005404 <UART_WaitOnFlagUntilTimeout+0x7e>
 80053ba:	f1b8 0f00 	cmp.w	r8, #0
 80053be:	d021      	beq.n	8005404 <UART_WaitOnFlagUntilTimeout+0x7e>
        __HAL_UNLOCK(huart);

        return HAL_TIMEOUT;
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80053c0:	682b      	ldr	r3, [r5, #0]
 80053c2:	681a      	ldr	r2, [r3, #0]
 80053c4:	f012 0f04 	tst.w	r2, #4
 80053c8:	d0e5      	beq.n	8005396 <UART_WaitOnFlagUntilTimeout+0x10>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80053ca:	69da      	ldr	r2, [r3, #28]
 80053cc:	f412 6f00 	tst.w	r2, #2048	; 0x800
 80053d0:	d0e1      	beq.n	8005396 <UART_WaitOnFlagUntilTimeout+0x10>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80053d2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80053d6:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 80053d8:	682a      	ldr	r2, [r5, #0]
 80053da:	6813      	ldr	r3, [r2, #0]
 80053dc:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80053e0:	6013      	str	r3, [r2, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80053e2:	682a      	ldr	r2, [r5, #0]
 80053e4:	6893      	ldr	r3, [r2, #8]
 80053e6:	f023 0301 	bic.w	r3, r3, #1
 80053ea:	6093      	str	r3, [r2, #8]

          huart->gState = HAL_UART_STATE_READY;
 80053ec:	2320      	movs	r3, #32
 80053ee:	f8c5 3080 	str.w	r3, [r5, #128]	; 0x80
          huart->RxState = HAL_UART_STATE_READY;
 80053f2:	f8c5 3084 	str.w	r3, [r5, #132]	; 0x84
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80053f6:	f8c5 3088 	str.w	r3, [r5, #136]	; 0x88

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80053fa:	2300      	movs	r3, #0
 80053fc:	f885 307c 	strb.w	r3, [r5, #124]	; 0x7c

          return HAL_TIMEOUT;
 8005400:	2003      	movs	r0, #3
 8005402:	e014      	b.n	800542e <UART_WaitOnFlagUntilTimeout+0xa8>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8005404:	682a      	ldr	r2, [r5, #0]
 8005406:	6813      	ldr	r3, [r2, #0]
 8005408:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800540c:	6013      	str	r3, [r2, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800540e:	682a      	ldr	r2, [r5, #0]
 8005410:	6893      	ldr	r3, [r2, #8]
 8005412:	f023 0301 	bic.w	r3, r3, #1
 8005416:	6093      	str	r3, [r2, #8]
        huart->gState = HAL_UART_STATE_READY;
 8005418:	2320      	movs	r3, #32
 800541a:	f8c5 3080 	str.w	r3, [r5, #128]	; 0x80
        huart->RxState = HAL_UART_STATE_READY;
 800541e:	f8c5 3084 	str.w	r3, [r5, #132]	; 0x84
        __HAL_UNLOCK(huart);
 8005422:	2300      	movs	r3, #0
 8005424:	f885 307c 	strb.w	r3, [r5, #124]	; 0x7c
        return HAL_TIMEOUT;
 8005428:	2003      	movs	r0, #3
 800542a:	e000      	b.n	800542e <UART_WaitOnFlagUntilTimeout+0xa8>
        }
      }
    }
  }
  return HAL_OK;
 800542c:	2000      	movs	r0, #0
}
 800542e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

08005432 <UART_CheckIdleState>:
{
 8005432:	b530      	push	{r4, r5, lr}
 8005434:	b083      	sub	sp, #12
 8005436:	4604      	mov	r4, r0
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005438:	2300      	movs	r3, #0
 800543a:	f8c0 3088 	str.w	r3, [r0, #136]	; 0x88
  tickstart = HAL_GetTick();
 800543e:	f7fb f955 	bl	80006ec <HAL_GetTick>
 8005442:	4605      	mov	r5, r0
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005444:	6823      	ldr	r3, [r4, #0]
 8005446:	681b      	ldr	r3, [r3, #0]
 8005448:	f013 0f08 	tst.w	r3, #8
 800544c:	d10e      	bne.n	800546c <UART_CheckIdleState+0x3a>
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800544e:	6823      	ldr	r3, [r4, #0]
 8005450:	681b      	ldr	r3, [r3, #0]
 8005452:	f013 0f04 	tst.w	r3, #4
 8005456:	d117      	bne.n	8005488 <UART_CheckIdleState+0x56>
  huart->gState = HAL_UART_STATE_READY;
 8005458:	2320      	movs	r3, #32
 800545a:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_READY;
 800545e:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
  __HAL_UNLOCK(huart);
 8005462:	2000      	movs	r0, #0
 8005464:	f884 007c 	strb.w	r0, [r4, #124]	; 0x7c
}
 8005468:	b003      	add	sp, #12
 800546a:	bd30      	pop	{r4, r5, pc}
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800546c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005470:	9300      	str	r3, [sp, #0]
 8005472:	4603      	mov	r3, r0
 8005474:	2200      	movs	r2, #0
 8005476:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800547a:	4620      	mov	r0, r4
 800547c:	f7ff ff83 	bl	8005386 <UART_WaitOnFlagUntilTimeout>
 8005480:	2800      	cmp	r0, #0
 8005482:	d0e4      	beq.n	800544e <UART_CheckIdleState+0x1c>
      return HAL_TIMEOUT;
 8005484:	2003      	movs	r0, #3
 8005486:	e7ef      	b.n	8005468 <UART_CheckIdleState+0x36>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005488:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800548c:	9300      	str	r3, [sp, #0]
 800548e:	462b      	mov	r3, r5
 8005490:	2200      	movs	r2, #0
 8005492:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8005496:	4620      	mov	r0, r4
 8005498:	f7ff ff75 	bl	8005386 <UART_WaitOnFlagUntilTimeout>
 800549c:	2800      	cmp	r0, #0
 800549e:	d0db      	beq.n	8005458 <UART_CheckIdleState+0x26>
      return HAL_TIMEOUT;
 80054a0:	2003      	movs	r0, #3
 80054a2:	e7e1      	b.n	8005468 <UART_CheckIdleState+0x36>

080054a4 <HAL_LIN_Init>:
  if (huart == NULL)
 80054a4:	2800      	cmp	r0, #0
 80054a6:	d042      	beq.n	800552e <HAL_LIN_Init+0x8a>
{
 80054a8:	b538      	push	{r3, r4, r5, lr}
 80054aa:	460d      	mov	r5, r1
 80054ac:	4604      	mov	r4, r0
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80054ae:	69c3      	ldr	r3, [r0, #28]
 80054b0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80054b4:	d03d      	beq.n	8005532 <HAL_LIN_Init+0x8e>
  if (huart->Init.WordLength != UART_WORDLENGTH_8B)
 80054b6:	6883      	ldr	r3, [r0, #8]
 80054b8:	2b00      	cmp	r3, #0
 80054ba:	d13c      	bne.n	8005536 <HAL_LIN_Init+0x92>
  if (huart->gState == HAL_UART_STATE_RESET)
 80054bc:	f8d0 3080 	ldr.w	r3, [r0, #128]	; 0x80
 80054c0:	b363      	cbz	r3, 800551c <HAL_LIN_Init+0x78>
  huart->gState = HAL_UART_STATE_BUSY;
 80054c2:	2324      	movs	r3, #36	; 0x24
 80054c4:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
  __HAL_UART_DISABLE(huart);
 80054c8:	6822      	ldr	r2, [r4, #0]
 80054ca:	6813      	ldr	r3, [r2, #0]
 80054cc:	f023 0301 	bic.w	r3, r3, #1
 80054d0:	6013      	str	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 80054d2:	4620      	mov	r0, r4
 80054d4:	f7ff fbf2 	bl	8004cbc <UART_SetConfig>
 80054d8:	2801      	cmp	r0, #1
 80054da:	d01e      	beq.n	800551a <HAL_LIN_Init+0x76>
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80054dc:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80054de:	bb13      	cbnz	r3, 8005526 <HAL_LIN_Init+0x82>
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
 80054e0:	6822      	ldr	r2, [r4, #0]
 80054e2:	6853      	ldr	r3, [r2, #4]
 80054e4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80054e8:	6053      	str	r3, [r2, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_HDSEL | USART_CR3_IREN | USART_CR3_SCEN));
 80054ea:	6822      	ldr	r2, [r4, #0]
 80054ec:	6893      	ldr	r3, [r2, #8]
 80054ee:	f023 032a 	bic.w	r3, r3, #42	; 0x2a
 80054f2:	6093      	str	r3, [r2, #8]
  SET_BIT(huart->Instance->CR2, USART_CR2_LINEN);
 80054f4:	6822      	ldr	r2, [r4, #0]
 80054f6:	6853      	ldr	r3, [r2, #4]
 80054f8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80054fc:	6053      	str	r3, [r2, #4]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_LBDL, BreakDetectLength);
 80054fe:	6822      	ldr	r2, [r4, #0]
 8005500:	6853      	ldr	r3, [r2, #4]
 8005502:	f023 0320 	bic.w	r3, r3, #32
 8005506:	432b      	orrs	r3, r5
 8005508:	6053      	str	r3, [r2, #4]
  __HAL_UART_ENABLE(huart);
 800550a:	6822      	ldr	r2, [r4, #0]
 800550c:	6813      	ldr	r3, [r2, #0]
 800550e:	f043 0301 	orr.w	r3, r3, #1
 8005512:	6013      	str	r3, [r2, #0]
  return (UART_CheckIdleState(huart));
 8005514:	4620      	mov	r0, r4
 8005516:	f7ff ff8c 	bl	8005432 <UART_CheckIdleState>
}
 800551a:	bd38      	pop	{r3, r4, r5, pc}
    huart->Lock = HAL_UNLOCKED;
 800551c:	f880 307c 	strb.w	r3, [r0, #124]	; 0x7c
    HAL_UART_MspInit(huart);
 8005520:	f002 fa76 	bl	8007a10 <HAL_UART_MspInit>
 8005524:	e7cd      	b.n	80054c2 <HAL_LIN_Init+0x1e>
    UART_AdvFeatureConfig(huart);
 8005526:	4620      	mov	r0, r4
 8005528:	f7ff fec8 	bl	80052bc <UART_AdvFeatureConfig>
 800552c:	e7d8      	b.n	80054e0 <HAL_LIN_Init+0x3c>
    return HAL_ERROR;
 800552e:	2001      	movs	r0, #1
}
 8005530:	4770      	bx	lr
    return HAL_ERROR;
 8005532:	2001      	movs	r0, #1
 8005534:	e7f1      	b.n	800551a <HAL_LIN_Init+0x76>
    return HAL_ERROR;
 8005536:	2001      	movs	r0, #1
 8005538:	e7ef      	b.n	800551a <HAL_LIN_Init+0x76>
	...

0800553c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800553c:	b084      	sub	sp, #16
 800553e:	4603      	mov	r3, r0
  uint8_t rx_fifo_depth;
  uint8_t tx_fifo_depth;
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
 8005540:	4a18      	ldr	r2, [pc, #96]	; (80055a4 <UARTEx_SetNbDataToProcess+0x68>)
 8005542:	e892 0003 	ldmia.w	r2, {r0, r1}
 8005546:	aa04      	add	r2, sp, #16
 8005548:	e902 0003 	stmdb	r2, {r0, r1}
  uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};
 800554c:	4916      	ldr	r1, [pc, #88]	; (80055a8 <UARTEx_SetNbDataToProcess+0x6c>)
 800554e:	466a      	mov	r2, sp
 8005550:	c903      	ldmia	r1, {r0, r1}
 8005552:	e882 0003 	stmia.w	r2, {r0, r1}

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8005556:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8005558:	b932      	cbnz	r2, 8005568 <UARTEx_SetNbDataToProcess+0x2c>
  {
    huart->NbTxDataToProcess = 1U;
 800555a:	2201      	movs	r2, #1
 800555c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8005560:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8005564:	b004      	add	sp, #16
 8005566:	4770      	bx	lr
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8005568:	6819      	ldr	r1, [r3, #0]
 800556a:	688a      	ldr	r2, [r1, #8]
 800556c:	f3c2 6242 	ubfx	r2, r2, #25, #3
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8005570:	6888      	ldr	r0, [r1, #8]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
 8005572:	a904      	add	r1, sp, #16
 8005574:	eb01 7050 	add.w	r0, r1, r0, lsr #29
 8005578:	f810 1c08 	ldrb.w	r1, [r0, #-8]
 800557c:	0109      	lsls	r1, r1, #4
 800557e:	f810 0c10 	ldrb.w	r0, [r0, #-16]
 8005582:	fb91 f1f0 	sdiv	r1, r1, r0
 8005586:	f8a3 106a 	strh.w	r1, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
 800558a:	a904      	add	r1, sp, #16
 800558c:	440a      	add	r2, r1
 800558e:	f812 1c08 	ldrb.w	r1, [r2, #-8]
 8005592:	0109      	lsls	r1, r1, #4
 8005594:	f812 2c10 	ldrb.w	r2, [r2, #-16]
 8005598:	fb91 f2f2 	sdiv	r2, r1, r2
 800559c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 80055a0:	e7e0      	b.n	8005564 <UARTEx_SetNbDataToProcess+0x28>
 80055a2:	bf00      	nop
 80055a4:	080091fc 	.word	0x080091fc
 80055a8:	08009214 	.word	0x08009214

080055ac <HAL_UARTEx_DisableFifoMode>:
  __HAL_LOCK(huart);
 80055ac:	f890 307c 	ldrb.w	r3, [r0, #124]	; 0x7c
 80055b0:	2b01      	cmp	r3, #1
 80055b2:	d018      	beq.n	80055e6 <HAL_UARTEx_DisableFifoMode+0x3a>
 80055b4:	2301      	movs	r3, #1
 80055b6:	f880 307c 	strb.w	r3, [r0, #124]	; 0x7c
  huart->gState = HAL_UART_STATE_BUSY;
 80055ba:	2324      	movs	r3, #36	; 0x24
 80055bc:	f8c0 3080 	str.w	r3, [r0, #128]	; 0x80
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80055c0:	6803      	ldr	r3, [r0, #0]
 80055c2:	681a      	ldr	r2, [r3, #0]
  __HAL_UART_DISABLE(huart);
 80055c4:	6819      	ldr	r1, [r3, #0]
 80055c6:	f021 0101 	bic.w	r1, r1, #1
 80055ca:	6019      	str	r1, [r3, #0]
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80055cc:	f022 5200 	bic.w	r2, r2, #536870912	; 0x20000000
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80055d0:	2300      	movs	r3, #0
 80055d2:	6643      	str	r3, [r0, #100]	; 0x64
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80055d4:	6801      	ldr	r1, [r0, #0]
 80055d6:	600a      	str	r2, [r1, #0]
  huart->gState = HAL_UART_STATE_READY;
 80055d8:	2220      	movs	r2, #32
 80055da:	f8c0 2080 	str.w	r2, [r0, #128]	; 0x80
  __HAL_UNLOCK(huart);
 80055de:	f880 307c 	strb.w	r3, [r0, #124]	; 0x7c
  return HAL_OK;
 80055e2:	4618      	mov	r0, r3
 80055e4:	4770      	bx	lr
  __HAL_LOCK(huart);
 80055e6:	2002      	movs	r0, #2
}
 80055e8:	4770      	bx	lr

080055ea <HAL_UARTEx_SetTxFifoThreshold>:
{
 80055ea:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(huart);
 80055ec:	f890 307c 	ldrb.w	r3, [r0, #124]	; 0x7c
 80055f0:	2b01      	cmp	r3, #1
 80055f2:	d01d      	beq.n	8005630 <HAL_UARTEx_SetTxFifoThreshold+0x46>
 80055f4:	4604      	mov	r4, r0
 80055f6:	2301      	movs	r3, #1
 80055f8:	f880 307c 	strb.w	r3, [r0, #124]	; 0x7c
  huart->gState = HAL_UART_STATE_BUSY;
 80055fc:	2324      	movs	r3, #36	; 0x24
 80055fe:	f8c0 3080 	str.w	r3, [r0, #128]	; 0x80
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005602:	6803      	ldr	r3, [r0, #0]
 8005604:	681d      	ldr	r5, [r3, #0]
  __HAL_UART_DISABLE(huart);
 8005606:	681a      	ldr	r2, [r3, #0]
 8005608:	f022 0201 	bic.w	r2, r2, #1
 800560c:	601a      	str	r2, [r3, #0]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800560e:	6802      	ldr	r2, [r0, #0]
 8005610:	6893      	ldr	r3, [r2, #8]
 8005612:	f023 4360 	bic.w	r3, r3, #3758096384	; 0xe0000000
 8005616:	4319      	orrs	r1, r3
 8005618:	6091      	str	r1, [r2, #8]
  UARTEx_SetNbDataToProcess(huart);
 800561a:	f7ff ff8f 	bl	800553c <UARTEx_SetNbDataToProcess>
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800561e:	6823      	ldr	r3, [r4, #0]
 8005620:	601d      	str	r5, [r3, #0]
  huart->gState = HAL_UART_STATE_READY;
 8005622:	2320      	movs	r3, #32
 8005624:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
  __HAL_UNLOCK(huart);
 8005628:	2000      	movs	r0, #0
 800562a:	f884 007c 	strb.w	r0, [r4, #124]	; 0x7c
}
 800562e:	bd38      	pop	{r3, r4, r5, pc}
  __HAL_LOCK(huart);
 8005630:	2002      	movs	r0, #2
 8005632:	e7fc      	b.n	800562e <HAL_UARTEx_SetTxFifoThreshold+0x44>

08005634 <HAL_UARTEx_SetRxFifoThreshold>:
{
 8005634:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(huart);
 8005636:	f890 307c 	ldrb.w	r3, [r0, #124]	; 0x7c
 800563a:	2b01      	cmp	r3, #1
 800563c:	d01d      	beq.n	800567a <HAL_UARTEx_SetRxFifoThreshold+0x46>
 800563e:	4604      	mov	r4, r0
 8005640:	2301      	movs	r3, #1
 8005642:	f880 307c 	strb.w	r3, [r0, #124]	; 0x7c
  huart->gState = HAL_UART_STATE_BUSY;
 8005646:	2324      	movs	r3, #36	; 0x24
 8005648:	f8c0 3080 	str.w	r3, [r0, #128]	; 0x80
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800564c:	6803      	ldr	r3, [r0, #0]
 800564e:	681d      	ldr	r5, [r3, #0]
  __HAL_UART_DISABLE(huart);
 8005650:	681a      	ldr	r2, [r3, #0]
 8005652:	f022 0201 	bic.w	r2, r2, #1
 8005656:	601a      	str	r2, [r3, #0]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8005658:	6802      	ldr	r2, [r0, #0]
 800565a:	6893      	ldr	r3, [r2, #8]
 800565c:	f023 6360 	bic.w	r3, r3, #234881024	; 0xe000000
 8005660:	4319      	orrs	r1, r3
 8005662:	6091      	str	r1, [r2, #8]
  UARTEx_SetNbDataToProcess(huart);
 8005664:	f7ff ff6a 	bl	800553c <UARTEx_SetNbDataToProcess>
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005668:	6823      	ldr	r3, [r4, #0]
 800566a:	601d      	str	r5, [r3, #0]
  huart->gState = HAL_UART_STATE_READY;
 800566c:	2320      	movs	r3, #32
 800566e:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
  __HAL_UNLOCK(huart);
 8005672:	2000      	movs	r0, #0
 8005674:	f884 007c 	strb.w	r0, [r4, #124]	; 0x7c
}
 8005678:	bd38      	pop	{r3, r4, r5, pc}
  __HAL_LOCK(huart);
 800567a:	2002      	movs	r0, #2
 800567c:	e7fc      	b.n	8005678 <HAL_UARTEx_SetRxFifoThreshold+0x44>
	...

08005680 <USB_CoreReset>:
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
  uint32_t count = 0U;
 8005680:	2300      	movs	r3, #0

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8005682:	3301      	adds	r3, #1
 8005684:	4a0c      	ldr	r2, [pc, #48]	; (80056b8 <USB_CoreReset+0x38>)
 8005686:	4293      	cmp	r3, r2
 8005688:	d811      	bhi.n	80056ae <USB_CoreReset+0x2e>
    {
      return HAL_TIMEOUT;
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800568a:	6902      	ldr	r2, [r0, #16]
 800568c:	2a00      	cmp	r2, #0
 800568e:	daf8      	bge.n	8005682 <USB_CoreReset+0x2>

  /* Core Soft Reset */
  count = 0U;
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8005690:	6903      	ldr	r3, [r0, #16]
 8005692:	f043 0301 	orr.w	r3, r3, #1
 8005696:	6103      	str	r3, [r0, #16]
  count = 0U;
 8005698:	2300      	movs	r3, #0

  do
  {
    if (++count > 200000U)
 800569a:	3301      	adds	r3, #1
 800569c:	4a06      	ldr	r2, [pc, #24]	; (80056b8 <USB_CoreReset+0x38>)
 800569e:	4293      	cmp	r3, r2
 80056a0:	d807      	bhi.n	80056b2 <USB_CoreReset+0x32>
    {
      return HAL_TIMEOUT;
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80056a2:	6902      	ldr	r2, [r0, #16]
 80056a4:	f012 0f01 	tst.w	r2, #1
 80056a8:	d1f7      	bne.n	800569a <USB_CoreReset+0x1a>

  return HAL_OK;
 80056aa:	2000      	movs	r0, #0
 80056ac:	4770      	bx	lr
      return HAL_TIMEOUT;
 80056ae:	2003      	movs	r0, #3
 80056b0:	4770      	bx	lr
      return HAL_TIMEOUT;
 80056b2:	2003      	movs	r0, #3
}
 80056b4:	4770      	bx	lr
 80056b6:	bf00      	nop
 80056b8:	00030d40 	.word	0x00030d40

080056bc <USB_CoreInit>:
{
 80056bc:	b084      	sub	sp, #16
 80056be:	b510      	push	{r4, lr}
 80056c0:	4604      	mov	r4, r0
 80056c2:	a803      	add	r0, sp, #12
 80056c4:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80056c8:	9b08      	ldr	r3, [sp, #32]
 80056ca:	2b01      	cmp	r3, #1
 80056cc:	d11d      	bne.n	800570a <USB_CoreInit+0x4e>
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80056ce:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80056d0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80056d4:	63a3      	str	r3, [r4, #56]	; 0x38
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80056d6:	68e2      	ldr	r2, [r4, #12]
 80056d8:	4b1a      	ldr	r3, [pc, #104]	; (8005744 <USB_CoreInit+0x88>)
 80056da:	4013      	ands	r3, r2
 80056dc:	60e3      	str	r3, [r4, #12]
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80056de:	68e3      	ldr	r3, [r4, #12]
 80056e0:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 80056e4:	60e3      	str	r3, [r4, #12]
    if (cfg.use_external_vbus == 1U)
 80056e6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80056e8:	2b01      	cmp	r3, #1
 80056ea:	d009      	beq.n	8005700 <USB_CoreInit+0x44>
    ret = USB_CoreReset(USBx);
 80056ec:	4620      	mov	r0, r4
 80056ee:	f7ff ffc7 	bl	8005680 <USB_CoreReset>
  if (cfg.dma_enable == 1U)
 80056f2:	9b06      	ldr	r3, [sp, #24]
 80056f4:	2b01      	cmp	r3, #1
 80056f6:	d01b      	beq.n	8005730 <USB_CoreInit+0x74>
}
 80056f8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80056fc:	b004      	add	sp, #16
 80056fe:	4770      	bx	lr
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8005700:	68e3      	ldr	r3, [r4, #12]
 8005702:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005706:	60e3      	str	r3, [r4, #12]
 8005708:	e7f0      	b.n	80056ec <USB_CoreInit+0x30>
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800570a:	68e3      	ldr	r3, [r4, #12]
 800570c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005710:	60e3      	str	r3, [r4, #12]
    ret = USB_CoreReset(USBx);
 8005712:	4620      	mov	r0, r4
 8005714:	f7ff ffb4 	bl	8005680 <USB_CoreReset>
    if (cfg.battery_charging_enable == 0U)
 8005718:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800571a:	b923      	cbnz	r3, 8005726 <USB_CoreInit+0x6a>
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800571c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800571e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005722:	63a3      	str	r3, [r4, #56]	; 0x38
 8005724:	e7e5      	b.n	80056f2 <USB_CoreInit+0x36>
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005726:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8005728:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800572c:	63a3      	str	r3, [r4, #56]	; 0x38
 800572e:	e7e0      	b.n	80056f2 <USB_CoreInit+0x36>
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8005730:	68a3      	ldr	r3, [r4, #8]
 8005732:	f043 0306 	orr.w	r3, r3, #6
 8005736:	60a3      	str	r3, [r4, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8005738:	68a3      	ldr	r3, [r4, #8]
 800573a:	f043 0320 	orr.w	r3, r3, #32
 800573e:	60a3      	str	r3, [r4, #8]
 8005740:	e7da      	b.n	80056f8 <USB_CoreInit+0x3c>
 8005742:	bf00      	nop
 8005744:	ffbdffbf 	.word	0xffbdffbf

08005748 <USB_SetTurnaroundTime>:
  if (speed == USBD_FS_SPEED)
 8005748:	2a02      	cmp	r2, #2
 800574a:	d00a      	beq.n	8005762 <USB_SetTurnaroundTime+0x1a>
    UsbTrd = USBD_HS_TRDT_VALUE;
 800574c:	2109      	movs	r1, #9
  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 800574e:	68c2      	ldr	r2, [r0, #12]
 8005750:	f422 5270 	bic.w	r2, r2, #15360	; 0x3c00
 8005754:	60c2      	str	r2, [r0, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8005756:	68c3      	ldr	r3, [r0, #12]
 8005758:	ea43 2381 	orr.w	r3, r3, r1, lsl #10
 800575c:	60c3      	str	r3, [r0, #12]
}
 800575e:	2000      	movs	r0, #0
 8005760:	4770      	bx	lr
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8005762:	4b20      	ldr	r3, [pc, #128]	; (80057e4 <USB_SetTurnaroundTime+0x9c>)
 8005764:	440b      	add	r3, r1
 8005766:	4a20      	ldr	r2, [pc, #128]	; (80057e8 <USB_SetTurnaroundTime+0xa0>)
 8005768:	4293      	cmp	r3, r2
 800576a:	d929      	bls.n	80057c0 <USB_SetTurnaroundTime+0x78>
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 800576c:	4b1f      	ldr	r3, [pc, #124]	; (80057ec <USB_SetTurnaroundTime+0xa4>)
 800576e:	440b      	add	r3, r1
 8005770:	4a1f      	ldr	r2, [pc, #124]	; (80057f0 <USB_SetTurnaroundTime+0xa8>)
 8005772:	4293      	cmp	r3, r2
 8005774:	d926      	bls.n	80057c4 <USB_SetTurnaroundTime+0x7c>
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8005776:	4b1f      	ldr	r3, [pc, #124]	; (80057f4 <USB_SetTurnaroundTime+0xac>)
 8005778:	440b      	add	r3, r1
 800577a:	4a1f      	ldr	r2, [pc, #124]	; (80057f8 <USB_SetTurnaroundTime+0xb0>)
 800577c:	4293      	cmp	r3, r2
 800577e:	d923      	bls.n	80057c8 <USB_SetTurnaroundTime+0x80>
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8005780:	4b1e      	ldr	r3, [pc, #120]	; (80057fc <USB_SetTurnaroundTime+0xb4>)
 8005782:	440b      	add	r3, r1
 8005784:	4a1e      	ldr	r2, [pc, #120]	; (8005800 <USB_SetTurnaroundTime+0xb8>)
 8005786:	4293      	cmp	r3, r2
 8005788:	d320      	bcc.n	80057cc <USB_SetTurnaroundTime+0x84>
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 800578a:	4b1e      	ldr	r3, [pc, #120]	; (8005804 <USB_SetTurnaroundTime+0xbc>)
 800578c:	440b      	add	r3, r1
 800578e:	4a1e      	ldr	r2, [pc, #120]	; (8005808 <USB_SetTurnaroundTime+0xc0>)
 8005790:	4293      	cmp	r3, r2
 8005792:	d91d      	bls.n	80057d0 <USB_SetTurnaroundTime+0x88>
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8005794:	4b1d      	ldr	r3, [pc, #116]	; (800580c <USB_SetTurnaroundTime+0xc4>)
 8005796:	440b      	add	r3, r1
 8005798:	4a1d      	ldr	r2, [pc, #116]	; (8005810 <USB_SetTurnaroundTime+0xc8>)
 800579a:	4293      	cmp	r3, r2
 800579c:	d31a      	bcc.n	80057d4 <USB_SetTurnaroundTime+0x8c>
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 800579e:	4b1d      	ldr	r3, [pc, #116]	; (8005814 <USB_SetTurnaroundTime+0xcc>)
 80057a0:	440b      	add	r3, r1
 80057a2:	4a1d      	ldr	r2, [pc, #116]	; (8005818 <USB_SetTurnaroundTime+0xd0>)
 80057a4:	4293      	cmp	r3, r2
 80057a6:	d317      	bcc.n	80057d8 <USB_SetTurnaroundTime+0x90>
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 80057a8:	4b1c      	ldr	r3, [pc, #112]	; (800581c <USB_SetTurnaroundTime+0xd4>)
 80057aa:	440b      	add	r3, r1
 80057ac:	4a1c      	ldr	r2, [pc, #112]	; (8005820 <USB_SetTurnaroundTime+0xd8>)
 80057ae:	4293      	cmp	r3, r2
 80057b0:	d314      	bcc.n	80057dc <USB_SetTurnaroundTime+0x94>
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 80057b2:	4b1c      	ldr	r3, [pc, #112]	; (8005824 <USB_SetTurnaroundTime+0xdc>)
 80057b4:	440b      	add	r3, r1
 80057b6:	4a1c      	ldr	r2, [pc, #112]	; (8005828 <USB_SetTurnaroundTime+0xe0>)
 80057b8:	4293      	cmp	r3, r2
 80057ba:	d211      	bcs.n	80057e0 <USB_SetTurnaroundTime+0x98>
      UsbTrd = 0x7U;
 80057bc:	2107      	movs	r1, #7
 80057be:	e7c6      	b.n	800574e <USB_SetTurnaroundTime+0x6>
      UsbTrd = 0xFU;
 80057c0:	210f      	movs	r1, #15
 80057c2:	e7c4      	b.n	800574e <USB_SetTurnaroundTime+0x6>
      UsbTrd = 0xEU;
 80057c4:	210e      	movs	r1, #14
 80057c6:	e7c2      	b.n	800574e <USB_SetTurnaroundTime+0x6>
      UsbTrd = 0xDU;
 80057c8:	210d      	movs	r1, #13
 80057ca:	e7c0      	b.n	800574e <USB_SetTurnaroundTime+0x6>
      UsbTrd = 0xCU;
 80057cc:	210c      	movs	r1, #12
 80057ce:	e7be      	b.n	800574e <USB_SetTurnaroundTime+0x6>
      UsbTrd = 0xBU;
 80057d0:	210b      	movs	r1, #11
 80057d2:	e7bc      	b.n	800574e <USB_SetTurnaroundTime+0x6>
      UsbTrd = 0xAU;
 80057d4:	210a      	movs	r1, #10
 80057d6:	e7ba      	b.n	800574e <USB_SetTurnaroundTime+0x6>
      UsbTrd = 0x9U;
 80057d8:	2109      	movs	r1, #9
 80057da:	e7b8      	b.n	800574e <USB_SetTurnaroundTime+0x6>
      UsbTrd = 0x8U;
 80057dc:	2108      	movs	r1, #8
 80057de:	e7b6      	b.n	800574e <USB_SetTurnaroundTime+0x6>
      UsbTrd = 0x6U;
 80057e0:	2106      	movs	r1, #6
 80057e2:	e7b4      	b.n	800574e <USB_SetTurnaroundTime+0x6>
 80057e4:	ff275340 	.word	0xff275340
 80057e8:	000c34ff 	.word	0x000c34ff
 80057ec:	ff1b1e40 	.word	0xff1b1e40
 80057f0:	000f423f 	.word	0x000f423f
 80057f4:	ff0bdc00 	.word	0xff0bdc00
 80057f8:	00124f7f 	.word	0x00124f7f
 80057fc:	fef98c80 	.word	0xfef98c80
 8005800:	0013d620 	.word	0x0013d620
 8005804:	fee5b660 	.word	0xfee5b660
 8005808:	0016e35f 	.word	0x0016e35f
 800580c:	feced300 	.word	0xfeced300
 8005810:	001b7740 	.word	0x001b7740
 8005814:	feb35bc0 	.word	0xfeb35bc0
 8005818:	002191c0 	.word	0x002191c0
 800581c:	fe91ca00 	.word	0xfe91ca00
 8005820:	00387520 	.word	0x00387520
 8005824:	fe5954e0 	.word	0xfe5954e0
 8005828:	00419ce0 	.word	0x00419ce0

0800582c <USB_EnableGlobalInt>:
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800582c:	6883      	ldr	r3, [r0, #8]
 800582e:	f043 0301 	orr.w	r3, r3, #1
 8005832:	6083      	str	r3, [r0, #8]
}
 8005834:	2000      	movs	r0, #0
 8005836:	4770      	bx	lr

08005838 <USB_DisableGlobalInt>:
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8005838:	6883      	ldr	r3, [r0, #8]
 800583a:	f023 0301 	bic.w	r3, r3, #1
 800583e:	6083      	str	r3, [r0, #8]
}
 8005840:	2000      	movs	r0, #0
 8005842:	4770      	bx	lr

08005844 <USB_SetCurrentMode>:
{
 8005844:	b508      	push	{r3, lr}
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8005846:	68c3      	ldr	r3, [r0, #12]
 8005848:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 800584c:	60c3      	str	r3, [r0, #12]
  if (mode == USB_HOST_MODE)
 800584e:	2901      	cmp	r1, #1
 8005850:	d009      	beq.n	8005866 <USB_SetCurrentMode+0x22>
  else if (mode == USB_DEVICE_MODE)
 8005852:	b969      	cbnz	r1, 8005870 <USB_SetCurrentMode+0x2c>
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8005854:	68c3      	ldr	r3, [r0, #12]
 8005856:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800585a:	60c3      	str	r3, [r0, #12]
  HAL_Delay(50U);
 800585c:	2032      	movs	r0, #50	; 0x32
 800585e:	f7fa ff4b 	bl	80006f8 <HAL_Delay>
  return HAL_OK;
 8005862:	2000      	movs	r0, #0
}
 8005864:	bd08      	pop	{r3, pc}
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8005866:	68c3      	ldr	r3, [r0, #12]
 8005868:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800586c:	60c3      	str	r3, [r0, #12]
 800586e:	e7f5      	b.n	800585c <USB_SetCurrentMode+0x18>
    return HAL_ERROR;
 8005870:	2001      	movs	r0, #1
 8005872:	e7f7      	b.n	8005864 <USB_SetCurrentMode+0x20>

08005874 <USB_FlushTxFifo>:
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8005874:	0189      	lsls	r1, r1, #6
 8005876:	f041 0120 	orr.w	r1, r1, #32
 800587a:	6101      	str	r1, [r0, #16]
  uint32_t count = 0U;
 800587c:	2300      	movs	r3, #0
    if (++count > 200000U)
 800587e:	3301      	adds	r3, #1
 8005880:	4a05      	ldr	r2, [pc, #20]	; (8005898 <USB_FlushTxFifo+0x24>)
 8005882:	4293      	cmp	r3, r2
 8005884:	d805      	bhi.n	8005892 <USB_FlushTxFifo+0x1e>
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8005886:	6902      	ldr	r2, [r0, #16]
 8005888:	f012 0f20 	tst.w	r2, #32
 800588c:	d1f7      	bne.n	800587e <USB_FlushTxFifo+0xa>
  return HAL_OK;
 800588e:	2000      	movs	r0, #0
 8005890:	4770      	bx	lr
      return HAL_TIMEOUT;
 8005892:	2003      	movs	r0, #3
}
 8005894:	4770      	bx	lr
 8005896:	bf00      	nop
 8005898:	00030d40 	.word	0x00030d40

0800589c <USB_FlushRxFifo>:
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800589c:	2310      	movs	r3, #16
 800589e:	6103      	str	r3, [r0, #16]
  uint32_t count = 0;
 80058a0:	2300      	movs	r3, #0
    if (++count > 200000U)
 80058a2:	3301      	adds	r3, #1
 80058a4:	4a05      	ldr	r2, [pc, #20]	; (80058bc <USB_FlushRxFifo+0x20>)
 80058a6:	4293      	cmp	r3, r2
 80058a8:	d805      	bhi.n	80058b6 <USB_FlushRxFifo+0x1a>
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80058aa:	6902      	ldr	r2, [r0, #16]
 80058ac:	f012 0f10 	tst.w	r2, #16
 80058b0:	d1f7      	bne.n	80058a2 <USB_FlushRxFifo+0x6>
  return HAL_OK;
 80058b2:	2000      	movs	r0, #0
 80058b4:	4770      	bx	lr
      return HAL_TIMEOUT;
 80058b6:	2003      	movs	r0, #3
}
 80058b8:	4770      	bx	lr
 80058ba:	bf00      	nop
 80058bc:	00030d40 	.word	0x00030d40

080058c0 <USB_SetDevSpeed>:
  USBx_DEVICE->DCFG |= speed;
 80058c0:	f8d0 3800 	ldr.w	r3, [r0, #2048]	; 0x800
 80058c4:	4319      	orrs	r1, r3
 80058c6:	f8c0 1800 	str.w	r1, [r0, #2048]	; 0x800
}
 80058ca:	2000      	movs	r0, #0
 80058cc:	4770      	bx	lr
	...

080058d0 <USB_DevInit>:
{
 80058d0:	b084      	sub	sp, #16
 80058d2:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80058d6:	4604      	mov	r4, r0
 80058d8:	a809      	add	r0, sp, #36	; 0x24
 80058da:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t USBx_BASE = (uint32_t)USBx;
 80058de:	4625      	mov	r5, r4
  for (i = 0U; i < 15U; i++)
 80058e0:	2300      	movs	r3, #0
 80058e2:	e006      	b.n	80058f2 <USB_DevInit+0x22>
    USBx->DIEPTXF[i] = 0U;
 80058e4:	f103 0240 	add.w	r2, r3, #64	; 0x40
 80058e8:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 80058ec:	2100      	movs	r1, #0
 80058ee:	6051      	str	r1, [r2, #4]
  for (i = 0U; i < 15U; i++)
 80058f0:	3301      	adds	r3, #1
 80058f2:	2b0e      	cmp	r3, #14
 80058f4:	d9f6      	bls.n	80058e4 <USB_DevInit+0x14>
  if (cfg.vbus_sensing_enable == 0U)
 80058f6:	f8dd 804c 	ldr.w	r8, [sp, #76]	; 0x4c
 80058fa:	f1b8 0f00 	cmp.w	r8, #0
 80058fe:	d124      	bne.n	800594a <USB_DevInit+0x7a>
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8005900:	f8d4 3804 	ldr.w	r3, [r4, #2052]	; 0x804
 8005904:	f043 0302 	orr.w	r3, r3, #2
 8005908:	f8c4 3804 	str.w	r3, [r4, #2052]	; 0x804
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 800590c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800590e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005912:	63a3      	str	r3, [r4, #56]	; 0x38
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8005914:	6823      	ldr	r3, [r4, #0]
 8005916:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800591a:	6023      	str	r3, [r4, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 800591c:	6823      	ldr	r3, [r4, #0]
 800591e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005922:	6023      	str	r3, [r4, #0]
  USBx_PCGCCTL = 0U;
 8005924:	2300      	movs	r3, #0
 8005926:	f8c4 3e00 	str.w	r3, [r4, #3584]	; 0xe00
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800592a:	f504 6600 	add.w	r6, r4, #2048	; 0x800
 800592e:	f8d4 3800 	ldr.w	r3, [r4, #2048]	; 0x800
 8005932:	f8c4 3800 	str.w	r3, [r4, #2048]	; 0x800
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8005936:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005938:	2b01      	cmp	r3, #1
 800593a:	d110      	bne.n	800595e <USB_DevInit+0x8e>
    if (cfg.speed == USBD_HS_SPEED)
 800593c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800593e:	b94b      	cbnz	r3, 8005954 <USB_DevInit+0x84>
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8005940:	2100      	movs	r1, #0
 8005942:	4620      	mov	r0, r4
 8005944:	f7ff ffbc 	bl	80058c0 <USB_SetDevSpeed>
 8005948:	e00d      	b.n	8005966 <USB_DevInit+0x96>
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 800594a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800594c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8005950:	63a3      	str	r3, [r4, #56]	; 0x38
 8005952:	e7e7      	b.n	8005924 <USB_DevInit+0x54>
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8005954:	2101      	movs	r1, #1
 8005956:	4620      	mov	r0, r4
 8005958:	f7ff ffb2 	bl	80058c0 <USB_SetDevSpeed>
 800595c:	e003      	b.n	8005966 <USB_DevInit+0x96>
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800595e:	2103      	movs	r1, #3
 8005960:	4620      	mov	r0, r4
 8005962:	f7ff ffad 	bl	80058c0 <USB_SetDevSpeed>
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8005966:	2110      	movs	r1, #16
 8005968:	4620      	mov	r0, r4
 800596a:	f7ff ff83 	bl	8005874 <USB_FlushTxFifo>
 800596e:	4681      	mov	r9, r0
 8005970:	b108      	cbz	r0, 8005976 <USB_DevInit+0xa6>
    ret = HAL_ERROR;
 8005972:	f04f 0901 	mov.w	r9, #1
  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8005976:	4620      	mov	r0, r4
 8005978:	f7ff ff90 	bl	800589c <USB_FlushRxFifo>
 800597c:	b108      	cbz	r0, 8005982 <USB_DevInit+0xb2>
    ret = HAL_ERROR;
 800597e:	f04f 0901 	mov.w	r9, #1
  USBx_DEVICE->DIEPMSK = 0U;
 8005982:	2300      	movs	r3, #0
 8005984:	6133      	str	r3, [r6, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8005986:	6173      	str	r3, [r6, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8005988:	61f3      	str	r3, [r6, #28]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800598a:	e00a      	b.n	80059a2 <USB_DevInit+0xd2>
      if (i == 0U)
 800598c:	b9c3      	cbnz	r3, 80059c0 <USB_DevInit+0xf0>
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800598e:	f04f 6000 	mov.w	r0, #134217728	; 0x8000000
 8005992:	f8c2 0900 	str.w	r0, [r2, #2304]	; 0x900
    USBx_INEP(i)->DIEPTSIZ = 0U;
 8005996:	2200      	movs	r2, #0
 8005998:	610a      	str	r2, [r1, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800599a:	f64f 327f 	movw	r2, #64383	; 0xfb7f
 800599e:	608a      	str	r2, [r1, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80059a0:	3301      	adds	r3, #1
 80059a2:	9f09      	ldr	r7, [sp, #36]	; 0x24
 80059a4:	429f      	cmp	r7, r3
 80059a6:	d910      	bls.n	80059ca <USB_DevInit+0xfa>
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80059a8:	eb05 1243 	add.w	r2, r5, r3, lsl #5
 80059ac:	f502 6110 	add.w	r1, r2, #2304	; 0x900
 80059b0:	f8d2 0900 	ldr.w	r0, [r2, #2304]	; 0x900
 80059b4:	2800      	cmp	r0, #0
 80059b6:	dbe9      	blt.n	800598c <USB_DevInit+0xbc>
      USBx_INEP(i)->DIEPCTL = 0U;
 80059b8:	2000      	movs	r0, #0
 80059ba:	f8c2 0900 	str.w	r0, [r2, #2304]	; 0x900
 80059be:	e7ea      	b.n	8005996 <USB_DevInit+0xc6>
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80059c0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80059c4:	f8c2 0900 	str.w	r0, [r2, #2304]	; 0x900
 80059c8:	e7e5      	b.n	8005996 <USB_DevInit+0xc6>
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80059ca:	2300      	movs	r3, #0
 80059cc:	e00a      	b.n	80059e4 <USB_DevInit+0x114>
      if (i == 0U)
 80059ce:	b1bb      	cbz	r3, 8005a00 <USB_DevInit+0x130>
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 80059d0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80059d4:	f8c2 0b00 	str.w	r0, [r2, #2816]	; 0xb00
    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 80059d8:	2200      	movs	r2, #0
 80059da:	610a      	str	r2, [r1, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80059dc:	f64f 327f 	movw	r2, #64383	; 0xfb7f
 80059e0:	608a      	str	r2, [r1, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80059e2:	3301      	adds	r3, #1
 80059e4:	429f      	cmp	r7, r3
 80059e6:	d910      	bls.n	8005a0a <USB_DevInit+0x13a>
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80059e8:	eb05 1243 	add.w	r2, r5, r3, lsl #5
 80059ec:	f502 6130 	add.w	r1, r2, #2816	; 0xb00
 80059f0:	f8d2 0b00 	ldr.w	r0, [r2, #2816]	; 0xb00
 80059f4:	2800      	cmp	r0, #0
 80059f6:	dbea      	blt.n	80059ce <USB_DevInit+0xfe>
      USBx_OUTEP(i)->DOEPCTL = 0U;
 80059f8:	2000      	movs	r0, #0
 80059fa:	f8c2 0b00 	str.w	r0, [r2, #2816]	; 0xb00
 80059fe:	e7eb      	b.n	80059d8 <USB_DevInit+0x108>
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8005a00:	f04f 6000 	mov.w	r0, #134217728	; 0x8000000
 8005a04:	f8c2 0b00 	str.w	r0, [r2, #2816]	; 0xb00
 8005a08:	e7e6      	b.n	80059d8 <USB_DevInit+0x108>
  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8005a0a:	6933      	ldr	r3, [r6, #16]
 8005a0c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005a10:	6133      	str	r3, [r6, #16]
  USBx->GINTMSK = 0U;
 8005a12:	2300      	movs	r3, #0
 8005a14:	61a3      	str	r3, [r4, #24]
  USBx->GINTSTS = 0xBFFFFFFFU;
 8005a16:	f06f 4380 	mvn.w	r3, #1073741824	; 0x40000000
 8005a1a:	6163      	str	r3, [r4, #20]
  if (cfg.dma_enable == 0U)
 8005a1c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8005a1e:	b91b      	cbnz	r3, 8005a28 <USB_DevInit+0x158>
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8005a20:	69a3      	ldr	r3, [r4, #24]
 8005a22:	f043 0310 	orr.w	r3, r3, #16
 8005a26:	61a3      	str	r3, [r4, #24]
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8005a28:	69a2      	ldr	r2, [r4, #24]
 8005a2a:	4b0b      	ldr	r3, [pc, #44]	; (8005a58 <USB_DevInit+0x188>)
 8005a2c:	4313      	orrs	r3, r2
 8005a2e:	61a3      	str	r3, [r4, #24]
  if (cfg.Sof_enable != 0U)
 8005a30:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8005a32:	b11b      	cbz	r3, 8005a3c <USB_DevInit+0x16c>
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8005a34:	69a3      	ldr	r3, [r4, #24]
 8005a36:	f043 0308 	orr.w	r3, r3, #8
 8005a3a:	61a3      	str	r3, [r4, #24]
  if (cfg.vbus_sensing_enable == 1U)
 8005a3c:	f1b8 0f01 	cmp.w	r8, #1
 8005a40:	d004      	beq.n	8005a4c <USB_DevInit+0x17c>
}
 8005a42:	4648      	mov	r0, r9
 8005a44:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005a48:	b004      	add	sp, #16
 8005a4a:	4770      	bx	lr
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8005a4c:	69a2      	ldr	r2, [r4, #24]
 8005a4e:	4b03      	ldr	r3, [pc, #12]	; (8005a5c <USB_DevInit+0x18c>)
 8005a50:	4313      	orrs	r3, r2
 8005a52:	61a3      	str	r3, [r4, #24]
 8005a54:	e7f5      	b.n	8005a42 <USB_DevInit+0x172>
 8005a56:	bf00      	nop
 8005a58:	803c3800 	.word	0x803c3800
 8005a5c:	40000004 	.word	0x40000004

08005a60 <USB_GetDevSpeed>:
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8005a60:	f8d0 3808 	ldr.w	r3, [r0, #2056]	; 0x808
  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8005a64:	f013 0306 	ands.w	r3, r3, #6
 8005a68:	d005      	beq.n	8005a76 <USB_GetDevSpeed+0x16>
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8005a6a:	2b06      	cmp	r3, #6
 8005a6c:	bf18      	it	ne
 8005a6e:	2b02      	cmpne	r3, #2
 8005a70:	d103      	bne.n	8005a7a <USB_GetDevSpeed+0x1a>
    speed = USBD_FS_SPEED;
 8005a72:	2002      	movs	r0, #2
 8005a74:	4770      	bx	lr
    speed = USBD_HS_SPEED;
 8005a76:	2000      	movs	r0, #0
 8005a78:	4770      	bx	lr
    speed = 0xFU;
 8005a7a:	200f      	movs	r0, #15
}
 8005a7c:	4770      	bx	lr
	...

08005a80 <USB_ActivateEndpoint>:
{
 8005a80:	b470      	push	{r4, r5, r6}
  uint32_t epnum = (uint32_t)ep->num;
 8005a82:	780c      	ldrb	r4, [r1, #0]
  if (ep->is_in == 1U)
 8005a84:	784b      	ldrb	r3, [r1, #1]
 8005a86:	2b01      	cmp	r3, #1
 8005a88:	d020      	beq.n	8005acc <USB_ActivateEndpoint+0x4c>
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8005a8a:	f8d0 381c 	ldr.w	r3, [r0, #2076]	; 0x81c
 8005a8e:	f004 060f 	and.w	r6, r4, #15
 8005a92:	2201      	movs	r2, #1
 8005a94:	40b2      	lsls	r2, r6
 8005a96:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005a9a:	f8c0 381c 	str.w	r3, [r0, #2076]	; 0x81c
    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8005a9e:	eb00 1044 	add.w	r0, r0, r4, lsl #5
 8005aa2:	f8d0 3b00 	ldr.w	r3, [r0, #2816]	; 0xb00
 8005aa6:	f413 4f00 	tst.w	r3, #32768	; 0x8000
 8005aaa:	d10c      	bne.n	8005ac6 <USB_ActivateEndpoint+0x46>
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8005aac:	f8d0 2b00 	ldr.w	r2, [r0, #2816]	; 0xb00
 8005ab0:	688b      	ldr	r3, [r1, #8]
 8005ab2:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8005ab6:	78c9      	ldrb	r1, [r1, #3]
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8005ab8:	ea43 4381 	orr.w	r3, r3, r1, lsl #18
 8005abc:	4313      	orrs	r3, r2
 8005abe:	4a13      	ldr	r2, [pc, #76]	; (8005b0c <USB_ActivateEndpoint+0x8c>)
 8005ac0:	431a      	orrs	r2, r3
 8005ac2:	f8c0 2b00 	str.w	r2, [r0, #2816]	; 0xb00
}
 8005ac6:	2000      	movs	r0, #0
 8005ac8:	bc70      	pop	{r4, r5, r6}
 8005aca:	4770      	bx	lr
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8005acc:	f8d0 281c 	ldr.w	r2, [r0, #2076]	; 0x81c
 8005ad0:	f004 060f 	and.w	r6, r4, #15
 8005ad4:	40b3      	lsls	r3, r6
 8005ad6:	b29b      	uxth	r3, r3
 8005ad8:	4313      	orrs	r3, r2
 8005ada:	f8c0 381c 	str.w	r3, [r0, #2076]	; 0x81c
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8005ade:	eb00 1044 	add.w	r0, r0, r4, lsl #5
 8005ae2:	f8d0 3900 	ldr.w	r3, [r0, #2304]	; 0x900
 8005ae6:	f413 4f00 	tst.w	r3, #32768	; 0x8000
 8005aea:	d1ec      	bne.n	8005ac6 <USB_ActivateEndpoint+0x46>
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8005aec:	f8d0 2900 	ldr.w	r2, [r0, #2304]	; 0x900
 8005af0:	688b      	ldr	r3, [r1, #8]
 8005af2:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8005af6:	78c9      	ldrb	r1, [r1, #3]
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8005af8:	ea43 4381 	orr.w	r3, r3, r1, lsl #18
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8005afc:	ea43 5484 	orr.w	r4, r3, r4, lsl #22
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8005b00:	4314      	orrs	r4, r2
 8005b02:	4b02      	ldr	r3, [pc, #8]	; (8005b0c <USB_ActivateEndpoint+0x8c>)
 8005b04:	4323      	orrs	r3, r4
 8005b06:	f8c0 3900 	str.w	r3, [r0, #2304]	; 0x900
 8005b0a:	e7dc      	b.n	8005ac6 <USB_ActivateEndpoint+0x46>
 8005b0c:	10008000 	.word	0x10008000

08005b10 <USB_DeactivateEndpoint>:
{
 8005b10:	b430      	push	{r4, r5}
  uint32_t epnum = (uint32_t)ep->num;
 8005b12:	780b      	ldrb	r3, [r1, #0]
  if (ep->is_in == 1U)
 8005b14:	784a      	ldrb	r2, [r1, #1]
 8005b16:	2a01      	cmp	r2, #1
 8005b18:	d024      	beq.n	8005b64 <USB_DeactivateEndpoint+0x54>
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005b1a:	eb00 1343 	add.w	r3, r0, r3, lsl #5
 8005b1e:	f8d3 2b00 	ldr.w	r2, [r3, #2816]	; 0xb00
 8005b22:	2a00      	cmp	r2, #0
 8005b24:	db50      	blt.n	8005bc8 <USB_DeactivateEndpoint+0xb8>
    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8005b26:	f8d0 583c 	ldr.w	r5, [r0, #2108]	; 0x83c
 8005b2a:	780a      	ldrb	r2, [r1, #0]
 8005b2c:	f002 020f 	and.w	r2, r2, #15
 8005b30:	2401      	movs	r4, #1
 8005b32:	fa04 f202 	lsl.w	r2, r4, r2
 8005b36:	ea25 4202 	bic.w	r2, r5, r2, lsl #16
 8005b3a:	f8c0 283c 	str.w	r2, [r0, #2108]	; 0x83c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8005b3e:	f8d0 281c 	ldr.w	r2, [r0, #2076]	; 0x81c
 8005b42:	7809      	ldrb	r1, [r1, #0]
 8005b44:	f001 010f 	and.w	r1, r1, #15
 8005b48:	408c      	lsls	r4, r1
 8005b4a:	ea22 4404 	bic.w	r4, r2, r4, lsl #16
 8005b4e:	f8c0 481c 	str.w	r4, [r0, #2076]	; 0x81c
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8005b52:	f8d3 1b00 	ldr.w	r1, [r3, #2816]	; 0xb00
 8005b56:	4a23      	ldr	r2, [pc, #140]	; (8005be4 <USB_DeactivateEndpoint+0xd4>)
 8005b58:	400a      	ands	r2, r1
 8005b5a:	f8c3 2b00 	str.w	r2, [r3, #2816]	; 0xb00
}
 8005b5e:	2000      	movs	r0, #0
 8005b60:	bc30      	pop	{r4, r5}
 8005b62:	4770      	bx	lr
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8005b64:	eb00 1343 	add.w	r3, r0, r3, lsl #5
 8005b68:	f8d3 2900 	ldr.w	r2, [r3, #2304]	; 0x900
 8005b6c:	2a00      	cmp	r2, #0
 8005b6e:	db1e      	blt.n	8005bae <USB_DeactivateEndpoint+0x9e>
    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8005b70:	f8d0 583c 	ldr.w	r5, [r0, #2108]	; 0x83c
 8005b74:	780a      	ldrb	r2, [r1, #0]
 8005b76:	f002 020f 	and.w	r2, r2, #15
 8005b7a:	2401      	movs	r4, #1
 8005b7c:	fa04 f202 	lsl.w	r2, r4, r2
 8005b80:	b292      	uxth	r2, r2
 8005b82:	ea25 0202 	bic.w	r2, r5, r2
 8005b86:	f8c0 283c 	str.w	r2, [r0, #2108]	; 0x83c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8005b8a:	f8d0 281c 	ldr.w	r2, [r0, #2076]	; 0x81c
 8005b8e:	7809      	ldrb	r1, [r1, #0]
 8005b90:	f001 010f 	and.w	r1, r1, #15
 8005b94:	408c      	lsls	r4, r1
 8005b96:	b2a4      	uxth	r4, r4
 8005b98:	ea22 0404 	bic.w	r4, r2, r4
 8005b9c:	f8c0 481c 	str.w	r4, [r0, #2076]	; 0x81c
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8005ba0:	f8d3 1900 	ldr.w	r1, [r3, #2304]	; 0x900
 8005ba4:	4a10      	ldr	r2, [pc, #64]	; (8005be8 <USB_DeactivateEndpoint+0xd8>)
 8005ba6:	400a      	ands	r2, r1
 8005ba8:	f8c3 2900 	str.w	r2, [r3, #2304]	; 0x900
 8005bac:	e7d7      	b.n	8005b5e <USB_DeactivateEndpoint+0x4e>
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8005bae:	f8d3 2900 	ldr.w	r2, [r3, #2304]	; 0x900
 8005bb2:	f042 6200 	orr.w	r2, r2, #134217728	; 0x8000000
 8005bb6:	f8c3 2900 	str.w	r2, [r3, #2304]	; 0x900
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8005bba:	f8d3 2900 	ldr.w	r2, [r3, #2304]	; 0x900
 8005bbe:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8005bc2:	f8c3 2900 	str.w	r2, [r3, #2304]	; 0x900
 8005bc6:	e7d3      	b.n	8005b70 <USB_DeactivateEndpoint+0x60>
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8005bc8:	f8d3 2b00 	ldr.w	r2, [r3, #2816]	; 0xb00
 8005bcc:	f042 6200 	orr.w	r2, r2, #134217728	; 0x8000000
 8005bd0:	f8c3 2b00 	str.w	r2, [r3, #2816]	; 0xb00
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8005bd4:	f8d3 2b00 	ldr.w	r2, [r3, #2816]	; 0xb00
 8005bd8:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8005bdc:	f8c3 2b00 	str.w	r2, [r3, #2816]	; 0xb00
 8005be0:	e7a1      	b.n	8005b26 <USB_DeactivateEndpoint+0x16>
 8005be2:	bf00      	nop
 8005be4:	eff37800 	.word	0xeff37800
 8005be8:	ec337800 	.word	0xec337800

08005bec <USB_EP0StartXfer>:
{
 8005bec:	b470      	push	{r4, r5, r6}
  uint32_t epnum = (uint32_t)ep->num;
 8005bee:	780b      	ldrb	r3, [r1, #0]
  if (ep->is_in == 1U)
 8005bf0:	784c      	ldrb	r4, [r1, #1]
 8005bf2:	2c01      	cmp	r4, #1
 8005bf4:	d024      	beq.n	8005c40 <USB_EP0StartXfer+0x54>
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8005bf6:	eb00 1043 	add.w	r0, r0, r3, lsl #5
 8005bfa:	f500 6330 	add.w	r3, r0, #2816	; 0xb00
 8005bfe:	691d      	ldr	r5, [r3, #16]
 8005c00:	4c3e      	ldr	r4, [pc, #248]	; (8005cfc <USB_EP0StartXfer+0x110>)
 8005c02:	402c      	ands	r4, r5
 8005c04:	611c      	str	r4, [r3, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8005c06:	691d      	ldr	r5, [r3, #16]
 8005c08:	4c3d      	ldr	r4, [pc, #244]	; (8005d00 <USB_EP0StartXfer+0x114>)
 8005c0a:	402c      	ands	r4, r5
 8005c0c:	611c      	str	r4, [r3, #16]
    if (ep->xfer_len > 0U)
 8005c0e:	694c      	ldr	r4, [r1, #20]
 8005c10:	b10c      	cbz	r4, 8005c16 <USB_EP0StartXfer+0x2a>
      ep->xfer_len = ep->maxpacket;
 8005c12:	688c      	ldr	r4, [r1, #8]
 8005c14:	614c      	str	r4, [r1, #20]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8005c16:	691c      	ldr	r4, [r3, #16]
 8005c18:	f444 2400 	orr.w	r4, r4, #524288	; 0x80000
 8005c1c:	611c      	str	r4, [r3, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 8005c1e:	691c      	ldr	r4, [r3, #16]
 8005c20:	688d      	ldr	r5, [r1, #8]
 8005c22:	f3c5 0512 	ubfx	r5, r5, #0, #19
 8005c26:	432c      	orrs	r4, r5
 8005c28:	611c      	str	r4, [r3, #16]
    if (dma == 1U)
 8005c2a:	2a01      	cmp	r2, #1
 8005c2c:	d061      	beq.n	8005cf2 <USB_EP0StartXfer+0x106>
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8005c2e:	f8d0 3b00 	ldr.w	r3, [r0, #2816]	; 0xb00
 8005c32:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005c36:	f8c0 3b00 	str.w	r3, [r0, #2816]	; 0xb00
}
 8005c3a:	2000      	movs	r0, #0
 8005c3c:	bc70      	pop	{r4, r5, r6}
 8005c3e:	4770      	bx	lr
    if (ep->xfer_len == 0U)
 8005c40:	694c      	ldr	r4, [r1, #20]
 8005c42:	bb5c      	cbnz	r4, 8005c9c <USB_EP0StartXfer+0xb0>
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8005c44:	eb00 1443 	add.w	r4, r0, r3, lsl #5
 8005c48:	f8d4 6910 	ldr.w	r6, [r4, #2320]	; 0x910
 8005c4c:	4d2c      	ldr	r5, [pc, #176]	; (8005d00 <USB_EP0StartXfer+0x114>)
 8005c4e:	4035      	ands	r5, r6
 8005c50:	f8c4 5910 	str.w	r5, [r4, #2320]	; 0x910
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8005c54:	f8d4 5910 	ldr.w	r5, [r4, #2320]	; 0x910
 8005c58:	f445 2500 	orr.w	r5, r5, #524288	; 0x80000
 8005c5c:	f8c4 5910 	str.w	r5, [r4, #2320]	; 0x910
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005c60:	f8d4 6910 	ldr.w	r6, [r4, #2320]	; 0x910
 8005c64:	4d25      	ldr	r5, [pc, #148]	; (8005cfc <USB_EP0StartXfer+0x110>)
 8005c66:	4035      	ands	r5, r6
 8005c68:	f8c4 5910 	str.w	r5, [r4, #2320]	; 0x910
    if (dma == 1U)
 8005c6c:	2a01      	cmp	r2, #1
 8005c6e:	d031      	beq.n	8005cd4 <USB_EP0StartXfer+0xe8>
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8005c70:	eb00 1343 	add.w	r3, r0, r3, lsl #5
 8005c74:	f8d3 2900 	ldr.w	r2, [r3, #2304]	; 0x900
 8005c78:	f042 4204 	orr.w	r2, r2, #2214592512	; 0x84000000
 8005c7c:	f8c3 2900 	str.w	r2, [r3, #2304]	; 0x900
      if (ep->xfer_len > 0U)
 8005c80:	694b      	ldr	r3, [r1, #20]
 8005c82:	2b00      	cmp	r3, #0
 8005c84:	d0d9      	beq.n	8005c3a <USB_EP0StartXfer+0x4e>
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8005c86:	f8d0 3834 	ldr.w	r3, [r0, #2100]	; 0x834
 8005c8a:	780a      	ldrb	r2, [r1, #0]
 8005c8c:	f002 010f 	and.w	r1, r2, #15
 8005c90:	2201      	movs	r2, #1
 8005c92:	408a      	lsls	r2, r1
 8005c94:	4313      	orrs	r3, r2
 8005c96:	f8c0 3834 	str.w	r3, [r0, #2100]	; 0x834
 8005c9a:	e7ce      	b.n	8005c3a <USB_EP0StartXfer+0x4e>
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005c9c:	eb00 1443 	add.w	r4, r0, r3, lsl #5
 8005ca0:	f504 6410 	add.w	r4, r4, #2304	; 0x900
 8005ca4:	6926      	ldr	r6, [r4, #16]
 8005ca6:	4d15      	ldr	r5, [pc, #84]	; (8005cfc <USB_EP0StartXfer+0x110>)
 8005ca8:	4035      	ands	r5, r6
 8005caa:	6125      	str	r5, [r4, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8005cac:	6926      	ldr	r6, [r4, #16]
 8005cae:	4d14      	ldr	r5, [pc, #80]	; (8005d00 <USB_EP0StartXfer+0x114>)
 8005cb0:	4035      	ands	r5, r6
 8005cb2:	6125      	str	r5, [r4, #16]
      if (ep->xfer_len > ep->maxpacket)
 8005cb4:	694e      	ldr	r6, [r1, #20]
 8005cb6:	688d      	ldr	r5, [r1, #8]
 8005cb8:	42ae      	cmp	r6, r5
 8005cba:	d900      	bls.n	8005cbe <USB_EP0StartXfer+0xd2>
        ep->xfer_len = ep->maxpacket;
 8005cbc:	614d      	str	r5, [r1, #20]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8005cbe:	6925      	ldr	r5, [r4, #16]
 8005cc0:	f445 2500 	orr.w	r5, r5, #524288	; 0x80000
 8005cc4:	6125      	str	r5, [r4, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8005cc6:	6925      	ldr	r5, [r4, #16]
 8005cc8:	694e      	ldr	r6, [r1, #20]
 8005cca:	f3c6 0612 	ubfx	r6, r6, #0, #19
 8005cce:	4335      	orrs	r5, r6
 8005cd0:	6125      	str	r5, [r4, #16]
 8005cd2:	e7cb      	b.n	8005c6c <USB_EP0StartXfer+0x80>
      if ((uint32_t)ep->dma_addr != 0U)
 8005cd4:	690a      	ldr	r2, [r1, #16]
 8005cd6:	b11a      	cbz	r2, 8005ce0 <USB_EP0StartXfer+0xf4>
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8005cd8:	eb00 1143 	add.w	r1, r0, r3, lsl #5
 8005cdc:	f8c1 2914 	str.w	r2, [r1, #2324]	; 0x914
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8005ce0:	eb00 1043 	add.w	r0, r0, r3, lsl #5
 8005ce4:	f8d0 2900 	ldr.w	r2, [r0, #2304]	; 0x900
 8005ce8:	f042 4204 	orr.w	r2, r2, #2214592512	; 0x84000000
 8005cec:	f8c0 2900 	str.w	r2, [r0, #2304]	; 0x900
 8005cf0:	e7a3      	b.n	8005c3a <USB_EP0StartXfer+0x4e>
      if ((uint32_t)ep->xfer_buff != 0U)
 8005cf2:	68ca      	ldr	r2, [r1, #12]
 8005cf4:	2a00      	cmp	r2, #0
 8005cf6:	d09a      	beq.n	8005c2e <USB_EP0StartXfer+0x42>
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8005cf8:	615a      	str	r2, [r3, #20]
 8005cfa:	e798      	b.n	8005c2e <USB_EP0StartXfer+0x42>
 8005cfc:	fff80000 	.word	0xfff80000
 8005d00:	e007ffff 	.word	0xe007ffff

08005d04 <USB_WritePacket>:
{
 8005d04:	b470      	push	{r4, r5, r6}
 8005d06:	f89d 400c 	ldrb.w	r4, [sp, #12]
  if (dma == 0U)
 8005d0a:	b964      	cbnz	r4, 8005d26 <USB_WritePacket+0x22>
    count32b = ((uint32_t)len + 3U) / 4U;
 8005d0c:	3303      	adds	r3, #3
 8005d0e:	089d      	lsrs	r5, r3, #2
    for (i = 0U; i < count32b; i++)
 8005d10:	42ac      	cmp	r4, r5
 8005d12:	d208      	bcs.n	8005d26 <USB_WritePacket+0x22>
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8005d14:	eb00 3302 	add.w	r3, r0, r2, lsl #12
 8005d18:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005d1c:	f851 6b04 	ldr.w	r6, [r1], #4
 8005d20:	601e      	str	r6, [r3, #0]
    for (i = 0U; i < count32b; i++)
 8005d22:	3401      	adds	r4, #1
 8005d24:	e7f4      	b.n	8005d10 <USB_WritePacket+0xc>
}
 8005d26:	2000      	movs	r0, #0
 8005d28:	bc70      	pop	{r4, r5, r6}
 8005d2a:	4770      	bx	lr

08005d2c <USB_EPStartXfer>:
{
 8005d2c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005d2e:	b083      	sub	sp, #12
  uint32_t epnum = (uint32_t)ep->num;
 8005d30:	780b      	ldrb	r3, [r1, #0]
  if (ep->is_in == 1U)
 8005d32:	784c      	ldrb	r4, [r1, #1]
 8005d34:	2c01      	cmp	r4, #1
 8005d36:	d029      	beq.n	8005d8c <USB_EPStartXfer+0x60>
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8005d38:	eb00 1343 	add.w	r3, r0, r3, lsl #5
 8005d3c:	f503 6430 	add.w	r4, r3, #2816	; 0xb00
 8005d40:	6926      	ldr	r6, [r4, #16]
 8005d42:	4d7c      	ldr	r5, [pc, #496]	; (8005f34 <USB_EPStartXfer+0x208>)
 8005d44:	4035      	ands	r5, r6
 8005d46:	6125      	str	r5, [r4, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8005d48:	6926      	ldr	r6, [r4, #16]
 8005d4a:	4d7b      	ldr	r5, [pc, #492]	; (8005f38 <USB_EPStartXfer+0x20c>)
 8005d4c:	4035      	ands	r5, r6
 8005d4e:	6125      	str	r5, [r4, #16]
    if (ep->xfer_len == 0U)
 8005d50:	694d      	ldr	r5, [r1, #20]
 8005d52:	2d00      	cmp	r5, #0
 8005d54:	f040 80bf 	bne.w	8005ed6 <USB_EPStartXfer+0x1aa>
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8005d58:	6925      	ldr	r5, [r4, #16]
 8005d5a:	688e      	ldr	r6, [r1, #8]
 8005d5c:	f3c6 0612 	ubfx	r6, r6, #0, #19
 8005d60:	4335      	orrs	r5, r6
 8005d62:	6125      	str	r5, [r4, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8005d64:	6925      	ldr	r5, [r4, #16]
 8005d66:	f445 2500 	orr.w	r5, r5, #524288	; 0x80000
 8005d6a:	6125      	str	r5, [r4, #16]
    if (dma == 1U)
 8005d6c:	2a01      	cmp	r2, #1
 8005d6e:	f000 80c7 	beq.w	8005f00 <USB_EPStartXfer+0x1d4>
    if (ep->type == EP_TYPE_ISOC)
 8005d72:	78ca      	ldrb	r2, [r1, #3]
 8005d74:	2a01      	cmp	r2, #1
 8005d76:	f000 80c9 	beq.w	8005f0c <USB_EPStartXfer+0x1e0>
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8005d7a:	f8d3 2b00 	ldr.w	r2, [r3, #2816]	; 0xb00
 8005d7e:	f042 4204 	orr.w	r2, r2, #2214592512	; 0x84000000
 8005d82:	f8c3 2b00 	str.w	r2, [r3, #2816]	; 0xb00
}
 8005d86:	2000      	movs	r0, #0
 8005d88:	b003      	add	sp, #12
 8005d8a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if (ep->xfer_len == 0U)
 8005d8c:	694c      	ldr	r4, [r1, #20]
 8005d8e:	bb74      	cbnz	r4, 8005dee <USB_EPStartXfer+0xc2>
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8005d90:	eb00 1443 	add.w	r4, r0, r3, lsl #5
 8005d94:	f8d4 6910 	ldr.w	r6, [r4, #2320]	; 0x910
 8005d98:	4d67      	ldr	r5, [pc, #412]	; (8005f38 <USB_EPStartXfer+0x20c>)
 8005d9a:	4035      	ands	r5, r6
 8005d9c:	f8c4 5910 	str.w	r5, [r4, #2320]	; 0x910
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8005da0:	f8d4 5910 	ldr.w	r5, [r4, #2320]	; 0x910
 8005da4:	f445 2500 	orr.w	r5, r5, #524288	; 0x80000
 8005da8:	f8c4 5910 	str.w	r5, [r4, #2320]	; 0x910
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005dac:	f8d4 6910 	ldr.w	r6, [r4, #2320]	; 0x910
 8005db0:	4d60      	ldr	r5, [pc, #384]	; (8005f34 <USB_EPStartXfer+0x208>)
 8005db2:	4035      	ands	r5, r6
 8005db4:	f8c4 5910 	str.w	r5, [r4, #2320]	; 0x910
    if (dma == 1U)
 8005db8:	2a01      	cmp	r2, #1
 8005dba:	d04a      	beq.n	8005e52 <USB_EPStartXfer+0x126>
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8005dbc:	eb00 1343 	add.w	r3, r0, r3, lsl #5
 8005dc0:	f8d3 4900 	ldr.w	r4, [r3, #2304]	; 0x900
 8005dc4:	f044 4404 	orr.w	r4, r4, #2214592512	; 0x84000000
 8005dc8:	f8c3 4900 	str.w	r4, [r3, #2304]	; 0x900
      if (ep->type != EP_TYPE_ISOC)
 8005dcc:	78cc      	ldrb	r4, [r1, #3]
 8005dce:	2c01      	cmp	r4, #1
 8005dd0:	d068      	beq.n	8005ea4 <USB_EPStartXfer+0x178>
        if (ep->xfer_len > 0U)
 8005dd2:	694b      	ldr	r3, [r1, #20]
 8005dd4:	2b00      	cmp	r3, #0
 8005dd6:	d0d6      	beq.n	8005d86 <USB_EPStartXfer+0x5a>
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8005dd8:	f8d0 2834 	ldr.w	r2, [r0, #2100]	; 0x834
 8005ddc:	7809      	ldrb	r1, [r1, #0]
 8005dde:	f001 040f 	and.w	r4, r1, #15
 8005de2:	2101      	movs	r1, #1
 8005de4:	40a1      	lsls	r1, r4
 8005de6:	430a      	orrs	r2, r1
 8005de8:	f8c0 2834 	str.w	r2, [r0, #2100]	; 0x834
 8005dec:	e7cb      	b.n	8005d86 <USB_EPStartXfer+0x5a>
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005dee:	eb00 1443 	add.w	r4, r0, r3, lsl #5
 8005df2:	f8d4 6910 	ldr.w	r6, [r4, #2320]	; 0x910
 8005df6:	4d4f      	ldr	r5, [pc, #316]	; (8005f34 <USB_EPStartXfer+0x208>)
 8005df8:	4035      	ands	r5, r6
 8005dfa:	f8c4 5910 	str.w	r5, [r4, #2320]	; 0x910
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8005dfe:	f8d4 6910 	ldr.w	r6, [r4, #2320]	; 0x910
 8005e02:	4d4d      	ldr	r5, [pc, #308]	; (8005f38 <USB_EPStartXfer+0x20c>)
 8005e04:	4035      	ands	r5, r6
 8005e06:	f8c4 5910 	str.w	r5, [r4, #2320]	; 0x910
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8005e0a:	f8d4 6910 	ldr.w	r6, [r4, #2320]	; 0x910
 8005e0e:	694d      	ldr	r5, [r1, #20]
 8005e10:	688f      	ldr	r7, [r1, #8]
 8005e12:	443d      	add	r5, r7
 8005e14:	3d01      	subs	r5, #1
 8005e16:	fbb5 f5f7 	udiv	r5, r5, r7
 8005e1a:	4f48      	ldr	r7, [pc, #288]	; (8005f3c <USB_EPStartXfer+0x210>)
 8005e1c:	ea07 45c5 	and.w	r5, r7, r5, lsl #19
 8005e20:	4335      	orrs	r5, r6
 8005e22:	f8c4 5910 	str.w	r5, [r4, #2320]	; 0x910
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8005e26:	f8d4 5910 	ldr.w	r5, [r4, #2320]	; 0x910
 8005e2a:	694e      	ldr	r6, [r1, #20]
 8005e2c:	f3c6 0612 	ubfx	r6, r6, #0, #19
 8005e30:	4335      	orrs	r5, r6
 8005e32:	f8c4 5910 	str.w	r5, [r4, #2320]	; 0x910
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005e36:	f504 6410 	add.w	r4, r4, #2304	; 0x900
      if (ep->type == EP_TYPE_ISOC)
 8005e3a:	78cd      	ldrb	r5, [r1, #3]
 8005e3c:	2d01      	cmp	r5, #1
 8005e3e:	d1bb      	bne.n	8005db8 <USB_EPStartXfer+0x8c>
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8005e40:	6925      	ldr	r5, [r4, #16]
 8005e42:	f025 45c0 	bic.w	r5, r5, #1610612736	; 0x60000000
 8005e46:	6125      	str	r5, [r4, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8005e48:	6925      	ldr	r5, [r4, #16]
 8005e4a:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 8005e4e:	6125      	str	r5, [r4, #16]
 8005e50:	e7b2      	b.n	8005db8 <USB_EPStartXfer+0x8c>
      if ((uint32_t)ep->dma_addr != 0U)
 8005e52:	690a      	ldr	r2, [r1, #16]
 8005e54:	b11a      	cbz	r2, 8005e5e <USB_EPStartXfer+0x132>
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8005e56:	eb00 1443 	add.w	r4, r0, r3, lsl #5
 8005e5a:	f8c4 2914 	str.w	r2, [r4, #2324]	; 0x914
      if (ep->type == EP_TYPE_ISOC)
 8005e5e:	78ca      	ldrb	r2, [r1, #3]
 8005e60:	2a01      	cmp	r2, #1
 8005e62:	d008      	beq.n	8005e76 <USB_EPStartXfer+0x14a>
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8005e64:	eb00 1343 	add.w	r3, r0, r3, lsl #5
 8005e68:	f8d3 2900 	ldr.w	r2, [r3, #2304]	; 0x900
 8005e6c:	f042 4204 	orr.w	r2, r2, #2214592512	; 0x84000000
 8005e70:	f8c3 2900 	str.w	r2, [r3, #2304]	; 0x900
 8005e74:	e787      	b.n	8005d86 <USB_EPStartXfer+0x5a>
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8005e76:	f8d0 2808 	ldr.w	r2, [r0, #2056]	; 0x808
 8005e7a:	f412 7f80 	tst.w	r2, #256	; 0x100
 8005e7e:	d108      	bne.n	8005e92 <USB_EPStartXfer+0x166>
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8005e80:	eb00 1143 	add.w	r1, r0, r3, lsl #5
 8005e84:	f8d1 2900 	ldr.w	r2, [r1, #2304]	; 0x900
 8005e88:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 8005e8c:	f8c1 2900 	str.w	r2, [r1, #2304]	; 0x900
 8005e90:	e7e8      	b.n	8005e64 <USB_EPStartXfer+0x138>
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8005e92:	eb00 1143 	add.w	r1, r0, r3, lsl #5
 8005e96:	f8d1 2900 	ldr.w	r2, [r1, #2304]	; 0x900
 8005e9a:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8005e9e:	f8c1 2900 	str.w	r2, [r1, #2304]	; 0x900
 8005ea2:	e7df      	b.n	8005e64 <USB_EPStartXfer+0x138>
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8005ea4:	f8d0 4808 	ldr.w	r4, [r0, #2056]	; 0x808
 8005ea8:	f414 7f80 	tst.w	r4, #256	; 0x100
 8005eac:	d10c      	bne.n	8005ec8 <USB_EPStartXfer+0x19c>
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8005eae:	f8d3 4900 	ldr.w	r4, [r3, #2304]	; 0x900
 8005eb2:	f044 5400 	orr.w	r4, r4, #536870912	; 0x20000000
 8005eb6:	f8c3 4900 	str.w	r4, [r3, #2304]	; 0x900
        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8005eba:	9200      	str	r2, [sp, #0]
 8005ebc:	8a8b      	ldrh	r3, [r1, #20]
 8005ebe:	780a      	ldrb	r2, [r1, #0]
 8005ec0:	68c9      	ldr	r1, [r1, #12]
 8005ec2:	f7ff ff1f 	bl	8005d04 <USB_WritePacket>
 8005ec6:	e75e      	b.n	8005d86 <USB_EPStartXfer+0x5a>
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8005ec8:	f8d3 4900 	ldr.w	r4, [r3, #2304]	; 0x900
 8005ecc:	f044 5480 	orr.w	r4, r4, #268435456	; 0x10000000
 8005ed0:	f8c3 4900 	str.w	r4, [r3, #2304]	; 0x900
 8005ed4:	e7f1      	b.n	8005eba <USB_EPStartXfer+0x18e>
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8005ed6:	688e      	ldr	r6, [r1, #8]
 8005ed8:	4435      	add	r5, r6
 8005eda:	3d01      	subs	r5, #1
 8005edc:	fbb5 f5f6 	udiv	r5, r5, r6
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8005ee0:	6926      	ldr	r6, [r4, #16]
 8005ee2:	4f16      	ldr	r7, [pc, #88]	; (8005f3c <USB_EPStartXfer+0x210>)
 8005ee4:	ea07 47c5 	and.w	r7, r7, r5, lsl #19
 8005ee8:	433e      	orrs	r6, r7
 8005eea:	6126      	str	r6, [r4, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 8005eec:	6927      	ldr	r7, [r4, #16]
 8005eee:	688e      	ldr	r6, [r1, #8]
 8005ef0:	b2ad      	uxth	r5, r5
 8005ef2:	fb06 f505 	mul.w	r5, r6, r5
 8005ef6:	f3c5 0512 	ubfx	r5, r5, #0, #19
 8005efa:	433d      	orrs	r5, r7
 8005efc:	6125      	str	r5, [r4, #16]
 8005efe:	e735      	b.n	8005d6c <USB_EPStartXfer+0x40>
      if ((uint32_t)ep->xfer_buff != 0U)
 8005f00:	68ca      	ldr	r2, [r1, #12]
 8005f02:	2a00      	cmp	r2, #0
 8005f04:	f43f af35 	beq.w	8005d72 <USB_EPStartXfer+0x46>
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8005f08:	6162      	str	r2, [r4, #20]
 8005f0a:	e732      	b.n	8005d72 <USB_EPStartXfer+0x46>
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8005f0c:	f8d0 2808 	ldr.w	r2, [r0, #2056]	; 0x808
 8005f10:	f412 7f80 	tst.w	r2, #256	; 0x100
 8005f14:	d106      	bne.n	8005f24 <USB_EPStartXfer+0x1f8>
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8005f16:	f8d3 2b00 	ldr.w	r2, [r3, #2816]	; 0xb00
 8005f1a:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 8005f1e:	f8c3 2b00 	str.w	r2, [r3, #2816]	; 0xb00
 8005f22:	e72a      	b.n	8005d7a <USB_EPStartXfer+0x4e>
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8005f24:	f8d3 2b00 	ldr.w	r2, [r3, #2816]	; 0xb00
 8005f28:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8005f2c:	f8c3 2b00 	str.w	r2, [r3, #2816]	; 0xb00
 8005f30:	e723      	b.n	8005d7a <USB_EPStartXfer+0x4e>
 8005f32:	bf00      	nop
 8005f34:	fff80000 	.word	0xfff80000
 8005f38:	e007ffff 	.word	0xe007ffff
 8005f3c:	1ff80000 	.word	0x1ff80000

08005f40 <USB_ReadPacket>:
{
 8005f40:	b410      	push	{r4}
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 8005f42:	3203      	adds	r2, #3
 8005f44:	0894      	lsrs	r4, r2, #2
  for (i = 0U; i < count32b; i++)
 8005f46:	2300      	movs	r3, #0
 8005f48:	42a3      	cmp	r3, r4
 8005f4a:	d206      	bcs.n	8005f5a <USB_ReadPacket+0x1a>
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8005f4c:	f500 5280 	add.w	r2, r0, #4096	; 0x1000
 8005f50:	6812      	ldr	r2, [r2, #0]
 8005f52:	f841 2b04 	str.w	r2, [r1], #4
  for (i = 0U; i < count32b; i++)
 8005f56:	3301      	adds	r3, #1
 8005f58:	e7f6      	b.n	8005f48 <USB_ReadPacket+0x8>
}
 8005f5a:	4608      	mov	r0, r1
 8005f5c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005f60:	4770      	bx	lr

08005f62 <USB_EPSetStall>:
  uint32_t epnum = (uint32_t)ep->num;
 8005f62:	780b      	ldrb	r3, [r1, #0]
  if (ep->is_in == 1U)
 8005f64:	784a      	ldrb	r2, [r1, #1]
 8005f66:	2a01      	cmp	r2, #1
 8005f68:	d014      	beq.n	8005f94 <USB_EPSetStall+0x32>
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8005f6a:	eb00 1043 	add.w	r0, r0, r3, lsl #5
 8005f6e:	f8d0 2b00 	ldr.w	r2, [r0, #2816]	; 0xb00
 8005f72:	2a00      	cmp	r2, #0
 8005f74:	db06      	blt.n	8005f84 <USB_EPSetStall+0x22>
 8005f76:	b12b      	cbz	r3, 8005f84 <USB_EPSetStall+0x22>
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8005f78:	f8d0 3b00 	ldr.w	r3, [r0, #2816]	; 0xb00
 8005f7c:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8005f80:	f8c0 3b00 	str.w	r3, [r0, #2816]	; 0xb00
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8005f84:	f8d0 3b00 	ldr.w	r3, [r0, #2816]	; 0xb00
 8005f88:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8005f8c:	f8c0 3b00 	str.w	r3, [r0, #2816]	; 0xb00
}
 8005f90:	2000      	movs	r0, #0
 8005f92:	4770      	bx	lr
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8005f94:	eb00 1043 	add.w	r0, r0, r3, lsl #5
 8005f98:	f8d0 2900 	ldr.w	r2, [r0, #2304]	; 0x900
 8005f9c:	2a00      	cmp	r2, #0
 8005f9e:	db06      	blt.n	8005fae <USB_EPSetStall+0x4c>
 8005fa0:	b12b      	cbz	r3, 8005fae <USB_EPSetStall+0x4c>
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8005fa2:	f8d0 3900 	ldr.w	r3, [r0, #2304]	; 0x900
 8005fa6:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8005faa:	f8c0 3900 	str.w	r3, [r0, #2304]	; 0x900
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8005fae:	f8d0 3900 	ldr.w	r3, [r0, #2304]	; 0x900
 8005fb2:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8005fb6:	f8c0 3900 	str.w	r3, [r0, #2304]	; 0x900
 8005fba:	e7e9      	b.n	8005f90 <USB_EPSetStall+0x2e>

08005fbc <USB_EPClearStall>:
  uint32_t epnum = (uint32_t)ep->num;
 8005fbc:	780b      	ldrb	r3, [r1, #0]
  if (ep->is_in == 1U)
 8005fbe:	784a      	ldrb	r2, [r1, #1]
 8005fc0:	2a01      	cmp	r2, #1
 8005fc2:	d00e      	beq.n	8005fe2 <USB_EPClearStall+0x26>
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8005fc4:	eb00 1043 	add.w	r0, r0, r3, lsl #5
 8005fc8:	f8d0 3b00 	ldr.w	r3, [r0, #2816]	; 0xb00
 8005fcc:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005fd0:	f8c0 3b00 	str.w	r3, [r0, #2816]	; 0xb00
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8005fd4:	78cb      	ldrb	r3, [r1, #3]
 8005fd6:	3b02      	subs	r3, #2
 8005fd8:	b2db      	uxtb	r3, r3
 8005fda:	2b01      	cmp	r3, #1
 8005fdc:	d915      	bls.n	800600a <USB_EPClearStall+0x4e>
}
 8005fde:	2000      	movs	r0, #0
 8005fe0:	4770      	bx	lr
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8005fe2:	eb00 1043 	add.w	r0, r0, r3, lsl #5
 8005fe6:	f8d0 3900 	ldr.w	r3, [r0, #2304]	; 0x900
 8005fea:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005fee:	f8c0 3900 	str.w	r3, [r0, #2304]	; 0x900
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8005ff2:	78cb      	ldrb	r3, [r1, #3]
 8005ff4:	3b02      	subs	r3, #2
 8005ff6:	b2db      	uxtb	r3, r3
 8005ff8:	2b01      	cmp	r3, #1
 8005ffa:	d8f0      	bhi.n	8005fde <USB_EPClearStall+0x22>
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8005ffc:	f8d0 3900 	ldr.w	r3, [r0, #2304]	; 0x900
 8006000:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006004:	f8c0 3900 	str.w	r3, [r0, #2304]	; 0x900
 8006008:	e7e9      	b.n	8005fde <USB_EPClearStall+0x22>
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800600a:	f8d0 3b00 	ldr.w	r3, [r0, #2816]	; 0xb00
 800600e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006012:	f8c0 3b00 	str.w	r3, [r0, #2816]	; 0xb00
 8006016:	e7e2      	b.n	8005fde <USB_EPClearStall+0x22>

08006018 <USB_SetDevAddress>:
  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8006018:	f8d0 3800 	ldr.w	r3, [r0, #2048]	; 0x800
 800601c:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8006020:	f8c0 3800 	str.w	r3, [r0, #2048]	; 0x800
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8006024:	f8d0 3800 	ldr.w	r3, [r0, #2048]	; 0x800
 8006028:	0109      	lsls	r1, r1, #4
 800602a:	f401 61fe 	and.w	r1, r1, #2032	; 0x7f0
 800602e:	4319      	orrs	r1, r3
 8006030:	f8c0 1800 	str.w	r1, [r0, #2048]	; 0x800
}
 8006034:	2000      	movs	r0, #0
 8006036:	4770      	bx	lr

08006038 <USB_DevConnect>:
{
 8006038:	b508      	push	{r3, lr}
  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 800603a:	f8d0 3804 	ldr.w	r3, [r0, #2052]	; 0x804
 800603e:	f023 0302 	bic.w	r3, r3, #2
 8006042:	f8c0 3804 	str.w	r3, [r0, #2052]	; 0x804
  HAL_Delay(3U);
 8006046:	2003      	movs	r0, #3
 8006048:	f7fa fb56 	bl	80006f8 <HAL_Delay>
}
 800604c:	2000      	movs	r0, #0
 800604e:	bd08      	pop	{r3, pc}

08006050 <USB_DevDisconnect>:
{
 8006050:	b508      	push	{r3, lr}
  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8006052:	f8d0 3804 	ldr.w	r3, [r0, #2052]	; 0x804
 8006056:	f043 0302 	orr.w	r3, r3, #2
 800605a:	f8c0 3804 	str.w	r3, [r0, #2052]	; 0x804
  HAL_Delay(3U);
 800605e:	2003      	movs	r0, #3
 8006060:	f7fa fb4a 	bl	80006f8 <HAL_Delay>
}
 8006064:	2000      	movs	r0, #0
 8006066:	bd08      	pop	{r3, pc}

08006068 <USB_ReadInterrupts>:
  tmpreg = USBx->GINTSTS;
 8006068:	6942      	ldr	r2, [r0, #20]
  tmpreg &= USBx->GINTMSK;
 800606a:	6980      	ldr	r0, [r0, #24]
}
 800606c:	4010      	ands	r0, r2
 800606e:	4770      	bx	lr

08006070 <USB_ReadDevAllOutEpInterrupt>:
  tmpreg  = USBx_DEVICE->DAINT;
 8006070:	f8d0 3818 	ldr.w	r3, [r0, #2072]	; 0x818
 8006074:	f500 6000 	add.w	r0, r0, #2048	; 0x800
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8006078:	69c0      	ldr	r0, [r0, #28]
 800607a:	4018      	ands	r0, r3
}
 800607c:	0c00      	lsrs	r0, r0, #16
 800607e:	4770      	bx	lr

08006080 <USB_ReadDevAllInEpInterrupt>:
  tmpreg  = USBx_DEVICE->DAINT;
 8006080:	f8d0 3818 	ldr.w	r3, [r0, #2072]	; 0x818
 8006084:	f500 6000 	add.w	r0, r0, #2048	; 0x800
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8006088:	69c0      	ldr	r0, [r0, #28]
 800608a:	4018      	ands	r0, r3
}
 800608c:	b280      	uxth	r0, r0
 800608e:	4770      	bx	lr

08006090 <USB_ReadDevOutEPInterrupt>:
  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8006090:	eb00 1141 	add.w	r1, r0, r1, lsl #5
 8006094:	f8d1 2b08 	ldr.w	r2, [r1, #2824]	; 0xb08
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8006098:	f500 6000 	add.w	r0, r0, #2048	; 0x800
 800609c:	6940      	ldr	r0, [r0, #20]
}
 800609e:	4010      	ands	r0, r2
 80060a0:	4770      	bx	lr

080060a2 <USB_ReadDevInEPInterrupt>:
{
 80060a2:	b410      	push	{r4}
  msk = USBx_DEVICE->DIEPMSK;
 80060a4:	f8d0 4810 	ldr.w	r4, [r0, #2064]	; 0x810
  emp = USBx_DEVICE->DIEPEMPMSK;
 80060a8:	f8d0 3834 	ldr.w	r3, [r0, #2100]	; 0x834
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 80060ac:	f001 020f 	and.w	r2, r1, #15
 80060b0:	40d3      	lsrs	r3, r2
 80060b2:	01db      	lsls	r3, r3, #7
 80060b4:	b2db      	uxtb	r3, r3
 80060b6:	4323      	orrs	r3, r4
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 80060b8:	eb00 1041 	add.w	r0, r0, r1, lsl #5
 80060bc:	f500 6010 	add.w	r0, r0, #2304	; 0x900
 80060c0:	6880      	ldr	r0, [r0, #8]
}
 80060c2:	4018      	ands	r0, r3
 80060c4:	f85d 4b04 	ldr.w	r4, [sp], #4
 80060c8:	4770      	bx	lr

080060ca <USB_GetMode>:
  return ((USBx->GINTSTS) & 0x1U);
 80060ca:	6940      	ldr	r0, [r0, #20]
}
 80060cc:	f000 0001 	and.w	r0, r0, #1
 80060d0:	4770      	bx	lr
	...

080060d4 <USB_ActivateSetup>:
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 80060d4:	f8d0 2900 	ldr.w	r2, [r0, #2304]	; 0x900
 80060d8:	4b05      	ldr	r3, [pc, #20]	; (80060f0 <USB_ActivateSetup+0x1c>)
 80060da:	4013      	ands	r3, r2
 80060dc:	f8c0 3900 	str.w	r3, [r0, #2304]	; 0x900
  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 80060e0:	f8d0 3804 	ldr.w	r3, [r0, #2052]	; 0x804
 80060e4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80060e8:	f8c0 3804 	str.w	r3, [r0, #2052]	; 0x804
}
 80060ec:	2000      	movs	r0, #0
 80060ee:	4770      	bx	lr
 80060f0:	fffff800 	.word	0xfffff800

080060f4 <USB_EP0_OutStart>:
{
 80060f4:	b410      	push	{r4}
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80060f6:	6c04      	ldr	r4, [r0, #64]	; 0x40
  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 80060f8:	4b15      	ldr	r3, [pc, #84]	; (8006150 <USB_EP0_OutStart+0x5c>)
 80060fa:	429c      	cmp	r4, r3
 80060fc:	d903      	bls.n	8006106 <USB_EP0_OutStart+0x12>
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80060fe:	f8d0 3b00 	ldr.w	r3, [r0, #2816]	; 0xb00
 8006102:	2b00      	cmp	r3, #0
 8006104:	db16      	blt.n	8006134 <USB_EP0_OutStart+0x40>
  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8006106:	2400      	movs	r4, #0
 8006108:	f8c0 4b10 	str.w	r4, [r0, #2832]	; 0xb10
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800610c:	f8d0 4b10 	ldr.w	r4, [r0, #2832]	; 0xb10
 8006110:	f444 2400 	orr.w	r4, r4, #524288	; 0x80000
 8006114:	f8c0 4b10 	str.w	r4, [r0, #2832]	; 0xb10
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8006118:	f8d0 4b10 	ldr.w	r4, [r0, #2832]	; 0xb10
 800611c:	f044 0418 	orr.w	r4, r4, #24
 8006120:	f8c0 4b10 	str.w	r4, [r0, #2832]	; 0xb10
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8006124:	f8d0 4b10 	ldr.w	r4, [r0, #2832]	; 0xb10
 8006128:	f044 44c0 	orr.w	r4, r4, #1610612736	; 0x60000000
 800612c:	f8c0 4b10 	str.w	r4, [r0, #2832]	; 0xb10
  if (dma == 1U)
 8006130:	2901      	cmp	r1, #1
 8006132:	d003      	beq.n	800613c <USB_EP0_OutStart+0x48>
}
 8006134:	2000      	movs	r0, #0
 8006136:	f85d 4b04 	ldr.w	r4, [sp], #4
 800613a:	4770      	bx	lr
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 800613c:	f8c0 2b14 	str.w	r2, [r0, #2836]	; 0xb14
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8006140:	f8d0 3b00 	ldr.w	r3, [r0, #2816]	; 0xb00
 8006144:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 8006148:	f8c0 3b00 	str.w	r3, [r0, #2816]	; 0xb00
 800614c:	e7f2      	b.n	8006134 <USB_EP0_OutStart+0x40>
 800614e:	bf00      	nop
 8006150:	4f54300a 	.word	0x4f54300a

08006154 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8006154:	b510      	push	{r4, lr}
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8006156:	f8d0 42bc 	ldr.w	r4, [r0, #700]	; 0x2bc

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800615a:	f8d0 32c0 	ldr.w	r3, [r0, #704]	; 0x2c0
 800615e:	b15b      	cbz	r3, 8006178 <USBD_CDC_EP0_RxReady+0x24>
 8006160:	f894 0800 	ldrb.w	r0, [r4, #2048]	; 0x800
 8006164:	28ff      	cmp	r0, #255	; 0xff
 8006166:	d007      	beq.n	8006178 <USBD_CDC_EP0_RxReady+0x24>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8006168:	689b      	ldr	r3, [r3, #8]
 800616a:	f894 2801 	ldrb.w	r2, [r4, #2049]	; 0x801
 800616e:	4621      	mov	r1, r4
 8006170:	4798      	blx	r3
                                                      (uint8_t *)hcdc->data,
                                                      (uint16_t)hcdc->CmdLength);
    hcdc->CmdOpCode = 0xFFU;
 8006172:	23ff      	movs	r3, #255	; 0xff
 8006174:	f884 3800 	strb.w	r3, [r4, #2048]	; 0x800

  }

  return (uint8_t)USBD_OK;
}
 8006178:	2000      	movs	r0, #0
 800617a:	bd10      	pop	{r4, pc}

0800617c <USBD_CDC_GetFSCfgDesc>:
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 800617c:	2343      	movs	r3, #67	; 0x43
 800617e:	8003      	strh	r3, [r0, #0]

  return USBD_CDC_CfgFSDesc;
}
 8006180:	4800      	ldr	r0, [pc, #0]	; (8006184 <USBD_CDC_GetFSCfgDesc+0x8>)
 8006182:	4770      	bx	lr
 8006184:	20000008 	.word	0x20000008

08006188 <USBD_CDC_GetHSCfgDesc>:
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 8006188:	2343      	movs	r3, #67	; 0x43
 800618a:	8003      	strh	r3, [r0, #0]

  return USBD_CDC_CfgHSDesc;
}
 800618c:	4800      	ldr	r0, [pc, #0]	; (8006190 <USBD_CDC_GetHSCfgDesc+0x8>)
 800618e:	4770      	bx	lr
 8006190:	2000004c 	.word	0x2000004c

08006194 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 8006194:	2343      	movs	r3, #67	; 0x43
 8006196:	8003      	strh	r3, [r0, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
}
 8006198:	4800      	ldr	r0, [pc, #0]	; (800619c <USBD_CDC_GetOtherSpeedCfgDesc+0x8>)
 800619a:	4770      	bx	lr
 800619c:	20000090 	.word	0x20000090

080061a0 <USBD_CDC_GetDeviceQualifierDescriptor>:
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 80061a0:	230a      	movs	r3, #10
 80061a2:	8003      	strh	r3, [r0, #0]

  return USBD_CDC_DeviceQualifierDesc;
}
 80061a4:	4800      	ldr	r0, [pc, #0]	; (80061a8 <USBD_CDC_GetDeviceQualifierDescriptor+0x8>)
 80061a6:	4770      	bx	lr
 80061a8:	200000d4 	.word	0x200000d4

080061ac <USBD_CDC_DataOut>:
{
 80061ac:	b538      	push	{r3, r4, r5, lr}
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80061ae:	f8d0 52bc 	ldr.w	r5, [r0, #700]	; 0x2bc
  if (pdev->pClassData == NULL)
 80061b2:	b175      	cbz	r5, 80061d2 <USBD_CDC_DataOut+0x26>
 80061b4:	4604      	mov	r4, r0
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 80061b6:	f001 fec8 	bl	8007f4a <USBD_LL_GetRxDataSize>
 80061ba:	f8c5 080c 	str.w	r0, [r5, #2060]	; 0x80c
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 80061be:	f8d4 32c0 	ldr.w	r3, [r4, #704]	; 0x2c0
 80061c2:	68db      	ldr	r3, [r3, #12]
 80061c4:	f605 010c 	addw	r1, r5, #2060	; 0x80c
 80061c8:	f8d5 0804 	ldr.w	r0, [r5, #2052]	; 0x804
 80061cc:	4798      	blx	r3
  return (uint8_t)USBD_OK;
 80061ce:	2000      	movs	r0, #0
}
 80061d0:	bd38      	pop	{r3, r4, r5, pc}
    return (uint8_t)USBD_FAIL;
 80061d2:	2003      	movs	r0, #3
 80061d4:	e7fc      	b.n	80061d0 <USBD_CDC_DataOut+0x24>

080061d6 <USBD_CDC_DataIn>:
{
 80061d6:	b538      	push	{r3, r4, r5, lr}
  PCD_HandleTypeDef *hpcd = pdev->pData;
 80061d8:	f8d0 42c4 	ldr.w	r4, [r0, #708]	; 0x2c4
  if (pdev->pClassData == NULL)
 80061dc:	f8d0 32bc 	ldr.w	r3, [r0, #700]	; 0x2bc
 80061e0:	b34b      	cbz	r3, 8006236 <USBD_CDC_DataIn+0x60>
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 80061e2:	eb01 0281 	add.w	r2, r1, r1, lsl #2
 80061e6:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 80061ea:	6992      	ldr	r2, [r2, #24]
 80061ec:	b14a      	cbz	r2, 8006202 <USBD_CDC_DataIn+0x2c>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 80061ee:	ebc1 05c1 	rsb	r5, r1, r1, lsl #3
 80061f2:	eb04 0485 	add.w	r4, r4, r5, lsl #2
 80061f6:	6c65      	ldr	r5, [r4, #68]	; 0x44
 80061f8:	fbb2 f4f5 	udiv	r4, r2, r5
 80061fc:	fb05 2214 	mls	r2, r5, r4, r2
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 8006200:	b16a      	cbz	r2, 800621e <USBD_CDC_DataIn+0x48>
    hcdc->TxState = 0U;
 8006202:	2400      	movs	r4, #0
 8006204:	f8c3 4814 	str.w	r4, [r3, #2068]	; 0x814
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8006208:	f8d0 22c0 	ldr.w	r2, [r0, #704]	; 0x2c0
 800620c:	6915      	ldr	r5, [r2, #16]
 800620e:	460a      	mov	r2, r1
 8006210:	f503 6101 	add.w	r1, r3, #2064	; 0x810
 8006214:	f8d3 0808 	ldr.w	r0, [r3, #2056]	; 0x808
 8006218:	47a8      	blx	r5
  return (uint8_t)USBD_OK;
 800621a:	4620      	mov	r0, r4
}
 800621c:	bd38      	pop	{r3, r4, r5, pc}
    pdev->ep_in[epnum].total_length = 0U;
 800621e:	eb01 0381 	add.w	r3, r1, r1, lsl #2
 8006222:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 8006226:	2400      	movs	r4, #0
 8006228:	619c      	str	r4, [r3, #24]
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800622a:	4623      	mov	r3, r4
 800622c:	4622      	mov	r2, r4
 800622e:	f001 fecf 	bl	8007fd0 <USBD_LL_Transmit>
  return (uint8_t)USBD_OK;
 8006232:	4620      	mov	r0, r4
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8006234:	e7f2      	b.n	800621c <USBD_CDC_DataIn+0x46>
    return (uint8_t)USBD_FAIL;
 8006236:	2003      	movs	r0, #3
 8006238:	e7f0      	b.n	800621c <USBD_CDC_DataIn+0x46>

0800623a <USBD_CDC_Setup>:
{
 800623a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800623c:	b083      	sub	sp, #12
 800623e:	4606      	mov	r6, r0
 8006240:	460c      	mov	r4, r1
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8006242:	f8d0 72bc 	ldr.w	r7, [r0, #700]	; 0x2bc
  uint8_t ifalt = 0U;
 8006246:	2300      	movs	r3, #0
 8006248:	f88d 3007 	strb.w	r3, [sp, #7]
  uint16_t status_info = 0U;
 800624c:	f8ad 3004 	strh.w	r3, [sp, #4]
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006250:	780b      	ldrb	r3, [r1, #0]
 8006252:	f013 0560 	ands.w	r5, r3, #96	; 0x60
 8006256:	d027      	beq.n	80062a8 <USBD_CDC_Setup+0x6e>
 8006258:	2d20      	cmp	r5, #32
 800625a:	d158      	bne.n	800630e <USBD_CDC_Setup+0xd4>
    if (req->wLength != 0U)
 800625c:	88ca      	ldrh	r2, [r1, #6]
 800625e:	b1da      	cbz	r2, 8006298 <USBD_CDC_Setup+0x5e>
      if ((req->bmRequest & 0x80U) != 0U)
 8006260:	f013 0f80 	tst.w	r3, #128	; 0x80
 8006264:	d00c      	beq.n	8006280 <USBD_CDC_Setup+0x46>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8006266:	f8d0 32c0 	ldr.w	r3, [r0, #704]	; 0x2c0
 800626a:	689b      	ldr	r3, [r3, #8]
 800626c:	4639      	mov	r1, r7
 800626e:	7860      	ldrb	r0, [r4, #1]
 8006270:	4798      	blx	r3
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, req->wLength);
 8006272:	88e2      	ldrh	r2, [r4, #6]
 8006274:	4639      	mov	r1, r7
 8006276:	4630      	mov	r0, r6
 8006278:	f000 fdfc 	bl	8006e74 <USBD_CtlSendData>
  USBD_StatusTypeDef ret = USBD_OK;
 800627c:	2500      	movs	r5, #0
 800627e:	e049      	b.n	8006314 <USBD_CDC_Setup+0xda>
        hcdc->CmdOpCode = req->bRequest;
 8006280:	784b      	ldrb	r3, [r1, #1]
 8006282:	f887 3800 	strb.w	r3, [r7, #2048]	; 0x800
        hcdc->CmdLength = (uint8_t)req->wLength;
 8006286:	798b      	ldrb	r3, [r1, #6]
 8006288:	f887 3801 	strb.w	r3, [r7, #2049]	; 0x801
        (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 800628c:	88ca      	ldrh	r2, [r1, #6]
 800628e:	4639      	mov	r1, r7
 8006290:	f000 fe05 	bl	8006e9e <USBD_CtlPrepareRx>
  USBD_StatusTypeDef ret = USBD_OK;
 8006294:	2500      	movs	r5, #0
 8006296:	e03d      	b.n	8006314 <USBD_CDC_Setup+0xda>
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8006298:	f8d0 32c0 	ldr.w	r3, [r0, #704]	; 0x2c0
 800629c:	689b      	ldr	r3, [r3, #8]
 800629e:	2200      	movs	r2, #0
 80062a0:	7848      	ldrb	r0, [r1, #1]
 80062a2:	4798      	blx	r3
  USBD_StatusTypeDef ret = USBD_OK;
 80062a4:	2500      	movs	r5, #0
 80062a6:	e035      	b.n	8006314 <USBD_CDC_Setup+0xda>
    switch (req->bRequest)
 80062a8:	784f      	ldrb	r7, [r1, #1]
 80062aa:	2f0b      	cmp	r7, #11
 80062ac:	d82b      	bhi.n	8006306 <USBD_CDC_Setup+0xcc>
 80062ae:	e8df f007 	tbb	[pc, r7]
 80062b2:	3106      	.short	0x3106
 80062b4:	2a2a2a2a 	.word	0x2a2a2a2a
 80062b8:	2a2a2a2a 	.word	0x2a2a2a2a
 80062bc:	2214      	.short	0x2214
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80062be:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 80062c2:	2b03      	cmp	r3, #3
 80062c4:	d003      	beq.n	80062ce <USBD_CDC_Setup+0x94>
        USBD_CtlError(pdev, req);
 80062c6:	f000 fa9e 	bl	8006806 <USBD_CtlError>
        ret = USBD_FAIL;
 80062ca:	2503      	movs	r5, #3
 80062cc:	e022      	b.n	8006314 <USBD_CDC_Setup+0xda>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 80062ce:	2202      	movs	r2, #2
 80062d0:	a901      	add	r1, sp, #4
 80062d2:	f000 fdcf 	bl	8006e74 <USBD_CtlSendData>
  USBD_StatusTypeDef ret = USBD_OK;
 80062d6:	463d      	mov	r5, r7
 80062d8:	e01c      	b.n	8006314 <USBD_CDC_Setup+0xda>
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80062da:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 80062de:	2b03      	cmp	r3, #3
 80062e0:	d003      	beq.n	80062ea <USBD_CDC_Setup+0xb0>
        USBD_CtlError(pdev, req);
 80062e2:	f000 fa90 	bl	8006806 <USBD_CtlError>
        ret = USBD_FAIL;
 80062e6:	2503      	movs	r5, #3
 80062e8:	e014      	b.n	8006314 <USBD_CDC_Setup+0xda>
        (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 80062ea:	2201      	movs	r2, #1
 80062ec:	f10d 0107 	add.w	r1, sp, #7
 80062f0:	f000 fdc0 	bl	8006e74 <USBD_CtlSendData>
 80062f4:	e00e      	b.n	8006314 <USBD_CDC_Setup+0xda>
      if (pdev->dev_state != USBD_STATE_CONFIGURED)
 80062f6:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 80062fa:	2b03      	cmp	r3, #3
 80062fc:	d00a      	beq.n	8006314 <USBD_CDC_Setup+0xda>
        USBD_CtlError(pdev, req);
 80062fe:	f000 fa82 	bl	8006806 <USBD_CtlError>
        ret = USBD_FAIL;
 8006302:	2503      	movs	r5, #3
 8006304:	e006      	b.n	8006314 <USBD_CDC_Setup+0xda>
      USBD_CtlError(pdev, req);
 8006306:	f000 fa7e 	bl	8006806 <USBD_CtlError>
      ret = USBD_FAIL;
 800630a:	2503      	movs	r5, #3
      break;
 800630c:	e002      	b.n	8006314 <USBD_CDC_Setup+0xda>
    USBD_CtlError(pdev, req);
 800630e:	f000 fa7a 	bl	8006806 <USBD_CtlError>
    ret = USBD_FAIL;
 8006312:	2503      	movs	r5, #3
}
 8006314:	4628      	mov	r0, r5
 8006316:	b003      	add	sp, #12
 8006318:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800631a <USBD_CDC_DeInit>:
{
 800631a:	b538      	push	{r3, r4, r5, lr}
 800631c:	4604      	mov	r4, r0
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 800631e:	2181      	movs	r1, #129	; 0x81
 8006320:	f001 fe36 	bl	8007f90 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8006324:	2500      	movs	r5, #0
 8006326:	8725      	strh	r5, [r4, #56]	; 0x38
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8006328:	2101      	movs	r1, #1
 800632a:	4620      	mov	r0, r4
 800632c:	f001 fe30 	bl	8007f90 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8006330:	f8a4 5178 	strh.w	r5, [r4, #376]	; 0x178
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8006334:	2182      	movs	r1, #130	; 0x82
 8006336:	4620      	mov	r0, r4
 8006338:	f001 fe2a 	bl	8007f90 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 800633c:	f8a4 504c 	strh.w	r5, [r4, #76]	; 0x4c
  pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = 0U;
 8006340:	f8a4 504e 	strh.w	r5, [r4, #78]	; 0x4e
  if (pdev->pClassData != NULL)
 8006344:	f8d4 32bc 	ldr.w	r3, [r4, #700]	; 0x2bc
 8006348:	b14b      	cbz	r3, 800635e <USBD_CDC_DeInit+0x44>
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 800634a:	f8d4 32c0 	ldr.w	r3, [r4, #704]	; 0x2c0
 800634e:	685b      	ldr	r3, [r3, #4]
 8006350:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 8006352:	f8d4 02bc 	ldr.w	r0, [r4, #700]	; 0x2bc
 8006356:	f001 ff39 	bl	80081cc <free>
    pdev->pClassData = NULL;
 800635a:	f8c4 52bc 	str.w	r5, [r4, #700]	; 0x2bc
}
 800635e:	2000      	movs	r0, #0
 8006360:	bd38      	pop	{r3, r4, r5, pc}

08006362 <USBD_CDC_Init>:
{
 8006362:	b570      	push	{r4, r5, r6, lr}
 8006364:	4604      	mov	r4, r0
  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8006366:	f640 001c 	movw	r0, #2076	; 0x81c
 800636a:	f001 ff27 	bl	80081bc <malloc>
  if (hcdc == NULL)
 800636e:	b3b8      	cbz	r0, 80063e0 <USBD_CDC_Init+0x7e>
 8006370:	4606      	mov	r6, r0
  pdev->pClassData = (void *)hcdc;
 8006372:	f8c4 02bc 	str.w	r0, [r4, #700]	; 0x2bc
  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006376:	7c23      	ldrb	r3, [r4, #16]
 8006378:	bbbb      	cbnz	r3, 80063ea <USBD_CDC_Init+0x88>
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800637a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800637e:	2202      	movs	r2, #2
 8006380:	2181      	movs	r1, #129	; 0x81
 8006382:	4620      	mov	r0, r4
 8006384:	f001 fdf9 	bl	8007f7a <USBD_LL_OpenEP>
     pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8006388:	2501      	movs	r5, #1
 800638a:	8725      	strh	r5, [r4, #56]	; 0x38
     (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800638c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8006390:	2202      	movs	r2, #2
 8006392:	4629      	mov	r1, r5
 8006394:	4620      	mov	r0, r4
 8006396:	f001 fdf0 	bl	8007f7a <USBD_LL_OpenEP>
      pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800639a:	f8a4 5178 	strh.w	r5, [r4, #376]	; 0x178
      pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800639e:	2310      	movs	r3, #16
 80063a0:	f8a4 304e 	strh.w	r3, [r4, #78]	; 0x4e
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 80063a4:	2308      	movs	r3, #8
 80063a6:	2203      	movs	r2, #3
 80063a8:	2182      	movs	r1, #130	; 0x82
 80063aa:	4620      	mov	r0, r4
 80063ac:	f001 fde5 	bl	8007f7a <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 80063b0:	2301      	movs	r3, #1
 80063b2:	f8a4 304c 	strh.w	r3, [r4, #76]	; 0x4c
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 80063b6:	f8d4 32c0 	ldr.w	r3, [r4, #704]	; 0x2c0
 80063ba:	681b      	ldr	r3, [r3, #0]
 80063bc:	4798      	blx	r3
  hcdc->TxState = 0U;
 80063be:	2300      	movs	r3, #0
 80063c0:	f8c6 3814 	str.w	r3, [r6, #2068]	; 0x814
  hcdc->RxState = 0U;
 80063c4:	f8c6 3818 	str.w	r3, [r6, #2072]	; 0x818
  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80063c8:	7c25      	ldrb	r5, [r4, #16]
 80063ca:	bb15      	cbnz	r5, 8006412 <USBD_CDC_Init+0xb0>
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80063cc:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80063d0:	f8d6 2804 	ldr.w	r2, [r6, #2052]	; 0x804
 80063d4:	2101      	movs	r1, #1
 80063d6:	4620      	mov	r0, r4
 80063d8:	f001 fe02 	bl	8007fe0 <USBD_LL_PrepareReceive>
}
 80063dc:	4628      	mov	r0, r5
 80063de:	bd70      	pop	{r4, r5, r6, pc}
    pdev->pClassData = NULL;
 80063e0:	2300      	movs	r3, #0
 80063e2:	f8c4 32bc 	str.w	r3, [r4, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 80063e6:	2502      	movs	r5, #2
 80063e8:	e7f8      	b.n	80063dc <USBD_CDC_Init+0x7a>
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 80063ea:	2340      	movs	r3, #64	; 0x40
 80063ec:	2202      	movs	r2, #2
 80063ee:	2181      	movs	r1, #129	; 0x81
 80063f0:	4620      	mov	r0, r4
 80063f2:	f001 fdc2 	bl	8007f7a <USBD_LL_OpenEP>
     pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 80063f6:	2501      	movs	r5, #1
 80063f8:	8725      	strh	r5, [r4, #56]	; 0x38
     (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 80063fa:	2340      	movs	r3, #64	; 0x40
 80063fc:	2202      	movs	r2, #2
 80063fe:	4629      	mov	r1, r5
 8006400:	4620      	mov	r0, r4
 8006402:	f001 fdba 	bl	8007f7a <USBD_LL_OpenEP>
      pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8006406:	f8a4 5178 	strh.w	r5, [r4, #376]	; 0x178
      pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 800640a:	2310      	movs	r3, #16
 800640c:	f8a4 304e 	strh.w	r3, [r4, #78]	; 0x4e
 8006410:	e7c8      	b.n	80063a4 <USBD_CDC_Init+0x42>
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8006412:	2340      	movs	r3, #64	; 0x40
 8006414:	f8d6 2804 	ldr.w	r2, [r6, #2052]	; 0x804
 8006418:	2101      	movs	r1, #1
 800641a:	4620      	mov	r0, r4
 800641c:	f001 fde0 	bl	8007fe0 <USBD_LL_PrepareReceive>
  return (uint8_t)USBD_OK;
 8006420:	2500      	movs	r5, #0
 8006422:	e7db      	b.n	80063dc <USBD_CDC_Init+0x7a>

08006424 <USBD_CDC_RegisterInterface>:
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
  if (fops == NULL)
 8006424:	b119      	cbz	r1, 800642e <USBD_CDC_RegisterInterface+0xa>
  {
    return (uint8_t)USBD_FAIL;
  }

  pdev->pUserData = fops;
 8006426:	f8c0 12c0 	str.w	r1, [r0, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 800642a:	2000      	movs	r0, #0
 800642c:	4770      	bx	lr
    return (uint8_t)USBD_FAIL;
 800642e:	2003      	movs	r0, #3
}
 8006430:	4770      	bx	lr

08006432 <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8006432:	f8d0 32bc 	ldr.w	r3, [r0, #700]	; 0x2bc

  hcdc->TxBuffer = pbuff;
 8006436:	f8c3 1808 	str.w	r1, [r3, #2056]	; 0x808
  hcdc->TxLength = length;
 800643a:	f8c3 2810 	str.w	r2, [r3, #2064]	; 0x810

  return (uint8_t)USBD_OK;
}
 800643e:	2000      	movs	r0, #0
 8006440:	4770      	bx	lr

08006442 <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8006442:	f8d0 32bc 	ldr.w	r3, [r0, #700]	; 0x2bc

  hcdc->RxBuffer = pbuff;
 8006446:	f8c3 1804 	str.w	r1, [r3, #2052]	; 0x804

  return (uint8_t)USBD_OK;
}
 800644a:	2000      	movs	r0, #0
 800644c:	4770      	bx	lr

0800644e <USBD_CDC_TransmitPacket>:
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800644e:	f8d0 22bc 	ldr.w	r2, [r0, #700]	; 0x2bc
  USBD_StatusTypeDef ret = USBD_BUSY;

  if (pdev->pClassData == NULL)
 8006452:	b1a2      	cbz	r2, 800647e <USBD_CDC_TransmitPacket+0x30>
{
 8006454:	b508      	push	{r3, lr}
  {
    return (uint8_t)USBD_FAIL;
  }

  if (hcdc->TxState == 0U)
 8006456:	f8d2 3814 	ldr.w	r3, [r2, #2068]	; 0x814
 800645a:	b10b      	cbz	r3, 8006460 <USBD_CDC_TransmitPacket+0x12>
  USBD_StatusTypeDef ret = USBD_BUSY;
 800645c:	2001      	movs	r0, #1

    ret = USBD_OK;
  }

  return (uint8_t)ret;
}
 800645e:	bd08      	pop	{r3, pc}
    hcdc->TxState = 1U;
 8006460:	2301      	movs	r3, #1
 8006462:	f8c2 3814 	str.w	r3, [r2, #2068]	; 0x814
    pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 8006466:	f8d2 3810 	ldr.w	r3, [r2, #2064]	; 0x810
 800646a:	62c3      	str	r3, [r0, #44]	; 0x2c
    (void)USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer, hcdc->TxLength);
 800646c:	f8d2 3810 	ldr.w	r3, [r2, #2064]	; 0x810
 8006470:	f8d2 2808 	ldr.w	r2, [r2, #2056]	; 0x808
 8006474:	2181      	movs	r1, #129	; 0x81
 8006476:	f001 fdab 	bl	8007fd0 <USBD_LL_Transmit>
    ret = USBD_OK;
 800647a:	2000      	movs	r0, #0
 800647c:	e7ef      	b.n	800645e <USBD_CDC_TransmitPacket+0x10>
    return (uint8_t)USBD_FAIL;
 800647e:	2003      	movs	r0, #3
}
 8006480:	4770      	bx	lr

08006482 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8006482:	b510      	push	{r4, lr}
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8006484:	f8d0 22bc 	ldr.w	r2, [r0, #700]	; 0x2bc

  if (pdev->pClassData == NULL)
 8006488:	b192      	cbz	r2, 80064b0 <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800648a:	7c04      	ldrb	r4, [r0, #16]
 800648c:	b944      	cbnz	r4, 80064a0 <USBD_CDC_ReceivePacket+0x1e>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800648e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8006492:	f8d2 2804 	ldr.w	r2, [r2, #2052]	; 0x804
 8006496:	2101      	movs	r1, #1
 8006498:	f001 fda2 	bl	8007fe0 <USBD_LL_PrepareReceive>
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
}
 800649c:	4620      	mov	r0, r4
 800649e:	bd10      	pop	{r4, pc}
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80064a0:	2340      	movs	r3, #64	; 0x40
 80064a2:	f8d2 2804 	ldr.w	r2, [r2, #2052]	; 0x804
 80064a6:	2101      	movs	r1, #1
 80064a8:	f001 fd9a 	bl	8007fe0 <USBD_LL_PrepareReceive>
  return (uint8_t)USBD_OK;
 80064ac:	2400      	movs	r4, #0
 80064ae:	e7f5      	b.n	800649c <USBD_CDC_ReceivePacket+0x1a>
    return (uint8_t)USBD_FAIL;
 80064b0:	2403      	movs	r4, #3
 80064b2:	e7f3      	b.n	800649c <USBD_CDC_ReceivePacket+0x1a>

080064b4 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 80064b4:	b508      	push	{r3, lr}
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 80064b6:	b1b8      	cbz	r0, 80064e8 <USBD_Init+0x34>
 80064b8:	4603      	mov	r3, r0
#endif
    return USBD_FAIL;
  }

  /* Unlink previous class */
  if (pdev->pClass != NULL)
 80064ba:	f8d0 02b8 	ldr.w	r0, [r0, #696]	; 0x2b8
 80064be:	b110      	cbz	r0, 80064c6 <USBD_Init+0x12>
  {
    pdev->pClass = NULL;
 80064c0:	2000      	movs	r0, #0
 80064c2:	f8c3 02b8 	str.w	r0, [r3, #696]	; 0x2b8
  }

  if (pdev->pConfDesc != NULL)
 80064c6:	f8d3 02cc 	ldr.w	r0, [r3, #716]	; 0x2cc
 80064ca:	b110      	cbz	r0, 80064d2 <USBD_Init+0x1e>
  {
    pdev->pConfDesc = NULL;
 80064cc:	2000      	movs	r0, #0
 80064ce:	f8c3 02cc 	str.w	r0, [r3, #716]	; 0x2cc
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 80064d2:	b109      	cbz	r1, 80064d8 <USBD_Init+0x24>
  {
    pdev->pDesc = pdesc;
 80064d4:	f8c3 12b4 	str.w	r1, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80064d8:	2101      	movs	r1, #1
 80064da:	f883 129c 	strb.w	r1, [r3, #668]	; 0x29c
  pdev->id = id;
 80064de:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 80064e0:	4618      	mov	r0, r3
 80064e2:	f001 fce1 	bl	8007ea8 <USBD_LL_Init>

  return ret;
}
 80064e6:	bd08      	pop	{r3, pc}
    USBD_ErrLog("Invalid Device handle");
 80064e8:	4805      	ldr	r0, [pc, #20]	; (8006500 <USBD_Init+0x4c>)
 80064ea:	f001 ff37 	bl	800835c <iprintf>
 80064ee:	4805      	ldr	r0, [pc, #20]	; (8006504 <USBD_Init+0x50>)
 80064f0:	f001 ff34 	bl	800835c <iprintf>
 80064f4:	200a      	movs	r0, #10
 80064f6:	f001 ff49 	bl	800838c <putchar>
    return USBD_FAIL;
 80064fa:	2003      	movs	r0, #3
 80064fc:	e7f3      	b.n	80064e6 <USBD_Init+0x32>
 80064fe:	bf00      	nop
 8006500:	08009220 	.word	0x08009220
 8006504:	08009228 	.word	0x08009228

08006508 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8006508:	b510      	push	{r4, lr}
 800650a:	b082      	sub	sp, #8
  uint16_t len = 0U;
 800650c:	2300      	movs	r3, #0
 800650e:	f8ad 3006 	strh.w	r3, [sp, #6]

  if (pclass == NULL)
 8006512:	b159      	cbz	r1, 800652c <USBD_RegisterClass+0x24>
 8006514:	4604      	mov	r4, r0
#endif
    return USBD_FAIL;
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 8006516:	f8c0 12b8 	str.w	r1, [r0, #696]	; 0x2b8

  /* Get Device Configuration Descriptor */
#ifdef USE_USB_FS
  pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
#else /* USE_USB_HS */
  pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
 800651a:	6a8b      	ldr	r3, [r1, #40]	; 0x28
 800651c:	f10d 0006 	add.w	r0, sp, #6
 8006520:	4798      	blx	r3
 8006522:	f8c4 02cc 	str.w	r0, [r4, #716]	; 0x2cc
#endif /* USE_USB_FS */


  return USBD_OK;
 8006526:	2000      	movs	r0, #0
}
 8006528:	b002      	add	sp, #8
 800652a:	bd10      	pop	{r4, pc}
    USBD_ErrLog("Invalid Class handle");
 800652c:	4805      	ldr	r0, [pc, #20]	; (8006544 <USBD_RegisterClass+0x3c>)
 800652e:	f001 ff15 	bl	800835c <iprintf>
 8006532:	4805      	ldr	r0, [pc, #20]	; (8006548 <USBD_RegisterClass+0x40>)
 8006534:	f001 ff12 	bl	800835c <iprintf>
 8006538:	200a      	movs	r0, #10
 800653a:	f001 ff27 	bl	800838c <putchar>
    return USBD_FAIL;
 800653e:	2003      	movs	r0, #3
 8006540:	e7f2      	b.n	8006528 <USBD_RegisterClass+0x20>
 8006542:	bf00      	nop
 8006544:	08009220 	.word	0x08009220
 8006548:	08009240 	.word	0x08009240

0800654c <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800654c:	b508      	push	{r3, lr}
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800654e:	f001 fd0c 	bl	8007f6a <USBD_LL_Start>
}
 8006552:	bd08      	pop	{r3, pc}

08006554 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006554:	b508      	push	{r3, lr}
  USBD_StatusTypeDef ret = USBD_FAIL;

  if (pdev->pClass != NULL)
 8006556:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
 800655a:	b113      	cbz	r3, 8006562 <USBD_SetClassConfig+0xe>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 800655c:	681b      	ldr	r3, [r3, #0]
 800655e:	4798      	blx	r3
  }

  return ret;
}
 8006560:	bd08      	pop	{r3, pc}
  USBD_StatusTypeDef ret = USBD_FAIL;
 8006562:	2003      	movs	r0, #3
 8006564:	e7fc      	b.n	8006560 <USBD_SetClassConfig+0xc>

08006566 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006566:	b508      	push	{r3, lr}
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 8006568:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
 800656c:	b10b      	cbz	r3, 8006572 <USBD_ClrClassConfig+0xc>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 800656e:	685b      	ldr	r3, [r3, #4]
 8006570:	4798      	blx	r3
  }

  return USBD_OK;
}
 8006572:	2000      	movs	r0, #0
 8006574:	bd08      	pop	{r3, pc}

08006576 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8006576:	b538      	push	{r3, r4, r5, lr}
 8006578:	4604      	mov	r4, r0
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800657a:	f200 25aa 	addw	r5, r0, #682	; 0x2aa
 800657e:	4628      	mov	r0, r5
 8006580:	f000 f92d 	bl	80067de <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8006584:	2301      	movs	r3, #1
 8006586:	f8c4 3294 	str.w	r3, [r4, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800658a:	f8b4 32b0 	ldrh.w	r3, [r4, #688]	; 0x2b0
 800658e:	f8c4 3298 	str.w	r3, [r4, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8006592:	f894 12aa 	ldrb.w	r1, [r4, #682]	; 0x2aa
 8006596:	f001 031f 	and.w	r3, r1, #31
 800659a:	2b01      	cmp	r3, #1
 800659c:	d00d      	beq.n	80065ba <USBD_LL_SetupStage+0x44>
 800659e:	2b02      	cmp	r3, #2
 80065a0:	d010      	beq.n	80065c4 <USBD_LL_SetupStage+0x4e>
 80065a2:	b12b      	cbz	r3, 80065b0 <USBD_LL_SetupStage+0x3a>
    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
      break;

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 80065a4:	f001 0180 	and.w	r1, r1, #128	; 0x80
 80065a8:	4620      	mov	r0, r4
 80065aa:	f001 fcf9 	bl	8007fa0 <USBD_LL_StallEP>
      break;
 80065ae:	e003      	b.n	80065b8 <USBD_LL_SetupStage+0x42>
      ret = USBD_StdDevReq(pdev, &pdev->request);
 80065b0:	4629      	mov	r1, r5
 80065b2:	4620      	mov	r0, r4
 80065b4:	f000 face 	bl	8006b54 <USBD_StdDevReq>
  }

  return ret;
}
 80065b8:	bd38      	pop	{r3, r4, r5, pc}
      ret = USBD_StdItfReq(pdev, &pdev->request);
 80065ba:	4629      	mov	r1, r5
 80065bc:	4620      	mov	r0, r4
 80065be:	f000 fb01 	bl	8006bc4 <USBD_StdItfReq>
      break;
 80065c2:	e7f9      	b.n	80065b8 <USBD_LL_SetupStage+0x42>
      ret = USBD_StdEPReq(pdev, &pdev->request);
 80065c4:	4629      	mov	r1, r5
 80065c6:	4620      	mov	r0, r4
 80065c8:	f000 fb30 	bl	8006c2c <USBD_StdEPReq>
      break;
 80065cc:	e7f4      	b.n	80065b8 <USBD_LL_SetupStage+0x42>

080065ce <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 80065ce:	b538      	push	{r3, r4, r5, lr}
 80065d0:	4604      	mov	r4, r0
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 80065d2:	460d      	mov	r5, r1
 80065d4:	bb31      	cbnz	r1, 8006624 <USBD_LL_DataOutStage+0x56>
 80065d6:	4613      	mov	r3, r2
  {
    pep = &pdev->ep_out[0];

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 80065d8:	f8d0 2294 	ldr.w	r2, [r0, #660]	; 0x294
 80065dc:	2a03      	cmp	r2, #3
 80065de:	d001      	beq.n	80065e4 <USBD_LL_DataOutStage+0x16>
  {
    /* should never be in this condition */
    return USBD_FAIL;
  }

  return USBD_OK;
 80065e0:	4608      	mov	r0, r1
}
 80065e2:	bd38      	pop	{r3, r4, r5, pc}
      if (pep->rem_length > pep->maxpacket)
 80065e4:	f8d0 115c 	ldr.w	r1, [r0, #348]	; 0x15c
 80065e8:	f8d0 2160 	ldr.w	r2, [r0, #352]	; 0x160
 80065ec:	4291      	cmp	r1, r2
 80065ee:	d80c      	bhi.n	800660a <USBD_LL_DataOutStage+0x3c>
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 80065f0:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
 80065f4:	691b      	ldr	r3, [r3, #16]
 80065f6:	b11b      	cbz	r3, 8006600 <USBD_LL_DataOutStage+0x32>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 80065f8:	f890 229c 	ldrb.w	r2, [r0, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 80065fc:	2a03      	cmp	r2, #3
 80065fe:	d00f      	beq.n	8006620 <USBD_LL_DataOutStage+0x52>
        (void)USBD_CtlSendStatus(pdev);
 8006600:	4620      	mov	r0, r4
 8006602:	f000 fc63 	bl	8006ecc <USBD_CtlSendStatus>
  return USBD_OK;
 8006606:	4628      	mov	r0, r5
 8006608:	e7eb      	b.n	80065e2 <USBD_LL_DataOutStage+0x14>
        pep->rem_length -= pep->maxpacket;
 800660a:	1a89      	subs	r1, r1, r2
 800660c:	f8c0 115c 	str.w	r1, [r0, #348]	; 0x15c
        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8006610:	428a      	cmp	r2, r1
 8006612:	bf28      	it	cs
 8006614:	460a      	movcs	r2, r1
 8006616:	4619      	mov	r1, r3
 8006618:	f000 fc50 	bl	8006ebc <USBD_CtlContinueRx>
  return USBD_OK;
 800661c:	4628      	mov	r0, r5
 800661e:	e7e0      	b.n	80065e2 <USBD_LL_DataOutStage+0x14>
          pdev->pClass->EP0_RxReady(pdev);
 8006620:	4798      	blx	r3
 8006622:	e7ed      	b.n	8006600 <USBD_LL_DataOutStage+0x32>
  else if ((pdev->pClass->DataOut != NULL) &&
 8006624:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
 8006628:	699b      	ldr	r3, [r3, #24]
 800662a:	b12b      	cbz	r3, 8006638 <USBD_LL_DataOutStage+0x6a>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800662c:	f890 229c 	ldrb.w	r2, [r0, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 8006630:	2a03      	cmp	r2, #3
 8006632:	d103      	bne.n	800663c <USBD_LL_DataOutStage+0x6e>
    ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 8006634:	4798      	blx	r3
    if (ret != USBD_OK)
 8006636:	e7d4      	b.n	80065e2 <USBD_LL_DataOutStage+0x14>
    return USBD_FAIL;
 8006638:	2003      	movs	r0, #3
 800663a:	e7d2      	b.n	80065e2 <USBD_LL_DataOutStage+0x14>
 800663c:	2003      	movs	r0, #3
 800663e:	e7d0      	b.n	80065e2 <USBD_LL_DataOutStage+0x14>

08006640 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8006640:	b538      	push	{r3, r4, r5, lr}
 8006642:	4604      	mov	r4, r0
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8006644:	460d      	mov	r5, r1
 8006646:	2900      	cmp	r1, #0
 8006648:	d148      	bne.n	80066dc <USBD_LL_DataInStage+0x9c>
 800664a:	4613      	mov	r3, r2
  {
    pep = &pdev->ep_in[0];

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800664c:	f8d0 2294 	ldr.w	r2, [r0, #660]	; 0x294
 8006650:	2a02      	cmp	r2, #2
 8006652:	d005      	beq.n	8006660 <USBD_LL_DataInStage+0x20>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 8006654:	f894 32a0 	ldrb.w	r3, [r4, #672]	; 0x2a0
 8006658:	2b01      	cmp	r3, #1
 800665a:	d03a      	beq.n	80066d2 <USBD_LL_DataInStage+0x92>
  {
    /* should never be in this condition */
    return USBD_FAIL;
  }

  return USBD_OK;
 800665c:	4628      	mov	r0, r5
}
 800665e:	bd38      	pop	{r3, r4, r5, pc}
      if (pep->rem_length > pep->maxpacket)
 8006660:	69c2      	ldr	r2, [r0, #28]
 8006662:	6a01      	ldr	r1, [r0, #32]
 8006664:	428a      	cmp	r2, r1
 8006666:	d811      	bhi.n	800668c <USBD_LL_DataInStage+0x4c>
        if ((pep->maxpacket == pep->rem_length) &&
 8006668:	428a      	cmp	r2, r1
 800666a:	d01b      	beq.n	80066a4 <USBD_LL_DataInStage+0x64>
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 800666c:	f8d4 32b8 	ldr.w	r3, [r4, #696]	; 0x2b8
 8006670:	68db      	ldr	r3, [r3, #12]
 8006672:	b11b      	cbz	r3, 800667c <USBD_LL_DataInStage+0x3c>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 8006674:	f894 229c 	ldrb.w	r2, [r4, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8006678:	2a03      	cmp	r2, #3
 800667a:	d027      	beq.n	80066cc <USBD_LL_DataInStage+0x8c>
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800667c:	2180      	movs	r1, #128	; 0x80
 800667e:	4620      	mov	r0, r4
 8006680:	f001 fc8e 	bl	8007fa0 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8006684:	4620      	mov	r0, r4
 8006686:	f000 fc2c 	bl	8006ee2 <USBD_CtlReceiveStatus>
 800668a:	e7e3      	b.n	8006654 <USBD_LL_DataInStage+0x14>
        pep->rem_length -= pep->maxpacket;
 800668c:	1a52      	subs	r2, r2, r1
 800668e:	61c2      	str	r2, [r0, #28]
        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8006690:	4619      	mov	r1, r3
 8006692:	f000 fbfc 	bl	8006e8e <USBD_CtlContinueSendData>
       (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8006696:	2300      	movs	r3, #0
 8006698:	461a      	mov	r2, r3
 800669a:	4619      	mov	r1, r3
 800669c:	4620      	mov	r0, r4
 800669e:	f001 fc9f 	bl	8007fe0 <USBD_LL_PrepareReceive>
 80066a2:	e7d7      	b.n	8006654 <USBD_LL_DataInStage+0x14>
            (pep->total_length >= pep->maxpacket) &&
 80066a4:	6983      	ldr	r3, [r0, #24]
        if ((pep->maxpacket == pep->rem_length) &&
 80066a6:	4299      	cmp	r1, r3
 80066a8:	d8e0      	bhi.n	800666c <USBD_LL_DataInStage+0x2c>
            (pep->total_length < pdev->ep0_data_len))
 80066aa:	f8d0 2298 	ldr.w	r2, [r0, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 80066ae:	4293      	cmp	r3, r2
 80066b0:	d2dc      	bcs.n	800666c <USBD_LL_DataInStage+0x2c>
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 80066b2:	2200      	movs	r2, #0
 80066b4:	4611      	mov	r1, r2
 80066b6:	f000 fbea 	bl	8006e8e <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 80066ba:	2100      	movs	r1, #0
 80066bc:	f8c4 1298 	str.w	r1, [r4, #664]	; 0x298
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80066c0:	460b      	mov	r3, r1
 80066c2:	460a      	mov	r2, r1
 80066c4:	4620      	mov	r0, r4
 80066c6:	f001 fc8b 	bl	8007fe0 <USBD_LL_PrepareReceive>
 80066ca:	e7c3      	b.n	8006654 <USBD_LL_DataInStage+0x14>
            pdev->pClass->EP0_TxSent(pdev);
 80066cc:	4620      	mov	r0, r4
 80066ce:	4798      	blx	r3
 80066d0:	e7d4      	b.n	800667c <USBD_LL_DataInStage+0x3c>
      pdev->dev_test_mode = 0U;
 80066d2:	2300      	movs	r3, #0
 80066d4:	f884 32a0 	strb.w	r3, [r4, #672]	; 0x2a0
  return USBD_OK;
 80066d8:	4628      	mov	r0, r5
 80066da:	e7c0      	b.n	800665e <USBD_LL_DataInStage+0x1e>
  else if ((pdev->pClass->DataIn != NULL) &&
 80066dc:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
 80066e0:	695b      	ldr	r3, [r3, #20]
 80066e2:	b12b      	cbz	r3, 80066f0 <USBD_LL_DataInStage+0xb0>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 80066e4:	f890 229c 	ldrb.w	r2, [r0, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 80066e8:	2a03      	cmp	r2, #3
 80066ea:	d103      	bne.n	80066f4 <USBD_LL_DataInStage+0xb4>
    ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 80066ec:	4798      	blx	r3
    if (ret != USBD_OK)
 80066ee:	e7b6      	b.n	800665e <USBD_LL_DataInStage+0x1e>
    return USBD_FAIL;
 80066f0:	2003      	movs	r0, #3
 80066f2:	e7b4      	b.n	800665e <USBD_LL_DataInStage+0x1e>
 80066f4:	2003      	movs	r0, #3
 80066f6:	e7b2      	b.n	800665e <USBD_LL_DataInStage+0x1e>

080066f8 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 80066f8:	b570      	push	{r4, r5, r6, lr}
 80066fa:	4604      	mov	r4, r0
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80066fc:	2301      	movs	r3, #1
 80066fe:	f880 329c 	strb.w	r3, [r0, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8006702:	2300      	movs	r3, #0
 8006704:	f8c0 3294 	str.w	r3, [r0, #660]	; 0x294
  pdev->dev_config = 0U;
 8006708:	6043      	str	r3, [r0, #4]
  pdev->dev_remote_wakeup = 0U;
 800670a:	f8c0 32a4 	str.w	r3, [r0, #676]	; 0x2a4

  if (pdev->pClassData != NULL)
 800670e:	f8d0 32bc 	ldr.w	r3, [r0, #700]	; 0x2bc
 8006712:	b123      	cbz	r3, 800671e <USBD_LL_Reset+0x26>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8006714:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
 8006718:	685b      	ldr	r3, [r3, #4]
 800671a:	2100      	movs	r1, #0
 800671c:	4798      	blx	r3
  }

    /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800671e:	2340      	movs	r3, #64	; 0x40
 8006720:	2200      	movs	r2, #0
 8006722:	4611      	mov	r1, r2
 8006724:	4620      	mov	r0, r4
 8006726:	f001 fc28 	bl	8007f7a <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800672a:	2601      	movs	r6, #1
 800672c:	f8a4 6164 	strh.w	r6, [r4, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8006730:	2540      	movs	r5, #64	; 0x40
 8006732:	f8c4 5160 	str.w	r5, [r4, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8006736:	462b      	mov	r3, r5
 8006738:	2200      	movs	r2, #0
 800673a:	2180      	movs	r1, #128	; 0x80
 800673c:	4620      	mov	r0, r4
 800673e:	f001 fc1c 	bl	8007f7a <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8006742:	84a6      	strh	r6, [r4, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8006744:	6225      	str	r5, [r4, #32]

  return USBD_OK;
}
 8006746:	2000      	movs	r0, #0
 8006748:	bd70      	pop	{r4, r5, r6, pc}

0800674a <USBD_LL_SetSpeed>:
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
  pdev->dev_speed = speed;
 800674a:	7401      	strb	r1, [r0, #16]

  return USBD_OK;
}
 800674c:	2000      	movs	r0, #0
 800674e:	4770      	bx	lr

08006750 <USBD_LL_Suspend>:
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
  pdev->dev_old_state = pdev->dev_state;
 8006750:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8006754:	f880 329d 	strb.w	r3, [r0, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 8006758:	2304      	movs	r3, #4
 800675a:	f880 329c 	strb.w	r3, [r0, #668]	; 0x29c

  return USBD_OK;
}
 800675e:	2000      	movs	r0, #0
 8006760:	4770      	bx	lr

08006762 <USBD_LL_Resume>:
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8006762:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8006766:	2b04      	cmp	r3, #4
 8006768:	d001      	beq.n	800676e <USBD_LL_Resume+0xc>
  {
    pdev->dev_state = pdev->dev_old_state;
  }

  return USBD_OK;
}
 800676a:	2000      	movs	r0, #0
 800676c:	4770      	bx	lr
    pdev->dev_state = pdev->dev_old_state;
 800676e:	f890 329d 	ldrb.w	r3, [r0, #669]	; 0x29d
 8006772:	f880 329c 	strb.w	r3, [r0, #668]	; 0x29c
 8006776:	e7f8      	b.n	800676a <USBD_LL_Resume+0x8>

08006778 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8006778:	b508      	push	{r3, lr}
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800677a:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 800677e:	2b03      	cmp	r3, #3
 8006780:	d001      	beq.n	8006786 <USBD_LL_SOF+0xe>
      pdev->pClass->SOF(pdev);
    }
  }

  return USBD_OK;
}
 8006782:	2000      	movs	r0, #0
 8006784:	bd08      	pop	{r3, pc}
    if (pdev->pClass->SOF != NULL)
 8006786:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
 800678a:	69db      	ldr	r3, [r3, #28]
 800678c:	2b00      	cmp	r3, #0
 800678e:	d0f8      	beq.n	8006782 <USBD_LL_SOF+0xa>
      pdev->pClass->SOF(pdev);
 8006790:	4798      	blx	r3
 8006792:	e7f6      	b.n	8006782 <USBD_LL_SOF+0xa>

08006794 <USBD_LL_IsoINIncomplete>:
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
}
 8006794:	2000      	movs	r0, #0
 8006796:	4770      	bx	lr

08006798 <USBD_LL_IsoOUTIncomplete>:
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
}
 8006798:	2000      	movs	r0, #0
 800679a:	4770      	bx	lr

0800679c <USBD_LL_DevConnected>:
{
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
}
 800679c:	2000      	movs	r0, #0
 800679e:	4770      	bx	lr

080067a0 <USBD_LL_DevDisconnected>:
*         Handle device disconnection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 80067a0:	b508      	push	{r3, lr}
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80067a2:	2301      	movs	r3, #1
 80067a4:	f880 329c 	strb.w	r3, [r0, #668]	; 0x29c

  if (pdev->pClass != NULL)
 80067a8:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
 80067ac:	b113      	cbz	r3, 80067b4 <USBD_LL_DevDisconnected+0x14>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 80067ae:	685b      	ldr	r3, [r3, #4]
 80067b0:	7901      	ldrb	r1, [r0, #4]
 80067b2:	4798      	blx	r3
  }

  return USBD_OK;
}
 80067b4:	2000      	movs	r0, #0
 80067b6:	bd08      	pop	{r3, pc}

080067b8 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 80067b8:	4603      	mov	r3, r0
  uint8_t  len = 0U;
 80067ba:	2000      	movs	r0, #0
  uint8_t *pbuff = buf;

  while (*pbuff != (uint8_t)'\0')
 80067bc:	781a      	ldrb	r2, [r3, #0]
 80067be:	b11a      	cbz	r2, 80067c8 <USBD_GetLen+0x10>
  {
    len++;
 80067c0:	3001      	adds	r0, #1
 80067c2:	b2c0      	uxtb	r0, r0
    pbuff++;
 80067c4:	3301      	adds	r3, #1
 80067c6:	e7f9      	b.n	80067bc <USBD_GetLen+0x4>
  }

  return len;
}
 80067c8:	4770      	bx	lr

080067ca <USBD_SetFeature>:
{
 80067ca:	b508      	push	{r3, lr}
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80067cc:	884b      	ldrh	r3, [r1, #2]
 80067ce:	2b01      	cmp	r3, #1
 80067d0:	d000      	beq.n	80067d4 <USBD_SetFeature+0xa>
}
 80067d2:	bd08      	pop	{r3, pc}
    pdev->dev_remote_wakeup = 1U;
 80067d4:	f8c0 32a4 	str.w	r3, [r0, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 80067d8:	f000 fb78 	bl	8006ecc <USBD_CtlSendStatus>
}
 80067dc:	e7f9      	b.n	80067d2 <USBD_SetFeature+0x8>

080067de <USBD_ParseSetupRequest>:
  req->bmRequest = *(uint8_t *)(pbuff);
 80067de:	780b      	ldrb	r3, [r1, #0]
 80067e0:	7003      	strb	r3, [r0, #0]
  req->bRequest = *(uint8_t *)(pbuff);
 80067e2:	784b      	ldrb	r3, [r1, #1]
 80067e4:	7043      	strb	r3, [r0, #1]
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;

  _Byte1 = *(uint8_t *)_pbuff;
 80067e6:	788b      	ldrb	r3, [r1, #2]
  _pbuff++;
  _Byte2 = *(uint8_t *)_pbuff;
 80067e8:	78ca      	ldrb	r2, [r1, #3]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 80067ea:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
  req->wValue = SWAPBYTE(pbuff);
 80067ee:	8043      	strh	r3, [r0, #2]
  _Byte1 = *(uint8_t *)_pbuff;
 80067f0:	790b      	ldrb	r3, [r1, #4]
  _Byte2 = *(uint8_t *)_pbuff;
 80067f2:	794a      	ldrb	r2, [r1, #5]
  _SwapVal = (_Byte2 << 8) | _Byte1;
 80067f4:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
  req->wIndex = SWAPBYTE(pbuff);
 80067f8:	8083      	strh	r3, [r0, #4]
  _Byte1 = *(uint8_t *)_pbuff;
 80067fa:	798b      	ldrb	r3, [r1, #6]
  _Byte2 = *(uint8_t *)_pbuff;
 80067fc:	79ca      	ldrb	r2, [r1, #7]
  _SwapVal = (_Byte2 << 8) | _Byte1;
 80067fe:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
  req->wLength = SWAPBYTE(pbuff);
 8006802:	80c3      	strh	r3, [r0, #6]
}
 8006804:	4770      	bx	lr

08006806 <USBD_CtlError>:
{
 8006806:	b510      	push	{r4, lr}
 8006808:	4604      	mov	r4, r0
  (void)USBD_LL_StallEP(pdev, 0x80U);
 800680a:	2180      	movs	r1, #128	; 0x80
 800680c:	f001 fbc8 	bl	8007fa0 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8006810:	2100      	movs	r1, #0
 8006812:	4620      	mov	r0, r4
 8006814:	f001 fbc4 	bl	8007fa0 <USBD_LL_StallEP>
}
 8006818:	bd10      	pop	{r4, pc}

0800681a <USBD_GetDescriptor>:
{
 800681a:	b530      	push	{r4, r5, lr}
 800681c:	b083      	sub	sp, #12
 800681e:	4604      	mov	r4, r0
 8006820:	460d      	mov	r5, r1
  uint16_t len = 0U;
 8006822:	2300      	movs	r3, #0
 8006824:	f8ad 3006 	strh.w	r3, [sp, #6]
  switch (req->wValue >> 8)
 8006828:	884a      	ldrh	r2, [r1, #2]
 800682a:	0a13      	lsrs	r3, r2, #8
 800682c:	3b01      	subs	r3, #1
 800682e:	2b06      	cmp	r3, #6
 8006830:	f200 80ab 	bhi.w	800698a <USBD_GetDescriptor+0x170>
 8006834:	e8df f003 	tbb	[pc, r3]
 8006838:	a9331f04 	.word	0xa9331f04
 800683c:	8da9      	.short	0x8da9
 800683e:	9a          	.byte	0x9a
 800683f:	00          	.byte	0x00
    pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8006840:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 8006844:	681b      	ldr	r3, [r3, #0]
 8006846:	f10d 0106 	add.w	r1, sp, #6
 800684a:	7c00      	ldrb	r0, [r0, #16]
 800684c:	4798      	blx	r3
    if (req->wLength != 0U)
 800684e:	88ea      	ldrh	r2, [r5, #6]
 8006850:	2a00      	cmp	r2, #0
 8006852:	f000 80a3 	beq.w	800699c <USBD_GetDescriptor+0x182>
      if (len != 0U)
 8006856:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 800685a:	2b00      	cmp	r3, #0
 800685c:	f000 8099 	beq.w	8006992 <USBD_GetDescriptor+0x178>
        len = MIN(len, req->wLength);
 8006860:	429a      	cmp	r2, r3
 8006862:	bf28      	it	cs
 8006864:	461a      	movcs	r2, r3
 8006866:	f8ad 2006 	strh.w	r2, [sp, #6]
        (void)USBD_CtlSendData(pdev, pbuf, len);
 800686a:	4601      	mov	r1, r0
 800686c:	4620      	mov	r0, r4
 800686e:	f000 fb01 	bl	8006e74 <USBD_CtlSendData>
}
 8006872:	b003      	add	sp, #12
 8006874:	bd30      	pop	{r4, r5, pc}
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006876:	7c03      	ldrb	r3, [r0, #16]
 8006878:	b943      	cbnz	r3, 800688c <USBD_GetDescriptor+0x72>
      pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 800687a:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
 800687e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006880:	f10d 0006 	add.w	r0, sp, #6
 8006884:	4798      	blx	r3
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8006886:	2302      	movs	r3, #2
 8006888:	7043      	strb	r3, [r0, #1]
  if (err != 0U)
 800688a:	e7e0      	b.n	800684e <USBD_GetDescriptor+0x34>
      pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 800688c:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
 8006890:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006892:	f10d 0006 	add.w	r0, sp, #6
 8006896:	4798      	blx	r3
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8006898:	2302      	movs	r3, #2
 800689a:	7043      	strb	r3, [r0, #1]
  if (err != 0U)
 800689c:	e7d7      	b.n	800684e <USBD_GetDescriptor+0x34>
    switch ((uint8_t)(req->wValue))
 800689e:	b2d2      	uxtb	r2, r2
 80068a0:	2a05      	cmp	r2, #5
 80068a2:	d852      	bhi.n	800694a <USBD_GetDescriptor+0x130>
 80068a4:	e8df f002 	tbb	[pc, r2]
 80068a8:	2a1d1003 	.word	0x2a1d1003
 80068ac:	4437      	.short	0x4437
      if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 80068ae:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 80068b2:	685b      	ldr	r3, [r3, #4]
 80068b4:	b123      	cbz	r3, 80068c0 <USBD_GetDescriptor+0xa6>
        pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 80068b6:	f10d 0106 	add.w	r1, sp, #6
 80068ba:	7c00      	ldrb	r0, [r0, #16]
 80068bc:	4798      	blx	r3
  if (err != 0U)
 80068be:	e7c6      	b.n	800684e <USBD_GetDescriptor+0x34>
        USBD_CtlError(pdev, req);
 80068c0:	4629      	mov	r1, r5
 80068c2:	f7ff ffa0 	bl	8006806 <USBD_CtlError>
  if (err != 0U)
 80068c6:	e7d4      	b.n	8006872 <USBD_GetDescriptor+0x58>
      if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 80068c8:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 80068cc:	689b      	ldr	r3, [r3, #8]
 80068ce:	b123      	cbz	r3, 80068da <USBD_GetDescriptor+0xc0>
        pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 80068d0:	f10d 0106 	add.w	r1, sp, #6
 80068d4:	7c00      	ldrb	r0, [r0, #16]
 80068d6:	4798      	blx	r3
  if (err != 0U)
 80068d8:	e7b9      	b.n	800684e <USBD_GetDescriptor+0x34>
        USBD_CtlError(pdev, req);
 80068da:	4629      	mov	r1, r5
 80068dc:	f7ff ff93 	bl	8006806 <USBD_CtlError>
  if (err != 0U)
 80068e0:	e7c7      	b.n	8006872 <USBD_GetDescriptor+0x58>
      if (pdev->pDesc->GetProductStrDescriptor != NULL)
 80068e2:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 80068e6:	68db      	ldr	r3, [r3, #12]
 80068e8:	b123      	cbz	r3, 80068f4 <USBD_GetDescriptor+0xda>
        pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 80068ea:	f10d 0106 	add.w	r1, sp, #6
 80068ee:	7c00      	ldrb	r0, [r0, #16]
 80068f0:	4798      	blx	r3
  if (err != 0U)
 80068f2:	e7ac      	b.n	800684e <USBD_GetDescriptor+0x34>
        USBD_CtlError(pdev, req);
 80068f4:	4629      	mov	r1, r5
 80068f6:	f7ff ff86 	bl	8006806 <USBD_CtlError>
  if (err != 0U)
 80068fa:	e7ba      	b.n	8006872 <USBD_GetDescriptor+0x58>
      if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 80068fc:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 8006900:	691b      	ldr	r3, [r3, #16]
 8006902:	b123      	cbz	r3, 800690e <USBD_GetDescriptor+0xf4>
        pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8006904:	f10d 0106 	add.w	r1, sp, #6
 8006908:	7c00      	ldrb	r0, [r0, #16]
 800690a:	4798      	blx	r3
  if (err != 0U)
 800690c:	e79f      	b.n	800684e <USBD_GetDescriptor+0x34>
        USBD_CtlError(pdev, req);
 800690e:	4629      	mov	r1, r5
 8006910:	f7ff ff79 	bl	8006806 <USBD_CtlError>
  if (err != 0U)
 8006914:	e7ad      	b.n	8006872 <USBD_GetDescriptor+0x58>
      if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8006916:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 800691a:	695b      	ldr	r3, [r3, #20]
 800691c:	b123      	cbz	r3, 8006928 <USBD_GetDescriptor+0x10e>
        pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800691e:	f10d 0106 	add.w	r1, sp, #6
 8006922:	7c00      	ldrb	r0, [r0, #16]
 8006924:	4798      	blx	r3
  if (err != 0U)
 8006926:	e792      	b.n	800684e <USBD_GetDescriptor+0x34>
        USBD_CtlError(pdev, req);
 8006928:	4629      	mov	r1, r5
 800692a:	f7ff ff6c 	bl	8006806 <USBD_CtlError>
  if (err != 0U)
 800692e:	e7a0      	b.n	8006872 <USBD_GetDescriptor+0x58>
      if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8006930:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 8006934:	699b      	ldr	r3, [r3, #24]
 8006936:	b123      	cbz	r3, 8006942 <USBD_GetDescriptor+0x128>
        pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8006938:	f10d 0106 	add.w	r1, sp, #6
 800693c:	7c00      	ldrb	r0, [r0, #16]
 800693e:	4798      	blx	r3
  if (err != 0U)
 8006940:	e785      	b.n	800684e <USBD_GetDescriptor+0x34>
        USBD_CtlError(pdev, req);
 8006942:	4629      	mov	r1, r5
 8006944:	f7ff ff5f 	bl	8006806 <USBD_CtlError>
  if (err != 0U)
 8006948:	e793      	b.n	8006872 <USBD_GetDescriptor+0x58>
      USBD_CtlError(pdev, req);
 800694a:	4629      	mov	r1, r5
 800694c:	f7ff ff5b 	bl	8006806 <USBD_CtlError>
  if (err != 0U)
 8006950:	e78f      	b.n	8006872 <USBD_GetDescriptor+0x58>
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006952:	7c03      	ldrb	r3, [r0, #16]
 8006954:	b933      	cbnz	r3, 8006964 <USBD_GetDescriptor+0x14a>
      pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8006956:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
 800695a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800695c:	f10d 0006 	add.w	r0, sp, #6
 8006960:	4798      	blx	r3
  if (err != 0U)
 8006962:	e774      	b.n	800684e <USBD_GetDescriptor+0x34>
      USBD_CtlError(pdev, req);
 8006964:	4629      	mov	r1, r5
 8006966:	f7ff ff4e 	bl	8006806 <USBD_CtlError>
  if (err != 0U)
 800696a:	e782      	b.n	8006872 <USBD_GetDescriptor+0x58>
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 800696c:	7c03      	ldrb	r3, [r0, #16]
 800696e:	b943      	cbnz	r3, 8006982 <USBD_GetDescriptor+0x168>
      pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8006970:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
 8006974:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006976:	f10d 0006 	add.w	r0, sp, #6
 800697a:	4798      	blx	r3
      pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800697c:	2307      	movs	r3, #7
 800697e:	7043      	strb	r3, [r0, #1]
  if (err != 0U)
 8006980:	e765      	b.n	800684e <USBD_GetDescriptor+0x34>
      USBD_CtlError(pdev, req);
 8006982:	4629      	mov	r1, r5
 8006984:	f7ff ff3f 	bl	8006806 <USBD_CtlError>
  if (err != 0U)
 8006988:	e773      	b.n	8006872 <USBD_GetDescriptor+0x58>
    USBD_CtlError(pdev, req);
 800698a:	4629      	mov	r1, r5
 800698c:	f7ff ff3b 	bl	8006806 <USBD_CtlError>
    return;
 8006990:	e76f      	b.n	8006872 <USBD_GetDescriptor+0x58>
        USBD_CtlError(pdev, req);
 8006992:	4629      	mov	r1, r5
 8006994:	4620      	mov	r0, r4
 8006996:	f7ff ff36 	bl	8006806 <USBD_CtlError>
 800699a:	e76a      	b.n	8006872 <USBD_GetDescriptor+0x58>
      (void)USBD_CtlSendStatus(pdev);
 800699c:	4620      	mov	r0, r4
 800699e:	f000 fa95 	bl	8006ecc <USBD_CtlSendStatus>
 80069a2:	e766      	b.n	8006872 <USBD_GetDescriptor+0x58>

080069a4 <USBD_SetAddress>:
{
 80069a4:	b538      	push	{r3, r4, r5, lr}
 80069a6:	4604      	mov	r4, r0
  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 80069a8:	888b      	ldrh	r3, [r1, #4]
 80069aa:	b9f3      	cbnz	r3, 80069ea <USBD_SetAddress+0x46>
 80069ac:	88cb      	ldrh	r3, [r1, #6]
 80069ae:	b9e3      	cbnz	r3, 80069ea <USBD_SetAddress+0x46>
 80069b0:	884b      	ldrh	r3, [r1, #2]
 80069b2:	2b7f      	cmp	r3, #127	; 0x7f
 80069b4:	d819      	bhi.n	80069ea <USBD_SetAddress+0x46>
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 80069b6:	f003 057f 	and.w	r5, r3, #127	; 0x7f
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80069ba:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 80069be:	2b03      	cmp	r3, #3
 80069c0:	d00c      	beq.n	80069dc <USBD_SetAddress+0x38>
      pdev->dev_address = dev_addr;
 80069c2:	f880 529e 	strb.w	r5, [r0, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 80069c6:	4629      	mov	r1, r5
 80069c8:	f001 fafa 	bl	8007fc0 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 80069cc:	4620      	mov	r0, r4
 80069ce:	f000 fa7d 	bl	8006ecc <USBD_CtlSendStatus>
      if (dev_addr != 0U)
 80069d2:	b135      	cbz	r5, 80069e2 <USBD_SetAddress+0x3e>
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80069d4:	2302      	movs	r3, #2
 80069d6:	f884 329c 	strb.w	r3, [r4, #668]	; 0x29c
 80069da:	e009      	b.n	80069f0 <USBD_SetAddress+0x4c>
      USBD_CtlError(pdev, req);
 80069dc:	f7ff ff13 	bl	8006806 <USBD_CtlError>
 80069e0:	e006      	b.n	80069f0 <USBD_SetAddress+0x4c>
        pdev->dev_state = USBD_STATE_DEFAULT;
 80069e2:	2301      	movs	r3, #1
 80069e4:	f884 329c 	strb.w	r3, [r4, #668]	; 0x29c
 80069e8:	e002      	b.n	80069f0 <USBD_SetAddress+0x4c>
    USBD_CtlError(pdev, req);
 80069ea:	4620      	mov	r0, r4
 80069ec:	f7ff ff0b 	bl	8006806 <USBD_CtlError>
}
 80069f0:	bd38      	pop	{r3, r4, r5, pc}
	...

080069f4 <USBD_SetConfig>:
{
 80069f4:	b570      	push	{r4, r5, r6, lr}
 80069f6:	4604      	mov	r4, r0
 80069f8:	460e      	mov	r6, r1
  cfgidx = (uint8_t)(req->wValue);
 80069fa:	788d      	ldrb	r5, [r1, #2]
 80069fc:	4b2d      	ldr	r3, [pc, #180]	; (8006ab4 <USBD_SetConfig+0xc0>)
 80069fe:	701d      	strb	r5, [r3, #0]
  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8006a00:	2d01      	cmp	r5, #1
 8006a02:	d80f      	bhi.n	8006a24 <USBD_SetConfig+0x30>
  switch (pdev->dev_state)
 8006a04:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8006a08:	2b02      	cmp	r3, #2
 8006a0a:	d00f      	beq.n	8006a2c <USBD_SetConfig+0x38>
 8006a0c:	2b03      	cmp	r3, #3
 8006a0e:	d023      	beq.n	8006a58 <USBD_SetConfig+0x64>
    USBD_CtlError(pdev, req);
 8006a10:	f7ff fef9 	bl	8006806 <USBD_CtlError>
    (void)USBD_ClrClassConfig(pdev, cfgidx);
 8006a14:	4b27      	ldr	r3, [pc, #156]	; (8006ab4 <USBD_SetConfig+0xc0>)
 8006a16:	7819      	ldrb	r1, [r3, #0]
 8006a18:	4620      	mov	r0, r4
 8006a1a:	f7ff fda4 	bl	8006566 <USBD_ClrClassConfig>
    ret = USBD_FAIL;
 8006a1e:	2503      	movs	r5, #3
}
 8006a20:	4628      	mov	r0, r5
 8006a22:	bd70      	pop	{r4, r5, r6, pc}
    USBD_CtlError(pdev, req);
 8006a24:	f7ff feef 	bl	8006806 <USBD_CtlError>
    return USBD_FAIL;
 8006a28:	2503      	movs	r5, #3
 8006a2a:	e7f9      	b.n	8006a20 <USBD_SetConfig+0x2c>
    if (cfgidx != 0U)
 8006a2c:	b18d      	cbz	r5, 8006a52 <USBD_SetConfig+0x5e>
      pdev->dev_config = cfgidx;
 8006a2e:	6045      	str	r5, [r0, #4]
      ret = USBD_SetClassConfig(pdev, cfgidx);
 8006a30:	4629      	mov	r1, r5
 8006a32:	f7ff fd8f 	bl	8006554 <USBD_SetClassConfig>
      if (ret != USBD_OK)
 8006a36:	4605      	mov	r5, r0
 8006a38:	b120      	cbz	r0, 8006a44 <USBD_SetConfig+0x50>
        USBD_CtlError(pdev, req);
 8006a3a:	4631      	mov	r1, r6
 8006a3c:	4620      	mov	r0, r4
 8006a3e:	f7ff fee2 	bl	8006806 <USBD_CtlError>
 8006a42:	e7ed      	b.n	8006a20 <USBD_SetConfig+0x2c>
        (void)USBD_CtlSendStatus(pdev);
 8006a44:	4620      	mov	r0, r4
 8006a46:	f000 fa41 	bl	8006ecc <USBD_CtlSendStatus>
        pdev->dev_state = USBD_STATE_CONFIGURED;
 8006a4a:	2303      	movs	r3, #3
 8006a4c:	f884 329c 	strb.w	r3, [r4, #668]	; 0x29c
 8006a50:	e7e6      	b.n	8006a20 <USBD_SetConfig+0x2c>
      (void)USBD_CtlSendStatus(pdev);
 8006a52:	f000 fa3b 	bl	8006ecc <USBD_CtlSendStatus>
 8006a56:	e7e3      	b.n	8006a20 <USBD_SetConfig+0x2c>
    if (cfgidx == 0U)
 8006a58:	b1cd      	cbz	r5, 8006a8e <USBD_SetConfig+0x9a>
    else if (cfgidx != pdev->dev_config)
 8006a5a:	6841      	ldr	r1, [r0, #4]
 8006a5c:	428d      	cmp	r5, r1
 8006a5e:	d025      	beq.n	8006aac <USBD_SetConfig+0xb8>
      (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8006a60:	b2c9      	uxtb	r1, r1
 8006a62:	f7ff fd80 	bl	8006566 <USBD_ClrClassConfig>
      pdev->dev_config = cfgidx;
 8006a66:	4b13      	ldr	r3, [pc, #76]	; (8006ab4 <USBD_SetConfig+0xc0>)
 8006a68:	7819      	ldrb	r1, [r3, #0]
 8006a6a:	6061      	str	r1, [r4, #4]
      ret = USBD_SetClassConfig(pdev, cfgidx);
 8006a6c:	4620      	mov	r0, r4
 8006a6e:	f7ff fd71 	bl	8006554 <USBD_SetClassConfig>
      if (ret != USBD_OK)
 8006a72:	4605      	mov	r5, r0
 8006a74:	b1b0      	cbz	r0, 8006aa4 <USBD_SetConfig+0xb0>
        USBD_CtlError(pdev, req);
 8006a76:	4631      	mov	r1, r6
 8006a78:	4620      	mov	r0, r4
 8006a7a:	f7ff fec4 	bl	8006806 <USBD_CtlError>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8006a7e:	7921      	ldrb	r1, [r4, #4]
 8006a80:	4620      	mov	r0, r4
 8006a82:	f7ff fd70 	bl	8006566 <USBD_ClrClassConfig>
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8006a86:	2302      	movs	r3, #2
 8006a88:	f884 329c 	strb.w	r3, [r4, #668]	; 0x29c
 8006a8c:	e7c8      	b.n	8006a20 <USBD_SetConfig+0x2c>
      pdev->dev_state = USBD_STATE_ADDRESSED;
 8006a8e:	2302      	movs	r3, #2
 8006a90:	f880 329c 	strb.w	r3, [r0, #668]	; 0x29c
      pdev->dev_config = cfgidx;
 8006a94:	6045      	str	r5, [r0, #4]
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8006a96:	4629      	mov	r1, r5
 8006a98:	f7ff fd65 	bl	8006566 <USBD_ClrClassConfig>
      (void)USBD_CtlSendStatus(pdev);
 8006a9c:	4620      	mov	r0, r4
 8006a9e:	f000 fa15 	bl	8006ecc <USBD_CtlSendStatus>
 8006aa2:	e7bd      	b.n	8006a20 <USBD_SetConfig+0x2c>
        (void)USBD_CtlSendStatus(pdev);
 8006aa4:	4620      	mov	r0, r4
 8006aa6:	f000 fa11 	bl	8006ecc <USBD_CtlSendStatus>
 8006aaa:	e7b9      	b.n	8006a20 <USBD_SetConfig+0x2c>
      (void)USBD_CtlSendStatus(pdev);
 8006aac:	f000 fa0e 	bl	8006ecc <USBD_CtlSendStatus>
  USBD_StatusTypeDef ret = USBD_OK;
 8006ab0:	2500      	movs	r5, #0
 8006ab2:	e7b5      	b.n	8006a20 <USBD_SetConfig+0x2c>
 8006ab4:	20000204 	.word	0x20000204

08006ab8 <USBD_GetConfig>:
{
 8006ab8:	b508      	push	{r3, lr}
  if (req->wLength != 1U)
 8006aba:	88cb      	ldrh	r3, [r1, #6]
 8006abc:	2b01      	cmp	r3, #1
 8006abe:	d10a      	bne.n	8006ad6 <USBD_GetConfig+0x1e>
    switch (pdev->dev_state)
 8006ac0:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8006ac4:	2b02      	cmp	r3, #2
 8006ac6:	d909      	bls.n	8006adc <USBD_GetConfig+0x24>
 8006ac8:	2b03      	cmp	r3, #3
 8006aca:	d109      	bne.n	8006ae0 <USBD_GetConfig+0x28>
      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8006acc:	2201      	movs	r2, #1
 8006ace:	1d01      	adds	r1, r0, #4
 8006ad0:	f000 f9d0 	bl	8006e74 <USBD_CtlSendData>
      break;
 8006ad4:	e001      	b.n	8006ada <USBD_GetConfig+0x22>
    USBD_CtlError(pdev, req);
 8006ad6:	f7ff fe96 	bl	8006806 <USBD_CtlError>
}
 8006ada:	bd08      	pop	{r3, pc}
    switch (pdev->dev_state)
 8006adc:	b25b      	sxtb	r3, r3
 8006ade:	b913      	cbnz	r3, 8006ae6 <USBD_GetConfig+0x2e>
      USBD_CtlError(pdev, req);
 8006ae0:	f7ff fe91 	bl	8006806 <USBD_CtlError>
}
 8006ae4:	e7f9      	b.n	8006ada <USBD_GetConfig+0x22>
      pdev->dev_default_config = 0U;
 8006ae6:	4601      	mov	r1, r0
 8006ae8:	2300      	movs	r3, #0
 8006aea:	f841 3f08 	str.w	r3, [r1, #8]!
      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8006aee:	2201      	movs	r2, #1
 8006af0:	f000 f9c0 	bl	8006e74 <USBD_CtlSendData>
      break;
 8006af4:	e7f1      	b.n	8006ada <USBD_GetConfig+0x22>

08006af6 <USBD_GetStatus>:
{
 8006af6:	b508      	push	{r3, lr}
  switch (pdev->dev_state)
 8006af8:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8006afc:	3b01      	subs	r3, #1
 8006afe:	2b02      	cmp	r3, #2
 8006b00:	d812      	bhi.n	8006b28 <USBD_GetStatus+0x32>
    if (req->wLength != 0x2U)
 8006b02:	88cb      	ldrh	r3, [r1, #6]
 8006b04:	2b02      	cmp	r3, #2
 8006b06:	d10c      	bne.n	8006b22 <USBD_GetStatus+0x2c>
    pdev->dev_config_status = 0U;
 8006b08:	2300      	movs	r3, #0
 8006b0a:	60c3      	str	r3, [r0, #12]
    if (pdev->dev_remote_wakeup != 0U)
 8006b0c:	f8d0 32a4 	ldr.w	r3, [r0, #676]	; 0x2a4
 8006b10:	b10b      	cbz	r3, 8006b16 <USBD_GetStatus+0x20>
      pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8006b12:	2302      	movs	r3, #2
 8006b14:	60c3      	str	r3, [r0, #12]
    (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8006b16:	2202      	movs	r2, #2
 8006b18:	f100 010c 	add.w	r1, r0, #12
 8006b1c:	f000 f9aa 	bl	8006e74 <USBD_CtlSendData>
}
 8006b20:	bd08      	pop	{r3, pc}
      USBD_CtlError(pdev, req);
 8006b22:	f7ff fe70 	bl	8006806 <USBD_CtlError>
      break;
 8006b26:	e7fb      	b.n	8006b20 <USBD_GetStatus+0x2a>
    USBD_CtlError(pdev, req);
 8006b28:	f7ff fe6d 	bl	8006806 <USBD_CtlError>
}
 8006b2c:	e7f8      	b.n	8006b20 <USBD_GetStatus+0x2a>

08006b2e <USBD_ClrFeature>:
{
 8006b2e:	b508      	push	{r3, lr}
  switch (pdev->dev_state)
 8006b30:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8006b34:	3b01      	subs	r3, #1
 8006b36:	2b02      	cmp	r3, #2
 8006b38:	d809      	bhi.n	8006b4e <USBD_ClrFeature+0x20>
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8006b3a:	884b      	ldrh	r3, [r1, #2]
 8006b3c:	2b01      	cmp	r3, #1
 8006b3e:	d000      	beq.n	8006b42 <USBD_ClrFeature+0x14>
}
 8006b40:	bd08      	pop	{r3, pc}
        pdev->dev_remote_wakeup = 0U;
 8006b42:	2300      	movs	r3, #0
 8006b44:	f8c0 32a4 	str.w	r3, [r0, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8006b48:	f000 f9c0 	bl	8006ecc <USBD_CtlSendStatus>
 8006b4c:	e7f8      	b.n	8006b40 <USBD_ClrFeature+0x12>
      USBD_CtlError(pdev, req);
 8006b4e:	f7ff fe5a 	bl	8006806 <USBD_CtlError>
}
 8006b52:	e7f5      	b.n	8006b40 <USBD_ClrFeature+0x12>

08006b54 <USBD_StdDevReq>:
{
 8006b54:	b538      	push	{r3, r4, r5, lr}
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006b56:	780c      	ldrb	r4, [r1, #0]
 8006b58:	f004 0460 	and.w	r4, r4, #96	; 0x60
 8006b5c:	2c20      	cmp	r4, #32
 8006b5e:	d006      	beq.n	8006b6e <USBD_StdDevReq+0x1a>
 8006b60:	2c40      	cmp	r4, #64	; 0x40
 8006b62:	d004      	beq.n	8006b6e <USBD_StdDevReq+0x1a>
 8006b64:	b154      	cbz	r4, 8006b7c <USBD_StdDevReq+0x28>
    USBD_CtlError(pdev, req);
 8006b66:	f7ff fe4e 	bl	8006806 <USBD_CtlError>
  USBD_StatusTypeDef ret = USBD_OK;
 8006b6a:	2400      	movs	r4, #0
    break;
 8006b6c:	e004      	b.n	8006b78 <USBD_StdDevReq+0x24>
    ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8006b6e:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
 8006b72:	689b      	ldr	r3, [r3, #8]
 8006b74:	4798      	blx	r3
 8006b76:	4604      	mov	r4, r0
}
 8006b78:	4620      	mov	r0, r4
 8006b7a:	bd38      	pop	{r3, r4, r5, pc}
    switch (req->bRequest)
 8006b7c:	784d      	ldrb	r5, [r1, #1]
 8006b7e:	2d09      	cmp	r5, #9
 8006b80:	d81d      	bhi.n	8006bbe <USBD_StdDevReq+0x6a>
 8006b82:	e8df f005 	tbb	[pc, r5]
 8006b86:	1912      	.short	0x1912
 8006b88:	081c161c 	.word	0x081c161c
 8006b8c:	0b0f1c05 	.word	0x0b0f1c05
      USBD_GetDescriptor(pdev, req);
 8006b90:	f7ff fe43 	bl	800681a <USBD_GetDescriptor>
      break;
 8006b94:	e7f0      	b.n	8006b78 <USBD_StdDevReq+0x24>
      USBD_SetAddress(pdev, req);
 8006b96:	f7ff ff05 	bl	80069a4 <USBD_SetAddress>
      break;
 8006b9a:	e7ed      	b.n	8006b78 <USBD_StdDevReq+0x24>
      ret = USBD_SetConfig(pdev, req);
 8006b9c:	f7ff ff2a 	bl	80069f4 <USBD_SetConfig>
 8006ba0:	4604      	mov	r4, r0
      break;
 8006ba2:	e7e9      	b.n	8006b78 <USBD_StdDevReq+0x24>
      USBD_GetConfig(pdev, req);
 8006ba4:	f7ff ff88 	bl	8006ab8 <USBD_GetConfig>
      break;
 8006ba8:	e7e6      	b.n	8006b78 <USBD_StdDevReq+0x24>
      USBD_GetStatus(pdev, req);
 8006baa:	f7ff ffa4 	bl	8006af6 <USBD_GetStatus>
  USBD_StatusTypeDef ret = USBD_OK;
 8006bae:	462c      	mov	r4, r5
      break;
 8006bb0:	e7e2      	b.n	8006b78 <USBD_StdDevReq+0x24>
      USBD_SetFeature(pdev, req);
 8006bb2:	f7ff fe0a 	bl	80067ca <USBD_SetFeature>
      break;
 8006bb6:	e7df      	b.n	8006b78 <USBD_StdDevReq+0x24>
      USBD_ClrFeature(pdev, req);
 8006bb8:	f7ff ffb9 	bl	8006b2e <USBD_ClrFeature>
      break;
 8006bbc:	e7dc      	b.n	8006b78 <USBD_StdDevReq+0x24>
      USBD_CtlError(pdev, req);
 8006bbe:	f7ff fe22 	bl	8006806 <USBD_CtlError>
      break;
 8006bc2:	e7d9      	b.n	8006b78 <USBD_StdDevReq+0x24>

08006bc4 <USBD_StdItfReq>:
{
 8006bc4:	b570      	push	{r4, r5, r6, lr}
 8006bc6:	4605      	mov	r5, r0
 8006bc8:	460c      	mov	r4, r1
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006bca:	780b      	ldrb	r3, [r1, #0]
 8006bcc:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006bd0:	2b20      	cmp	r3, #32
 8006bd2:	d007      	beq.n	8006be4 <USBD_StdItfReq+0x20>
 8006bd4:	2b40      	cmp	r3, #64	; 0x40
 8006bd6:	d005      	beq.n	8006be4 <USBD_StdItfReq+0x20>
 8006bd8:	b123      	cbz	r3, 8006be4 <USBD_StdItfReq+0x20>
    USBD_CtlError(pdev, req);
 8006bda:	f7ff fe14 	bl	8006806 <USBD_CtlError>
  USBD_StatusTypeDef ret = USBD_OK;
 8006bde:	2600      	movs	r6, #0
}
 8006be0:	4630      	mov	r0, r6
 8006be2:	bd70      	pop	{r4, r5, r6, pc}
    switch (pdev->dev_state)
 8006be4:	f895 329c 	ldrb.w	r3, [r5, #668]	; 0x29c
 8006be8:	3b01      	subs	r3, #1
 8006bea:	2b02      	cmp	r3, #2
 8006bec:	d818      	bhi.n	8006c20 <USBD_StdItfReq+0x5c>
      if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8006bee:	7923      	ldrb	r3, [r4, #4]
 8006bf0:	2b01      	cmp	r3, #1
 8006bf2:	d80f      	bhi.n	8006c14 <USBD_StdItfReq+0x50>
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8006bf4:	f8d5 32b8 	ldr.w	r3, [r5, #696]	; 0x2b8
 8006bf8:	689b      	ldr	r3, [r3, #8]
 8006bfa:	4621      	mov	r1, r4
 8006bfc:	4628      	mov	r0, r5
 8006bfe:	4798      	blx	r3
 8006c00:	4606      	mov	r6, r0
        if ((req->wLength == 0U) && (ret == USBD_OK))
 8006c02:	88e3      	ldrh	r3, [r4, #6]
 8006c04:	2b00      	cmp	r3, #0
 8006c06:	d1eb      	bne.n	8006be0 <USBD_StdItfReq+0x1c>
 8006c08:	2800      	cmp	r0, #0
 8006c0a:	d1e9      	bne.n	8006be0 <USBD_StdItfReq+0x1c>
          (void)USBD_CtlSendStatus(pdev);
 8006c0c:	4628      	mov	r0, r5
 8006c0e:	f000 f95d 	bl	8006ecc <USBD_CtlSendStatus>
 8006c12:	e7e5      	b.n	8006be0 <USBD_StdItfReq+0x1c>
        USBD_CtlError(pdev, req);
 8006c14:	4621      	mov	r1, r4
 8006c16:	4628      	mov	r0, r5
 8006c18:	f7ff fdf5 	bl	8006806 <USBD_CtlError>
  USBD_StatusTypeDef ret = USBD_OK;
 8006c1c:	2600      	movs	r6, #0
 8006c1e:	e7df      	b.n	8006be0 <USBD_StdItfReq+0x1c>
      USBD_CtlError(pdev, req);
 8006c20:	4621      	mov	r1, r4
 8006c22:	4628      	mov	r0, r5
 8006c24:	f7ff fdef 	bl	8006806 <USBD_CtlError>
  USBD_StatusTypeDef ret = USBD_OK;
 8006c28:	2600      	movs	r6, #0
      break;
 8006c2a:	e7d9      	b.n	8006be0 <USBD_StdItfReq+0x1c>

08006c2c <USBD_StdEPReq>:
{
 8006c2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006c2e:	4606      	mov	r6, r0
 8006c30:	460d      	mov	r5, r1
  ep_addr = LOBYTE(req->wIndex);
 8006c32:	888b      	ldrh	r3, [r1, #4]
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006c34:	780c      	ldrb	r4, [r1, #0]
 8006c36:	f004 0460 	and.w	r4, r4, #96	; 0x60
 8006c3a:	2c20      	cmp	r4, #32
 8006c3c:	d008      	beq.n	8006c50 <USBD_StdEPReq+0x24>
 8006c3e:	b2d9      	uxtb	r1, r3
 8006c40:	2c40      	cmp	r4, #64	; 0x40
 8006c42:	d005      	beq.n	8006c50 <USBD_StdEPReq+0x24>
 8006c44:	b16c      	cbz	r4, 8006c62 <USBD_StdEPReq+0x36>
    USBD_CtlError(pdev, req);
 8006c46:	4629      	mov	r1, r5
 8006c48:	f7ff fddd 	bl	8006806 <USBD_CtlError>
  USBD_StatusTypeDef ret = USBD_OK;
 8006c4c:	2400      	movs	r4, #0
    break;
 8006c4e:	e006      	b.n	8006c5e <USBD_StdEPReq+0x32>
    ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8006c50:	f8d6 32b8 	ldr.w	r3, [r6, #696]	; 0x2b8
 8006c54:	689b      	ldr	r3, [r3, #8]
 8006c56:	4629      	mov	r1, r5
 8006c58:	4630      	mov	r0, r6
 8006c5a:	4798      	blx	r3
 8006c5c:	4604      	mov	r4, r0
}
 8006c5e:	4620      	mov	r0, r4
 8006c60:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    switch (req->bRequest)
 8006c62:	786f      	ldrb	r7, [r5, #1]
 8006c64:	2f01      	cmp	r7, #1
 8006c66:	d037      	beq.n	8006cd8 <USBD_StdEPReq+0xac>
 8006c68:	2f03      	cmp	r7, #3
 8006c6a:	d005      	beq.n	8006c78 <USBD_StdEPReq+0x4c>
 8006c6c:	2f00      	cmp	r7, #0
 8006c6e:	d063      	beq.n	8006d38 <USBD_StdEPReq+0x10c>
      USBD_CtlError(pdev, req);
 8006c70:	4629      	mov	r1, r5
 8006c72:	f7ff fdc8 	bl	8006806 <USBD_CtlError>
      break;
 8006c76:	e7f2      	b.n	8006c5e <USBD_StdEPReq+0x32>
      switch (pdev->dev_state)
 8006c78:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8006c7c:	2b02      	cmp	r3, #2
 8006c7e:	d005      	beq.n	8006c8c <USBD_StdEPReq+0x60>
 8006c80:	2b03      	cmp	r3, #3
 8006c82:	d016      	beq.n	8006cb2 <USBD_StdEPReq+0x86>
        USBD_CtlError(pdev, req);
 8006c84:	4629      	mov	r1, r5
 8006c86:	f7ff fdbe 	bl	8006806 <USBD_CtlError>
        break;
 8006c8a:	e7e8      	b.n	8006c5e <USBD_StdEPReq+0x32>
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006c8c:	f1b1 0380 	subs.w	r3, r1, #128	; 0x80
 8006c90:	bf18      	it	ne
 8006c92:	2301      	movne	r3, #1
 8006c94:	2900      	cmp	r1, #0
 8006c96:	bf08      	it	eq
 8006c98:	2300      	moveq	r3, #0
 8006c9a:	b133      	cbz	r3, 8006caa <USBD_StdEPReq+0x7e>
          (void)USBD_LL_StallEP(pdev, ep_addr);
 8006c9c:	f001 f980 	bl	8007fa0 <USBD_LL_StallEP>
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8006ca0:	2180      	movs	r1, #128	; 0x80
 8006ca2:	4630      	mov	r0, r6
 8006ca4:	f001 f97c 	bl	8007fa0 <USBD_LL_StallEP>
 8006ca8:	e7d9      	b.n	8006c5e <USBD_StdEPReq+0x32>
          USBD_CtlError(pdev, req);
 8006caa:	4629      	mov	r1, r5
 8006cac:	f7ff fdab 	bl	8006806 <USBD_CtlError>
 8006cb0:	e7d5      	b.n	8006c5e <USBD_StdEPReq+0x32>
        if (req->wValue == USB_FEATURE_EP_HALT)
 8006cb2:	886b      	ldrh	r3, [r5, #2]
 8006cb4:	b94b      	cbnz	r3, 8006cca <USBD_StdEPReq+0x9e>
          if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8006cb6:	f1b1 0380 	subs.w	r3, r1, #128	; 0x80
 8006cba:	bf18      	it	ne
 8006cbc:	2301      	movne	r3, #1
 8006cbe:	2900      	cmp	r1, #0
 8006cc0:	bf08      	it	eq
 8006cc2:	2300      	moveq	r3, #0
 8006cc4:	b10b      	cbz	r3, 8006cca <USBD_StdEPReq+0x9e>
 8006cc6:	88eb      	ldrh	r3, [r5, #6]
 8006cc8:	b11b      	cbz	r3, 8006cd2 <USBD_StdEPReq+0xa6>
        (void)USBD_CtlSendStatus(pdev);
 8006cca:	4630      	mov	r0, r6
 8006ccc:	f000 f8fe 	bl	8006ecc <USBD_CtlSendStatus>
        break;
 8006cd0:	e7c5      	b.n	8006c5e <USBD_StdEPReq+0x32>
            (void)USBD_LL_StallEP(pdev, ep_addr);
 8006cd2:	f001 f965 	bl	8007fa0 <USBD_LL_StallEP>
 8006cd6:	e7f8      	b.n	8006cca <USBD_StdEPReq+0x9e>
      switch (pdev->dev_state)
 8006cd8:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8006cdc:	2b02      	cmp	r3, #2
 8006cde:	d005      	beq.n	8006cec <USBD_StdEPReq+0xc0>
 8006ce0:	2b03      	cmp	r3, #3
 8006ce2:	d016      	beq.n	8006d12 <USBD_StdEPReq+0xe6>
        USBD_CtlError(pdev, req);
 8006ce4:	4629      	mov	r1, r5
 8006ce6:	f7ff fd8e 	bl	8006806 <USBD_CtlError>
        break;
 8006cea:	e7b8      	b.n	8006c5e <USBD_StdEPReq+0x32>
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006cec:	f1b1 0380 	subs.w	r3, r1, #128	; 0x80
 8006cf0:	bf18      	it	ne
 8006cf2:	2301      	movne	r3, #1
 8006cf4:	2900      	cmp	r1, #0
 8006cf6:	bf08      	it	eq
 8006cf8:	2300      	moveq	r3, #0
 8006cfa:	b133      	cbz	r3, 8006d0a <USBD_StdEPReq+0xde>
          (void)USBD_LL_StallEP(pdev, ep_addr);
 8006cfc:	f001 f950 	bl	8007fa0 <USBD_LL_StallEP>
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8006d00:	2180      	movs	r1, #128	; 0x80
 8006d02:	4630      	mov	r0, r6
 8006d04:	f001 f94c 	bl	8007fa0 <USBD_LL_StallEP>
 8006d08:	e7a9      	b.n	8006c5e <USBD_StdEPReq+0x32>
          USBD_CtlError(pdev, req);
 8006d0a:	4629      	mov	r1, r5
 8006d0c:	f7ff fd7b 	bl	8006806 <USBD_CtlError>
 8006d10:	e7a5      	b.n	8006c5e <USBD_StdEPReq+0x32>
        if (req->wValue == USB_FEATURE_EP_HALT)
 8006d12:	886b      	ldrh	r3, [r5, #2]
 8006d14:	2b00      	cmp	r3, #0
 8006d16:	d1a2      	bne.n	8006c5e <USBD_StdEPReq+0x32>
          if ((ep_addr & 0x7FU) != 0x00U)
 8006d18:	f011 0f7f 	tst.w	r1, #127	; 0x7f
 8006d1c:	d109      	bne.n	8006d32 <USBD_StdEPReq+0x106>
          (void)USBD_CtlSendStatus(pdev);
 8006d1e:	4630      	mov	r0, r6
 8006d20:	f000 f8d4 	bl	8006ecc <USBD_CtlSendStatus>
          (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8006d24:	f8d6 32b8 	ldr.w	r3, [r6, #696]	; 0x2b8
 8006d28:	689b      	ldr	r3, [r3, #8]
 8006d2a:	4629      	mov	r1, r5
 8006d2c:	4630      	mov	r0, r6
 8006d2e:	4798      	blx	r3
 8006d30:	e795      	b.n	8006c5e <USBD_StdEPReq+0x32>
            (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8006d32:	f001 f93d 	bl	8007fb0 <USBD_LL_ClearStallEP>
 8006d36:	e7f2      	b.n	8006d1e <USBD_StdEPReq+0xf2>
      switch (pdev->dev_state)
 8006d38:	f890 229c 	ldrb.w	r2, [r0, #668]	; 0x29c
 8006d3c:	2a02      	cmp	r2, #2
 8006d3e:	d006      	beq.n	8006d4e <USBD_StdEPReq+0x122>
 8006d40:	2a03      	cmp	r2, #3
 8006d42:	d02e      	beq.n	8006da2 <USBD_StdEPReq+0x176>
        USBD_CtlError(pdev, req);
 8006d44:	4629      	mov	r1, r5
 8006d46:	f7ff fd5e 	bl	8006806 <USBD_CtlError>
  USBD_StatusTypeDef ret = USBD_OK;
 8006d4a:	463c      	mov	r4, r7
        break;
 8006d4c:	e787      	b.n	8006c5e <USBD_StdEPReq+0x32>
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006d4e:	f1b1 0280 	subs.w	r2, r1, #128	; 0x80
 8006d52:	bf18      	it	ne
 8006d54:	2201      	movne	r2, #1
 8006d56:	2900      	cmp	r1, #0
 8006d58:	bf08      	it	eq
 8006d5a:	2200      	moveq	r2, #0
 8006d5c:	b99a      	cbnz	r2, 8006d86 <USBD_StdEPReq+0x15a>
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006d5e:	f013 0f80 	tst.w	r3, #128	; 0x80
 8006d62:	d115      	bne.n	8006d90 <USBD_StdEPReq+0x164>
              &pdev->ep_out[ep_addr & 0x7FU];
 8006d64:	f001 017f 	and.w	r1, r1, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006d68:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 8006d6c:	0089      	lsls	r1, r1, #2
 8006d6e:	f501 71a8 	add.w	r1, r1, #336	; 0x150
 8006d72:	4401      	add	r1, r0
 8006d74:	3104      	adds	r1, #4
        pep->status = 0x0000U;
 8006d76:	2300      	movs	r3, #0
 8006d78:	600b      	str	r3, [r1, #0]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8006d7a:	2202      	movs	r2, #2
 8006d7c:	4630      	mov	r0, r6
 8006d7e:	f000 f879 	bl	8006e74 <USBD_CtlSendData>
  USBD_StatusTypeDef ret = USBD_OK;
 8006d82:	463c      	mov	r4, r7
        break;
 8006d84:	e76b      	b.n	8006c5e <USBD_StdEPReq+0x32>
          USBD_CtlError(pdev, req);
 8006d86:	4629      	mov	r1, r5
 8006d88:	f7ff fd3d 	bl	8006806 <USBD_CtlError>
  USBD_StatusTypeDef ret = USBD_OK;
 8006d8c:	463c      	mov	r4, r7
          break;
 8006d8e:	e766      	b.n	8006c5e <USBD_StdEPReq+0x32>
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006d90:	f001 017f 	and.w	r1, r1, #127	; 0x7f
 8006d94:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 8006d98:	0089      	lsls	r1, r1, #2
 8006d9a:	3110      	adds	r1, #16
 8006d9c:	4401      	add	r1, r0
 8006d9e:	3104      	adds	r1, #4
 8006da0:	e7e9      	b.n	8006d76 <USBD_StdEPReq+0x14a>
        if ((ep_addr & 0x80U) == 0x80U)
 8006da2:	b25b      	sxtb	r3, r3
 8006da4:	2b00      	cmp	r3, #0
 8006da6:	db24      	blt.n	8006df2 <USBD_StdEPReq+0x1c6>
          if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8006da8:	f001 020f 	and.w	r2, r1, #15
 8006dac:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8006db0:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 8006db4:	f8b2 2164 	ldrh.w	r2, [r2, #356]	; 0x164
 8006db8:	b34a      	cbz	r2, 8006e0e <USBD_StdEPReq+0x1e2>
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006dba:	2b00      	cmp	r3, #0
 8006dbc:	db2c      	blt.n	8006e18 <USBD_StdEPReq+0x1ec>
              &pdev->ep_out[ep_addr & 0x7FU];
 8006dbe:	f001 037f 	and.w	r3, r1, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006dc2:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8006dc6:	009c      	lsls	r4, r3, #2
 8006dc8:	f504 74a8 	add.w	r4, r4, #336	; 0x150
 8006dcc:	4434      	add	r4, r6
 8006dce:	3404      	adds	r4, #4
          if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8006dd0:	2980      	cmp	r1, #128	; 0x80
 8006dd2:	bf14      	ite	ne
 8006dd4:	2300      	movne	r3, #0
 8006dd6:	2301      	moveq	r3, #1
 8006dd8:	2900      	cmp	r1, #0
 8006dda:	bf08      	it	eq
 8006ddc:	2301      	moveq	r3, #1
 8006dde:	b323      	cbz	r3, 8006e2a <USBD_StdEPReq+0x1fe>
            pep->status = 0x0000U;
 8006de0:	2300      	movs	r3, #0
 8006de2:	6023      	str	r3, [r4, #0]
          (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8006de4:	2202      	movs	r2, #2
 8006de6:	4621      	mov	r1, r4
 8006de8:	4630      	mov	r0, r6
 8006dea:	f000 f843 	bl	8006e74 <USBD_CtlSendData>
  USBD_StatusTypeDef ret = USBD_OK;
 8006dee:	463c      	mov	r4, r7
          break;
 8006df0:	e735      	b.n	8006c5e <USBD_StdEPReq+0x32>
          if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8006df2:	f001 020f 	and.w	r2, r1, #15
 8006df6:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8006dfa:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 8006dfe:	8c92      	ldrh	r2, [r2, #36]	; 0x24
 8006e00:	2a00      	cmp	r2, #0
 8006e02:	d1da      	bne.n	8006dba <USBD_StdEPReq+0x18e>
            USBD_CtlError(pdev, req);
 8006e04:	4629      	mov	r1, r5
 8006e06:	f7ff fcfe 	bl	8006806 <USBD_CtlError>
  USBD_StatusTypeDef ret = USBD_OK;
 8006e0a:	463c      	mov	r4, r7
            break;
 8006e0c:	e727      	b.n	8006c5e <USBD_StdEPReq+0x32>
            USBD_CtlError(pdev, req);
 8006e0e:	4629      	mov	r1, r5
 8006e10:	f7ff fcf9 	bl	8006806 <USBD_CtlError>
  USBD_StatusTypeDef ret = USBD_OK;
 8006e14:	463c      	mov	r4, r7
            break;
 8006e16:	e722      	b.n	8006c5e <USBD_StdEPReq+0x32>
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006e18:	f001 037f 	and.w	r3, r1, #127	; 0x7f
 8006e1c:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8006e20:	009c      	lsls	r4, r3, #2
 8006e22:	3410      	adds	r4, #16
 8006e24:	4434      	add	r4, r6
 8006e26:	3404      	adds	r4, #4
 8006e28:	e7d2      	b.n	8006dd0 <USBD_StdEPReq+0x1a4>
          else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8006e2a:	4630      	mov	r0, r6
 8006e2c:	f001 f876 	bl	8007f1c <USBD_LL_IsStallEP>
 8006e30:	b110      	cbz	r0, 8006e38 <USBD_StdEPReq+0x20c>
            pep->status = 0x0001U;
 8006e32:	2301      	movs	r3, #1
 8006e34:	6023      	str	r3, [r4, #0]
 8006e36:	e7d5      	b.n	8006de4 <USBD_StdEPReq+0x1b8>
            pep->status = 0x0000U;
 8006e38:	2300      	movs	r3, #0
 8006e3a:	6023      	str	r3, [r4, #0]
 8006e3c:	e7d2      	b.n	8006de4 <USBD_StdEPReq+0x1b8>

08006e3e <USBD_GetString>:
  if (desc == NULL)
 8006e3e:	b1c0      	cbz	r0, 8006e72 <USBD_GetString+0x34>
{
 8006e40:	b570      	push	{r4, r5, r6, lr}
 8006e42:	460d      	mov	r5, r1
 8006e44:	4616      	mov	r6, r2
 8006e46:	4604      	mov	r4, r0
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8006e48:	f7ff fcb6 	bl	80067b8 <USBD_GetLen>
 8006e4c:	3001      	adds	r0, #1
 8006e4e:	0040      	lsls	r0, r0, #1
 8006e50:	8030      	strh	r0, [r6, #0]
  unicode[idx] = *(uint8_t *)len;
 8006e52:	7028      	strb	r0, [r5, #0]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8006e54:	2303      	movs	r3, #3
 8006e56:	706b      	strb	r3, [r5, #1]
  idx++;
 8006e58:	2302      	movs	r3, #2
  while (*pdesc != (uint8_t)'\0')
 8006e5a:	7822      	ldrb	r2, [r4, #0]
 8006e5c:	b142      	cbz	r2, 8006e70 <USBD_GetString+0x32>
    unicode[idx] = *pdesc;
 8006e5e:	54ea      	strb	r2, [r5, r3]
    pdesc++;
 8006e60:	3401      	adds	r4, #1
    idx++;
 8006e62:	1c5a      	adds	r2, r3, #1
 8006e64:	b2d2      	uxtb	r2, r2
    unicode[idx] = 0U;
 8006e66:	2100      	movs	r1, #0
 8006e68:	54a9      	strb	r1, [r5, r2]
    idx++;
 8006e6a:	3302      	adds	r3, #2
 8006e6c:	b2db      	uxtb	r3, r3
 8006e6e:	e7f4      	b.n	8006e5a <USBD_GetString+0x1c>
}
 8006e70:	bd70      	pop	{r4, r5, r6, pc}
 8006e72:	4770      	bx	lr

08006e74 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8006e74:	b510      	push	{r4, lr}
 8006e76:	4613      	mov	r3, r2
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8006e78:	2202      	movs	r2, #2
 8006e7a:	f8c0 2294 	str.w	r2, [r0, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8006e7e:	6183      	str	r3, [r0, #24]
  pdev->ep_in[0].rem_length = len;
 8006e80:	61c3      	str	r3, [r0, #28]

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8006e82:	460a      	mov	r2, r1
 8006e84:	2100      	movs	r1, #0
 8006e86:	f001 f8a3 	bl	8007fd0 <USBD_LL_Transmit>

  return USBD_OK;
}
 8006e8a:	2000      	movs	r0, #0
 8006e8c:	bd10      	pop	{r4, pc}

08006e8e <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8006e8e:	b508      	push	{r3, lr}
 8006e90:	4613      	mov	r3, r2
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8006e92:	460a      	mov	r2, r1
 8006e94:	2100      	movs	r1, #0
 8006e96:	f001 f89b 	bl	8007fd0 <USBD_LL_Transmit>

  return USBD_OK;
}
 8006e9a:	2000      	movs	r0, #0
 8006e9c:	bd08      	pop	{r3, pc}

08006e9e <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8006e9e:	b510      	push	{r4, lr}
 8006ea0:	4613      	mov	r3, r2
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8006ea2:	2203      	movs	r2, #3
 8006ea4:	f8c0 2294 	str.w	r2, [r0, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8006ea8:	f8c0 3158 	str.w	r3, [r0, #344]	; 0x158
  pdev->ep_out[0].rem_length = len;
 8006eac:	f8c0 315c 	str.w	r3, [r0, #348]	; 0x15c

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8006eb0:	460a      	mov	r2, r1
 8006eb2:	2100      	movs	r1, #0
 8006eb4:	f001 f894 	bl	8007fe0 <USBD_LL_PrepareReceive>

  return USBD_OK;
}
 8006eb8:	2000      	movs	r0, #0
 8006eba:	bd10      	pop	{r4, pc}

08006ebc <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8006ebc:	b508      	push	{r3, lr}
 8006ebe:	4613      	mov	r3, r2
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8006ec0:	460a      	mov	r2, r1
 8006ec2:	2100      	movs	r1, #0
 8006ec4:	f001 f88c 	bl	8007fe0 <USBD_LL_PrepareReceive>

  return USBD_OK;
}
 8006ec8:	2000      	movs	r0, #0
 8006eca:	bd08      	pop	{r3, pc}

08006ecc <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8006ecc:	b508      	push	{r3, lr}
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8006ece:	2304      	movs	r3, #4
 8006ed0:	f8c0 3294 	str.w	r3, [r0, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8006ed4:	2300      	movs	r3, #0
 8006ed6:	461a      	mov	r2, r3
 8006ed8:	4619      	mov	r1, r3
 8006eda:	f001 f879 	bl	8007fd0 <USBD_LL_Transmit>

  return USBD_OK;
}
 8006ede:	2000      	movs	r0, #0
 8006ee0:	bd08      	pop	{r3, pc}

08006ee2 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8006ee2:	b508      	push	{r3, lr}
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8006ee4:	2305      	movs	r3, #5
 8006ee6:	f8c0 3294 	str.w	r3, [r0, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8006eea:	2300      	movs	r3, #0
 8006eec:	461a      	mov	r2, r3
 8006eee:	4619      	mov	r1, r3
 8006ef0:	f001 f876 	bl	8007fe0 <USBD_LL_PrepareReceive>

  return USBD_OK;
}
 8006ef4:	2000      	movs	r0, #0
 8006ef6:	bd08      	pop	{r3, pc}

08006ef8 <_ZN11BusAnalizer13Error_HandlerEv>:
  */
void BusAnalizer::Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
	if (ui8ErrorTransmisionCAN1 == 1)
 8006ef8:	f890 20c8 	ldrb.w	r2, [r0, #200]	; 0xc8
 8006efc:	2a01      	cmp	r2, #1
 8006efe:	d000      	beq.n	8006f02 <_ZN11BusAnalizer13Error_HandlerEv+0xa>
	{
		ui32CounterTransmisionErrorCAN1++;
	}
	else
	{
      while(1);
 8006f00:	e7fe      	b.n	8006f00 <_ZN11BusAnalizer13Error_HandlerEv+0x8>
		ui32CounterTransmisionErrorCAN1++;
 8006f02:	f8d0 20c4 	ldr.w	r2, [r0, #196]	; 0xc4
 8006f06:	3201      	adds	r2, #1
 8006f08:	f8c0 20c4 	str.w	r2, [r0, #196]	; 0xc4
	}
  /* USER CODE END Error_Handler_Debug */
}
 8006f0c:	4770      	bx	lr
	...

08006f10 <_ZN11BusAnalizer3RunEv>:
{
 8006f10:	b538      	push	{r3, r4, r5, lr}
 8006f12:	4604      	mov	r4, r0
	if(ui16MessageTriggerFlag == 1)
 8006f14:	f890 30c9 	ldrb.w	r3, [r0, #201]	; 0xc9
 8006f18:	b3ab      	cbz	r3, 8006f86 <_ZN11BusAnalizer3RunEv+0x76>
		ui16MessageTriggerFlag = 0;
 8006f1a:	2300      	movs	r3, #0
 8006f1c:	f880 30c9 	strb.w	r3, [r0, #201]	; 0xc9
		FixedTxHeader.Identifier = 0x321;
 8006f20:	f240 3221 	movw	r2, #801	; 0x321
 8006f24:	f8c0 209c 	str.w	r2, [r0, #156]	; 0x9c
		FixedTxHeader.IdType = FDCAN_STANDARD_ID;
 8006f28:	f8c0 30a0 	str.w	r3, [r0, #160]	; 0xa0
		FixedTxHeader.TxFrameType = FDCAN_DATA_FRAME;
 8006f2c:	f8c0 30a4 	str.w	r3, [r0, #164]	; 0xa4
		FixedTxHeader.DataLength = FDCAN_DLC_BYTES_3;
 8006f30:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8006f34:	f8c0 20a8 	str.w	r2, [r0, #168]	; 0xa8
		FixedTxHeader.ErrorStateIndicator = FDCAN_ESI_ACTIVE;
 8006f38:	f8c0 30ac 	str.w	r3, [r0, #172]	; 0xac
		FixedTxHeader.BitRateSwitch = FDCAN_BRS_OFF;
 8006f3c:	f8c0 30b0 	str.w	r3, [r0, #176]	; 0xb0
		FixedTxHeader.FDFormat = FDCAN_CLASSIC_CAN;
 8006f40:	f8c0 30b4 	str.w	r3, [r0, #180]	; 0xb4
		FixedTxHeader.TxEventFifoControl = FDCAN_NO_TX_EVENTS;
 8006f44:	f8c0 30b8 	str.w	r3, [r0, #184]	; 0xb8
		FixedTxHeader.MessageMarker = 0;
 8006f48:	f8c0 30bc 	str.w	r3, [r0, #188]	; 0xbc
		FixedTxData[0] = 0xBC;
 8006f4c:	23bc      	movs	r3, #188	; 0xbc
 8006f4e:	f880 3030 	strb.w	r3, [r0, #48]	; 0x30
		FixedTxData[1] = 0xAD;
 8006f52:	23ad      	movs	r3, #173	; 0xad
 8006f54:	f880 3031 	strb.w	r3, [r0, #49]	; 0x31
		FixedTxData[2] ++;
 8006f58:	f890 3032 	ldrb.w	r3, [r0, #50]	; 0x32
 8006f5c:	3301      	adds	r3, #1
 8006f5e:	f880 3032 	strb.w	r3, [r0, #50]	; 0x32
		while (HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan1, &FixedTxHeader, FixedTxData) != HAL_OK)
 8006f62:	f104 0230 	add.w	r2, r4, #48	; 0x30
 8006f66:	f104 019c 	add.w	r1, r4, #156	; 0x9c
 8006f6a:	4829      	ldr	r0, [pc, #164]	; (8007010 <_ZN11BusAnalizer3RunEv+0x100>)
 8006f6c:	f7f9 ff1f 	bl	8000dae <HAL_FDCAN_AddMessageToTxFifoQ>
 8006f70:	b148      	cbz	r0, 8006f86 <_ZN11BusAnalizer3RunEv+0x76>
		  ui8ErrorTransmisionCAN1 =1;
 8006f72:	2301      	movs	r3, #1
 8006f74:	f884 30c8 	strb.w	r3, [r4, #200]	; 0xc8
		  Error_Handler();
 8006f78:	4620      	mov	r0, r4
 8006f7a:	f7ff ffbd 	bl	8006ef8 <_ZN11BusAnalizer13Error_HandlerEv>
		  ui8ErrorTransmisionCAN1 =0;
 8006f7e:	2300      	movs	r3, #0
 8006f80:	f884 30c8 	strb.w	r3, [r4, #200]	; 0xc8
		while (HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan1, &FixedTxHeader, FixedTxData) != HAL_OK)
 8006f84:	e7ed      	b.n	8006f62 <_ZN11BusAnalizer3RunEv+0x52>
	if (ui8SetRequestToUsbCAN1==true)
 8006f86:	f894 30d4 	ldrb.w	r3, [r4, #212]	; 0xd4
 8006f8a:	2b00      	cmp	r3, #0
 8006f8c:	d03f      	beq.n	800700e <_ZN11BusAnalizer3RunEv+0xfe>
		memcpy(&sText[0],&RxHeader.Identifier,sizeof(RxHeader.Identifier));
 8006f8e:	6823      	ldr	r3, [r4, #0]
 8006f90:	63a3      	str	r3, [r4, #56]	; 0x38
		lui16Lengthpdu = ((uint32_t)RxHeader.DataLength & 0xFFFF0000) >> 16;
 8006f92:	89e0      	ldrh	r0, [r4, #14]
		memcpy(&sText[ui8IndexOffset],&lui16Lengthpdu,sizeof(lui16Lengthpdu));
 8006f94:	87a0      	strh	r0, [r4, #60]	; 0x3c
		memcpy(&sText[ui8IndexOffset],&ui32TimerValue,sizeof(ui32TimerValue));
 8006f96:	f8d4 30cc 	ldr.w	r3, [r4, #204]	; 0xcc
 8006f9a:	f8c4 303e 	str.w	r3, [r4, #62]	; 0x3e
		for (uint8_t ui8Index=0;ui8Index<lui16Lengthpdu;ui8Index++)
 8006f9e:	2300      	movs	r3, #0
 8006fa0:	4283      	cmp	r3, r0
 8006fa2:	da0a      	bge.n	8006fba <_ZN11BusAnalizer3RunEv+0xaa>
			sText[ui8Index +ui8IndexOffset] = RxData[ui8Index];
 8006fa4:	f103 020a 	add.w	r2, r3, #10
 8006fa8:	18e1      	adds	r1, r4, r3
 8006faa:	f891 1028 	ldrb.w	r1, [r1, #40]	; 0x28
 8006fae:	4422      	add	r2, r4
 8006fb0:	f882 1038 	strb.w	r1, [r2, #56]	; 0x38
		for (uint8_t ui8Index=0;ui8Index<lui16Lengthpdu;ui8Index++)
 8006fb4:	3301      	adds	r3, #1
 8006fb6:	b2db      	uxtb	r3, r3
 8006fb8:	e7f2      	b.n	8006fa0 <_ZN11BusAnalizer3RunEv+0x90>
		uint32_t lui32DeltameasureTransmit = __HAL_TIM_GET_COUNTER(&htim2);
 8006fba:	4b15      	ldr	r3, [pc, #84]	; (8007010 <_ZN11BusAnalizer3RunEv+0x100>)
 8006fbc:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8006fc0:	6a5d      	ldr	r5, [r3, #36]	; 0x24
 8006fc2:	e000      	b.n	8006fc6 <_ZN11BusAnalizer3RunEv+0xb6>
		}while (ui8ErrorUSB != USBD_OK);
 8006fc4:	b173      	cbz	r3, 8006fe4 <_ZN11BusAnalizer3RunEv+0xd4>
		  ui8ErrorUSB = CDC_Transmit_HS(static_cast<unsigned char *>(sText),2048);
 8006fc6:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8006fca:	f104 0038 	add.w	r0, r4, #56	; 0x38
 8006fce:	f000 fe9d 	bl	8007d0c <CDC_Transmit_HS>
		  if (ui8ErrorUSB != USBD_OK) ui32USBerrors++;
 8006fd2:	4603      	mov	r3, r0
 8006fd4:	2800      	cmp	r0, #0
 8006fd6:	d0f5      	beq.n	8006fc4 <_ZN11BusAnalizer3RunEv+0xb4>
 8006fd8:	f8d4 20d0 	ldr.w	r2, [r4, #208]	; 0xd0
 8006fdc:	3201      	adds	r2, #1
 8006fde:	f8c4 20d0 	str.w	r2, [r4, #208]	; 0xd0
 8006fe2:	e7ef      	b.n	8006fc4 <_ZN11BusAnalizer3RunEv+0xb4>
		ui32DeltameasureTransmit = __HAL_TIM_GET_COUNTER(&htim2) -lui32DeltameasureTransmit;
 8006fe4:	4b0a      	ldr	r3, [pc, #40]	; (8007010 <_ZN11BusAnalizer3RunEv+0x100>)
 8006fe6:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8006fea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006fec:	1b5b      	subs	r3, r3, r5
 8006fee:	f8c4 30d8 	str.w	r3, [r4, #216]	; 0xd8
		if (ui32DeltameasureTransmit>ui32DeltameasureTransmitMax)
 8006ff2:	f8d4 20dc 	ldr.w	r2, [r4, #220]	; 0xdc
 8006ff6:	4293      	cmp	r3, r2
 8006ff8:	d901      	bls.n	8006ffe <_ZN11BusAnalizer3RunEv+0xee>
			ui32DeltameasureTransmitMax = ui32DeltameasureTransmit;
 8006ffa:	f8c4 30dc 	str.w	r3, [r4, #220]	; 0xdc
		GPIOB->ODR ^=0x1;
 8006ffe:	4a05      	ldr	r2, [pc, #20]	; (8007014 <_ZN11BusAnalizer3RunEv+0x104>)
 8007000:	6953      	ldr	r3, [r2, #20]
 8007002:	f083 0301 	eor.w	r3, r3, #1
 8007006:	6153      	str	r3, [r2, #20]
		ui8SetRequestToUsbCAN1 =false;
 8007008:	2300      	movs	r3, #0
 800700a:	f884 30d4 	strb.w	r3, [r4, #212]	; 0xd4
}
 800700e:	bd38      	pop	{r3, r4, r5, pc}
 8007010:	20000208 	.word	0x20000208
 8007014:	58020400 	.word	0x58020400

08007018 <_ZN11BusAnalizer18SystemClock_ConfigEv>:
{
 8007018:	b510      	push	{r4, lr}
 800701a:	b0cc      	sub	sp, #304	; 0x130
 800701c:	4604      	mov	r4, r0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800701e:	224c      	movs	r2, #76	; 0x4c
 8007020:	2100      	movs	r1, #0
 8007022:	a839      	add	r0, sp, #228	; 0xe4
 8007024:	f001 f8e8 	bl	80081f8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8007028:	2220      	movs	r2, #32
 800702a:	2100      	movs	r1, #0
 800702c:	a831      	add	r0, sp, #196	; 0xc4
 800702e:	f001 f8e3 	bl	80081f8 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8007032:	22bc      	movs	r2, #188	; 0xbc
 8007034:	2100      	movs	r1, #0
 8007036:	a802      	add	r0, sp, #8
 8007038:	f001 f8de 	bl	80081f8 <memset>
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 800703c:	2002      	movs	r0, #2
 800703e:	f7fb f95d 	bl	80022fc <HAL_PWREx_ConfigSupply>
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8007042:	2300      	movs	r3, #0
 8007044:	9301      	str	r3, [sp, #4]
 8007046:	4b35      	ldr	r3, [pc, #212]	; (800711c <_ZN11BusAnalizer18SystemClock_ConfigEv+0x104>)
 8007048:	699a      	ldr	r2, [r3, #24]
 800704a:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 800704e:	619a      	str	r2, [r3, #24]
 8007050:	699b      	ldr	r3, [r3, #24]
 8007052:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8007056:	9301      	str	r3, [sp, #4]
 8007058:	4b31      	ldr	r3, [pc, #196]	; (8007120 <_ZN11BusAnalizer18SystemClock_ConfigEv+0x108>)
 800705a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800705c:	f042 0201 	orr.w	r2, r2, #1
 8007060:	62da      	str	r2, [r3, #44]	; 0x2c
 8007062:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007064:	f003 0301 	and.w	r3, r3, #1
 8007068:	9301      	str	r3, [sp, #4]
 800706a:	9b01      	ldr	r3, [sp, #4]
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 800706c:	4b2b      	ldr	r3, [pc, #172]	; (800711c <_ZN11BusAnalizer18SystemClock_ConfigEv+0x104>)
 800706e:	699b      	ldr	r3, [r3, #24]
 8007070:	f413 5f00 	tst.w	r3, #8192	; 0x2000
 8007074:	d0fa      	beq.n	800706c <_ZN11BusAnalizer18SystemClock_ConfigEv+0x54>
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 8007076:	2309      	movs	r3, #9
 8007078:	9339      	str	r3, [sp, #228]	; 0xe4
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800707a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800707e:	933a      	str	r3, [sp, #232]	; 0xe8
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8007080:	2201      	movs	r2, #1
 8007082:	923e      	str	r2, [sp, #248]	; 0xf8
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8007084:	2302      	movs	r3, #2
 8007086:	9342      	str	r3, [sp, #264]	; 0x108
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8007088:	9343      	str	r3, [sp, #268]	; 0x10c
  RCC_OscInitStruct.PLL.PLLM = 1;
 800708a:	9244      	str	r2, [sp, #272]	; 0x110
  RCC_OscInitStruct.PLL.PLLN = 120;
 800708c:	2278      	movs	r2, #120	; 0x78
 800708e:	9245      	str	r2, [sp, #276]	; 0x114
  RCC_OscInitStruct.PLL.PLLP = 2;
 8007090:	9346      	str	r3, [sp, #280]	; 0x118
  RCC_OscInitStruct.PLL.PLLQ = 20;
 8007092:	2214      	movs	r2, #20
 8007094:	9247      	str	r2, [sp, #284]	; 0x11c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8007096:	9348      	str	r3, [sp, #288]	; 0x120
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8007098:	230c      	movs	r3, #12
 800709a:	9349      	str	r3, [sp, #292]	; 0x124
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 800709c:	2300      	movs	r3, #0
 800709e:	934a      	str	r3, [sp, #296]	; 0x128
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 80070a0:	934b      	str	r3, [sp, #300]	; 0x12c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80070a2:	a839      	add	r0, sp, #228	; 0xe4
 80070a4:	f7fb f95c 	bl	8002360 <HAL_RCC_OscConfig>
 80070a8:	bb58      	cbnz	r0, 8007102 <_ZN11BusAnalizer18SystemClock_ConfigEv+0xea>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80070aa:	233f      	movs	r3, #63	; 0x3f
 80070ac:	9331      	str	r3, [sp, #196]	; 0xc4
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80070ae:	2303      	movs	r3, #3
 80070b0:	9332      	str	r3, [sp, #200]	; 0xc8
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 80070b2:	2300      	movs	r3, #0
 80070b4:	9333      	str	r3, [sp, #204]	; 0xcc
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 80070b6:	2308      	movs	r3, #8
 80070b8:	9334      	str	r3, [sp, #208]	; 0xd0
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 80070ba:	2340      	movs	r3, #64	; 0x40
 80070bc:	9335      	str	r3, [sp, #212]	; 0xd4
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV16;
 80070be:	2270      	movs	r2, #112	; 0x70
 80070c0:	9236      	str	r2, [sp, #216]	; 0xd8
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 80070c2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80070c6:	9237      	str	r2, [sp, #220]	; 0xdc
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 80070c8:	9338      	str	r3, [sp, #224]	; 0xe0
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80070ca:	2104      	movs	r1, #4
 80070cc:	a831      	add	r0, sp, #196	; 0xc4
 80070ce:	f7fb fd67 	bl	8002ba0 <HAL_RCC_ClockConfig>
 80070d2:	b9d0      	cbnz	r0, 800710a <_ZN11BusAnalizer18SystemClock_ConfigEv+0xf2>
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC|RCC_PERIPHCLK_FDCAN
 80070d4:	4b13      	ldr	r3, [pc, #76]	; (8007124 <_ZN11BusAnalizer18SystemClock_ConfigEv+0x10c>)
 80070d6:	9302      	str	r3, [sp, #8]
  PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 80070d8:	2300      	movs	r3, #0
 80070da:	9319      	str	r3, [sp, #100]	; 0x64
  PeriphClkInitStruct.FdcanClockSelection = RCC_FDCANCLKSOURCE_PLL;
 80070dc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80070e0:	921d      	str	r2, [sp, #116]	; 0x74
  PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16CLKSOURCE_D2PCLK2;
 80070e2:	9320      	str	r3, [sp, #128]	; 0x80
  PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C123CLKSOURCE_D2PCLK1;
 80070e4:	9322      	str	r3, [sp, #136]	; 0x88
  PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_PLL;
 80070e6:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80070ea:	9323      	str	r3, [sp, #140]	; 0x8c
  PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 80070ec:	f44f 7300 	mov.w	r3, #512	; 0x200
 80070f0:	932e      	str	r3, [sp, #184]	; 0xb8
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80070f2:	a802      	add	r0, sp, #8
 80070f4:	f7fc f81a 	bl	800312c <HAL_RCCEx_PeriphCLKConfig>
 80070f8:	b958      	cbnz	r0, 8007112 <_ZN11BusAnalizer18SystemClock_ConfigEv+0xfa>
  HAL_PWREx_EnableUSBVoltageDetector();
 80070fa:	f7fb f929 	bl	8002350 <HAL_PWREx_EnableUSBVoltageDetector>
}
 80070fe:	b04c      	add	sp, #304	; 0x130
 8007100:	bd10      	pop	{r4, pc}
    Error_Handler();
 8007102:	4620      	mov	r0, r4
 8007104:	f7ff fef8 	bl	8006ef8 <_ZN11BusAnalizer13Error_HandlerEv>
 8007108:	e7cf      	b.n	80070aa <_ZN11BusAnalizer18SystemClock_ConfigEv+0x92>
    Error_Handler();
 800710a:	4620      	mov	r0, r4
 800710c:	f7ff fef4 	bl	8006ef8 <_ZN11BusAnalizer13Error_HandlerEv>
 8007110:	e7e0      	b.n	80070d4 <_ZN11BusAnalizer18SystemClock_ConfigEv+0xbc>
    Error_Handler();
 8007112:	4620      	mov	r0, r4
 8007114:	f7ff fef0 	bl	8006ef8 <_ZN11BusAnalizer13Error_HandlerEv>
 8007118:	e7ef      	b.n	80070fa <_ZN11BusAnalizer18SystemClock_ConfigEv+0xe2>
 800711a:	bf00      	nop
 800711c:	58024800 	.word	0x58024800
 8007120:	58000400 	.word	0x58000400
 8007124:	00449009 	.word	0x00449009

08007128 <_ZN11BusAnalizer14MX_FDCAN1_InitEv>:
{
 8007128:	b570      	push	{r4, r5, r6, lr}
 800712a:	b08a      	sub	sp, #40	; 0x28
 800712c:	4604      	mov	r4, r0
  hfdcan1.Instance = FDCAN1;
 800712e:	482e      	ldr	r0, [pc, #184]	; (80071e8 <_ZN11BusAnalizer14MX_FDCAN1_InitEv+0xc0>)
 8007130:	4b2e      	ldr	r3, [pc, #184]	; (80071ec <_ZN11BusAnalizer14MX_FDCAN1_InitEv+0xc4>)
 8007132:	6003      	str	r3, [r0, #0]
  hfdcan1.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 8007134:	2300      	movs	r3, #0
 8007136:	6083      	str	r3, [r0, #8]
  hfdcan1.Init.Mode = FDCAN_MODE_EXTERNAL_LOOPBACK;
 8007138:	2204      	movs	r2, #4
 800713a:	60c2      	str	r2, [r0, #12]
  hfdcan1.Init.AutoRetransmission = ENABLE;
 800713c:	2101      	movs	r1, #1
 800713e:	7401      	strb	r1, [r0, #16]
  hfdcan1.Init.TransmitPause = DISABLE;
 8007140:	7443      	strb	r3, [r0, #17]
  hfdcan1.Init.ProtocolException = ENABLE;
 8007142:	7481      	strb	r1, [r0, #18]
  hfdcan1.Init.NominalPrescaler = 2;
 8007144:	2602      	movs	r6, #2
 8007146:	6146      	str	r6, [r0, #20]
  hfdcan1.Init.NominalSyncJumpWidth = 1;
 8007148:	6181      	str	r1, [r0, #24]
  hfdcan1.Init.NominalTimeSeg1 = 4;
 800714a:	61c2      	str	r2, [r0, #28]
  hfdcan1.Init.NominalTimeSeg2 = 3;
 800714c:	2503      	movs	r5, #3
 800714e:	6205      	str	r5, [r0, #32]
  hfdcan1.Init.DataPrescaler = 2;
 8007150:	6246      	str	r6, [r0, #36]	; 0x24
  hfdcan1.Init.DataSyncJumpWidth = 1;
 8007152:	6281      	str	r1, [r0, #40]	; 0x28
  hfdcan1.Init.DataTimeSeg1 = 4;
 8007154:	62c2      	str	r2, [r0, #44]	; 0x2c
  hfdcan1.Init.DataTimeSeg2 = 3;
 8007156:	6305      	str	r5, [r0, #48]	; 0x30
  hfdcan1.Init.MessageRAMOffset = 0;
 8007158:	6343      	str	r3, [r0, #52]	; 0x34
  hfdcan1.Init.StdFiltersNbr = 0;
 800715a:	6383      	str	r3, [r0, #56]	; 0x38
  hfdcan1.Init.ExtFiltersNbr = 0;
 800715c:	63c3      	str	r3, [r0, #60]	; 0x3c
  hfdcan1.Init.RxFifo0ElmtsNbr = 64;
 800715e:	2140      	movs	r1, #64	; 0x40
 8007160:	6401      	str	r1, [r0, #64]	; 0x40
  hfdcan1.Init.RxFifo0ElmtSize = FDCAN_DATA_BYTES_8;
 8007162:	6442      	str	r2, [r0, #68]	; 0x44
  hfdcan1.Init.RxFifo1ElmtsNbr = 64;
 8007164:	6481      	str	r1, [r0, #72]	; 0x48
  hfdcan1.Init.RxFifo1ElmtSize = FDCAN_DATA_BYTES_8;
 8007166:	64c2      	str	r2, [r0, #76]	; 0x4c
  hfdcan1.Init.RxBuffersNbr = 0;
 8007168:	6503      	str	r3, [r0, #80]	; 0x50
  hfdcan1.Init.RxBufferSize = FDCAN_DATA_BYTES_8;
 800716a:	6542      	str	r2, [r0, #84]	; 0x54
  hfdcan1.Init.TxEventsNbr = 0;
 800716c:	6583      	str	r3, [r0, #88]	; 0x58
  hfdcan1.Init.TxBuffersNbr = 0;
 800716e:	65c3      	str	r3, [r0, #92]	; 0x5c
  hfdcan1.Init.TxFifoQueueElmtsNbr = 32;
 8007170:	2120      	movs	r1, #32
 8007172:	6601      	str	r1, [r0, #96]	; 0x60
  hfdcan1.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 8007174:	6643      	str	r3, [r0, #100]	; 0x64
  hfdcan1.Init.TxElmtSize = FDCAN_DATA_BYTES_8;
 8007176:	6682      	str	r2, [r0, #104]	; 0x68
  if (HAL_FDCAN_Init(&hfdcan1) != HAL_OK)
 8007178:	f7f9 fc56 	bl	8000a28 <HAL_FDCAN_Init>
 800717c:	bb18      	cbnz	r0, 80071c6 <_ZN11BusAnalizer14MX_FDCAN1_InitEv+0x9e>
    sFilterConfig.IdType = FDCAN_STANDARD_ID;
 800717e:	2300      	movs	r3, #0
 8007180:	9302      	str	r3, [sp, #8]
    sFilterConfig.FilterIndex = 0;
 8007182:	9303      	str	r3, [sp, #12]
    sFilterConfig.FilterType = FDCAN_FILTER_MASK;
 8007184:	2302      	movs	r3, #2
 8007186:	9304      	str	r3, [sp, #16]
    sFilterConfig.FilterConfig = FDCAN_FILTER_TO_RXFIFO0;
 8007188:	2301      	movs	r3, #1
 800718a:	9305      	str	r3, [sp, #20]
    sFilterConfig.FilterID1 = 0x7FF;
 800718c:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8007190:	9306      	str	r3, [sp, #24]
    sFilterConfig.FilterID2 = 0x7FF;
 8007192:	9307      	str	r3, [sp, #28]
    if (HAL_FDCAN_ConfigFilter(&hfdcan1, &sFilterConfig) != HAL_OK)
 8007194:	a902      	add	r1, sp, #8
 8007196:	4814      	ldr	r0, [pc, #80]	; (80071e8 <_ZN11BusAnalizer14MX_FDCAN1_InitEv+0xc0>)
 8007198:	f7f9 fd90 	bl	8000cbc <HAL_FDCAN_ConfigFilter>
 800719c:	b9b8      	cbnz	r0, 80071ce <_ZN11BusAnalizer14MX_FDCAN1_InitEv+0xa6>
    HAL_FDCAN_ConfigGlobalFilter(&hfdcan1, FDCAN_ACCEPT_IN_RX_FIFO0, FDCAN_ACCEPT_IN_RX_FIFO0, FDCAN_REJECT_REMOTE, FDCAN_REJECT_REMOTE);
 800719e:	4d12      	ldr	r5, [pc, #72]	; (80071e8 <_ZN11BusAnalizer14MX_FDCAN1_InitEv+0xc0>)
 80071a0:	2301      	movs	r3, #1
 80071a2:	9300      	str	r3, [sp, #0]
 80071a4:	2200      	movs	r2, #0
 80071a6:	4611      	mov	r1, r2
 80071a8:	4628      	mov	r0, r5
 80071aa:	f7f9 fdca 	bl	8000d42 <HAL_FDCAN_ConfigGlobalFilter>
	if (HAL_FDCAN_Start(&hfdcan1) != HAL_OK)
 80071ae:	4628      	mov	r0, r5
 80071b0:	f7f9 fde3 	bl	8000d7a <HAL_FDCAN_Start>
 80071b4:	b978      	cbnz	r0, 80071d6 <_ZN11BusAnalizer14MX_FDCAN1_InitEv+0xae>
	if (HAL_FDCAN_ActivateNotification(&hfdcan1, FDCAN_IT_RX_FIFO0_NEW_MESSAGE, 0) != HAL_OK)
 80071b6:	2200      	movs	r2, #0
 80071b8:	2101      	movs	r1, #1
 80071ba:	480b      	ldr	r0, [pc, #44]	; (80071e8 <_ZN11BusAnalizer14MX_FDCAN1_InitEv+0xc0>)
 80071bc:	f7f9 ff16 	bl	8000fec <HAL_FDCAN_ActivateNotification>
 80071c0:	b968      	cbnz	r0, 80071de <_ZN11BusAnalizer14MX_FDCAN1_InitEv+0xb6>
}
 80071c2:	b00a      	add	sp, #40	; 0x28
 80071c4:	bd70      	pop	{r4, r5, r6, pc}
    Error_Handler();
 80071c6:	4620      	mov	r0, r4
 80071c8:	f7ff fe96 	bl	8006ef8 <_ZN11BusAnalizer13Error_HandlerEv>
 80071cc:	e7d7      	b.n	800717e <_ZN11BusAnalizer14MX_FDCAN1_InitEv+0x56>
      Error_Handler();
 80071ce:	4620      	mov	r0, r4
 80071d0:	f7ff fe92 	bl	8006ef8 <_ZN11BusAnalizer13Error_HandlerEv>
 80071d4:	e7e3      	b.n	800719e <_ZN11BusAnalizer14MX_FDCAN1_InitEv+0x76>
	Error_Handler();
 80071d6:	4620      	mov	r0, r4
 80071d8:	f7ff fe8e 	bl	8006ef8 <_ZN11BusAnalizer13Error_HandlerEv>
 80071dc:	e7eb      	b.n	80071b6 <_ZN11BusAnalizer14MX_FDCAN1_InitEv+0x8e>
	Error_Handler();
 80071de:	4620      	mov	r0, r4
 80071e0:	f7ff fe8a 	bl	8006ef8 <_ZN11BusAnalizer13Error_HandlerEv>
}
 80071e4:	e7ed      	b.n	80071c2 <_ZN11BusAnalizer14MX_FDCAN1_InitEv+0x9a>
 80071e6:	bf00      	nop
 80071e8:	20000208 	.word	0x20000208
 80071ec:	4000a000 	.word	0x4000a000

080071f0 <_ZN11BusAnalizer14MX_FDCAN2_InitEv>:
{
 80071f0:	b510      	push	{r4, lr}
 80071f2:	4604      	mov	r4, r0
  hfdcan2.Instance = FDCAN2;
 80071f4:	4b24      	ldr	r3, [pc, #144]	; (8007288 <_ZN11BusAnalizer14MX_FDCAN2_InitEv+0x98>)
 80071f6:	4a25      	ldr	r2, [pc, #148]	; (800728c <_ZN11BusAnalizer14MX_FDCAN2_InitEv+0x9c>)
 80071f8:	f8c3 20ec 	str.w	r2, [r3, #236]	; 0xec
  hfdcan2.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 80071fc:	2200      	movs	r2, #0
 80071fe:	f8c3 20f4 	str.w	r2, [r3, #244]	; 0xf4
  hfdcan2.Init.Mode = FDCAN_MODE_NORMAL;
 8007202:	f8c3 20f8 	str.w	r2, [r3, #248]	; 0xf8
  hfdcan2.Init.AutoRetransmission = DISABLE;
 8007206:	f883 20fc 	strb.w	r2, [r3, #252]	; 0xfc
  hfdcan2.Init.TransmitPause = DISABLE;
 800720a:	f883 20fd 	strb.w	r2, [r3, #253]	; 0xfd
  hfdcan2.Init.ProtocolException = DISABLE;
 800720e:	f883 20fe 	strb.w	r2, [r3, #254]	; 0xfe
  hfdcan2.Init.NominalPrescaler = 1;
 8007212:	2101      	movs	r1, #1
 8007214:	f8c3 1100 	str.w	r1, [r3, #256]	; 0x100
  hfdcan2.Init.NominalSyncJumpWidth = 1;
 8007218:	f8c3 1104 	str.w	r1, [r3, #260]	; 0x104
  hfdcan2.Init.NominalTimeSeg1 = 2;
 800721c:	2002      	movs	r0, #2
 800721e:	f8c3 0108 	str.w	r0, [r3, #264]	; 0x108
  hfdcan2.Init.NominalTimeSeg2 = 2;
 8007222:	f8c3 010c 	str.w	r0, [r3, #268]	; 0x10c
  hfdcan2.Init.DataPrescaler = 1;
 8007226:	f8c3 1110 	str.w	r1, [r3, #272]	; 0x110
  hfdcan2.Init.DataSyncJumpWidth = 1;
 800722a:	f8c3 1114 	str.w	r1, [r3, #276]	; 0x114
  hfdcan2.Init.DataTimeSeg1 = 1;
 800722e:	f8c3 1118 	str.w	r1, [r3, #280]	; 0x118
  hfdcan2.Init.DataTimeSeg2 = 1;
 8007232:	f8c3 111c 	str.w	r1, [r3, #284]	; 0x11c
  hfdcan2.Init.MessageRAMOffset = 0;
 8007236:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
  hfdcan2.Init.StdFiltersNbr = 0;
 800723a:	f8c3 2124 	str.w	r2, [r3, #292]	; 0x124
  hfdcan2.Init.ExtFiltersNbr = 0;
 800723e:	f8c3 2128 	str.w	r2, [r3, #296]	; 0x128
  hfdcan2.Init.RxFifo0ElmtsNbr = 20;
 8007242:	2014      	movs	r0, #20
 8007244:	f8c3 012c 	str.w	r0, [r3, #300]	; 0x12c
  hfdcan2.Init.RxFifo0ElmtSize = FDCAN_DATA_BYTES_8;
 8007248:	2104      	movs	r1, #4
 800724a:	f8c3 1130 	str.w	r1, [r3, #304]	; 0x130
  hfdcan2.Init.RxFifo1ElmtsNbr = 20;
 800724e:	f8c3 0134 	str.w	r0, [r3, #308]	; 0x134
  hfdcan2.Init.RxFifo1ElmtSize = FDCAN_DATA_BYTES_8;
 8007252:	f8c3 1138 	str.w	r1, [r3, #312]	; 0x138
  hfdcan2.Init.RxBuffersNbr = 0;
 8007256:	f8c3 213c 	str.w	r2, [r3, #316]	; 0x13c
  hfdcan2.Init.RxBufferSize = FDCAN_DATA_BYTES_8;
 800725a:	f8c3 1140 	str.w	r1, [r3, #320]	; 0x140
  hfdcan2.Init.TxEventsNbr = 0;
 800725e:	f8c3 2144 	str.w	r2, [r3, #324]	; 0x144
  hfdcan2.Init.TxBuffersNbr = 0;
 8007262:	f8c3 2148 	str.w	r2, [r3, #328]	; 0x148
  hfdcan2.Init.TxFifoQueueElmtsNbr = 10;
 8007266:	200a      	movs	r0, #10
 8007268:	f8c3 014c 	str.w	r0, [r3, #332]	; 0x14c
  hfdcan2.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 800726c:	f8c3 2150 	str.w	r2, [r3, #336]	; 0x150
  hfdcan2.Init.TxElmtSize = FDCAN_DATA_BYTES_8;
 8007270:	f8c3 1154 	str.w	r1, [r3, #340]	; 0x154
  if (HAL_FDCAN_Init(&hfdcan2) != HAL_OK)
 8007274:	f103 00ec 	add.w	r0, r3, #236	; 0xec
 8007278:	f7f9 fbd6 	bl	8000a28 <HAL_FDCAN_Init>
 800727c:	b900      	cbnz	r0, 8007280 <_ZN11BusAnalizer14MX_FDCAN2_InitEv+0x90>
}
 800727e:	bd10      	pop	{r4, pc}
    Error_Handler();
 8007280:	4620      	mov	r0, r4
 8007282:	f7ff fe39 	bl	8006ef8 <_ZN11BusAnalizer13Error_HandlerEv>
}
 8007286:	e7fa      	b.n	800727e <_ZN11BusAnalizer14MX_FDCAN2_InitEv+0x8e>
 8007288:	20000208 	.word	0x20000208
 800728c:	4000a400 	.word	0x4000a400

08007290 <_ZN11BusAnalizer12MX_I2C1_InitEv>:
{
 8007290:	b510      	push	{r4, lr}
 8007292:	4604      	mov	r4, r0
  hi2c1.Instance = I2C1;
 8007294:	4819      	ldr	r0, [pc, #100]	; (80072fc <_ZN11BusAnalizer12MX_I2C1_InitEv+0x6c>)
 8007296:	4a1a      	ldr	r2, [pc, #104]	; (8007300 <_ZN11BusAnalizer12MX_I2C1_InitEv+0x70>)
 8007298:	f8c0 218c 	str.w	r2, [r0, #396]	; 0x18c
  hi2c1.Init.Timing = 0x00303956;
 800729c:	4a19      	ldr	r2, [pc, #100]	; (8007304 <_ZN11BusAnalizer12MX_I2C1_InitEv+0x74>)
 800729e:	f8c0 2190 	str.w	r2, [r0, #400]	; 0x190
  hi2c1.Init.OwnAddress1 = 0;
 80072a2:	2200      	movs	r2, #0
 80072a4:	f8c0 2194 	str.w	r2, [r0, #404]	; 0x194
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80072a8:	2101      	movs	r1, #1
 80072aa:	f8c0 1198 	str.w	r1, [r0, #408]	; 0x198
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80072ae:	f8c0 219c 	str.w	r2, [r0, #412]	; 0x19c
  hi2c1.Init.OwnAddress2 = 0;
 80072b2:	f8c0 21a0 	str.w	r2, [r0, #416]	; 0x1a0
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80072b6:	f8c0 21a4 	str.w	r2, [r0, #420]	; 0x1a4
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80072ba:	f8c0 21a8 	str.w	r2, [r0, #424]	; 0x1a8
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80072be:	f8c0 21ac 	str.w	r2, [r0, #428]	; 0x1ac
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80072c2:	f500 70c6 	add.w	r0, r0, #396	; 0x18c
 80072c6:	f7fa f971 	bl	80015ac <HAL_I2C_Init>
 80072ca:	b950      	cbnz	r0, 80072e2 <_ZN11BusAnalizer12MX_I2C1_InitEv+0x52>
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80072cc:	2100      	movs	r1, #0
 80072ce:	480e      	ldr	r0, [pc, #56]	; (8007308 <_ZN11BusAnalizer12MX_I2C1_InitEv+0x78>)
 80072d0:	f7fa f9ca 	bl	8001668 <HAL_I2CEx_ConfigAnalogFilter>
 80072d4:	b948      	cbnz	r0, 80072ea <_ZN11BusAnalizer12MX_I2C1_InitEv+0x5a>
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80072d6:	2100      	movs	r1, #0
 80072d8:	480b      	ldr	r0, [pc, #44]	; (8007308 <_ZN11BusAnalizer12MX_I2C1_InitEv+0x78>)
 80072da:	f7fa f9f3 	bl	80016c4 <HAL_I2CEx_ConfigDigitalFilter>
 80072de:	b940      	cbnz	r0, 80072f2 <_ZN11BusAnalizer12MX_I2C1_InitEv+0x62>
}
 80072e0:	bd10      	pop	{r4, pc}
    Error_Handler();
 80072e2:	4620      	mov	r0, r4
 80072e4:	f7ff fe08 	bl	8006ef8 <_ZN11BusAnalizer13Error_HandlerEv>
 80072e8:	e7f0      	b.n	80072cc <_ZN11BusAnalizer12MX_I2C1_InitEv+0x3c>
    Error_Handler();
 80072ea:	4620      	mov	r0, r4
 80072ec:	f7ff fe04 	bl	8006ef8 <_ZN11BusAnalizer13Error_HandlerEv>
 80072f0:	e7f1      	b.n	80072d6 <_ZN11BusAnalizer12MX_I2C1_InitEv+0x46>
    Error_Handler();
 80072f2:	4620      	mov	r0, r4
 80072f4:	f7ff fe00 	bl	8006ef8 <_ZN11BusAnalizer13Error_HandlerEv>
}
 80072f8:	e7f2      	b.n	80072e0 <_ZN11BusAnalizer12MX_I2C1_InitEv+0x50>
 80072fa:	bf00      	nop
 80072fc:	20000208 	.word	0x20000208
 8007300:	40005400 	.word	0x40005400
 8007304:	00303956 	.word	0x00303956
 8007308:	20000394 	.word	0x20000394

0800730c <_ZN11BusAnalizer11MX_RTC_InitEv>:
{
 800730c:	b510      	push	{r4, lr}
 800730e:	b086      	sub	sp, #24
 8007310:	4604      	mov	r4, r0
  RTC_TimeTypeDef sTime = {0};
 8007312:	2300      	movs	r3, #0
 8007314:	9301      	str	r3, [sp, #4]
 8007316:	9302      	str	r3, [sp, #8]
 8007318:	9303      	str	r3, [sp, #12]
 800731a:	9304      	str	r3, [sp, #16]
 800731c:	9305      	str	r3, [sp, #20]
  RTC_DateTypeDef sDate = {0};
 800731e:	9300      	str	r3, [sp, #0]
  hrtc.Instance = RTC;
 8007320:	4822      	ldr	r0, [pc, #136]	; (80073ac <_ZN11BusAnalizer11MX_RTC_InitEv+0xa0>)
 8007322:	4923      	ldr	r1, [pc, #140]	; (80073b0 <_ZN11BusAnalizer11MX_RTC_InitEv+0xa4>)
 8007324:	f8c0 11d8 	str.w	r1, [r0, #472]	; 0x1d8
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8007328:	f8c0 31dc 	str.w	r3, [r0, #476]	; 0x1dc
  hrtc.Init.AsynchPrediv = 127;
 800732c:	217f      	movs	r1, #127	; 0x7f
 800732e:	f8c0 11e0 	str.w	r1, [r0, #480]	; 0x1e0
  hrtc.Init.SynchPrediv = 255;
 8007332:	21ff      	movs	r1, #255	; 0xff
 8007334:	f8c0 11e4 	str.w	r1, [r0, #484]	; 0x1e4
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8007338:	f8c0 31e8 	str.w	r3, [r0, #488]	; 0x1e8
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 800733c:	f8c0 31f0 	str.w	r3, [r0, #496]	; 0x1f0
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8007340:	f8c0 31f4 	str.w	r3, [r0, #500]	; 0x1f4
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8007344:	f8c0 31ec 	str.w	r3, [r0, #492]	; 0x1ec
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8007348:	f500 70ec 	add.w	r0, r0, #472	; 0x1d8
 800734c:	f7fc fe32 	bl	8003fb4 <HAL_RTC_Init>
 8007350:	b9f8      	cbnz	r0, 8007392 <_ZN11BusAnalizer11MX_RTC_InitEv+0x86>
  sTime.Hours = 0x0;
 8007352:	2300      	movs	r3, #0
 8007354:	f88d 3004 	strb.w	r3, [sp, #4]
  sTime.Minutes = 0x0;
 8007358:	f88d 3005 	strb.w	r3, [sp, #5]
  sTime.Seconds = 0x0;
 800735c:	f88d 3006 	strb.w	r3, [sp, #6]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8007360:	9304      	str	r3, [sp, #16]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8007362:	9305      	str	r3, [sp, #20]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8007364:	2201      	movs	r2, #1
 8007366:	a901      	add	r1, sp, #4
 8007368:	4812      	ldr	r0, [pc, #72]	; (80073b4 <_ZN11BusAnalizer11MX_RTC_InitEv+0xa8>)
 800736a:	f7fc fe7b 	bl	8004064 <HAL_RTC_SetTime>
 800736e:	b9a0      	cbnz	r0, 800739a <_ZN11BusAnalizer11MX_RTC_InitEv+0x8e>
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8007370:	2201      	movs	r2, #1
 8007372:	f88d 2000 	strb.w	r2, [sp]
  sDate.Month = RTC_MONTH_JANUARY;
 8007376:	f88d 2001 	strb.w	r2, [sp, #1]
  sDate.Date = 0x1;
 800737a:	f88d 2002 	strb.w	r2, [sp, #2]
  sDate.Year = 0x0;
 800737e:	2300      	movs	r3, #0
 8007380:	f88d 3003 	strb.w	r3, [sp, #3]
  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 8007384:	4669      	mov	r1, sp
 8007386:	480b      	ldr	r0, [pc, #44]	; (80073b4 <_ZN11BusAnalizer11MX_RTC_InitEv+0xa8>)
 8007388:	f7fc fed0 	bl	800412c <HAL_RTC_SetDate>
 800738c:	b948      	cbnz	r0, 80073a2 <_ZN11BusAnalizer11MX_RTC_InitEv+0x96>
}
 800738e:	b006      	add	sp, #24
 8007390:	bd10      	pop	{r4, pc}
    Error_Handler();
 8007392:	4620      	mov	r0, r4
 8007394:	f7ff fdb0 	bl	8006ef8 <_ZN11BusAnalizer13Error_HandlerEv>
 8007398:	e7db      	b.n	8007352 <_ZN11BusAnalizer11MX_RTC_InitEv+0x46>
    Error_Handler();
 800739a:	4620      	mov	r0, r4
 800739c:	f7ff fdac 	bl	8006ef8 <_ZN11BusAnalizer13Error_HandlerEv>
 80073a0:	e7e6      	b.n	8007370 <_ZN11BusAnalizer11MX_RTC_InitEv+0x64>
    Error_Handler();
 80073a2:	4620      	mov	r0, r4
 80073a4:	f7ff fda8 	bl	8006ef8 <_ZN11BusAnalizer13Error_HandlerEv>
}
 80073a8:	e7f1      	b.n	800738e <_ZN11BusAnalizer11MX_RTC_InitEv+0x82>
 80073aa:	bf00      	nop
 80073ac:	20000208 	.word	0x20000208
 80073b0:	58004000 	.word	0x58004000
 80073b4:	200003e0 	.word	0x200003e0

080073b8 <_ZN11BusAnalizer12MX_SPI1_InitEv>:
{
 80073b8:	b510      	push	{r4, lr}
 80073ba:	4604      	mov	r4, r0
  hspi1.Instance = SPI1;
 80073bc:	481c      	ldr	r0, [pc, #112]	; (8007430 <_ZN11BusAnalizer12MX_SPI1_InitEv+0x78>)
 80073be:	4a1d      	ldr	r2, [pc, #116]	; (8007434 <_ZN11BusAnalizer12MX_SPI1_InitEv+0x7c>)
 80073c0:	f8c0 21fc 	str.w	r2, [r0, #508]	; 0x1fc
  hspi1.Init.Mode = SPI_MODE_SLAVE;
 80073c4:	2200      	movs	r2, #0
 80073c6:	f8c0 2200 	str.w	r2, [r0, #512]	; 0x200
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80073ca:	f8c0 2204 	str.w	r2, [r0, #516]	; 0x204
  hspi1.Init.DataSize = SPI_DATASIZE_4BIT;
 80073ce:	2103      	movs	r1, #3
 80073d0:	f8c0 1208 	str.w	r1, [r0, #520]	; 0x208
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80073d4:	f8c0 220c 	str.w	r2, [r0, #524]	; 0x20c
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80073d8:	f8c0 2210 	str.w	r2, [r0, #528]	; 0x210
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80073dc:	f04f 6180 	mov.w	r1, #67108864	; 0x4000000
 80073e0:	f8c0 1214 	str.w	r1, [r0, #532]	; 0x214
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80073e4:	f8c0 221c 	str.w	r2, [r0, #540]	; 0x21c
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80073e8:	f8c0 2220 	str.w	r2, [r0, #544]	; 0x220
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80073ec:	f8c0 2224 	str.w	r2, [r0, #548]	; 0x224
  hspi1.Init.CRCPolynomial = 0x0;
 80073f0:	f8c0 2228 	str.w	r2, [r0, #552]	; 0x228
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 80073f4:	f8c0 2230 	str.w	r2, [r0, #560]	; 0x230
  hspi1.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 80073f8:	f8c0 2234 	str.w	r2, [r0, #564]	; 0x234
  hspi1.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 80073fc:	f8c0 2238 	str.w	r2, [r0, #568]	; 0x238
  hspi1.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8007400:	f8c0 223c 	str.w	r2, [r0, #572]	; 0x23c
  hspi1.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8007404:	f8c0 2240 	str.w	r2, [r0, #576]	; 0x240
  hspi1.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8007408:	f8c0 2244 	str.w	r2, [r0, #580]	; 0x244
  hspi1.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 800740c:	f8c0 2248 	str.w	r2, [r0, #584]	; 0x248
  hspi1.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8007410:	f8c0 224c 	str.w	r2, [r0, #588]	; 0x24c
  hspi1.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8007414:	f8c0 2250 	str.w	r2, [r0, #592]	; 0x250
  hspi1.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8007418:	f8c0 2254 	str.w	r2, [r0, #596]	; 0x254
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800741c:	f500 70fe 	add.w	r0, r0, #508	; 0x1fc
 8007420:	f7fc fee0 	bl	80041e4 <HAL_SPI_Init>
 8007424:	b900      	cbnz	r0, 8007428 <_ZN11BusAnalizer12MX_SPI1_InitEv+0x70>
}
 8007426:	bd10      	pop	{r4, pc}
    Error_Handler();
 8007428:	4620      	mov	r0, r4
 800742a:	f7ff fd65 	bl	8006ef8 <_ZN11BusAnalizer13Error_HandlerEv>
}
 800742e:	e7fa      	b.n	8007426 <_ZN11BusAnalizer12MX_SPI1_InitEv+0x6e>
 8007430:	20000208 	.word	0x20000208
 8007434:	40013000 	.word	0x40013000

08007438 <_ZN11BusAnalizer12MX_TIM2_InitEv>:
{
 8007438:	b510      	push	{r4, lr}
 800743a:	b08e      	sub	sp, #56	; 0x38
 800743c:	4604      	mov	r4, r0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800743e:	2300      	movs	r3, #0
 8007440:	930a      	str	r3, [sp, #40]	; 0x28
 8007442:	930b      	str	r3, [sp, #44]	; 0x2c
 8007444:	930c      	str	r3, [sp, #48]	; 0x30
 8007446:	930d      	str	r3, [sp, #52]	; 0x34
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8007448:	9307      	str	r3, [sp, #28]
 800744a:	9308      	str	r3, [sp, #32]
 800744c:	9309      	str	r3, [sp, #36]	; 0x24
  TIM_OC_InitTypeDef sConfigOC = {0};
 800744e:	9300      	str	r3, [sp, #0]
 8007450:	9301      	str	r3, [sp, #4]
 8007452:	9302      	str	r3, [sp, #8]
 8007454:	9303      	str	r3, [sp, #12]
 8007456:	9304      	str	r3, [sp, #16]
 8007458:	9305      	str	r3, [sp, #20]
 800745a:	9306      	str	r3, [sp, #24]
  htim2.Instance = TIM2;
 800745c:	4824      	ldr	r0, [pc, #144]	; (80074f0 <_ZN11BusAnalizer12MX_TIM2_InitEv+0xb8>)
 800745e:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8007462:	f8c0 10a0 	str.w	r1, [r0, #160]	; 0xa0
  htim2.Init.Prescaler = 29;
 8007466:	211d      	movs	r1, #29
 8007468:	f8c0 10a4 	str.w	r1, [r0, #164]	; 0xa4
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800746c:	f8c0 30a8 	str.w	r3, [r0, #168]	; 0xa8
  htim2.Init.Period = 0xFFFFFFFF;
 8007470:	f04f 31ff 	mov.w	r1, #4294967295
 8007474:	f8c0 10ac 	str.w	r1, [r0, #172]	; 0xac
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8007478:	f8c0 30b0 	str.w	r3, [r0, #176]	; 0xb0
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800747c:	f8c0 30b8 	str.w	r3, [r0, #184]	; 0xb8
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8007480:	30a0      	adds	r0, #160	; 0xa0
 8007482:	f7fd fa5b 	bl	800493c <HAL_TIM_Base_Init>
 8007486:	b9f8      	cbnz	r0, 80074c8 <_ZN11BusAnalizer12MX_TIM2_InitEv+0x90>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8007488:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800748c:	930a      	str	r3, [sp, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800748e:	a90a      	add	r1, sp, #40	; 0x28
 8007490:	4818      	ldr	r0, [pc, #96]	; (80074f4 <_ZN11BusAnalizer12MX_TIM2_InitEv+0xbc>)
 8007492:	f7fd fb3f 	bl	8004b14 <HAL_TIM_ConfigClockSource>
 8007496:	b9d8      	cbnz	r0, 80074d0 <_ZN11BusAnalizer12MX_TIM2_InitEv+0x98>
  if (HAL_TIM_OC_Init(&htim2) != HAL_OK)
 8007498:	4816      	ldr	r0, [pc, #88]	; (80074f4 <_ZN11BusAnalizer12MX_TIM2_InitEv+0xbc>)
 800749a:	f7fd fa7f 	bl	800499c <HAL_TIM_OC_Init>
 800749e:	b9d8      	cbnz	r0, 80074d8 <_ZN11BusAnalizer12MX_TIM2_InitEv+0xa0>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80074a0:	2300      	movs	r3, #0
 80074a2:	9307      	str	r3, [sp, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80074a4:	9309      	str	r3, [sp, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80074a6:	a907      	add	r1, sp, #28
 80074a8:	4812      	ldr	r0, [pc, #72]	; (80074f4 <_ZN11BusAnalizer12MX_TIM2_InitEv+0xbc>)
 80074aa:	f7fd fbb7 	bl	8004c1c <HAL_TIMEx_MasterConfigSynchronization>
 80074ae:	b9b8      	cbnz	r0, 80074e0 <_ZN11BusAnalizer12MX_TIM2_InitEv+0xa8>
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 80074b0:	2200      	movs	r2, #0
 80074b2:	9200      	str	r2, [sp, #0]
  sConfigOC.Pulse = 0;
 80074b4:	9201      	str	r2, [sp, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80074b6:	9202      	str	r2, [sp, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80074b8:	9204      	str	r2, [sp, #16]
  if (HAL_TIM_OC_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80074ba:	4669      	mov	r1, sp
 80074bc:	480d      	ldr	r0, [pc, #52]	; (80074f4 <_ZN11BusAnalizer12MX_TIM2_InitEv+0xbc>)
 80074be:	f7fd fae7 	bl	8004a90 <HAL_TIM_OC_ConfigChannel>
 80074c2:	b988      	cbnz	r0, 80074e8 <_ZN11BusAnalizer12MX_TIM2_InitEv+0xb0>
}
 80074c4:	b00e      	add	sp, #56	; 0x38
 80074c6:	bd10      	pop	{r4, pc}
    Error_Handler();
 80074c8:	4620      	mov	r0, r4
 80074ca:	f7ff fd15 	bl	8006ef8 <_ZN11BusAnalizer13Error_HandlerEv>
 80074ce:	e7db      	b.n	8007488 <_ZN11BusAnalizer12MX_TIM2_InitEv+0x50>
    Error_Handler();
 80074d0:	4620      	mov	r0, r4
 80074d2:	f7ff fd11 	bl	8006ef8 <_ZN11BusAnalizer13Error_HandlerEv>
 80074d6:	e7df      	b.n	8007498 <_ZN11BusAnalizer12MX_TIM2_InitEv+0x60>
    Error_Handler();
 80074d8:	4620      	mov	r0, r4
 80074da:	f7ff fd0d 	bl	8006ef8 <_ZN11BusAnalizer13Error_HandlerEv>
 80074de:	e7df      	b.n	80074a0 <_ZN11BusAnalizer12MX_TIM2_InitEv+0x68>
    Error_Handler();
 80074e0:	4620      	mov	r0, r4
 80074e2:	f7ff fd09 	bl	8006ef8 <_ZN11BusAnalizer13Error_HandlerEv>
 80074e6:	e7e3      	b.n	80074b0 <_ZN11BusAnalizer12MX_TIM2_InitEv+0x78>
    Error_Handler();
 80074e8:	4620      	mov	r0, r4
 80074ea:	f7ff fd05 	bl	8006ef8 <_ZN11BusAnalizer13Error_HandlerEv>
}
 80074ee:	e7e9      	b.n	80074c4 <_ZN11BusAnalizer12MX_TIM2_InitEv+0x8c>
 80074f0:	20000208 	.word	0x20000208
 80074f4:	200002a8 	.word	0x200002a8

080074f8 <_ZN11BusAnalizer19MX_USART1_UART_InitEv>:
{
 80074f8:	b510      	push	{r4, lr}
 80074fa:	4604      	mov	r4, r0
  huart1.Instance = USART1;
 80074fc:	481f      	ldr	r0, [pc, #124]	; (800757c <_ZN11BusAnalizer19MX_USART1_UART_InitEv+0x84>)
 80074fe:	4a20      	ldr	r2, [pc, #128]	; (8007580 <_ZN11BusAnalizer19MX_USART1_UART_InitEv+0x88>)
 8007500:	f8c0 2284 	str.w	r2, [r0, #644]	; 0x284
  huart1.Init.BaudRate = 115200;
 8007504:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8007508:	f8c0 2288 	str.w	r2, [r0, #648]	; 0x288
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800750c:	2100      	movs	r1, #0
 800750e:	f8c0 128c 	str.w	r1, [r0, #652]	; 0x28c
  huart1.Init.StopBits = UART_STOPBITS_1;
 8007512:	f8c0 1290 	str.w	r1, [r0, #656]	; 0x290
  huart1.Init.Parity = UART_PARITY_NONE;
 8007516:	f8c0 1294 	str.w	r1, [r0, #660]	; 0x294
  huart1.Init.Mode = UART_MODE_TX_RX;
 800751a:	220c      	movs	r2, #12
 800751c:	f8c0 2298 	str.w	r2, [r0, #664]	; 0x298
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8007520:	f8c0 129c 	str.w	r1, [r0, #668]	; 0x29c
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8007524:	f8c0 12a0 	str.w	r1, [r0, #672]	; 0x2a0
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8007528:	f8c0 12a4 	str.w	r1, [r0, #676]	; 0x2a4
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800752c:	f8c0 12a8 	str.w	r1, [r0, #680]	; 0x2a8
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8007530:	f8c0 12ac 	str.w	r1, [r0, #684]	; 0x2ac
  if (HAL_LIN_Init(&huart1, UART_LINBREAKDETECTLENGTH_10B) != HAL_OK)
 8007534:	f500 7021 	add.w	r0, r0, #644	; 0x284
 8007538:	f7fd ffb4 	bl	80054a4 <HAL_LIN_Init>
 800753c:	b970      	cbnz	r0, 800755c <_ZN11BusAnalizer19MX_USART1_UART_InitEv+0x64>
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800753e:	2100      	movs	r1, #0
 8007540:	4810      	ldr	r0, [pc, #64]	; (8007584 <_ZN11BusAnalizer19MX_USART1_UART_InitEv+0x8c>)
 8007542:	f7fe f852 	bl	80055ea <HAL_UARTEx_SetTxFifoThreshold>
 8007546:	b968      	cbnz	r0, 8007564 <_ZN11BusAnalizer19MX_USART1_UART_InitEv+0x6c>
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8007548:	2100      	movs	r1, #0
 800754a:	480e      	ldr	r0, [pc, #56]	; (8007584 <_ZN11BusAnalizer19MX_USART1_UART_InitEv+0x8c>)
 800754c:	f7fe f872 	bl	8005634 <HAL_UARTEx_SetRxFifoThreshold>
 8007550:	b960      	cbnz	r0, 800756c <_ZN11BusAnalizer19MX_USART1_UART_InitEv+0x74>
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8007552:	480c      	ldr	r0, [pc, #48]	; (8007584 <_ZN11BusAnalizer19MX_USART1_UART_InitEv+0x8c>)
 8007554:	f7fe f82a 	bl	80055ac <HAL_UARTEx_DisableFifoMode>
 8007558:	b960      	cbnz	r0, 8007574 <_ZN11BusAnalizer19MX_USART1_UART_InitEv+0x7c>
}
 800755a:	bd10      	pop	{r4, pc}
    Error_Handler();
 800755c:	4620      	mov	r0, r4
 800755e:	f7ff fccb 	bl	8006ef8 <_ZN11BusAnalizer13Error_HandlerEv>
 8007562:	e7ec      	b.n	800753e <_ZN11BusAnalizer19MX_USART1_UART_InitEv+0x46>
    Error_Handler();
 8007564:	4620      	mov	r0, r4
 8007566:	f7ff fcc7 	bl	8006ef8 <_ZN11BusAnalizer13Error_HandlerEv>
 800756a:	e7ed      	b.n	8007548 <_ZN11BusAnalizer19MX_USART1_UART_InitEv+0x50>
    Error_Handler();
 800756c:	4620      	mov	r0, r4
 800756e:	f7ff fcc3 	bl	8006ef8 <_ZN11BusAnalizer13Error_HandlerEv>
 8007572:	e7ee      	b.n	8007552 <_ZN11BusAnalizer19MX_USART1_UART_InitEv+0x5a>
    Error_Handler();
 8007574:	4620      	mov	r0, r4
 8007576:	f7ff fcbf 	bl	8006ef8 <_ZN11BusAnalizer13Error_HandlerEv>
}
 800757a:	e7ee      	b.n	800755a <_ZN11BusAnalizer19MX_USART1_UART_InitEv+0x62>
 800757c:	20000208 	.word	0x20000208
 8007580:	40011000 	.word	0x40011000
 8007584:	2000048c 	.word	0x2000048c

08007588 <_ZN11BusAnalizerC1Ev>:
BusAnalizer::BusAnalizer(void)
 8007588:	b538      	push	{r3, r4, r5, lr}
 800758a:	4604      	mov	r4, r0
 800758c:	2300      	movs	r3, #0
 800758e:	f8a0 30c2 	strh.w	r3, [r0, #194]	; 0xc2
 8007592:	f8c0 30c4 	str.w	r3, [r0, #196]	; 0xc4
 8007596:	f880 30c8 	strb.w	r3, [r0, #200]	; 0xc8
 800759a:	f880 30c9 	strb.w	r3, [r0, #201]	; 0xc9
 800759e:	f8c0 30cc 	str.w	r3, [r0, #204]	; 0xcc
 80075a2:	f8c0 30d0 	str.w	r3, [r0, #208]	; 0xd0
 80075a6:	f880 30d4 	strb.w	r3, [r0, #212]	; 0xd4
 80075aa:	f8c0 30d8 	str.w	r3, [r0, #216]	; 0xd8
 80075ae:	f8c0 30dc 	str.w	r3, [r0, #220]	; 0xdc
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80075b2:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 80075b6:	f3bf 8f6f 	isb	sy
__STATIC_INLINE void SCB_EnableICache (void)
{
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 80075ba:	4a33      	ldr	r2, [pc, #204]	; (8007688 <_ZN11BusAnalizerC1Ev+0x100>)
 80075bc:	f8c2 3250 	str.w	r3, [r2, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 80075c0:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 80075c4:	f3bf 8f6f 	isb	sy
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 80075c8:	6951      	ldr	r1, [r2, #20]
 80075ca:	f441 3100 	orr.w	r1, r1, #131072	; 0x20000
 80075ce:	6151      	str	r1, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 80075d0:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 80075d4:	f3bf 8f6f 	isb	sy
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    SCB->CSSELR = 0U; /*(0U << 1U) | 0U;*/  /* Level 1 data cache */
 80075d8:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 80075dc:	f3bf 8f4f 	dsb	sy
    __DSB();

    ccsidr = SCB->CCSIDR;
 80075e0:	f8d2 0080 	ldr.w	r0, [r2, #128]	; 0x80

                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 80075e4:	f3c0 324e 	ubfx	r2, r0, #13, #15
 80075e8:	e000      	b.n	80075ec <_ZN11BusAnalizerC1Ev+0x64>
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
    } while(sets-- != 0U);
 80075ea:	461a      	mov	r2, r3
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 80075ec:	f3c0 01c9 	ubfx	r1, r0, #3, #10
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 80075f0:	f643 73e0 	movw	r3, #16352	; 0x3fe0
 80075f4:	ea03 1342 	and.w	r3, r3, r2, lsl #5
 80075f8:	ea43 7381 	orr.w	r3, r3, r1, lsl #30
 80075fc:	4d22      	ldr	r5, [pc, #136]	; (8007688 <_ZN11BusAnalizerC1Ev+0x100>)
 80075fe:	f8c5 3260 	str.w	r3, [r5, #608]	; 0x260
      } while (ways-- != 0U);
 8007602:	460b      	mov	r3, r1
 8007604:	3901      	subs	r1, #1
 8007606:	2b00      	cmp	r3, #0
 8007608:	d1f2      	bne.n	80075f0 <_ZN11BusAnalizerC1Ev+0x68>
    } while(sets-- != 0U);
 800760a:	1e53      	subs	r3, r2, #1
 800760c:	2a00      	cmp	r2, #0
 800760e:	d1ec      	bne.n	80075ea <_ZN11BusAnalizerC1Ev+0x62>
 8007610:	f3bf 8f4f 	dsb	sy
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 8007614:	696b      	ldr	r3, [r5, #20]
 8007616:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800761a:	616b      	str	r3, [r5, #20]
 800761c:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8007620:	f3bf 8f6f 	isb	sy
	HAL_Init();
 8007624:	f7f9 f828 	bl	8000678 <HAL_Init>
	SystemClock_Config();
 8007628:	4620      	mov	r0, r4
 800762a:	f7ff fcf5 	bl	8007018 <_ZN11BusAnalizer18SystemClock_ConfigEv>
	MX_FDCAN1_Init();
 800762e:	4620      	mov	r0, r4
 8007630:	f7ff fd7a 	bl	8007128 <_ZN11BusAnalizer14MX_FDCAN1_InitEv>
	MX_FDCAN2_Init();
 8007634:	4620      	mov	r0, r4
 8007636:	f7ff fddb 	bl	80071f0 <_ZN11BusAnalizer14MX_FDCAN2_InitEv>
	MX_I2C1_Init();
 800763a:	4620      	mov	r0, r4
 800763c:	f7ff fe28 	bl	8007290 <_ZN11BusAnalizer12MX_I2C1_InitEv>
	MX_RTC_Init();
 8007640:	4620      	mov	r0, r4
 8007642:	f7ff fe63 	bl	800730c <_ZN11BusAnalizer11MX_RTC_InitEv>
	MX_SPI1_Init();
 8007646:	4620      	mov	r0, r4
 8007648:	f7ff feb6 	bl	80073b8 <_ZN11BusAnalizer12MX_SPI1_InitEv>
	MX_USART1_UART_Init();
 800764c:	4620      	mov	r0, r4
 800764e:	f7ff ff53 	bl	80074f8 <_ZN11BusAnalizer19MX_USART1_UART_InitEv>
	MX_TIM2_Init();
 8007652:	4620      	mov	r0, r4
 8007654:	f7ff fef0 	bl	8007438 <_ZN11BusAnalizer12MX_TIM2_InitEv>
	MX_USB_DEVICE_Init();
 8007658:	f000 fb08 	bl	8007c6c <MX_USB_DEVICE_Init>
	GPIOA->ODR &= 0xffe7;
 800765c:	4a0b      	ldr	r2, [pc, #44]	; (800768c <_ZN11BusAnalizerC1Ev+0x104>)
 800765e:	6953      	ldr	r3, [r2, #20]
 8007660:	f023 0318 	bic.w	r3, r3, #24
 8007664:	041b      	lsls	r3, r3, #16
 8007666:	0c1b      	lsrs	r3, r3, #16
 8007668:	6153      	str	r3, [r2, #20]
	GPIOB->ODR ^=0x0003;
 800766a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800766e:	6953      	ldr	r3, [r2, #20]
 8007670:	f083 0303 	eor.w	r3, r3, #3
 8007674:	6153      	str	r3, [r2, #20]
	ui32CounterTransmisionErrorCAN1 =0;
 8007676:	2300      	movs	r3, #0
 8007678:	f8c4 30c4 	str.w	r3, [r4, #196]	; 0xc4
	HAL_TIM_Base_Start(&htim2);
 800767c:	4804      	ldr	r0, [pc, #16]	; (8007690 <_ZN11BusAnalizerC1Ev+0x108>)
 800767e:	f7fc ffcb 	bl	8004618 <HAL_TIM_Base_Start>
}
 8007682:	4620      	mov	r0, r4
 8007684:	bd38      	pop	{r3, r4, r5, pc}
 8007686:	bf00      	nop
 8007688:	e000ed00 	.word	0xe000ed00
 800768c:	58020000 	.word	0x58020000
 8007690:	200002a8 	.word	0x200002a8

08007694 <_Z41__static_initialization_and_destruction_0ii>:
  /* Infinite loop */
  while (1)
  {
	sBussAnalizer.Run();
  }
}
 8007694:	2801      	cmp	r0, #1
 8007696:	d000      	beq.n	800769a <_Z41__static_initialization_and_destruction_0ii+0x6>
 8007698:	4770      	bx	lr
 800769a:	b508      	push	{r3, lr}
 800769c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80076a0:	4299      	cmp	r1, r3
 80076a2:	d000      	beq.n	80076a6 <_Z41__static_initialization_and_destruction_0ii+0x12>
 80076a4:	bd08      	pop	{r3, pc}
BusAnalizer sBussAnalizer;
 80076a6:	4802      	ldr	r0, [pc, #8]	; (80076b0 <_Z41__static_initialization_and_destruction_0ii+0x1c>)
 80076a8:	f7ff ff6e 	bl	8007588 <_ZN11BusAnalizerC1Ev>
 80076ac:	e7fa      	b.n	80076a4 <_Z41__static_initialization_and_destruction_0ii+0x10>
 80076ae:	bf00      	nop
 80076b0:	20000518 	.word	0x20000518

080076b4 <HAL_FDCAN_RxFifo0Callback>:
  GPIOB->ODR ^=0x2;
 80076b4:	4a14      	ldr	r2, [pc, #80]	; (8007708 <HAL_FDCAN_RxFifo0Callback+0x54>)
 80076b6:	6953      	ldr	r3, [r2, #20]
 80076b8:	f083 0302 	eor.w	r3, r3, #2
 80076bc:	6153      	str	r3, [r2, #20]
  if((RxFifo0ITs & FDCAN_IT_RX_FIFO0_NEW_MESSAGE) != RESET)
 80076be:	f011 0f01 	tst.w	r1, #1
 80076c2:	d100      	bne.n	80076c6 <HAL_FDCAN_RxFifo0Callback+0x12>
 80076c4:	4770      	bx	lr
{
 80076c6:	b510      	push	{r4, lr}
 80076c8:	4604      	mov	r4, r0
    if (HAL_FDCAN_GetRxMessage(hfdcan, FDCAN_RX_FIFO0, sBussAnalizer.GetRxHeadearPointer(), sBussAnalizer.GetRxDataPointer()) != HAL_OK)
 80076ca:	4a10      	ldr	r2, [pc, #64]	; (800770c <HAL_FDCAN_RxFifo0Callback+0x58>)
 80076cc:	f502 734e 	add.w	r3, r2, #824	; 0x338
 80076d0:	f502 7244 	add.w	r2, r2, #784	; 0x310
 80076d4:	2140      	movs	r1, #64	; 0x40
 80076d6:	f7f9 fba5 	bl	8000e24 <HAL_FDCAN_GetRxMessage>
 80076da:	b970      	cbnz	r0, 80076fa <HAL_FDCAN_RxFifo0Callback+0x46>
    sBussAnalizer.SetTimerValueRxFifo0(__HAL_TIM_GET_COUNTER(&htim2));
 80076dc:	4b0b      	ldr	r3, [pc, #44]	; (800770c <HAL_FDCAN_RxFifo0Callback+0x58>)
 80076de:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 80076e2:	6a52      	ldr	r2, [r2, #36]	; 0x24
  void MX_USART1_UART_Init(void);
//  void MX_GPIO_Init(void);
  void Error_Handler(void);
  FDCAN_RxHeaderTypeDef *GetRxHeadearPointer(void){ return &(this->RxHeader);};
  uint8_t *GetRxDataPointer(void){return this->RxData;};
  void SetTimerValueRxFifo0(uint32_t lui32TimerValue){ui32TimerValue=lui32TimerValue;};
 80076e4:	f8c3 23dc 	str.w	r2, [r3, #988]	; 0x3dc
  void SetRequesttoUsbCAN1(bool ub){ui8SetRequestToUsbCAN1 =ub;}
 80076e8:	2101      	movs	r1, #1
 80076ea:	f883 13e4 	strb.w	r1, [r3, #996]	; 0x3e4
    if (HAL_FDCAN_ActivateNotification(hfdcan, FDCAN_IT_RX_FIFO0_NEW_MESSAGE, 0) != HAL_OK)
 80076ee:	2200      	movs	r2, #0
 80076f0:	4620      	mov	r0, r4
 80076f2:	f7f9 fc7b 	bl	8000fec <HAL_FDCAN_ActivateNotification>
 80076f6:	b918      	cbnz	r0, 8007700 <HAL_FDCAN_RxFifo0Callback+0x4c>
}
 80076f8:	bd10      	pop	{r4, pc}
    Error_Handler();
 80076fa:	f000 fab5 	bl	8007c68 <Error_Handler>
 80076fe:	e7ed      	b.n	80076dc <HAL_FDCAN_RxFifo0Callback+0x28>
      Error_Handler();
 8007700:	f000 fab2 	bl	8007c68 <Error_Handler>
}
 8007704:	e7f8      	b.n	80076f8 <HAL_FDCAN_RxFifo0Callback+0x44>
 8007706:	bf00      	nop
 8007708:	58020400 	.word	0x58020400
 800770c:	20000208 	.word	0x20000208

08007710 <HAL_TIM_PeriodElapsedCallback>:
{
 8007710:	b510      	push	{r4, lr}
 8007712:	4604      	mov	r4, r0
  if (htim->Instance == TIM1) {
 8007714:	6802      	ldr	r2, [r0, #0]
 8007716:	4b10      	ldr	r3, [pc, #64]	; (8007758 <HAL_TIM_PeriodElapsedCallback+0x48>)
 8007718:	429a      	cmp	r2, r3
 800771a:	d004      	beq.n	8007726 <HAL_TIM_PeriodElapsedCallback+0x16>
  if (htim->Instance == TIM1) {
 800771c:	6822      	ldr	r2, [r4, #0]
 800771e:	4b0e      	ldr	r3, [pc, #56]	; (8007758 <HAL_TIM_PeriodElapsedCallback+0x48>)
 8007720:	429a      	cmp	r2, r3
 8007722:	d003      	beq.n	800772c <HAL_TIM_PeriodElapsedCallback+0x1c>
}
 8007724:	bd10      	pop	{r4, pc}
    HAL_IncTick();
 8007726:	f7f8 ffd5 	bl	80006d4 <HAL_IncTick>
 800772a:	e7f7      	b.n	800771c <HAL_TIM_PeriodElapsedCallback+0xc>
  void IncrementMessageTrigger(void){ui16MessageTrigger++;};
 800772c:	4a0b      	ldr	r2, [pc, #44]	; (800775c <HAL_TIM_PeriodElapsedCallback+0x4c>)
 800772e:	f8b2 33d2 	ldrh.w	r3, [r2, #978]	; 0x3d2
 8007732:	3301      	adds	r3, #1
 8007734:	b29b      	uxth	r3, r3
 8007736:	f8a2 33d2 	strh.w	r3, [r2, #978]	; 0x3d2
	    if ((sBussAnalizer.Getui16MessageTrigger()%5) == 0)
 800773a:	4a09      	ldr	r2, [pc, #36]	; (8007760 <HAL_TIM_PeriodElapsedCallback+0x50>)
 800773c:	fba2 1203 	umull	r1, r2, r2, r3
 8007740:	0892      	lsrs	r2, r2, #2
 8007742:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8007746:	1a9b      	subs	r3, r3, r2
 8007748:	b29b      	uxth	r3, r3
 800774a:	2b00      	cmp	r3, #0
 800774c:	d1ea      	bne.n	8007724 <HAL_TIM_PeriodElapsedCallback+0x14>
  uint16_t Getui16MessageTrigger(void){return ui16MessageTrigger;};
  void SetMessageTriggerFlag(bool lbMessageflag){ui16MessageTriggerFlag = lbMessageflag;};
 800774e:	4b03      	ldr	r3, [pc, #12]	; (800775c <HAL_TIM_PeriodElapsedCallback+0x4c>)
 8007750:	2201      	movs	r2, #1
 8007752:	f883 23d9 	strb.w	r2, [r3, #985]	; 0x3d9
}
 8007756:	e7e5      	b.n	8007724 <HAL_TIM_PeriodElapsedCallback+0x14>
 8007758:	40010000 	.word	0x40010000
 800775c:	20000208 	.word	0x20000208
 8007760:	cccccccd 	.word	0xcccccccd

08007764 <main>:
{
 8007764:	b508      	push	{r3, lr}
	sBussAnalizer.Run();
 8007766:	4802      	ldr	r0, [pc, #8]	; (8007770 <main+0xc>)
 8007768:	f7ff fbd2 	bl	8006f10 <_ZN11BusAnalizer3RunEv>
  while (1)
 800776c:	e7fb      	b.n	8007766 <main+0x2>
 800776e:	bf00      	nop
 8007770:	20000518 	.word	0x20000518

08007774 <_GLOBAL__sub_I_hfdcan1>:
}
 8007774:	b508      	push	{r3, lr}
 8007776:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800777a:	2001      	movs	r0, #1
 800777c:	f7ff ff8a 	bl	8007694 <_Z41__static_initialization_and_destruction_0ii>
 8007780:	bd08      	pop	{r3, pc}

08007782 <_GLOBAL__sub_D_hfdcan1>:
 8007782:	b508      	push	{r3, lr}
 8007784:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8007788:	2000      	movs	r0, #0
 800778a:	f7ff ff83 	bl	8007694 <_Z41__static_initialization_and_destruction_0ii>
 800778e:	bd08      	pop	{r3, pc}

08007790 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8007790:	b082      	sub	sp, #8
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8007792:	4b07      	ldr	r3, [pc, #28]	; (80077b0 <HAL_MspInit+0x20>)
 8007794:	f8d3 20f4 	ldr.w	r2, [r3, #244]	; 0xf4
 8007798:	f042 0202 	orr.w	r2, r2, #2
 800779c:	f8c3 20f4 	str.w	r2, [r3, #244]	; 0xf4
 80077a0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80077a4:	f003 0302 	and.w	r3, r3, #2
 80077a8:	9301      	str	r3, [sp, #4]
 80077aa:	9b01      	ldr	r3, [sp, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80077ac:	b002      	add	sp, #8
 80077ae:	4770      	bx	lr
 80077b0:	58024400 	.word	0x58024400

080077b4 <HAL_FDCAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hfdcan: FDCAN handle pointer
* @retval None
*/
void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* hfdcan)
{
 80077b4:	b510      	push	{r4, lr}
 80077b6:	b08a      	sub	sp, #40	; 0x28
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80077b8:	2300      	movs	r3, #0
 80077ba:	9305      	str	r3, [sp, #20]
 80077bc:	9306      	str	r3, [sp, #24]
 80077be:	9307      	str	r3, [sp, #28]
 80077c0:	9308      	str	r3, [sp, #32]
 80077c2:	9309      	str	r3, [sp, #36]	; 0x24
  if(hfdcan->Instance==FDCAN1)
 80077c4:	6803      	ldr	r3, [r0, #0]
 80077c6:	4a3c      	ldr	r2, [pc, #240]	; (80078b8 <HAL_FDCAN_MspInit+0x104>)
 80077c8:	4293      	cmp	r3, r2
 80077ca:	d004      	beq.n	80077d6 <HAL_FDCAN_MspInit+0x22>
    HAL_NVIC_EnableIRQ(FDCAN1_IT1_IRQn);
  /* USER CODE BEGIN FDCAN1_MspInit 1 */

  /* USER CODE END FDCAN1_MspInit 1 */
  }
  else if(hfdcan->Instance==FDCAN2)
 80077cc:	4a3b      	ldr	r2, [pc, #236]	; (80078bc <HAL_FDCAN_MspInit+0x108>)
 80077ce:	4293      	cmp	r3, r2
 80077d0:	d041      	beq.n	8007856 <HAL_FDCAN_MspInit+0xa2>
  /* USER CODE BEGIN FDCAN2_MspInit 1 */

  /* USER CODE END FDCAN2_MspInit 1 */
  }

}
 80077d2:	b00a      	add	sp, #40	; 0x28
 80077d4:	bd10      	pop	{r4, pc}
    HAL_RCC_FDCAN_CLK_ENABLED++;
 80077d6:	4a3a      	ldr	r2, [pc, #232]	; (80078c0 <HAL_FDCAN_MspInit+0x10c>)
 80077d8:	6813      	ldr	r3, [r2, #0]
 80077da:	3301      	adds	r3, #1
 80077dc:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_FDCAN_CLK_ENABLED==1){
 80077de:	2b01      	cmp	r3, #1
 80077e0:	d02b      	beq.n	800783a <HAL_FDCAN_MspInit+0x86>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80077e2:	4b38      	ldr	r3, [pc, #224]	; (80078c4 <HAL_FDCAN_MspInit+0x110>)
 80077e4:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 80077e8:	f042 0201 	orr.w	r2, r2, #1
 80077ec:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 80077f0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80077f4:	f003 0301 	and.w	r3, r3, #1
 80077f8:	9302      	str	r3, [sp, #8]
 80077fa:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 80077fc:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8007800:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007802:	2302      	movs	r3, #2
 8007804:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007806:	2400      	movs	r4, #0
 8007808:	9407      	str	r4, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800780a:	9408      	str	r4, [sp, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN1;
 800780c:	2309      	movs	r3, #9
 800780e:	9309      	str	r3, [sp, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007810:	a905      	add	r1, sp, #20
 8007812:	482d      	ldr	r0, [pc, #180]	; (80078c8 <HAL_FDCAN_MspInit+0x114>)
 8007814:	f7f9 fdd8 	bl	80013c8 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(FDCAN1_IT0_IRQn, 0, 0);
 8007818:	4622      	mov	r2, r4
 800781a:	4621      	mov	r1, r4
 800781c:	2013      	movs	r0, #19
 800781e:	f7f8 ff97 	bl	8000750 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(FDCAN1_IT0_IRQn);
 8007822:	2013      	movs	r0, #19
 8007824:	f7f8 ffc6 	bl	80007b4 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(FDCAN1_IT1_IRQn, 0, 0);
 8007828:	4622      	mov	r2, r4
 800782a:	4621      	mov	r1, r4
 800782c:	2015      	movs	r0, #21
 800782e:	f7f8 ff8f 	bl	8000750 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(FDCAN1_IT1_IRQn);
 8007832:	2015      	movs	r0, #21
 8007834:	f7f8 ffbe 	bl	80007b4 <HAL_NVIC_EnableIRQ>
 8007838:	e7cb      	b.n	80077d2 <HAL_FDCAN_MspInit+0x1e>
      __HAL_RCC_FDCAN_CLK_ENABLE();
 800783a:	4b22      	ldr	r3, [pc, #136]	; (80078c4 <HAL_FDCAN_MspInit+0x110>)
 800783c:	f8d3 20ec 	ldr.w	r2, [r3, #236]	; 0xec
 8007840:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007844:	f8c3 20ec 	str.w	r2, [r3, #236]	; 0xec
 8007848:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 800784c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007850:	9301      	str	r3, [sp, #4]
 8007852:	9b01      	ldr	r3, [sp, #4]
 8007854:	e7c5      	b.n	80077e2 <HAL_FDCAN_MspInit+0x2e>
    HAL_RCC_FDCAN_CLK_ENABLED++;
 8007856:	4a1a      	ldr	r2, [pc, #104]	; (80078c0 <HAL_FDCAN_MspInit+0x10c>)
 8007858:	6813      	ldr	r3, [r2, #0]
 800785a:	3301      	adds	r3, #1
 800785c:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_FDCAN_CLK_ENABLED==1){
 800785e:	2b01      	cmp	r3, #1
 8007860:	d01b      	beq.n	800789a <HAL_FDCAN_MspInit+0xe6>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8007862:	4b18      	ldr	r3, [pc, #96]	; (80078c4 <HAL_FDCAN_MspInit+0x110>)
 8007864:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8007868:	f042 0202 	orr.w	r2, r2, #2
 800786c:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8007870:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8007874:	f003 0302 	and.w	r3, r3, #2
 8007878:	9304      	str	r3, [sp, #16]
 800787a:	9b04      	ldr	r3, [sp, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 800787c:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8007880:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007882:	2302      	movs	r3, #2
 8007884:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007886:	2300      	movs	r3, #0
 8007888:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800788a:	9308      	str	r3, [sp, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN2;
 800788c:	2309      	movs	r3, #9
 800788e:	9309      	str	r3, [sp, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8007890:	a905      	add	r1, sp, #20
 8007892:	480e      	ldr	r0, [pc, #56]	; (80078cc <HAL_FDCAN_MspInit+0x118>)
 8007894:	f7f9 fd98 	bl	80013c8 <HAL_GPIO_Init>
}
 8007898:	e79b      	b.n	80077d2 <HAL_FDCAN_MspInit+0x1e>
      __HAL_RCC_FDCAN_CLK_ENABLE();
 800789a:	4b0a      	ldr	r3, [pc, #40]	; (80078c4 <HAL_FDCAN_MspInit+0x110>)
 800789c:	f8d3 20ec 	ldr.w	r2, [r3, #236]	; 0xec
 80078a0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80078a4:	f8c3 20ec 	str.w	r2, [r3, #236]	; 0xec
 80078a8:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 80078ac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80078b0:	9303      	str	r3, [sp, #12]
 80078b2:	9b03      	ldr	r3, [sp, #12]
 80078b4:	e7d5      	b.n	8007862 <HAL_FDCAN_MspInit+0xae>
 80078b6:	bf00      	nop
 80078b8:	4000a000 	.word	0x4000a000
 80078bc:	4000a400 	.word	0x4000a400
 80078c0:	200005f8 	.word	0x200005f8
 80078c4:	58024400 	.word	0x58024400
 80078c8:	58020000 	.word	0x58020000
 80078cc:	58020400 	.word	0x58020400

080078d0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80078d0:	b510      	push	{r4, lr}
 80078d2:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80078d4:	2300      	movs	r3, #0
 80078d6:	9303      	str	r3, [sp, #12]
 80078d8:	9304      	str	r3, [sp, #16]
 80078da:	9305      	str	r3, [sp, #20]
 80078dc:	9306      	str	r3, [sp, #24]
 80078de:	9307      	str	r3, [sp, #28]
  if(hi2c->Instance==I2C1)
 80078e0:	6802      	ldr	r2, [r0, #0]
 80078e2:	4b16      	ldr	r3, [pc, #88]	; (800793c <HAL_I2C_MspInit+0x6c>)
 80078e4:	429a      	cmp	r2, r3
 80078e6:	d001      	beq.n	80078ec <HAL_I2C_MspInit+0x1c>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80078e8:	b008      	add	sp, #32
 80078ea:	bd10      	pop	{r4, pc}
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80078ec:	4c14      	ldr	r4, [pc, #80]	; (8007940 <HAL_I2C_MspInit+0x70>)
 80078ee:	f8d4 30e0 	ldr.w	r3, [r4, #224]	; 0xe0
 80078f2:	f043 0302 	orr.w	r3, r3, #2
 80078f6:	f8c4 30e0 	str.w	r3, [r4, #224]	; 0xe0
 80078fa:	f8d4 30e0 	ldr.w	r3, [r4, #224]	; 0xe0
 80078fe:	f003 0302 	and.w	r3, r3, #2
 8007902:	9301      	str	r3, [sp, #4]
 8007904:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8;
 8007906:	f44f 73c0 	mov.w	r3, #384	; 0x180
 800790a:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800790c:	2312      	movs	r3, #18
 800790e:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007910:	2300      	movs	r3, #0
 8007912:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007914:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8007916:	2304      	movs	r3, #4
 8007918:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800791a:	a903      	add	r1, sp, #12
 800791c:	4809      	ldr	r0, [pc, #36]	; (8007944 <HAL_I2C_MspInit+0x74>)
 800791e:	f7f9 fd53 	bl	80013c8 <HAL_GPIO_Init>
    __HAL_RCC_I2C1_CLK_ENABLE();
 8007922:	f8d4 30e8 	ldr.w	r3, [r4, #232]	; 0xe8
 8007926:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800792a:	f8c4 30e8 	str.w	r3, [r4, #232]	; 0xe8
 800792e:	f8d4 30e8 	ldr.w	r3, [r4, #232]	; 0xe8
 8007932:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007936:	9302      	str	r3, [sp, #8]
 8007938:	9b02      	ldr	r3, [sp, #8]
}
 800793a:	e7d5      	b.n	80078e8 <HAL_I2C_MspInit+0x18>
 800793c:	40005400 	.word	0x40005400
 8007940:	58024400 	.word	0x58024400
 8007944:	58020400 	.word	0x58020400

08007948 <HAL_RTC_MspInit>:
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
  if(hrtc->Instance==RTC)
 8007948:	6802      	ldr	r2, [r0, #0]
 800794a:	4b05      	ldr	r3, [pc, #20]	; (8007960 <HAL_RTC_MspInit+0x18>)
 800794c:	429a      	cmp	r2, r3
 800794e:	d000      	beq.n	8007952 <HAL_RTC_MspInit+0xa>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8007950:	4770      	bx	lr
    __HAL_RCC_RTC_ENABLE();
 8007952:	4a04      	ldr	r2, [pc, #16]	; (8007964 <HAL_RTC_MspInit+0x1c>)
 8007954:	6f13      	ldr	r3, [r2, #112]	; 0x70
 8007956:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800795a:	6713      	str	r3, [r2, #112]	; 0x70
}
 800795c:	e7f8      	b.n	8007950 <HAL_RTC_MspInit+0x8>
 800795e:	bf00      	nop
 8007960:	58004000 	.word	0x58004000
 8007964:	58024400 	.word	0x58024400

08007968 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8007968:	b500      	push	{lr}
 800796a:	b089      	sub	sp, #36	; 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800796c:	2300      	movs	r3, #0
 800796e:	9303      	str	r3, [sp, #12]
 8007970:	9304      	str	r3, [sp, #16]
 8007972:	9305      	str	r3, [sp, #20]
 8007974:	9306      	str	r3, [sp, #24]
 8007976:	9307      	str	r3, [sp, #28]
  if(hspi->Instance==SPI1)
 8007978:	6802      	ldr	r2, [r0, #0]
 800797a:	4b16      	ldr	r3, [pc, #88]	; (80079d4 <HAL_SPI_MspInit+0x6c>)
 800797c:	429a      	cmp	r2, r3
 800797e:	d002      	beq.n	8007986 <HAL_SPI_MspInit+0x1e>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8007980:	b009      	add	sp, #36	; 0x24
 8007982:	f85d fb04 	ldr.w	pc, [sp], #4
    __HAL_RCC_SPI1_CLK_ENABLE();
 8007986:	4b14      	ldr	r3, [pc, #80]	; (80079d8 <HAL_SPI_MspInit+0x70>)
 8007988:	f8d3 20f0 	ldr.w	r2, [r3, #240]	; 0xf0
 800798c:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8007990:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0
 8007994:	f8d3 20f0 	ldr.w	r2, [r3, #240]	; 0xf0
 8007998:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 800799c:	9201      	str	r2, [sp, #4]
 800799e:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80079a0:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 80079a4:	f042 0201 	orr.w	r2, r2, #1
 80079a8:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 80079ac:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80079b0:	f003 0301 	and.w	r3, r3, #1
 80079b4:	9302      	str	r3, [sp, #8]
 80079b6:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 80079b8:	23e0      	movs	r3, #224	; 0xe0
 80079ba:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80079bc:	2302      	movs	r3, #2
 80079be:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80079c0:	2300      	movs	r3, #0
 80079c2:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80079c4:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80079c6:	2305      	movs	r3, #5
 80079c8:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80079ca:	a903      	add	r1, sp, #12
 80079cc:	4803      	ldr	r0, [pc, #12]	; (80079dc <HAL_SPI_MspInit+0x74>)
 80079ce:	f7f9 fcfb 	bl	80013c8 <HAL_GPIO_Init>
}
 80079d2:	e7d5      	b.n	8007980 <HAL_SPI_MspInit+0x18>
 80079d4:	40013000 	.word	0x40013000
 80079d8:	58024400 	.word	0x58024400
 80079dc:	58020000 	.word	0x58020000

080079e0 <HAL_TIM_Base_MspInit>:
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
  if(htim_base->Instance==TIM2)
 80079e0:	6803      	ldr	r3, [r0, #0]
 80079e2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80079e6:	d000      	beq.n	80079ea <HAL_TIM_Base_MspInit+0xa>
 80079e8:	4770      	bx	lr
{
 80079ea:	b082      	sub	sp, #8
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80079ec:	4b07      	ldr	r3, [pc, #28]	; (8007a0c <HAL_TIM_Base_MspInit+0x2c>)
 80079ee:	f8d3 20e8 	ldr.w	r2, [r3, #232]	; 0xe8
 80079f2:	f042 0201 	orr.w	r2, r2, #1
 80079f6:	f8c3 20e8 	str.w	r2, [r3, #232]	; 0xe8
 80079fa:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80079fe:	f003 0301 	and.w	r3, r3, #1
 8007a02:	9301      	str	r3, [sp, #4]
 8007a04:	9b01      	ldr	r3, [sp, #4]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8007a06:	b002      	add	sp, #8
 8007a08:	4770      	bx	lr
 8007a0a:	bf00      	nop
 8007a0c:	58024400 	.word	0x58024400

08007a10 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8007a10:	b500      	push	{lr}
 8007a12:	b089      	sub	sp, #36	; 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007a14:	2300      	movs	r3, #0
 8007a16:	9303      	str	r3, [sp, #12]
 8007a18:	9304      	str	r3, [sp, #16]
 8007a1a:	9305      	str	r3, [sp, #20]
 8007a1c:	9306      	str	r3, [sp, #24]
 8007a1e:	9307      	str	r3, [sp, #28]
  if(huart->Instance==USART1)
 8007a20:	6802      	ldr	r2, [r0, #0]
 8007a22:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8007a26:	f503 3388 	add.w	r3, r3, #69632	; 0x11000
 8007a2a:	429a      	cmp	r2, r3
 8007a2c:	d002      	beq.n	8007a34 <HAL_UART_MspInit+0x24>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8007a2e:	b009      	add	sp, #36	; 0x24
 8007a30:	f85d fb04 	ldr.w	pc, [sp], #4
    __HAL_RCC_USART1_CLK_ENABLE();
 8007a34:	4b13      	ldr	r3, [pc, #76]	; (8007a84 <HAL_UART_MspInit+0x74>)
 8007a36:	f8d3 20f0 	ldr.w	r2, [r3, #240]	; 0xf0
 8007a3a:	f042 0210 	orr.w	r2, r2, #16
 8007a3e:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0
 8007a42:	f8d3 20f0 	ldr.w	r2, [r3, #240]	; 0xf0
 8007a46:	f002 0210 	and.w	r2, r2, #16
 8007a4a:	9201      	str	r2, [sp, #4]
 8007a4c:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8007a4e:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8007a52:	f042 0201 	orr.w	r2, r2, #1
 8007a56:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8007a5a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8007a5e:	f003 0301 	and.w	r3, r3, #1
 8007a62:	9302      	str	r3, [sp, #8]
 8007a64:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8007a66:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8007a6a:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007a6c:	2302      	movs	r3, #2
 8007a6e:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007a70:	2300      	movs	r3, #0
 8007a72:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007a74:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8007a76:	2307      	movs	r3, #7
 8007a78:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007a7a:	a903      	add	r1, sp, #12
 8007a7c:	4802      	ldr	r0, [pc, #8]	; (8007a88 <HAL_UART_MspInit+0x78>)
 8007a7e:	f7f9 fca3 	bl	80013c8 <HAL_GPIO_Init>
}
 8007a82:	e7d4      	b.n	8007a2e <HAL_UART_MspInit+0x1e>
 8007a84:	58024400 	.word	0x58024400
 8007a88:	58020000 	.word	0x58020000

08007a8c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8007a8c:	b500      	push	{lr}
 8007a8e:	b08b      	sub	sp, #44	; 0x2c
 8007a90:	4601      	mov	r1, r0
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
  uint32_t              uwPrescalerValue = 0;
  uint32_t              pFLatency;
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_IRQn, TickPriority ,0);
 8007a92:	2200      	movs	r2, #0
 8007a94:	2019      	movs	r0, #25
 8007a96:	f7f8 fe5b 	bl	8000750 <HAL_NVIC_SetPriority>

  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 8007a9a:	2019      	movs	r0, #25
 8007a9c:	f7f8 fe8a 	bl	80007b4 <HAL_NVIC_EnableIRQ>
  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8007aa0:	4b16      	ldr	r3, [pc, #88]	; (8007afc <HAL_InitTick+0x70>)
 8007aa2:	f8d3 20f0 	ldr.w	r2, [r3, #240]	; 0xf0
 8007aa6:	f042 0201 	orr.w	r2, r2, #1
 8007aaa:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0
 8007aae:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8007ab2:	f003 0301 	and.w	r3, r3, #1
 8007ab6:	9300      	str	r3, [sp, #0]
 8007ab8:	9b00      	ldr	r3, [sp, #0]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8007aba:	a901      	add	r1, sp, #4
 8007abc:	a802      	add	r0, sp, #8
 8007abe:	f7fb f9ff 	bl	8002ec0 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK2Freq();
 8007ac2:	f7fb f9eb 	bl	8002e9c <HAL_RCC_GetPCLK2Freq>
 8007ac6:	0043      	lsls	r3, r0, #1

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 8007ac8:	480d      	ldr	r0, [pc, #52]	; (8007b00 <HAL_InitTick+0x74>)
 8007aca:	fba0 2303 	umull	r2, r3, r0, r3
 8007ace:	0c9b      	lsrs	r3, r3, #18
 8007ad0:	3b01      	subs	r3, #1

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8007ad2:	480c      	ldr	r0, [pc, #48]	; (8007b04 <HAL_InitTick+0x78>)
 8007ad4:	4a0c      	ldr	r2, [pc, #48]	; (8007b08 <HAL_InitTick+0x7c>)
 8007ad6:	6002      	str	r2, [r0, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000 / 1000) - 1;
 8007ad8:	f240 32e7 	movw	r2, #999	; 0x3e7
 8007adc:	60c2      	str	r2, [r0, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8007ade:	6043      	str	r3, [r0, #4]
  htim1.Init.ClockDivision = 0;
 8007ae0:	2300      	movs	r3, #0
 8007ae2:	6103      	str	r3, [r0, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8007ae4:	6083      	str	r3, [r0, #8]
  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 8007ae6:	f7fc ff29 	bl	800493c <HAL_TIM_Base_Init>
 8007aea:	b118      	cbz	r0, 8007af4 <HAL_InitTick+0x68>
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
  }

  /* Return function status */
  return HAL_ERROR;
 8007aec:	2001      	movs	r0, #1
}
 8007aee:	b00b      	add	sp, #44	; 0x2c
 8007af0:	f85d fb04 	ldr.w	pc, [sp], #4
    return HAL_TIM_Base_Start_IT(&htim1);
 8007af4:	4803      	ldr	r0, [pc, #12]	; (8007b04 <HAL_InitTick+0x78>)
 8007af6:	f7fc fdad 	bl	8004654 <HAL_TIM_Base_Start_IT>
 8007afa:	e7f8      	b.n	8007aee <HAL_InitTick+0x62>
 8007afc:	58024400 	.word	0x58024400
 8007b00:	431bde83 	.word	0x431bde83
 8007b04:	20000610 	.word	0x20000610
 8007b08:	40010000 	.word	0x40010000

08007b0c <NMI_Handler>:

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8007b0c:	4770      	bx	lr

08007b0e <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8007b0e:	e7fe      	b.n	8007b0e <HardFault_Handler>

08007b10 <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8007b10:	e7fe      	b.n	8007b10 <MemManage_Handler>

08007b12 <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8007b12:	e7fe      	b.n	8007b12 <BusFault_Handler>

08007b14 <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8007b14:	e7fe      	b.n	8007b14 <UsageFault_Handler>

08007b16 <SVC_Handler>:

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8007b16:	4770      	bx	lr

08007b18 <DebugMon_Handler>:

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8007b18:	4770      	bx	lr

08007b1a <PendSV_Handler>:

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8007b1a:	4770      	bx	lr

08007b1c <FDCAN1_IT0_IRQHandler>:

/**
  * @brief This function handles FDCAN1 interrupt 0.
  */
void FDCAN1_IT0_IRQHandler(void)
{
 8007b1c:	b508      	push	{r3, lr}
  /* USER CODE BEGIN FDCAN1_IT0_IRQn 0 */

  /* USER CODE END FDCAN1_IT0_IRQn 0 */
  HAL_FDCAN_IRQHandler(&hfdcan1);
 8007b1e:	4802      	ldr	r0, [pc, #8]	; (8007b28 <FDCAN1_IT0_IRQHandler+0xc>)
 8007b20:	f7f9 fabc 	bl	800109c <HAL_FDCAN_IRQHandler>
  /* USER CODE BEGIN FDCAN1_IT0_IRQn 1 */

  /* USER CODE END FDCAN1_IT0_IRQn 1 */
}
 8007b24:	bd08      	pop	{r3, pc}
 8007b26:	bf00      	nop
 8007b28:	20000208 	.word	0x20000208

08007b2c <FDCAN1_IT1_IRQHandler>:

/**
  * @brief This function handles FDCAN1 interrupt 1.
  */
void FDCAN1_IT1_IRQHandler(void)
{
 8007b2c:	b508      	push	{r3, lr}
  /* USER CODE BEGIN FDCAN1_IT1_IRQn 0 */

  /* USER CODE END FDCAN1_IT1_IRQn 0 */
  HAL_FDCAN_IRQHandler(&hfdcan1);
 8007b2e:	4802      	ldr	r0, [pc, #8]	; (8007b38 <FDCAN1_IT1_IRQHandler+0xc>)
 8007b30:	f7f9 fab4 	bl	800109c <HAL_FDCAN_IRQHandler>
  /* USER CODE BEGIN FDCAN1_IT1_IRQn 1 */

  /* USER CODE END FDCAN1_IT1_IRQn 1 */
}
 8007b34:	bd08      	pop	{r3, pc}
 8007b36:	bf00      	nop
 8007b38:	20000208 	.word	0x20000208

08007b3c <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 8007b3c:	b508      	push	{r3, lr}
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8007b3e:	4802      	ldr	r0, [pc, #8]	; (8007b48 <TIM1_UP_IRQHandler+0xc>)
 8007b40:	f7fc fdaf 	bl	80046a2 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 8007b44:	bd08      	pop	{r3, pc}
 8007b46:	bf00      	nop
 8007b48:	20000610 	.word	0x20000610

08007b4c <OTG_HS_IRQHandler>:

/**
  * @brief This function handles USB On The Go HS global interrupt.
  */
void OTG_HS_IRQHandler(void)
{
 8007b4c:	b508      	push	{r3, lr}
  /* USER CODE BEGIN OTG_HS_IRQn 0 */

  /* USER CODE END OTG_HS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_HS);
 8007b4e:	4802      	ldr	r0, [pc, #8]	; (8007b58 <OTG_HS_IRQHandler+0xc>)
 8007b50:	f7f9 ffac 	bl	8001aac <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_HS_IRQn 1 */

  /* USER CODE END OTG_HS_IRQn 1 */
}
 8007b54:	bd08      	pop	{r3, pc}
 8007b56:	bf00      	nop
 8007b58:	2000192c 	.word	0x2000192c

08007b5c <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8007b5c:	b570      	push	{r4, r5, r6, lr}
 8007b5e:	460c      	mov	r4, r1
 8007b60:	4616      	mov	r6, r2
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8007b62:	2500      	movs	r5, #0
 8007b64:	42b5      	cmp	r5, r6
 8007b66:	da07      	bge.n	8007b78 <_read+0x1c>
	{
		*ptr++ = __io_getchar();
 8007b68:	f3af 8000 	nop.w
 8007b6c:	4621      	mov	r1, r4
 8007b6e:	f801 0b01 	strb.w	r0, [r1], #1
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8007b72:	3501      	adds	r5, #1
		*ptr++ = __io_getchar();
 8007b74:	460c      	mov	r4, r1
 8007b76:	e7f5      	b.n	8007b64 <_read+0x8>
	}

return len;
}
 8007b78:	4630      	mov	r0, r6
 8007b7a:	bd70      	pop	{r4, r5, r6, pc}

08007b7c <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8007b7c:	b570      	push	{r4, r5, r6, lr}
 8007b7e:	460c      	mov	r4, r1
 8007b80:	4616      	mov	r6, r2
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8007b82:	2500      	movs	r5, #0
 8007b84:	42b5      	cmp	r5, r6
 8007b86:	da05      	bge.n	8007b94 <_write+0x18>
	{
		__io_putchar(*ptr++);
 8007b88:	f814 0b01 	ldrb.w	r0, [r4], #1
 8007b8c:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8007b90:	3501      	adds	r5, #1
 8007b92:	e7f7      	b.n	8007b84 <_write+0x8>
	}
	return len;
}
 8007b94:	4630      	mov	r0, r6
 8007b96:	bd70      	pop	{r4, r5, r6, pc}

08007b98 <_sbrk>:

caddr_t _sbrk(int incr)
{
 8007b98:	b508      	push	{r3, lr}
 8007b9a:	4603      	mov	r3, r0
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8007b9c:	4a0b      	ldr	r2, [pc, #44]	; (8007bcc <_sbrk+0x34>)
 8007b9e:	6812      	ldr	r2, [r2, #0]
 8007ba0:	b142      	cbz	r2, 8007bb4 <_sbrk+0x1c>
		heap_end = &end;

	prev_heap_end = heap_end;
 8007ba2:	4a0a      	ldr	r2, [pc, #40]	; (8007bcc <_sbrk+0x34>)
 8007ba4:	6810      	ldr	r0, [r2, #0]
	if (heap_end + incr > stack_ptr)
 8007ba6:	4403      	add	r3, r0
 8007ba8:	466a      	mov	r2, sp
 8007baa:	4293      	cmp	r3, r2
 8007bac:	d806      	bhi.n	8007bbc <_sbrk+0x24>
//		abort();
		errno = ENOMEM;
		return (caddr_t) -1;
	}

	heap_end += incr;
 8007bae:	4a07      	ldr	r2, [pc, #28]	; (8007bcc <_sbrk+0x34>)
 8007bb0:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
}
 8007bb2:	bd08      	pop	{r3, pc}
		heap_end = &end;
 8007bb4:	4a05      	ldr	r2, [pc, #20]	; (8007bcc <_sbrk+0x34>)
 8007bb6:	4906      	ldr	r1, [pc, #24]	; (8007bd0 <_sbrk+0x38>)
 8007bb8:	6011      	str	r1, [r2, #0]
 8007bba:	e7f2      	b.n	8007ba2 <_sbrk+0xa>
		errno = ENOMEM;
 8007bbc:	f000 fad4 	bl	8008168 <__errno>
 8007bc0:	230c      	movs	r3, #12
 8007bc2:	6003      	str	r3, [r0, #0]
		return (caddr_t) -1;
 8007bc4:	f04f 30ff 	mov.w	r0, #4294967295
 8007bc8:	e7f3      	b.n	8007bb2 <_sbrk+0x1a>
 8007bca:	bf00      	nop
 8007bcc:	200005fc 	.word	0x200005fc
 8007bd0:	20001f48 	.word	0x20001f48

08007bd4 <_close>:

int _close(int file)
{
	return -1;
}
 8007bd4:	f04f 30ff 	mov.w	r0, #4294967295
 8007bd8:	4770      	bx	lr

08007bda <_fstat>:


int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
 8007bda:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8007bde:	604b      	str	r3, [r1, #4]
	return 0;
}
 8007be0:	2000      	movs	r0, #0
 8007be2:	4770      	bx	lr

08007be4 <_isatty>:

int _isatty(int file)
{
	return 1;
}
 8007be4:	2001      	movs	r0, #1
 8007be6:	4770      	bx	lr

08007be8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
	return 0;
}
 8007be8:	2000      	movs	r0, #0
 8007bea:	4770      	bx	lr

08007bec <SystemInit>:
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8007bec:	4a18      	ldr	r2, [pc, #96]	; (8007c50 <SystemInit+0x64>)
 8007bee:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8007bf2:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8007bf6:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8007bfa:	4b16      	ldr	r3, [pc, #88]	; (8007c54 <SystemInit+0x68>)
 8007bfc:	681a      	ldr	r2, [r3, #0]
 8007bfe:	f042 0201 	orr.w	r2, r2, #1
 8007c02:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8007c04:	2200      	movs	r2, #0
 8007c06:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, CSSON , CSION,RC48ON, CSIKERON PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8007c08:	6818      	ldr	r0, [r3, #0]
 8007c0a:	4913      	ldr	r1, [pc, #76]	; (8007c58 <SystemInit+0x6c>)
 8007c0c:	4001      	ands	r1, r0
 8007c0e:	6019      	str	r1, [r3, #0]

  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8007c10:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8007c12:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8007c14:	621a      	str	r2, [r3, #32]

  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x00000000;
 8007c16:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00000000;
 8007c18:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x00000000;
 8007c1a:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8007c1c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x00000000;
 8007c1e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8007c20:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x00000000;
 8007c22:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8007c24:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8007c26:	6819      	ldr	r1, [r3, #0]
 8007c28:	f421 2180 	bic.w	r1, r1, #262144	; 0x40000
 8007c2c:	6019      	str	r1, [r3, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8007c2e:	661a      	str	r2, [r3, #96]	; 0x60
  SCB->VTOR = FLASH_BANK2_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
#endif /* VECT_TAB_SRAM */

#else
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8007c30:	4b0a      	ldr	r3, [pc, #40]	; (8007c5c <SystemInit+0x70>)
 8007c32:	681a      	ldr	r2, [r3, #0]
 8007c34:	4b0a      	ldr	r3, [pc, #40]	; (8007c60 <SystemInit+0x74>)
 8007c36:	4013      	ands	r3, r2
 8007c38:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007c3c:	d202      	bcs.n	8007c44 <SystemInit+0x58>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8007c3e:	4b09      	ldr	r3, [pc, #36]	; (8007c64 <SystemInit+0x78>)
 8007c40:	2201      	movs	r2, #1
 8007c42:	601a      	str	r2, [r3, #0]

  /* Configure the Vector Table location add offset address for cortex-M7 ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D1_AXISRAM_BASE  | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM */
#else
  SCB->VTOR = FLASH_BANK1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8007c44:	4b02      	ldr	r3, [pc, #8]	; (8007c50 <SystemInit+0x64>)
 8007c46:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8007c4a:	609a      	str	r2, [r3, #8]
#endif

#endif /*DUAL_CORE && CORE_CM4*/

}
 8007c4c:	4770      	bx	lr
 8007c4e:	bf00      	nop
 8007c50:	e000ed00 	.word	0xe000ed00
 8007c54:	58024400 	.word	0x58024400
 8007c58:	eaf6ed7f 	.word	0xeaf6ed7f
 8007c5c:	5c001000 	.word	0x5c001000
 8007c60:	ffff0000 	.word	0xffff0000
 8007c64:	51008108 	.word	0x51008108

08007c68 <Error_Handler>:

void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  while(1);
 8007c68:	e7fe      	b.n	8007c68 <Error_Handler>
	...

08007c6c <MX_USB_DEVICE_Init>:
  /* USER CODE END Error_Handler_Debug */
}

void MX_USB_DEVICE_Init(void)
{
 8007c6c:	b508      	push	{r3, lr}
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceHS, &HS_Desc, DEVICE_HS) != USBD_OK)
 8007c6e:	2201      	movs	r2, #1
 8007c70:	490e      	ldr	r1, [pc, #56]	; (8007cac <MX_USB_DEVICE_Init+0x40>)
 8007c72:	480f      	ldr	r0, [pc, #60]	; (8007cb0 <MX_USB_DEVICE_Init+0x44>)
 8007c74:	f7fe fc1e 	bl	80064b4 <USBD_Init>
 8007c78:	b980      	cbnz	r0, 8007c9c <MX_USB_DEVICE_Init+0x30>
  {
    Error_Handler();
  }
  if (USBD_RegisterClass(&hUsbDeviceHS, &USBD_CDC) != USBD_OK)
 8007c7a:	490e      	ldr	r1, [pc, #56]	; (8007cb4 <MX_USB_DEVICE_Init+0x48>)
 8007c7c:	480c      	ldr	r0, [pc, #48]	; (8007cb0 <MX_USB_DEVICE_Init+0x44>)
 8007c7e:	f7fe fc43 	bl	8006508 <USBD_RegisterClass>
 8007c82:	b968      	cbnz	r0, 8007ca0 <MX_USB_DEVICE_Init+0x34>
  {
    Error_Handler();
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceHS, &USBD_Interface_fops_HS) != USBD_OK)
 8007c84:	490c      	ldr	r1, [pc, #48]	; (8007cb8 <MX_USB_DEVICE_Init+0x4c>)
 8007c86:	480a      	ldr	r0, [pc, #40]	; (8007cb0 <MX_USB_DEVICE_Init+0x44>)
 8007c88:	f7fe fbcc 	bl	8006424 <USBD_CDC_RegisterInterface>
 8007c8c:	b950      	cbnz	r0, 8007ca4 <MX_USB_DEVICE_Init+0x38>
  {
    Error_Handler();
  }
  if (USBD_Start(&hUsbDeviceHS) != USBD_OK)
 8007c8e:	4808      	ldr	r0, [pc, #32]	; (8007cb0 <MX_USB_DEVICE_Init+0x44>)
 8007c90:	f7fe fc5c 	bl	800654c <USBD_Start>
 8007c94:	b940      	cbnz	r0, 8007ca8 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */
  HAL_PWREx_EnableUSBVoltageDetector();
 8007c96:	f7fa fb5b 	bl	8002350 <HAL_PWREx_EnableUSBVoltageDetector>

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8007c9a:	bd08      	pop	{r3, pc}
    Error_Handler();
 8007c9c:	f7ff ffe4 	bl	8007c68 <Error_Handler>
    Error_Handler();
 8007ca0:	f7ff ffe2 	bl	8007c68 <Error_Handler>
    Error_Handler();
 8007ca4:	f7ff ffe0 	bl	8007c68 <Error_Handler>
    Error_Handler();
 8007ca8:	f7ff ffde 	bl	8007c68 <Error_Handler>
 8007cac:	20000168 	.word	0x20000168
 8007cb0:	2000065c 	.word	0x2000065c
 8007cb4:	200000e0 	.word	0x200000e0
 8007cb8:	20000120 	.word	0x20000120

08007cbc <CDC_DeInit_HS>:
static int8_t CDC_DeInit_HS(void)
{
  /* USER CODE BEGIN 9 */
  return (USBD_OK);
  /* USER CODE END 9 */
}
 8007cbc:	2000      	movs	r0, #0
 8007cbe:	4770      	bx	lr

08007cc0 <CDC_Control_HS>:
    break;
  }

  return (USBD_OK);
  /* USER CODE END 10 */
}
 8007cc0:	2000      	movs	r0, #0
 8007cc2:	4770      	bx	lr

08007cc4 <CDC_TransmitCplt_HS>:
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 14 */
  return result;
}
 8007cc4:	2000      	movs	r0, #0
 8007cc6:	4770      	bx	lr

08007cc8 <CDC_Receive_HS>:
{
 8007cc8:	b510      	push	{r4, lr}
 8007cca:	4601      	mov	r1, r0
  USBD_CDC_SetRxBuffer(&hUsbDeviceHS, &Buf[0]);
 8007ccc:	4c04      	ldr	r4, [pc, #16]	; (8007ce0 <CDC_Receive_HS+0x18>)
 8007cce:	4620      	mov	r0, r4
 8007cd0:	f7fe fbb7 	bl	8006442 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceHS);
 8007cd4:	4620      	mov	r0, r4
 8007cd6:	f7fe fbd4 	bl	8006482 <USBD_CDC_ReceivePacket>
}
 8007cda:	2000      	movs	r0, #0
 8007cdc:	bd10      	pop	{r4, pc}
 8007cde:	bf00      	nop
 8007ce0:	2000065c 	.word	0x2000065c

08007ce4 <CDC_Init_HS>:
{
 8007ce4:	b510      	push	{r4, lr}
  USBD_CDC_SetTxBuffer(&hUsbDeviceHS, UserTxBufferHS, 0);
 8007ce6:	4c06      	ldr	r4, [pc, #24]	; (8007d00 <CDC_Init_HS+0x1c>)
 8007ce8:	2200      	movs	r2, #0
 8007cea:	4906      	ldr	r1, [pc, #24]	; (8007d04 <CDC_Init_HS+0x20>)
 8007cec:	4620      	mov	r0, r4
 8007cee:	f7fe fba0 	bl	8006432 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceHS, UserRxBufferHS);
 8007cf2:	4905      	ldr	r1, [pc, #20]	; (8007d08 <CDC_Init_HS+0x24>)
 8007cf4:	4620      	mov	r0, r4
 8007cf6:	f7fe fba4 	bl	8006442 <USBD_CDC_SetRxBuffer>
}
 8007cfa:	2000      	movs	r0, #0
 8007cfc:	bd10      	pop	{r4, pc}
 8007cfe:	bf00      	nop
 8007d00:	2000065c 	.word	0x2000065c
 8007d04:	2000112c 	.word	0x2000112c
 8007d08:	2000092c 	.word	0x2000092c

08007d0c <CDC_Transmit_HS>:
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceHS.pClassData;
 8007d0c:	4b09      	ldr	r3, [pc, #36]	; (8007d34 <CDC_Transmit_HS+0x28>)
 8007d0e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
  if (hcdc->TxState != 0){
 8007d12:	f8d3 3814 	ldr.w	r3, [r3, #2068]	; 0x814
 8007d16:	b10b      	cbz	r3, 8007d1c <CDC_Transmit_HS+0x10>
    return USBD_BUSY;
 8007d18:	2001      	movs	r0, #1
}
 8007d1a:	4770      	bx	lr
{
 8007d1c:	b510      	push	{r4, lr}
  USBD_CDC_SetTxBuffer(&hUsbDeviceHS, Buf, Len);
 8007d1e:	4c05      	ldr	r4, [pc, #20]	; (8007d34 <CDC_Transmit_HS+0x28>)
 8007d20:	460a      	mov	r2, r1
 8007d22:	4601      	mov	r1, r0
 8007d24:	4620      	mov	r0, r4
 8007d26:	f7fe fb84 	bl	8006432 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceHS);
 8007d2a:	4620      	mov	r0, r4
 8007d2c:	f7fe fb8f 	bl	800644e <USBD_CDC_TransmitPacket>
}
 8007d30:	bd10      	pop	{r4, pc}
 8007d32:	bf00      	nop
 8007d34:	2000065c 	.word	0x2000065c

08007d38 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8007d38:	b530      	push	{r4, r5, lr}
 8007d3a:	b089      	sub	sp, #36	; 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007d3c:	2300      	movs	r3, #0
 8007d3e:	9303      	str	r3, [sp, #12]
 8007d40:	9304      	str	r3, [sp, #16]
 8007d42:	9305      	str	r3, [sp, #20]
 8007d44:	9306      	str	r3, [sp, #24]
 8007d46:	9307      	str	r3, [sp, #28]
  if(pcdHandle->Instance==USB_OTG_HS)
 8007d48:	6802      	ldr	r2, [r0, #0]
 8007d4a:	4b1b      	ldr	r3, [pc, #108]	; (8007db8 <HAL_PCD_MspInit+0x80>)
 8007d4c:	429a      	cmp	r2, r3
 8007d4e:	d001      	beq.n	8007d54 <HAL_PCD_MspInit+0x1c>
    HAL_NVIC_EnableIRQ(OTG_HS_IRQn);
  /* USER CODE BEGIN USB_OTG_HS_MspInit 1 */

  /* USER CODE END USB_OTG_HS_MspInit 1 */
  }
}
 8007d50:	b009      	add	sp, #36	; 0x24
 8007d52:	bd30      	pop	{r4, r5, pc}
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8007d54:	4c19      	ldr	r4, [pc, #100]	; (8007dbc <HAL_PCD_MspInit+0x84>)
 8007d56:	f8d4 30e0 	ldr.w	r3, [r4, #224]	; 0xe0
 8007d5a:	f043 0302 	orr.w	r3, r3, #2
 8007d5e:	f8c4 30e0 	str.w	r3, [r4, #224]	; 0xe0
 8007d62:	f8d4 30e0 	ldr.w	r3, [r4, #224]	; 0xe0
 8007d66:	f003 0302 	and.w	r3, r3, #2
 8007d6a:	9301      	str	r3, [sp, #4]
 8007d6c:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 8007d6e:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8007d72:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007d74:	2302      	movs	r3, #2
 8007d76:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007d78:	2500      	movs	r5, #0
 8007d7a:	9505      	str	r5, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007d7c:	9506      	str	r5, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF12_OTG2_FS;
 8007d7e:	230c      	movs	r3, #12
 8007d80:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8007d82:	eb0d 0103 	add.w	r1, sp, r3
 8007d86:	480e      	ldr	r0, [pc, #56]	; (8007dc0 <HAL_PCD_MspInit+0x88>)
 8007d88:	f7f9 fb1e 	bl	80013c8 <HAL_GPIO_Init>
    __HAL_RCC_USB_OTG_HS_CLK_ENABLE();
 8007d8c:	f8d4 30d8 	ldr.w	r3, [r4, #216]	; 0xd8
 8007d90:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8007d94:	f8c4 30d8 	str.w	r3, [r4, #216]	; 0xd8
 8007d98:	f8d4 30d8 	ldr.w	r3, [r4, #216]	; 0xd8
 8007d9c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007da0:	9302      	str	r3, [sp, #8]
 8007da2:	9b02      	ldr	r3, [sp, #8]
    HAL_NVIC_SetPriority(OTG_HS_IRQn, 0, 0);
 8007da4:	462a      	mov	r2, r5
 8007da6:	4629      	mov	r1, r5
 8007da8:	204d      	movs	r0, #77	; 0x4d
 8007daa:	f7f8 fcd1 	bl	8000750 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_HS_IRQn);
 8007dae:	204d      	movs	r0, #77	; 0x4d
 8007db0:	f7f8 fd00 	bl	80007b4 <HAL_NVIC_EnableIRQ>
}
 8007db4:	e7cc      	b.n	8007d50 <HAL_PCD_MspInit+0x18>
 8007db6:	bf00      	nop
 8007db8:	40040000 	.word	0x40040000
 8007dbc:	58024400 	.word	0x58024400
 8007dc0:	58020400 	.word	0x58020400

08007dc4 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007dc4:	b508      	push	{r3, lr}
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8007dc6:	f500 7171 	add.w	r1, r0, #964	; 0x3c4
 8007dca:	f8d0 0404 	ldr.w	r0, [r0, #1028]	; 0x404
 8007dce:	f7fe fbd2 	bl	8006576 <USBD_LL_SetupStage>
}
 8007dd2:	bd08      	pop	{r3, pc}

08007dd4 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007dd4:	b508      	push	{r3, lr}
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8007dd6:	ebc1 03c1 	rsb	r3, r1, r1, lsl #3
 8007dda:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 8007dde:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 8007de2:	f8d0 0404 	ldr.w	r0, [r0, #1028]	; 0x404
 8007de6:	f7fe fbf2 	bl	80065ce <USBD_LL_DataOutStage>
}
 8007dea:	bd08      	pop	{r3, pc}

08007dec <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007dec:	b508      	push	{r3, lr}
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8007dee:	ebc1 03c1 	rsb	r3, r1, r1, lsl #3
 8007df2:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 8007df6:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8007df8:	f8d0 0404 	ldr.w	r0, [r0, #1028]	; 0x404
 8007dfc:	f7fe fc20 	bl	8006640 <USBD_LL_DataInStage>
}
 8007e00:	bd08      	pop	{r3, pc}

08007e02 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007e02:	b508      	push	{r3, lr}
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8007e04:	f8d0 0404 	ldr.w	r0, [r0, #1028]	; 0x404
 8007e08:	f7fe fcb6 	bl	8006778 <USBD_LL_SOF>
}
 8007e0c:	bd08      	pop	{r3, pc}

08007e0e <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007e0e:	b510      	push	{r4, lr}
 8007e10:	4604      	mov	r4, r0
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 8007e12:	68c3      	ldr	r3, [r0, #12]
 8007e14:	b13b      	cbz	r3, 8007e26 <HAL_PCD_ResetCallback+0x18>
  {
    speed = USBD_SPEED_HIGH;
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 8007e16:	2b02      	cmp	r3, #2
 8007e18:	d101      	bne.n	8007e1e <HAL_PCD_ResetCallback+0x10>
  {
    speed = USBD_SPEED_FULL;
 8007e1a:	2101      	movs	r1, #1
 8007e1c:	e004      	b.n	8007e28 <HAL_PCD_ResetCallback+0x1a>
  }
  else
  {
    Error_Handler();
 8007e1e:	f7ff ff23 	bl	8007c68 <Error_Handler>
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8007e22:	2101      	movs	r1, #1
 8007e24:	e000      	b.n	8007e28 <HAL_PCD_ResetCallback+0x1a>
    speed = USBD_SPEED_HIGH;
 8007e26:	2100      	movs	r1, #0
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8007e28:	f8d4 0404 	ldr.w	r0, [r4, #1028]	; 0x404
 8007e2c:	f7fe fc8d 	bl	800674a <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8007e30:	f8d4 0404 	ldr.w	r0, [r4, #1028]	; 0x404
 8007e34:	f7fe fc60 	bl	80066f8 <USBD_LL_Reset>
}
 8007e38:	bd10      	pop	{r4, pc}
	...

08007e3c <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007e3c:	b510      	push	{r4, lr}
 8007e3e:	4604      	mov	r4, r0
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8007e40:	f8d0 0404 	ldr.w	r0, [r0, #1028]	; 0x404
 8007e44:	f7fe fc84 	bl	8006750 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8007e48:	6822      	ldr	r2, [r4, #0]
 8007e4a:	f8d2 3e00 	ldr.w	r3, [r2, #3584]	; 0xe00
 8007e4e:	f043 0301 	orr.w	r3, r3, #1
 8007e52:	f8c2 3e00 	str.w	r3, [r2, #3584]	; 0xe00
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8007e56:	6a23      	ldr	r3, [r4, #32]
 8007e58:	b123      	cbz	r3, 8007e64 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8007e5a:	4a03      	ldr	r2, [pc, #12]	; (8007e68 <HAL_PCD_SuspendCallback+0x2c>)
 8007e5c:	6913      	ldr	r3, [r2, #16]
 8007e5e:	f043 0306 	orr.w	r3, r3, #6
 8007e62:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8007e64:	bd10      	pop	{r4, pc}
 8007e66:	bf00      	nop
 8007e68:	e000ed00 	.word	0xe000ed00

08007e6c <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007e6c:	b508      	push	{r3, lr}
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8007e6e:	f8d0 0404 	ldr.w	r0, [r0, #1028]	; 0x404
 8007e72:	f7fe fc76 	bl	8006762 <USBD_LL_Resume>
}
 8007e76:	bd08      	pop	{r3, pc}

08007e78 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007e78:	b508      	push	{r3, lr}
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8007e7a:	f8d0 0404 	ldr.w	r0, [r0, #1028]	; 0x404
 8007e7e:	f7fe fc8b 	bl	8006798 <USBD_LL_IsoOUTIncomplete>
}
 8007e82:	bd08      	pop	{r3, pc}

08007e84 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007e84:	b508      	push	{r3, lr}
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8007e86:	f8d0 0404 	ldr.w	r0, [r0, #1028]	; 0x404
 8007e8a:	f7fe fc83 	bl	8006794 <USBD_LL_IsoINIncomplete>
}
 8007e8e:	bd08      	pop	{r3, pc}

08007e90 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007e90:	b508      	push	{r3, lr}
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8007e92:	f8d0 0404 	ldr.w	r0, [r0, #1028]	; 0x404
 8007e96:	f7fe fc81 	bl	800679c <USBD_LL_DevConnected>
}
 8007e9a:	bd08      	pop	{r3, pc}

08007e9c <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007e9c:	b508      	push	{r3, lr}
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8007e9e:	f8d0 0404 	ldr.w	r0, [r0, #1028]	; 0x404
 8007ea2:	f7fe fc7d 	bl	80067a0 <USBD_LL_DevDisconnected>
}
 8007ea6:	bd08      	pop	{r3, pc}

08007ea8 <USBD_LL_Init>:
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
  /* Init USB Ip. */
  if (pdev->id == DEVICE_HS) {
 8007ea8:	7803      	ldrb	r3, [r0, #0]
 8007eaa:	2b01      	cmp	r3, #1
 8007eac:	d001      	beq.n	8007eb2 <USBD_LL_Init+0xa>
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_HS, 0x200);
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_HS, 0, 0x80);
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_HS, 1, 0x174);
  }
  return USBD_OK;
}
 8007eae:	2000      	movs	r0, #0
 8007eb0:	4770      	bx	lr
{
 8007eb2:	b510      	push	{r4, lr}
  hpcd_USB_OTG_HS.pData = pdev;
 8007eb4:	4b17      	ldr	r3, [pc, #92]	; (8007f14 <USBD_LL_Init+0x6c>)
 8007eb6:	f8c3 0404 	str.w	r0, [r3, #1028]	; 0x404
  pdev->pData = &hpcd_USB_OTG_HS;
 8007eba:	f8c0 32c4 	str.w	r3, [r0, #708]	; 0x2c4
  hpcd_USB_OTG_HS.Instance = USB_OTG_HS;
 8007ebe:	4a16      	ldr	r2, [pc, #88]	; (8007f18 <USBD_LL_Init+0x70>)
 8007ec0:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_HS.Init.dev_endpoints = 9;
 8007ec2:	2209      	movs	r2, #9
 8007ec4:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_HS.Init.speed = PCD_SPEED_FULL;
 8007ec6:	2102      	movs	r1, #2
 8007ec8:	60d9      	str	r1, [r3, #12]
  hpcd_USB_OTG_HS.Init.dma_enable = DISABLE;
 8007eca:	2200      	movs	r2, #0
 8007ecc:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_HS.Init.phy_itface = USB_OTG_EMBEDDED_PHY;
 8007ece:	6199      	str	r1, [r3, #24]
  hpcd_USB_OTG_HS.Init.Sof_enable = DISABLE;
 8007ed0:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_HS.Init.low_power_enable = DISABLE;
 8007ed2:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_HS.Init.lpm_enable = DISABLE;
 8007ed4:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_HS.Init.battery_charging_enable = ENABLE;
 8007ed6:	2101      	movs	r1, #1
 8007ed8:	6299      	str	r1, [r3, #40]	; 0x28
  hpcd_USB_OTG_HS.Init.vbus_sensing_enable = DISABLE;
 8007eda:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_HS.Init.use_dedicated_ep1 = DISABLE;
 8007edc:	631a      	str	r2, [r3, #48]	; 0x30
  hpcd_USB_OTG_HS.Init.use_external_vbus = DISABLE;
 8007ede:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_PCD_Init(&hpcd_USB_OTG_HS) != HAL_OK)
 8007ee0:	4618      	mov	r0, r3
 8007ee2:	f7f9 fc84 	bl	80017ee <HAL_PCD_Init>
 8007ee6:	b990      	cbnz	r0, 8007f0e <USBD_LL_Init+0x66>
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_HS, 0x200);
 8007ee8:	4c0a      	ldr	r4, [pc, #40]	; (8007f14 <USBD_LL_Init+0x6c>)
 8007eea:	f44f 7100 	mov.w	r1, #512	; 0x200
 8007eee:	4620      	mov	r0, r4
 8007ef0:	f7fa f9e9 	bl	80022c6 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_HS, 0, 0x80);
 8007ef4:	2280      	movs	r2, #128	; 0x80
 8007ef6:	2100      	movs	r1, #0
 8007ef8:	4620      	mov	r0, r4
 8007efa:	f7fa f9c0 	bl	800227e <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_HS, 1, 0x174);
 8007efe:	f44f 72ba 	mov.w	r2, #372	; 0x174
 8007f02:	2101      	movs	r1, #1
 8007f04:	4620      	mov	r0, r4
 8007f06:	f7fa f9ba 	bl	800227e <HAL_PCDEx_SetTxFiFo>
}
 8007f0a:	2000      	movs	r0, #0
 8007f0c:	bd10      	pop	{r4, pc}
    Error_Handler( );
 8007f0e:	f7ff feab 	bl	8007c68 <Error_Handler>
 8007f12:	e7e9      	b.n	8007ee8 <USBD_LL_Init+0x40>
 8007f14:	2000192c 	.word	0x2000192c
 8007f18:	40040000 	.word	0x40040000

08007f1c <USBD_LL_IsStallEP>:
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8007f1c:	f8d0 32c4 	ldr.w	r3, [r0, #708]	; 0x2c4

  if((ep_addr & 0x80) == 0x80)
 8007f20:	f011 0f80 	tst.w	r1, #128	; 0x80
 8007f24:	d108      	bne.n	8007f38 <USBD_LL_IsStallEP+0x1c>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8007f26:	f001 017f 	and.w	r1, r1, #127	; 0x7f
 8007f2a:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
 8007f2e:	eb03 0181 	add.w	r1, r3, r1, lsl #2
 8007f32:	f891 01fe 	ldrb.w	r0, [r1, #510]	; 0x1fe
  }
}
 8007f36:	4770      	bx	lr
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8007f38:	f001 017f 	and.w	r1, r1, #127	; 0x7f
 8007f3c:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
 8007f40:	eb03 0181 	add.w	r1, r3, r1, lsl #2
 8007f44:	f891 003e 	ldrb.w	r0, [r1, #62]	; 0x3e
 8007f48:	4770      	bx	lr

08007f4a <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007f4a:	b508      	push	{r3, lr}
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8007f4c:	f8d0 02c4 	ldr.w	r0, [r0, #708]	; 0x2c4
 8007f50:	f7fa f8e2 	bl	8002118 <HAL_PCD_EP_GetRxCount>
}
 8007f54:	bd08      	pop	{r3, pc}

08007f56 <USBD_Get_USB_Status>:
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
  USBD_StatusTypeDef usb_status = USBD_OK;

  switch (hal_status)
 8007f56:	2803      	cmp	r0, #3
 8007f58:	d805      	bhi.n	8007f66 <USBD_Get_USB_Status+0x10>
 8007f5a:	e8df f000 	tbb	[pc, r0]
 8007f5e:	0405      	.short	0x0405
 8007f60:	0502      	.short	0x0502
    break;
    case HAL_ERROR :
      usb_status = USBD_FAIL;
    break;
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8007f62:	2001      	movs	r0, #1
    break;
 8007f64:	4770      	bx	lr
      usb_status = USBD_FAIL;
 8007f66:	2003      	movs	r0, #3
    default :
      usb_status = USBD_FAIL;
    break;
  }
  return usb_status;
}
 8007f68:	4770      	bx	lr

08007f6a <USBD_LL_Start>:
{
 8007f6a:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_Start(pdev->pData);
 8007f6c:	f8d0 02c4 	ldr.w	r0, [r0, #708]	; 0x2c4
 8007f70:	f7f9 fcd7 	bl	8001922 <HAL_PCD_Start>
  usb_status =  USBD_Get_USB_Status(hal_status);
 8007f74:	f7ff ffef 	bl	8007f56 <USBD_Get_USB_Status>
}
 8007f78:	bd08      	pop	{r3, pc}

08007f7a <USBD_LL_OpenEP>:
{
 8007f7a:	b510      	push	{r4, lr}
 8007f7c:	4614      	mov	r4, r2
 8007f7e:	461a      	mov	r2, r3
  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8007f80:	4623      	mov	r3, r4
 8007f82:	f8d0 02c4 	ldr.w	r0, [r0, #708]	; 0x2c4
 8007f86:	f7fa f81c 	bl	8001fc2 <HAL_PCD_EP_Open>
  usb_status =  USBD_Get_USB_Status(hal_status);
 8007f8a:	f7ff ffe4 	bl	8007f56 <USBD_Get_USB_Status>
}
 8007f8e:	bd10      	pop	{r4, pc}

08007f90 <USBD_LL_CloseEP>:
{
 8007f90:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8007f92:	f8d0 02c4 	ldr.w	r0, [r0, #708]	; 0x2c4
 8007f96:	f7fa f857 	bl	8002048 <HAL_PCD_EP_Close>
  usb_status =  USBD_Get_USB_Status(hal_status);
 8007f9a:	f7ff ffdc 	bl	8007f56 <USBD_Get_USB_Status>
}
 8007f9e:	bd08      	pop	{r3, pc}

08007fa0 <USBD_LL_StallEP>:
{
 8007fa0:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8007fa2:	f8d0 02c4 	ldr.w	r0, [r0, #708]	; 0x2c4
 8007fa6:	f7fa f8eb 	bl	8002180 <HAL_PCD_EP_SetStall>
  usb_status =  USBD_Get_USB_Status(hal_status);
 8007faa:	f7ff ffd4 	bl	8007f56 <USBD_Get_USB_Status>
}
 8007fae:	bd08      	pop	{r3, pc}

08007fb0 <USBD_LL_ClearStallEP>:
{
 8007fb0:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8007fb2:	f8d0 02c4 	ldr.w	r0, [r0, #708]	; 0x2c4
 8007fb6:	f7fa f927 	bl	8002208 <HAL_PCD_EP_ClrStall>
  usb_status =  USBD_Get_USB_Status(hal_status);
 8007fba:	f7ff ffcc 	bl	8007f56 <USBD_Get_USB_Status>
}
 8007fbe:	bd08      	pop	{r3, pc}

08007fc0 <USBD_LL_SetUSBAddress>:
{
 8007fc0:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8007fc2:	f8d0 02c4 	ldr.w	r0, [r0, #708]	; 0x2c4
 8007fc6:	f7f9 ffe8 	bl	8001f9a <HAL_PCD_SetAddress>
  usb_status =  USBD_Get_USB_Status(hal_status);
 8007fca:	f7ff ffc4 	bl	8007f56 <USBD_Get_USB_Status>
}
 8007fce:	bd08      	pop	{r3, pc}

08007fd0 <USBD_LL_Transmit>:
{
 8007fd0:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8007fd2:	f8d0 02c4 	ldr.w	r0, [r0, #708]	; 0x2c4
 8007fd6:	f7fa f8a8 	bl	800212a <HAL_PCD_EP_Transmit>
  usb_status =  USBD_Get_USB_Status(hal_status);
 8007fda:	f7ff ffbc 	bl	8007f56 <USBD_Get_USB_Status>
}
 8007fde:	bd08      	pop	{r3, pc}

08007fe0 <USBD_LL_PrepareReceive>:
{
 8007fe0:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8007fe2:	f8d0 02c4 	ldr.w	r0, [r0, #708]	; 0x2c4
 8007fe6:	f7fa f868 	bl	80020ba <HAL_PCD_EP_Receive>
  usb_status =  USBD_Get_USB_Status(hal_status);
 8007fea:	f7ff ffb4 	bl	8007f56 <USBD_Get_USB_Status>
}
 8007fee:	bd08      	pop	{r3, pc}

08007ff0 <USBD_HS_DeviceDescriptor>:
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
  UNUSED(speed);
  *length = sizeof(USBD_HS_DeviceDesc);
 8007ff0:	2312      	movs	r3, #18
 8007ff2:	800b      	strh	r3, [r1, #0]
  return USBD_HS_DeviceDesc;
}
 8007ff4:	4800      	ldr	r0, [pc, #0]	; (8007ff8 <USBD_HS_DeviceDescriptor+0x8>)
 8007ff6:	4770      	bx	lr
 8007ff8:	20000134 	.word	0x20000134

08007ffc <USBD_HS_LangIDStrDescriptor>:
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8007ffc:	2304      	movs	r3, #4
 8007ffe:	800b      	strh	r3, [r1, #0]
  return USBD_LangIDDesc;
}
 8008000:	4800      	ldr	r0, [pc, #0]	; (8008004 <USBD_HS_LangIDStrDescriptor+0x8>)
 8008002:	4770      	bx	lr
 8008004:	20000148 	.word	0x20000148

08008008 <IntToUnicode>:
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
  uint8_t idx = 0;

  for (idx = 0; idx < len; idx++)
 8008008:	2300      	movs	r3, #0
 800800a:	4293      	cmp	r3, r2
 800800c:	d217      	bcs.n	800803e <IntToUnicode+0x36>
{
 800800e:	b430      	push	{r4, r5}
 8008010:	e00b      	b.n	800802a <IntToUnicode+0x22>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8008012:	3437      	adds	r4, #55	; 0x37
 8008014:	f801 4013 	strb.w	r4, [r1, r3, lsl #1]
    }

    value = value << 4;
 8008018:	0100      	lsls	r0, r0, #4

    pbuf[2 * idx + 1] = 0;
 800801a:	005c      	lsls	r4, r3, #1
 800801c:	3401      	adds	r4, #1
 800801e:	2500      	movs	r5, #0
 8008020:	550d      	strb	r5, [r1, r4]
  for (idx = 0; idx < len; idx++)
 8008022:	3301      	adds	r3, #1
 8008024:	b2db      	uxtb	r3, r3
 8008026:	4293      	cmp	r3, r2
 8008028:	d207      	bcs.n	800803a <IntToUnicode+0x32>
    if (((value >> 28)) < 0xA)
 800802a:	0f04      	lsrs	r4, r0, #28
 800802c:	f1b0 4f20 	cmp.w	r0, #2684354560	; 0xa0000000
 8008030:	d2ef      	bcs.n	8008012 <IntToUnicode+0xa>
      pbuf[2 * idx] = (value >> 28) + '0';
 8008032:	3430      	adds	r4, #48	; 0x30
 8008034:	f801 4013 	strb.w	r4, [r1, r3, lsl #1]
 8008038:	e7ee      	b.n	8008018 <IntToUnicode+0x10>
  }
}
 800803a:	bc30      	pop	{r4, r5}
 800803c:	4770      	bx	lr
 800803e:	4770      	bx	lr

08008040 <Get_SerialNum>:
{
 8008040:	b538      	push	{r3, r4, r5, lr}
  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8008042:	4b0b      	ldr	r3, [pc, #44]	; (8008070 <Get_SerialNum+0x30>)
 8008044:	6818      	ldr	r0, [r3, #0]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8008046:	3304      	adds	r3, #4
 8008048:	681c      	ldr	r4, [r3, #0]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800804a:	3304      	adds	r3, #4
 800804c:	681b      	ldr	r3, [r3, #0]
  if (deviceserial0 != 0)
 800804e:	18c0      	adds	r0, r0, r3
 8008050:	d100      	bne.n	8008054 <Get_SerialNum+0x14>
}
 8008052:	bd38      	pop	{r3, r4, r5, pc}
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8008054:	4d07      	ldr	r5, [pc, #28]	; (8008074 <Get_SerialNum+0x34>)
 8008056:	2208      	movs	r2, #8
 8008058:	f105 011a 	add.w	r1, r5, #26
 800805c:	f7ff ffd4 	bl	8008008 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8008060:	2204      	movs	r2, #4
 8008062:	f105 012a 	add.w	r1, r5, #42	; 0x2a
 8008066:	4620      	mov	r0, r4
 8008068:	f7ff ffce 	bl	8008008 <IntToUnicode>
}
 800806c:	e7f1      	b.n	8008052 <Get_SerialNum+0x12>
 800806e:	bf00      	nop
 8008070:	1ff1e800 	.word	0x1ff1e800
 8008074:	20000134 	.word	0x20000134

08008078 <USBD_HS_SerialStrDescriptor>:
{
 8008078:	b508      	push	{r3, lr}
  *length = USB_SIZ_STRING_SERIAL;
 800807a:	231a      	movs	r3, #26
 800807c:	800b      	strh	r3, [r1, #0]
  Get_SerialNum();
 800807e:	f7ff ffdf 	bl	8008040 <Get_SerialNum>
}
 8008082:	4801      	ldr	r0, [pc, #4]	; (8008088 <USBD_HS_SerialStrDescriptor+0x10>)
 8008084:	bd08      	pop	{r3, pc}
 8008086:	bf00      	nop
 8008088:	2000014c 	.word	0x2000014c

0800808c <USBD_HS_ProductStrDescriptor>:
{
 800808c:	b508      	push	{r3, lr}
 800808e:	460a      	mov	r2, r1
  if(speed == 0)
 8008090:	b928      	cbnz	r0, 800809e <USBD_HS_ProductStrDescriptor+0x12>
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_HS, USBD_StrDesc, length);
 8008092:	4905      	ldr	r1, [pc, #20]	; (80080a8 <USBD_HS_ProductStrDescriptor+0x1c>)
 8008094:	4805      	ldr	r0, [pc, #20]	; (80080ac <USBD_HS_ProductStrDescriptor+0x20>)
 8008096:	f7fe fed2 	bl	8006e3e <USBD_GetString>
}
 800809a:	4803      	ldr	r0, [pc, #12]	; (80080a8 <USBD_HS_ProductStrDescriptor+0x1c>)
 800809c:	bd08      	pop	{r3, pc}
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_HS, USBD_StrDesc, length);
 800809e:	4902      	ldr	r1, [pc, #8]	; (80080a8 <USBD_HS_ProductStrDescriptor+0x1c>)
 80080a0:	4802      	ldr	r0, [pc, #8]	; (80080ac <USBD_HS_ProductStrDescriptor+0x20>)
 80080a2:	f7fe fecc 	bl	8006e3e <USBD_GetString>
 80080a6:	e7f8      	b.n	800809a <USBD_HS_ProductStrDescriptor+0xe>
 80080a8:	20001d34 	.word	0x20001d34
 80080ac:	08009258 	.word	0x08009258

080080b0 <USBD_HS_ManufacturerStrDescriptor>:
{
 80080b0:	b510      	push	{r4, lr}
 80080b2:	460a      	mov	r2, r1
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 80080b4:	4c03      	ldr	r4, [pc, #12]	; (80080c4 <USBD_HS_ManufacturerStrDescriptor+0x14>)
 80080b6:	4621      	mov	r1, r4
 80080b8:	4803      	ldr	r0, [pc, #12]	; (80080c8 <USBD_HS_ManufacturerStrDescriptor+0x18>)
 80080ba:	f7fe fec0 	bl	8006e3e <USBD_GetString>
}
 80080be:	4620      	mov	r0, r4
 80080c0:	bd10      	pop	{r4, pc}
 80080c2:	bf00      	nop
 80080c4:	20001d34 	.word	0x20001d34
 80080c8:	08009270 	.word	0x08009270

080080cc <USBD_HS_ConfigStrDescriptor>:
{
 80080cc:	b508      	push	{r3, lr}
 80080ce:	460a      	mov	r2, r1
  if(speed == USBD_SPEED_HIGH)
 80080d0:	b928      	cbnz	r0, 80080de <USBD_HS_ConfigStrDescriptor+0x12>
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_HS, USBD_StrDesc, length);
 80080d2:	4905      	ldr	r1, [pc, #20]	; (80080e8 <USBD_HS_ConfigStrDescriptor+0x1c>)
 80080d4:	4805      	ldr	r0, [pc, #20]	; (80080ec <USBD_HS_ConfigStrDescriptor+0x20>)
 80080d6:	f7fe feb2 	bl	8006e3e <USBD_GetString>
}
 80080da:	4803      	ldr	r0, [pc, #12]	; (80080e8 <USBD_HS_ConfigStrDescriptor+0x1c>)
 80080dc:	bd08      	pop	{r3, pc}
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_HS, USBD_StrDesc, length);
 80080de:	4902      	ldr	r1, [pc, #8]	; (80080e8 <USBD_HS_ConfigStrDescriptor+0x1c>)
 80080e0:	4802      	ldr	r0, [pc, #8]	; (80080ec <USBD_HS_ConfigStrDescriptor+0x20>)
 80080e2:	f7fe feac 	bl	8006e3e <USBD_GetString>
 80080e6:	e7f8      	b.n	80080da <USBD_HS_ConfigStrDescriptor+0xe>
 80080e8:	20001d34 	.word	0x20001d34
 80080ec:	08009284 	.word	0x08009284

080080f0 <USBD_HS_InterfaceStrDescriptor>:
{
 80080f0:	b508      	push	{r3, lr}
 80080f2:	460a      	mov	r2, r1
  if(speed == 0)
 80080f4:	b928      	cbnz	r0, 8008102 <USBD_HS_InterfaceStrDescriptor+0x12>
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_HS, USBD_StrDesc, length);
 80080f6:	4905      	ldr	r1, [pc, #20]	; (800810c <USBD_HS_InterfaceStrDescriptor+0x1c>)
 80080f8:	4805      	ldr	r0, [pc, #20]	; (8008110 <USBD_HS_InterfaceStrDescriptor+0x20>)
 80080fa:	f7fe fea0 	bl	8006e3e <USBD_GetString>
}
 80080fe:	4803      	ldr	r0, [pc, #12]	; (800810c <USBD_HS_InterfaceStrDescriptor+0x1c>)
 8008100:	bd08      	pop	{r3, pc}
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_HS, USBD_StrDesc, length);
 8008102:	4902      	ldr	r1, [pc, #8]	; (800810c <USBD_HS_InterfaceStrDescriptor+0x1c>)
 8008104:	4802      	ldr	r0, [pc, #8]	; (8008110 <USBD_HS_InterfaceStrDescriptor+0x20>)
 8008106:	f7fe fe9a 	bl	8006e3e <USBD_GetString>
 800810a:	e7f8      	b.n	80080fe <USBD_HS_InterfaceStrDescriptor+0xe>
 800810c:	20001d34 	.word	0x20001d34
 8008110:	08009290 	.word	0x08009290

08008114 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8008114:	f8df d034 	ldr.w	sp, [pc, #52]	; 800814c <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8008118:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800811a:	e003      	b.n	8008124 <LoopCopyDataInit>

0800811c <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 800811c:	4b0c      	ldr	r3, [pc, #48]	; (8008150 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800811e:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8008120:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8008122:	3104      	adds	r1, #4

08008124 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8008124:	480b      	ldr	r0, [pc, #44]	; (8008154 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8008126:	4b0c      	ldr	r3, [pc, #48]	; (8008158 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8008128:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800812a:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 800812c:	d3f6      	bcc.n	800811c <CopyDataInit>
  ldr  r2, =_sbss
 800812e:	4a0b      	ldr	r2, [pc, #44]	; (800815c <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8008130:	e002      	b.n	8008138 <LoopFillZerobss>

08008132 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8008132:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8008134:	f842 3b04 	str.w	r3, [r2], #4

08008138 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8008138:	4b09      	ldr	r3, [pc, #36]	; (8008160 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800813a:	429a      	cmp	r2, r3
  bcc  FillZerobss
 800813c:	d3f9      	bcc.n	8008132 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800813e:	f7ff fd55 	bl	8007bec <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8008142:	f000 f817 	bl	8008174 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8008146:	f7ff fb0d 	bl	8007764 <main>
  bx  lr    
 800814a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800814c:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8008150:	08009350 	.word	0x08009350
  ldr  r0, =_sdata
 8008154:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8008158:	200001e8 	.word	0x200001e8
  ldr  r2, =_sbss
 800815c:	200001e8 	.word	0x200001e8
  ldr  r3, = _ebss
 8008160:	20001f44 	.word	0x20001f44

08008164 <ADC3_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8008164:	e7fe      	b.n	8008164 <ADC3_IRQHandler>
	...

08008168 <__errno>:
 8008168:	4b01      	ldr	r3, [pc, #4]	; (8008170 <__errno+0x8>)
 800816a:	6818      	ldr	r0, [r3, #0]
 800816c:	4770      	bx	lr
 800816e:	bf00      	nop
 8008170:	20000184 	.word	0x20000184

08008174 <__libc_init_array>:
 8008174:	b570      	push	{r4, r5, r6, lr}
 8008176:	4d0d      	ldr	r5, [pc, #52]	; (80081ac <__libc_init_array+0x38>)
 8008178:	4c0d      	ldr	r4, [pc, #52]	; (80081b0 <__libc_init_array+0x3c>)
 800817a:	1b64      	subs	r4, r4, r5
 800817c:	10a4      	asrs	r4, r4, #2
 800817e:	2600      	movs	r6, #0
 8008180:	42a6      	cmp	r6, r4
 8008182:	d109      	bne.n	8008198 <__libc_init_array+0x24>
 8008184:	4d0b      	ldr	r5, [pc, #44]	; (80081b4 <__libc_init_array+0x40>)
 8008186:	4c0c      	ldr	r4, [pc, #48]	; (80081b8 <__libc_init_array+0x44>)
 8008188:	f000 fff2 	bl	8009170 <_init>
 800818c:	1b64      	subs	r4, r4, r5
 800818e:	10a4      	asrs	r4, r4, #2
 8008190:	2600      	movs	r6, #0
 8008192:	42a6      	cmp	r6, r4
 8008194:	d105      	bne.n	80081a2 <__libc_init_array+0x2e>
 8008196:	bd70      	pop	{r4, r5, r6, pc}
 8008198:	f855 3b04 	ldr.w	r3, [r5], #4
 800819c:	4798      	blx	r3
 800819e:	3601      	adds	r6, #1
 80081a0:	e7ee      	b.n	8008180 <__libc_init_array+0xc>
 80081a2:	f855 3b04 	ldr.w	r3, [r5], #4
 80081a6:	4798      	blx	r3
 80081a8:	3601      	adds	r6, #1
 80081aa:	e7f2      	b.n	8008192 <__libc_init_array+0x1e>
 80081ac:	08009340 	.word	0x08009340
 80081b0:	08009340 	.word	0x08009340
 80081b4:	08009340 	.word	0x08009340
 80081b8:	08009348 	.word	0x08009348

080081bc <malloc>:
 80081bc:	4b02      	ldr	r3, [pc, #8]	; (80081c8 <malloc+0xc>)
 80081be:	4601      	mov	r1, r0
 80081c0:	6818      	ldr	r0, [r3, #0]
 80081c2:	f000 b871 	b.w	80082a8 <_malloc_r>
 80081c6:	bf00      	nop
 80081c8:	20000184 	.word	0x20000184

080081cc <free>:
 80081cc:	4b02      	ldr	r3, [pc, #8]	; (80081d8 <free+0xc>)
 80081ce:	4601      	mov	r1, r0
 80081d0:	6818      	ldr	r0, [r3, #0]
 80081d2:	f000 b819 	b.w	8008208 <_free_r>
 80081d6:	bf00      	nop
 80081d8:	20000184 	.word	0x20000184

080081dc <memcpy>:
 80081dc:	440a      	add	r2, r1
 80081de:	4291      	cmp	r1, r2
 80081e0:	f100 33ff 	add.w	r3, r0, #4294967295
 80081e4:	d100      	bne.n	80081e8 <memcpy+0xc>
 80081e6:	4770      	bx	lr
 80081e8:	b510      	push	{r4, lr}
 80081ea:	f811 4b01 	ldrb.w	r4, [r1], #1
 80081ee:	f803 4f01 	strb.w	r4, [r3, #1]!
 80081f2:	4291      	cmp	r1, r2
 80081f4:	d1f9      	bne.n	80081ea <memcpy+0xe>
 80081f6:	bd10      	pop	{r4, pc}

080081f8 <memset>:
 80081f8:	4402      	add	r2, r0
 80081fa:	4603      	mov	r3, r0
 80081fc:	4293      	cmp	r3, r2
 80081fe:	d100      	bne.n	8008202 <memset+0xa>
 8008200:	4770      	bx	lr
 8008202:	f803 1b01 	strb.w	r1, [r3], #1
 8008206:	e7f9      	b.n	80081fc <memset+0x4>

08008208 <_free_r>:
 8008208:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800820a:	2900      	cmp	r1, #0
 800820c:	d048      	beq.n	80082a0 <_free_r+0x98>
 800820e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008212:	9001      	str	r0, [sp, #4]
 8008214:	2b00      	cmp	r3, #0
 8008216:	f1a1 0404 	sub.w	r4, r1, #4
 800821a:	bfb8      	it	lt
 800821c:	18e4      	addlt	r4, r4, r3
 800821e:	f000 f9d3 	bl	80085c8 <__malloc_lock>
 8008222:	4a20      	ldr	r2, [pc, #128]	; (80082a4 <_free_r+0x9c>)
 8008224:	9801      	ldr	r0, [sp, #4]
 8008226:	6813      	ldr	r3, [r2, #0]
 8008228:	4615      	mov	r5, r2
 800822a:	b933      	cbnz	r3, 800823a <_free_r+0x32>
 800822c:	6063      	str	r3, [r4, #4]
 800822e:	6014      	str	r4, [r2, #0]
 8008230:	b003      	add	sp, #12
 8008232:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008236:	f000 b9cd 	b.w	80085d4 <__malloc_unlock>
 800823a:	42a3      	cmp	r3, r4
 800823c:	d90b      	bls.n	8008256 <_free_r+0x4e>
 800823e:	6821      	ldr	r1, [r4, #0]
 8008240:	1862      	adds	r2, r4, r1
 8008242:	4293      	cmp	r3, r2
 8008244:	bf04      	itt	eq
 8008246:	681a      	ldreq	r2, [r3, #0]
 8008248:	685b      	ldreq	r3, [r3, #4]
 800824a:	6063      	str	r3, [r4, #4]
 800824c:	bf04      	itt	eq
 800824e:	1852      	addeq	r2, r2, r1
 8008250:	6022      	streq	r2, [r4, #0]
 8008252:	602c      	str	r4, [r5, #0]
 8008254:	e7ec      	b.n	8008230 <_free_r+0x28>
 8008256:	461a      	mov	r2, r3
 8008258:	685b      	ldr	r3, [r3, #4]
 800825a:	b10b      	cbz	r3, 8008260 <_free_r+0x58>
 800825c:	42a3      	cmp	r3, r4
 800825e:	d9fa      	bls.n	8008256 <_free_r+0x4e>
 8008260:	6811      	ldr	r1, [r2, #0]
 8008262:	1855      	adds	r5, r2, r1
 8008264:	42a5      	cmp	r5, r4
 8008266:	d10b      	bne.n	8008280 <_free_r+0x78>
 8008268:	6824      	ldr	r4, [r4, #0]
 800826a:	4421      	add	r1, r4
 800826c:	1854      	adds	r4, r2, r1
 800826e:	42a3      	cmp	r3, r4
 8008270:	6011      	str	r1, [r2, #0]
 8008272:	d1dd      	bne.n	8008230 <_free_r+0x28>
 8008274:	681c      	ldr	r4, [r3, #0]
 8008276:	685b      	ldr	r3, [r3, #4]
 8008278:	6053      	str	r3, [r2, #4]
 800827a:	4421      	add	r1, r4
 800827c:	6011      	str	r1, [r2, #0]
 800827e:	e7d7      	b.n	8008230 <_free_r+0x28>
 8008280:	d902      	bls.n	8008288 <_free_r+0x80>
 8008282:	230c      	movs	r3, #12
 8008284:	6003      	str	r3, [r0, #0]
 8008286:	e7d3      	b.n	8008230 <_free_r+0x28>
 8008288:	6825      	ldr	r5, [r4, #0]
 800828a:	1961      	adds	r1, r4, r5
 800828c:	428b      	cmp	r3, r1
 800828e:	bf04      	itt	eq
 8008290:	6819      	ldreq	r1, [r3, #0]
 8008292:	685b      	ldreq	r3, [r3, #4]
 8008294:	6063      	str	r3, [r4, #4]
 8008296:	bf04      	itt	eq
 8008298:	1949      	addeq	r1, r1, r5
 800829a:	6021      	streq	r1, [r4, #0]
 800829c:	6054      	str	r4, [r2, #4]
 800829e:	e7c7      	b.n	8008230 <_free_r+0x28>
 80082a0:	b003      	add	sp, #12
 80082a2:	bd30      	pop	{r4, r5, pc}
 80082a4:	20000604 	.word	0x20000604

080082a8 <_malloc_r>:
 80082a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80082aa:	1ccd      	adds	r5, r1, #3
 80082ac:	f025 0503 	bic.w	r5, r5, #3
 80082b0:	3508      	adds	r5, #8
 80082b2:	2d0c      	cmp	r5, #12
 80082b4:	bf38      	it	cc
 80082b6:	250c      	movcc	r5, #12
 80082b8:	2d00      	cmp	r5, #0
 80082ba:	4606      	mov	r6, r0
 80082bc:	db01      	blt.n	80082c2 <_malloc_r+0x1a>
 80082be:	42a9      	cmp	r1, r5
 80082c0:	d903      	bls.n	80082ca <_malloc_r+0x22>
 80082c2:	230c      	movs	r3, #12
 80082c4:	6033      	str	r3, [r6, #0]
 80082c6:	2000      	movs	r0, #0
 80082c8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80082ca:	f000 f97d 	bl	80085c8 <__malloc_lock>
 80082ce:	4921      	ldr	r1, [pc, #132]	; (8008354 <_malloc_r+0xac>)
 80082d0:	680a      	ldr	r2, [r1, #0]
 80082d2:	4614      	mov	r4, r2
 80082d4:	b99c      	cbnz	r4, 80082fe <_malloc_r+0x56>
 80082d6:	4f20      	ldr	r7, [pc, #128]	; (8008358 <_malloc_r+0xb0>)
 80082d8:	683b      	ldr	r3, [r7, #0]
 80082da:	b923      	cbnz	r3, 80082e6 <_malloc_r+0x3e>
 80082dc:	4621      	mov	r1, r4
 80082de:	4630      	mov	r0, r6
 80082e0:	f000 f86a 	bl	80083b8 <_sbrk_r>
 80082e4:	6038      	str	r0, [r7, #0]
 80082e6:	4629      	mov	r1, r5
 80082e8:	4630      	mov	r0, r6
 80082ea:	f000 f865 	bl	80083b8 <_sbrk_r>
 80082ee:	1c43      	adds	r3, r0, #1
 80082f0:	d123      	bne.n	800833a <_malloc_r+0x92>
 80082f2:	230c      	movs	r3, #12
 80082f4:	6033      	str	r3, [r6, #0]
 80082f6:	4630      	mov	r0, r6
 80082f8:	f000 f96c 	bl	80085d4 <__malloc_unlock>
 80082fc:	e7e3      	b.n	80082c6 <_malloc_r+0x1e>
 80082fe:	6823      	ldr	r3, [r4, #0]
 8008300:	1b5b      	subs	r3, r3, r5
 8008302:	d417      	bmi.n	8008334 <_malloc_r+0x8c>
 8008304:	2b0b      	cmp	r3, #11
 8008306:	d903      	bls.n	8008310 <_malloc_r+0x68>
 8008308:	6023      	str	r3, [r4, #0]
 800830a:	441c      	add	r4, r3
 800830c:	6025      	str	r5, [r4, #0]
 800830e:	e004      	b.n	800831a <_malloc_r+0x72>
 8008310:	6863      	ldr	r3, [r4, #4]
 8008312:	42a2      	cmp	r2, r4
 8008314:	bf0c      	ite	eq
 8008316:	600b      	streq	r3, [r1, #0]
 8008318:	6053      	strne	r3, [r2, #4]
 800831a:	4630      	mov	r0, r6
 800831c:	f000 f95a 	bl	80085d4 <__malloc_unlock>
 8008320:	f104 000b 	add.w	r0, r4, #11
 8008324:	1d23      	adds	r3, r4, #4
 8008326:	f020 0007 	bic.w	r0, r0, #7
 800832a:	1ac2      	subs	r2, r0, r3
 800832c:	d0cc      	beq.n	80082c8 <_malloc_r+0x20>
 800832e:	1a1b      	subs	r3, r3, r0
 8008330:	50a3      	str	r3, [r4, r2]
 8008332:	e7c9      	b.n	80082c8 <_malloc_r+0x20>
 8008334:	4622      	mov	r2, r4
 8008336:	6864      	ldr	r4, [r4, #4]
 8008338:	e7cc      	b.n	80082d4 <_malloc_r+0x2c>
 800833a:	1cc4      	adds	r4, r0, #3
 800833c:	f024 0403 	bic.w	r4, r4, #3
 8008340:	42a0      	cmp	r0, r4
 8008342:	d0e3      	beq.n	800830c <_malloc_r+0x64>
 8008344:	1a21      	subs	r1, r4, r0
 8008346:	4630      	mov	r0, r6
 8008348:	f000 f836 	bl	80083b8 <_sbrk_r>
 800834c:	3001      	adds	r0, #1
 800834e:	d1dd      	bne.n	800830c <_malloc_r+0x64>
 8008350:	e7cf      	b.n	80082f2 <_malloc_r+0x4a>
 8008352:	bf00      	nop
 8008354:	20000604 	.word	0x20000604
 8008358:	20000608 	.word	0x20000608

0800835c <iprintf>:
 800835c:	b40f      	push	{r0, r1, r2, r3}
 800835e:	4b0a      	ldr	r3, [pc, #40]	; (8008388 <iprintf+0x2c>)
 8008360:	b513      	push	{r0, r1, r4, lr}
 8008362:	681c      	ldr	r4, [r3, #0]
 8008364:	b124      	cbz	r4, 8008370 <iprintf+0x14>
 8008366:	69a3      	ldr	r3, [r4, #24]
 8008368:	b913      	cbnz	r3, 8008370 <iprintf+0x14>
 800836a:	4620      	mov	r0, r4
 800836c:	f000 f88c 	bl	8008488 <__sinit>
 8008370:	ab05      	add	r3, sp, #20
 8008372:	9a04      	ldr	r2, [sp, #16]
 8008374:	68a1      	ldr	r1, [r4, #8]
 8008376:	9301      	str	r3, [sp, #4]
 8008378:	4620      	mov	r0, r4
 800837a:	f000 f95b 	bl	8008634 <_vfiprintf_r>
 800837e:	b002      	add	sp, #8
 8008380:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008384:	b004      	add	sp, #16
 8008386:	4770      	bx	lr
 8008388:	20000184 	.word	0x20000184

0800838c <putchar>:
 800838c:	4b09      	ldr	r3, [pc, #36]	; (80083b4 <putchar+0x28>)
 800838e:	b513      	push	{r0, r1, r4, lr}
 8008390:	681c      	ldr	r4, [r3, #0]
 8008392:	4601      	mov	r1, r0
 8008394:	b134      	cbz	r4, 80083a4 <putchar+0x18>
 8008396:	69a3      	ldr	r3, [r4, #24]
 8008398:	b923      	cbnz	r3, 80083a4 <putchar+0x18>
 800839a:	9001      	str	r0, [sp, #4]
 800839c:	4620      	mov	r0, r4
 800839e:	f000 f873 	bl	8008488 <__sinit>
 80083a2:	9901      	ldr	r1, [sp, #4]
 80083a4:	68a2      	ldr	r2, [r4, #8]
 80083a6:	4620      	mov	r0, r4
 80083a8:	b002      	add	sp, #8
 80083aa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80083ae:	f000 bc05 	b.w	8008bbc <_putc_r>
 80083b2:	bf00      	nop
 80083b4:	20000184 	.word	0x20000184

080083b8 <_sbrk_r>:
 80083b8:	b538      	push	{r3, r4, r5, lr}
 80083ba:	4d06      	ldr	r5, [pc, #24]	; (80083d4 <_sbrk_r+0x1c>)
 80083bc:	2300      	movs	r3, #0
 80083be:	4604      	mov	r4, r0
 80083c0:	4608      	mov	r0, r1
 80083c2:	602b      	str	r3, [r5, #0]
 80083c4:	f7ff fbe8 	bl	8007b98 <_sbrk>
 80083c8:	1c43      	adds	r3, r0, #1
 80083ca:	d102      	bne.n	80083d2 <_sbrk_r+0x1a>
 80083cc:	682b      	ldr	r3, [r5, #0]
 80083ce:	b103      	cbz	r3, 80083d2 <_sbrk_r+0x1a>
 80083d0:	6023      	str	r3, [r4, #0]
 80083d2:	bd38      	pop	{r3, r4, r5, pc}
 80083d4:	20001f40 	.word	0x20001f40

080083d8 <std>:
 80083d8:	2300      	movs	r3, #0
 80083da:	b510      	push	{r4, lr}
 80083dc:	4604      	mov	r4, r0
 80083de:	e9c0 3300 	strd	r3, r3, [r0]
 80083e2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80083e6:	6083      	str	r3, [r0, #8]
 80083e8:	8181      	strh	r1, [r0, #12]
 80083ea:	6643      	str	r3, [r0, #100]	; 0x64
 80083ec:	81c2      	strh	r2, [r0, #14]
 80083ee:	6183      	str	r3, [r0, #24]
 80083f0:	4619      	mov	r1, r3
 80083f2:	2208      	movs	r2, #8
 80083f4:	305c      	adds	r0, #92	; 0x5c
 80083f6:	f7ff feff 	bl	80081f8 <memset>
 80083fa:	4b05      	ldr	r3, [pc, #20]	; (8008410 <std+0x38>)
 80083fc:	6263      	str	r3, [r4, #36]	; 0x24
 80083fe:	4b05      	ldr	r3, [pc, #20]	; (8008414 <std+0x3c>)
 8008400:	62a3      	str	r3, [r4, #40]	; 0x28
 8008402:	4b05      	ldr	r3, [pc, #20]	; (8008418 <std+0x40>)
 8008404:	62e3      	str	r3, [r4, #44]	; 0x2c
 8008406:	4b05      	ldr	r3, [pc, #20]	; (800841c <std+0x44>)
 8008408:	6224      	str	r4, [r4, #32]
 800840a:	6323      	str	r3, [r4, #48]	; 0x30
 800840c:	bd10      	pop	{r4, pc}
 800840e:	bf00      	nop
 8008410:	08008c4d 	.word	0x08008c4d
 8008414:	08008c6f 	.word	0x08008c6f
 8008418:	08008ca7 	.word	0x08008ca7
 800841c:	08008ccb 	.word	0x08008ccb

08008420 <_cleanup_r>:
 8008420:	4901      	ldr	r1, [pc, #4]	; (8008428 <_cleanup_r+0x8>)
 8008422:	f000 b8af 	b.w	8008584 <_fwalk_reent>
 8008426:	bf00      	nop
 8008428:	08008fa5 	.word	0x08008fa5

0800842c <__sfmoreglue>:
 800842c:	b570      	push	{r4, r5, r6, lr}
 800842e:	1e4a      	subs	r2, r1, #1
 8008430:	2568      	movs	r5, #104	; 0x68
 8008432:	4355      	muls	r5, r2
 8008434:	460e      	mov	r6, r1
 8008436:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800843a:	f7ff ff35 	bl	80082a8 <_malloc_r>
 800843e:	4604      	mov	r4, r0
 8008440:	b140      	cbz	r0, 8008454 <__sfmoreglue+0x28>
 8008442:	2100      	movs	r1, #0
 8008444:	e9c0 1600 	strd	r1, r6, [r0]
 8008448:	300c      	adds	r0, #12
 800844a:	60a0      	str	r0, [r4, #8]
 800844c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8008450:	f7ff fed2 	bl	80081f8 <memset>
 8008454:	4620      	mov	r0, r4
 8008456:	bd70      	pop	{r4, r5, r6, pc}

08008458 <__sfp_lock_acquire>:
 8008458:	4801      	ldr	r0, [pc, #4]	; (8008460 <__sfp_lock_acquire+0x8>)
 800845a:	f000 b8b3 	b.w	80085c4 <__retarget_lock_acquire_recursive>
 800845e:	bf00      	nop
 8008460:	20001f3c 	.word	0x20001f3c

08008464 <__sfp_lock_release>:
 8008464:	4801      	ldr	r0, [pc, #4]	; (800846c <__sfp_lock_release+0x8>)
 8008466:	f000 b8ae 	b.w	80085c6 <__retarget_lock_release_recursive>
 800846a:	bf00      	nop
 800846c:	20001f3c 	.word	0x20001f3c

08008470 <__sinit_lock_acquire>:
 8008470:	4801      	ldr	r0, [pc, #4]	; (8008478 <__sinit_lock_acquire+0x8>)
 8008472:	f000 b8a7 	b.w	80085c4 <__retarget_lock_acquire_recursive>
 8008476:	bf00      	nop
 8008478:	20001f37 	.word	0x20001f37

0800847c <__sinit_lock_release>:
 800847c:	4801      	ldr	r0, [pc, #4]	; (8008484 <__sinit_lock_release+0x8>)
 800847e:	f000 b8a2 	b.w	80085c6 <__retarget_lock_release_recursive>
 8008482:	bf00      	nop
 8008484:	20001f37 	.word	0x20001f37

08008488 <__sinit>:
 8008488:	b510      	push	{r4, lr}
 800848a:	4604      	mov	r4, r0
 800848c:	f7ff fff0 	bl	8008470 <__sinit_lock_acquire>
 8008490:	69a3      	ldr	r3, [r4, #24]
 8008492:	b11b      	cbz	r3, 800849c <__sinit+0x14>
 8008494:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008498:	f7ff bff0 	b.w	800847c <__sinit_lock_release>
 800849c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80084a0:	6523      	str	r3, [r4, #80]	; 0x50
 80084a2:	4b13      	ldr	r3, [pc, #76]	; (80084f0 <__sinit+0x68>)
 80084a4:	4a13      	ldr	r2, [pc, #76]	; (80084f4 <__sinit+0x6c>)
 80084a6:	681b      	ldr	r3, [r3, #0]
 80084a8:	62a2      	str	r2, [r4, #40]	; 0x28
 80084aa:	42a3      	cmp	r3, r4
 80084ac:	bf04      	itt	eq
 80084ae:	2301      	moveq	r3, #1
 80084b0:	61a3      	streq	r3, [r4, #24]
 80084b2:	4620      	mov	r0, r4
 80084b4:	f000 f820 	bl	80084f8 <__sfp>
 80084b8:	6060      	str	r0, [r4, #4]
 80084ba:	4620      	mov	r0, r4
 80084bc:	f000 f81c 	bl	80084f8 <__sfp>
 80084c0:	60a0      	str	r0, [r4, #8]
 80084c2:	4620      	mov	r0, r4
 80084c4:	f000 f818 	bl	80084f8 <__sfp>
 80084c8:	2200      	movs	r2, #0
 80084ca:	60e0      	str	r0, [r4, #12]
 80084cc:	2104      	movs	r1, #4
 80084ce:	6860      	ldr	r0, [r4, #4]
 80084d0:	f7ff ff82 	bl	80083d8 <std>
 80084d4:	68a0      	ldr	r0, [r4, #8]
 80084d6:	2201      	movs	r2, #1
 80084d8:	2109      	movs	r1, #9
 80084da:	f7ff ff7d 	bl	80083d8 <std>
 80084de:	68e0      	ldr	r0, [r4, #12]
 80084e0:	2202      	movs	r2, #2
 80084e2:	2112      	movs	r1, #18
 80084e4:	f7ff ff78 	bl	80083d8 <std>
 80084e8:	2301      	movs	r3, #1
 80084ea:	61a3      	str	r3, [r4, #24]
 80084ec:	e7d2      	b.n	8008494 <__sinit+0xc>
 80084ee:	bf00      	nop
 80084f0:	080092a0 	.word	0x080092a0
 80084f4:	08008421 	.word	0x08008421

080084f8 <__sfp>:
 80084f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80084fa:	4607      	mov	r7, r0
 80084fc:	f7ff ffac 	bl	8008458 <__sfp_lock_acquire>
 8008500:	4b1e      	ldr	r3, [pc, #120]	; (800857c <__sfp+0x84>)
 8008502:	681e      	ldr	r6, [r3, #0]
 8008504:	69b3      	ldr	r3, [r6, #24]
 8008506:	b913      	cbnz	r3, 800850e <__sfp+0x16>
 8008508:	4630      	mov	r0, r6
 800850a:	f7ff ffbd 	bl	8008488 <__sinit>
 800850e:	3648      	adds	r6, #72	; 0x48
 8008510:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8008514:	3b01      	subs	r3, #1
 8008516:	d503      	bpl.n	8008520 <__sfp+0x28>
 8008518:	6833      	ldr	r3, [r6, #0]
 800851a:	b30b      	cbz	r3, 8008560 <__sfp+0x68>
 800851c:	6836      	ldr	r6, [r6, #0]
 800851e:	e7f7      	b.n	8008510 <__sfp+0x18>
 8008520:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8008524:	b9d5      	cbnz	r5, 800855c <__sfp+0x64>
 8008526:	4b16      	ldr	r3, [pc, #88]	; (8008580 <__sfp+0x88>)
 8008528:	60e3      	str	r3, [r4, #12]
 800852a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800852e:	6665      	str	r5, [r4, #100]	; 0x64
 8008530:	f000 f847 	bl	80085c2 <__retarget_lock_init_recursive>
 8008534:	f7ff ff96 	bl	8008464 <__sfp_lock_release>
 8008538:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800853c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8008540:	6025      	str	r5, [r4, #0]
 8008542:	61a5      	str	r5, [r4, #24]
 8008544:	2208      	movs	r2, #8
 8008546:	4629      	mov	r1, r5
 8008548:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800854c:	f7ff fe54 	bl	80081f8 <memset>
 8008550:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8008554:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8008558:	4620      	mov	r0, r4
 800855a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800855c:	3468      	adds	r4, #104	; 0x68
 800855e:	e7d9      	b.n	8008514 <__sfp+0x1c>
 8008560:	2104      	movs	r1, #4
 8008562:	4638      	mov	r0, r7
 8008564:	f7ff ff62 	bl	800842c <__sfmoreglue>
 8008568:	4604      	mov	r4, r0
 800856a:	6030      	str	r0, [r6, #0]
 800856c:	2800      	cmp	r0, #0
 800856e:	d1d5      	bne.n	800851c <__sfp+0x24>
 8008570:	f7ff ff78 	bl	8008464 <__sfp_lock_release>
 8008574:	230c      	movs	r3, #12
 8008576:	603b      	str	r3, [r7, #0]
 8008578:	e7ee      	b.n	8008558 <__sfp+0x60>
 800857a:	bf00      	nop
 800857c:	080092a0 	.word	0x080092a0
 8008580:	ffff0001 	.word	0xffff0001

08008584 <_fwalk_reent>:
 8008584:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008588:	4606      	mov	r6, r0
 800858a:	4688      	mov	r8, r1
 800858c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8008590:	2700      	movs	r7, #0
 8008592:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8008596:	f1b9 0901 	subs.w	r9, r9, #1
 800859a:	d505      	bpl.n	80085a8 <_fwalk_reent+0x24>
 800859c:	6824      	ldr	r4, [r4, #0]
 800859e:	2c00      	cmp	r4, #0
 80085a0:	d1f7      	bne.n	8008592 <_fwalk_reent+0xe>
 80085a2:	4638      	mov	r0, r7
 80085a4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80085a8:	89ab      	ldrh	r3, [r5, #12]
 80085aa:	2b01      	cmp	r3, #1
 80085ac:	d907      	bls.n	80085be <_fwalk_reent+0x3a>
 80085ae:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80085b2:	3301      	adds	r3, #1
 80085b4:	d003      	beq.n	80085be <_fwalk_reent+0x3a>
 80085b6:	4629      	mov	r1, r5
 80085b8:	4630      	mov	r0, r6
 80085ba:	47c0      	blx	r8
 80085bc:	4307      	orrs	r7, r0
 80085be:	3568      	adds	r5, #104	; 0x68
 80085c0:	e7e9      	b.n	8008596 <_fwalk_reent+0x12>

080085c2 <__retarget_lock_init_recursive>:
 80085c2:	4770      	bx	lr

080085c4 <__retarget_lock_acquire_recursive>:
 80085c4:	4770      	bx	lr

080085c6 <__retarget_lock_release_recursive>:
 80085c6:	4770      	bx	lr

080085c8 <__malloc_lock>:
 80085c8:	4801      	ldr	r0, [pc, #4]	; (80085d0 <__malloc_lock+0x8>)
 80085ca:	f7ff bffb 	b.w	80085c4 <__retarget_lock_acquire_recursive>
 80085ce:	bf00      	nop
 80085d0:	20001f38 	.word	0x20001f38

080085d4 <__malloc_unlock>:
 80085d4:	4801      	ldr	r0, [pc, #4]	; (80085dc <__malloc_unlock+0x8>)
 80085d6:	f7ff bff6 	b.w	80085c6 <__retarget_lock_release_recursive>
 80085da:	bf00      	nop
 80085dc:	20001f38 	.word	0x20001f38

080085e0 <__sfputc_r>:
 80085e0:	6893      	ldr	r3, [r2, #8]
 80085e2:	3b01      	subs	r3, #1
 80085e4:	2b00      	cmp	r3, #0
 80085e6:	b410      	push	{r4}
 80085e8:	6093      	str	r3, [r2, #8]
 80085ea:	da08      	bge.n	80085fe <__sfputc_r+0x1e>
 80085ec:	6994      	ldr	r4, [r2, #24]
 80085ee:	42a3      	cmp	r3, r4
 80085f0:	db01      	blt.n	80085f6 <__sfputc_r+0x16>
 80085f2:	290a      	cmp	r1, #10
 80085f4:	d103      	bne.n	80085fe <__sfputc_r+0x1e>
 80085f6:	f85d 4b04 	ldr.w	r4, [sp], #4
 80085fa:	f000 bb6b 	b.w	8008cd4 <__swbuf_r>
 80085fe:	6813      	ldr	r3, [r2, #0]
 8008600:	1c58      	adds	r0, r3, #1
 8008602:	6010      	str	r0, [r2, #0]
 8008604:	7019      	strb	r1, [r3, #0]
 8008606:	4608      	mov	r0, r1
 8008608:	f85d 4b04 	ldr.w	r4, [sp], #4
 800860c:	4770      	bx	lr

0800860e <__sfputs_r>:
 800860e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008610:	4606      	mov	r6, r0
 8008612:	460f      	mov	r7, r1
 8008614:	4614      	mov	r4, r2
 8008616:	18d5      	adds	r5, r2, r3
 8008618:	42ac      	cmp	r4, r5
 800861a:	d101      	bne.n	8008620 <__sfputs_r+0x12>
 800861c:	2000      	movs	r0, #0
 800861e:	e007      	b.n	8008630 <__sfputs_r+0x22>
 8008620:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008624:	463a      	mov	r2, r7
 8008626:	4630      	mov	r0, r6
 8008628:	f7ff ffda 	bl	80085e0 <__sfputc_r>
 800862c:	1c43      	adds	r3, r0, #1
 800862e:	d1f3      	bne.n	8008618 <__sfputs_r+0xa>
 8008630:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08008634 <_vfiprintf_r>:
 8008634:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008638:	460d      	mov	r5, r1
 800863a:	b09d      	sub	sp, #116	; 0x74
 800863c:	4614      	mov	r4, r2
 800863e:	4698      	mov	r8, r3
 8008640:	4606      	mov	r6, r0
 8008642:	b118      	cbz	r0, 800864c <_vfiprintf_r+0x18>
 8008644:	6983      	ldr	r3, [r0, #24]
 8008646:	b90b      	cbnz	r3, 800864c <_vfiprintf_r+0x18>
 8008648:	f7ff ff1e 	bl	8008488 <__sinit>
 800864c:	4b89      	ldr	r3, [pc, #548]	; (8008874 <_vfiprintf_r+0x240>)
 800864e:	429d      	cmp	r5, r3
 8008650:	d11b      	bne.n	800868a <_vfiprintf_r+0x56>
 8008652:	6875      	ldr	r5, [r6, #4]
 8008654:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008656:	07d9      	lsls	r1, r3, #31
 8008658:	d405      	bmi.n	8008666 <_vfiprintf_r+0x32>
 800865a:	89ab      	ldrh	r3, [r5, #12]
 800865c:	059a      	lsls	r2, r3, #22
 800865e:	d402      	bmi.n	8008666 <_vfiprintf_r+0x32>
 8008660:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008662:	f7ff ffaf 	bl	80085c4 <__retarget_lock_acquire_recursive>
 8008666:	89ab      	ldrh	r3, [r5, #12]
 8008668:	071b      	lsls	r3, r3, #28
 800866a:	d501      	bpl.n	8008670 <_vfiprintf_r+0x3c>
 800866c:	692b      	ldr	r3, [r5, #16]
 800866e:	b9eb      	cbnz	r3, 80086ac <_vfiprintf_r+0x78>
 8008670:	4629      	mov	r1, r5
 8008672:	4630      	mov	r0, r6
 8008674:	f000 fb92 	bl	8008d9c <__swsetup_r>
 8008678:	b1c0      	cbz	r0, 80086ac <_vfiprintf_r+0x78>
 800867a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800867c:	07dc      	lsls	r4, r3, #31
 800867e:	d50e      	bpl.n	800869e <_vfiprintf_r+0x6a>
 8008680:	f04f 30ff 	mov.w	r0, #4294967295
 8008684:	b01d      	add	sp, #116	; 0x74
 8008686:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800868a:	4b7b      	ldr	r3, [pc, #492]	; (8008878 <_vfiprintf_r+0x244>)
 800868c:	429d      	cmp	r5, r3
 800868e:	d101      	bne.n	8008694 <_vfiprintf_r+0x60>
 8008690:	68b5      	ldr	r5, [r6, #8]
 8008692:	e7df      	b.n	8008654 <_vfiprintf_r+0x20>
 8008694:	4b79      	ldr	r3, [pc, #484]	; (800887c <_vfiprintf_r+0x248>)
 8008696:	429d      	cmp	r5, r3
 8008698:	bf08      	it	eq
 800869a:	68f5      	ldreq	r5, [r6, #12]
 800869c:	e7da      	b.n	8008654 <_vfiprintf_r+0x20>
 800869e:	89ab      	ldrh	r3, [r5, #12]
 80086a0:	0598      	lsls	r0, r3, #22
 80086a2:	d4ed      	bmi.n	8008680 <_vfiprintf_r+0x4c>
 80086a4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80086a6:	f7ff ff8e 	bl	80085c6 <__retarget_lock_release_recursive>
 80086aa:	e7e9      	b.n	8008680 <_vfiprintf_r+0x4c>
 80086ac:	2300      	movs	r3, #0
 80086ae:	9309      	str	r3, [sp, #36]	; 0x24
 80086b0:	2320      	movs	r3, #32
 80086b2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80086b6:	f8cd 800c 	str.w	r8, [sp, #12]
 80086ba:	2330      	movs	r3, #48	; 0x30
 80086bc:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8008880 <_vfiprintf_r+0x24c>
 80086c0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80086c4:	f04f 0901 	mov.w	r9, #1
 80086c8:	4623      	mov	r3, r4
 80086ca:	469a      	mov	sl, r3
 80086cc:	f813 2b01 	ldrb.w	r2, [r3], #1
 80086d0:	b10a      	cbz	r2, 80086d6 <_vfiprintf_r+0xa2>
 80086d2:	2a25      	cmp	r2, #37	; 0x25
 80086d4:	d1f9      	bne.n	80086ca <_vfiprintf_r+0x96>
 80086d6:	ebba 0b04 	subs.w	fp, sl, r4
 80086da:	d00b      	beq.n	80086f4 <_vfiprintf_r+0xc0>
 80086dc:	465b      	mov	r3, fp
 80086de:	4622      	mov	r2, r4
 80086e0:	4629      	mov	r1, r5
 80086e2:	4630      	mov	r0, r6
 80086e4:	f7ff ff93 	bl	800860e <__sfputs_r>
 80086e8:	3001      	adds	r0, #1
 80086ea:	f000 80aa 	beq.w	8008842 <_vfiprintf_r+0x20e>
 80086ee:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80086f0:	445a      	add	r2, fp
 80086f2:	9209      	str	r2, [sp, #36]	; 0x24
 80086f4:	f89a 3000 	ldrb.w	r3, [sl]
 80086f8:	2b00      	cmp	r3, #0
 80086fa:	f000 80a2 	beq.w	8008842 <_vfiprintf_r+0x20e>
 80086fe:	2300      	movs	r3, #0
 8008700:	f04f 32ff 	mov.w	r2, #4294967295
 8008704:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008708:	f10a 0a01 	add.w	sl, sl, #1
 800870c:	9304      	str	r3, [sp, #16]
 800870e:	9307      	str	r3, [sp, #28]
 8008710:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008714:	931a      	str	r3, [sp, #104]	; 0x68
 8008716:	4654      	mov	r4, sl
 8008718:	2205      	movs	r2, #5
 800871a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800871e:	4858      	ldr	r0, [pc, #352]	; (8008880 <_vfiprintf_r+0x24c>)
 8008720:	f7f7 fdde 	bl	80002e0 <memchr>
 8008724:	9a04      	ldr	r2, [sp, #16]
 8008726:	b9d8      	cbnz	r0, 8008760 <_vfiprintf_r+0x12c>
 8008728:	06d1      	lsls	r1, r2, #27
 800872a:	bf44      	itt	mi
 800872c:	2320      	movmi	r3, #32
 800872e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008732:	0713      	lsls	r3, r2, #28
 8008734:	bf44      	itt	mi
 8008736:	232b      	movmi	r3, #43	; 0x2b
 8008738:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800873c:	f89a 3000 	ldrb.w	r3, [sl]
 8008740:	2b2a      	cmp	r3, #42	; 0x2a
 8008742:	d015      	beq.n	8008770 <_vfiprintf_r+0x13c>
 8008744:	9a07      	ldr	r2, [sp, #28]
 8008746:	4654      	mov	r4, sl
 8008748:	2000      	movs	r0, #0
 800874a:	f04f 0c0a 	mov.w	ip, #10
 800874e:	4621      	mov	r1, r4
 8008750:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008754:	3b30      	subs	r3, #48	; 0x30
 8008756:	2b09      	cmp	r3, #9
 8008758:	d94e      	bls.n	80087f8 <_vfiprintf_r+0x1c4>
 800875a:	b1b0      	cbz	r0, 800878a <_vfiprintf_r+0x156>
 800875c:	9207      	str	r2, [sp, #28]
 800875e:	e014      	b.n	800878a <_vfiprintf_r+0x156>
 8008760:	eba0 0308 	sub.w	r3, r0, r8
 8008764:	fa09 f303 	lsl.w	r3, r9, r3
 8008768:	4313      	orrs	r3, r2
 800876a:	9304      	str	r3, [sp, #16]
 800876c:	46a2      	mov	sl, r4
 800876e:	e7d2      	b.n	8008716 <_vfiprintf_r+0xe2>
 8008770:	9b03      	ldr	r3, [sp, #12]
 8008772:	1d19      	adds	r1, r3, #4
 8008774:	681b      	ldr	r3, [r3, #0]
 8008776:	9103      	str	r1, [sp, #12]
 8008778:	2b00      	cmp	r3, #0
 800877a:	bfbb      	ittet	lt
 800877c:	425b      	neglt	r3, r3
 800877e:	f042 0202 	orrlt.w	r2, r2, #2
 8008782:	9307      	strge	r3, [sp, #28]
 8008784:	9307      	strlt	r3, [sp, #28]
 8008786:	bfb8      	it	lt
 8008788:	9204      	strlt	r2, [sp, #16]
 800878a:	7823      	ldrb	r3, [r4, #0]
 800878c:	2b2e      	cmp	r3, #46	; 0x2e
 800878e:	d10c      	bne.n	80087aa <_vfiprintf_r+0x176>
 8008790:	7863      	ldrb	r3, [r4, #1]
 8008792:	2b2a      	cmp	r3, #42	; 0x2a
 8008794:	d135      	bne.n	8008802 <_vfiprintf_r+0x1ce>
 8008796:	9b03      	ldr	r3, [sp, #12]
 8008798:	1d1a      	adds	r2, r3, #4
 800879a:	681b      	ldr	r3, [r3, #0]
 800879c:	9203      	str	r2, [sp, #12]
 800879e:	2b00      	cmp	r3, #0
 80087a0:	bfb8      	it	lt
 80087a2:	f04f 33ff 	movlt.w	r3, #4294967295
 80087a6:	3402      	adds	r4, #2
 80087a8:	9305      	str	r3, [sp, #20]
 80087aa:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8008890 <_vfiprintf_r+0x25c>
 80087ae:	7821      	ldrb	r1, [r4, #0]
 80087b0:	2203      	movs	r2, #3
 80087b2:	4650      	mov	r0, sl
 80087b4:	f7f7 fd94 	bl	80002e0 <memchr>
 80087b8:	b140      	cbz	r0, 80087cc <_vfiprintf_r+0x198>
 80087ba:	2340      	movs	r3, #64	; 0x40
 80087bc:	eba0 000a 	sub.w	r0, r0, sl
 80087c0:	fa03 f000 	lsl.w	r0, r3, r0
 80087c4:	9b04      	ldr	r3, [sp, #16]
 80087c6:	4303      	orrs	r3, r0
 80087c8:	3401      	adds	r4, #1
 80087ca:	9304      	str	r3, [sp, #16]
 80087cc:	f814 1b01 	ldrb.w	r1, [r4], #1
 80087d0:	482c      	ldr	r0, [pc, #176]	; (8008884 <_vfiprintf_r+0x250>)
 80087d2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80087d6:	2206      	movs	r2, #6
 80087d8:	f7f7 fd82 	bl	80002e0 <memchr>
 80087dc:	2800      	cmp	r0, #0
 80087de:	d03f      	beq.n	8008860 <_vfiprintf_r+0x22c>
 80087e0:	4b29      	ldr	r3, [pc, #164]	; (8008888 <_vfiprintf_r+0x254>)
 80087e2:	bb1b      	cbnz	r3, 800882c <_vfiprintf_r+0x1f8>
 80087e4:	9b03      	ldr	r3, [sp, #12]
 80087e6:	3307      	adds	r3, #7
 80087e8:	f023 0307 	bic.w	r3, r3, #7
 80087ec:	3308      	adds	r3, #8
 80087ee:	9303      	str	r3, [sp, #12]
 80087f0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80087f2:	443b      	add	r3, r7
 80087f4:	9309      	str	r3, [sp, #36]	; 0x24
 80087f6:	e767      	b.n	80086c8 <_vfiprintf_r+0x94>
 80087f8:	fb0c 3202 	mla	r2, ip, r2, r3
 80087fc:	460c      	mov	r4, r1
 80087fe:	2001      	movs	r0, #1
 8008800:	e7a5      	b.n	800874e <_vfiprintf_r+0x11a>
 8008802:	2300      	movs	r3, #0
 8008804:	3401      	adds	r4, #1
 8008806:	9305      	str	r3, [sp, #20]
 8008808:	4619      	mov	r1, r3
 800880a:	f04f 0c0a 	mov.w	ip, #10
 800880e:	4620      	mov	r0, r4
 8008810:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008814:	3a30      	subs	r2, #48	; 0x30
 8008816:	2a09      	cmp	r2, #9
 8008818:	d903      	bls.n	8008822 <_vfiprintf_r+0x1ee>
 800881a:	2b00      	cmp	r3, #0
 800881c:	d0c5      	beq.n	80087aa <_vfiprintf_r+0x176>
 800881e:	9105      	str	r1, [sp, #20]
 8008820:	e7c3      	b.n	80087aa <_vfiprintf_r+0x176>
 8008822:	fb0c 2101 	mla	r1, ip, r1, r2
 8008826:	4604      	mov	r4, r0
 8008828:	2301      	movs	r3, #1
 800882a:	e7f0      	b.n	800880e <_vfiprintf_r+0x1da>
 800882c:	ab03      	add	r3, sp, #12
 800882e:	9300      	str	r3, [sp, #0]
 8008830:	462a      	mov	r2, r5
 8008832:	4b16      	ldr	r3, [pc, #88]	; (800888c <_vfiprintf_r+0x258>)
 8008834:	a904      	add	r1, sp, #16
 8008836:	4630      	mov	r0, r6
 8008838:	f3af 8000 	nop.w
 800883c:	4607      	mov	r7, r0
 800883e:	1c78      	adds	r0, r7, #1
 8008840:	d1d6      	bne.n	80087f0 <_vfiprintf_r+0x1bc>
 8008842:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008844:	07d9      	lsls	r1, r3, #31
 8008846:	d405      	bmi.n	8008854 <_vfiprintf_r+0x220>
 8008848:	89ab      	ldrh	r3, [r5, #12]
 800884a:	059a      	lsls	r2, r3, #22
 800884c:	d402      	bmi.n	8008854 <_vfiprintf_r+0x220>
 800884e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008850:	f7ff feb9 	bl	80085c6 <__retarget_lock_release_recursive>
 8008854:	89ab      	ldrh	r3, [r5, #12]
 8008856:	065b      	lsls	r3, r3, #25
 8008858:	f53f af12 	bmi.w	8008680 <_vfiprintf_r+0x4c>
 800885c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800885e:	e711      	b.n	8008684 <_vfiprintf_r+0x50>
 8008860:	ab03      	add	r3, sp, #12
 8008862:	9300      	str	r3, [sp, #0]
 8008864:	462a      	mov	r2, r5
 8008866:	4b09      	ldr	r3, [pc, #36]	; (800888c <_vfiprintf_r+0x258>)
 8008868:	a904      	add	r1, sp, #16
 800886a:	4630      	mov	r0, r6
 800886c:	f000 f880 	bl	8008970 <_printf_i>
 8008870:	e7e4      	b.n	800883c <_vfiprintf_r+0x208>
 8008872:	bf00      	nop
 8008874:	080092c4 	.word	0x080092c4
 8008878:	080092e4 	.word	0x080092e4
 800887c:	080092a4 	.word	0x080092a4
 8008880:	08009304 	.word	0x08009304
 8008884:	0800930e 	.word	0x0800930e
 8008888:	00000000 	.word	0x00000000
 800888c:	0800860f 	.word	0x0800860f
 8008890:	0800930a 	.word	0x0800930a

08008894 <_printf_common>:
 8008894:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008898:	4616      	mov	r6, r2
 800889a:	4699      	mov	r9, r3
 800889c:	688a      	ldr	r2, [r1, #8]
 800889e:	690b      	ldr	r3, [r1, #16]
 80088a0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80088a4:	4293      	cmp	r3, r2
 80088a6:	bfb8      	it	lt
 80088a8:	4613      	movlt	r3, r2
 80088aa:	6033      	str	r3, [r6, #0]
 80088ac:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80088b0:	4607      	mov	r7, r0
 80088b2:	460c      	mov	r4, r1
 80088b4:	b10a      	cbz	r2, 80088ba <_printf_common+0x26>
 80088b6:	3301      	adds	r3, #1
 80088b8:	6033      	str	r3, [r6, #0]
 80088ba:	6823      	ldr	r3, [r4, #0]
 80088bc:	0699      	lsls	r1, r3, #26
 80088be:	bf42      	ittt	mi
 80088c0:	6833      	ldrmi	r3, [r6, #0]
 80088c2:	3302      	addmi	r3, #2
 80088c4:	6033      	strmi	r3, [r6, #0]
 80088c6:	6825      	ldr	r5, [r4, #0]
 80088c8:	f015 0506 	ands.w	r5, r5, #6
 80088cc:	d106      	bne.n	80088dc <_printf_common+0x48>
 80088ce:	f104 0a19 	add.w	sl, r4, #25
 80088d2:	68e3      	ldr	r3, [r4, #12]
 80088d4:	6832      	ldr	r2, [r6, #0]
 80088d6:	1a9b      	subs	r3, r3, r2
 80088d8:	42ab      	cmp	r3, r5
 80088da:	dc26      	bgt.n	800892a <_printf_common+0x96>
 80088dc:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80088e0:	1e13      	subs	r3, r2, #0
 80088e2:	6822      	ldr	r2, [r4, #0]
 80088e4:	bf18      	it	ne
 80088e6:	2301      	movne	r3, #1
 80088e8:	0692      	lsls	r2, r2, #26
 80088ea:	d42b      	bmi.n	8008944 <_printf_common+0xb0>
 80088ec:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80088f0:	4649      	mov	r1, r9
 80088f2:	4638      	mov	r0, r7
 80088f4:	47c0      	blx	r8
 80088f6:	3001      	adds	r0, #1
 80088f8:	d01e      	beq.n	8008938 <_printf_common+0xa4>
 80088fa:	6823      	ldr	r3, [r4, #0]
 80088fc:	68e5      	ldr	r5, [r4, #12]
 80088fe:	6832      	ldr	r2, [r6, #0]
 8008900:	f003 0306 	and.w	r3, r3, #6
 8008904:	2b04      	cmp	r3, #4
 8008906:	bf08      	it	eq
 8008908:	1aad      	subeq	r5, r5, r2
 800890a:	68a3      	ldr	r3, [r4, #8]
 800890c:	6922      	ldr	r2, [r4, #16]
 800890e:	bf0c      	ite	eq
 8008910:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008914:	2500      	movne	r5, #0
 8008916:	4293      	cmp	r3, r2
 8008918:	bfc4      	itt	gt
 800891a:	1a9b      	subgt	r3, r3, r2
 800891c:	18ed      	addgt	r5, r5, r3
 800891e:	2600      	movs	r6, #0
 8008920:	341a      	adds	r4, #26
 8008922:	42b5      	cmp	r5, r6
 8008924:	d11a      	bne.n	800895c <_printf_common+0xc8>
 8008926:	2000      	movs	r0, #0
 8008928:	e008      	b.n	800893c <_printf_common+0xa8>
 800892a:	2301      	movs	r3, #1
 800892c:	4652      	mov	r2, sl
 800892e:	4649      	mov	r1, r9
 8008930:	4638      	mov	r0, r7
 8008932:	47c0      	blx	r8
 8008934:	3001      	adds	r0, #1
 8008936:	d103      	bne.n	8008940 <_printf_common+0xac>
 8008938:	f04f 30ff 	mov.w	r0, #4294967295
 800893c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008940:	3501      	adds	r5, #1
 8008942:	e7c6      	b.n	80088d2 <_printf_common+0x3e>
 8008944:	18e1      	adds	r1, r4, r3
 8008946:	1c5a      	adds	r2, r3, #1
 8008948:	2030      	movs	r0, #48	; 0x30
 800894a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800894e:	4422      	add	r2, r4
 8008950:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8008954:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8008958:	3302      	adds	r3, #2
 800895a:	e7c7      	b.n	80088ec <_printf_common+0x58>
 800895c:	2301      	movs	r3, #1
 800895e:	4622      	mov	r2, r4
 8008960:	4649      	mov	r1, r9
 8008962:	4638      	mov	r0, r7
 8008964:	47c0      	blx	r8
 8008966:	3001      	adds	r0, #1
 8008968:	d0e6      	beq.n	8008938 <_printf_common+0xa4>
 800896a:	3601      	adds	r6, #1
 800896c:	e7d9      	b.n	8008922 <_printf_common+0x8e>
	...

08008970 <_printf_i>:
 8008970:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008974:	460c      	mov	r4, r1
 8008976:	4691      	mov	r9, r2
 8008978:	7e27      	ldrb	r7, [r4, #24]
 800897a:	990c      	ldr	r1, [sp, #48]	; 0x30
 800897c:	2f78      	cmp	r7, #120	; 0x78
 800897e:	4680      	mov	r8, r0
 8008980:	469a      	mov	sl, r3
 8008982:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008986:	d807      	bhi.n	8008998 <_printf_i+0x28>
 8008988:	2f62      	cmp	r7, #98	; 0x62
 800898a:	d80a      	bhi.n	80089a2 <_printf_i+0x32>
 800898c:	2f00      	cmp	r7, #0
 800898e:	f000 80d8 	beq.w	8008b42 <_printf_i+0x1d2>
 8008992:	2f58      	cmp	r7, #88	; 0x58
 8008994:	f000 80a3 	beq.w	8008ade <_printf_i+0x16e>
 8008998:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800899c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80089a0:	e03a      	b.n	8008a18 <_printf_i+0xa8>
 80089a2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80089a6:	2b15      	cmp	r3, #21
 80089a8:	d8f6      	bhi.n	8008998 <_printf_i+0x28>
 80089aa:	a001      	add	r0, pc, #4	; (adr r0, 80089b0 <_printf_i+0x40>)
 80089ac:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 80089b0:	08008a09 	.word	0x08008a09
 80089b4:	08008a1d 	.word	0x08008a1d
 80089b8:	08008999 	.word	0x08008999
 80089bc:	08008999 	.word	0x08008999
 80089c0:	08008999 	.word	0x08008999
 80089c4:	08008999 	.word	0x08008999
 80089c8:	08008a1d 	.word	0x08008a1d
 80089cc:	08008999 	.word	0x08008999
 80089d0:	08008999 	.word	0x08008999
 80089d4:	08008999 	.word	0x08008999
 80089d8:	08008999 	.word	0x08008999
 80089dc:	08008b29 	.word	0x08008b29
 80089e0:	08008a4d 	.word	0x08008a4d
 80089e4:	08008b0b 	.word	0x08008b0b
 80089e8:	08008999 	.word	0x08008999
 80089ec:	08008999 	.word	0x08008999
 80089f0:	08008b4b 	.word	0x08008b4b
 80089f4:	08008999 	.word	0x08008999
 80089f8:	08008a4d 	.word	0x08008a4d
 80089fc:	08008999 	.word	0x08008999
 8008a00:	08008999 	.word	0x08008999
 8008a04:	08008b13 	.word	0x08008b13
 8008a08:	680b      	ldr	r3, [r1, #0]
 8008a0a:	1d1a      	adds	r2, r3, #4
 8008a0c:	681b      	ldr	r3, [r3, #0]
 8008a0e:	600a      	str	r2, [r1, #0]
 8008a10:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8008a14:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008a18:	2301      	movs	r3, #1
 8008a1a:	e0a3      	b.n	8008b64 <_printf_i+0x1f4>
 8008a1c:	6825      	ldr	r5, [r4, #0]
 8008a1e:	6808      	ldr	r0, [r1, #0]
 8008a20:	062e      	lsls	r6, r5, #24
 8008a22:	f100 0304 	add.w	r3, r0, #4
 8008a26:	d50a      	bpl.n	8008a3e <_printf_i+0xce>
 8008a28:	6805      	ldr	r5, [r0, #0]
 8008a2a:	600b      	str	r3, [r1, #0]
 8008a2c:	2d00      	cmp	r5, #0
 8008a2e:	da03      	bge.n	8008a38 <_printf_i+0xc8>
 8008a30:	232d      	movs	r3, #45	; 0x2d
 8008a32:	426d      	negs	r5, r5
 8008a34:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008a38:	485e      	ldr	r0, [pc, #376]	; (8008bb4 <_printf_i+0x244>)
 8008a3a:	230a      	movs	r3, #10
 8008a3c:	e019      	b.n	8008a72 <_printf_i+0x102>
 8008a3e:	f015 0f40 	tst.w	r5, #64	; 0x40
 8008a42:	6805      	ldr	r5, [r0, #0]
 8008a44:	600b      	str	r3, [r1, #0]
 8008a46:	bf18      	it	ne
 8008a48:	b22d      	sxthne	r5, r5
 8008a4a:	e7ef      	b.n	8008a2c <_printf_i+0xbc>
 8008a4c:	680b      	ldr	r3, [r1, #0]
 8008a4e:	6825      	ldr	r5, [r4, #0]
 8008a50:	1d18      	adds	r0, r3, #4
 8008a52:	6008      	str	r0, [r1, #0]
 8008a54:	0628      	lsls	r0, r5, #24
 8008a56:	d501      	bpl.n	8008a5c <_printf_i+0xec>
 8008a58:	681d      	ldr	r5, [r3, #0]
 8008a5a:	e002      	b.n	8008a62 <_printf_i+0xf2>
 8008a5c:	0669      	lsls	r1, r5, #25
 8008a5e:	d5fb      	bpl.n	8008a58 <_printf_i+0xe8>
 8008a60:	881d      	ldrh	r5, [r3, #0]
 8008a62:	4854      	ldr	r0, [pc, #336]	; (8008bb4 <_printf_i+0x244>)
 8008a64:	2f6f      	cmp	r7, #111	; 0x6f
 8008a66:	bf0c      	ite	eq
 8008a68:	2308      	moveq	r3, #8
 8008a6a:	230a      	movne	r3, #10
 8008a6c:	2100      	movs	r1, #0
 8008a6e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8008a72:	6866      	ldr	r6, [r4, #4]
 8008a74:	60a6      	str	r6, [r4, #8]
 8008a76:	2e00      	cmp	r6, #0
 8008a78:	bfa2      	ittt	ge
 8008a7a:	6821      	ldrge	r1, [r4, #0]
 8008a7c:	f021 0104 	bicge.w	r1, r1, #4
 8008a80:	6021      	strge	r1, [r4, #0]
 8008a82:	b90d      	cbnz	r5, 8008a88 <_printf_i+0x118>
 8008a84:	2e00      	cmp	r6, #0
 8008a86:	d04d      	beq.n	8008b24 <_printf_i+0x1b4>
 8008a88:	4616      	mov	r6, r2
 8008a8a:	fbb5 f1f3 	udiv	r1, r5, r3
 8008a8e:	fb03 5711 	mls	r7, r3, r1, r5
 8008a92:	5dc7      	ldrb	r7, [r0, r7]
 8008a94:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8008a98:	462f      	mov	r7, r5
 8008a9a:	42bb      	cmp	r3, r7
 8008a9c:	460d      	mov	r5, r1
 8008a9e:	d9f4      	bls.n	8008a8a <_printf_i+0x11a>
 8008aa0:	2b08      	cmp	r3, #8
 8008aa2:	d10b      	bne.n	8008abc <_printf_i+0x14c>
 8008aa4:	6823      	ldr	r3, [r4, #0]
 8008aa6:	07df      	lsls	r7, r3, #31
 8008aa8:	d508      	bpl.n	8008abc <_printf_i+0x14c>
 8008aaa:	6923      	ldr	r3, [r4, #16]
 8008aac:	6861      	ldr	r1, [r4, #4]
 8008aae:	4299      	cmp	r1, r3
 8008ab0:	bfde      	ittt	le
 8008ab2:	2330      	movle	r3, #48	; 0x30
 8008ab4:	f806 3c01 	strble.w	r3, [r6, #-1]
 8008ab8:	f106 36ff 	addle.w	r6, r6, #4294967295
 8008abc:	1b92      	subs	r2, r2, r6
 8008abe:	6122      	str	r2, [r4, #16]
 8008ac0:	f8cd a000 	str.w	sl, [sp]
 8008ac4:	464b      	mov	r3, r9
 8008ac6:	aa03      	add	r2, sp, #12
 8008ac8:	4621      	mov	r1, r4
 8008aca:	4640      	mov	r0, r8
 8008acc:	f7ff fee2 	bl	8008894 <_printf_common>
 8008ad0:	3001      	adds	r0, #1
 8008ad2:	d14c      	bne.n	8008b6e <_printf_i+0x1fe>
 8008ad4:	f04f 30ff 	mov.w	r0, #4294967295
 8008ad8:	b004      	add	sp, #16
 8008ada:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008ade:	4835      	ldr	r0, [pc, #212]	; (8008bb4 <_printf_i+0x244>)
 8008ae0:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8008ae4:	6823      	ldr	r3, [r4, #0]
 8008ae6:	680e      	ldr	r6, [r1, #0]
 8008ae8:	061f      	lsls	r7, r3, #24
 8008aea:	f856 5b04 	ldr.w	r5, [r6], #4
 8008aee:	600e      	str	r6, [r1, #0]
 8008af0:	d514      	bpl.n	8008b1c <_printf_i+0x1ac>
 8008af2:	07d9      	lsls	r1, r3, #31
 8008af4:	bf44      	itt	mi
 8008af6:	f043 0320 	orrmi.w	r3, r3, #32
 8008afa:	6023      	strmi	r3, [r4, #0]
 8008afc:	b91d      	cbnz	r5, 8008b06 <_printf_i+0x196>
 8008afe:	6823      	ldr	r3, [r4, #0]
 8008b00:	f023 0320 	bic.w	r3, r3, #32
 8008b04:	6023      	str	r3, [r4, #0]
 8008b06:	2310      	movs	r3, #16
 8008b08:	e7b0      	b.n	8008a6c <_printf_i+0xfc>
 8008b0a:	6823      	ldr	r3, [r4, #0]
 8008b0c:	f043 0320 	orr.w	r3, r3, #32
 8008b10:	6023      	str	r3, [r4, #0]
 8008b12:	2378      	movs	r3, #120	; 0x78
 8008b14:	4828      	ldr	r0, [pc, #160]	; (8008bb8 <_printf_i+0x248>)
 8008b16:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8008b1a:	e7e3      	b.n	8008ae4 <_printf_i+0x174>
 8008b1c:	065e      	lsls	r6, r3, #25
 8008b1e:	bf48      	it	mi
 8008b20:	b2ad      	uxthmi	r5, r5
 8008b22:	e7e6      	b.n	8008af2 <_printf_i+0x182>
 8008b24:	4616      	mov	r6, r2
 8008b26:	e7bb      	b.n	8008aa0 <_printf_i+0x130>
 8008b28:	680b      	ldr	r3, [r1, #0]
 8008b2a:	6826      	ldr	r6, [r4, #0]
 8008b2c:	6960      	ldr	r0, [r4, #20]
 8008b2e:	1d1d      	adds	r5, r3, #4
 8008b30:	600d      	str	r5, [r1, #0]
 8008b32:	0635      	lsls	r5, r6, #24
 8008b34:	681b      	ldr	r3, [r3, #0]
 8008b36:	d501      	bpl.n	8008b3c <_printf_i+0x1cc>
 8008b38:	6018      	str	r0, [r3, #0]
 8008b3a:	e002      	b.n	8008b42 <_printf_i+0x1d2>
 8008b3c:	0671      	lsls	r1, r6, #25
 8008b3e:	d5fb      	bpl.n	8008b38 <_printf_i+0x1c8>
 8008b40:	8018      	strh	r0, [r3, #0]
 8008b42:	2300      	movs	r3, #0
 8008b44:	6123      	str	r3, [r4, #16]
 8008b46:	4616      	mov	r6, r2
 8008b48:	e7ba      	b.n	8008ac0 <_printf_i+0x150>
 8008b4a:	680b      	ldr	r3, [r1, #0]
 8008b4c:	1d1a      	adds	r2, r3, #4
 8008b4e:	600a      	str	r2, [r1, #0]
 8008b50:	681e      	ldr	r6, [r3, #0]
 8008b52:	6862      	ldr	r2, [r4, #4]
 8008b54:	2100      	movs	r1, #0
 8008b56:	4630      	mov	r0, r6
 8008b58:	f7f7 fbc2 	bl	80002e0 <memchr>
 8008b5c:	b108      	cbz	r0, 8008b62 <_printf_i+0x1f2>
 8008b5e:	1b80      	subs	r0, r0, r6
 8008b60:	6060      	str	r0, [r4, #4]
 8008b62:	6863      	ldr	r3, [r4, #4]
 8008b64:	6123      	str	r3, [r4, #16]
 8008b66:	2300      	movs	r3, #0
 8008b68:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008b6c:	e7a8      	b.n	8008ac0 <_printf_i+0x150>
 8008b6e:	6923      	ldr	r3, [r4, #16]
 8008b70:	4632      	mov	r2, r6
 8008b72:	4649      	mov	r1, r9
 8008b74:	4640      	mov	r0, r8
 8008b76:	47d0      	blx	sl
 8008b78:	3001      	adds	r0, #1
 8008b7a:	d0ab      	beq.n	8008ad4 <_printf_i+0x164>
 8008b7c:	6823      	ldr	r3, [r4, #0]
 8008b7e:	079b      	lsls	r3, r3, #30
 8008b80:	d413      	bmi.n	8008baa <_printf_i+0x23a>
 8008b82:	68e0      	ldr	r0, [r4, #12]
 8008b84:	9b03      	ldr	r3, [sp, #12]
 8008b86:	4298      	cmp	r0, r3
 8008b88:	bfb8      	it	lt
 8008b8a:	4618      	movlt	r0, r3
 8008b8c:	e7a4      	b.n	8008ad8 <_printf_i+0x168>
 8008b8e:	2301      	movs	r3, #1
 8008b90:	4632      	mov	r2, r6
 8008b92:	4649      	mov	r1, r9
 8008b94:	4640      	mov	r0, r8
 8008b96:	47d0      	blx	sl
 8008b98:	3001      	adds	r0, #1
 8008b9a:	d09b      	beq.n	8008ad4 <_printf_i+0x164>
 8008b9c:	3501      	adds	r5, #1
 8008b9e:	68e3      	ldr	r3, [r4, #12]
 8008ba0:	9903      	ldr	r1, [sp, #12]
 8008ba2:	1a5b      	subs	r3, r3, r1
 8008ba4:	42ab      	cmp	r3, r5
 8008ba6:	dcf2      	bgt.n	8008b8e <_printf_i+0x21e>
 8008ba8:	e7eb      	b.n	8008b82 <_printf_i+0x212>
 8008baa:	2500      	movs	r5, #0
 8008bac:	f104 0619 	add.w	r6, r4, #25
 8008bb0:	e7f5      	b.n	8008b9e <_printf_i+0x22e>
 8008bb2:	bf00      	nop
 8008bb4:	08009315 	.word	0x08009315
 8008bb8:	08009326 	.word	0x08009326

08008bbc <_putc_r>:
 8008bbc:	b570      	push	{r4, r5, r6, lr}
 8008bbe:	460d      	mov	r5, r1
 8008bc0:	4614      	mov	r4, r2
 8008bc2:	4606      	mov	r6, r0
 8008bc4:	b118      	cbz	r0, 8008bce <_putc_r+0x12>
 8008bc6:	6983      	ldr	r3, [r0, #24]
 8008bc8:	b90b      	cbnz	r3, 8008bce <_putc_r+0x12>
 8008bca:	f7ff fc5d 	bl	8008488 <__sinit>
 8008bce:	4b1c      	ldr	r3, [pc, #112]	; (8008c40 <_putc_r+0x84>)
 8008bd0:	429c      	cmp	r4, r3
 8008bd2:	d124      	bne.n	8008c1e <_putc_r+0x62>
 8008bd4:	6874      	ldr	r4, [r6, #4]
 8008bd6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008bd8:	07d8      	lsls	r0, r3, #31
 8008bda:	d405      	bmi.n	8008be8 <_putc_r+0x2c>
 8008bdc:	89a3      	ldrh	r3, [r4, #12]
 8008bde:	0599      	lsls	r1, r3, #22
 8008be0:	d402      	bmi.n	8008be8 <_putc_r+0x2c>
 8008be2:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008be4:	f7ff fcee 	bl	80085c4 <__retarget_lock_acquire_recursive>
 8008be8:	68a3      	ldr	r3, [r4, #8]
 8008bea:	3b01      	subs	r3, #1
 8008bec:	2b00      	cmp	r3, #0
 8008bee:	60a3      	str	r3, [r4, #8]
 8008bf0:	da05      	bge.n	8008bfe <_putc_r+0x42>
 8008bf2:	69a2      	ldr	r2, [r4, #24]
 8008bf4:	4293      	cmp	r3, r2
 8008bf6:	db1c      	blt.n	8008c32 <_putc_r+0x76>
 8008bf8:	b2eb      	uxtb	r3, r5
 8008bfa:	2b0a      	cmp	r3, #10
 8008bfc:	d019      	beq.n	8008c32 <_putc_r+0x76>
 8008bfe:	6823      	ldr	r3, [r4, #0]
 8008c00:	1c5a      	adds	r2, r3, #1
 8008c02:	6022      	str	r2, [r4, #0]
 8008c04:	701d      	strb	r5, [r3, #0]
 8008c06:	b2ed      	uxtb	r5, r5
 8008c08:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008c0a:	07da      	lsls	r2, r3, #31
 8008c0c:	d405      	bmi.n	8008c1a <_putc_r+0x5e>
 8008c0e:	89a3      	ldrh	r3, [r4, #12]
 8008c10:	059b      	lsls	r3, r3, #22
 8008c12:	d402      	bmi.n	8008c1a <_putc_r+0x5e>
 8008c14:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008c16:	f7ff fcd6 	bl	80085c6 <__retarget_lock_release_recursive>
 8008c1a:	4628      	mov	r0, r5
 8008c1c:	bd70      	pop	{r4, r5, r6, pc}
 8008c1e:	4b09      	ldr	r3, [pc, #36]	; (8008c44 <_putc_r+0x88>)
 8008c20:	429c      	cmp	r4, r3
 8008c22:	d101      	bne.n	8008c28 <_putc_r+0x6c>
 8008c24:	68b4      	ldr	r4, [r6, #8]
 8008c26:	e7d6      	b.n	8008bd6 <_putc_r+0x1a>
 8008c28:	4b07      	ldr	r3, [pc, #28]	; (8008c48 <_putc_r+0x8c>)
 8008c2a:	429c      	cmp	r4, r3
 8008c2c:	bf08      	it	eq
 8008c2e:	68f4      	ldreq	r4, [r6, #12]
 8008c30:	e7d1      	b.n	8008bd6 <_putc_r+0x1a>
 8008c32:	4629      	mov	r1, r5
 8008c34:	4622      	mov	r2, r4
 8008c36:	4630      	mov	r0, r6
 8008c38:	f000 f84c 	bl	8008cd4 <__swbuf_r>
 8008c3c:	4605      	mov	r5, r0
 8008c3e:	e7e3      	b.n	8008c08 <_putc_r+0x4c>
 8008c40:	080092c4 	.word	0x080092c4
 8008c44:	080092e4 	.word	0x080092e4
 8008c48:	080092a4 	.word	0x080092a4

08008c4c <__sread>:
 8008c4c:	b510      	push	{r4, lr}
 8008c4e:	460c      	mov	r4, r1
 8008c50:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008c54:	f000 fa58 	bl	8009108 <_read_r>
 8008c58:	2800      	cmp	r0, #0
 8008c5a:	bfab      	itete	ge
 8008c5c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8008c5e:	89a3      	ldrhlt	r3, [r4, #12]
 8008c60:	181b      	addge	r3, r3, r0
 8008c62:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8008c66:	bfac      	ite	ge
 8008c68:	6563      	strge	r3, [r4, #84]	; 0x54
 8008c6a:	81a3      	strhlt	r3, [r4, #12]
 8008c6c:	bd10      	pop	{r4, pc}

08008c6e <__swrite>:
 8008c6e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008c72:	461f      	mov	r7, r3
 8008c74:	898b      	ldrh	r3, [r1, #12]
 8008c76:	05db      	lsls	r3, r3, #23
 8008c78:	4605      	mov	r5, r0
 8008c7a:	460c      	mov	r4, r1
 8008c7c:	4616      	mov	r6, r2
 8008c7e:	d505      	bpl.n	8008c8c <__swrite+0x1e>
 8008c80:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008c84:	2302      	movs	r3, #2
 8008c86:	2200      	movs	r2, #0
 8008c88:	f000 f9c8 	bl	800901c <_lseek_r>
 8008c8c:	89a3      	ldrh	r3, [r4, #12]
 8008c8e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008c92:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008c96:	81a3      	strh	r3, [r4, #12]
 8008c98:	4632      	mov	r2, r6
 8008c9a:	463b      	mov	r3, r7
 8008c9c:	4628      	mov	r0, r5
 8008c9e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008ca2:	f000 b869 	b.w	8008d78 <_write_r>

08008ca6 <__sseek>:
 8008ca6:	b510      	push	{r4, lr}
 8008ca8:	460c      	mov	r4, r1
 8008caa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008cae:	f000 f9b5 	bl	800901c <_lseek_r>
 8008cb2:	1c43      	adds	r3, r0, #1
 8008cb4:	89a3      	ldrh	r3, [r4, #12]
 8008cb6:	bf15      	itete	ne
 8008cb8:	6560      	strne	r0, [r4, #84]	; 0x54
 8008cba:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8008cbe:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8008cc2:	81a3      	strheq	r3, [r4, #12]
 8008cc4:	bf18      	it	ne
 8008cc6:	81a3      	strhne	r3, [r4, #12]
 8008cc8:	bd10      	pop	{r4, pc}

08008cca <__sclose>:
 8008cca:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008cce:	f000 b8d3 	b.w	8008e78 <_close_r>
	...

08008cd4 <__swbuf_r>:
 8008cd4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008cd6:	460e      	mov	r6, r1
 8008cd8:	4614      	mov	r4, r2
 8008cda:	4605      	mov	r5, r0
 8008cdc:	b118      	cbz	r0, 8008ce6 <__swbuf_r+0x12>
 8008cde:	6983      	ldr	r3, [r0, #24]
 8008ce0:	b90b      	cbnz	r3, 8008ce6 <__swbuf_r+0x12>
 8008ce2:	f7ff fbd1 	bl	8008488 <__sinit>
 8008ce6:	4b21      	ldr	r3, [pc, #132]	; (8008d6c <__swbuf_r+0x98>)
 8008ce8:	429c      	cmp	r4, r3
 8008cea:	d12b      	bne.n	8008d44 <__swbuf_r+0x70>
 8008cec:	686c      	ldr	r4, [r5, #4]
 8008cee:	69a3      	ldr	r3, [r4, #24]
 8008cf0:	60a3      	str	r3, [r4, #8]
 8008cf2:	89a3      	ldrh	r3, [r4, #12]
 8008cf4:	071a      	lsls	r2, r3, #28
 8008cf6:	d52f      	bpl.n	8008d58 <__swbuf_r+0x84>
 8008cf8:	6923      	ldr	r3, [r4, #16]
 8008cfa:	b36b      	cbz	r3, 8008d58 <__swbuf_r+0x84>
 8008cfc:	6923      	ldr	r3, [r4, #16]
 8008cfe:	6820      	ldr	r0, [r4, #0]
 8008d00:	1ac0      	subs	r0, r0, r3
 8008d02:	6963      	ldr	r3, [r4, #20]
 8008d04:	b2f6      	uxtb	r6, r6
 8008d06:	4283      	cmp	r3, r0
 8008d08:	4637      	mov	r7, r6
 8008d0a:	dc04      	bgt.n	8008d16 <__swbuf_r+0x42>
 8008d0c:	4621      	mov	r1, r4
 8008d0e:	4628      	mov	r0, r5
 8008d10:	f000 f948 	bl	8008fa4 <_fflush_r>
 8008d14:	bb30      	cbnz	r0, 8008d64 <__swbuf_r+0x90>
 8008d16:	68a3      	ldr	r3, [r4, #8]
 8008d18:	3b01      	subs	r3, #1
 8008d1a:	60a3      	str	r3, [r4, #8]
 8008d1c:	6823      	ldr	r3, [r4, #0]
 8008d1e:	1c5a      	adds	r2, r3, #1
 8008d20:	6022      	str	r2, [r4, #0]
 8008d22:	701e      	strb	r6, [r3, #0]
 8008d24:	6963      	ldr	r3, [r4, #20]
 8008d26:	3001      	adds	r0, #1
 8008d28:	4283      	cmp	r3, r0
 8008d2a:	d004      	beq.n	8008d36 <__swbuf_r+0x62>
 8008d2c:	89a3      	ldrh	r3, [r4, #12]
 8008d2e:	07db      	lsls	r3, r3, #31
 8008d30:	d506      	bpl.n	8008d40 <__swbuf_r+0x6c>
 8008d32:	2e0a      	cmp	r6, #10
 8008d34:	d104      	bne.n	8008d40 <__swbuf_r+0x6c>
 8008d36:	4621      	mov	r1, r4
 8008d38:	4628      	mov	r0, r5
 8008d3a:	f000 f933 	bl	8008fa4 <_fflush_r>
 8008d3e:	b988      	cbnz	r0, 8008d64 <__swbuf_r+0x90>
 8008d40:	4638      	mov	r0, r7
 8008d42:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008d44:	4b0a      	ldr	r3, [pc, #40]	; (8008d70 <__swbuf_r+0x9c>)
 8008d46:	429c      	cmp	r4, r3
 8008d48:	d101      	bne.n	8008d4e <__swbuf_r+0x7a>
 8008d4a:	68ac      	ldr	r4, [r5, #8]
 8008d4c:	e7cf      	b.n	8008cee <__swbuf_r+0x1a>
 8008d4e:	4b09      	ldr	r3, [pc, #36]	; (8008d74 <__swbuf_r+0xa0>)
 8008d50:	429c      	cmp	r4, r3
 8008d52:	bf08      	it	eq
 8008d54:	68ec      	ldreq	r4, [r5, #12]
 8008d56:	e7ca      	b.n	8008cee <__swbuf_r+0x1a>
 8008d58:	4621      	mov	r1, r4
 8008d5a:	4628      	mov	r0, r5
 8008d5c:	f000 f81e 	bl	8008d9c <__swsetup_r>
 8008d60:	2800      	cmp	r0, #0
 8008d62:	d0cb      	beq.n	8008cfc <__swbuf_r+0x28>
 8008d64:	f04f 37ff 	mov.w	r7, #4294967295
 8008d68:	e7ea      	b.n	8008d40 <__swbuf_r+0x6c>
 8008d6a:	bf00      	nop
 8008d6c:	080092c4 	.word	0x080092c4
 8008d70:	080092e4 	.word	0x080092e4
 8008d74:	080092a4 	.word	0x080092a4

08008d78 <_write_r>:
 8008d78:	b538      	push	{r3, r4, r5, lr}
 8008d7a:	4d07      	ldr	r5, [pc, #28]	; (8008d98 <_write_r+0x20>)
 8008d7c:	4604      	mov	r4, r0
 8008d7e:	4608      	mov	r0, r1
 8008d80:	4611      	mov	r1, r2
 8008d82:	2200      	movs	r2, #0
 8008d84:	602a      	str	r2, [r5, #0]
 8008d86:	461a      	mov	r2, r3
 8008d88:	f7fe fef8 	bl	8007b7c <_write>
 8008d8c:	1c43      	adds	r3, r0, #1
 8008d8e:	d102      	bne.n	8008d96 <_write_r+0x1e>
 8008d90:	682b      	ldr	r3, [r5, #0]
 8008d92:	b103      	cbz	r3, 8008d96 <_write_r+0x1e>
 8008d94:	6023      	str	r3, [r4, #0]
 8008d96:	bd38      	pop	{r3, r4, r5, pc}
 8008d98:	20001f40 	.word	0x20001f40

08008d9c <__swsetup_r>:
 8008d9c:	4b32      	ldr	r3, [pc, #200]	; (8008e68 <__swsetup_r+0xcc>)
 8008d9e:	b570      	push	{r4, r5, r6, lr}
 8008da0:	681d      	ldr	r5, [r3, #0]
 8008da2:	4606      	mov	r6, r0
 8008da4:	460c      	mov	r4, r1
 8008da6:	b125      	cbz	r5, 8008db2 <__swsetup_r+0x16>
 8008da8:	69ab      	ldr	r3, [r5, #24]
 8008daa:	b913      	cbnz	r3, 8008db2 <__swsetup_r+0x16>
 8008dac:	4628      	mov	r0, r5
 8008dae:	f7ff fb6b 	bl	8008488 <__sinit>
 8008db2:	4b2e      	ldr	r3, [pc, #184]	; (8008e6c <__swsetup_r+0xd0>)
 8008db4:	429c      	cmp	r4, r3
 8008db6:	d10f      	bne.n	8008dd8 <__swsetup_r+0x3c>
 8008db8:	686c      	ldr	r4, [r5, #4]
 8008dba:	89a3      	ldrh	r3, [r4, #12]
 8008dbc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008dc0:	0719      	lsls	r1, r3, #28
 8008dc2:	d42c      	bmi.n	8008e1e <__swsetup_r+0x82>
 8008dc4:	06dd      	lsls	r5, r3, #27
 8008dc6:	d411      	bmi.n	8008dec <__swsetup_r+0x50>
 8008dc8:	2309      	movs	r3, #9
 8008dca:	6033      	str	r3, [r6, #0]
 8008dcc:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8008dd0:	81a3      	strh	r3, [r4, #12]
 8008dd2:	f04f 30ff 	mov.w	r0, #4294967295
 8008dd6:	e03e      	b.n	8008e56 <__swsetup_r+0xba>
 8008dd8:	4b25      	ldr	r3, [pc, #148]	; (8008e70 <__swsetup_r+0xd4>)
 8008dda:	429c      	cmp	r4, r3
 8008ddc:	d101      	bne.n	8008de2 <__swsetup_r+0x46>
 8008dde:	68ac      	ldr	r4, [r5, #8]
 8008de0:	e7eb      	b.n	8008dba <__swsetup_r+0x1e>
 8008de2:	4b24      	ldr	r3, [pc, #144]	; (8008e74 <__swsetup_r+0xd8>)
 8008de4:	429c      	cmp	r4, r3
 8008de6:	bf08      	it	eq
 8008de8:	68ec      	ldreq	r4, [r5, #12]
 8008dea:	e7e6      	b.n	8008dba <__swsetup_r+0x1e>
 8008dec:	0758      	lsls	r0, r3, #29
 8008dee:	d512      	bpl.n	8008e16 <__swsetup_r+0x7a>
 8008df0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008df2:	b141      	cbz	r1, 8008e06 <__swsetup_r+0x6a>
 8008df4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008df8:	4299      	cmp	r1, r3
 8008dfa:	d002      	beq.n	8008e02 <__swsetup_r+0x66>
 8008dfc:	4630      	mov	r0, r6
 8008dfe:	f7ff fa03 	bl	8008208 <_free_r>
 8008e02:	2300      	movs	r3, #0
 8008e04:	6363      	str	r3, [r4, #52]	; 0x34
 8008e06:	89a3      	ldrh	r3, [r4, #12]
 8008e08:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8008e0c:	81a3      	strh	r3, [r4, #12]
 8008e0e:	2300      	movs	r3, #0
 8008e10:	6063      	str	r3, [r4, #4]
 8008e12:	6923      	ldr	r3, [r4, #16]
 8008e14:	6023      	str	r3, [r4, #0]
 8008e16:	89a3      	ldrh	r3, [r4, #12]
 8008e18:	f043 0308 	orr.w	r3, r3, #8
 8008e1c:	81a3      	strh	r3, [r4, #12]
 8008e1e:	6923      	ldr	r3, [r4, #16]
 8008e20:	b94b      	cbnz	r3, 8008e36 <__swsetup_r+0x9a>
 8008e22:	89a3      	ldrh	r3, [r4, #12]
 8008e24:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8008e28:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008e2c:	d003      	beq.n	8008e36 <__swsetup_r+0x9a>
 8008e2e:	4621      	mov	r1, r4
 8008e30:	4630      	mov	r0, r6
 8008e32:	f000 f929 	bl	8009088 <__smakebuf_r>
 8008e36:	89a0      	ldrh	r0, [r4, #12]
 8008e38:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008e3c:	f010 0301 	ands.w	r3, r0, #1
 8008e40:	d00a      	beq.n	8008e58 <__swsetup_r+0xbc>
 8008e42:	2300      	movs	r3, #0
 8008e44:	60a3      	str	r3, [r4, #8]
 8008e46:	6963      	ldr	r3, [r4, #20]
 8008e48:	425b      	negs	r3, r3
 8008e4a:	61a3      	str	r3, [r4, #24]
 8008e4c:	6923      	ldr	r3, [r4, #16]
 8008e4e:	b943      	cbnz	r3, 8008e62 <__swsetup_r+0xc6>
 8008e50:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8008e54:	d1ba      	bne.n	8008dcc <__swsetup_r+0x30>
 8008e56:	bd70      	pop	{r4, r5, r6, pc}
 8008e58:	0781      	lsls	r1, r0, #30
 8008e5a:	bf58      	it	pl
 8008e5c:	6963      	ldrpl	r3, [r4, #20]
 8008e5e:	60a3      	str	r3, [r4, #8]
 8008e60:	e7f4      	b.n	8008e4c <__swsetup_r+0xb0>
 8008e62:	2000      	movs	r0, #0
 8008e64:	e7f7      	b.n	8008e56 <__swsetup_r+0xba>
 8008e66:	bf00      	nop
 8008e68:	20000184 	.word	0x20000184
 8008e6c:	080092c4 	.word	0x080092c4
 8008e70:	080092e4 	.word	0x080092e4
 8008e74:	080092a4 	.word	0x080092a4

08008e78 <_close_r>:
 8008e78:	b538      	push	{r3, r4, r5, lr}
 8008e7a:	4d06      	ldr	r5, [pc, #24]	; (8008e94 <_close_r+0x1c>)
 8008e7c:	2300      	movs	r3, #0
 8008e7e:	4604      	mov	r4, r0
 8008e80:	4608      	mov	r0, r1
 8008e82:	602b      	str	r3, [r5, #0]
 8008e84:	f7fe fea6 	bl	8007bd4 <_close>
 8008e88:	1c43      	adds	r3, r0, #1
 8008e8a:	d102      	bne.n	8008e92 <_close_r+0x1a>
 8008e8c:	682b      	ldr	r3, [r5, #0]
 8008e8e:	b103      	cbz	r3, 8008e92 <_close_r+0x1a>
 8008e90:	6023      	str	r3, [r4, #0]
 8008e92:	bd38      	pop	{r3, r4, r5, pc}
 8008e94:	20001f40 	.word	0x20001f40

08008e98 <__sflush_r>:
 8008e98:	898a      	ldrh	r2, [r1, #12]
 8008e9a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008e9e:	4605      	mov	r5, r0
 8008ea0:	0710      	lsls	r0, r2, #28
 8008ea2:	460c      	mov	r4, r1
 8008ea4:	d458      	bmi.n	8008f58 <__sflush_r+0xc0>
 8008ea6:	684b      	ldr	r3, [r1, #4]
 8008ea8:	2b00      	cmp	r3, #0
 8008eaa:	dc05      	bgt.n	8008eb8 <__sflush_r+0x20>
 8008eac:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8008eae:	2b00      	cmp	r3, #0
 8008eb0:	dc02      	bgt.n	8008eb8 <__sflush_r+0x20>
 8008eb2:	2000      	movs	r0, #0
 8008eb4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008eb8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008eba:	2e00      	cmp	r6, #0
 8008ebc:	d0f9      	beq.n	8008eb2 <__sflush_r+0x1a>
 8008ebe:	2300      	movs	r3, #0
 8008ec0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8008ec4:	682f      	ldr	r7, [r5, #0]
 8008ec6:	602b      	str	r3, [r5, #0]
 8008ec8:	d032      	beq.n	8008f30 <__sflush_r+0x98>
 8008eca:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8008ecc:	89a3      	ldrh	r3, [r4, #12]
 8008ece:	075a      	lsls	r2, r3, #29
 8008ed0:	d505      	bpl.n	8008ede <__sflush_r+0x46>
 8008ed2:	6863      	ldr	r3, [r4, #4]
 8008ed4:	1ac0      	subs	r0, r0, r3
 8008ed6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8008ed8:	b10b      	cbz	r3, 8008ede <__sflush_r+0x46>
 8008eda:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8008edc:	1ac0      	subs	r0, r0, r3
 8008ede:	2300      	movs	r3, #0
 8008ee0:	4602      	mov	r2, r0
 8008ee2:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008ee4:	6a21      	ldr	r1, [r4, #32]
 8008ee6:	4628      	mov	r0, r5
 8008ee8:	47b0      	blx	r6
 8008eea:	1c43      	adds	r3, r0, #1
 8008eec:	89a3      	ldrh	r3, [r4, #12]
 8008eee:	d106      	bne.n	8008efe <__sflush_r+0x66>
 8008ef0:	6829      	ldr	r1, [r5, #0]
 8008ef2:	291d      	cmp	r1, #29
 8008ef4:	d82c      	bhi.n	8008f50 <__sflush_r+0xb8>
 8008ef6:	4a2a      	ldr	r2, [pc, #168]	; (8008fa0 <__sflush_r+0x108>)
 8008ef8:	40ca      	lsrs	r2, r1
 8008efa:	07d6      	lsls	r6, r2, #31
 8008efc:	d528      	bpl.n	8008f50 <__sflush_r+0xb8>
 8008efe:	2200      	movs	r2, #0
 8008f00:	6062      	str	r2, [r4, #4]
 8008f02:	04d9      	lsls	r1, r3, #19
 8008f04:	6922      	ldr	r2, [r4, #16]
 8008f06:	6022      	str	r2, [r4, #0]
 8008f08:	d504      	bpl.n	8008f14 <__sflush_r+0x7c>
 8008f0a:	1c42      	adds	r2, r0, #1
 8008f0c:	d101      	bne.n	8008f12 <__sflush_r+0x7a>
 8008f0e:	682b      	ldr	r3, [r5, #0]
 8008f10:	b903      	cbnz	r3, 8008f14 <__sflush_r+0x7c>
 8008f12:	6560      	str	r0, [r4, #84]	; 0x54
 8008f14:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008f16:	602f      	str	r7, [r5, #0]
 8008f18:	2900      	cmp	r1, #0
 8008f1a:	d0ca      	beq.n	8008eb2 <__sflush_r+0x1a>
 8008f1c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008f20:	4299      	cmp	r1, r3
 8008f22:	d002      	beq.n	8008f2a <__sflush_r+0x92>
 8008f24:	4628      	mov	r0, r5
 8008f26:	f7ff f96f 	bl	8008208 <_free_r>
 8008f2a:	2000      	movs	r0, #0
 8008f2c:	6360      	str	r0, [r4, #52]	; 0x34
 8008f2e:	e7c1      	b.n	8008eb4 <__sflush_r+0x1c>
 8008f30:	6a21      	ldr	r1, [r4, #32]
 8008f32:	2301      	movs	r3, #1
 8008f34:	4628      	mov	r0, r5
 8008f36:	47b0      	blx	r6
 8008f38:	1c41      	adds	r1, r0, #1
 8008f3a:	d1c7      	bne.n	8008ecc <__sflush_r+0x34>
 8008f3c:	682b      	ldr	r3, [r5, #0]
 8008f3e:	2b00      	cmp	r3, #0
 8008f40:	d0c4      	beq.n	8008ecc <__sflush_r+0x34>
 8008f42:	2b1d      	cmp	r3, #29
 8008f44:	d001      	beq.n	8008f4a <__sflush_r+0xb2>
 8008f46:	2b16      	cmp	r3, #22
 8008f48:	d101      	bne.n	8008f4e <__sflush_r+0xb6>
 8008f4a:	602f      	str	r7, [r5, #0]
 8008f4c:	e7b1      	b.n	8008eb2 <__sflush_r+0x1a>
 8008f4e:	89a3      	ldrh	r3, [r4, #12]
 8008f50:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008f54:	81a3      	strh	r3, [r4, #12]
 8008f56:	e7ad      	b.n	8008eb4 <__sflush_r+0x1c>
 8008f58:	690f      	ldr	r7, [r1, #16]
 8008f5a:	2f00      	cmp	r7, #0
 8008f5c:	d0a9      	beq.n	8008eb2 <__sflush_r+0x1a>
 8008f5e:	0793      	lsls	r3, r2, #30
 8008f60:	680e      	ldr	r6, [r1, #0]
 8008f62:	bf08      	it	eq
 8008f64:	694b      	ldreq	r3, [r1, #20]
 8008f66:	600f      	str	r7, [r1, #0]
 8008f68:	bf18      	it	ne
 8008f6a:	2300      	movne	r3, #0
 8008f6c:	eba6 0807 	sub.w	r8, r6, r7
 8008f70:	608b      	str	r3, [r1, #8]
 8008f72:	f1b8 0f00 	cmp.w	r8, #0
 8008f76:	dd9c      	ble.n	8008eb2 <__sflush_r+0x1a>
 8008f78:	6a21      	ldr	r1, [r4, #32]
 8008f7a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8008f7c:	4643      	mov	r3, r8
 8008f7e:	463a      	mov	r2, r7
 8008f80:	4628      	mov	r0, r5
 8008f82:	47b0      	blx	r6
 8008f84:	2800      	cmp	r0, #0
 8008f86:	dc06      	bgt.n	8008f96 <__sflush_r+0xfe>
 8008f88:	89a3      	ldrh	r3, [r4, #12]
 8008f8a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008f8e:	81a3      	strh	r3, [r4, #12]
 8008f90:	f04f 30ff 	mov.w	r0, #4294967295
 8008f94:	e78e      	b.n	8008eb4 <__sflush_r+0x1c>
 8008f96:	4407      	add	r7, r0
 8008f98:	eba8 0800 	sub.w	r8, r8, r0
 8008f9c:	e7e9      	b.n	8008f72 <__sflush_r+0xda>
 8008f9e:	bf00      	nop
 8008fa0:	20400001 	.word	0x20400001

08008fa4 <_fflush_r>:
 8008fa4:	b538      	push	{r3, r4, r5, lr}
 8008fa6:	690b      	ldr	r3, [r1, #16]
 8008fa8:	4605      	mov	r5, r0
 8008faa:	460c      	mov	r4, r1
 8008fac:	b913      	cbnz	r3, 8008fb4 <_fflush_r+0x10>
 8008fae:	2500      	movs	r5, #0
 8008fb0:	4628      	mov	r0, r5
 8008fb2:	bd38      	pop	{r3, r4, r5, pc}
 8008fb4:	b118      	cbz	r0, 8008fbe <_fflush_r+0x1a>
 8008fb6:	6983      	ldr	r3, [r0, #24]
 8008fb8:	b90b      	cbnz	r3, 8008fbe <_fflush_r+0x1a>
 8008fba:	f7ff fa65 	bl	8008488 <__sinit>
 8008fbe:	4b14      	ldr	r3, [pc, #80]	; (8009010 <_fflush_r+0x6c>)
 8008fc0:	429c      	cmp	r4, r3
 8008fc2:	d11b      	bne.n	8008ffc <_fflush_r+0x58>
 8008fc4:	686c      	ldr	r4, [r5, #4]
 8008fc6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008fca:	2b00      	cmp	r3, #0
 8008fcc:	d0ef      	beq.n	8008fae <_fflush_r+0xa>
 8008fce:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8008fd0:	07d0      	lsls	r0, r2, #31
 8008fd2:	d404      	bmi.n	8008fde <_fflush_r+0x3a>
 8008fd4:	0599      	lsls	r1, r3, #22
 8008fd6:	d402      	bmi.n	8008fde <_fflush_r+0x3a>
 8008fd8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008fda:	f7ff faf3 	bl	80085c4 <__retarget_lock_acquire_recursive>
 8008fde:	4628      	mov	r0, r5
 8008fe0:	4621      	mov	r1, r4
 8008fe2:	f7ff ff59 	bl	8008e98 <__sflush_r>
 8008fe6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008fe8:	07da      	lsls	r2, r3, #31
 8008fea:	4605      	mov	r5, r0
 8008fec:	d4e0      	bmi.n	8008fb0 <_fflush_r+0xc>
 8008fee:	89a3      	ldrh	r3, [r4, #12]
 8008ff0:	059b      	lsls	r3, r3, #22
 8008ff2:	d4dd      	bmi.n	8008fb0 <_fflush_r+0xc>
 8008ff4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008ff6:	f7ff fae6 	bl	80085c6 <__retarget_lock_release_recursive>
 8008ffa:	e7d9      	b.n	8008fb0 <_fflush_r+0xc>
 8008ffc:	4b05      	ldr	r3, [pc, #20]	; (8009014 <_fflush_r+0x70>)
 8008ffe:	429c      	cmp	r4, r3
 8009000:	d101      	bne.n	8009006 <_fflush_r+0x62>
 8009002:	68ac      	ldr	r4, [r5, #8]
 8009004:	e7df      	b.n	8008fc6 <_fflush_r+0x22>
 8009006:	4b04      	ldr	r3, [pc, #16]	; (8009018 <_fflush_r+0x74>)
 8009008:	429c      	cmp	r4, r3
 800900a:	bf08      	it	eq
 800900c:	68ec      	ldreq	r4, [r5, #12]
 800900e:	e7da      	b.n	8008fc6 <_fflush_r+0x22>
 8009010:	080092c4 	.word	0x080092c4
 8009014:	080092e4 	.word	0x080092e4
 8009018:	080092a4 	.word	0x080092a4

0800901c <_lseek_r>:
 800901c:	b538      	push	{r3, r4, r5, lr}
 800901e:	4d07      	ldr	r5, [pc, #28]	; (800903c <_lseek_r+0x20>)
 8009020:	4604      	mov	r4, r0
 8009022:	4608      	mov	r0, r1
 8009024:	4611      	mov	r1, r2
 8009026:	2200      	movs	r2, #0
 8009028:	602a      	str	r2, [r5, #0]
 800902a:	461a      	mov	r2, r3
 800902c:	f7fe fddc 	bl	8007be8 <_lseek>
 8009030:	1c43      	adds	r3, r0, #1
 8009032:	d102      	bne.n	800903a <_lseek_r+0x1e>
 8009034:	682b      	ldr	r3, [r5, #0]
 8009036:	b103      	cbz	r3, 800903a <_lseek_r+0x1e>
 8009038:	6023      	str	r3, [r4, #0]
 800903a:	bd38      	pop	{r3, r4, r5, pc}
 800903c:	20001f40 	.word	0x20001f40

08009040 <__swhatbuf_r>:
 8009040:	b570      	push	{r4, r5, r6, lr}
 8009042:	460e      	mov	r6, r1
 8009044:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009048:	2900      	cmp	r1, #0
 800904a:	b096      	sub	sp, #88	; 0x58
 800904c:	4614      	mov	r4, r2
 800904e:	461d      	mov	r5, r3
 8009050:	da07      	bge.n	8009062 <__swhatbuf_r+0x22>
 8009052:	2300      	movs	r3, #0
 8009054:	602b      	str	r3, [r5, #0]
 8009056:	89b3      	ldrh	r3, [r6, #12]
 8009058:	061a      	lsls	r2, r3, #24
 800905a:	d410      	bmi.n	800907e <__swhatbuf_r+0x3e>
 800905c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009060:	e00e      	b.n	8009080 <__swhatbuf_r+0x40>
 8009062:	466a      	mov	r2, sp
 8009064:	f000 f862 	bl	800912c <_fstat_r>
 8009068:	2800      	cmp	r0, #0
 800906a:	dbf2      	blt.n	8009052 <__swhatbuf_r+0x12>
 800906c:	9a01      	ldr	r2, [sp, #4]
 800906e:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8009072:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8009076:	425a      	negs	r2, r3
 8009078:	415a      	adcs	r2, r3
 800907a:	602a      	str	r2, [r5, #0]
 800907c:	e7ee      	b.n	800905c <__swhatbuf_r+0x1c>
 800907e:	2340      	movs	r3, #64	; 0x40
 8009080:	2000      	movs	r0, #0
 8009082:	6023      	str	r3, [r4, #0]
 8009084:	b016      	add	sp, #88	; 0x58
 8009086:	bd70      	pop	{r4, r5, r6, pc}

08009088 <__smakebuf_r>:
 8009088:	898b      	ldrh	r3, [r1, #12]
 800908a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800908c:	079d      	lsls	r5, r3, #30
 800908e:	4606      	mov	r6, r0
 8009090:	460c      	mov	r4, r1
 8009092:	d507      	bpl.n	80090a4 <__smakebuf_r+0x1c>
 8009094:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8009098:	6023      	str	r3, [r4, #0]
 800909a:	6123      	str	r3, [r4, #16]
 800909c:	2301      	movs	r3, #1
 800909e:	6163      	str	r3, [r4, #20]
 80090a0:	b002      	add	sp, #8
 80090a2:	bd70      	pop	{r4, r5, r6, pc}
 80090a4:	ab01      	add	r3, sp, #4
 80090a6:	466a      	mov	r2, sp
 80090a8:	f7ff ffca 	bl	8009040 <__swhatbuf_r>
 80090ac:	9900      	ldr	r1, [sp, #0]
 80090ae:	4605      	mov	r5, r0
 80090b0:	4630      	mov	r0, r6
 80090b2:	f7ff f8f9 	bl	80082a8 <_malloc_r>
 80090b6:	b948      	cbnz	r0, 80090cc <__smakebuf_r+0x44>
 80090b8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80090bc:	059a      	lsls	r2, r3, #22
 80090be:	d4ef      	bmi.n	80090a0 <__smakebuf_r+0x18>
 80090c0:	f023 0303 	bic.w	r3, r3, #3
 80090c4:	f043 0302 	orr.w	r3, r3, #2
 80090c8:	81a3      	strh	r3, [r4, #12]
 80090ca:	e7e3      	b.n	8009094 <__smakebuf_r+0xc>
 80090cc:	4b0d      	ldr	r3, [pc, #52]	; (8009104 <__smakebuf_r+0x7c>)
 80090ce:	62b3      	str	r3, [r6, #40]	; 0x28
 80090d0:	89a3      	ldrh	r3, [r4, #12]
 80090d2:	6020      	str	r0, [r4, #0]
 80090d4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80090d8:	81a3      	strh	r3, [r4, #12]
 80090da:	9b00      	ldr	r3, [sp, #0]
 80090dc:	6163      	str	r3, [r4, #20]
 80090de:	9b01      	ldr	r3, [sp, #4]
 80090e0:	6120      	str	r0, [r4, #16]
 80090e2:	b15b      	cbz	r3, 80090fc <__smakebuf_r+0x74>
 80090e4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80090e8:	4630      	mov	r0, r6
 80090ea:	f000 f831 	bl	8009150 <_isatty_r>
 80090ee:	b128      	cbz	r0, 80090fc <__smakebuf_r+0x74>
 80090f0:	89a3      	ldrh	r3, [r4, #12]
 80090f2:	f023 0303 	bic.w	r3, r3, #3
 80090f6:	f043 0301 	orr.w	r3, r3, #1
 80090fa:	81a3      	strh	r3, [r4, #12]
 80090fc:	89a0      	ldrh	r0, [r4, #12]
 80090fe:	4305      	orrs	r5, r0
 8009100:	81a5      	strh	r5, [r4, #12]
 8009102:	e7cd      	b.n	80090a0 <__smakebuf_r+0x18>
 8009104:	08008421 	.word	0x08008421

08009108 <_read_r>:
 8009108:	b538      	push	{r3, r4, r5, lr}
 800910a:	4d07      	ldr	r5, [pc, #28]	; (8009128 <_read_r+0x20>)
 800910c:	4604      	mov	r4, r0
 800910e:	4608      	mov	r0, r1
 8009110:	4611      	mov	r1, r2
 8009112:	2200      	movs	r2, #0
 8009114:	602a      	str	r2, [r5, #0]
 8009116:	461a      	mov	r2, r3
 8009118:	f7fe fd20 	bl	8007b5c <_read>
 800911c:	1c43      	adds	r3, r0, #1
 800911e:	d102      	bne.n	8009126 <_read_r+0x1e>
 8009120:	682b      	ldr	r3, [r5, #0]
 8009122:	b103      	cbz	r3, 8009126 <_read_r+0x1e>
 8009124:	6023      	str	r3, [r4, #0]
 8009126:	bd38      	pop	{r3, r4, r5, pc}
 8009128:	20001f40 	.word	0x20001f40

0800912c <_fstat_r>:
 800912c:	b538      	push	{r3, r4, r5, lr}
 800912e:	4d07      	ldr	r5, [pc, #28]	; (800914c <_fstat_r+0x20>)
 8009130:	2300      	movs	r3, #0
 8009132:	4604      	mov	r4, r0
 8009134:	4608      	mov	r0, r1
 8009136:	4611      	mov	r1, r2
 8009138:	602b      	str	r3, [r5, #0]
 800913a:	f7fe fd4e 	bl	8007bda <_fstat>
 800913e:	1c43      	adds	r3, r0, #1
 8009140:	d102      	bne.n	8009148 <_fstat_r+0x1c>
 8009142:	682b      	ldr	r3, [r5, #0]
 8009144:	b103      	cbz	r3, 8009148 <_fstat_r+0x1c>
 8009146:	6023      	str	r3, [r4, #0]
 8009148:	bd38      	pop	{r3, r4, r5, pc}
 800914a:	bf00      	nop
 800914c:	20001f40 	.word	0x20001f40

08009150 <_isatty_r>:
 8009150:	b538      	push	{r3, r4, r5, lr}
 8009152:	4d06      	ldr	r5, [pc, #24]	; (800916c <_isatty_r+0x1c>)
 8009154:	2300      	movs	r3, #0
 8009156:	4604      	mov	r4, r0
 8009158:	4608      	mov	r0, r1
 800915a:	602b      	str	r3, [r5, #0]
 800915c:	f7fe fd42 	bl	8007be4 <_isatty>
 8009160:	1c43      	adds	r3, r0, #1
 8009162:	d102      	bne.n	800916a <_isatty_r+0x1a>
 8009164:	682b      	ldr	r3, [r5, #0]
 8009166:	b103      	cbz	r3, 800916a <_isatty_r+0x1a>
 8009168:	6023      	str	r3, [r4, #0]
 800916a:	bd38      	pop	{r3, r4, r5, pc}
 800916c:	20001f40 	.word	0x20001f40

08009170 <_init>:
 8009170:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009172:	bf00      	nop
 8009174:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009176:	bc08      	pop	{r3}
 8009178:	469e      	mov	lr, r3
 800917a:	4770      	bx	lr

0800917c <_fini>:
 800917c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800917e:	bf00      	nop
 8009180:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009182:	bc08      	pop	{r3}
 8009184:	469e      	mov	lr, r3
 8009186:	4770      	bx	lr
