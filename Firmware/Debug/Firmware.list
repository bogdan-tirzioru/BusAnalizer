
Firmware.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000926c  080002a0  080002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001e8  0800950c  0800950c  0001950c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  080096f4  080096f4  000196f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000008  080096fc  080096fc  000196fc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000008  08009704  08009704  00019704  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         000001e8  20000000  0800970c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00001d5c  200001e8  080098f4  000201e8  2**2
                  ALLOC
  8 ._user_heap_stack 00002404  20001f44  080098f4  00021f44  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  000201e8  2**0
                  CONTENTS, READONLY
 10 .debug_info   00050b0f  00000000  00000000  00020216  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00007098  00000000  00000000  00070d25  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_loc    0001fefc  00000000  00000000  00077dbd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_aranges 000020c8  00000000  00000000  00097cc0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_ranges 00001f70  00000000  00000000  00099d88  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_macro  00042352  00000000  00000000  0009bcf8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   00034427  00000000  00000000  000de04a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    00180fca  00000000  00000000  00112471  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .comment      00000053  00000000  00000000  0029343b  2**0
                  CONTENTS, READONLY
 19 .debug_frame  00006180  00000000  00000000  00293490  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	; (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	; (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	; (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	200001e8 	.word	0x200001e8
 80002bc:	00000000 	.word	0x00000000
 80002c0:	080094f4 	.word	0x080094f4

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	; (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	; (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	; (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	200001ec 	.word	0x200001ec
 80002dc:	080094f4 	.word	0x080094f4

080002e0 <memchr>:
 80002e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002e4:	2a10      	cmp	r2, #16
 80002e6:	db2b      	blt.n	8000340 <memchr+0x60>
 80002e8:	f010 0f07 	tst.w	r0, #7
 80002ec:	d008      	beq.n	8000300 <memchr+0x20>
 80002ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002f2:	3a01      	subs	r2, #1
 80002f4:	428b      	cmp	r3, r1
 80002f6:	d02d      	beq.n	8000354 <memchr+0x74>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	b342      	cbz	r2, 8000350 <memchr+0x70>
 80002fe:	d1f6      	bne.n	80002ee <memchr+0xe>
 8000300:	b4f0      	push	{r4, r5, r6, r7}
 8000302:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000306:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800030a:	f022 0407 	bic.w	r4, r2, #7
 800030e:	f07f 0700 	mvns.w	r7, #0
 8000312:	2300      	movs	r3, #0
 8000314:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000318:	3c08      	subs	r4, #8
 800031a:	ea85 0501 	eor.w	r5, r5, r1
 800031e:	ea86 0601 	eor.w	r6, r6, r1
 8000322:	fa85 f547 	uadd8	r5, r5, r7
 8000326:	faa3 f587 	sel	r5, r3, r7
 800032a:	fa86 f647 	uadd8	r6, r6, r7
 800032e:	faa5 f687 	sel	r6, r5, r7
 8000332:	b98e      	cbnz	r6, 8000358 <memchr+0x78>
 8000334:	d1ee      	bne.n	8000314 <memchr+0x34>
 8000336:	bcf0      	pop	{r4, r5, r6, r7}
 8000338:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800033c:	f002 0207 	and.w	r2, r2, #7
 8000340:	b132      	cbz	r2, 8000350 <memchr+0x70>
 8000342:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000346:	3a01      	subs	r2, #1
 8000348:	ea83 0301 	eor.w	r3, r3, r1
 800034c:	b113      	cbz	r3, 8000354 <memchr+0x74>
 800034e:	d1f8      	bne.n	8000342 <memchr+0x62>
 8000350:	2000      	movs	r0, #0
 8000352:	4770      	bx	lr
 8000354:	3801      	subs	r0, #1
 8000356:	4770      	bx	lr
 8000358:	2d00      	cmp	r5, #0
 800035a:	bf06      	itte	eq
 800035c:	4635      	moveq	r5, r6
 800035e:	3803      	subeq	r0, #3
 8000360:	3807      	subne	r0, #7
 8000362:	f015 0f01 	tst.w	r5, #1
 8000366:	d107      	bne.n	8000378 <memchr+0x98>
 8000368:	3001      	adds	r0, #1
 800036a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800036e:	bf02      	ittt	eq
 8000370:	3001      	addeq	r0, #1
 8000372:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000376:	3001      	addeq	r0, #1
 8000378:	bcf0      	pop	{r4, r5, r6, r7}
 800037a:	3801      	subs	r0, #1
 800037c:	4770      	bx	lr
 800037e:	bf00      	nop

08000380 <__aeabi_uldivmod>:
 8000380:	b953      	cbnz	r3, 8000398 <__aeabi_uldivmod+0x18>
 8000382:	b94a      	cbnz	r2, 8000398 <__aeabi_uldivmod+0x18>
 8000384:	2900      	cmp	r1, #0
 8000386:	bf08      	it	eq
 8000388:	2800      	cmpeq	r0, #0
 800038a:	bf1c      	itt	ne
 800038c:	f04f 31ff 	movne.w	r1, #4294967295
 8000390:	f04f 30ff 	movne.w	r0, #4294967295
 8000394:	f000 b96e 	b.w	8000674 <__aeabi_idiv0>
 8000398:	f1ad 0c08 	sub.w	ip, sp, #8
 800039c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003a0:	f000 f806 	bl	80003b0 <__udivmoddi4>
 80003a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003ac:	b004      	add	sp, #16
 80003ae:	4770      	bx	lr

080003b0 <__udivmoddi4>:
 80003b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003b4:	9d08      	ldr	r5, [sp, #32]
 80003b6:	4604      	mov	r4, r0
 80003b8:	468c      	mov	ip, r1
 80003ba:	2b00      	cmp	r3, #0
 80003bc:	f040 8083 	bne.w	80004c6 <__udivmoddi4+0x116>
 80003c0:	428a      	cmp	r2, r1
 80003c2:	4617      	mov	r7, r2
 80003c4:	d947      	bls.n	8000456 <__udivmoddi4+0xa6>
 80003c6:	fab2 f282 	clz	r2, r2
 80003ca:	b142      	cbz	r2, 80003de <__udivmoddi4+0x2e>
 80003cc:	f1c2 0020 	rsb	r0, r2, #32
 80003d0:	fa24 f000 	lsr.w	r0, r4, r0
 80003d4:	4091      	lsls	r1, r2
 80003d6:	4097      	lsls	r7, r2
 80003d8:	ea40 0c01 	orr.w	ip, r0, r1
 80003dc:	4094      	lsls	r4, r2
 80003de:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80003e2:	0c23      	lsrs	r3, r4, #16
 80003e4:	fbbc f6f8 	udiv	r6, ip, r8
 80003e8:	fa1f fe87 	uxth.w	lr, r7
 80003ec:	fb08 c116 	mls	r1, r8, r6, ip
 80003f0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003f4:	fb06 f10e 	mul.w	r1, r6, lr
 80003f8:	4299      	cmp	r1, r3
 80003fa:	d909      	bls.n	8000410 <__udivmoddi4+0x60>
 80003fc:	18fb      	adds	r3, r7, r3
 80003fe:	f106 30ff 	add.w	r0, r6, #4294967295
 8000402:	f080 8119 	bcs.w	8000638 <__udivmoddi4+0x288>
 8000406:	4299      	cmp	r1, r3
 8000408:	f240 8116 	bls.w	8000638 <__udivmoddi4+0x288>
 800040c:	3e02      	subs	r6, #2
 800040e:	443b      	add	r3, r7
 8000410:	1a5b      	subs	r3, r3, r1
 8000412:	b2a4      	uxth	r4, r4
 8000414:	fbb3 f0f8 	udiv	r0, r3, r8
 8000418:	fb08 3310 	mls	r3, r8, r0, r3
 800041c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000420:	fb00 fe0e 	mul.w	lr, r0, lr
 8000424:	45a6      	cmp	lr, r4
 8000426:	d909      	bls.n	800043c <__udivmoddi4+0x8c>
 8000428:	193c      	adds	r4, r7, r4
 800042a:	f100 33ff 	add.w	r3, r0, #4294967295
 800042e:	f080 8105 	bcs.w	800063c <__udivmoddi4+0x28c>
 8000432:	45a6      	cmp	lr, r4
 8000434:	f240 8102 	bls.w	800063c <__udivmoddi4+0x28c>
 8000438:	3802      	subs	r0, #2
 800043a:	443c      	add	r4, r7
 800043c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000440:	eba4 040e 	sub.w	r4, r4, lr
 8000444:	2600      	movs	r6, #0
 8000446:	b11d      	cbz	r5, 8000450 <__udivmoddi4+0xa0>
 8000448:	40d4      	lsrs	r4, r2
 800044a:	2300      	movs	r3, #0
 800044c:	e9c5 4300 	strd	r4, r3, [r5]
 8000450:	4631      	mov	r1, r6
 8000452:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000456:	b902      	cbnz	r2, 800045a <__udivmoddi4+0xaa>
 8000458:	deff      	udf	#255	; 0xff
 800045a:	fab2 f282 	clz	r2, r2
 800045e:	2a00      	cmp	r2, #0
 8000460:	d150      	bne.n	8000504 <__udivmoddi4+0x154>
 8000462:	1bcb      	subs	r3, r1, r7
 8000464:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000468:	fa1f f887 	uxth.w	r8, r7
 800046c:	2601      	movs	r6, #1
 800046e:	fbb3 fcfe 	udiv	ip, r3, lr
 8000472:	0c21      	lsrs	r1, r4, #16
 8000474:	fb0e 331c 	mls	r3, lr, ip, r3
 8000478:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800047c:	fb08 f30c 	mul.w	r3, r8, ip
 8000480:	428b      	cmp	r3, r1
 8000482:	d907      	bls.n	8000494 <__udivmoddi4+0xe4>
 8000484:	1879      	adds	r1, r7, r1
 8000486:	f10c 30ff 	add.w	r0, ip, #4294967295
 800048a:	d202      	bcs.n	8000492 <__udivmoddi4+0xe2>
 800048c:	428b      	cmp	r3, r1
 800048e:	f200 80e9 	bhi.w	8000664 <__udivmoddi4+0x2b4>
 8000492:	4684      	mov	ip, r0
 8000494:	1ac9      	subs	r1, r1, r3
 8000496:	b2a3      	uxth	r3, r4
 8000498:	fbb1 f0fe 	udiv	r0, r1, lr
 800049c:	fb0e 1110 	mls	r1, lr, r0, r1
 80004a0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80004a4:	fb08 f800 	mul.w	r8, r8, r0
 80004a8:	45a0      	cmp	r8, r4
 80004aa:	d907      	bls.n	80004bc <__udivmoddi4+0x10c>
 80004ac:	193c      	adds	r4, r7, r4
 80004ae:	f100 33ff 	add.w	r3, r0, #4294967295
 80004b2:	d202      	bcs.n	80004ba <__udivmoddi4+0x10a>
 80004b4:	45a0      	cmp	r8, r4
 80004b6:	f200 80d9 	bhi.w	800066c <__udivmoddi4+0x2bc>
 80004ba:	4618      	mov	r0, r3
 80004bc:	eba4 0408 	sub.w	r4, r4, r8
 80004c0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80004c4:	e7bf      	b.n	8000446 <__udivmoddi4+0x96>
 80004c6:	428b      	cmp	r3, r1
 80004c8:	d909      	bls.n	80004de <__udivmoddi4+0x12e>
 80004ca:	2d00      	cmp	r5, #0
 80004cc:	f000 80b1 	beq.w	8000632 <__udivmoddi4+0x282>
 80004d0:	2600      	movs	r6, #0
 80004d2:	e9c5 0100 	strd	r0, r1, [r5]
 80004d6:	4630      	mov	r0, r6
 80004d8:	4631      	mov	r1, r6
 80004da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004de:	fab3 f683 	clz	r6, r3
 80004e2:	2e00      	cmp	r6, #0
 80004e4:	d14a      	bne.n	800057c <__udivmoddi4+0x1cc>
 80004e6:	428b      	cmp	r3, r1
 80004e8:	d302      	bcc.n	80004f0 <__udivmoddi4+0x140>
 80004ea:	4282      	cmp	r2, r0
 80004ec:	f200 80b8 	bhi.w	8000660 <__udivmoddi4+0x2b0>
 80004f0:	1a84      	subs	r4, r0, r2
 80004f2:	eb61 0103 	sbc.w	r1, r1, r3
 80004f6:	2001      	movs	r0, #1
 80004f8:	468c      	mov	ip, r1
 80004fa:	2d00      	cmp	r5, #0
 80004fc:	d0a8      	beq.n	8000450 <__udivmoddi4+0xa0>
 80004fe:	e9c5 4c00 	strd	r4, ip, [r5]
 8000502:	e7a5      	b.n	8000450 <__udivmoddi4+0xa0>
 8000504:	f1c2 0320 	rsb	r3, r2, #32
 8000508:	fa20 f603 	lsr.w	r6, r0, r3
 800050c:	4097      	lsls	r7, r2
 800050e:	fa01 f002 	lsl.w	r0, r1, r2
 8000512:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000516:	40d9      	lsrs	r1, r3
 8000518:	4330      	orrs	r0, r6
 800051a:	0c03      	lsrs	r3, r0, #16
 800051c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000520:	fa1f f887 	uxth.w	r8, r7
 8000524:	fb0e 1116 	mls	r1, lr, r6, r1
 8000528:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800052c:	fb06 f108 	mul.w	r1, r6, r8
 8000530:	4299      	cmp	r1, r3
 8000532:	fa04 f402 	lsl.w	r4, r4, r2
 8000536:	d909      	bls.n	800054c <__udivmoddi4+0x19c>
 8000538:	18fb      	adds	r3, r7, r3
 800053a:	f106 3cff 	add.w	ip, r6, #4294967295
 800053e:	f080 808d 	bcs.w	800065c <__udivmoddi4+0x2ac>
 8000542:	4299      	cmp	r1, r3
 8000544:	f240 808a 	bls.w	800065c <__udivmoddi4+0x2ac>
 8000548:	3e02      	subs	r6, #2
 800054a:	443b      	add	r3, r7
 800054c:	1a5b      	subs	r3, r3, r1
 800054e:	b281      	uxth	r1, r0
 8000550:	fbb3 f0fe 	udiv	r0, r3, lr
 8000554:	fb0e 3310 	mls	r3, lr, r0, r3
 8000558:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800055c:	fb00 f308 	mul.w	r3, r0, r8
 8000560:	428b      	cmp	r3, r1
 8000562:	d907      	bls.n	8000574 <__udivmoddi4+0x1c4>
 8000564:	1879      	adds	r1, r7, r1
 8000566:	f100 3cff 	add.w	ip, r0, #4294967295
 800056a:	d273      	bcs.n	8000654 <__udivmoddi4+0x2a4>
 800056c:	428b      	cmp	r3, r1
 800056e:	d971      	bls.n	8000654 <__udivmoddi4+0x2a4>
 8000570:	3802      	subs	r0, #2
 8000572:	4439      	add	r1, r7
 8000574:	1acb      	subs	r3, r1, r3
 8000576:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800057a:	e778      	b.n	800046e <__udivmoddi4+0xbe>
 800057c:	f1c6 0c20 	rsb	ip, r6, #32
 8000580:	fa03 f406 	lsl.w	r4, r3, r6
 8000584:	fa22 f30c 	lsr.w	r3, r2, ip
 8000588:	431c      	orrs	r4, r3
 800058a:	fa20 f70c 	lsr.w	r7, r0, ip
 800058e:	fa01 f306 	lsl.w	r3, r1, r6
 8000592:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000596:	fa21 f10c 	lsr.w	r1, r1, ip
 800059a:	431f      	orrs	r7, r3
 800059c:	0c3b      	lsrs	r3, r7, #16
 800059e:	fbb1 f9fe 	udiv	r9, r1, lr
 80005a2:	fa1f f884 	uxth.w	r8, r4
 80005a6:	fb0e 1119 	mls	r1, lr, r9, r1
 80005aa:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80005ae:	fb09 fa08 	mul.w	sl, r9, r8
 80005b2:	458a      	cmp	sl, r1
 80005b4:	fa02 f206 	lsl.w	r2, r2, r6
 80005b8:	fa00 f306 	lsl.w	r3, r0, r6
 80005bc:	d908      	bls.n	80005d0 <__udivmoddi4+0x220>
 80005be:	1861      	adds	r1, r4, r1
 80005c0:	f109 30ff 	add.w	r0, r9, #4294967295
 80005c4:	d248      	bcs.n	8000658 <__udivmoddi4+0x2a8>
 80005c6:	458a      	cmp	sl, r1
 80005c8:	d946      	bls.n	8000658 <__udivmoddi4+0x2a8>
 80005ca:	f1a9 0902 	sub.w	r9, r9, #2
 80005ce:	4421      	add	r1, r4
 80005d0:	eba1 010a 	sub.w	r1, r1, sl
 80005d4:	b2bf      	uxth	r7, r7
 80005d6:	fbb1 f0fe 	udiv	r0, r1, lr
 80005da:	fb0e 1110 	mls	r1, lr, r0, r1
 80005de:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 80005e2:	fb00 f808 	mul.w	r8, r0, r8
 80005e6:	45b8      	cmp	r8, r7
 80005e8:	d907      	bls.n	80005fa <__udivmoddi4+0x24a>
 80005ea:	19e7      	adds	r7, r4, r7
 80005ec:	f100 31ff 	add.w	r1, r0, #4294967295
 80005f0:	d22e      	bcs.n	8000650 <__udivmoddi4+0x2a0>
 80005f2:	45b8      	cmp	r8, r7
 80005f4:	d92c      	bls.n	8000650 <__udivmoddi4+0x2a0>
 80005f6:	3802      	subs	r0, #2
 80005f8:	4427      	add	r7, r4
 80005fa:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80005fe:	eba7 0708 	sub.w	r7, r7, r8
 8000602:	fba0 8902 	umull	r8, r9, r0, r2
 8000606:	454f      	cmp	r7, r9
 8000608:	46c6      	mov	lr, r8
 800060a:	4649      	mov	r1, r9
 800060c:	d31a      	bcc.n	8000644 <__udivmoddi4+0x294>
 800060e:	d017      	beq.n	8000640 <__udivmoddi4+0x290>
 8000610:	b15d      	cbz	r5, 800062a <__udivmoddi4+0x27a>
 8000612:	ebb3 020e 	subs.w	r2, r3, lr
 8000616:	eb67 0701 	sbc.w	r7, r7, r1
 800061a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800061e:	40f2      	lsrs	r2, r6
 8000620:	ea4c 0202 	orr.w	r2, ip, r2
 8000624:	40f7      	lsrs	r7, r6
 8000626:	e9c5 2700 	strd	r2, r7, [r5]
 800062a:	2600      	movs	r6, #0
 800062c:	4631      	mov	r1, r6
 800062e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000632:	462e      	mov	r6, r5
 8000634:	4628      	mov	r0, r5
 8000636:	e70b      	b.n	8000450 <__udivmoddi4+0xa0>
 8000638:	4606      	mov	r6, r0
 800063a:	e6e9      	b.n	8000410 <__udivmoddi4+0x60>
 800063c:	4618      	mov	r0, r3
 800063e:	e6fd      	b.n	800043c <__udivmoddi4+0x8c>
 8000640:	4543      	cmp	r3, r8
 8000642:	d2e5      	bcs.n	8000610 <__udivmoddi4+0x260>
 8000644:	ebb8 0e02 	subs.w	lr, r8, r2
 8000648:	eb69 0104 	sbc.w	r1, r9, r4
 800064c:	3801      	subs	r0, #1
 800064e:	e7df      	b.n	8000610 <__udivmoddi4+0x260>
 8000650:	4608      	mov	r0, r1
 8000652:	e7d2      	b.n	80005fa <__udivmoddi4+0x24a>
 8000654:	4660      	mov	r0, ip
 8000656:	e78d      	b.n	8000574 <__udivmoddi4+0x1c4>
 8000658:	4681      	mov	r9, r0
 800065a:	e7b9      	b.n	80005d0 <__udivmoddi4+0x220>
 800065c:	4666      	mov	r6, ip
 800065e:	e775      	b.n	800054c <__udivmoddi4+0x19c>
 8000660:	4630      	mov	r0, r6
 8000662:	e74a      	b.n	80004fa <__udivmoddi4+0x14a>
 8000664:	f1ac 0c02 	sub.w	ip, ip, #2
 8000668:	4439      	add	r1, r7
 800066a:	e713      	b.n	8000494 <__udivmoddi4+0xe4>
 800066c:	3802      	subs	r0, #2
 800066e:	443c      	add	r4, r7
 8000670:	e724      	b.n	80004bc <__udivmoddi4+0x10c>
 8000672:	bf00      	nop

08000674 <__aeabi_idiv0>:
 8000674:	4770      	bx	lr
 8000676:	bf00      	nop

08000678 <_ZN5Timer13TIM_Base_InitEP17TIM_HandleTypeDef>:


HAL_StatusTypeDef Timer::TIM_Base_Init(TIM_HandleTypeDef *htim)
{
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8000678:	b369      	cbz	r1, 80006d6 <_ZN5Timer13TIM_Base_InitEP17TIM_HandleTypeDef+0x5e>
{
 800067a:	b510      	push	{r4, lr}
 800067c:	460c      	mov	r4, r1
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800067e:	f891 303d 	ldrb.w	r3, [r1, #61]	; 0x3d
 8000682:	b313      	cbz	r3, 80006ca <_ZN5Timer13TIM_Base_InitEP17TIM_HandleTypeDef+0x52>
    HAL_TIM_Base_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8000684:	2302      	movs	r3, #2
 8000686:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800068a:	4621      	mov	r1, r4
 800068c:	f851 0b04 	ldr.w	r0, [r1], #4
 8000690:	f004 fae2 	bl	8004c58 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8000694:	2301      	movs	r3, #1
 8000696:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800069a:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
 800069e:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 80006a2:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 80006a6:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
 80006aa:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80006ae:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80006b2:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 80006b6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80006ba:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
 80006be:	f884 3047 	strb.w	r3, [r4, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80006c2:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d

  return HAL_OK;
 80006c6:	2000      	movs	r0, #0
}
 80006c8:	bd10      	pop	{r4, pc}
    htim->Lock = HAL_UNLOCKED;
 80006ca:	f881 303c 	strb.w	r3, [r1, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 80006ce:	4608      	mov	r0, r1
 80006d0:	f007 fb48 	bl	8007d64 <HAL_TIM_Base_MspInit>
 80006d4:	e7d6      	b.n	8000684 <_ZN5Timer13TIM_Base_InitEP17TIM_HandleTypeDef+0xc>
    return HAL_ERROR;
 80006d6:	2001      	movs	r0, #1
}
 80006d8:	4770      	bx	lr

080006da <_ZN5Timer11TIM_OC_InitEP17TIM_HandleTypeDef>:


HAL_StatusTypeDef Timer::TIM_OC_Init(TIM_HandleTypeDef *htim)
{
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80006da:	b369      	cbz	r1, 8000738 <_ZN5Timer11TIM_OC_InitEP17TIM_HandleTypeDef+0x5e>
{
 80006dc:	b510      	push	{r4, lr}
 80006de:	460c      	mov	r4, r1
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80006e0:	f891 303d 	ldrb.w	r3, [r1, #61]	; 0x3d
 80006e4:	b313      	cbz	r3, 800072c <_ZN5Timer11TIM_OC_InitEP17TIM_HandleTypeDef+0x52>
    HAL_TIM_OC_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80006e6:	2302      	movs	r3, #2
 80006e8:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 80006ec:	4621      	mov	r1, r4
 80006ee:	f851 0b04 	ldr.w	r0, [r1], #4
 80006f2:	f004 fab1 	bl	8004c58 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80006f6:	2301      	movs	r3, #1
 80006f8:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80006fc:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
 8000700:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 8000704:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 8000708:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
 800070c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8000710:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8000714:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 8000718:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800071c:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
 8000720:	f884 3047 	strb.w	r3, [r4, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8000724:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d

  return HAL_OK;
 8000728:	2000      	movs	r0, #0
}
 800072a:	bd10      	pop	{r4, pc}
    htim->Lock = HAL_UNLOCKED;
 800072c:	f881 303c 	strb.w	r3, [r1, #60]	; 0x3c
    HAL_TIM_OC_MspInit(htim);
 8000730:	4608      	mov	r0, r1
 8000732:	f004 f9bf 	bl	8004ab4 <HAL_TIM_OC_MspInit>
 8000736:	e7d6      	b.n	80006e6 <_ZN5Timer11TIM_OC_InitEP17TIM_HandleTypeDef+0xc>
    return HAL_ERROR;
 8000738:	2001      	movs	r0, #1
}
 800073a:	4770      	bx	lr

0800073c <_ZN5Timer33TIMEx_MasterConfigSynchronizationEP17TIM_HandleTypeDefP23TIM_MasterConfigTypeDef>:
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800073c:	f891 303c 	ldrb.w	r3, [r1, #60]	; 0x3c
 8000740:	2b01      	cmp	r3, #1
 8000742:	d040      	beq.n	80007c6 <_ZN5Timer33TIMEx_MasterConfigSynchronizationEP17TIM_HandleTypeDefP23TIM_MasterConfigTypeDef+0x8a>
{
 8000744:	b470      	push	{r4, r5, r6}
  __HAL_LOCK(htim);
 8000746:	2301      	movs	r3, #1
 8000748:	f881 303c 	strb.w	r3, [r1, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800074c:	2302      	movs	r3, #2
 800074e:	f881 303d 	strb.w	r3, [r1, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8000752:	680b      	ldr	r3, [r1, #0]
 8000754:	6858      	ldr	r0, [r3, #4]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8000756:	689d      	ldr	r5, [r3, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8000758:	4e1c      	ldr	r6, [pc, #112]	; (80007cc <_ZN5Timer33TIMEx_MasterConfigSynchronizationEP17TIM_HandleTypeDefP23TIM_MasterConfigTypeDef+0x90>)
 800075a:	4c1d      	ldr	r4, [pc, #116]	; (80007d0 <_ZN5Timer33TIMEx_MasterConfigSynchronizationEP17TIM_HandleTypeDefP23TIM_MasterConfigTypeDef+0x94>)
 800075c:	42a3      	cmp	r3, r4
 800075e:	bf18      	it	ne
 8000760:	42b3      	cmpne	r3, r6
 8000762:	d103      	bne.n	800076c <_ZN5Timer33TIMEx_MasterConfigSynchronizationEP17TIM_HandleTypeDefP23TIM_MasterConfigTypeDef+0x30>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8000764:	f420 0070 	bic.w	r0, r0, #15728640	; 0xf00000
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8000768:	6854      	ldr	r4, [r2, #4]
 800076a:	4320      	orrs	r0, r4
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800076c:	f020 0070 	bic.w	r0, r0, #112	; 0x70
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8000770:	6814      	ldr	r4, [r2, #0]
 8000772:	4320      	orrs	r0, r4

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8000774:	6058      	str	r0, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8000776:	680b      	ldr	r3, [r1, #0]
 8000778:	4814      	ldr	r0, [pc, #80]	; (80007cc <_ZN5Timer33TIMEx_MasterConfigSynchronizationEP17TIM_HandleTypeDefP23TIM_MasterConfigTypeDef+0x90>)
 800077a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800077e:	bf18      	it	ne
 8000780:	4283      	cmpne	r3, r0
 8000782:	d013      	beq.n	80007ac <_ZN5Timer33TIMEx_MasterConfigSynchronizationEP17TIM_HandleTypeDefP23TIM_MasterConfigTypeDef+0x70>
 8000784:	f5a0 407c 	sub.w	r0, r0, #64512	; 0xfc00
 8000788:	4283      	cmp	r3, r0
 800078a:	d00f      	beq.n	80007ac <_ZN5Timer33TIMEx_MasterConfigSynchronizationEP17TIM_HandleTypeDefP23TIM_MasterConfigTypeDef+0x70>
 800078c:	f500 6080 	add.w	r0, r0, #1024	; 0x400
 8000790:	4283      	cmp	r3, r0
 8000792:	d00b      	beq.n	80007ac <_ZN5Timer33TIMEx_MasterConfigSynchronizationEP17TIM_HandleTypeDefP23TIM_MasterConfigTypeDef+0x70>
 8000794:	f500 6080 	add.w	r0, r0, #1024	; 0x400
 8000798:	4283      	cmp	r3, r0
 800079a:	d007      	beq.n	80007ac <_ZN5Timer33TIMEx_MasterConfigSynchronizationEP17TIM_HandleTypeDefP23TIM_MasterConfigTypeDef+0x70>
 800079c:	f500 4078 	add.w	r0, r0, #63488	; 0xf800
 80007a0:	4283      	cmp	r3, r0
 80007a2:	d003      	beq.n	80007ac <_ZN5Timer33TIMEx_MasterConfigSynchronizationEP17TIM_HandleTypeDefP23TIM_MasterConfigTypeDef+0x70>
 80007a4:	f5a0 406c 	sub.w	r0, r0, #60416	; 0xec00
 80007a8:	4283      	cmp	r3, r0
 80007aa:	d104      	bne.n	80007b6 <_ZN5Timer33TIMEx_MasterConfigSynchronizationEP17TIM_HandleTypeDefP23TIM_MasterConfigTypeDef+0x7a>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80007ac:	f025 0580 	bic.w	r5, r5, #128	; 0x80
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80007b0:	6892      	ldr	r2, [r2, #8]
 80007b2:	4315      	orrs	r5, r2

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80007b4:	609d      	str	r5, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80007b6:	2301      	movs	r3, #1
 80007b8:	f881 303d 	strb.w	r3, [r1, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80007bc:	2000      	movs	r0, #0
 80007be:	f881 003c 	strb.w	r0, [r1, #60]	; 0x3c

  return HAL_OK;
}
 80007c2:	bc70      	pop	{r4, r5, r6}
 80007c4:	4770      	bx	lr
  __HAL_LOCK(htim);
 80007c6:	2002      	movs	r0, #2
}
 80007c8:	4770      	bx	lr
 80007ca:	bf00      	nop
 80007cc:	40010000 	.word	0x40010000
 80007d0:	40010400 	.word	0x40010400

080007d4 <_ZN5Timer24TIM_TI1_ConfigInputStageEP11TIM_TypeDefmm>:

void Timer:: TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80007d4:	b430      	push	{r4, r5}
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80007d6:	6a08      	ldr	r0, [r1, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80007d8:	6a0d      	ldr	r5, [r1, #32]
 80007da:	f025 0501 	bic.w	r5, r5, #1
 80007de:	620d      	str	r5, [r1, #32]
  tmpccmr1 = TIMx->CCMR1;
 80007e0:	698c      	ldr	r4, [r1, #24]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80007e2:	f024 04f0 	bic.w	r4, r4, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80007e6:	ea44 1403 	orr.w	r4, r4, r3, lsl #4

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80007ea:	f020 000a 	bic.w	r0, r0, #10
  tmpccer |= TIM_ICPolarity;
 80007ee:	4310      	orrs	r0, r2

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80007f0:	618c      	str	r4, [r1, #24]
  TIMx->CCER = tmpccer;
 80007f2:	6208      	str	r0, [r1, #32]
}
 80007f4:	bc30      	pop	{r4, r5}
 80007f6:	4770      	bx	lr

080007f8 <_ZN5Timer18TIM_ITRx_SetConfigEP11TIM_TypeDefm>:
void Timer:: TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80007f8:	6888      	ldr	r0, [r1, #8]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80007fa:	4b03      	ldr	r3, [pc, #12]	; (8000808 <_ZN5Timer18TIM_ITRx_SetConfigEP11TIM_TypeDefm+0x10>)
 80007fc:	4003      	ands	r3, r0
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80007fe:	4313      	orrs	r3, r2
 8000800:	f043 0307 	orr.w	r3, r3, #7
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8000804:	608b      	str	r3, [r1, #8]
}
 8000806:	4770      	bx	lr
 8000808:	ffcfff8f 	.word	0xffcfff8f

0800080c <_ZN5Timer24TIM_TI2_ConfigInputStageEP11TIM_TypeDefmm>:

void Timer::TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800080c:	b430      	push	{r4, r5}
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800080e:	6a0d      	ldr	r5, [r1, #32]
 8000810:	f025 0510 	bic.w	r5, r5, #16
 8000814:	620d      	str	r5, [r1, #32]
  tmpccmr1 = TIMx->CCMR1;
 8000816:	698c      	ldr	r4, [r1, #24]
  tmpccer = TIMx->CCER;
 8000818:	6a08      	ldr	r0, [r1, #32]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800081a:	f424 4470 	bic.w	r4, r4, #61440	; 0xf000
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800081e:	ea44 3403 	orr.w	r4, r4, r3, lsl #12

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8000822:	f020 00a0 	bic.w	r0, r0, #160	; 0xa0
  tmpccer |= (TIM_ICPolarity << 4U);
 8000826:	ea40 1002 	orr.w	r0, r0, r2, lsl #4

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800082a:	618c      	str	r4, [r1, #24]
  TIMx->CCER = tmpccer;
 800082c:	6208      	str	r0, [r1, #32]
}
 800082e:	bc30      	pop	{r4, r5}
 8000830:	4770      	bx	lr
	...

08000834 <_ZN5Timer21TIM_ConfigClockSourceEP17TIM_HandleTypeDefP22TIM_ClockConfigTypeDef>:
{
 8000834:	b538      	push	{r3, r4, r5, lr}
 8000836:	460c      	mov	r4, r1
  __HAL_LOCK(htim);
 8000838:	f891 303c 	ldrb.w	r3, [r1, #60]	; 0x3c
 800083c:	2b01      	cmp	r3, #1
 800083e:	d07d      	beq.n	800093c <_ZN5Timer21TIM_ConfigClockSourceEP17TIM_HandleTypeDefP22TIM_ClockConfigTypeDef+0x108>
 8000840:	4605      	mov	r5, r0
 8000842:	4611      	mov	r1, r2
 8000844:	2301      	movs	r3, #1
 8000846:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
  htim->State = HAL_TIM_STATE_BUSY;
 800084a:	2302      	movs	r3, #2
 800084c:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  tmpsmcr = htim->Instance->SMCR;
 8000850:	6822      	ldr	r2, [r4, #0]
 8000852:	6890      	ldr	r0, [r2, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8000854:	4b3a      	ldr	r3, [pc, #232]	; (8000940 <_ZN5Timer21TIM_ConfigClockSourceEP17TIM_HandleTypeDefP22TIM_ClockConfigTypeDef+0x10c>)
 8000856:	4003      	ands	r3, r0
  htim->Instance->SMCR = tmpsmcr;
 8000858:	6093      	str	r3, [r2, #8]
  switch (sClockSourceConfig->ClockSource)
 800085a:	680a      	ldr	r2, [r1, #0]
 800085c:	2a60      	cmp	r2, #96	; 0x60
 800085e:	d055      	beq.n	800090c <_ZN5Timer21TIM_ConfigClockSourceEP17TIM_HandleTypeDefP22TIM_ClockConfigTypeDef+0xd8>
 8000860:	d90e      	bls.n	8000880 <_ZN5Timer21TIM_ConfigClockSourceEP17TIM_HandleTypeDefP22TIM_ClockConfigTypeDef+0x4c>
 8000862:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
 8000866:	d045      	beq.n	80008f4 <_ZN5Timer21TIM_ConfigClockSourceEP17TIM_HandleTypeDefP22TIM_ClockConfigTypeDef+0xc0>
 8000868:	d92f      	bls.n	80008ca <_ZN5Timer21TIM_ConfigClockSourceEP17TIM_HandleTypeDefP22TIM_ClockConfigTypeDef+0x96>
 800086a:	4b36      	ldr	r3, [pc, #216]	; (8000944 <_ZN5Timer21TIM_ConfigClockSourceEP17TIM_HandleTypeDefP22TIM_ClockConfigTypeDef+0x110>)
 800086c:	429a      	cmp	r2, r3
 800086e:	d027      	beq.n	80008c0 <_ZN5Timer21TIM_ConfigClockSourceEP17TIM_HandleTypeDefP22TIM_ClockConfigTypeDef+0x8c>
 8000870:	d939      	bls.n	80008e6 <_ZN5Timer21TIM_ConfigClockSourceEP17TIM_HandleTypeDefP22TIM_ClockConfigTypeDef+0xb2>
 8000872:	4b35      	ldr	r3, [pc, #212]	; (8000948 <_ZN5Timer21TIM_ConfigClockSourceEP17TIM_HandleTypeDefP22TIM_ClockConfigTypeDef+0x114>)
 8000874:	429a      	cmp	r2, r3
 8000876:	d023      	beq.n	80008c0 <_ZN5Timer21TIM_ConfigClockSourceEP17TIM_HandleTypeDefP22TIM_ClockConfigTypeDef+0x8c>
 8000878:	3310      	adds	r3, #16
 800087a:	429a      	cmp	r2, r3
 800087c:	d020      	beq.n	80008c0 <_ZN5Timer21TIM_ConfigClockSourceEP17TIM_HandleTypeDefP22TIM_ClockConfigTypeDef+0x8c>
 800087e:	e015      	b.n	80008ac <_ZN5Timer21TIM_ConfigClockSourceEP17TIM_HandleTypeDefP22TIM_ClockConfigTypeDef+0x78>
 8000880:	2a40      	cmp	r2, #64	; 0x40
 8000882:	d04f      	beq.n	8000924 <_ZN5Timer21TIM_ConfigClockSourceEP17TIM_HandleTypeDefP22TIM_ClockConfigTypeDef+0xf0>
 8000884:	d90d      	bls.n	80008a2 <_ZN5Timer21TIM_ConfigClockSourceEP17TIM_HandleTypeDefP22TIM_ClockConfigTypeDef+0x6e>
 8000886:	2a50      	cmp	r2, #80	; 0x50
 8000888:	d110      	bne.n	80008ac <_ZN5Timer21TIM_ConfigClockSourceEP17TIM_HandleTypeDefP22TIM_ClockConfigTypeDef+0x78>
      this->TIM_TI1_ConfigInputStage(htim->Instance,
 800088a:	68cb      	ldr	r3, [r1, #12]
 800088c:	684a      	ldr	r2, [r1, #4]
 800088e:	6821      	ldr	r1, [r4, #0]
 8000890:	4628      	mov	r0, r5
 8000892:	f7ff ff9f 	bl	80007d4 <_ZN5Timer24TIM_TI1_ConfigInputStageEP11TIM_TypeDefmm>
      this->TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8000896:	2250      	movs	r2, #80	; 0x50
 8000898:	6821      	ldr	r1, [r4, #0]
 800089a:	4628      	mov	r0, r5
 800089c:	f7ff ffac 	bl	80007f8 <_ZN5Timer18TIM_ITRx_SetConfigEP11TIM_TypeDefm>
      break;
 80008a0:	e004      	b.n	80008ac <_ZN5Timer21TIM_ConfigClockSourceEP17TIM_HandleTypeDefP22TIM_ClockConfigTypeDef+0x78>
  switch (sClockSourceConfig->ClockSource)
 80008a2:	2a20      	cmp	r2, #32
 80008a4:	d00c      	beq.n	80008c0 <_ZN5Timer21TIM_ConfigClockSourceEP17TIM_HandleTypeDefP22TIM_ClockConfigTypeDef+0x8c>
 80008a6:	d908      	bls.n	80008ba <_ZN5Timer21TIM_ConfigClockSourceEP17TIM_HandleTypeDefP22TIM_ClockConfigTypeDef+0x86>
 80008a8:	2a30      	cmp	r2, #48	; 0x30
 80008aa:	d009      	beq.n	80008c0 <_ZN5Timer21TIM_ConfigClockSourceEP17TIM_HandleTypeDefP22TIM_ClockConfigTypeDef+0x8c>
  htim->State = HAL_TIM_STATE_READY;
 80008ac:	2301      	movs	r3, #1
 80008ae:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 80008b2:	2000      	movs	r0, #0
 80008b4:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
}
 80008b8:	bd38      	pop	{r3, r4, r5, pc}
  switch (sClockSourceConfig->ClockSource)
 80008ba:	b10a      	cbz	r2, 80008c0 <_ZN5Timer21TIM_ConfigClockSourceEP17TIM_HandleTypeDefP22TIM_ClockConfigTypeDef+0x8c>
 80008bc:	2a10      	cmp	r2, #16
 80008be:	d1f5      	bne.n	80008ac <_ZN5Timer21TIM_ConfigClockSourceEP17TIM_HandleTypeDefP22TIM_ClockConfigTypeDef+0x78>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80008c0:	6821      	ldr	r1, [r4, #0]
 80008c2:	4628      	mov	r0, r5
 80008c4:	f7ff ff98 	bl	80007f8 <_ZN5Timer18TIM_ITRx_SetConfigEP11TIM_TypeDefm>
      break;
 80008c8:	e7f0      	b.n	80008ac <_ZN5Timer21TIM_ConfigClockSourceEP17TIM_HandleTypeDefP22TIM_ClockConfigTypeDef+0x78>
  switch (sClockSourceConfig->ClockSource)
 80008ca:	2a70      	cmp	r2, #112	; 0x70
 80008cc:	d1ee      	bne.n	80008ac <_ZN5Timer21TIM_ConfigClockSourceEP17TIM_HandleTypeDefP22TIM_ClockConfigTypeDef+0x78>
      TIM_ETR_SetConfig(htim->Instance,
 80008ce:	68cb      	ldr	r3, [r1, #12]
 80008d0:	684a      	ldr	r2, [r1, #4]
 80008d2:	6889      	ldr	r1, [r1, #8]
 80008d4:	6820      	ldr	r0, [r4, #0]
 80008d6:	f004 fa6f 	bl	8004db8 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80008da:	6822      	ldr	r2, [r4, #0]
 80008dc:	6893      	ldr	r3, [r2, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80008de:	f043 0377 	orr.w	r3, r3, #119	; 0x77
      htim->Instance->SMCR = tmpsmcr;
 80008e2:	6093      	str	r3, [r2, #8]
      break;
 80008e4:	e7e2      	b.n	80008ac <_ZN5Timer21TIM_ConfigClockSourceEP17TIM_HandleTypeDefP22TIM_ClockConfigTypeDef+0x78>
  switch (sClockSourceConfig->ClockSource)
 80008e6:	f5b2 1f80 	cmp.w	r2, #1048576	; 0x100000
 80008ea:	d0e9      	beq.n	80008c0 <_ZN5Timer21TIM_ConfigClockSourceEP17TIM_HandleTypeDefP22TIM_ClockConfigTypeDef+0x8c>
 80008ec:	f1b2 1f10 	cmp.w	r2, #1048592	; 0x100010
 80008f0:	d0e6      	beq.n	80008c0 <_ZN5Timer21TIM_ConfigClockSourceEP17TIM_HandleTypeDefP22TIM_ClockConfigTypeDef+0x8c>
 80008f2:	e7db      	b.n	80008ac <_ZN5Timer21TIM_ConfigClockSourceEP17TIM_HandleTypeDefP22TIM_ClockConfigTypeDef+0x78>
      TIM_ETR_SetConfig(htim->Instance,
 80008f4:	68cb      	ldr	r3, [r1, #12]
 80008f6:	684a      	ldr	r2, [r1, #4]
 80008f8:	6889      	ldr	r1, [r1, #8]
 80008fa:	6820      	ldr	r0, [r4, #0]
 80008fc:	f004 fa5c 	bl	8004db8 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8000900:	6822      	ldr	r2, [r4, #0]
 8000902:	6893      	ldr	r3, [r2, #8]
 8000904:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000908:	6093      	str	r3, [r2, #8]
      break;
 800090a:	e7cf      	b.n	80008ac <_ZN5Timer21TIM_ConfigClockSourceEP17TIM_HandleTypeDefP22TIM_ClockConfigTypeDef+0x78>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800090c:	68cb      	ldr	r3, [r1, #12]
 800090e:	684a      	ldr	r2, [r1, #4]
 8000910:	6821      	ldr	r1, [r4, #0]
 8000912:	4628      	mov	r0, r5
 8000914:	f7ff ff7a 	bl	800080c <_ZN5Timer24TIM_TI2_ConfigInputStageEP11TIM_TypeDefmm>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8000918:	2260      	movs	r2, #96	; 0x60
 800091a:	6821      	ldr	r1, [r4, #0]
 800091c:	4628      	mov	r0, r5
 800091e:	f7ff ff6b 	bl	80007f8 <_ZN5Timer18TIM_ITRx_SetConfigEP11TIM_TypeDefm>
      break;
 8000922:	e7c3      	b.n	80008ac <_ZN5Timer21TIM_ConfigClockSourceEP17TIM_HandleTypeDefP22TIM_ClockConfigTypeDef+0x78>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8000924:	68cb      	ldr	r3, [r1, #12]
 8000926:	684a      	ldr	r2, [r1, #4]
 8000928:	6821      	ldr	r1, [r4, #0]
 800092a:	4628      	mov	r0, r5
 800092c:	f7ff ff52 	bl	80007d4 <_ZN5Timer24TIM_TI1_ConfigInputStageEP11TIM_TypeDefmm>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8000930:	2240      	movs	r2, #64	; 0x40
 8000932:	6821      	ldr	r1, [r4, #0]
 8000934:	4628      	mov	r0, r5
 8000936:	f7ff ff5f 	bl	80007f8 <_ZN5Timer18TIM_ITRx_SetConfigEP11TIM_TypeDefm>
      break;
 800093a:	e7b7      	b.n	80008ac <_ZN5Timer21TIM_ConfigClockSourceEP17TIM_HandleTypeDefP22TIM_ClockConfigTypeDef+0x78>
  __HAL_LOCK(htim);
 800093c:	2002      	movs	r0, #2
 800093e:	e7bb      	b.n	80008b8 <_ZN5Timer21TIM_ConfigClockSourceEP17TIM_HandleTypeDefP22TIM_ClockConfigTypeDef+0x84>
 8000940:	ffce0088 	.word	0xffce0088
 8000944:	00100020 	.word	0x00100020
 8000948:	00100030 	.word	0x00100030

0800094c <_ZN5Timer17TIM_OC1_SetConfigEP11TIM_TypeDefP18TIM_OC_InitTypeDef>:
  __HAL_UNLOCK(htim);

  return HAL_OK;
}
void Timer::TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800094c:	b4f0      	push	{r4, r5, r6, r7}
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800094e:	6a0b      	ldr	r3, [r1, #32]
 8000950:	f023 0301 	bic.w	r3, r3, #1
 8000954:	620b      	str	r3, [r1, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8000956:	6a0b      	ldr	r3, [r1, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8000958:	684c      	ldr	r4, [r1, #4]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800095a:	698d      	ldr	r5, [r1, #24]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800095c:	481e      	ldr	r0, [pc, #120]	; (80009d8 <_ZN5Timer17TIM_OC1_SetConfigEP11TIM_TypeDefP18TIM_OC_InitTypeDef+0x8c>)
 800095e:	4028      	ands	r0, r5
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8000960:	6816      	ldr	r6, [r2, #0]
 8000962:	4306      	orrs	r6, r0

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8000964:	f023 0302 	bic.w	r3, r3, #2
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8000968:	6895      	ldr	r5, [r2, #8]
 800096a:	432b      	orrs	r3, r5

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800096c:	481b      	ldr	r0, [pc, #108]	; (80009dc <_ZN5Timer17TIM_OC1_SetConfigEP11TIM_TypeDefP18TIM_OC_InitTypeDef+0x90>)
 800096e:	4d1c      	ldr	r5, [pc, #112]	; (80009e0 <_ZN5Timer17TIM_OC1_SetConfigEP11TIM_TypeDefP18TIM_OC_InitTypeDef+0x94>)
 8000970:	42a9      	cmp	r1, r5
 8000972:	bf18      	it	ne
 8000974:	4281      	cmpne	r1, r0
 8000976:	bf0c      	ite	eq
 8000978:	2001      	moveq	r0, #1
 800097a:	2000      	movne	r0, #0
 800097c:	d00c      	beq.n	8000998 <_ZN5Timer17TIM_OC1_SetConfigEP11TIM_TypeDefP18TIM_OC_InitTypeDef+0x4c>
 800097e:	f505 4580 	add.w	r5, r5, #16384	; 0x4000
 8000982:	42a9      	cmp	r1, r5
 8000984:	bf14      	ite	ne
 8000986:	2500      	movne	r5, #0
 8000988:	2501      	moveq	r5, #1
 800098a:	4f16      	ldr	r7, [pc, #88]	; (80009e4 <_ZN5Timer17TIM_OC1_SetConfigEP11TIM_TypeDefP18TIM_OC_InitTypeDef+0x98>)
 800098c:	42b9      	cmp	r1, r7
 800098e:	d003      	beq.n	8000998 <_ZN5Timer17TIM_OC1_SetConfigEP11TIM_TypeDefP18TIM_OC_InitTypeDef+0x4c>
 8000990:	b915      	cbnz	r5, 8000998 <_ZN5Timer17TIM_OC1_SetConfigEP11TIM_TypeDefP18TIM_OC_InitTypeDef+0x4c>
 8000992:	4d15      	ldr	r5, [pc, #84]	; (80009e8 <_ZN5Timer17TIM_OC1_SetConfigEP11TIM_TypeDefP18TIM_OC_InitTypeDef+0x9c>)
 8000994:	42a9      	cmp	r1, r5
 8000996:	d105      	bne.n	80009a4 <_ZN5Timer17TIM_OC1_SetConfigEP11TIM_TypeDefP18TIM_OC_InitTypeDef+0x58>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8000998:	f023 0308 	bic.w	r3, r3, #8
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800099c:	68d5      	ldr	r5, [r2, #12]
 800099e:	432b      	orrs	r3, r5
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80009a0:	f023 0304 	bic.w	r3, r3, #4
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80009a4:	b958      	cbnz	r0, 80009be <_ZN5Timer17TIM_OC1_SetConfigEP11TIM_TypeDefP18TIM_OC_InitTypeDef+0x72>
 80009a6:	4811      	ldr	r0, [pc, #68]	; (80009ec <_ZN5Timer17TIM_OC1_SetConfigEP11TIM_TypeDefP18TIM_OC_InitTypeDef+0xa0>)
 80009a8:	4281      	cmp	r1, r0
 80009aa:	bf14      	ite	ne
 80009ac:	2000      	movne	r0, #0
 80009ae:	2001      	moveq	r0, #1
 80009b0:	4d0c      	ldr	r5, [pc, #48]	; (80009e4 <_ZN5Timer17TIM_OC1_SetConfigEP11TIM_TypeDefP18TIM_OC_InitTypeDef+0x98>)
 80009b2:	42a9      	cmp	r1, r5
 80009b4:	d003      	beq.n	80009be <_ZN5Timer17TIM_OC1_SetConfigEP11TIM_TypeDefP18TIM_OC_InitTypeDef+0x72>
 80009b6:	b910      	cbnz	r0, 80009be <_ZN5Timer17TIM_OC1_SetConfigEP11TIM_TypeDefP18TIM_OC_InitTypeDef+0x72>
 80009b8:	480b      	ldr	r0, [pc, #44]	; (80009e8 <_ZN5Timer17TIM_OC1_SetConfigEP11TIM_TypeDefP18TIM_OC_InitTypeDef+0x9c>)
 80009ba:	4281      	cmp	r1, r0
 80009bc:	d105      	bne.n	80009ca <_ZN5Timer17TIM_OC1_SetConfigEP11TIM_TypeDefP18TIM_OC_InitTypeDef+0x7e>
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80009be:	f424 7040 	bic.w	r0, r4, #768	; 0x300
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80009c2:	6954      	ldr	r4, [r2, #20]
 80009c4:	4304      	orrs	r4, r0
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80009c6:	6990      	ldr	r0, [r2, #24]
 80009c8:	4304      	orrs	r4, r0
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80009ca:	604c      	str	r4, [r1, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80009cc:	618e      	str	r6, [r1, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80009ce:	6852      	ldr	r2, [r2, #4]
 80009d0:	634a      	str	r2, [r1, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80009d2:	620b      	str	r3, [r1, #32]
}
 80009d4:	bcf0      	pop	{r4, r5, r6, r7}
 80009d6:	4770      	bx	lr
 80009d8:	fffeff8c 	.word	0xfffeff8c
 80009dc:	40010000 	.word	0x40010000
 80009e0:	40010400 	.word	0x40010400
 80009e4:	40014000 	.word	0x40014000
 80009e8:	40014800 	.word	0x40014800
 80009ec:	40014400 	.word	0x40014400

080009f0 <_ZN5Timer17TIM_OC2_SetConfigEP11TIM_TypeDefP18TIM_OC_InitTypeDef>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void Timer::TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80009f0:	b470      	push	{r4, r5, r6}
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80009f2:	6a0b      	ldr	r3, [r1, #32]
 80009f4:	f023 0310 	bic.w	r3, r3, #16
 80009f8:	620b      	str	r3, [r1, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80009fa:	6a0b      	ldr	r3, [r1, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80009fc:	684c      	ldr	r4, [r1, #4]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80009fe:	698d      	ldr	r5, [r1, #24]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8000a00:	481a      	ldr	r0, [pc, #104]	; (8000a6c <_ZN5Timer17TIM_OC2_SetConfigEP11TIM_TypeDefP18TIM_OC_InitTypeDef+0x7c>)
 8000a02:	4028      	ands	r0, r5

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8000a04:	6816      	ldr	r6, [r2, #0]
 8000a06:	ea40 2606 	orr.w	r6, r0, r6, lsl #8

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8000a0a:	f023 0320 	bic.w	r3, r3, #32
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8000a0e:	6890      	ldr	r0, [r2, #8]
 8000a10:	ea43 1300 	orr.w	r3, r3, r0, lsl #4

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8000a14:	4816      	ldr	r0, [pc, #88]	; (8000a70 <_ZN5Timer17TIM_OC2_SetConfigEP11TIM_TypeDefP18TIM_OC_InitTypeDef+0x80>)
 8000a16:	4d17      	ldr	r5, [pc, #92]	; (8000a74 <_ZN5Timer17TIM_OC2_SetConfigEP11TIM_TypeDefP18TIM_OC_InitTypeDef+0x84>)
 8000a18:	42a9      	cmp	r1, r5
 8000a1a:	bf18      	it	ne
 8000a1c:	4281      	cmpne	r1, r0
 8000a1e:	bf0c      	ite	eq
 8000a20:	2001      	moveq	r0, #1
 8000a22:	2000      	movne	r0, #0
 8000a24:	d106      	bne.n	8000a34 <_ZN5Timer17TIM_OC2_SetConfigEP11TIM_TypeDefP18TIM_OC_InitTypeDef+0x44>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8000a26:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8000a2a:	68d5      	ldr	r5, [r2, #12]
 8000a2c:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8000a30:	f023 0340 	bic.w	r3, r3, #64	; 0x40

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8000a34:	b958      	cbnz	r0, 8000a4e <_ZN5Timer17TIM_OC2_SetConfigEP11TIM_TypeDefP18TIM_OC_InitTypeDef+0x5e>
 8000a36:	4810      	ldr	r0, [pc, #64]	; (8000a78 <_ZN5Timer17TIM_OC2_SetConfigEP11TIM_TypeDefP18TIM_OC_InitTypeDef+0x88>)
 8000a38:	4281      	cmp	r1, r0
 8000a3a:	bf14      	ite	ne
 8000a3c:	2000      	movne	r0, #0
 8000a3e:	2001      	moveq	r0, #1
 8000a40:	4d0e      	ldr	r5, [pc, #56]	; (8000a7c <_ZN5Timer17TIM_OC2_SetConfigEP11TIM_TypeDefP18TIM_OC_InitTypeDef+0x8c>)
 8000a42:	42a9      	cmp	r1, r5
 8000a44:	d003      	beq.n	8000a4e <_ZN5Timer17TIM_OC2_SetConfigEP11TIM_TypeDefP18TIM_OC_InitTypeDef+0x5e>
 8000a46:	b910      	cbnz	r0, 8000a4e <_ZN5Timer17TIM_OC2_SetConfigEP11TIM_TypeDefP18TIM_OC_InitTypeDef+0x5e>
 8000a48:	480d      	ldr	r0, [pc, #52]	; (8000a80 <_ZN5Timer17TIM_OC2_SetConfigEP11TIM_TypeDefP18TIM_OC_InitTypeDef+0x90>)
 8000a4a:	4281      	cmp	r1, r0
 8000a4c:	d107      	bne.n	8000a5e <_ZN5Timer17TIM_OC2_SetConfigEP11TIM_TypeDefP18TIM_OC_InitTypeDef+0x6e>
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8000a4e:	f424 6440 	bic.w	r4, r4, #3072	; 0xc00
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8000a52:	6950      	ldr	r0, [r2, #20]
 8000a54:	ea44 0480 	orr.w	r4, r4, r0, lsl #2
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8000a58:	6990      	ldr	r0, [r2, #24]
 8000a5a:	ea44 0480 	orr.w	r4, r4, r0, lsl #2
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8000a5e:	604c      	str	r4, [r1, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8000a60:	618e      	str	r6, [r1, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8000a62:	6852      	ldr	r2, [r2, #4]
 8000a64:	638a      	str	r2, [r1, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8000a66:	620b      	str	r3, [r1, #32]
}
 8000a68:	bc70      	pop	{r4, r5, r6}
 8000a6a:	4770      	bx	lr
 8000a6c:	feff8cff 	.word	0xfeff8cff
 8000a70:	40010000 	.word	0x40010000
 8000a74:	40010400 	.word	0x40010400
 8000a78:	40014400 	.word	0x40014400
 8000a7c:	40014000 	.word	0x40014000
 8000a80:	40014800 	.word	0x40014800

08000a84 <_ZN5Timer17TIM_OC3_SetConfigEP11TIM_TypeDefP18TIM_OC_InitTypeDef>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void Timer::TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8000a84:	b470      	push	{r4, r5, r6}
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8000a86:	6a0b      	ldr	r3, [r1, #32]
 8000a88:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8000a8c:	620b      	str	r3, [r1, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8000a8e:	6a0b      	ldr	r3, [r1, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8000a90:	684c      	ldr	r4, [r1, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8000a92:	69c8      	ldr	r0, [r1, #28]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8000a94:	f020 0073 	bic.w	r0, r0, #115	; 0x73
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8000a98:	6816      	ldr	r6, [r2, #0]
 8000a9a:	4306      	orrs	r6, r0

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8000a9c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8000aa0:	6890      	ldr	r0, [r2, #8]
 8000aa2:	ea43 2300 	orr.w	r3, r3, r0, lsl #8

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8000aa6:	4816      	ldr	r0, [pc, #88]	; (8000b00 <_ZN5Timer17TIM_OC3_SetConfigEP11TIM_TypeDefP18TIM_OC_InitTypeDef+0x7c>)
 8000aa8:	4d16      	ldr	r5, [pc, #88]	; (8000b04 <_ZN5Timer17TIM_OC3_SetConfigEP11TIM_TypeDefP18TIM_OC_InitTypeDef+0x80>)
 8000aaa:	42a9      	cmp	r1, r5
 8000aac:	bf18      	it	ne
 8000aae:	4281      	cmpne	r1, r0
 8000ab0:	bf0c      	ite	eq
 8000ab2:	2001      	moveq	r0, #1
 8000ab4:	2000      	movne	r0, #0
 8000ab6:	d106      	bne.n	8000ac6 <_ZN5Timer17TIM_OC3_SetConfigEP11TIM_TypeDefP18TIM_OC_InitTypeDef+0x42>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8000ab8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8000abc:	68d5      	ldr	r5, [r2, #12]
 8000abe:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8000ac2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8000ac6:	b958      	cbnz	r0, 8000ae0 <_ZN5Timer17TIM_OC3_SetConfigEP11TIM_TypeDefP18TIM_OC_InitTypeDef+0x5c>
 8000ac8:	480f      	ldr	r0, [pc, #60]	; (8000b08 <_ZN5Timer17TIM_OC3_SetConfigEP11TIM_TypeDefP18TIM_OC_InitTypeDef+0x84>)
 8000aca:	4281      	cmp	r1, r0
 8000acc:	bf14      	ite	ne
 8000ace:	2000      	movne	r0, #0
 8000ad0:	2001      	moveq	r0, #1
 8000ad2:	4d0e      	ldr	r5, [pc, #56]	; (8000b0c <_ZN5Timer17TIM_OC3_SetConfigEP11TIM_TypeDefP18TIM_OC_InitTypeDef+0x88>)
 8000ad4:	42a9      	cmp	r1, r5
 8000ad6:	d003      	beq.n	8000ae0 <_ZN5Timer17TIM_OC3_SetConfigEP11TIM_TypeDefP18TIM_OC_InitTypeDef+0x5c>
 8000ad8:	b910      	cbnz	r0, 8000ae0 <_ZN5Timer17TIM_OC3_SetConfigEP11TIM_TypeDefP18TIM_OC_InitTypeDef+0x5c>
 8000ada:	480d      	ldr	r0, [pc, #52]	; (8000b10 <_ZN5Timer17TIM_OC3_SetConfigEP11TIM_TypeDefP18TIM_OC_InitTypeDef+0x8c>)
 8000adc:	4281      	cmp	r1, r0
 8000ade:	d107      	bne.n	8000af0 <_ZN5Timer17TIM_OC3_SetConfigEP11TIM_TypeDefP18TIM_OC_InitTypeDef+0x6c>
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8000ae0:	f424 5440 	bic.w	r4, r4, #12288	; 0x3000
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8000ae4:	6950      	ldr	r0, [r2, #20]
 8000ae6:	ea44 1400 	orr.w	r4, r4, r0, lsl #4
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8000aea:	6990      	ldr	r0, [r2, #24]
 8000aec:	ea44 1400 	orr.w	r4, r4, r0, lsl #4
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8000af0:	604c      	str	r4, [r1, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8000af2:	61ce      	str	r6, [r1, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8000af4:	6852      	ldr	r2, [r2, #4]
 8000af6:	63ca      	str	r2, [r1, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8000af8:	620b      	str	r3, [r1, #32]
}
 8000afa:	bc70      	pop	{r4, r5, r6}
 8000afc:	4770      	bx	lr
 8000afe:	bf00      	nop
 8000b00:	40010000 	.word	0x40010000
 8000b04:	40010400 	.word	0x40010400
 8000b08:	40014400 	.word	0x40014400
 8000b0c:	40014000 	.word	0x40014000
 8000b10:	40014800 	.word	0x40014800

08000b14 <_ZN5Timer17TIM_OC4_SetConfigEP11TIM_TypeDefP18TIM_OC_InitTypeDef>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void Timer::TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8000b14:	b470      	push	{r4, r5, r6}
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8000b16:	6a0b      	ldr	r3, [r1, #32]
 8000b18:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8000b1c:	620b      	str	r3, [r1, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8000b1e:	6a0b      	ldr	r3, [r1, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8000b20:	684c      	ldr	r4, [r1, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8000b22:	69c8      	ldr	r0, [r1, #28]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8000b24:	f420 40e6 	bic.w	r0, r0, #29440	; 0x7300

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8000b28:	6815      	ldr	r5, [r2, #0]
 8000b2a:	ea40 2005 	orr.w	r0, r0, r5, lsl #8

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8000b2e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8000b32:	6895      	ldr	r5, [r2, #8]
 8000b34:	ea43 3305 	orr.w	r3, r3, r5, lsl #12

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8000b38:	4e0f      	ldr	r6, [pc, #60]	; (8000b78 <_ZN5Timer17TIM_OC4_SetConfigEP11TIM_TypeDefP18TIM_OC_InitTypeDef+0x64>)
 8000b3a:	4d10      	ldr	r5, [pc, #64]	; (8000b7c <_ZN5Timer17TIM_OC4_SetConfigEP11TIM_TypeDefP18TIM_OC_InitTypeDef+0x68>)
 8000b3c:	42a9      	cmp	r1, r5
 8000b3e:	bf18      	it	ne
 8000b40:	42b1      	cmpne	r1, r6
 8000b42:	d00d      	beq.n	8000b60 <_ZN5Timer17TIM_OC4_SetConfigEP11TIM_TypeDefP18TIM_OC_InitTypeDef+0x4c>
 8000b44:	f505 4580 	add.w	r5, r5, #16384	; 0x4000
 8000b48:	42a9      	cmp	r1, r5
 8000b4a:	bf14      	ite	ne
 8000b4c:	2500      	movne	r5, #0
 8000b4e:	2501      	moveq	r5, #1
 8000b50:	f506 4680 	add.w	r6, r6, #16384	; 0x4000
 8000b54:	42b1      	cmp	r1, r6
 8000b56:	d003      	beq.n	8000b60 <_ZN5Timer17TIM_OC4_SetConfigEP11TIM_TypeDefP18TIM_OC_InitTypeDef+0x4c>
 8000b58:	b915      	cbnz	r5, 8000b60 <_ZN5Timer17TIM_OC4_SetConfigEP11TIM_TypeDefP18TIM_OC_InitTypeDef+0x4c>
 8000b5a:	4d09      	ldr	r5, [pc, #36]	; (8000b80 <_ZN5Timer17TIM_OC4_SetConfigEP11TIM_TypeDefP18TIM_OC_InitTypeDef+0x6c>)
 8000b5c:	42a9      	cmp	r1, r5
 8000b5e:	d104      	bne.n	8000b6a <_ZN5Timer17TIM_OC4_SetConfigEP11TIM_TypeDefP18TIM_OC_InitTypeDef+0x56>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8000b60:	f424 4480 	bic.w	r4, r4, #16384	; 0x4000

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8000b64:	6955      	ldr	r5, [r2, #20]
 8000b66:	ea44 1485 	orr.w	r4, r4, r5, lsl #6
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8000b6a:	604c      	str	r4, [r1, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8000b6c:	61c8      	str	r0, [r1, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8000b6e:	6852      	ldr	r2, [r2, #4]
 8000b70:	640a      	str	r2, [r1, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8000b72:	620b      	str	r3, [r1, #32]
}
 8000b74:	bc70      	pop	{r4, r5, r6}
 8000b76:	4770      	bx	lr
 8000b78:	40010000 	.word	0x40010000
 8000b7c:	40010400 	.word	0x40010400
 8000b80:	40014800 	.word	0x40014800

08000b84 <_ZN5Timer17TIM_OC5_SetConfigEP11TIM_TypeDefP18TIM_OC_InitTypeDef>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void Timer::TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8000b84:	b470      	push	{r4, r5, r6}
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8000b86:	6a0b      	ldr	r3, [r1, #32]
 8000b88:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000b8c:	620b      	str	r3, [r1, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8000b8e:	6a0b      	ldr	r3, [r1, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8000b90:	6848      	ldr	r0, [r1, #4]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8000b92:	6d4c      	ldr	r4, [r1, #84]	; 0x54

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8000b94:	f024 0470 	bic.w	r4, r4, #112	; 0x70
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8000b98:	6815      	ldr	r5, [r2, #0]
 8000b9a:	432c      	orrs	r4, r5

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8000b9c:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8000ba0:	6895      	ldr	r5, [r2, #8]
 8000ba2:	ea43 4305 	orr.w	r3, r3, r5, lsl #16

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8000ba6:	4e10      	ldr	r6, [pc, #64]	; (8000be8 <_ZN5Timer17TIM_OC5_SetConfigEP11TIM_TypeDefP18TIM_OC_InitTypeDef+0x64>)
 8000ba8:	4d10      	ldr	r5, [pc, #64]	; (8000bec <_ZN5Timer17TIM_OC5_SetConfigEP11TIM_TypeDefP18TIM_OC_InitTypeDef+0x68>)
 8000baa:	42a9      	cmp	r1, r5
 8000bac:	bf18      	it	ne
 8000bae:	42b1      	cmpne	r1, r6
 8000bb0:	d00d      	beq.n	8000bce <_ZN5Timer17TIM_OC5_SetConfigEP11TIM_TypeDefP18TIM_OC_InitTypeDef+0x4a>
 8000bb2:	f505 4580 	add.w	r5, r5, #16384	; 0x4000
 8000bb6:	42a9      	cmp	r1, r5
 8000bb8:	bf14      	ite	ne
 8000bba:	2500      	movne	r5, #0
 8000bbc:	2501      	moveq	r5, #1
 8000bbe:	f506 4680 	add.w	r6, r6, #16384	; 0x4000
 8000bc2:	42b1      	cmp	r1, r6
 8000bc4:	d003      	beq.n	8000bce <_ZN5Timer17TIM_OC5_SetConfigEP11TIM_TypeDefP18TIM_OC_InitTypeDef+0x4a>
 8000bc6:	b915      	cbnz	r5, 8000bce <_ZN5Timer17TIM_OC5_SetConfigEP11TIM_TypeDefP18TIM_OC_InitTypeDef+0x4a>
 8000bc8:	4d09      	ldr	r5, [pc, #36]	; (8000bf0 <_ZN5Timer17TIM_OC5_SetConfigEP11TIM_TypeDefP18TIM_OC_InitTypeDef+0x6c>)
 8000bca:	42a9      	cmp	r1, r5
 8000bcc:	d104      	bne.n	8000bd8 <_ZN5Timer17TIM_OC5_SetConfigEP11TIM_TypeDefP18TIM_OC_InitTypeDef+0x54>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8000bce:	f420 3080 	bic.w	r0, r0, #65536	; 0x10000
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8000bd2:	6955      	ldr	r5, [r2, #20]
 8000bd4:	ea40 2005 	orr.w	r0, r0, r5, lsl #8
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8000bd8:	6048      	str	r0, [r1, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8000bda:	654c      	str	r4, [r1, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8000bdc:	6852      	ldr	r2, [r2, #4]
 8000bde:	658a      	str	r2, [r1, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8000be0:	620b      	str	r3, [r1, #32]
}
 8000be2:	bc70      	pop	{r4, r5, r6}
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop
 8000be8:	40010000 	.word	0x40010000
 8000bec:	40010400 	.word	0x40010400
 8000bf0:	40014800 	.word	0x40014800

08000bf4 <_ZN5Timer17TIM_OC6_SetConfigEP11TIM_TypeDefP18TIM_OC_InitTypeDef>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void Timer::TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8000bf4:	b470      	push	{r4, r5, r6}
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8000bf6:	6a0b      	ldr	r3, [r1, #32]
 8000bf8:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8000bfc:	620b      	str	r3, [r1, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8000bfe:	6a0b      	ldr	r3, [r1, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8000c00:	684c      	ldr	r4, [r1, #4]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8000c02:	6d48      	ldr	r0, [r1, #84]	; 0x54

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8000c04:	f420 40e0 	bic.w	r0, r0, #28672	; 0x7000
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8000c08:	6815      	ldr	r5, [r2, #0]
 8000c0a:	ea40 2005 	orr.w	r0, r0, r5, lsl #8

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8000c0e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8000c12:	6895      	ldr	r5, [r2, #8]
 8000c14:	ea43 5305 	orr.w	r3, r3, r5, lsl #20

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8000c18:	4e0f      	ldr	r6, [pc, #60]	; (8000c58 <_ZN5Timer17TIM_OC6_SetConfigEP11TIM_TypeDefP18TIM_OC_InitTypeDef+0x64>)
 8000c1a:	4d10      	ldr	r5, [pc, #64]	; (8000c5c <_ZN5Timer17TIM_OC6_SetConfigEP11TIM_TypeDefP18TIM_OC_InitTypeDef+0x68>)
 8000c1c:	42a9      	cmp	r1, r5
 8000c1e:	bf18      	it	ne
 8000c20:	42b1      	cmpne	r1, r6
 8000c22:	d00d      	beq.n	8000c40 <_ZN5Timer17TIM_OC6_SetConfigEP11TIM_TypeDefP18TIM_OC_InitTypeDef+0x4c>
 8000c24:	f505 4580 	add.w	r5, r5, #16384	; 0x4000
 8000c28:	42a9      	cmp	r1, r5
 8000c2a:	bf14      	ite	ne
 8000c2c:	2500      	movne	r5, #0
 8000c2e:	2501      	moveq	r5, #1
 8000c30:	f506 4680 	add.w	r6, r6, #16384	; 0x4000
 8000c34:	42b1      	cmp	r1, r6
 8000c36:	d003      	beq.n	8000c40 <_ZN5Timer17TIM_OC6_SetConfigEP11TIM_TypeDefP18TIM_OC_InitTypeDef+0x4c>
 8000c38:	b915      	cbnz	r5, 8000c40 <_ZN5Timer17TIM_OC6_SetConfigEP11TIM_TypeDefP18TIM_OC_InitTypeDef+0x4c>
 8000c3a:	4d09      	ldr	r5, [pc, #36]	; (8000c60 <_ZN5Timer17TIM_OC6_SetConfigEP11TIM_TypeDefP18TIM_OC_InitTypeDef+0x6c>)
 8000c3c:	42a9      	cmp	r1, r5
 8000c3e:	d104      	bne.n	8000c4a <_ZN5Timer17TIM_OC6_SetConfigEP11TIM_TypeDefP18TIM_OC_InitTypeDef+0x56>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8000c40:	f424 3400 	bic.w	r4, r4, #131072	; 0x20000
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8000c44:	6955      	ldr	r5, [r2, #20]
 8000c46:	ea44 2485 	orr.w	r4, r4, r5, lsl #10
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8000c4a:	604c      	str	r4, [r1, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8000c4c:	6548      	str	r0, [r1, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8000c4e:	6852      	ldr	r2, [r2, #4]
 8000c50:	65ca      	str	r2, [r1, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8000c52:	620b      	str	r3, [r1, #32]
}
 8000c54:	bc70      	pop	{r4, r5, r6}
 8000c56:	4770      	bx	lr
 8000c58:	40010000 	.word	0x40010000
 8000c5c:	40010400 	.word	0x40010400
 8000c60:	40014800 	.word	0x40014800

08000c64 <_ZN5Timer20TIM_OC_ConfigChannelEP17TIM_HandleTypeDefP18TIM_OC_InitTypeDefm>:
{
 8000c64:	b510      	push	{r4, lr}
 8000c66:	460c      	mov	r4, r1
  __HAL_LOCK(htim);
 8000c68:	f891 103c 	ldrb.w	r1, [r1, #60]	; 0x3c
 8000c6c:	2901      	cmp	r1, #1
 8000c6e:	d02c      	beq.n	8000cca <_ZN5Timer20TIM_OC_ConfigChannelEP17TIM_HandleTypeDefP18TIM_OC_InitTypeDefm+0x66>
 8000c70:	2101      	movs	r1, #1
 8000c72:	f884 103c 	strb.w	r1, [r4, #60]	; 0x3c
  switch (Channel)
 8000c76:	2b14      	cmp	r3, #20
 8000c78:	d80f      	bhi.n	8000c9a <_ZN5Timer20TIM_OC_ConfigChannelEP17TIM_HandleTypeDefP18TIM_OC_InitTypeDefm+0x36>
 8000c7a:	e8df f003 	tbb	[pc, r3]
 8000c7e:	0e0b      	.short	0x0e0b
 8000c80:	0e120e0e 	.word	0x0e120e0e
 8000c84:	0e160e0e 	.word	0x0e160e0e
 8000c88:	0e1a0e0e 	.word	0x0e1a0e0e
 8000c8c:	0e1e0e0e 	.word	0x0e1e0e0e
 8000c90:	0e0e      	.short	0x0e0e
 8000c92:	22          	.byte	0x22
 8000c93:	00          	.byte	0x00
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8000c94:	6821      	ldr	r1, [r4, #0]
 8000c96:	f7ff fe59 	bl	800094c <_ZN5Timer17TIM_OC1_SetConfigEP11TIM_TypeDefP18TIM_OC_InitTypeDef>
  __HAL_UNLOCK(htim);
 8000c9a:	2000      	movs	r0, #0
 8000c9c:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
}
 8000ca0:	bd10      	pop	{r4, pc}
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8000ca2:	6821      	ldr	r1, [r4, #0]
 8000ca4:	f7ff fea4 	bl	80009f0 <_ZN5Timer17TIM_OC2_SetConfigEP11TIM_TypeDefP18TIM_OC_InitTypeDef>
      break;
 8000ca8:	e7f7      	b.n	8000c9a <_ZN5Timer20TIM_OC_ConfigChannelEP17TIM_HandleTypeDefP18TIM_OC_InitTypeDefm+0x36>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8000caa:	6821      	ldr	r1, [r4, #0]
 8000cac:	f7ff feea 	bl	8000a84 <_ZN5Timer17TIM_OC3_SetConfigEP11TIM_TypeDefP18TIM_OC_InitTypeDef>
      break;
 8000cb0:	e7f3      	b.n	8000c9a <_ZN5Timer20TIM_OC_ConfigChannelEP17TIM_HandleTypeDefP18TIM_OC_InitTypeDefm+0x36>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8000cb2:	6821      	ldr	r1, [r4, #0]
 8000cb4:	f7ff ff2e 	bl	8000b14 <_ZN5Timer17TIM_OC4_SetConfigEP11TIM_TypeDefP18TIM_OC_InitTypeDef>
      break;
 8000cb8:	e7ef      	b.n	8000c9a <_ZN5Timer20TIM_OC_ConfigChannelEP17TIM_HandleTypeDefP18TIM_OC_InitTypeDefm+0x36>
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8000cba:	6821      	ldr	r1, [r4, #0]
 8000cbc:	f7ff ff62 	bl	8000b84 <_ZN5Timer17TIM_OC5_SetConfigEP11TIM_TypeDefP18TIM_OC_InitTypeDef>
      break;
 8000cc0:	e7eb      	b.n	8000c9a <_ZN5Timer20TIM_OC_ConfigChannelEP17TIM_HandleTypeDefP18TIM_OC_InitTypeDefm+0x36>
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8000cc2:	6821      	ldr	r1, [r4, #0]
 8000cc4:	f7ff ff96 	bl	8000bf4 <_ZN5Timer17TIM_OC6_SetConfigEP11TIM_TypeDefP18TIM_OC_InitTypeDef>
      break;
 8000cc8:	e7e7      	b.n	8000c9a <_ZN5Timer20TIM_OC_ConfigChannelEP17TIM_HandleTypeDefP18TIM_OC_InitTypeDefm+0x36>
  __HAL_LOCK(htim);
 8000cca:	2002      	movs	r0, #2
 8000ccc:	e7e8      	b.n	8000ca0 <_ZN5Timer20TIM_OC_ConfigChannelEP17TIM_HandleTypeDefP18TIM_OC_InitTypeDefm+0x3c>

08000cce <_ZN5Timer9TimerInitEP17TIM_HandleTypeDef9timerinit>:
{
 8000cce:	b082      	sub	sp, #8
 8000cd0:	b538      	push	{r3, r4, r5, lr}
 8000cd2:	4604      	mov	r4, r0
 8000cd4:	460d      	mov	r5, r1
 8000cd6:	f10d 0c10 	add.w	ip, sp, #16
 8000cda:	e88c 000c 	stmia.w	ip, {r2, r3}
	Handle ->Instance = structinit.Instance;
 8000cde:	600a      	str	r2, [r1, #0]
	Handle ->Init.Prescaler = structinit.Prescaler;
 8000ce0:	9b05      	ldr	r3, [sp, #20]
 8000ce2:	604b      	str	r3, [r1, #4]
	Handle ->Init.CounterMode = structinit.CounterMode;
 8000ce4:	9b06      	ldr	r3, [sp, #24]
 8000ce6:	608b      	str	r3, [r1, #8]
	Handle ->Init.Period = structinit.Period;
 8000ce8:	9b07      	ldr	r3, [sp, #28]
 8000cea:	60cb      	str	r3, [r1, #12]
	Handle ->Init.ClockDivision = structinit.ClockDivision;
 8000cec:	9b08      	ldr	r3, [sp, #32]
 8000cee:	610b      	str	r3, [r1, #16]
	Handle ->Init.AutoReloadPreload = structinit.AutoReloadPreload;
 8000cf0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8000cf2:	618b      	str	r3, [r1, #24]
	this->TIM_Base_Init(Handle);
 8000cf4:	f7ff fcc0 	bl	8000678 <_ZN5Timer13TIM_Base_InitEP17TIM_HandleTypeDef>
	if (TIM_Base_Init(Handle) != HAL_OK)
 8000cf8:	4629      	mov	r1, r5
 8000cfa:	4620      	mov	r0, r4
 8000cfc:	f7ff fcbc 	bl	8000678 <_ZN5Timer13TIM_Base_InitEP17TIM_HandleTypeDef>
 8000d00:	bb58      	cbnz	r0, 8000d5a <_ZN5Timer9TimerInitEP17TIM_HandleTypeDef9timerinit+0x8c>
	this->sClockSourceConfig.ClockSource = structinit.ClockSource;
 8000d02:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8000d04:	6023      	str	r3, [r4, #0]
	if (this->TIM_ConfigClockSource(Handle, &this->sClockSourceConfig) != HAL_OK)
 8000d06:	4622      	mov	r2, r4
 8000d08:	4629      	mov	r1, r5
 8000d0a:	4620      	mov	r0, r4
 8000d0c:	f7ff fd92 	bl	8000834 <_ZN5Timer21TIM_ConfigClockSourceEP17TIM_HandleTypeDefP22TIM_ClockConfigTypeDef>
 8000d10:	bb30      	cbnz	r0, 8000d60 <_ZN5Timer9TimerInitEP17TIM_HandleTypeDef9timerinit+0x92>
	 if (this->TIM_OC_Init(Handle) != HAL_OK)
 8000d12:	4629      	mov	r1, r5
 8000d14:	4620      	mov	r0, r4
 8000d16:	f7ff fce0 	bl	80006da <_ZN5Timer11TIM_OC_InitEP17TIM_HandleTypeDef>
 8000d1a:	bb20      	cbnz	r0, 8000d66 <_ZN5Timer9TimerInitEP17TIM_HandleTypeDef9timerinit+0x98>
	this-> sMasterConfig.MasterOutputTrigger = structinit.MasterOutputTrigger;
 8000d1c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8000d1e:	6123      	str	r3, [r4, #16]
	this-> sMasterConfig.MasterSlaveMode = structinit.MasterSlaveMode;
 8000d20:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8000d22:	61a3      	str	r3, [r4, #24]
	 if (this->TIMEx_MasterConfigSynchronization(Handle, &this->sMasterConfig) != HAL_OK)
 8000d24:	f104 0210 	add.w	r2, r4, #16
 8000d28:	4629      	mov	r1, r5
 8000d2a:	4620      	mov	r0, r4
 8000d2c:	f7ff fd06 	bl	800073c <_ZN5Timer33TIMEx_MasterConfigSynchronizationEP17TIM_HandleTypeDefP23TIM_MasterConfigTypeDef>
 8000d30:	b9e0      	cbnz	r0, 8000d6c <_ZN5Timer9TimerInitEP17TIM_HandleTypeDef9timerinit+0x9e>
	 this->sConfigOC.OCMode = structinit.OCMode;
 8000d32:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8000d34:	61e3      	str	r3, [r4, #28]
	 this->sConfigOC.Pulse = structinit.Pulse;
 8000d36:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8000d38:	6223      	str	r3, [r4, #32]
	 this->sConfigOC.OCPolarity = structinit.OCPolarity;
 8000d3a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8000d3c:	6263      	str	r3, [r4, #36]	; 0x24
	 this->sConfigOC.OCFastMode = structinit.OCFastMode;
 8000d3e:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8000d40:	62e3      	str	r3, [r4, #44]	; 0x2c
	  if (this->TIM_OC_ConfigChannel(Handle, &this->sConfigOC, structinit.TIM_CHANNEL) != HAL_OK)
 8000d42:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8000d44:	f104 021c 	add.w	r2, r4, #28
 8000d48:	4629      	mov	r1, r5
 8000d4a:	4620      	mov	r0, r4
 8000d4c:	f7ff ff8a 	bl	8000c64 <_ZN5Timer20TIM_OC_ConfigChannelEP17TIM_HandleTypeDefP18TIM_OC_InitTypeDefm>
 8000d50:	b978      	cbnz	r0, 8000d72 <_ZN5Timer9TimerInitEP17TIM_HandleTypeDef9timerinit+0xa4>
}
 8000d52:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000d56:	b002      	add	sp, #8
 8000d58:	4770      	bx	lr
	    Error_Handler();
 8000d5a:	f007 f947 	bl	8007fec <Error_Handler>
 8000d5e:	e7d0      	b.n	8000d02 <_ZN5Timer9TimerInitEP17TIM_HandleTypeDef9timerinit+0x34>
	    Error_Handler();
 8000d60:	f007 f944 	bl	8007fec <Error_Handler>
 8000d64:	e7d5      	b.n	8000d12 <_ZN5Timer9TimerInitEP17TIM_HandleTypeDef9timerinit+0x44>
	    Error_Handler();
 8000d66:	f007 f941 	bl	8007fec <Error_Handler>
 8000d6a:	e7d7      	b.n	8000d1c <_ZN5Timer9TimerInitEP17TIM_HandleTypeDef9timerinit+0x4e>
	    Error_Handler();
 8000d6c:	f007 f93e 	bl	8007fec <Error_Handler>
 8000d70:	e7df      	b.n	8000d32 <_ZN5Timer9TimerInitEP17TIM_HandleTypeDef9timerinit+0x64>
	    Error_Handler();
 8000d72:	f007 f93b 	bl	8007fec <Error_Handler>
}
 8000d76:	e7ec      	b.n	8000d52 <_ZN5Timer9TimerInitEP17TIM_HandleTypeDef9timerinit+0x84>

08000d78 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000d78:	b510      	push	{r4, lr}
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000d7a:	2003      	movs	r0, #3
 8000d7c:	f000 f856 	bl	8000e2c <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8000d80:	f002 f994 	bl	80030ac <HAL_RCC_GetSysClockFreq>
 8000d84:	490f      	ldr	r1, [pc, #60]	; (8000dc4 <HAL_Init+0x4c>)
 8000d86:	698b      	ldr	r3, [r1, #24]
 8000d88:	f3c3 2303 	ubfx	r3, r3, #8, #4
 8000d8c:	4a0e      	ldr	r2, [pc, #56]	; (8000dc8 <HAL_Init+0x50>)
 8000d8e:	5cd3      	ldrb	r3, [r2, r3]
 8000d90:	f003 031f 	and.w	r3, r3, #31
 8000d94:	40d8      	lsrs	r0, r3
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8000d96:	698b      	ldr	r3, [r1, #24]
 8000d98:	f003 030f 	and.w	r3, r3, #15
 8000d9c:	5cd3      	ldrb	r3, [r2, r3]
 8000d9e:	f003 031f 	and.w	r3, r3, #31
 8000da2:	fa20 f303 	lsr.w	r3, r0, r3
 8000da6:	4a09      	ldr	r2, [pc, #36]	; (8000dcc <HAL_Init+0x54>)
 8000da8:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8000daa:	4b09      	ldr	r3, [pc, #36]	; (8000dd0 <HAL_Init+0x58>)
 8000dac:	6018      	str	r0, [r3, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000dae:	2000      	movs	r0, #0
 8000db0:	f007 f82e 	bl	8007e10 <HAL_InitTick>
 8000db4:	b110      	cbz	r0, 8000dbc <HAL_Init+0x44>
  {
    return HAL_ERROR;
 8000db6:	2401      	movs	r4, #1
  /* Init the low level hardware */
  HAL_MspInit();

  /* Return function status */
  return HAL_OK;
}
 8000db8:	4620      	mov	r0, r4
 8000dba:	bd10      	pop	{r4, pc}
 8000dbc:	4604      	mov	r4, r0
  HAL_MspInit();
 8000dbe:	f006 fea9 	bl	8007b14 <HAL_MspInit>
  return HAL_OK;
 8000dc2:	e7f9      	b.n	8000db8 <HAL_Init+0x40>
 8000dc4:	58024400 	.word	0x58024400
 8000dc8:	080095c0 	.word	0x080095c0
 8000dcc:	2000011c 	.word	0x2000011c
 8000dd0:	20000118 	.word	0x20000118

08000dd4 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += (uint32_t)uwTickFreq;
 8000dd4:	4b03      	ldr	r3, [pc, #12]	; (8000de4 <HAL_IncTick+0x10>)
 8000dd6:	781b      	ldrb	r3, [r3, #0]
 8000dd8:	4a03      	ldr	r2, [pc, #12]	; (8000de8 <HAL_IncTick+0x14>)
 8000dda:	6811      	ldr	r1, [r2, #0]
 8000ddc:	440b      	add	r3, r1
 8000dde:	6013      	str	r3, [r2, #0]
}
 8000de0:	4770      	bx	lr
 8000de2:	bf00      	nop
 8000de4:	20000000 	.word	0x20000000
 8000de8:	2000060c 	.word	0x2000060c

08000dec <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8000dec:	4b01      	ldr	r3, [pc, #4]	; (8000df4 <HAL_GetTick+0x8>)
 8000dee:	6818      	ldr	r0, [r3, #0]
}
 8000df0:	4770      	bx	lr
 8000df2:	bf00      	nop
 8000df4:	2000060c 	.word	0x2000060c

08000df8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000df8:	b538      	push	{r3, r4, r5, lr}
 8000dfa:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8000dfc:	f7ff fff6 	bl	8000dec <HAL_GetTick>
 8000e00:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000e02:	f1b4 3fff 	cmp.w	r4, #4294967295
 8000e06:	d002      	beq.n	8000e0e <HAL_Delay+0x16>
  {
    wait += (uint32_t)(uwTickFreq);
 8000e08:	4b04      	ldr	r3, [pc, #16]	; (8000e1c <HAL_Delay+0x24>)
 8000e0a:	781b      	ldrb	r3, [r3, #0]
 8000e0c:	441c      	add	r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000e0e:	f7ff ffed 	bl	8000dec <HAL_GetTick>
 8000e12:	1b40      	subs	r0, r0, r5
 8000e14:	42a0      	cmp	r0, r4
 8000e16:	d3fa      	bcc.n	8000e0e <HAL_Delay+0x16>
  {
  }
}
 8000e18:	bd38      	pop	{r3, r4, r5, pc}
 8000e1a:	bf00      	nop
 8000e1c:	20000000 	.word	0x20000000

08000e20 <HAL_GetREVID>:
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
   return((DBGMCU->IDCODE) >> 16);
 8000e20:	4b01      	ldr	r3, [pc, #4]	; (8000e28 <HAL_GetREVID+0x8>)
 8000e22:	6818      	ldr	r0, [r3, #0]
}
 8000e24:	0c00      	lsrs	r0, r0, #16
 8000e26:	4770      	bx	lr
 8000e28:	5c001000 	.word	0x5c001000

08000e2c <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000e2c:	4906      	ldr	r1, [pc, #24]	; (8000e48 <HAL_NVIC_SetPriorityGrouping+0x1c>)
 8000e2e:	68cb      	ldr	r3, [r1, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000e30:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8000e34:	041b      	lsls	r3, r3, #16
 8000e36:	0c1b      	lsrs	r3, r3, #16
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000e38:	0200      	lsls	r0, r0, #8
 8000e3a:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000e3e:	4303      	orrs	r3, r0
  reg_value  =  (reg_value                                   |
 8000e40:	4a02      	ldr	r2, [pc, #8]	; (8000e4c <HAL_NVIC_SetPriorityGrouping+0x20>)
 8000e42:	431a      	orrs	r2, r3
  SCB->AIRCR =  reg_value;
 8000e44:	60ca      	str	r2, [r1, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 8000e46:	4770      	bx	lr
 8000e48:	e000ed00 	.word	0xe000ed00
 8000e4c:	05fa0000 	.word	0x05fa0000

08000e50 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000e50:	b430      	push	{r4, r5}
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000e52:	4b15      	ldr	r3, [pc, #84]	; (8000ea8 <HAL_NVIC_SetPriority+0x58>)
 8000e54:	68db      	ldr	r3, [r3, #12]
 8000e56:	f3c3 2302 	ubfx	r3, r3, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000e5a:	f1c3 0407 	rsb	r4, r3, #7
 8000e5e:	2c04      	cmp	r4, #4
 8000e60:	bf28      	it	cs
 8000e62:	2404      	movcs	r4, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000e64:	1d1d      	adds	r5, r3, #4
 8000e66:	2d06      	cmp	r5, #6
 8000e68:	d914      	bls.n	8000e94 <HAL_NVIC_SetPriority+0x44>
 8000e6a:	3b03      	subs	r3, #3

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e6c:	f04f 35ff 	mov.w	r5, #4294967295
 8000e70:	fa05 f404 	lsl.w	r4, r5, r4
 8000e74:	ea21 0104 	bic.w	r1, r1, r4
 8000e78:	4099      	lsls	r1, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000e7a:	fa05 f303 	lsl.w	r3, r5, r3
 8000e7e:	ea22 0303 	bic.w	r3, r2, r3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e82:	4319      	orrs	r1, r3
  if ((int32_t)(IRQn) >= 0)
 8000e84:	2800      	cmp	r0, #0
 8000e86:	db07      	blt.n	8000e98 <HAL_NVIC_SetPriority+0x48>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e88:	0109      	lsls	r1, r1, #4
 8000e8a:	b2c9      	uxtb	r1, r1
 8000e8c:	4b07      	ldr	r3, [pc, #28]	; (8000eac <HAL_NVIC_SetPriority+0x5c>)
 8000e8e:	5419      	strb	r1, [r3, r0]
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8000e90:	bc30      	pop	{r4, r5}
 8000e92:	4770      	bx	lr
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000e94:	2300      	movs	r3, #0
 8000e96:	e7e9      	b.n	8000e6c <HAL_NVIC_SetPriority+0x1c>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e98:	f000 000f 	and.w	r0, r0, #15
 8000e9c:	0109      	lsls	r1, r1, #4
 8000e9e:	b2c9      	uxtb	r1, r1
 8000ea0:	4b03      	ldr	r3, [pc, #12]	; (8000eb0 <HAL_NVIC_SetPriority+0x60>)
 8000ea2:	5419      	strb	r1, [r3, r0]
 8000ea4:	e7f4      	b.n	8000e90 <HAL_NVIC_SetPriority+0x40>
 8000ea6:	bf00      	nop
 8000ea8:	e000ed00 	.word	0xe000ed00
 8000eac:	e000e400 	.word	0xe000e400
 8000eb0:	e000ed14 	.word	0xe000ed14

08000eb4 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8000eb4:	2800      	cmp	r0, #0
 8000eb6:	db07      	blt.n	8000ec8 <HAL_NVIC_EnableIRQ+0x14>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000eb8:	f000 021f 	and.w	r2, r0, #31
 8000ebc:	0940      	lsrs	r0, r0, #5
 8000ebe:	2301      	movs	r3, #1
 8000ec0:	4093      	lsls	r3, r2
 8000ec2:	4a02      	ldr	r2, [pc, #8]	; (8000ecc <HAL_NVIC_EnableIRQ+0x18>)
 8000ec4:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8000ec8:	4770      	bx	lr
 8000eca:	bf00      	nop
 8000ecc:	e000e100 	.word	0xe000e100

08000ed0 <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
 */
static HAL_StatusTypeDef FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 8000ed0:	b430      	push	{r4, r5}
  uint32_t RAMcounter;
  uint32_t StartAddress;

  StartAddress = hfdcan->Init.MessageRAMOffset;
 8000ed2:	6b44      	ldr	r4, [r0, #52]	; 0x34

  /* Standard filter list start address */
  MODIFY_REG(hfdcan->Instance->SIDFC, FDCAN_SIDFC_FLSSA, (StartAddress << FDCAN_SIDFC_FLSSA_Pos));
 8000ed4:	6802      	ldr	r2, [r0, #0]
 8000ed6:	f8d2 1084 	ldr.w	r1, [r2, #132]	; 0x84
 8000eda:	4b70      	ldr	r3, [pc, #448]	; (800109c <FDCAN_CalcultateRamBlockAddresses+0x1cc>)
 8000edc:	4019      	ands	r1, r3
 8000ede:	ea41 0184 	orr.w	r1, r1, r4, lsl #2
 8000ee2:	f8c2 1084 	str.w	r1, [r2, #132]	; 0x84

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->SIDFC, FDCAN_SIDFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_SIDFC_LSS_Pos));
 8000ee6:	6802      	ldr	r2, [r0, #0]
 8000ee8:	f8d2 1084 	ldr.w	r1, [r2, #132]	; 0x84
 8000eec:	f421 017f 	bic.w	r1, r1, #16711680	; 0xff0000
 8000ef0:	6b85      	ldr	r5, [r0, #56]	; 0x38
 8000ef2:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000ef6:	f8c2 1084 	str.w	r1, [r2, #132]	; 0x84

  /* Extended filter list start address */
  StartAddress += hfdcan->Init.StdFiltersNbr;
 8000efa:	6b82      	ldr	r2, [r0, #56]	; 0x38
 8000efc:	4422      	add	r2, r4
  MODIFY_REG(hfdcan->Instance->XIDFC, FDCAN_XIDFC_FLESA, (StartAddress << FDCAN_XIDFC_FLESA_Pos));
 8000efe:	6804      	ldr	r4, [r0, #0]
 8000f00:	f8d4 1088 	ldr.w	r1, [r4, #136]	; 0x88
 8000f04:	4019      	ands	r1, r3
 8000f06:	ea41 0182 	orr.w	r1, r1, r2, lsl #2
 8000f0a:	f8c4 1088 	str.w	r1, [r4, #136]	; 0x88

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->XIDFC, FDCAN_XIDFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_XIDFC_LSE_Pos));
 8000f0e:	6804      	ldr	r4, [r0, #0]
 8000f10:	f8d4 1088 	ldr.w	r1, [r4, #136]	; 0x88
 8000f14:	f421 01fe 	bic.w	r1, r1, #8323072	; 0x7f0000
 8000f18:	6bc5      	ldr	r5, [r0, #60]	; 0x3c
 8000f1a:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000f1e:	f8c4 1088 	str.w	r1, [r4, #136]	; 0x88

  /* Rx FIFO 0 start address */
  StartAddress += (hfdcan->Init.ExtFiltersNbr * 2U);
 8000f22:	6bc1      	ldr	r1, [r0, #60]	; 0x3c
 8000f24:	eb02 0241 	add.w	r2, r2, r1, lsl #1
  MODIFY_REG(hfdcan->Instance->RXF0C, FDCAN_RXF0C_F0SA, (StartAddress << FDCAN_RXF0C_F0SA_Pos));
 8000f28:	6804      	ldr	r4, [r0, #0]
 8000f2a:	f8d4 10a0 	ldr.w	r1, [r4, #160]	; 0xa0
 8000f2e:	4019      	ands	r1, r3
 8000f30:	ea41 0182 	orr.w	r1, r1, r2, lsl #2
 8000f34:	f8c4 10a0 	str.w	r1, [r4, #160]	; 0xa0

  /* Rx FIFO 0 elements number */
  MODIFY_REG(hfdcan->Instance->RXF0C, FDCAN_RXF0C_F0S, (hfdcan->Init.RxFifo0ElmtsNbr << FDCAN_RXF0C_F0S_Pos));
 8000f38:	6804      	ldr	r4, [r0, #0]
 8000f3a:	f8d4 10a0 	ldr.w	r1, [r4, #160]	; 0xa0
 8000f3e:	f421 01fe 	bic.w	r1, r1, #8323072	; 0x7f0000
 8000f42:	6c05      	ldr	r5, [r0, #64]	; 0x40
 8000f44:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000f48:	f8c4 10a0 	str.w	r1, [r4, #160]	; 0xa0

  /* Rx FIFO 1 start address */
  StartAddress += (hfdcan->Init.RxFifo0ElmtsNbr * hfdcan->Init.RxFifo0ElmtSize);
 8000f4c:	6c04      	ldr	r4, [r0, #64]	; 0x40
 8000f4e:	6c41      	ldr	r1, [r0, #68]	; 0x44
 8000f50:	fb01 2404 	mla	r4, r1, r4, r2
  MODIFY_REG(hfdcan->Instance->RXF1C, FDCAN_RXF1C_F1SA, (StartAddress << FDCAN_RXF1C_F1SA_Pos));
 8000f54:	6802      	ldr	r2, [r0, #0]
 8000f56:	f8d2 10b0 	ldr.w	r1, [r2, #176]	; 0xb0
 8000f5a:	4019      	ands	r1, r3
 8000f5c:	ea41 0184 	orr.w	r1, r1, r4, lsl #2
 8000f60:	f8c2 10b0 	str.w	r1, [r2, #176]	; 0xb0

  /* Rx FIFO 1 elements number */
  MODIFY_REG(hfdcan->Instance->RXF1C, FDCAN_RXF1C_F1S, (hfdcan->Init.RxFifo1ElmtsNbr << FDCAN_RXF1C_F1S_Pos));
 8000f64:	6802      	ldr	r2, [r0, #0]
 8000f66:	f8d2 10b0 	ldr.w	r1, [r2, #176]	; 0xb0
 8000f6a:	f421 01fe 	bic.w	r1, r1, #8323072	; 0x7f0000
 8000f6e:	6c85      	ldr	r5, [r0, #72]	; 0x48
 8000f70:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000f74:	f8c2 10b0 	str.w	r1, [r2, #176]	; 0xb0

  /* Rx buffer list start address */
  StartAddress += (hfdcan->Init.RxFifo1ElmtsNbr * hfdcan->Init.RxFifo1ElmtSize);
 8000f78:	6c82      	ldr	r2, [r0, #72]	; 0x48
 8000f7a:	6cc1      	ldr	r1, [r0, #76]	; 0x4c
 8000f7c:	fb01 4402 	mla	r4, r1, r2, r4
  MODIFY_REG(hfdcan->Instance->RXBC, FDCAN_RXBC_RBSA, (StartAddress << FDCAN_RXBC_RBSA_Pos));
 8000f80:	6802      	ldr	r2, [r0, #0]
 8000f82:	f8d2 10ac 	ldr.w	r1, [r2, #172]	; 0xac
 8000f86:	4019      	ands	r1, r3
 8000f88:	ea41 0184 	orr.w	r1, r1, r4, lsl #2
 8000f8c:	f8c2 10ac 	str.w	r1, [r2, #172]	; 0xac

  /* Tx event FIFO start address */
  StartAddress += (hfdcan->Init.RxBuffersNbr * hfdcan->Init.RxBufferSize);
 8000f90:	6d02      	ldr	r2, [r0, #80]	; 0x50
 8000f92:	6d41      	ldr	r1, [r0, #84]	; 0x54
 8000f94:	fb01 4202 	mla	r2, r1, r2, r4
  MODIFY_REG(hfdcan->Instance->TXEFC, FDCAN_TXEFC_EFSA, (StartAddress << FDCAN_TXEFC_EFSA_Pos));
 8000f98:	6804      	ldr	r4, [r0, #0]
 8000f9a:	f8d4 10f0 	ldr.w	r1, [r4, #240]	; 0xf0
 8000f9e:	4019      	ands	r1, r3
 8000fa0:	ea41 0182 	orr.w	r1, r1, r2, lsl #2
 8000fa4:	f8c4 10f0 	str.w	r1, [r4, #240]	; 0xf0

  /* Tx event FIFO elements number */
  MODIFY_REG(hfdcan->Instance->TXEFC, FDCAN_TXEFC_EFS, (hfdcan->Init.TxEventsNbr << FDCAN_TXEFC_EFS_Pos));
 8000fa8:	6804      	ldr	r4, [r0, #0]
 8000faa:	f8d4 10f0 	ldr.w	r1, [r4, #240]	; 0xf0
 8000fae:	f421 117c 	bic.w	r1, r1, #4128768	; 0x3f0000
 8000fb2:	6d85      	ldr	r5, [r0, #88]	; 0x58
 8000fb4:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000fb8:	f8c4 10f0 	str.w	r1, [r4, #240]	; 0xf0

  /* Tx buffer list start address */
  StartAddress += (hfdcan->Init.TxEventsNbr * 2U);
 8000fbc:	6d81      	ldr	r1, [r0, #88]	; 0x58
 8000fbe:	eb02 0241 	add.w	r2, r2, r1, lsl #1
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_TBSA, (StartAddress << FDCAN_TXBC_TBSA_Pos));
 8000fc2:	6804      	ldr	r4, [r0, #0]
 8000fc4:	f8d4 10c0 	ldr.w	r1, [r4, #192]	; 0xc0
 8000fc8:	400b      	ands	r3, r1
 8000fca:	ea43 0282 	orr.w	r2, r3, r2, lsl #2
 8000fce:	f8c4 20c0 	str.w	r2, [r4, #192]	; 0xc0

  /* Dedicated Tx buffers number */
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_NDTB, (hfdcan->Init.TxBuffersNbr << FDCAN_TXBC_NDTB_Pos));
 8000fd2:	6802      	ldr	r2, [r0, #0]
 8000fd4:	f8d2 30c0 	ldr.w	r3, [r2, #192]	; 0xc0
 8000fd8:	f423 137c 	bic.w	r3, r3, #4128768	; 0x3f0000
 8000fdc:	6dc1      	ldr	r1, [r0, #92]	; 0x5c
 8000fde:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000fe2:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0

  /* Tx FIFO/queue elements number */
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_TFQS, (hfdcan->Init.TxFifoQueueElmtsNbr << FDCAN_TXBC_TFQS_Pos));
 8000fe6:	6802      	ldr	r2, [r0, #0]
 8000fe8:	f8d2 30c0 	ldr.w	r3, [r2, #192]	; 0xc0
 8000fec:	f023 537c 	bic.w	r3, r3, #1056964608	; 0x3f000000
 8000ff0:	6e01      	ldr	r1, [r0, #96]	; 0x60
 8000ff2:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 8000ff6:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0

  hfdcan->msgRam.StandardFilterSA = SRAMCAN_BASE + (hfdcan->Init.MessageRAMOffset * 4U);
 8000ffa:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8000ffc:	4a28      	ldr	r2, [pc, #160]	; (80010a0 <FDCAN_CalcultateRamBlockAddresses+0x1d0>)
 8000ffe:	441a      	add	r2, r3
 8001000:	0092      	lsls	r2, r2, #2
 8001002:	66c2      	str	r2, [r0, #108]	; 0x6c
  hfdcan->msgRam.ExtendedFilterSA = hfdcan->msgRam.StandardFilterSA + (hfdcan->Init.StdFiltersNbr * 4U);
 8001004:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8001006:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800100a:	6703      	str	r3, [r0, #112]	; 0x70
  hfdcan->msgRam.RxFIFO0SA = hfdcan->msgRam.ExtendedFilterSA + (hfdcan->Init.ExtFiltersNbr * 2U * 4U);
 800100c:	6bc1      	ldr	r1, [r0, #60]	; 0x3c
 800100e:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
 8001012:	6743      	str	r3, [r0, #116]	; 0x74
  hfdcan->msgRam.RxFIFO1SA = hfdcan->msgRam.RxFIFO0SA + (hfdcan->Init.RxFifo0ElmtsNbr * hfdcan->Init.RxFifo0ElmtSize * 4U);
 8001014:	6c04      	ldr	r4, [r0, #64]	; 0x40
 8001016:	6c41      	ldr	r1, [r0, #68]	; 0x44
 8001018:	fb01 f104 	mul.w	r1, r1, r4
 800101c:	eb03 0381 	add.w	r3, r3, r1, lsl #2
 8001020:	6783      	str	r3, [r0, #120]	; 0x78
  hfdcan->msgRam.RxBufferSA = hfdcan->msgRam.RxFIFO1SA + (hfdcan->Init.RxFifo1ElmtsNbr * hfdcan->Init.RxFifo1ElmtSize * 4U);
 8001022:	6c84      	ldr	r4, [r0, #72]	; 0x48
 8001024:	6cc1      	ldr	r1, [r0, #76]	; 0x4c
 8001026:	fb01 f104 	mul.w	r1, r1, r4
 800102a:	eb03 0381 	add.w	r3, r3, r1, lsl #2
 800102e:	67c3      	str	r3, [r0, #124]	; 0x7c
  hfdcan->msgRam.TxEventFIFOSA = hfdcan->msgRam.RxBufferSA + (hfdcan->Init.RxBuffersNbr * hfdcan->Init.RxBufferSize * 4U);
 8001030:	6d04      	ldr	r4, [r0, #80]	; 0x50
 8001032:	6d41      	ldr	r1, [r0, #84]	; 0x54
 8001034:	fb01 f104 	mul.w	r1, r1, r4
 8001038:	eb03 0381 	add.w	r3, r3, r1, lsl #2
 800103c:	f8c0 3080 	str.w	r3, [r0, #128]	; 0x80
  hfdcan->msgRam.TxBufferSA = hfdcan->msgRam.TxEventFIFOSA + (hfdcan->Init.TxEventsNbr * 2U * 4U);
 8001040:	6d81      	ldr	r1, [r0, #88]	; 0x58
 8001042:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
 8001046:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
  hfdcan->msgRam.TxFIFOQSA = hfdcan->msgRam.TxBufferSA + (hfdcan->Init.TxBuffersNbr * hfdcan->Init.TxElmtSize * 4U);
 800104a:	6dc4      	ldr	r4, [r0, #92]	; 0x5c
 800104c:	6e85      	ldr	r5, [r0, #104]	; 0x68
 800104e:	fb05 f404 	mul.w	r4, r5, r4
 8001052:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8001056:	f8c0 3088 	str.w	r3, [r0, #136]	; 0x88

  hfdcan->msgRam.EndAddress = hfdcan->msgRam.TxFIFOQSA + (hfdcan->Init.TxFifoQueueElmtsNbr * hfdcan->Init.TxElmtSize * 4U);
 800105a:	6e01      	ldr	r1, [r0, #96]	; 0x60
 800105c:	fb01 f105 	mul.w	r1, r1, r5
 8001060:	eb03 0381 	add.w	r3, r3, r1, lsl #2
 8001064:	f8c0 3090 	str.w	r3, [r0, #144]	; 0x90

  if (hfdcan->msgRam.EndAddress > FDCAN_MESSAGE_RAM_END_ADDRESS) /* Last address of the Message RAM */
 8001068:	490e      	ldr	r1, [pc, #56]	; (80010a4 <FDCAN_CalcultateRamBlockAddresses+0x1d4>)
 800106a:	428b      	cmp	r3, r1
 800106c:	d807      	bhi.n	800107e <FDCAN_CalcultateRamBlockAddresses+0x1ae>
    return HAL_ERROR;
  }
  else
  {
    /* Flush the allocated Message RAM area */
    for (RAMcounter = hfdcan->msgRam.StandardFilterSA; RAMcounter < hfdcan->msgRam.EndAddress; RAMcounter += 4U)
 800106e:	f8d0 3090 	ldr.w	r3, [r0, #144]	; 0x90
 8001072:	4293      	cmp	r3, r2
 8001074:	d90e      	bls.n	8001094 <FDCAN_CalcultateRamBlockAddresses+0x1c4>
    {
      *(uint32_t *)(RAMcounter) = 0x00000000;
 8001076:	2300      	movs	r3, #0
 8001078:	f842 3b04 	str.w	r3, [r2], #4
    for (RAMcounter = hfdcan->msgRam.StandardFilterSA; RAMcounter < hfdcan->msgRam.EndAddress; RAMcounter += 4U)
 800107c:	e7f7      	b.n	800106e <FDCAN_CalcultateRamBlockAddresses+0x19e>
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 800107e:	f8d0 309c 	ldr.w	r3, [r0, #156]	; 0x9c
 8001082:	f043 0320 	orr.w	r3, r3, #32
 8001086:	f8c0 309c 	str.w	r3, [r0, #156]	; 0x9c
    hfdcan->State = HAL_FDCAN_STATE_ERROR;
 800108a:	2303      	movs	r3, #3
 800108c:	f880 3098 	strb.w	r3, [r0, #152]	; 0x98
    return HAL_ERROR;
 8001090:	2001      	movs	r0, #1
 8001092:	e000      	b.n	8001096 <FDCAN_CalcultateRamBlockAddresses+0x1c6>
    }
  }

  /* Return function status */
  return HAL_OK;
 8001094:	2000      	movs	r0, #0
}
 8001096:	bc30      	pop	{r4, r5}
 8001098:	4770      	bx	lr
 800109a:	bf00      	nop
 800109c:	ffff0003 	.word	0xffff0003
 80010a0:	10002b00 	.word	0x10002b00
 80010a4:	4000d3fc 	.word	0x4000d3fc

080010a8 <FDCAN_CopyMessageToRAM>:
  * @param  pTxData pointer to a buffer containing the payload of the Tx frame.
  * @param  BufferIndex index of the buffer to be configured.
  * @retval HAL status
 */
static void FDCAN_CopyMessageToRAM(FDCAN_HandleTypeDef *hfdcan, FDCAN_TxHeaderTypeDef *pTxHeader, uint8_t *pTxData, uint32_t BufferIndex)
{
 80010a8:	b4f0      	push	{r4, r5, r6, r7}
  uint32_t TxElementW2;
  uint32_t *TxAddress;
  uint32_t ByteCounter;

  /* Build first word of Tx header element */
  if (pTxHeader->IdType == FDCAN_STANDARD_ID)
 80010aa:	684c      	ldr	r4, [r1, #4]
 80010ac:	2c00      	cmp	r4, #0
 80010ae:	d12f      	bne.n	8001110 <FDCAN_CopyMessageToRAM+0x68>
  {
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 80010b0:	690e      	ldr	r6, [r1, #16]
                   FDCAN_STANDARD_ID |
                   pTxHeader->TxFrameType |
 80010b2:	688c      	ldr	r4, [r1, #8]
                   FDCAN_STANDARD_ID |
 80010b4:	4326      	orrs	r6, r4
                   (pTxHeader->Identifier << 18));
 80010b6:	680c      	ldr	r4, [r1, #0]
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 80010b8:	ea46 4684 	orr.w	r6, r6, r4, lsl #18
                   pTxHeader->TxFrameType |
                   pTxHeader->Identifier);
  }

  /* Build second word of Tx header element */
  TxElementW2 = ((pTxHeader->MessageMarker << 24) |
 80010bc:	6a0d      	ldr	r5, [r1, #32]
                 pTxHeader->TxEventFifoControl |
 80010be:	69cc      	ldr	r4, [r1, #28]
  TxElementW2 = ((pTxHeader->MessageMarker << 24) |
 80010c0:	ea44 6405 	orr.w	r4, r4, r5, lsl #24
                 pTxHeader->FDFormat |
 80010c4:	698d      	ldr	r5, [r1, #24]
                 pTxHeader->TxEventFifoControl |
 80010c6:	432c      	orrs	r4, r5
                 pTxHeader->BitRateSwitch |
 80010c8:	694d      	ldr	r5, [r1, #20]
                 pTxHeader->FDFormat |
 80010ca:	432c      	orrs	r4, r5
                 pTxHeader->DataLength);
 80010cc:	68cd      	ldr	r5, [r1, #12]
  TxElementW2 = ((pTxHeader->MessageMarker << 24) |
 80010ce:	432c      	orrs	r4, r5

  /* Calculate Tx element address */
  TxAddress = (uint32_t *)(hfdcan->msgRam.TxBufferSA + (BufferIndex * hfdcan->Init.TxElmtSize * 4U));
 80010d0:	f8d0 7084 	ldr.w	r7, [r0, #132]	; 0x84
 80010d4:	6e80      	ldr	r0, [r0, #104]	; 0x68
 80010d6:	fb03 f300 	mul.w	r3, r3, r0
 80010da:	eb07 0583 	add.w	r5, r7, r3, lsl #2

  /* Write Tx element header to the message RAM */
  *TxAddress = TxElementW1;
 80010de:	f847 6023 	str.w	r6, [r7, r3, lsl #2]
  TxAddress++;
  *TxAddress = TxElementW2;
 80010e2:	606c      	str	r4, [r5, #4]
  TxAddress++;
 80010e4:	3508      	adds	r5, #8

  /* Write Tx payload to the message RAM */
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength >> 16]; ByteCounter += 4U)
 80010e6:	2000      	movs	r0, #0
 80010e8:	89cb      	ldrh	r3, [r1, #14]
 80010ea:	4c0e      	ldr	r4, [pc, #56]	; (8001124 <FDCAN_CopyMessageToRAM+0x7c>)
 80010ec:	5ce3      	ldrb	r3, [r4, r3]
 80010ee:	4283      	cmp	r3, r0
 80010f0:	d916      	bls.n	8001120 <FDCAN_CopyMessageToRAM+0x78>
  {
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24) |
 80010f2:	1814      	adds	r4, r2, r0
 80010f4:	78e6      	ldrb	r6, [r4, #3]
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16) |
 80010f6:	78a3      	ldrb	r3, [r4, #2]
 80010f8:	041b      	lsls	r3, r3, #16
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24) |
 80010fa:	ea43 6306 	orr.w	r3, r3, r6, lsl #24
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8) |
 80010fe:	7864      	ldrb	r4, [r4, #1]
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16) |
 8001100:	ea43 2304 	orr.w	r3, r3, r4, lsl #8
                  (uint32_t)pTxData[ByteCounter]);
 8001104:	5c14      	ldrb	r4, [r2, r0]
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8) |
 8001106:	4323      	orrs	r3, r4
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24) |
 8001108:	f845 3b04 	str.w	r3, [r5], #4
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength >> 16]; ByteCounter += 4U)
 800110c:	3004      	adds	r0, #4
 800110e:	e7eb      	b.n	80010e8 <FDCAN_CopyMessageToRAM+0x40>
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8001110:	690c      	ldr	r4, [r1, #16]
                   pTxHeader->TxFrameType |
 8001112:	688e      	ldr	r6, [r1, #8]
                   FDCAN_EXTENDED_ID |
 8001114:	4326      	orrs	r6, r4
                   pTxHeader->Identifier);
 8001116:	680c      	ldr	r4, [r1, #0]
                   pTxHeader->TxFrameType |
 8001118:	4326      	orrs	r6, r4
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 800111a:	f046 4680 	orr.w	r6, r6, #1073741824	; 0x40000000
 800111e:	e7cd      	b.n	80010bc <FDCAN_CopyMessageToRAM+0x14>
    TxAddress++;
  }
}
 8001120:	bcf0      	pop	{r4, r5, r6, r7}
 8001122:	4770      	bx	lr
 8001124:	0800950c 	.word	0x0800950c

08001128 <HAL_FDCAN_Init>:
{
 8001128:	b530      	push	{r4, r5, lr}
 800112a:	b095      	sub	sp, #84	; 0x54
 800112c:	4604      	mov	r4, r0
  const uint32_t CvtEltSize[] = {0, 0, 0, 0, 0, 1, 2, 3, 4, 0, 5, 0, 0, 0, 6, 0, 0, 0, 7};
 800112e:	224c      	movs	r2, #76	; 0x4c
 8001130:	49a0      	ldr	r1, [pc, #640]	; (80013b4 <HAL_FDCAN_Init+0x28c>)
 8001132:	a801      	add	r0, sp, #4
 8001134:	f007 fa14 	bl	8008560 <memcpy>
  if (hfdcan == NULL)
 8001138:	2c00      	cmp	r4, #0
 800113a:	f000 8138 	beq.w	80013ae <HAL_FDCAN_Init+0x286>
  if (hfdcan->Instance == FDCAN1)
 800113e:	6823      	ldr	r3, [r4, #0]
 8001140:	4a9d      	ldr	r2, [pc, #628]	; (80013b8 <HAL_FDCAN_Init+0x290>)
 8001142:	4293      	cmp	r3, r2
 8001144:	d020      	beq.n	8001188 <HAL_FDCAN_Init+0x60>
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 8001146:	f894 3098 	ldrb.w	r3, [r4, #152]	; 0x98
 800114a:	b30b      	cbz	r3, 8001190 <HAL_FDCAN_Init+0x68>
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 800114c:	6822      	ldr	r2, [r4, #0]
 800114e:	6993      	ldr	r3, [r2, #24]
 8001150:	f023 0310 	bic.w	r3, r3, #16
 8001154:	6193      	str	r3, [r2, #24]
  tickstart = HAL_GetTick();
 8001156:	f7ff fe49 	bl	8000dec <HAL_GetTick>
 800115a:	4605      	mov	r5, r0
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 800115c:	6823      	ldr	r3, [r4, #0]
 800115e:	699a      	ldr	r2, [r3, #24]
 8001160:	f012 0f08 	tst.w	r2, #8
 8001164:	d01a      	beq.n	800119c <HAL_FDCAN_Init+0x74>
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8001166:	f7ff fe41 	bl	8000dec <HAL_GetTick>
 800116a:	1b43      	subs	r3, r0, r5
 800116c:	2b0a      	cmp	r3, #10
 800116e:	d9f5      	bls.n	800115c <HAL_FDCAN_Init+0x34>
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8001170:	f8d4 309c 	ldr.w	r3, [r4, #156]	; 0x9c
 8001174:	f043 0301 	orr.w	r3, r3, #1
 8001178:	f8c4 309c 	str.w	r3, [r4, #156]	; 0x9c
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 800117c:	2303      	movs	r3, #3
 800117e:	f884 3098 	strb.w	r3, [r4, #152]	; 0x98
      return HAL_ERROR;
 8001182:	2001      	movs	r0, #1
}
 8001184:	b015      	add	sp, #84	; 0x54
 8001186:	bd30      	pop	{r4, r5, pc}
    hfdcan->ttcan = (TTCAN_TypeDef *)((uint32_t)hfdcan->Instance + 0x100U);
 8001188:	f503 7380 	add.w	r3, r3, #256	; 0x100
 800118c:	6063      	str	r3, [r4, #4]
 800118e:	e7da      	b.n	8001146 <HAL_FDCAN_Init+0x1e>
    hfdcan->Lock = HAL_UNLOCKED;
 8001190:	f884 3099 	strb.w	r3, [r4, #153]	; 0x99
    HAL_FDCAN_MspInit(hfdcan);
 8001194:	4620      	mov	r0, r4
 8001196:	f006 fccf 	bl	8007b38 <HAL_FDCAN_MspInit>
 800119a:	e7d7      	b.n	800114c <HAL_FDCAN_Init+0x24>
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 800119c:	699a      	ldr	r2, [r3, #24]
 800119e:	f042 0201 	orr.w	r2, r2, #1
 80011a2:	619a      	str	r2, [r3, #24]
  tickstart = HAL_GetTick();
 80011a4:	f7ff fe22 	bl	8000dec <HAL_GetTick>
 80011a8:	4605      	mov	r5, r0
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 80011aa:	6823      	ldr	r3, [r4, #0]
 80011ac:	699a      	ldr	r2, [r3, #24]
 80011ae:	f012 0f01 	tst.w	r2, #1
 80011b2:	d10f      	bne.n	80011d4 <HAL_FDCAN_Init+0xac>
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 80011b4:	f7ff fe1a 	bl	8000dec <HAL_GetTick>
 80011b8:	1b40      	subs	r0, r0, r5
 80011ba:	280a      	cmp	r0, #10
 80011bc:	d9f5      	bls.n	80011aa <HAL_FDCAN_Init+0x82>
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 80011be:	f8d4 309c 	ldr.w	r3, [r4, #156]	; 0x9c
 80011c2:	f043 0301 	orr.w	r3, r3, #1
 80011c6:	f8c4 309c 	str.w	r3, [r4, #156]	; 0x9c
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 80011ca:	2303      	movs	r3, #3
 80011cc:	f884 3098 	strb.w	r3, [r4, #152]	; 0x98
      return HAL_ERROR;
 80011d0:	2001      	movs	r0, #1
 80011d2:	e7d7      	b.n	8001184 <HAL_FDCAN_Init+0x5c>
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 80011d4:	699a      	ldr	r2, [r3, #24]
 80011d6:	f042 0202 	orr.w	r2, r2, #2
 80011da:	619a      	str	r2, [r3, #24]
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 80011dc:	7c23      	ldrb	r3, [r4, #16]
 80011de:	2b01      	cmp	r3, #1
 80011e0:	d040      	beq.n	8001264 <HAL_FDCAN_Init+0x13c>
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 80011e2:	6822      	ldr	r2, [r4, #0]
 80011e4:	6993      	ldr	r3, [r2, #24]
 80011e6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80011ea:	6193      	str	r3, [r2, #24]
  if (hfdcan->Init.TransmitPause == ENABLE)
 80011ec:	7c63      	ldrb	r3, [r4, #17]
 80011ee:	2b01      	cmp	r3, #1
 80011f0:	d03e      	beq.n	8001270 <HAL_FDCAN_Init+0x148>
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 80011f2:	6822      	ldr	r2, [r4, #0]
 80011f4:	6993      	ldr	r3, [r2, #24]
 80011f6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80011fa:	6193      	str	r3, [r2, #24]
  if (hfdcan->Init.ProtocolException == ENABLE)
 80011fc:	7ca3      	ldrb	r3, [r4, #18]
 80011fe:	2b01      	cmp	r3, #1
 8001200:	d03c      	beq.n	800127c <HAL_FDCAN_Init+0x154>
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8001202:	6822      	ldr	r2, [r4, #0]
 8001204:	6993      	ldr	r3, [r2, #24]
 8001206:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800120a:	6193      	str	r3, [r2, #24]
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 800120c:	6822      	ldr	r2, [r4, #0]
 800120e:	6993      	ldr	r3, [r2, #24]
 8001210:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001214:	68a1      	ldr	r1, [r4, #8]
 8001216:	430b      	orrs	r3, r1
 8001218:	6193      	str	r3, [r2, #24]
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 800121a:	6822      	ldr	r2, [r4, #0]
 800121c:	6993      	ldr	r3, [r2, #24]
 800121e:	f023 03a4 	bic.w	r3, r3, #164	; 0xa4
 8001222:	6193      	str	r3, [r2, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8001224:	6822      	ldr	r2, [r4, #0]
 8001226:	6913      	ldr	r3, [r2, #16]
 8001228:	f023 0310 	bic.w	r3, r3, #16
 800122c:	6113      	str	r3, [r2, #16]
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 800122e:	68e3      	ldr	r3, [r4, #12]
 8001230:	2b01      	cmp	r3, #1
 8001232:	d029      	beq.n	8001288 <HAL_FDCAN_Init+0x160>
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 8001234:	2b00      	cmp	r3, #0
 8001236:	d02c      	beq.n	8001292 <HAL_FDCAN_Init+0x16a>
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 8001238:	2b02      	cmp	r3, #2
 800123a:	f000 809b 	beq.w	8001374 <HAL_FDCAN_Init+0x24c>
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 800123e:	6822      	ldr	r2, [r4, #0]
 8001240:	6993      	ldr	r3, [r2, #24]
 8001242:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001246:	6193      	str	r3, [r2, #24]
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8001248:	6822      	ldr	r2, [r4, #0]
 800124a:	6913      	ldr	r3, [r2, #16]
 800124c:	f043 0310 	orr.w	r3, r3, #16
 8001250:	6113      	str	r3, [r2, #16]
      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 8001252:	68e3      	ldr	r3, [r4, #12]
 8001254:	2b03      	cmp	r3, #3
 8001256:	d11c      	bne.n	8001292 <HAL_FDCAN_Init+0x16a>
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8001258:	6822      	ldr	r2, [r4, #0]
 800125a:	6993      	ldr	r3, [r2, #24]
 800125c:	f043 0320 	orr.w	r3, r3, #32
 8001260:	6193      	str	r3, [r2, #24]
 8001262:	e016      	b.n	8001292 <HAL_FDCAN_Init+0x16a>
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8001264:	6822      	ldr	r2, [r4, #0]
 8001266:	6993      	ldr	r3, [r2, #24]
 8001268:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800126c:	6193      	str	r3, [r2, #24]
 800126e:	e7bd      	b.n	80011ec <HAL_FDCAN_Init+0xc4>
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8001270:	6822      	ldr	r2, [r4, #0]
 8001272:	6993      	ldr	r3, [r2, #24]
 8001274:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001278:	6193      	str	r3, [r2, #24]
 800127a:	e7bf      	b.n	80011fc <HAL_FDCAN_Init+0xd4>
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 800127c:	6822      	ldr	r2, [r4, #0]
 800127e:	6993      	ldr	r3, [r2, #24]
 8001280:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8001284:	6193      	str	r3, [r2, #24]
 8001286:	e7c1      	b.n	800120c <HAL_FDCAN_Init+0xe4>
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 8001288:	6822      	ldr	r2, [r4, #0]
 800128a:	6993      	ldr	r3, [r2, #24]
 800128c:	f043 0304 	orr.w	r3, r3, #4
 8001290:	6193      	str	r3, [r2, #24]
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8001292:	69a3      	ldr	r3, [r4, #24]
 8001294:	1e5a      	subs	r2, r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8001296:	69e3      	ldr	r3, [r4, #28]
 8001298:	3b01      	subs	r3, #1
 800129a:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 800129c:	ea43 6342 	orr.w	r3, r3, r2, lsl #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 80012a0:	6a22      	ldr	r2, [r4, #32]
 80012a2:	3a01      	subs	r2, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 80012a4:	4313      	orrs	r3, r2
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 80012a6:	6962      	ldr	r2, [r4, #20]
 80012a8:	3a01      	subs	r2, #1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80012aa:	6821      	ldr	r1, [r4, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 80012ac:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80012b0:	61cb      	str	r3, [r1, #28]
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 80012b2:	68a3      	ldr	r3, [r4, #8]
 80012b4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80012b8:	d062      	beq.n	8001380 <HAL_FDCAN_Init+0x258>
  if (hfdcan->Init.TxFifoQueueElmtsNbr > 0U)
 80012ba:	6e23      	ldr	r3, [r4, #96]	; 0x60
 80012bc:	b133      	cbz	r3, 80012cc <HAL_FDCAN_Init+0x1a4>
    SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 80012be:	6822      	ldr	r2, [r4, #0]
 80012c0:	f8d2 30c0 	ldr.w	r3, [r2, #192]	; 0xc0
 80012c4:	6e61      	ldr	r1, [r4, #100]	; 0x64
 80012c6:	430b      	orrs	r3, r1
 80012c8:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
  if ((hfdcan->Init.TxBuffersNbr + hfdcan->Init.TxFifoQueueElmtsNbr) > 0U)
 80012cc:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 80012ce:	6e22      	ldr	r2, [r4, #96]	; 0x60
 80012d0:	42d3      	cmn	r3, r2
 80012d2:	d00d      	beq.n	80012f0 <HAL_FDCAN_Init+0x1c8>
    MODIFY_REG(hfdcan->Instance->TXESC, FDCAN_TXESC_TBDS, CvtEltSize[hfdcan->Init.TxElmtSize]);
 80012d4:	6821      	ldr	r1, [r4, #0]
 80012d6:	f8d1 30c8 	ldr.w	r3, [r1, #200]	; 0xc8
 80012da:	f023 0307 	bic.w	r3, r3, #7
 80012de:	6ea2      	ldr	r2, [r4, #104]	; 0x68
 80012e0:	a814      	add	r0, sp, #80	; 0x50
 80012e2:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 80012e6:	f852 2c4c 	ldr.w	r2, [r2, #-76]
 80012ea:	4313      	orrs	r3, r2
 80012ec:	f8c1 30c8 	str.w	r3, [r1, #200]	; 0xc8
  if (hfdcan->Init.RxFifo0ElmtsNbr > 0U)
 80012f0:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80012f2:	b16b      	cbz	r3, 8001310 <HAL_FDCAN_Init+0x1e8>
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_F0DS, (CvtEltSize[hfdcan->Init.RxFifo0ElmtSize] << FDCAN_RXESC_F0DS_Pos));
 80012f4:	6821      	ldr	r1, [r4, #0]
 80012f6:	f8d1 30bc 	ldr.w	r3, [r1, #188]	; 0xbc
 80012fa:	f023 0307 	bic.w	r3, r3, #7
 80012fe:	6c62      	ldr	r2, [r4, #68]	; 0x44
 8001300:	a814      	add	r0, sp, #80	; 0x50
 8001302:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 8001306:	f852 2c4c 	ldr.w	r2, [r2, #-76]
 800130a:	4313      	orrs	r3, r2
 800130c:	f8c1 30bc 	str.w	r3, [r1, #188]	; 0xbc
  if (hfdcan->Init.RxFifo1ElmtsNbr > 0U)
 8001310:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8001312:	b173      	cbz	r3, 8001332 <HAL_FDCAN_Init+0x20a>
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_F1DS, (CvtEltSize[hfdcan->Init.RxFifo1ElmtSize] << FDCAN_RXESC_F1DS_Pos));
 8001314:	6821      	ldr	r1, [r4, #0]
 8001316:	f8d1 30bc 	ldr.w	r3, [r1, #188]	; 0xbc
 800131a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800131e:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
 8001320:	a814      	add	r0, sp, #80	; 0x50
 8001322:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 8001326:	f852 2c4c 	ldr.w	r2, [r2, #-76]
 800132a:	ea43 1302 	orr.w	r3, r3, r2, lsl #4
 800132e:	f8c1 30bc 	str.w	r3, [r1, #188]	; 0xbc
  if (hfdcan->Init.RxBuffersNbr > 0U)
 8001332:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8001334:	b173      	cbz	r3, 8001354 <HAL_FDCAN_Init+0x22c>
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_RBDS, (CvtEltSize[hfdcan->Init.RxBufferSize] << FDCAN_RXESC_RBDS_Pos));
 8001336:	6821      	ldr	r1, [r4, #0]
 8001338:	f8d1 30bc 	ldr.w	r3, [r1, #188]	; 0xbc
 800133c:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8001340:	6d62      	ldr	r2, [r4, #84]	; 0x54
 8001342:	a814      	add	r0, sp, #80	; 0x50
 8001344:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 8001348:	f852 2c4c 	ldr.w	r2, [r2, #-76]
 800134c:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8001350:	f8c1 30bc 	str.w	r3, [r1, #188]	; 0xbc
  if (hfdcan->Instance == FDCAN1)
 8001354:	6822      	ldr	r2, [r4, #0]
 8001356:	4b18      	ldr	r3, [pc, #96]	; (80013b8 <HAL_FDCAN_Init+0x290>)
 8001358:	429a      	cmp	r2, r3
 800135a:	d022      	beq.n	80013a2 <HAL_FDCAN_Init+0x27a>
  hfdcan->LatestTxFifoQRequest = 0U;
 800135c:	2300      	movs	r3, #0
 800135e:	f8c4 3094 	str.w	r3, [r4, #148]	; 0x94
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8001362:	f8c4 309c 	str.w	r3, [r4, #156]	; 0x9c
  hfdcan->State = HAL_FDCAN_STATE_READY;
 8001366:	2301      	movs	r3, #1
 8001368:	f884 3098 	strb.w	r3, [r4, #152]	; 0x98
  status = FDCAN_CalcultateRamBlockAddresses(hfdcan);
 800136c:	4620      	mov	r0, r4
 800136e:	f7ff fdaf 	bl	8000ed0 <FDCAN_CalcultateRamBlockAddresses>
  return status;
 8001372:	e707      	b.n	8001184 <HAL_FDCAN_Init+0x5c>
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8001374:	6822      	ldr	r2, [r4, #0]
 8001376:	6993      	ldr	r3, [r2, #24]
 8001378:	f043 0320 	orr.w	r3, r3, #32
 800137c:	6193      	str	r3, [r2, #24]
 800137e:	e788      	b.n	8001292 <HAL_FDCAN_Init+0x16a>
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 8001380:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8001382:	3b01      	subs	r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)    | \
 8001384:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8001386:	3a01      	subs	r2, #1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 8001388:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)    | \
 800138c:	6b22      	ldr	r2, [r4, #48]	; 0x30
 800138e:	3a01      	subs	r2, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)    | \
 8001390:	ea43 1302 	orr.w	r3, r3, r2, lsl #4
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 8001394:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8001396:	3a01      	subs	r2, #1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 8001398:	6821      	ldr	r1, [r4, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)    | \
 800139a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 800139e:	60cb      	str	r3, [r1, #12]
 80013a0:	e78b      	b.n	80012ba <HAL_FDCAN_Init+0x192>
    CLEAR_BIT(hfdcan->ttcan->TTOCF, FDCAN_TTOCF_OM);
 80013a2:	6862      	ldr	r2, [r4, #4]
 80013a4:	6893      	ldr	r3, [r2, #8]
 80013a6:	f023 0303 	bic.w	r3, r3, #3
 80013aa:	6093      	str	r3, [r2, #8]
 80013ac:	e7d6      	b.n	800135c <HAL_FDCAN_Init+0x234>
    return HAL_ERROR;
 80013ae:	2001      	movs	r0, #1
 80013b0:	e6e8      	b.n	8001184 <HAL_FDCAN_Init+0x5c>
 80013b2:	bf00      	nop
 80013b4:	0800951c 	.word	0x0800951c
 80013b8:	4000a000 	.word	0x4000a000

080013bc <HAL_FDCAN_ConfigFilter>:
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 80013bc:	f890 3098 	ldrb.w	r3, [r0, #152]	; 0x98
  if ((state == HAL_FDCAN_STATE_READY) || (state == HAL_FDCAN_STATE_BUSY))
 80013c0:	3b01      	subs	r3, #1
 80013c2:	b2db      	uxtb	r3, r3
 80013c4:	2b01      	cmp	r3, #1
 80013c6:	d907      	bls.n	80013d8 <HAL_FDCAN_ConfigFilter+0x1c>
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_INITIALIZED;
 80013c8:	f8d0 309c 	ldr.w	r3, [r0, #156]	; 0x9c
 80013cc:	f043 0302 	orr.w	r3, r3, #2
 80013d0:	f8c0 309c 	str.w	r3, [r0, #156]	; 0x9c
    return HAL_ERROR;
 80013d4:	2001      	movs	r0, #1
 80013d6:	4770      	bx	lr
    if (sFilterConfig->FilterConfig == FDCAN_FILTER_TO_RXBUFFER)
 80013d8:	68cb      	ldr	r3, [r1, #12]
    if (sFilterConfig->IdType == FDCAN_STANDARD_ID)
 80013da:	680a      	ldr	r2, [r1, #0]
 80013dc:	b9d2      	cbnz	r2, 8001414 <HAL_FDCAN_ConfigFilter+0x58>
      if (sFilterConfig->FilterConfig == FDCAN_FILTER_TO_RXBUFFER)
 80013de:	2b07      	cmp	r3, #7
 80013e0:	d00e      	beq.n	8001400 <HAL_FDCAN_ConfigFilter+0x44>
        FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 80013e2:	688a      	ldr	r2, [r1, #8]
                           (sFilterConfig->FilterConfig << 27U) |
 80013e4:	06db      	lsls	r3, r3, #27
        FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 80013e6:	ea43 7382 	orr.w	r3, r3, r2, lsl #30
                           (sFilterConfig->FilterID1 << 16U)    |
 80013ea:	690a      	ldr	r2, [r1, #16]
                           (sFilterConfig->FilterConfig << 27U) |
 80013ec:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
                           sFilterConfig->FilterID2);
 80013f0:	694a      	ldr	r2, [r1, #20]
        FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 80013f2:	4313      	orrs	r3, r2
      FilterAddress = (uint32_t *)(hfdcan->msgRam.StandardFilterSA + (sFilterConfig->FilterIndex * 4U));
 80013f4:	6ec2      	ldr	r2, [r0, #108]	; 0x6c
 80013f6:	6849      	ldr	r1, [r1, #4]
      *FilterAddress = FilterElementW1;
 80013f8:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
    return HAL_OK;
 80013fc:	2000      	movs	r0, #0
}
 80013fe:	4770      	bx	lr
                           (sFilterConfig->FilterID1 << 16U)       |
 8001400:	690a      	ldr	r2, [r1, #16]
                           (sFilterConfig->IsCalibrationMsg << 8U) |
 8001402:	69cb      	ldr	r3, [r1, #28]
 8001404:	021b      	lsls	r3, r3, #8
                           (sFilterConfig->FilterID1 << 16U)       |
 8001406:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
                           sFilterConfig->RxBufferIndex);
 800140a:	698a      	ldr	r2, [r1, #24]
                           (sFilterConfig->IsCalibrationMsg << 8U) |
 800140c:	4313      	orrs	r3, r2
        FilterElementW1 = ((FDCAN_FILTER_TO_RXBUFFER << 27U)       |
 800140e:	f043 5360 	orr.w	r3, r3, #939524096	; 0x38000000
 8001412:	e7ef      	b.n	80013f4 <HAL_FDCAN_ConfigFilter+0x38>
{
 8001414:	b410      	push	{r4}
      FilterElementW1 = ((sFilterConfig->FilterConfig << 29U) | sFilterConfig->FilterID1);
 8001416:	690a      	ldr	r2, [r1, #16]
 8001418:	ea42 7243 	orr.w	r2, r2, r3, lsl #29
      if (sFilterConfig->FilterConfig == FDCAN_FILTER_TO_RXBUFFER)
 800141c:	2b07      	cmp	r3, #7
 800141e:	d00e      	beq.n	800143e <HAL_FDCAN_ConfigFilter+0x82>
        FilterElementW2 = ((sFilterConfig->FilterType << 30U) | sFilterConfig->FilterID2);
 8001420:	688c      	ldr	r4, [r1, #8]
 8001422:	694b      	ldr	r3, [r1, #20]
 8001424:	ea43 7384 	orr.w	r3, r3, r4, lsl #30
      FilterAddress = (uint32_t *)(hfdcan->msgRam.ExtendedFilterSA + (sFilterConfig->FilterIndex * 4U * 2U));
 8001428:	6f00      	ldr	r0, [r0, #112]	; 0x70
 800142a:	6849      	ldr	r1, [r1, #4]
 800142c:	eb00 04c1 	add.w	r4, r0, r1, lsl #3
      *FilterAddress = FilterElementW1;
 8001430:	f840 2031 	str.w	r2, [r0, r1, lsl #3]
      *FilterAddress = FilterElementW2;
 8001434:	6063      	str	r3, [r4, #4]
    return HAL_OK;
 8001436:	2000      	movs	r0, #0
}
 8001438:	f85d 4b04 	ldr.w	r4, [sp], #4
 800143c:	4770      	bx	lr
        FilterElementW2 = sFilterConfig->RxBufferIndex;
 800143e:	698b      	ldr	r3, [r1, #24]
 8001440:	e7f2      	b.n	8001428 <HAL_FDCAN_ConfigFilter+0x6c>

08001442 <HAL_FDCAN_ConfigGlobalFilter>:
{
 8001442:	b410      	push	{r4}
  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 8001444:	f890 4098 	ldrb.w	r4, [r0, #152]	; 0x98
 8001448:	b2e4      	uxtb	r4, r4
 800144a:	2c01      	cmp	r4, #1
 800144c:	d009      	beq.n	8001462 <HAL_FDCAN_ConfigGlobalFilter+0x20>
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
 800144e:	f8d0 309c 	ldr.w	r3, [r0, #156]	; 0x9c
 8001452:	f043 0304 	orr.w	r3, r3, #4
 8001456:	f8c0 309c 	str.w	r3, [r0, #156]	; 0x9c
    return HAL_ERROR;
 800145a:	2001      	movs	r0, #1
}
 800145c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8001460:	4770      	bx	lr
                             (NonMatchingExt << FDCAN_GFC_ANFE_Pos)  |
 8001462:	0092      	lsls	r2, r2, #2
    hfdcan->Instance->GFC = ((NonMatchingStd << FDCAN_GFC_ANFS_Pos)  |
 8001464:	ea42 1201 	orr.w	r2, r2, r1, lsl #4
                             (NonMatchingExt << FDCAN_GFC_ANFE_Pos)  |
 8001468:	ea42 0243 	orr.w	r2, r2, r3, lsl #1
    hfdcan->Instance->GFC = ((NonMatchingStd << FDCAN_GFC_ANFS_Pos)  |
 800146c:	6803      	ldr	r3, [r0, #0]
                             (RejectRemoteStd << FDCAN_GFC_RRFS_Pos) |
 800146e:	9901      	ldr	r1, [sp, #4]
 8001470:	430a      	orrs	r2, r1
    hfdcan->Instance->GFC = ((NonMatchingStd << FDCAN_GFC_ANFS_Pos)  |
 8001472:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    return HAL_OK;
 8001476:	2000      	movs	r0, #0
 8001478:	e7f0      	b.n	800145c <HAL_FDCAN_ConfigGlobalFilter+0x1a>

0800147a <HAL_FDCAN_Start>:
  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 800147a:	f890 3098 	ldrb.w	r3, [r0, #152]	; 0x98
 800147e:	b2db      	uxtb	r3, r3
 8001480:	2b01      	cmp	r3, #1
 8001482:	d007      	beq.n	8001494 <HAL_FDCAN_Start+0x1a>
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
 8001484:	f8d0 309c 	ldr.w	r3, [r0, #156]	; 0x9c
 8001488:	f043 0304 	orr.w	r3, r3, #4
 800148c:	f8c0 309c 	str.w	r3, [r0, #156]	; 0x9c
    return HAL_ERROR;
 8001490:	2001      	movs	r0, #1
}
 8001492:	4770      	bx	lr
    hfdcan->State = HAL_FDCAN_STATE_BUSY;
 8001494:	2302      	movs	r3, #2
 8001496:	f880 3098 	strb.w	r3, [r0, #152]	; 0x98
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 800149a:	6802      	ldr	r2, [r0, #0]
 800149c:	6993      	ldr	r3, [r2, #24]
 800149e:	f023 0301 	bic.w	r3, r3, #1
 80014a2:	6193      	str	r3, [r2, #24]
    hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 80014a4:	2300      	movs	r3, #0
 80014a6:	f8c0 309c 	str.w	r3, [r0, #156]	; 0x9c
    return HAL_OK;
 80014aa:	4618      	mov	r0, r3
 80014ac:	4770      	bx	lr

080014ae <HAL_FDCAN_AddMessageToTxFifoQ>:
{
 80014ae:	b538      	push	{r3, r4, r5, lr}
 80014b0:	4604      	mov	r4, r0
  if (hfdcan->State == HAL_FDCAN_STATE_BUSY)
 80014b2:	f890 3098 	ldrb.w	r3, [r0, #152]	; 0x98
 80014b6:	b2db      	uxtb	r3, r3
 80014b8:	2b02      	cmp	r3, #2
 80014ba:	d12b      	bne.n	8001514 <HAL_FDCAN_AddMessageToTxFifoQ+0x66>
    if ((hfdcan->Instance->TXBC & FDCAN_TXBC_TFQS) == 0U)
 80014bc:	6803      	ldr	r3, [r0, #0]
 80014be:	f8d3 00c0 	ldr.w	r0, [r3, #192]	; 0xc0
 80014c2:	f010 5f7c 	tst.w	r0, #1056964608	; 0x3f000000
 80014c6:	d00c      	beq.n	80014e2 <HAL_FDCAN_AddMessageToTxFifoQ+0x34>
    if ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQF) != 0U)
 80014c8:	f8d3 00c4 	ldr.w	r0, [r3, #196]	; 0xc4
 80014cc:	f410 1f00 	tst.w	r0, #2097152	; 0x200000
 80014d0:	d00f      	beq.n	80014f2 <HAL_FDCAN_AddMessageToTxFifoQ+0x44>
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_FULL;
 80014d2:	f8d4 309c 	ldr.w	r3, [r4, #156]	; 0x9c
 80014d6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80014da:	f8c4 309c 	str.w	r3, [r4, #156]	; 0x9c
      return HAL_ERROR;
 80014de:	2001      	movs	r0, #1
 80014e0:	e01f      	b.n	8001522 <HAL_FDCAN_AddMessageToTxFifoQ+0x74>
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 80014e2:	f8d4 309c 	ldr.w	r3, [r4, #156]	; 0x9c
 80014e6:	f043 0320 	orr.w	r3, r3, #32
 80014ea:	f8c4 309c 	str.w	r3, [r4, #156]	; 0x9c
      return HAL_ERROR;
 80014ee:	2001      	movs	r0, #1
 80014f0:	e017      	b.n	8001522 <HAL_FDCAN_AddMessageToTxFifoQ+0x74>
      PutIndex = ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQPI) >> FDCAN_TXFQS_TFQPI_Pos);
 80014f2:	f8d3 50c4 	ldr.w	r5, [r3, #196]	; 0xc4
 80014f6:	f3c5 4504 	ubfx	r5, r5, #16, #5
      FDCAN_CopyMessageToRAM(hfdcan, pTxHeader, pTxData, PutIndex);
 80014fa:	462b      	mov	r3, r5
 80014fc:	4620      	mov	r0, r4
 80014fe:	f7ff fdd3 	bl	80010a8 <FDCAN_CopyMessageToRAM>
      hfdcan->Instance->TXBAR = ((uint32_t)1 << PutIndex);
 8001502:	6822      	ldr	r2, [r4, #0]
 8001504:	2301      	movs	r3, #1
 8001506:	40ab      	lsls	r3, r5
 8001508:	f8c2 30d0 	str.w	r3, [r2, #208]	; 0xd0
      hfdcan->LatestTxFifoQRequest = ((uint32_t)1 << PutIndex);
 800150c:	f8c4 3094 	str.w	r3, [r4, #148]	; 0x94
    return HAL_OK;
 8001510:	2000      	movs	r0, #0
 8001512:	e006      	b.n	8001522 <HAL_FDCAN_AddMessageToTxFifoQ+0x74>
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 8001514:	f8d0 309c 	ldr.w	r3, [r0, #156]	; 0x9c
 8001518:	f043 0308 	orr.w	r3, r3, #8
 800151c:	f8c0 309c 	str.w	r3, [r0, #156]	; 0x9c
    return HAL_ERROR;
 8001520:	2001      	movs	r0, #1
}
 8001522:	bd38      	pop	{r3, r4, r5, pc}

08001524 <HAL_FDCAN_GetRxMessage>:
{
 8001524:	b4f0      	push	{r4, r5, r6, r7}
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 8001526:	f890 4098 	ldrb.w	r4, [r0, #152]	; 0x98
 800152a:	b2e4      	uxtb	r4, r4
  if (state == HAL_FDCAN_STATE_BUSY)
 800152c:	2c02      	cmp	r4, #2
 800152e:	f040 80d2 	bne.w	80016d6 <HAL_FDCAN_GetRxMessage+0x1b2>
    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 8001532:	2940      	cmp	r1, #64	; 0x40
 8001534:	d00c      	beq.n	8001550 <HAL_FDCAN_GetRxMessage+0x2c>
    else if (RxLocation == FDCAN_RX_FIFO1) /* Rx element is assigned to the Rx FIFO 1 */
 8001536:	2941      	cmp	r1, #65	; 0x41
 8001538:	d03c      	beq.n	80015b4 <HAL_FDCAN_GetRxMessage+0x90>
      if (RxLocation >= hfdcan->Init.RxBuffersNbr)
 800153a:	6d04      	ldr	r4, [r0, #80]	; 0x50
 800153c:	428c      	cmp	r4, r1
 800153e:	d86b      	bhi.n	8001618 <HAL_FDCAN_GetRxMessage+0xf4>
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 8001540:	f8d0 309c 	ldr.w	r3, [r0, #156]	; 0x9c
 8001544:	f043 0320 	orr.w	r3, r3, #32
 8001548:	f8c0 309c 	str.w	r3, [r0, #156]	; 0x9c
        return HAL_ERROR;
 800154c:	2001      	movs	r0, #1
 800154e:	e0c9      	b.n	80016e4 <HAL_FDCAN_GetRxMessage+0x1c0>
      if ((hfdcan->Instance->RXF0C & FDCAN_RXF0C_F0S) == 0U)
 8001550:	6804      	ldr	r4, [r0, #0]
 8001552:	f8d4 50a0 	ldr.w	r5, [r4, #160]	; 0xa0
 8001556:	f415 0ffe 	tst.w	r5, #8323072	; 0x7f0000
 800155a:	d00c      	beq.n	8001576 <HAL_FDCAN_GetRxMessage+0x52>
      if ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0FL) == 0U)
 800155c:	f8d4 50a4 	ldr.w	r5, [r4, #164]	; 0xa4
 8001560:	f015 0f7f 	tst.w	r5, #127	; 0x7f
 8001564:	d10f      	bne.n	8001586 <HAL_FDCAN_GetRxMessage+0x62>
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 8001566:	f8d0 309c 	ldr.w	r3, [r0, #156]	; 0x9c
 800156a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800156e:	f8c0 309c 	str.w	r3, [r0, #156]	; 0x9c
        return HAL_ERROR;
 8001572:	2001      	movs	r0, #1
 8001574:	e0b6      	b.n	80016e4 <HAL_FDCAN_GetRxMessage+0x1c0>
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 8001576:	f8d0 309c 	ldr.w	r3, [r0, #156]	; 0x9c
 800157a:	f043 0320 	orr.w	r3, r3, #32
 800157e:	f8c0 309c 	str.w	r3, [r0, #156]	; 0x9c
        return HAL_ERROR;
 8001582:	2001      	movs	r0, #1
 8001584:	e0ae      	b.n	80016e4 <HAL_FDCAN_GetRxMessage+0x1c0>
        if(((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0F) >> FDCAN_RXF0S_F0F_Pos) == 1U)
 8001586:	f8d4 50a4 	ldr.w	r5, [r4, #164]	; 0xa4
 800158a:	f3c5 6c00 	ubfx	ip, r5, #24, #1
 800158e:	f015 7f80 	tst.w	r5, #16777216	; 0x1000000
 8001592:	d003      	beq.n	800159c <HAL_FDCAN_GetRxMessage+0x78>
          if(((hfdcan->Instance->RXF0C & FDCAN_RXF0C_F0OM) >> FDCAN_RXF0C_F0OM_Pos) == FDCAN_RX_FIFO_OVERWRITE)
 8001594:	f8d4 50a0 	ldr.w	r5, [r4, #160]	; 0xa0
  uint32_t GetIndex = 0;
 8001598:	f04f 0c00 	mov.w	ip, #0
        GetIndex += ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0GI) >> FDCAN_RXF0S_F0GI_Pos);
 800159c:	f8d4 40a4 	ldr.w	r4, [r4, #164]	; 0xa4
 80015a0:	f3c4 2405 	ubfx	r4, r4, #8, #6
 80015a4:	44a4      	add	ip, r4
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO0SA + (GetIndex * hfdcan->Init.RxFifo0ElmtSize * 4U));
 80015a6:	6f44      	ldr	r4, [r0, #116]	; 0x74
 80015a8:	6c45      	ldr	r5, [r0, #68]	; 0x44
 80015aa:	fb0c f505 	mul.w	r5, ip, r5
 80015ae:	eb04 0485 	add.w	r4, r4, r5, lsl #2
 80015b2:	e039      	b.n	8001628 <HAL_FDCAN_GetRxMessage+0x104>
      if ((hfdcan->Instance->RXF1C & FDCAN_RXF1C_F1S) == 0U)
 80015b4:	6804      	ldr	r4, [r0, #0]
 80015b6:	f8d4 50b0 	ldr.w	r5, [r4, #176]	; 0xb0
 80015ba:	f415 0ffe 	tst.w	r5, #8323072	; 0x7f0000
 80015be:	d00c      	beq.n	80015da <HAL_FDCAN_GetRxMessage+0xb6>
      if ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1FL) == 0U)
 80015c0:	f8d4 50b4 	ldr.w	r5, [r4, #180]	; 0xb4
 80015c4:	f015 0f7f 	tst.w	r5, #127	; 0x7f
 80015c8:	d10f      	bne.n	80015ea <HAL_FDCAN_GetRxMessage+0xc6>
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 80015ca:	f8d0 309c 	ldr.w	r3, [r0, #156]	; 0x9c
 80015ce:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80015d2:	f8c0 309c 	str.w	r3, [r0, #156]	; 0x9c
        return HAL_ERROR;
 80015d6:	2001      	movs	r0, #1
 80015d8:	e084      	b.n	80016e4 <HAL_FDCAN_GetRxMessage+0x1c0>
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 80015da:	f8d0 309c 	ldr.w	r3, [r0, #156]	; 0x9c
 80015de:	f043 0320 	orr.w	r3, r3, #32
 80015e2:	f8c0 309c 	str.w	r3, [r0, #156]	; 0x9c
        return HAL_ERROR;
 80015e6:	2001      	movs	r0, #1
 80015e8:	e07c      	b.n	80016e4 <HAL_FDCAN_GetRxMessage+0x1c0>
        if(((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1F) >> FDCAN_RXF1S_F1F_Pos) == 1U)
 80015ea:	f8d4 50b4 	ldr.w	r5, [r4, #180]	; 0xb4
 80015ee:	f3c5 6c00 	ubfx	ip, r5, #24, #1
 80015f2:	f015 7f80 	tst.w	r5, #16777216	; 0x1000000
 80015f6:	d003      	beq.n	8001600 <HAL_FDCAN_GetRxMessage+0xdc>
          if(((hfdcan->Instance->RXF1C & FDCAN_RXF1C_F1OM) >> FDCAN_RXF1C_F1OM_Pos) == FDCAN_RX_FIFO_OVERWRITE)
 80015f8:	f8d4 50b0 	ldr.w	r5, [r4, #176]	; 0xb0
  uint32_t GetIndex = 0;
 80015fc:	f04f 0c00 	mov.w	ip, #0
        GetIndex += ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1GI) >> FDCAN_RXF1S_F1GI_Pos);
 8001600:	f8d4 40b4 	ldr.w	r4, [r4, #180]	; 0xb4
 8001604:	f3c4 2405 	ubfx	r4, r4, #8, #6
 8001608:	44a4      	add	ip, r4
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO1SA + (GetIndex * hfdcan->Init.RxFifo1ElmtSize * 4U));
 800160a:	6f84      	ldr	r4, [r0, #120]	; 0x78
 800160c:	6cc5      	ldr	r5, [r0, #76]	; 0x4c
 800160e:	fb0c f505 	mul.w	r5, ip, r5
 8001612:	eb04 0485 	add.w	r4, r4, r5, lsl #2
 8001616:	e007      	b.n	8001628 <HAL_FDCAN_GetRxMessage+0x104>
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxBufferSA + (RxLocation * hfdcan->Init.RxBufferSize * 4U));
 8001618:	6fc4      	ldr	r4, [r0, #124]	; 0x7c
 800161a:	6d45      	ldr	r5, [r0, #84]	; 0x54
 800161c:	fb01 f505 	mul.w	r5, r1, r5
 8001620:	eb04 0485 	add.w	r4, r4, r5, lsl #2
  uint32_t GetIndex = 0;
 8001624:	f04f 0c00 	mov.w	ip, #0
    pRxHeader->IdType = *RxAddress & FDCAN_ELEMENT_MASK_XTD;
 8001628:	6825      	ldr	r5, [r4, #0]
 800162a:	f005 4580 	and.w	r5, r5, #1073741824	; 0x40000000
 800162e:	6055      	str	r5, [r2, #4]
    if (pRxHeader->IdType == FDCAN_STANDARD_ID) /* Standard ID element */
 8001630:	2d00      	cmp	r5, #0
 8001632:	d12c      	bne.n	800168e <HAL_FDCAN_GetRxMessage+0x16a>
      pRxHeader->Identifier = ((*RxAddress & FDCAN_ELEMENT_MASK_STDID) >> 18);
 8001634:	6825      	ldr	r5, [r4, #0]
 8001636:	f3c5 458a 	ubfx	r5, r5, #18, #11
 800163a:	6015      	str	r5, [r2, #0]
    pRxHeader->RxFrameType = (*RxAddress & FDCAN_ELEMENT_MASK_RTR);
 800163c:	6825      	ldr	r5, [r4, #0]
 800163e:	f005 5500 	and.w	r5, r5, #536870912	; 0x20000000
 8001642:	6095      	str	r5, [r2, #8]
    pRxHeader->ErrorStateIndicator = (*RxAddress & FDCAN_ELEMENT_MASK_ESI);
 8001644:	6825      	ldr	r5, [r4, #0]
 8001646:	f005 4500 	and.w	r5, r5, #2147483648	; 0x80000000
 800164a:	6115      	str	r5, [r2, #16]
    pRxHeader->RxTimestamp = (*RxAddress & FDCAN_ELEMENT_MASK_TS);
 800164c:	88a5      	ldrh	r5, [r4, #4]
 800164e:	61d5      	str	r5, [r2, #28]
    pRxHeader->DataLength = (*RxAddress & FDCAN_ELEMENT_MASK_DLC);
 8001650:	6865      	ldr	r5, [r4, #4]
 8001652:	f405 2570 	and.w	r5, r5, #983040	; 0xf0000
 8001656:	60d5      	str	r5, [r2, #12]
    pRxHeader->BitRateSwitch = (*RxAddress & FDCAN_ELEMENT_MASK_BRS);
 8001658:	6865      	ldr	r5, [r4, #4]
 800165a:	f405 1580 	and.w	r5, r5, #1048576	; 0x100000
 800165e:	6155      	str	r5, [r2, #20]
    pRxHeader->FDFormat = (*RxAddress & FDCAN_ELEMENT_MASK_FDF);
 8001660:	6865      	ldr	r5, [r4, #4]
 8001662:	f405 1500 	and.w	r5, r5, #2097152	; 0x200000
 8001666:	6195      	str	r5, [r2, #24]
    pRxHeader->FilterIndex = ((*RxAddress & FDCAN_ELEMENT_MASK_FIDX) >> 24);
 8001668:	79e5      	ldrb	r5, [r4, #7]
 800166a:	f005 057f 	and.w	r5, r5, #127	; 0x7f
 800166e:	6215      	str	r5, [r2, #32]
    pRxHeader->IsFilterMatchingFrame = ((*RxAddress & FDCAN_ELEMENT_MASK_ANMF) >> 31);
 8001670:	6865      	ldr	r5, [r4, #4]
 8001672:	0fed      	lsrs	r5, r5, #31
 8001674:	6255      	str	r5, [r2, #36]	; 0x24
    RxAddress++;
 8001676:	f104 0508 	add.w	r5, r4, #8
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength >> 16]; ByteCounter++)
 800167a:	2400      	movs	r4, #0
 800167c:	89d6      	ldrh	r6, [r2, #14]
 800167e:	4f1a      	ldr	r7, [pc, #104]	; (80016e8 <HAL_FDCAN_GetRxMessage+0x1c4>)
 8001680:	5dbe      	ldrb	r6, [r7, r6]
 8001682:	42a6      	cmp	r6, r4
 8001684:	d908      	bls.n	8001698 <HAL_FDCAN_GetRxMessage+0x174>
      pRxData[ByteCounter] = pData[ByteCounter];
 8001686:	5d2e      	ldrb	r6, [r5, r4]
 8001688:	551e      	strb	r6, [r3, r4]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength >> 16]; ByteCounter++)
 800168a:	3401      	adds	r4, #1
 800168c:	e7f6      	b.n	800167c <HAL_FDCAN_GetRxMessage+0x158>
      pRxHeader->Identifier = (*RxAddress & FDCAN_ELEMENT_MASK_EXTID);
 800168e:	6825      	ldr	r5, [r4, #0]
 8001690:	f025 4560 	bic.w	r5, r5, #3758096384	; 0xe0000000
 8001694:	6015      	str	r5, [r2, #0]
 8001696:	e7d1      	b.n	800163c <HAL_FDCAN_GetRxMessage+0x118>
    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 8001698:	2940      	cmp	r1, #64	; 0x40
 800169a:	d00a      	beq.n	80016b2 <HAL_FDCAN_GetRxMessage+0x18e>
    else if (RxLocation == FDCAN_RX_FIFO1) /* Rx element is assigned to the Rx FIFO 1 */
 800169c:	2941      	cmp	r1, #65	; 0x41
 800169e:	d00d      	beq.n	80016bc <HAL_FDCAN_GetRxMessage+0x198>
      if (RxLocation < FDCAN_RX_BUFFER32)
 80016a0:	291f      	cmp	r1, #31
 80016a2:	d80f      	bhi.n	80016c4 <HAL_FDCAN_GetRxMessage+0x1a0>
        hfdcan->Instance->NDAT1 = ((uint32_t)1 << RxLocation);
 80016a4:	6802      	ldr	r2, [r0, #0]
 80016a6:	2301      	movs	r3, #1
 80016a8:	fa03 f101 	lsl.w	r1, r3, r1
 80016ac:	f8c2 1098 	str.w	r1, [r2, #152]	; 0x98
 80016b0:	e002      	b.n	80016b8 <HAL_FDCAN_GetRxMessage+0x194>
      hfdcan->Instance->RXF0A = GetIndex;
 80016b2:	6803      	ldr	r3, [r0, #0]
 80016b4:	f8c3 c0a8 	str.w	ip, [r3, #168]	; 0xa8
    return HAL_OK;
 80016b8:	2000      	movs	r0, #0
 80016ba:	e013      	b.n	80016e4 <HAL_FDCAN_GetRxMessage+0x1c0>
      hfdcan->Instance->RXF1A = GetIndex;
 80016bc:	6803      	ldr	r3, [r0, #0]
 80016be:	f8c3 c0b8 	str.w	ip, [r3, #184]	; 0xb8
 80016c2:	e7f9      	b.n	80016b8 <HAL_FDCAN_GetRxMessage+0x194>
        hfdcan->Instance->NDAT2 = ((uint32_t)1 << (RxLocation & 0x1FU));
 80016c4:	f001 011f 	and.w	r1, r1, #31
 80016c8:	6802      	ldr	r2, [r0, #0]
 80016ca:	2301      	movs	r3, #1
 80016cc:	fa03 f101 	lsl.w	r1, r3, r1
 80016d0:	f8c2 109c 	str.w	r1, [r2, #156]	; 0x9c
 80016d4:	e7f0      	b.n	80016b8 <HAL_FDCAN_GetRxMessage+0x194>
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 80016d6:	f8d0 309c 	ldr.w	r3, [r0, #156]	; 0x9c
 80016da:	f043 0308 	orr.w	r3, r3, #8
 80016de:	f8c0 309c 	str.w	r3, [r0, #156]	; 0x9c
    return HAL_ERROR;
 80016e2:	2001      	movs	r0, #1
}
 80016e4:	bcf0      	pop	{r4, r5, r6, r7}
 80016e6:	4770      	bx	lr
 80016e8:	0800950c 	.word	0x0800950c

080016ec <HAL_FDCAN_ActivateNotification>:
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 80016ec:	f890 3098 	ldrb.w	r3, [r0, #152]	; 0x98
  if ((state == HAL_FDCAN_STATE_READY) || (state == HAL_FDCAN_STATE_BUSY))
 80016f0:	3b01      	subs	r3, #1
 80016f2:	b2db      	uxtb	r3, r3
 80016f4:	2b01      	cmp	r3, #1
 80016f6:	d907      	bls.n	8001708 <HAL_FDCAN_ActivateNotification+0x1c>
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_INITIALIZED;
 80016f8:	f8d0 309c 	ldr.w	r3, [r0, #156]	; 0x9c
 80016fc:	f043 0302 	orr.w	r3, r3, #2
 8001700:	f8c0 309c 	str.w	r3, [r0, #156]	; 0x9c
    return HAL_ERROR;
 8001704:	2001      	movs	r0, #1
}
 8001706:	4770      	bx	lr
{
 8001708:	b410      	push	{r4}
    if ((ActiveITs & hfdcan->Instance->ILS) == 0U)
 800170a:	6803      	ldr	r3, [r0, #0]
 800170c:	6d9c      	ldr	r4, [r3, #88]	; 0x58
 800170e:	420c      	tst	r4, r1
 8001710:	d124      	bne.n	800175c <HAL_FDCAN_ActivateNotification+0x70>
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE0);
 8001712:	6ddc      	ldr	r4, [r3, #92]	; 0x5c
 8001714:	f044 0401 	orr.w	r4, r4, #1
 8001718:	65dc      	str	r4, [r3, #92]	; 0x5c
    if ((ActiveITs & FDCAN_IT_TX_COMPLETE) != 0U)
 800171a:	f411 7f00 	tst.w	r1, #512	; 0x200
 800171e:	d005      	beq.n	800172c <HAL_FDCAN_ActivateNotification+0x40>
      SET_BIT(hfdcan->Instance->TXBTIE, BufferIndexes);
 8001720:	6804      	ldr	r4, [r0, #0]
 8001722:	f8d4 30e0 	ldr.w	r3, [r4, #224]	; 0xe0
 8001726:	4313      	orrs	r3, r2
 8001728:	f8c4 30e0 	str.w	r3, [r4, #224]	; 0xe0
    if ((ActiveITs & FDCAN_IT_TX_ABORT_COMPLETE) != 0U)
 800172c:	f411 6f80 	tst.w	r1, #1024	; 0x400
 8001730:	d005      	beq.n	800173e <HAL_FDCAN_ActivateNotification+0x52>
      SET_BIT(hfdcan->Instance->TXBCIE, BufferIndexes);
 8001732:	6804      	ldr	r4, [r0, #0]
 8001734:	f8d4 30e4 	ldr.w	r3, [r4, #228]	; 0xe4
 8001738:	431a      	orrs	r2, r3
 800173a:	f8c4 20e4 	str.w	r2, [r4, #228]	; 0xe4
    __HAL_FDCAN_ENABLE_IT(hfdcan, ActiveITs);
 800173e:	6800      	ldr	r0, [r0, #0]
 8001740:	6d43      	ldr	r3, [r0, #84]	; 0x54
 8001742:	4a0c      	ldr	r2, [pc, #48]	; (8001774 <HAL_FDCAN_ActivateNotification+0x88>)
 8001744:	400a      	ands	r2, r1
 8001746:	4313      	orrs	r3, r2
 8001748:	6543      	str	r3, [r0, #84]	; 0x54
 800174a:	4a0b      	ldr	r2, [pc, #44]	; (8001778 <HAL_FDCAN_ActivateNotification+0x8c>)
 800174c:	6953      	ldr	r3, [r2, #20]
 800174e:	ea43 7191 	orr.w	r1, r3, r1, lsr #30
 8001752:	6151      	str	r1, [r2, #20]
    return HAL_OK;
 8001754:	2000      	movs	r0, #0
}
 8001756:	f85d 4b04 	ldr.w	r4, [sp], #4
 800175a:	4770      	bx	lr
    else if ((ActiveITs & hfdcan->Instance->ILS) == ActiveITs)
 800175c:	6d9c      	ldr	r4, [r3, #88]	; 0x58
 800175e:	ea31 0404 	bics.w	r4, r1, r4
 8001762:	d002      	beq.n	800176a <HAL_FDCAN_ActivateNotification+0x7e>
      hfdcan->Instance->ILE = (FDCAN_INTERRUPT_LINE0 | FDCAN_INTERRUPT_LINE1);
 8001764:	2403      	movs	r4, #3
 8001766:	65dc      	str	r4, [r3, #92]	; 0x5c
 8001768:	e7d7      	b.n	800171a <HAL_FDCAN_ActivateNotification+0x2e>
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE1);
 800176a:	6ddc      	ldr	r4, [r3, #92]	; 0x5c
 800176c:	f044 0402 	orr.w	r4, r4, #2
 8001770:	65dc      	str	r4, [r3, #92]	; 0x5c
 8001772:	e7d2      	b.n	800171a <HAL_FDCAN_ActivateNotification+0x2e>
 8001774:	3fcfffff 	.word	0x3fcfffff
 8001778:	4000a800 	.word	0x4000a800

0800177c <HAL_FDCAN_ClockCalibrationCallback>:
}
 800177c:	4770      	bx	lr

0800177e <HAL_FDCAN_TxEventFifoCallback>:
}
 800177e:	4770      	bx	lr

08001780 <HAL_FDCAN_RxFifo1Callback>:
}
 8001780:	4770      	bx	lr

08001782 <HAL_FDCAN_TxFifoEmptyCallback>:
}
 8001782:	4770      	bx	lr

08001784 <HAL_FDCAN_TxBufferCompleteCallback>:
}
 8001784:	4770      	bx	lr

08001786 <HAL_FDCAN_TxBufferAbortCallback>:
}
 8001786:	4770      	bx	lr

08001788 <HAL_FDCAN_RxBufferNewMessageCallback>:
}
 8001788:	4770      	bx	lr

0800178a <HAL_FDCAN_TimestampWraparoundCallback>:
}
 800178a:	4770      	bx	lr

0800178c <HAL_FDCAN_TimeoutOccurredCallback>:
}
 800178c:	4770      	bx	lr

0800178e <HAL_FDCAN_HighPriorityMessageCallback>:
}
 800178e:	4770      	bx	lr

08001790 <HAL_FDCAN_ErrorCallback>:
}
 8001790:	4770      	bx	lr

08001792 <HAL_FDCAN_ErrorStatusCallback>:
}
 8001792:	4770      	bx	lr

08001794 <HAL_FDCAN_TT_ScheduleSyncCallback>:
}
 8001794:	4770      	bx	lr

08001796 <HAL_FDCAN_TT_TimeMarkCallback>:
}
 8001796:	4770      	bx	lr

08001798 <HAL_FDCAN_TT_StopWatchCallback>:
}
 8001798:	4770      	bx	lr

0800179a <HAL_FDCAN_TT_GlobalTimeCallback>:
}
 800179a:	4770      	bx	lr

0800179c <HAL_FDCAN_IRQHandler>:
{
 800179c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80017a0:	4604      	mov	r4, r0
  ClkCalibrationITs = (FDCAN_CCU->IR << 30);
 80017a2:	4b95      	ldr	r3, [pc, #596]	; (80019f8 <HAL_FDCAN_IRQHandler+0x25c>)
 80017a4:	691a      	ldr	r2, [r3, #16]
  ClkCalibrationITs &= (FDCAN_CCU->IE << 30);
 80017a6:	695b      	ldr	r3, [r3, #20]
 80017a8:	ea4f 7a83 	mov.w	sl, r3, lsl #30
 80017ac:	ea0a 7a82 	and.w	sl, sl, r2, lsl #30
  TxEventFifoITs = hfdcan->Instance->IR & FDCAN_TX_EVENT_FIFO_MASK;
 80017b0:	6803      	ldr	r3, [r0, #0]
 80017b2:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80017b4:	f402 4970 	and.w	r9, r2, #61440	; 0xf000
  TxEventFifoITs &= hfdcan->Instance->IE;
 80017b8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80017ba:	ea09 0902 	and.w	r9, r9, r2
  RxFifo0ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO0_MASK;
 80017be:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80017c0:	f002 080f 	and.w	r8, r2, #15
  RxFifo0ITs &= hfdcan->Instance->IE;
 80017c4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80017c6:	ea08 0802 	and.w	r8, r8, r2
  RxFifo1ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO1_MASK;
 80017ca:	6d1f      	ldr	r7, [r3, #80]	; 0x50
 80017cc:	f007 07f0 	and.w	r7, r7, #240	; 0xf0
  RxFifo1ITs &= hfdcan->Instance->IE;
 80017d0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80017d2:	4017      	ands	r7, r2
  Errors = hfdcan->Instance->IR & FDCAN_ERROR_MASK;
 80017d4:	6d1d      	ldr	r5, [r3, #80]	; 0x50
 80017d6:	f005 5571 	and.w	r5, r5, #1010827264	; 0x3c400000
  Errors &= hfdcan->Instance->IE;
 80017da:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80017dc:	4015      	ands	r5, r2
  ErrorStatusITs = hfdcan->Instance->IR & FDCAN_ERROR_STATUS_MASK;
 80017de:	6d1e      	ldr	r6, [r3, #80]	; 0x50
 80017e0:	f006 7660 	and.w	r6, r6, #58720256	; 0x3800000
  ErrorStatusITs &= hfdcan->Instance->IE;
 80017e4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80017e6:	4016      	ands	r6, r2
  if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_RX_HIGH_PRIORITY_MSG) != 0U)
 80017e8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80017ea:	f412 7f80 	tst.w	r2, #256	; 0x100
 80017ee:	d003      	beq.n	80017f8 <HAL_FDCAN_IRQHandler+0x5c>
    if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG) != 0U)
 80017f0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80017f2:	f412 7f80 	tst.w	r2, #256	; 0x100
 80017f6:	d178      	bne.n	80018ea <HAL_FDCAN_IRQHandler+0x14e>
  if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TX_ABORT_COMPLETE) != 0U)
 80017f8:	6823      	ldr	r3, [r4, #0]
 80017fa:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80017fc:	f412 6f80 	tst.w	r2, #1024	; 0x400
 8001800:	d003      	beq.n	800180a <HAL_FDCAN_IRQHandler+0x6e>
    if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TX_ABORT_COMPLETE) != 0U)
 8001802:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001804:	f412 6f80 	tst.w	r2, #1024	; 0x400
 8001808:	d178      	bne.n	80018fc <HAL_FDCAN_IRQHandler+0x160>
  if (ClkCalibrationITs != 0U)
 800180a:	f1ba 0f00 	cmp.w	sl, #0
 800180e:	f040 8084 	bne.w	800191a <HAL_FDCAN_IRQHandler+0x17e>
  if (TxEventFifoITs != 0U)
 8001812:	f1b9 0f00 	cmp.w	r9, #0
 8001816:	f040 808c 	bne.w	8001932 <HAL_FDCAN_IRQHandler+0x196>
  if (RxFifo0ITs != 0U)
 800181a:	f1b8 0f00 	cmp.w	r8, #0
 800181e:	f040 8094 	bne.w	800194a <HAL_FDCAN_IRQHandler+0x1ae>
  if (RxFifo1ITs != 0U)
 8001822:	2f00      	cmp	r7, #0
 8001824:	f040 809d 	bne.w	8001962 <HAL_FDCAN_IRQHandler+0x1c6>
  if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TX_FIFO_EMPTY) != 0U)
 8001828:	6823      	ldr	r3, [r4, #0]
 800182a:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800182c:	f412 6f00 	tst.w	r2, #2048	; 0x800
 8001830:	d004      	beq.n	800183c <HAL_FDCAN_IRQHandler+0xa0>
    if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TX_FIFO_EMPTY) != 0U)
 8001832:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001834:	f412 6f00 	tst.w	r2, #2048	; 0x800
 8001838:	f040 809d 	bne.w	8001976 <HAL_FDCAN_IRQHandler+0x1da>
  if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TX_COMPLETE) != 0U)
 800183c:	6823      	ldr	r3, [r4, #0]
 800183e:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8001840:	f412 7f00 	tst.w	r2, #512	; 0x200
 8001844:	d004      	beq.n	8001850 <HAL_FDCAN_IRQHandler+0xb4>
    if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TX_COMPLETE) != 0U)
 8001846:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001848:	f412 7f00 	tst.w	r2, #512	; 0x200
 800184c:	f040 809d 	bne.w	800198a <HAL_FDCAN_IRQHandler+0x1ee>
  if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_RX_BUFFER_NEW_MESSAGE) != 0U)
 8001850:	6823      	ldr	r3, [r4, #0]
 8001852:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8001854:	f412 2f00 	tst.w	r2, #524288	; 0x80000
 8001858:	d004      	beq.n	8001864 <HAL_FDCAN_IRQHandler+0xc8>
    if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_RX_BUFFER_NEW_MESSAGE) != 0U)
 800185a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800185c:	f412 2f00 	tst.w	r2, #524288	; 0x80000
 8001860:	f040 80a2 	bne.w	80019a8 <HAL_FDCAN_IRQHandler+0x20c>
  if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TIMESTAMP_WRAPAROUND) != 0U)
 8001864:	6823      	ldr	r3, [r4, #0]
 8001866:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8001868:	f412 3f80 	tst.w	r2, #65536	; 0x10000
 800186c:	d004      	beq.n	8001878 <HAL_FDCAN_IRQHandler+0xdc>
    if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TIMESTAMP_WRAPAROUND) != 0U)
 800186e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001870:	f412 3f80 	tst.w	r2, #65536	; 0x10000
 8001874:	f040 80a2 	bne.w	80019bc <HAL_FDCAN_IRQHandler+0x220>
  if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TIMEOUT_OCCURRED) != 0U)
 8001878:	6823      	ldr	r3, [r4, #0]
 800187a:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800187c:	f412 2f80 	tst.w	r2, #262144	; 0x40000
 8001880:	d004      	beq.n	800188c <HAL_FDCAN_IRQHandler+0xf0>
    if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TIMEOUT_OCCURRED) != 0U)
 8001882:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001884:	f412 2f80 	tst.w	r2, #262144	; 0x40000
 8001888:	f040 80a2 	bne.w	80019d0 <HAL_FDCAN_IRQHandler+0x234>
  if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_RAM_ACCESS_FAILURE) != 0U)
 800188c:	6823      	ldr	r3, [r4, #0]
 800188e:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8001890:	f412 3f00 	tst.w	r2, #131072	; 0x20000
 8001894:	d00f      	beq.n	80018b6 <HAL_FDCAN_IRQHandler+0x11a>
    if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_RAM_ACCESS_FAILURE) != 0U)
 8001896:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001898:	f412 3f00 	tst.w	r2, #131072	; 0x20000
 800189c:	d00b      	beq.n	80018b6 <HAL_FDCAN_IRQHandler+0x11a>
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RAM_ACCESS_FAILURE);
 800189e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80018a2:	651a      	str	r2, [r3, #80]	; 0x50
 80018a4:	4b54      	ldr	r3, [pc, #336]	; (80019f8 <HAL_FDCAN_IRQHandler+0x25c>)
 80018a6:	2200      	movs	r2, #0
 80018a8:	611a      	str	r2, [r3, #16]
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_RAM_ACCESS;
 80018aa:	f8d4 309c 	ldr.w	r3, [r4, #156]	; 0x9c
 80018ae:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80018b2:	f8c4 309c 	str.w	r3, [r4, #156]	; 0x9c
  if (ErrorStatusITs != 0U)
 80018b6:	2e00      	cmp	r6, #0
 80018b8:	f040 8094 	bne.w	80019e4 <HAL_FDCAN_IRQHandler+0x248>
  if (Errors != 0U)
 80018bc:	b14d      	cbz	r5, 80018d2 <HAL_FDCAN_IRQHandler+0x136>
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, Errors);
 80018be:	6823      	ldr	r3, [r4, #0]
 80018c0:	651d      	str	r5, [r3, #80]	; 0x50
 80018c2:	0faa      	lsrs	r2, r5, #30
 80018c4:	4b4c      	ldr	r3, [pc, #304]	; (80019f8 <HAL_FDCAN_IRQHandler+0x25c>)
 80018c6:	611a      	str	r2, [r3, #16]
    hfdcan->ErrorCode |= Errors;
 80018c8:	f8d4 309c 	ldr.w	r3, [r4, #156]	; 0x9c
 80018cc:	431d      	orrs	r5, r3
 80018ce:	f8c4 509c 	str.w	r5, [r4, #156]	; 0x9c
  if (hfdcan->Instance == FDCAN1)
 80018d2:	6822      	ldr	r2, [r4, #0]
 80018d4:	4b49      	ldr	r3, [pc, #292]	; (80019fc <HAL_FDCAN_IRQHandler+0x260>)
 80018d6:	429a      	cmp	r2, r3
 80018d8:	f000 8092 	beq.w	8001a00 <HAL_FDCAN_IRQHandler+0x264>
  if (hfdcan->ErrorCode != HAL_FDCAN_ERROR_NONE)
 80018dc:	f8d4 309c 	ldr.w	r3, [r4, #156]	; 0x9c
 80018e0:	2b00      	cmp	r3, #0
 80018e2:	f040 80ed 	bne.w	8001ac0 <HAL_FDCAN_IRQHandler+0x324>
}
 80018e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG);
 80018ea:	f44f 7280 	mov.w	r2, #256	; 0x100
 80018ee:	651a      	str	r2, [r3, #80]	; 0x50
 80018f0:	4b41      	ldr	r3, [pc, #260]	; (80019f8 <HAL_FDCAN_IRQHandler+0x25c>)
 80018f2:	2200      	movs	r2, #0
 80018f4:	611a      	str	r2, [r3, #16]
      HAL_FDCAN_HighPriorityMessageCallback(hfdcan);
 80018f6:	f7ff ff4a 	bl	800178e <HAL_FDCAN_HighPriorityMessageCallback>
 80018fa:	e77d      	b.n	80017f8 <HAL_FDCAN_IRQHandler+0x5c>
      AbortedBuffers = hfdcan->Instance->TXBCF;
 80018fc:	f8d3 10dc 	ldr.w	r1, [r3, #220]	; 0xdc
      AbortedBuffers &= hfdcan->Instance->TXBCIE;
 8001900:	f8d3 20e4 	ldr.w	r2, [r3, #228]	; 0xe4
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_ABORT_COMPLETE);
 8001904:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8001908:	6518      	str	r0, [r3, #80]	; 0x50
 800190a:	4b3b      	ldr	r3, [pc, #236]	; (80019f8 <HAL_FDCAN_IRQHandler+0x25c>)
 800190c:	2000      	movs	r0, #0
 800190e:	6118      	str	r0, [r3, #16]
      HAL_FDCAN_TxBufferAbortCallback(hfdcan, AbortedBuffers);
 8001910:	4011      	ands	r1, r2
 8001912:	4620      	mov	r0, r4
 8001914:	f7ff ff37 	bl	8001786 <HAL_FDCAN_TxBufferAbortCallback>
 8001918:	e777      	b.n	800180a <HAL_FDCAN_IRQHandler+0x6e>
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, ClkCalibrationITs);
 800191a:	6823      	ldr	r3, [r4, #0]
 800191c:	2200      	movs	r2, #0
 800191e:	651a      	str	r2, [r3, #80]	; 0x50
 8001920:	ea4f 729a 	mov.w	r2, sl, lsr #30
 8001924:	4b34      	ldr	r3, [pc, #208]	; (80019f8 <HAL_FDCAN_IRQHandler+0x25c>)
 8001926:	611a      	str	r2, [r3, #16]
    HAL_FDCAN_ClockCalibrationCallback(hfdcan, ClkCalibrationITs);
 8001928:	4651      	mov	r1, sl
 800192a:	4620      	mov	r0, r4
 800192c:	f7ff ff26 	bl	800177c <HAL_FDCAN_ClockCalibrationCallback>
 8001930:	e76f      	b.n	8001812 <HAL_FDCAN_IRQHandler+0x76>
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, TxEventFifoITs);
 8001932:	6823      	ldr	r3, [r4, #0]
 8001934:	f8c3 9050 	str.w	r9, [r3, #80]	; 0x50
 8001938:	ea4f 7299 	mov.w	r2, r9, lsr #30
 800193c:	4b2e      	ldr	r3, [pc, #184]	; (80019f8 <HAL_FDCAN_IRQHandler+0x25c>)
 800193e:	611a      	str	r2, [r3, #16]
    HAL_FDCAN_TxEventFifoCallback(hfdcan, TxEventFifoITs);
 8001940:	4649      	mov	r1, r9
 8001942:	4620      	mov	r0, r4
 8001944:	f7ff ff1b 	bl	800177e <HAL_FDCAN_TxEventFifoCallback>
 8001948:	e767      	b.n	800181a <HAL_FDCAN_IRQHandler+0x7e>
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo0ITs);
 800194a:	6823      	ldr	r3, [r4, #0]
 800194c:	f8c3 8050 	str.w	r8, [r3, #80]	; 0x50
 8001950:	ea4f 7298 	mov.w	r2, r8, lsr #30
 8001954:	4b28      	ldr	r3, [pc, #160]	; (80019f8 <HAL_FDCAN_IRQHandler+0x25c>)
 8001956:	611a      	str	r2, [r3, #16]
    HAL_FDCAN_RxFifo0Callback(hfdcan, RxFifo0ITs);
 8001958:	4641      	mov	r1, r8
 800195a:	4620      	mov	r0, r4
 800195c:	f006 f86c 	bl	8007a38 <HAL_FDCAN_RxFifo0Callback>
 8001960:	e75f      	b.n	8001822 <HAL_FDCAN_IRQHandler+0x86>
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo1ITs);
 8001962:	6823      	ldr	r3, [r4, #0]
 8001964:	651f      	str	r7, [r3, #80]	; 0x50
 8001966:	0fba      	lsrs	r2, r7, #30
 8001968:	4b23      	ldr	r3, [pc, #140]	; (80019f8 <HAL_FDCAN_IRQHandler+0x25c>)
 800196a:	611a      	str	r2, [r3, #16]
    HAL_FDCAN_RxFifo1Callback(hfdcan, RxFifo1ITs);
 800196c:	4639      	mov	r1, r7
 800196e:	4620      	mov	r0, r4
 8001970:	f7ff ff06 	bl	8001780 <HAL_FDCAN_RxFifo1Callback>
 8001974:	e758      	b.n	8001828 <HAL_FDCAN_IRQHandler+0x8c>
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_FIFO_EMPTY);
 8001976:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800197a:	651a      	str	r2, [r3, #80]	; 0x50
 800197c:	4b1e      	ldr	r3, [pc, #120]	; (80019f8 <HAL_FDCAN_IRQHandler+0x25c>)
 800197e:	2200      	movs	r2, #0
 8001980:	611a      	str	r2, [r3, #16]
      HAL_FDCAN_TxFifoEmptyCallback(hfdcan);
 8001982:	4620      	mov	r0, r4
 8001984:	f7ff fefd 	bl	8001782 <HAL_FDCAN_TxFifoEmptyCallback>
 8001988:	e758      	b.n	800183c <HAL_FDCAN_IRQHandler+0xa0>
      TransmittedBuffers = hfdcan->Instance->TXBTO;
 800198a:	f8d3 10d8 	ldr.w	r1, [r3, #216]	; 0xd8
      TransmittedBuffers &= hfdcan->Instance->TXBTIE;
 800198e:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_COMPLETE);
 8001992:	f44f 7000 	mov.w	r0, #512	; 0x200
 8001996:	6518      	str	r0, [r3, #80]	; 0x50
 8001998:	4b17      	ldr	r3, [pc, #92]	; (80019f8 <HAL_FDCAN_IRQHandler+0x25c>)
 800199a:	2000      	movs	r0, #0
 800199c:	6118      	str	r0, [r3, #16]
      HAL_FDCAN_TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
 800199e:	4011      	ands	r1, r2
 80019a0:	4620      	mov	r0, r4
 80019a2:	f7ff feef 	bl	8001784 <HAL_FDCAN_TxBufferCompleteCallback>
 80019a6:	e753      	b.n	8001850 <HAL_FDCAN_IRQHandler+0xb4>
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RX_BUFFER_NEW_MESSAGE);
 80019a8:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 80019ac:	651a      	str	r2, [r3, #80]	; 0x50
 80019ae:	4b12      	ldr	r3, [pc, #72]	; (80019f8 <HAL_FDCAN_IRQHandler+0x25c>)
 80019b0:	2200      	movs	r2, #0
 80019b2:	611a      	str	r2, [r3, #16]
      HAL_FDCAN_RxBufferNewMessageCallback(hfdcan);
 80019b4:	4620      	mov	r0, r4
 80019b6:	f7ff fee7 	bl	8001788 <HAL_FDCAN_RxBufferNewMessageCallback>
 80019ba:	e753      	b.n	8001864 <HAL_FDCAN_IRQHandler+0xc8>
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMESTAMP_WRAPAROUND);
 80019bc:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80019c0:	651a      	str	r2, [r3, #80]	; 0x50
 80019c2:	4b0d      	ldr	r3, [pc, #52]	; (80019f8 <HAL_FDCAN_IRQHandler+0x25c>)
 80019c4:	2200      	movs	r2, #0
 80019c6:	611a      	str	r2, [r3, #16]
      HAL_FDCAN_TimestampWraparoundCallback(hfdcan);
 80019c8:	4620      	mov	r0, r4
 80019ca:	f7ff fede 	bl	800178a <HAL_FDCAN_TimestampWraparoundCallback>
 80019ce:	e753      	b.n	8001878 <HAL_FDCAN_IRQHandler+0xdc>
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMEOUT_OCCURRED);
 80019d0:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 80019d4:	651a      	str	r2, [r3, #80]	; 0x50
 80019d6:	4b08      	ldr	r3, [pc, #32]	; (80019f8 <HAL_FDCAN_IRQHandler+0x25c>)
 80019d8:	2200      	movs	r2, #0
 80019da:	611a      	str	r2, [r3, #16]
      HAL_FDCAN_TimeoutOccurredCallback(hfdcan);
 80019dc:	4620      	mov	r0, r4
 80019de:	f7ff fed5 	bl	800178c <HAL_FDCAN_TimeoutOccurredCallback>
 80019e2:	e753      	b.n	800188c <HAL_FDCAN_IRQHandler+0xf0>
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, ErrorStatusITs);
 80019e4:	6823      	ldr	r3, [r4, #0]
 80019e6:	651e      	str	r6, [r3, #80]	; 0x50
 80019e8:	0fb2      	lsrs	r2, r6, #30
 80019ea:	4b03      	ldr	r3, [pc, #12]	; (80019f8 <HAL_FDCAN_IRQHandler+0x25c>)
 80019ec:	611a      	str	r2, [r3, #16]
    HAL_FDCAN_ErrorStatusCallback(hfdcan, ErrorStatusITs);
 80019ee:	4631      	mov	r1, r6
 80019f0:	4620      	mov	r0, r4
 80019f2:	f7ff fece 	bl	8001792 <HAL_FDCAN_ErrorStatusCallback>
 80019f6:	e761      	b.n	80018bc <HAL_FDCAN_IRQHandler+0x120>
 80019f8:	4000a800 	.word	0x4000a800
 80019fc:	4000a000 	.word	0x4000a000
    if ((hfdcan->ttcan->TTOCF & FDCAN_TTOCF_OM) != 0U)
 8001a00:	6863      	ldr	r3, [r4, #4]
 8001a02:	689a      	ldr	r2, [r3, #8]
 8001a04:	f012 0f03 	tst.w	r2, #3
 8001a08:	f43f af68 	beq.w	80018dc <HAL_FDCAN_IRQHandler+0x140>
      TTSchedSyncITs = hfdcan->ttcan->TTIR & FDCAN_TT_SCHEDULE_SYNC_MASK;
 8001a0c:	6a19      	ldr	r1, [r3, #32]
 8001a0e:	f001 010f 	and.w	r1, r1, #15
      TTSchedSyncITs &= hfdcan->ttcan->TTIE;
 8001a12:	6a5a      	ldr	r2, [r3, #36]	; 0x24
      TTTimeMarkITs = hfdcan->ttcan->TTIR & FDCAN_TT_TIME_MARK_MASK;
 8001a14:	6a18      	ldr	r0, [r3, #32]
 8001a16:	f000 0830 	and.w	r8, r0, #48	; 0x30
      TTTimeMarkITs &= hfdcan->ttcan->TTIE;
 8001a1a:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8001a1c:	ea08 0800 	and.w	r8, r8, r0
      TTGlobTimeITs = hfdcan->ttcan->TTIR & FDCAN_TT_GLOBAL_TIME_MASK;
 8001a20:	6a1f      	ldr	r7, [r3, #32]
 8001a22:	f407 77c0 	and.w	r7, r7, #384	; 0x180
      TTGlobTimeITs &= hfdcan->ttcan->TTIE;
 8001a26:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8001a28:	4007      	ands	r7, r0
      TTDistErrors = hfdcan->ttcan->TTIR & FDCAN_TT_DISTURBING_ERROR_MASK;
 8001a2a:	6a1e      	ldr	r6, [r3, #32]
 8001a2c:	f406 46fc 	and.w	r6, r6, #32256	; 0x7e00
      TTDistErrors &= hfdcan->ttcan->TTIE;
 8001a30:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8001a32:	4006      	ands	r6, r0
      TTFatalErrors = hfdcan->ttcan->TTIR & FDCAN_TT_FATAL_ERROR_MASK;
 8001a34:	6a1d      	ldr	r5, [r3, #32]
 8001a36:	f405 25f0 	and.w	r5, r5, #491520	; 0x78000
      TTFatalErrors &= hfdcan->ttcan->TTIE;
 8001a3a:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8001a3c:	4005      	ands	r5, r0
      if (TTSchedSyncITs != 0U)
 8001a3e:	4011      	ands	r1, r2
 8001a40:	d11f      	bne.n	8001a82 <HAL_FDCAN_IRQHandler+0x2e6>
      if (TTTimeMarkITs != 0U)
 8001a42:	f1b8 0f00 	cmp.w	r8, #0
 8001a46:	d121      	bne.n	8001a8c <HAL_FDCAN_IRQHandler+0x2f0>
      if (__HAL_FDCAN_TT_GET_IT_SOURCE(hfdcan, FDCAN_TT_IT_STOP_WATCH) != 0U)
 8001a48:	6863      	ldr	r3, [r4, #4]
 8001a4a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001a4c:	f012 0f40 	tst.w	r2, #64	; 0x40
 8001a50:	d003      	beq.n	8001a5a <HAL_FDCAN_IRQHandler+0x2be>
        if (__HAL_FDCAN_TT_GET_FLAG(hfdcan, FDCAN_TT_FLAG_STOP_WATCH) != 0U)
 8001a52:	6a1a      	ldr	r2, [r3, #32]
 8001a54:	f012 0f40 	tst.w	r2, #64	; 0x40
 8001a58:	d120      	bne.n	8001a9c <HAL_FDCAN_IRQHandler+0x300>
      if (TTGlobTimeITs != 0U)
 8001a5a:	bb57      	cbnz	r7, 8001ab2 <HAL_FDCAN_IRQHandler+0x316>
      if (TTDistErrors != 0U)
 8001a5c:	b136      	cbz	r6, 8001a6c <HAL_FDCAN_IRQHandler+0x2d0>
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTDistErrors);
 8001a5e:	6863      	ldr	r3, [r4, #4]
 8001a60:	621e      	str	r6, [r3, #32]
        hfdcan->ErrorCode |= TTDistErrors;
 8001a62:	f8d4 309c 	ldr.w	r3, [r4, #156]	; 0x9c
 8001a66:	431e      	orrs	r6, r3
 8001a68:	f8c4 609c 	str.w	r6, [r4, #156]	; 0x9c
      if (TTFatalErrors != 0U)
 8001a6c:	2d00      	cmp	r5, #0
 8001a6e:	f43f af35 	beq.w	80018dc <HAL_FDCAN_IRQHandler+0x140>
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTFatalErrors);
 8001a72:	6863      	ldr	r3, [r4, #4]
 8001a74:	621d      	str	r5, [r3, #32]
        hfdcan->ErrorCode |= TTFatalErrors;
 8001a76:	f8d4 309c 	ldr.w	r3, [r4, #156]	; 0x9c
 8001a7a:	431d      	orrs	r5, r3
 8001a7c:	f8c4 509c 	str.w	r5, [r4, #156]	; 0x9c
 8001a80:	e72c      	b.n	80018dc <HAL_FDCAN_IRQHandler+0x140>
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTSchedSyncITs);
 8001a82:	6219      	str	r1, [r3, #32]
        HAL_FDCAN_TT_ScheduleSyncCallback(hfdcan, TTSchedSyncITs);
 8001a84:	4620      	mov	r0, r4
 8001a86:	f7ff fe85 	bl	8001794 <HAL_FDCAN_TT_ScheduleSyncCallback>
 8001a8a:	e7da      	b.n	8001a42 <HAL_FDCAN_IRQHandler+0x2a6>
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTTimeMarkITs);
 8001a8c:	6863      	ldr	r3, [r4, #4]
 8001a8e:	f8c3 8020 	str.w	r8, [r3, #32]
        HAL_FDCAN_TT_TimeMarkCallback(hfdcan, TTTimeMarkITs);
 8001a92:	4641      	mov	r1, r8
 8001a94:	4620      	mov	r0, r4
 8001a96:	f7ff fe7e 	bl	8001796 <HAL_FDCAN_TT_TimeMarkCallback>
 8001a9a:	e7d5      	b.n	8001a48 <HAL_FDCAN_IRQHandler+0x2ac>
          SWTime = ((hfdcan->ttcan->TTCPT & FDCAN_TTCPT_SWV) >> FDCAN_TTCPT_SWV_Pos);
 8001a9c:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
          SWCycleCount = ((hfdcan->ttcan->TTCPT & FDCAN_TTCPT_CCV) >> FDCAN_TTCPT_CCV_Pos);
 8001a9e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
          __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, FDCAN_TT_FLAG_STOP_WATCH);
 8001aa0:	2040      	movs	r0, #64	; 0x40
 8001aa2:	6218      	str	r0, [r3, #32]
          HAL_FDCAN_TT_StopWatchCallback(hfdcan, SWTime, SWCycleCount);
 8001aa4:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 8001aa8:	0c09      	lsrs	r1, r1, #16
 8001aaa:	4620      	mov	r0, r4
 8001aac:	f7ff fe74 	bl	8001798 <HAL_FDCAN_TT_StopWatchCallback>
 8001ab0:	e7d3      	b.n	8001a5a <HAL_FDCAN_IRQHandler+0x2be>
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTGlobTimeITs);
 8001ab2:	6863      	ldr	r3, [r4, #4]
 8001ab4:	621f      	str	r7, [r3, #32]
        HAL_FDCAN_TT_GlobalTimeCallback(hfdcan, TTGlobTimeITs);
 8001ab6:	4639      	mov	r1, r7
 8001ab8:	4620      	mov	r0, r4
 8001aba:	f7ff fe6e 	bl	800179a <HAL_FDCAN_TT_GlobalTimeCallback>
 8001abe:	e7cd      	b.n	8001a5c <HAL_FDCAN_IRQHandler+0x2c0>
    HAL_FDCAN_ErrorCallback(hfdcan);
 8001ac0:	4620      	mov	r0, r4
 8001ac2:	f7ff fe65 	bl	8001790 <HAL_FDCAN_ErrorCallback>
}
 8001ac6:	e70e      	b.n	80018e6 <HAL_FDCAN_IRQHandler+0x14a>

08001ac8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001ac8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001aca:	b083      	sub	sp, #12
  uint32_t position = 0x00U;
 8001acc:	2300      	movs	r3, #0
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8001ace:	e03a      	b.n	8001b46 <HAL_GPIO_Init+0x7e>
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();

        temp = SYSCFG->EXTICR[position >> 2U];
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8001ad0:	2409      	movs	r4, #9
 8001ad2:	e000      	b.n	8001ad6 <HAL_GPIO_Init+0xe>
 8001ad4:	2400      	movs	r4, #0
 8001ad6:	40b4      	lsls	r4, r6
 8001ad8:	433c      	orrs	r4, r7
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001ada:	3502      	adds	r5, #2
 8001adc:	4e6f      	ldr	r6, [pc, #444]	; (8001c9c <HAL_GPIO_Init+0x1d4>)
 8001ade:	f846 4025 	str.w	r4, [r6, r5, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8001ae2:	4c6f      	ldr	r4, [pc, #444]	; (8001ca0 <HAL_GPIO_Init+0x1d8>)
 8001ae4:	6825      	ldr	r5, [r4, #0]
        temp &= ~(iocurrent);
 8001ae6:	43d4      	mvns	r4, r2
 8001ae8:	ea25 0602 	bic.w	r6, r5, r2
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001aec:	684f      	ldr	r7, [r1, #4]
 8001aee:	f417 3f80 	tst.w	r7, #65536	; 0x10000
 8001af2:	d001      	beq.n	8001af8 <HAL_GPIO_Init+0x30>
        {
          temp |= iocurrent;
 8001af4:	ea42 0605 	orr.w	r6, r2, r5
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8001af8:	4d69      	ldr	r5, [pc, #420]	; (8001ca0 <HAL_GPIO_Init+0x1d8>)
 8001afa:	602e      	str	r6, [r5, #0]

        temp = EXTI_CurrentCPU->EMR1;
 8001afc:	686e      	ldr	r6, [r5, #4]
        temp &= ~(iocurrent);
 8001afe:	ea04 0506 	and.w	r5, r4, r6
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001b02:	684f      	ldr	r7, [r1, #4]
 8001b04:	f417 3f00 	tst.w	r7, #131072	; 0x20000
 8001b08:	d001      	beq.n	8001b0e <HAL_GPIO_Init+0x46>
        {
          temp |= iocurrent;
 8001b0a:	ea42 0506 	orr.w	r5, r2, r6
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8001b0e:	4e64      	ldr	r6, [pc, #400]	; (8001ca0 <HAL_GPIO_Init+0x1d8>)
 8001b10:	6075      	str	r5, [r6, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001b12:	f04f 45b0 	mov.w	r5, #1476395008	; 0x58000000
 8001b16:	682d      	ldr	r5, [r5, #0]
        temp &= ~(iocurrent);
 8001b18:	ea04 0605 	and.w	r6, r4, r5
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001b1c:	684f      	ldr	r7, [r1, #4]
 8001b1e:	f417 1f80 	tst.w	r7, #1048576	; 0x100000
 8001b22:	d001      	beq.n	8001b28 <HAL_GPIO_Init+0x60>
        {
          temp |= iocurrent;
 8001b24:	ea42 0605 	orr.w	r6, r2, r5
        }
        EXTI->RTSR1 = temp;
 8001b28:	f04f 45b0 	mov.w	r5, #1476395008	; 0x58000000
 8001b2c:	602e      	str	r6, [r5, #0]

        temp = EXTI->FTSR1;
 8001b2e:	686d      	ldr	r5, [r5, #4]
        temp &= ~(iocurrent);
 8001b30:	402c      	ands	r4, r5
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001b32:	684e      	ldr	r6, [r1, #4]
 8001b34:	f416 1f00 	tst.w	r6, #2097152	; 0x200000
 8001b38:	d001      	beq.n	8001b3e <HAL_GPIO_Init+0x76>
        {
          temp |= iocurrent;
 8001b3a:	ea42 0405 	orr.w	r4, r2, r5
        }
        EXTI->FTSR1 = temp;
 8001b3e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001b42:	6054      	str	r4, [r2, #4]
      }
    }

    position++;
 8001b44:	3301      	adds	r3, #1
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8001b46:	680a      	ldr	r2, [r1, #0]
 8001b48:	fa32 f403 	lsrs.w	r4, r2, r3
 8001b4c:	f000 80a3 	beq.w	8001c96 <HAL_GPIO_Init+0x1ce>
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8001b50:	2401      	movs	r4, #1
 8001b52:	409c      	lsls	r4, r3
    if (iocurrent != 0x00U)
 8001b54:	4022      	ands	r2, r4
 8001b56:	d0f5      	beq.n	8001b44 <HAL_GPIO_Init+0x7c>
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001b58:	684d      	ldr	r5, [r1, #4]
 8001b5a:	1e6e      	subs	r6, r5, #1
 8001b5c:	2d11      	cmp	r5, #17
 8001b5e:	bf18      	it	ne
 8001b60:	2e01      	cmpne	r6, #1
 8001b62:	d901      	bls.n	8001b68 <HAL_GPIO_Init+0xa0>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001b64:	2d12      	cmp	r5, #18
 8001b66:	d112      	bne.n	8001b8e <HAL_GPIO_Init+0xc6>
        temp = GPIOx->OSPEEDR;
 8001b68:	6886      	ldr	r6, [r0, #8]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8001b6a:	005f      	lsls	r7, r3, #1
 8001b6c:	2503      	movs	r5, #3
 8001b6e:	40bd      	lsls	r5, r7
 8001b70:	ea26 0605 	bic.w	r6, r6, r5
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001b74:	68cd      	ldr	r5, [r1, #12]
 8001b76:	40bd      	lsls	r5, r7
 8001b78:	4335      	orrs	r5, r6
        GPIOx->OSPEEDR = temp;
 8001b7a:	6085      	str	r5, [r0, #8]
        temp = GPIOx->OTYPER;
 8001b7c:	6846      	ldr	r6, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001b7e:	ea26 0604 	bic.w	r6, r6, r4
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8001b82:	684d      	ldr	r5, [r1, #4]
 8001b84:	f3c5 1400 	ubfx	r4, r5, #4, #1
 8001b88:	409c      	lsls	r4, r3
 8001b8a:	4334      	orrs	r4, r6
        GPIOx->OTYPER = temp;
 8001b8c:	6044      	str	r4, [r0, #4]
      temp = GPIOx->PUPDR;
 8001b8e:	68c7      	ldr	r7, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001b90:	005e      	lsls	r6, r3, #1
 8001b92:	2503      	movs	r5, #3
 8001b94:	40b5      	lsls	r5, r6
 8001b96:	43ec      	mvns	r4, r5
 8001b98:	ea27 0705 	bic.w	r7, r7, r5
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001b9c:	688d      	ldr	r5, [r1, #8]
 8001b9e:	40b5      	lsls	r5, r6
 8001ba0:	433d      	orrs	r5, r7
      GPIOx->PUPDR = temp;
 8001ba2:	60c5      	str	r5, [r0, #12]
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001ba4:	684d      	ldr	r5, [r1, #4]
 8001ba6:	2d12      	cmp	r5, #18
 8001ba8:	bf18      	it	ne
 8001baa:	2d02      	cmpne	r5, #2
 8001bac:	d113      	bne.n	8001bd6 <HAL_GPIO_Init+0x10e>
        temp = GPIOx->AFR[position >> 3U];
 8001bae:	08df      	lsrs	r7, r3, #3
 8001bb0:	3708      	adds	r7, #8
 8001bb2:	f850 e027 	ldr.w	lr, [r0, r7, lsl #2]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8001bb6:	f003 0507 	and.w	r5, r3, #7
 8001bba:	ea4f 0c85 	mov.w	ip, r5, lsl #2
 8001bbe:	250f      	movs	r5, #15
 8001bc0:	fa05 f50c 	lsl.w	r5, r5, ip
 8001bc4:	ea2e 0e05 	bic.w	lr, lr, r5
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8001bc8:	690d      	ldr	r5, [r1, #16]
 8001bca:	fa05 f50c 	lsl.w	r5, r5, ip
 8001bce:	ea45 050e 	orr.w	r5, r5, lr
        GPIOx->AFR[position >> 3U] = temp;
 8001bd2:	f840 5027 	str.w	r5, [r0, r7, lsl #2]
      temp = GPIOx->MODER;
 8001bd6:	6805      	ldr	r5, [r0, #0]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001bd8:	4025      	ands	r5, r4
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001bda:	684c      	ldr	r4, [r1, #4]
 8001bdc:	f004 0403 	and.w	r4, r4, #3
 8001be0:	40b4      	lsls	r4, r6
 8001be2:	432c      	orrs	r4, r5
      GPIOx->MODER = temp;
 8001be4:	6004      	str	r4, [r0, #0]
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001be6:	684c      	ldr	r4, [r1, #4]
 8001be8:	f014 5f80 	tst.w	r4, #268435456	; 0x10000000
 8001bec:	d0aa      	beq.n	8001b44 <HAL_GPIO_Init+0x7c>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001bee:	4c2d      	ldr	r4, [pc, #180]	; (8001ca4 <HAL_GPIO_Init+0x1dc>)
 8001bf0:	f8d4 50f4 	ldr.w	r5, [r4, #244]	; 0xf4
 8001bf4:	f045 0502 	orr.w	r5, r5, #2
 8001bf8:	f8c4 50f4 	str.w	r5, [r4, #244]	; 0xf4
 8001bfc:	f8d4 40f4 	ldr.w	r4, [r4, #244]	; 0xf4
 8001c00:	f004 0402 	and.w	r4, r4, #2
 8001c04:	9401      	str	r4, [sp, #4]
 8001c06:	9c01      	ldr	r4, [sp, #4]
        temp = SYSCFG->EXTICR[position >> 2U];
 8001c08:	089d      	lsrs	r5, r3, #2
 8001c0a:	1cae      	adds	r6, r5, #2
 8001c0c:	4c23      	ldr	r4, [pc, #140]	; (8001c9c <HAL_GPIO_Init+0x1d4>)
 8001c0e:	f854 7026 	ldr.w	r7, [r4, r6, lsl #2]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8001c12:	f003 0403 	and.w	r4, r3, #3
 8001c16:	00a6      	lsls	r6, r4, #2
 8001c18:	240f      	movs	r4, #15
 8001c1a:	40b4      	lsls	r4, r6
 8001c1c:	ea27 0704 	bic.w	r7, r7, r4
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8001c20:	4c21      	ldr	r4, [pc, #132]	; (8001ca8 <HAL_GPIO_Init+0x1e0>)
 8001c22:	42a0      	cmp	r0, r4
 8001c24:	f43f af56 	beq.w	8001ad4 <HAL_GPIO_Init+0xc>
 8001c28:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8001c2c:	42a0      	cmp	r0, r4
 8001c2e:	d022      	beq.n	8001c76 <HAL_GPIO_Init+0x1ae>
 8001c30:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8001c34:	42a0      	cmp	r0, r4
 8001c36:	d020      	beq.n	8001c7a <HAL_GPIO_Init+0x1b2>
 8001c38:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8001c3c:	42a0      	cmp	r0, r4
 8001c3e:	d01e      	beq.n	8001c7e <HAL_GPIO_Init+0x1b6>
 8001c40:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8001c44:	42a0      	cmp	r0, r4
 8001c46:	d01c      	beq.n	8001c82 <HAL_GPIO_Init+0x1ba>
 8001c48:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8001c4c:	42a0      	cmp	r0, r4
 8001c4e:	d01a      	beq.n	8001c86 <HAL_GPIO_Init+0x1be>
 8001c50:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8001c54:	42a0      	cmp	r0, r4
 8001c56:	d018      	beq.n	8001c8a <HAL_GPIO_Init+0x1c2>
 8001c58:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8001c5c:	42a0      	cmp	r0, r4
 8001c5e:	d016      	beq.n	8001c8e <HAL_GPIO_Init+0x1c6>
 8001c60:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8001c64:	42a0      	cmp	r0, r4
 8001c66:	d014      	beq.n	8001c92 <HAL_GPIO_Init+0x1ca>
 8001c68:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8001c6c:	42a0      	cmp	r0, r4
 8001c6e:	f43f af2f 	beq.w	8001ad0 <HAL_GPIO_Init+0x8>
 8001c72:	240a      	movs	r4, #10
 8001c74:	e72f      	b.n	8001ad6 <HAL_GPIO_Init+0xe>
 8001c76:	2401      	movs	r4, #1
 8001c78:	e72d      	b.n	8001ad6 <HAL_GPIO_Init+0xe>
 8001c7a:	2402      	movs	r4, #2
 8001c7c:	e72b      	b.n	8001ad6 <HAL_GPIO_Init+0xe>
 8001c7e:	2403      	movs	r4, #3
 8001c80:	e729      	b.n	8001ad6 <HAL_GPIO_Init+0xe>
 8001c82:	2404      	movs	r4, #4
 8001c84:	e727      	b.n	8001ad6 <HAL_GPIO_Init+0xe>
 8001c86:	2405      	movs	r4, #5
 8001c88:	e725      	b.n	8001ad6 <HAL_GPIO_Init+0xe>
 8001c8a:	2406      	movs	r4, #6
 8001c8c:	e723      	b.n	8001ad6 <HAL_GPIO_Init+0xe>
 8001c8e:	2407      	movs	r4, #7
 8001c90:	e721      	b.n	8001ad6 <HAL_GPIO_Init+0xe>
 8001c92:	2408      	movs	r4, #8
 8001c94:	e71f      	b.n	8001ad6 <HAL_GPIO_Init+0xe>
  }
}
 8001c96:	b003      	add	sp, #12
 8001c98:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001c9a:	bf00      	nop
 8001c9c:	58000400 	.word	0x58000400
 8001ca0:	58000080 	.word	0x58000080
 8001ca4:	58024400 	.word	0x58024400
 8001ca8:	58020000 	.word	0x58020000

08001cac <HAL_I2C_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001cac:	2800      	cmp	r0, #0
 8001cae:	d057      	beq.n	8001d60 <HAL_I2C_Init+0xb4>
{
 8001cb0:	b510      	push	{r4, lr}
 8001cb2:	4604      	mov	r4, r0
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001cb4:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 8001cb8:	2b00      	cmp	r3, #0
 8001cba:	d041      	beq.n	8001d40 <HAL_I2C_Init+0x94>
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001cbc:	2324      	movs	r3, #36	; 0x24
 8001cbe:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001cc2:	6822      	ldr	r2, [r4, #0]
 8001cc4:	6813      	ldr	r3, [r2, #0]
 8001cc6:	f023 0301 	bic.w	r3, r3, #1
 8001cca:	6013      	str	r3, [r2, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8001ccc:	6863      	ldr	r3, [r4, #4]
 8001cce:	6822      	ldr	r2, [r4, #0]
 8001cd0:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
 8001cd4:	6113      	str	r3, [r2, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8001cd6:	6822      	ldr	r2, [r4, #0]
 8001cd8:	6893      	ldr	r3, [r2, #8]
 8001cda:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8001cde:	6093      	str	r3, [r2, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001ce0:	68e3      	ldr	r3, [r4, #12]
 8001ce2:	2b01      	cmp	r3, #1
 8001ce4:	d031      	beq.n	8001d4a <HAL_I2C_Init+0x9e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8001ce6:	68a3      	ldr	r3, [r4, #8]
 8001ce8:	6822      	ldr	r2, [r4, #0]
 8001cea:	f443 4304 	orr.w	r3, r3, #33792	; 0x8400
 8001cee:	6093      	str	r3, [r2, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001cf0:	68e3      	ldr	r3, [r4, #12]
 8001cf2:	2b02      	cmp	r3, #2
 8001cf4:	d02f      	beq.n	8001d56 <HAL_I2C_Init+0xaa>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8001cf6:	6822      	ldr	r2, [r4, #0]
 8001cf8:	6851      	ldr	r1, [r2, #4]
 8001cfa:	4b1a      	ldr	r3, [pc, #104]	; (8001d64 <HAL_I2C_Init+0xb8>)
 8001cfc:	430b      	orrs	r3, r1
 8001cfe:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8001d00:	6822      	ldr	r2, [r4, #0]
 8001d02:	68d3      	ldr	r3, [r2, #12]
 8001d04:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8001d08:	60d3      	str	r3, [r2, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8001d0a:	6923      	ldr	r3, [r4, #16]
 8001d0c:	6962      	ldr	r2, [r4, #20]
 8001d0e:	4313      	orrs	r3, r2
 8001d10:	69a1      	ldr	r1, [r4, #24]
 8001d12:	6822      	ldr	r2, [r4, #0]
 8001d14:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8001d18:	60d3      	str	r3, [r2, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001d1a:	69e3      	ldr	r3, [r4, #28]
 8001d1c:	6a21      	ldr	r1, [r4, #32]
 8001d1e:	6822      	ldr	r2, [r4, #0]
 8001d20:	430b      	orrs	r3, r1
 8001d22:	6013      	str	r3, [r2, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001d24:	6822      	ldr	r2, [r4, #0]
 8001d26:	6813      	ldr	r3, [r2, #0]
 8001d28:	f043 0301 	orr.w	r3, r3, #1
 8001d2c:	6013      	str	r3, [r2, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001d2e:	2000      	movs	r0, #0
 8001d30:	6460      	str	r0, [r4, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8001d32:	2320      	movs	r3, #32
 8001d34:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8001d38:	6320      	str	r0, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001d3a:	f884 0042 	strb.w	r0, [r4, #66]	; 0x42

  return HAL_OK;
}
 8001d3e:	bd10      	pop	{r4, pc}
    hi2c->Lock = HAL_UNLOCKED;
 8001d40:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
    HAL_I2C_MspInit(hi2c);
 8001d44:	f005 ff86 	bl	8007c54 <HAL_I2C_MspInit>
 8001d48:	e7b8      	b.n	8001cbc <HAL_I2C_Init+0x10>
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8001d4a:	68a3      	ldr	r3, [r4, #8]
 8001d4c:	6822      	ldr	r2, [r4, #0]
 8001d4e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001d52:	6093      	str	r3, [r2, #8]
 8001d54:	e7cc      	b.n	8001cf0 <HAL_I2C_Init+0x44>
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8001d56:	6823      	ldr	r3, [r4, #0]
 8001d58:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001d5c:	605a      	str	r2, [r3, #4]
 8001d5e:	e7ca      	b.n	8001cf6 <HAL_I2C_Init+0x4a>
    return HAL_ERROR;
 8001d60:	2001      	movs	r0, #1
}
 8001d62:	4770      	bx	lr
 8001d64:	02008000 	.word	0x02008000

08001d68 <HAL_I2CEx_ConfigAnalogFilter>:
{
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001d68:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 8001d6c:	b2db      	uxtb	r3, r3
 8001d6e:	2b20      	cmp	r3, #32
 8001d70:	d124      	bne.n	8001dbc <HAL_I2CEx_ConfigAnalogFilter+0x54>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001d72:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 8001d76:	2b01      	cmp	r3, #1
 8001d78:	d022      	beq.n	8001dc0 <HAL_I2CEx_ConfigAnalogFilter+0x58>
 8001d7a:	2301      	movs	r3, #1
 8001d7c:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001d80:	2324      	movs	r3, #36	; 0x24
 8001d82:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001d86:	6802      	ldr	r2, [r0, #0]
 8001d88:	6813      	ldr	r3, [r2, #0]
 8001d8a:	f023 0301 	bic.w	r3, r3, #1
 8001d8e:	6013      	str	r3, [r2, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8001d90:	6802      	ldr	r2, [r0, #0]
 8001d92:	6813      	ldr	r3, [r2, #0]
 8001d94:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8001d98:	6013      	str	r3, [r2, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8001d9a:	6802      	ldr	r2, [r0, #0]
 8001d9c:	6813      	ldr	r3, [r2, #0]
 8001d9e:	4319      	orrs	r1, r3
 8001da0:	6011      	str	r1, [r2, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001da2:	6802      	ldr	r2, [r0, #0]
 8001da4:	6813      	ldr	r3, [r2, #0]
 8001da6:	f043 0301 	orr.w	r3, r3, #1
 8001daa:	6013      	str	r3, [r2, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001dac:	2320      	movs	r3, #32
 8001dae:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001db2:	2300      	movs	r3, #0
 8001db4:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40

    return HAL_OK;
 8001db8:	4618      	mov	r0, r3
 8001dba:	4770      	bx	lr
  }
  else
  {
    return HAL_BUSY;
 8001dbc:	2002      	movs	r0, #2
 8001dbe:	4770      	bx	lr
    __HAL_LOCK(hi2c);
 8001dc0:	2002      	movs	r0, #2
  }
}
 8001dc2:	4770      	bx	lr

08001dc4 <HAL_I2CEx_ConfigDigitalFilter>:

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001dc4:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 8001dc8:	b2db      	uxtb	r3, r3
 8001dca:	2b20      	cmp	r3, #32
 8001dcc:	d122      	bne.n	8001e14 <HAL_I2CEx_ConfigDigitalFilter+0x50>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001dce:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 8001dd2:	2b01      	cmp	r3, #1
 8001dd4:	d020      	beq.n	8001e18 <HAL_I2CEx_ConfigDigitalFilter+0x54>
 8001dd6:	2301      	movs	r3, #1
 8001dd8:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001ddc:	2324      	movs	r3, #36	; 0x24
 8001dde:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001de2:	6802      	ldr	r2, [r0, #0]
 8001de4:	6813      	ldr	r3, [r2, #0]
 8001de6:	f023 0301 	bic.w	r3, r3, #1
 8001dea:	6013      	str	r3, [r2, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8001dec:	6802      	ldr	r2, [r0, #0]
 8001dee:	6813      	ldr	r3, [r2, #0]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8001df0:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8001df4:	ea43 2101 	orr.w	r1, r3, r1, lsl #8

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8001df8:	6011      	str	r1, [r2, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001dfa:	6802      	ldr	r2, [r0, #0]
 8001dfc:	6813      	ldr	r3, [r2, #0]
 8001dfe:	f043 0301 	orr.w	r3, r3, #1
 8001e02:	6013      	str	r3, [r2, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001e04:	2320      	movs	r3, #32
 8001e06:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001e0a:	2300      	movs	r3, #0
 8001e0c:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40

    return HAL_OK;
 8001e10:	4618      	mov	r0, r3
 8001e12:	4770      	bx	lr
  }
  else
  {
    return HAL_BUSY;
 8001e14:	2002      	movs	r0, #2
 8001e16:	4770      	bx	lr
    __HAL_LOCK(hi2c);
 8001e18:	2002      	movs	r0, #2
  }
}
 8001e1a:	4770      	bx	lr

08001e1c <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8001e1c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001e20:	b082      	sub	sp, #8
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001e22:	f8d0 8000 	ldr.w	r8, [r0]
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];

  if (ep->xfer_count > ep->xfer_len)
 8001e26:	ebc1 03c1 	rsb	r3, r1, r1, lsl #3
 8001e2a:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 8001e2e:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8001e30:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001e32:	429a      	cmp	r2, r3
 8001e34:	d855      	bhi.n	8001ee2 <PCD_WriteEmptyTxFifo+0xc6>
 8001e36:	4607      	mov	r7, r0
 8001e38:	460c      	mov	r4, r1
 8001e3a:	46c1      	mov	r9, r8
  {
    return HAL_ERROR;
  }

  len = ep->xfer_len - ep->xfer_count;
 8001e3c:	1a9b      	subs	r3, r3, r2

  if (len > ep->maxpacket)
 8001e3e:	ebc1 02c1 	rsb	r2, r1, r1, lsl #3
 8001e42:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 8001e46:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8001e48:	429a      	cmp	r2, r3
 8001e4a:	d300      	bcc.n	8001e4e <PCD_WriteEmptyTxFifo+0x32>
  len = ep->xfer_len - ep->xfer_count;
 8001e4c:	461a      	mov	r2, r3
  {
    len = ep->maxpacket;
  }

  len32b = (len + 3U) / 4U;
 8001e4e:	f102 0a03 	add.w	sl, r2, #3
 8001e52:	ea4f 0a9a 	mov.w	sl, sl, lsr #2

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8001e56:	e015      	b.n	8001e84 <PCD_WriteEmptyTxFifo+0x68>

    if (len > ep->maxpacket)
    {
      len = ep->maxpacket;
    }
    len32b = (len + 3U) / 4U;
 8001e58:	f106 0a03 	add.w	sl, r6, #3
 8001e5c:	ea4f 0a9a 	mov.w	sl, sl, lsr #2

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8001e60:	ebc4 05c4 	rsb	r5, r4, r4, lsl #3
 8001e64:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 8001e68:	6ca9      	ldr	r1, [r5, #72]	; 0x48
 8001e6a:	7c3b      	ldrb	r3, [r7, #16]
 8001e6c:	9300      	str	r3, [sp, #0]
 8001e6e:	b2b3      	uxth	r3, r6
 8001e70:	b2e2      	uxtb	r2, r4
 8001e72:	4640      	mov	r0, r8
 8001e74:	f003 ffd4 	bl	8005e20 <USB_WritePacket>
                          (uint8_t)hpcd->Init.dma_enable);

    ep->xfer_buff  += len;
 8001e78:	6cab      	ldr	r3, [r5, #72]	; 0x48
 8001e7a:	4433      	add	r3, r6
 8001e7c:	64ab      	str	r3, [r5, #72]	; 0x48
    ep->xfer_count += len;
 8001e7e:	6d6b      	ldr	r3, [r5, #84]	; 0x54
 8001e80:	441e      	add	r6, r3
 8001e82:	656e      	str	r6, [r5, #84]	; 0x54
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8001e84:	eb09 1344 	add.w	r3, r9, r4, lsl #5
 8001e88:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001e8c:	699b      	ldr	r3, [r3, #24]
 8001e8e:	b29b      	uxth	r3, r3
 8001e90:	4553      	cmp	r3, sl
 8001e92:	d312      	bcc.n	8001eba <PCD_WriteEmptyTxFifo+0x9e>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8001e94:	ebc4 02c4 	rsb	r2, r4, r4, lsl #3
 8001e98:	eb07 0282 	add.w	r2, r7, r2, lsl #2
 8001e9c:	6d51      	ldr	r1, [r2, #84]	; 0x54
 8001e9e:	6d13      	ldr	r3, [r2, #80]	; 0x50
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8001ea0:	4299      	cmp	r1, r3
 8001ea2:	d20a      	bcs.n	8001eba <PCD_WriteEmptyTxFifo+0x9e>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8001ea4:	b14b      	cbz	r3, 8001eba <PCD_WriteEmptyTxFifo+0x9e>
    len = ep->xfer_len - ep->xfer_count;
 8001ea6:	1a5b      	subs	r3, r3, r1
    if (len > ep->maxpacket)
 8001ea8:	ebc4 02c4 	rsb	r2, r4, r4, lsl #3
 8001eac:	eb07 0282 	add.w	r2, r7, r2, lsl #2
 8001eb0:	6c56      	ldr	r6, [r2, #68]	; 0x44
 8001eb2:	429e      	cmp	r6, r3
 8001eb4:	d3d0      	bcc.n	8001e58 <PCD_WriteEmptyTxFifo+0x3c>
    len = ep->xfer_len - ep->xfer_count;
 8001eb6:	461e      	mov	r6, r3
 8001eb8:	e7ce      	b.n	8001e58 <PCD_WriteEmptyTxFifo+0x3c>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8001eba:	ebc4 00c4 	rsb	r0, r4, r4, lsl #3
 8001ebe:	eb07 0780 	add.w	r7, r7, r0, lsl #2
 8001ec2:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8001ec4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001ec6:	429a      	cmp	r2, r3
 8001ec8:	d80f      	bhi.n	8001eea <PCD_WriteEmptyTxFifo+0xce>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8001eca:	f004 040f 	and.w	r4, r4, #15
 8001ece:	2301      	movs	r3, #1
 8001ed0:	40a3      	lsls	r3, r4
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8001ed2:	f8d8 4834 	ldr.w	r4, [r8, #2100]	; 0x834
 8001ed6:	ea24 0403 	bic.w	r4, r4, r3
 8001eda:	f8c8 4834 	str.w	r4, [r8, #2100]	; 0x834
  }

  return HAL_OK;
 8001ede:	2000      	movs	r0, #0
 8001ee0:	e000      	b.n	8001ee4 <PCD_WriteEmptyTxFifo+0xc8>
    return HAL_ERROR;
 8001ee2:	2001      	movs	r0, #1
}
 8001ee4:	b002      	add	sp, #8
 8001ee6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  return HAL_OK;
 8001eea:	2000      	movs	r0, #0
 8001eec:	e7fa      	b.n	8001ee4 <PCD_WriteEmptyTxFifo+0xc8>

08001eee <HAL_PCD_Init>:
{
 8001eee:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001ef0:	b08b      	sub	sp, #44	; 0x2c
  if (hpcd == NULL)
 8001ef2:	2800      	cmp	r0, #0
 8001ef4:	f000 8093 	beq.w	800201e <HAL_PCD_Init+0x130>
 8001ef8:	4605      	mov	r5, r0
  USBx = hpcd->Instance;
 8001efa:	6804      	ldr	r4, [r0, #0]
  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001efc:	f890 33bd 	ldrb.w	r3, [r0, #957]	; 0x3bd
 8001f00:	b32b      	cbz	r3, 8001f4e <HAL_PCD_Init+0x60>
  hpcd->State = HAL_PCD_STATE_BUSY;
 8001f02:	2303      	movs	r3, #3
 8001f04:	f885 33bd 	strb.w	r3, [r5, #957]	; 0x3bd
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8001f08:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8001f0a:	f413 7f80 	tst.w	r3, #256	; 0x100
 8001f0e:	d101      	bne.n	8001f14 <HAL_PCD_Init+0x26>
    hpcd->Init.dma_enable = 0U;
 8001f10:	2300      	movs	r3, #0
 8001f12:	612b      	str	r3, [r5, #16]
  __HAL_PCD_DISABLE(hpcd);
 8001f14:	6828      	ldr	r0, [r5, #0]
 8001f16:	f003 fd1d 	bl	8005954 <USB_DisableGlobalInt>
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001f1a:	462c      	mov	r4, r5
 8001f1c:	f854 7b10 	ldr.w	r7, [r4], #16
 8001f20:	466e      	mov	r6, sp
 8001f22:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001f24:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8001f26:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001f28:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8001f2a:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001f2e:	e886 0003 	stmia.w	r6, {r0, r1}
 8001f32:	1d2b      	adds	r3, r5, #4
 8001f34:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001f36:	4638      	mov	r0, r7
 8001f38:	f003 fc4e 	bl	80057d8 <USB_CoreInit>
 8001f3c:	4604      	mov	r4, r0
 8001f3e:	b158      	cbz	r0, 8001f58 <HAL_PCD_Init+0x6a>
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001f40:	2302      	movs	r3, #2
 8001f42:	f885 33bd 	strb.w	r3, [r5, #957]	; 0x3bd
    return HAL_ERROR;
 8001f46:	2401      	movs	r4, #1
}
 8001f48:	4620      	mov	r0, r4
 8001f4a:	b00b      	add	sp, #44	; 0x2c
 8001f4c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    hpcd->Lock = HAL_UNLOCKED;
 8001f4e:	f880 33bc 	strb.w	r3, [r0, #956]	; 0x3bc
    HAL_PCD_MspInit(hpcd);
 8001f52:	f006 f8b3 	bl	80080bc <HAL_PCD_MspInit>
 8001f56:	e7d4      	b.n	8001f02 <HAL_PCD_Init+0x14>
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8001f58:	2100      	movs	r1, #0
 8001f5a:	6828      	ldr	r0, [r5, #0]
 8001f5c:	f003 fd00 	bl	8005960 <USB_SetCurrentMode>
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001f60:	4623      	mov	r3, r4
 8001f62:	e016      	b.n	8001f92 <HAL_PCD_Init+0xa4>
    hpcd->IN_ep[i].is_in = 1U;
 8001f64:	ebc3 02c3 	rsb	r2, r3, r3, lsl #3
 8001f68:	eb05 0282 	add.w	r2, r5, r2, lsl #2
 8001f6c:	2101      	movs	r1, #1
 8001f6e:	f882 103d 	strb.w	r1, [r2, #61]	; 0x3d
    hpcd->IN_ep[i].num = i;
 8001f72:	f882 303c 	strb.w	r3, [r2, #60]	; 0x3c
    hpcd->IN_ep[i].tx_fifo_num = i;
 8001f76:	f8a2 3042 	strh.w	r3, [r2, #66]	; 0x42
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001f7a:	2100      	movs	r1, #0
 8001f7c:	f882 103f 	strb.w	r1, [r2, #63]	; 0x3f
    hpcd->IN_ep[i].maxpacket = 0U;
 8001f80:	6451      	str	r1, [r2, #68]	; 0x44
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001f82:	6491      	str	r1, [r2, #72]	; 0x48
    hpcd->IN_ep[i].xfer_len = 0U;
 8001f84:	ebc3 02c3 	rsb	r2, r3, r3, lsl #3
 8001f88:	eb05 0282 	add.w	r2, r5, r2, lsl #2
 8001f8c:	6511      	str	r1, [r2, #80]	; 0x50
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001f8e:	3301      	adds	r3, #1
 8001f90:	b2db      	uxtb	r3, r3
 8001f92:	6869      	ldr	r1, [r5, #4]
 8001f94:	428b      	cmp	r3, r1
 8001f96:	d3e5      	bcc.n	8001f64 <HAL_PCD_Init+0x76>
 8001f98:	e016      	b.n	8001fc8 <HAL_PCD_Init+0xda>
    hpcd->OUT_ep[i].is_in = 0U;
 8001f9a:	ebc4 03c4 	rsb	r3, r4, r4, lsl #3
 8001f9e:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 8001fa2:	2200      	movs	r2, #0
 8001fa4:	f883 21fd 	strb.w	r2, [r3, #509]	; 0x1fd
    hpcd->OUT_ep[i].num = i;
 8001fa8:	f883 41fc 	strb.w	r4, [r3, #508]	; 0x1fc
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001fac:	f883 21ff 	strb.w	r2, [r3, #511]	; 0x1ff
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001fb0:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001fb4:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001fb8:	ebc4 03c4 	rsb	r3, r4, r4, lsl #3
 8001fbc:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 8001fc0:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001fc4:	3401      	adds	r4, #1
 8001fc6:	b2e4      	uxtb	r4, r4
 8001fc8:	42a1      	cmp	r1, r4
 8001fca:	d8e6      	bhi.n	8001f9a <HAL_PCD_Init+0xac>
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001fcc:	462c      	mov	r4, r5
 8001fce:	f854 7b10 	ldr.w	r7, [r4], #16
 8001fd2:	466e      	mov	r6, sp
 8001fd4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001fd6:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8001fd8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001fda:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8001fdc:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001fe0:	e886 0003 	stmia.w	r6, {r0, r1}
 8001fe4:	1d2b      	adds	r3, r5, #4
 8001fe6:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001fe8:	4638      	mov	r0, r7
 8001fea:	f003 fcff 	bl	80059ec <USB_DevInit>
 8001fee:	4604      	mov	r4, r0
 8001ff0:	b960      	cbnz	r0, 800200c <HAL_PCD_Init+0x11e>
  hpcd->USB_Address = 0U;
 8001ff2:	2300      	movs	r3, #0
 8001ff4:	f885 3038 	strb.w	r3, [r5, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8001ff8:	2301      	movs	r3, #1
 8001ffa:	f885 33bd 	strb.w	r3, [r5, #957]	; 0x3bd
  if (hpcd->Init.lpm_enable == 1U)
 8001ffe:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8002000:	2b01      	cmp	r3, #1
 8002002:	d008      	beq.n	8002016 <HAL_PCD_Init+0x128>
  (void)USB_DevDisconnect(hpcd->Instance);
 8002004:	6828      	ldr	r0, [r5, #0]
 8002006:	f004 f8b1 	bl	800616c <USB_DevDisconnect>
  return HAL_OK;
 800200a:	e79d      	b.n	8001f48 <HAL_PCD_Init+0x5a>
    hpcd->State = HAL_PCD_STATE_ERROR;
 800200c:	2302      	movs	r3, #2
 800200e:	f885 33bd 	strb.w	r3, [r5, #957]	; 0x3bd
    return HAL_ERROR;
 8002012:	2401      	movs	r4, #1
 8002014:	e798      	b.n	8001f48 <HAL_PCD_Init+0x5a>
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8002016:	4628      	mov	r0, r5
 8002018:	f000 fcda 	bl	80029d0 <HAL_PCDEx_ActivateLPM>
 800201c:	e7f2      	b.n	8002004 <HAL_PCD_Init+0x116>
    return HAL_ERROR;
 800201e:	2401      	movs	r4, #1
 8002020:	e792      	b.n	8001f48 <HAL_PCD_Init+0x5a>

08002022 <HAL_PCD_Start>:
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002022:	6802      	ldr	r2, [r0, #0]
  __HAL_LOCK(hpcd);
 8002024:	f890 33bc 	ldrb.w	r3, [r0, #956]	; 0x3bc
 8002028:	2b01      	cmp	r3, #1
 800202a:	d019      	beq.n	8002060 <HAL_PCD_Start+0x3e>
{
 800202c:	b510      	push	{r4, lr}
 800202e:	4604      	mov	r4, r0
  __HAL_LOCK(hpcd);
 8002030:	2301      	movs	r3, #1
 8002032:	f880 33bc 	strb.w	r3, [r0, #956]	; 0x3bc
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8002036:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8002038:	2b01      	cmp	r3, #1
 800203a:	d009      	beq.n	8002050 <HAL_PCD_Start+0x2e>
  (void)USB_DevConnect(hpcd->Instance);
 800203c:	6820      	ldr	r0, [r4, #0]
 800203e:	f004 f889 	bl	8006154 <USB_DevConnect>
  __HAL_PCD_ENABLE(hpcd);
 8002042:	6820      	ldr	r0, [r4, #0]
 8002044:	f003 fc80 	bl	8005948 <USB_EnableGlobalInt>
  __HAL_UNLOCK(hpcd);
 8002048:	2000      	movs	r0, #0
 800204a:	f884 03bc 	strb.w	r0, [r4, #956]	; 0x3bc
}
 800204e:	bd10      	pop	{r4, pc}
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 8002050:	6983      	ldr	r3, [r0, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8002052:	2b01      	cmp	r3, #1
 8002054:	d0f2      	beq.n	800203c <HAL_PCD_Start+0x1a>
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8002056:	6b93      	ldr	r3, [r2, #56]	; 0x38
 8002058:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800205c:	6393      	str	r3, [r2, #56]	; 0x38
 800205e:	e7ed      	b.n	800203c <HAL_PCD_Start+0x1a>
  __HAL_LOCK(hpcd);
 8002060:	2002      	movs	r0, #2
}
 8002062:	4770      	bx	lr

08002064 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002064:	b570      	push	{r4, r5, r6, lr}
 8002066:	4604      	mov	r4, r0
 8002068:	460d      	mov	r5, r1
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800206a:	6800      	ldr	r0, [r0, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800206c:	6c06      	ldr	r6, [r0, #64]	; 0x40
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800206e:	eb00 1341 	add.w	r3, r0, r1, lsl #5
 8002072:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002076:	689a      	ldr	r2, [r3, #8]

  if (hpcd->Init.dma_enable == 1U)
 8002078:	6921      	ldr	r1, [r4, #16]
 800207a:	2901      	cmp	r1, #1
 800207c:	d011      	beq.n	80020a2 <PCD_EP_OutXfrComplete_int+0x3e>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 800207e:	4935      	ldr	r1, [pc, #212]	; (8002154 <PCD_EP_OutXfrComplete_int+0xf0>)
 8002080:	428e      	cmp	r6, r1
 8002082:	d050      	beq.n	8002126 <PCD_EP_OutXfrComplete_int+0xc2>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8002084:	b93d      	cbnz	r5, 8002096 <PCD_EP_OutXfrComplete_int+0x32>
 8002086:	ebc5 03c5 	rsb	r3, r5, r5, lsl #3
 800208a:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800208e:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8002092:	2b00      	cmp	r3, #0
 8002094:	d058      	beq.n	8002148 <PCD_EP_OutXfrComplete_int+0xe4>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002096:	b2e9      	uxtb	r1, r5
 8002098:	4620      	mov	r0, r4
 800209a:	f006 f85d 	bl	8008158 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
}
 800209e:	2000      	movs	r0, #0
 80020a0:	bd70      	pop	{r4, r5, r6, pc}
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 80020a2:	f012 0f08 	tst.w	r2, #8
 80020a6:	d009      	beq.n	80020bc <PCD_EP_OutXfrComplete_int+0x58>
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80020a8:	492b      	ldr	r1, [pc, #172]	; (8002158 <PCD_EP_OutXfrComplete_int+0xf4>)
 80020aa:	428e      	cmp	r6, r1
 80020ac:	d9f7      	bls.n	800209e <PCD_EP_OutXfrComplete_int+0x3a>
 80020ae:	f412 4f00 	tst.w	r2, #32768	; 0x8000
 80020b2:	d0f4      	beq.n	800209e <PCD_EP_OutXfrComplete_int+0x3a>
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80020b4:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80020b8:	609a      	str	r2, [r3, #8]
 80020ba:	e7f0      	b.n	800209e <PCD_EP_OutXfrComplete_int+0x3a>
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 80020bc:	f012 0f20 	tst.w	r2, #32
 80020c0:	d002      	beq.n	80020c8 <PCD_EP_OutXfrComplete_int+0x64>
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80020c2:	2220      	movs	r2, #32
 80020c4:	609a      	str	r2, [r3, #8]
 80020c6:	e7ea      	b.n	800209e <PCD_EP_OutXfrComplete_int+0x3a>
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 80020c8:	f012 0f28 	tst.w	r2, #40	; 0x28
 80020cc:	d1e7      	bne.n	800209e <PCD_EP_OutXfrComplete_int+0x3a>
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80020ce:	4922      	ldr	r1, [pc, #136]	; (8002158 <PCD_EP_OutXfrComplete_int+0xf4>)
 80020d0:	428e      	cmp	r6, r1
 80020d2:	d906      	bls.n	80020e2 <PCD_EP_OutXfrComplete_int+0x7e>
 80020d4:	f412 4f00 	tst.w	r2, #32768	; 0x8000
 80020d8:	d003      	beq.n	80020e2 <PCD_EP_OutXfrComplete_int+0x7e>
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80020da:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80020de:	609a      	str	r2, [r3, #8]
 80020e0:	e7dd      	b.n	800209e <PCD_EP_OutXfrComplete_int+0x3a>
          hpcd->OUT_ep[epnum].maxpacket -
 80020e2:	ebc5 02c5 	rsb	r2, r5, r5, lsl #3
 80020e6:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 80020ea:	f8d2 1204 	ldr.w	r1, [r2, #516]	; 0x204
          (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 80020ee:	691b      	ldr	r3, [r3, #16]
 80020f0:	f3c3 0312 	ubfx	r3, r3, #0, #19
          hpcd->OUT_ep[epnum].maxpacket -
 80020f4:	1ac9      	subs	r1, r1, r3
        hpcd->OUT_ep[epnum].xfer_count =
 80020f6:	f8c2 1214 	str.w	r1, [r2, #532]	; 0x214
        hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;
 80020fa:	f8d2 1204 	ldr.w	r1, [r2, #516]	; 0x204
 80020fe:	f8d2 3208 	ldr.w	r3, [r2, #520]	; 0x208
 8002102:	440b      	add	r3, r1
 8002104:	f8c2 3208 	str.w	r3, [r2, #520]	; 0x208
        if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8002108:	b915      	cbnz	r5, 8002110 <PCD_EP_OutXfrComplete_int+0xac>
 800210a:	f8d2 3210 	ldr.w	r3, [r2, #528]	; 0x210
 800210e:	b123      	cbz	r3, 800211a <PCD_EP_OutXfrComplete_int+0xb6>
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002110:	b2e9      	uxtb	r1, r5
 8002112:	4620      	mov	r0, r4
 8002114:	f006 f820 	bl	8008158 <HAL_PCD_DataOutStageCallback>
 8002118:	e7c1      	b.n	800209e <PCD_EP_OutXfrComplete_int+0x3a>
          (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800211a:	f504 7271 	add.w	r2, r4, #964	; 0x3c4
 800211e:	2101      	movs	r1, #1
 8002120:	f004 f876 	bl	8006210 <USB_EP0_OutStart>
 8002124:	e7f4      	b.n	8002110 <PCD_EP_OutXfrComplete_int+0xac>
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8002126:	f412 4f00 	tst.w	r2, #32768	; 0x8000
 800212a:	d003      	beq.n	8002134 <PCD_EP_OutXfrComplete_int+0xd0>
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800212c:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8002130:	609a      	str	r2, [r3, #8]
 8002132:	e7b4      	b.n	800209e <PCD_EP_OutXfrComplete_int+0x3a>
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8002134:	f012 0f20 	tst.w	r2, #32
 8002138:	d001      	beq.n	800213e <PCD_EP_OutXfrComplete_int+0xda>
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800213a:	2220      	movs	r2, #32
 800213c:	609a      	str	r2, [r3, #8]
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800213e:	b2e9      	uxtb	r1, r5
 8002140:	4620      	mov	r0, r4
 8002142:	f006 f809 	bl	8008158 <HAL_PCD_DataOutStageCallback>
 8002146:	e7aa      	b.n	800209e <PCD_EP_OutXfrComplete_int+0x3a>
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8002148:	f504 7271 	add.w	r2, r4, #964	; 0x3c4
 800214c:	2100      	movs	r1, #0
 800214e:	f004 f85f 	bl	8006210 <USB_EP0_OutStart>
 8002152:	e7a0      	b.n	8002096 <PCD_EP_OutXfrComplete_int+0x32>
 8002154:	4f54310a 	.word	0x4f54310a
 8002158:	4f54300a 	.word	0x4f54300a

0800215c <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800215c:	b538      	push	{r3, r4, r5, lr}
 800215e:	4604      	mov	r4, r0
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002160:	6803      	ldr	r3, [r0, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8002162:	6c1d      	ldr	r5, [r3, #64]	; 0x40
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8002164:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 8002168:	f8d3 1b08 	ldr.w	r1, [r3, #2824]	; 0xb08

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800216c:	4a0e      	ldr	r2, [pc, #56]	; (80021a8 <PCD_EP_OutSetupPacket_int+0x4c>)
 800216e:	4295      	cmp	r5, r2
 8002170:	d907      	bls.n	8002182 <PCD_EP_OutSetupPacket_int+0x26>
 8002172:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002176:	f411 4f00 	tst.w	r1, #32768	; 0x8000
 800217a:	d002      	beq.n	8002182 <PCD_EP_OutSetupPacket_int+0x26>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800217c:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8002180:	609a      	str	r2, [r3, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8002182:	4620      	mov	r0, r4
 8002184:	f005 ffe0 	bl	8008148 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8002188:	4b07      	ldr	r3, [pc, #28]	; (80021a8 <PCD_EP_OutSetupPacket_int+0x4c>)
 800218a:	429d      	cmp	r5, r3
 800218c:	d902      	bls.n	8002194 <PCD_EP_OutSetupPacket_int+0x38>
 800218e:	6923      	ldr	r3, [r4, #16]
 8002190:	2b01      	cmp	r3, #1
 8002192:	d001      	beq.n	8002198 <PCD_EP_OutSetupPacket_int+0x3c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
  }

  return HAL_OK;
}
 8002194:	2000      	movs	r0, #0
 8002196:	bd38      	pop	{r3, r4, r5, pc}
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002198:	f504 7271 	add.w	r2, r4, #964	; 0x3c4
 800219c:	2101      	movs	r1, #1
 800219e:	6820      	ldr	r0, [r4, #0]
 80021a0:	f004 f836 	bl	8006210 <USB_EP0_OutStart>
 80021a4:	e7f6      	b.n	8002194 <PCD_EP_OutSetupPacket_int+0x38>
 80021a6:	bf00      	nop
 80021a8:	4f54300a 	.word	0x4f54300a

080021ac <HAL_PCD_IRQHandler>:
{
 80021ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80021b0:	b083      	sub	sp, #12
 80021b2:	4604      	mov	r4, r0
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80021b4:	6805      	ldr	r5, [r0, #0]
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 80021b6:	4628      	mov	r0, r5
 80021b8:	f004 f815 	bl	80061e6 <USB_GetMode>
 80021bc:	b110      	cbz	r0, 80021c4 <HAL_PCD_IRQHandler+0x18>
}
 80021be:	b003      	add	sp, #12
 80021c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80021c4:	462f      	mov	r7, r5
 80021c6:	4606      	mov	r6, r0
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 80021c8:	6820      	ldr	r0, [r4, #0]
 80021ca:	f003 ffdb 	bl	8006184 <USB_ReadInterrupts>
 80021ce:	2800      	cmp	r0, #0
 80021d0:	d0f5      	beq.n	80021be <HAL_PCD_IRQHandler+0x12>
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 80021d2:	6820      	ldr	r0, [r4, #0]
 80021d4:	f003 ffd6 	bl	8006184 <USB_ReadInterrupts>
 80021d8:	f010 0f02 	tst.w	r0, #2
 80021dc:	d004      	beq.n	80021e8 <HAL_PCD_IRQHandler+0x3c>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 80021de:	6822      	ldr	r2, [r4, #0]
 80021e0:	6953      	ldr	r3, [r2, #20]
 80021e2:	f003 0302 	and.w	r3, r3, #2
 80021e6:	6153      	str	r3, [r2, #20]
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 80021e8:	6820      	ldr	r0, [r4, #0]
 80021ea:	f003 ffcb 	bl	8006184 <USB_ReadInterrupts>
 80021ee:	f010 0f10 	tst.w	r0, #16
 80021f2:	d015      	beq.n	8002220 <HAL_PCD_IRQHandler+0x74>
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80021f4:	6822      	ldr	r2, [r4, #0]
 80021f6:	6993      	ldr	r3, [r2, #24]
 80021f8:	f023 0310 	bic.w	r3, r3, #16
 80021fc:	6193      	str	r3, [r2, #24]
      temp = USBx->GRXSTSP;
 80021fe:	f8d5 8020 	ldr.w	r8, [r5, #32]
      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 8002202:	f008 090f 	and.w	r9, r8, #15
      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8002206:	f3c8 4343 	ubfx	r3, r8, #17, #4
 800220a:	2b02      	cmp	r3, #2
 800220c:	f000 8085 	beq.w	800231a <HAL_PCD_IRQHandler+0x16e>
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 8002210:	2b06      	cmp	r3, #6
 8002212:	f000 80aa 	beq.w	800236a <HAL_PCD_IRQHandler+0x1be>
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002216:	6822      	ldr	r2, [r4, #0]
 8002218:	6993      	ldr	r3, [r2, #24]
 800221a:	f043 0310 	orr.w	r3, r3, #16
 800221e:	6193      	str	r3, [r2, #24]
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8002220:	6820      	ldr	r0, [r4, #0]
 8002222:	f003 ffaf 	bl	8006184 <USB_ReadInterrupts>
 8002226:	f410 2f00 	tst.w	r0, #524288	; 0x80000
 800222a:	f040 80b0 	bne.w	800238e <HAL_PCD_IRQHandler+0x1e2>
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 800222e:	6820      	ldr	r0, [r4, #0]
 8002230:	f003 ffa8 	bl	8006184 <USB_ReadInterrupts>
 8002234:	f410 2f80 	tst.w	r0, #262144	; 0x40000
 8002238:	f040 80f4 	bne.w	8002424 <HAL_PCD_IRQHandler+0x278>
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 800223c:	6820      	ldr	r0, [r4, #0]
 800223e:	f003 ffa1 	bl	8006184 <USB_ReadInterrupts>
 8002242:	2800      	cmp	r0, #0
 8002244:	f2c0 8160 	blt.w	8002508 <HAL_PCD_IRQHandler+0x35c>
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8002248:	6820      	ldr	r0, [r4, #0]
 800224a:	f003 ff9b 	bl	8006184 <USB_ReadInterrupts>
 800224e:	f410 6f00 	tst.w	r0, #2048	; 0x800
 8002252:	d00a      	beq.n	800226a <HAL_PCD_IRQHandler+0xbe>
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8002254:	f8d5 3808 	ldr.w	r3, [r5, #2056]	; 0x808
 8002258:	f013 0f01 	tst.w	r3, #1
 800225c:	f040 816e 	bne.w	800253c <HAL_PCD_IRQHandler+0x390>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8002260:	6822      	ldr	r2, [r4, #0]
 8002262:	6953      	ldr	r3, [r2, #20]
 8002264:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002268:	6153      	str	r3, [r2, #20]
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 800226a:	6820      	ldr	r0, [r4, #0]
 800226c:	f003 ff8a 	bl	8006184 <USB_ReadInterrupts>
 8002270:	f010 6f00 	tst.w	r0, #134217728	; 0x8000000
 8002274:	d015      	beq.n	80022a2 <HAL_PCD_IRQHandler+0xf6>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 8002276:	6822      	ldr	r2, [r4, #0]
 8002278:	6953      	ldr	r3, [r2, #20]
 800227a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800227e:	6153      	str	r3, [r2, #20]
      if (hpcd->LPM_State == LPM_L0)
 8002280:	f894 33f4 	ldrb.w	r3, [r4, #1012]	; 0x3f4
 8002284:	2b00      	cmp	r3, #0
 8002286:	f040 815d 	bne.w	8002544 <HAL_PCD_IRQHandler+0x398>
        hpcd->LPM_State = LPM_L1;
 800228a:	2101      	movs	r1, #1
 800228c:	f884 13f4 	strb.w	r1, [r4, #1012]	; 0x3f4
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 8002290:	6823      	ldr	r3, [r4, #0]
 8002292:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002294:	f3c3 0383 	ubfx	r3, r3, #2, #4
 8002298:	f8c4 33f8 	str.w	r3, [r4, #1016]	; 0x3f8
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 800229c:	4620      	mov	r0, r4
 800229e:	f000 fbab 	bl	80029f8 <HAL_PCDEx_LPM_Callback>
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 80022a2:	6820      	ldr	r0, [r4, #0]
 80022a4:	f003 ff6e 	bl	8006184 <USB_ReadInterrupts>
 80022a8:	f410 5f80 	tst.w	r0, #4096	; 0x1000
 80022ac:	f040 814e 	bne.w	800254c <HAL_PCD_IRQHandler+0x3a0>
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 80022b0:	6820      	ldr	r0, [r4, #0]
 80022b2:	f003 ff67 	bl	8006184 <USB_ReadInterrupts>
 80022b6:	f410 5f00 	tst.w	r0, #8192	; 0x2000
 80022ba:	f040 81ac 	bne.w	8002616 <HAL_PCD_IRQHandler+0x46a>
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 80022be:	6820      	ldr	r0, [r4, #0]
 80022c0:	f003 ff60 	bl	8006184 <USB_ReadInterrupts>
 80022c4:	f010 0f08 	tst.w	r0, #8
 80022c8:	f040 81bd 	bne.w	8002646 <HAL_PCD_IRQHandler+0x49a>
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 80022cc:	6820      	ldr	r0, [r4, #0]
 80022ce:	f003 ff59 	bl	8006184 <USB_ReadInterrupts>
 80022d2:	f410 1f80 	tst.w	r0, #1048576	; 0x100000
 80022d6:	f040 81bf 	bne.w	8002658 <HAL_PCD_IRQHandler+0x4ac>
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 80022da:	6820      	ldr	r0, [r4, #0]
 80022dc:	f003 ff52 	bl	8006184 <USB_ReadInterrupts>
 80022e0:	f410 1f00 	tst.w	r0, #2097152	; 0x200000
 80022e4:	f040 81c2 	bne.w	800266c <HAL_PCD_IRQHandler+0x4c0>
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 80022e8:	6820      	ldr	r0, [r4, #0]
 80022ea:	f003 ff4b 	bl	8006184 <USB_ReadInterrupts>
 80022ee:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 80022f2:	f040 81c5 	bne.w	8002680 <HAL_PCD_IRQHandler+0x4d4>
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 80022f6:	6820      	ldr	r0, [r4, #0]
 80022f8:	f003 ff44 	bl	8006184 <USB_ReadInterrupts>
 80022fc:	f010 0f04 	tst.w	r0, #4
 8002300:	f43f af5d 	beq.w	80021be <HAL_PCD_IRQHandler+0x12>
      temp = hpcd->Instance->GOTGINT;
 8002304:	6823      	ldr	r3, [r4, #0]
 8002306:	685d      	ldr	r5, [r3, #4]
      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8002308:	f015 0f04 	tst.w	r5, #4
 800230c:	f040 81c1 	bne.w	8002692 <HAL_PCD_IRQHandler+0x4e6>
      hpcd->Instance->GOTGINT |= temp;
 8002310:	6822      	ldr	r2, [r4, #0]
 8002312:	6853      	ldr	r3, [r2, #4]
 8002314:	432b      	orrs	r3, r5
 8002316:	6053      	str	r3, [r2, #4]
 8002318:	e751      	b.n	80021be <HAL_PCD_IRQHandler+0x12>
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 800231a:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 800231e:	ea18 0f03 	tst.w	r8, r3
 8002322:	f43f af78 	beq.w	8002216 <HAL_PCD_IRQHandler+0x6a>
                               (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));
 8002326:	ea4f 1b18 	mov.w	fp, r8, lsr #4
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800232a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800232e:	9301      	str	r3, [sp, #4]
 8002330:	ebc9 0ac9 	rsb	sl, r9, r9, lsl #3
 8002334:	eb04 0a8a 	add.w	sl, r4, sl, lsl #2
 8002338:	f3c8 120a 	ubfx	r2, r8, #4, #11
 800233c:	f8da 1208 	ldr.w	r1, [sl, #520]	; 0x208
 8002340:	4628      	mov	r0, r5
 8002342:	f003 fe8b 	bl	800605c <USB_ReadPacket>
          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002346:	f3cb 0b0a 	ubfx	fp, fp, #0, #11
 800234a:	f8da 3208 	ldr.w	r3, [sl, #520]	; 0x208
 800234e:	445b      	add	r3, fp
 8002350:	f8ca 3208 	str.w	r3, [sl, #520]	; 0x208
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002354:	9b01      	ldr	r3, [sp, #4]
 8002356:	eba3 0309 	sub.w	r3, r3, r9
 800235a:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800235e:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8002362:	445b      	add	r3, fp
 8002364:	f8ca 3214 	str.w	r3, [sl, #532]	; 0x214
 8002368:	e755      	b.n	8002216 <HAL_PCD_IRQHandler+0x6a>
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 800236a:	2208      	movs	r2, #8
 800236c:	f504 7171 	add.w	r1, r4, #964	; 0x3c4
 8002370:	4628      	mov	r0, r5
 8002372:	f003 fe73 	bl	800605c <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002376:	f3c8 180a 	ubfx	r8, r8, #4, #11
 800237a:	ebc9 02c9 	rsb	r2, r9, r9, lsl #3
 800237e:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 8002382:	f8d2 3214 	ldr.w	r3, [r2, #532]	; 0x214
 8002386:	4443      	add	r3, r8
 8002388:	f8c2 3214 	str.w	r3, [r2, #532]	; 0x214
 800238c:	e743      	b.n	8002216 <HAL_PCD_IRQHandler+0x6a>
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 800238e:	6820      	ldr	r0, [r4, #0]
 8002390:	f003 fefc 	bl	800618c <USB_ReadDevAllOutEpInterrupt>
 8002394:	4680      	mov	r8, r0
      epnum = 0U;
 8002396:	46b1      	mov	r9, r6
      while (ep_intr != 0U)
 8002398:	e017      	b.n	80023ca <HAL_PCD_IRQHandler+0x21e>
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 800239a:	eb07 1349 	add.w	r3, r7, r9, lsl #5
 800239e:	2201      	movs	r2, #1
 80023a0:	f8c3 2b08 	str.w	r2, [r3, #2824]	; 0xb08
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 80023a4:	4649      	mov	r1, r9
 80023a6:	4620      	mov	r0, r4
 80023a8:	f7ff fe5c 	bl	8002064 <PCD_EP_OutXfrComplete_int>
 80023ac:	e01d      	b.n	80023ea <HAL_PCD_IRQHandler+0x23e>
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 80023ae:	eb07 1349 	add.w	r3, r7, r9, lsl #5
 80023b2:	2208      	movs	r2, #8
 80023b4:	f8c3 2b08 	str.w	r2, [r3, #2824]	; 0xb08
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 80023b8:	4649      	mov	r1, r9
 80023ba:	4620      	mov	r0, r4
 80023bc:	f7ff fece 	bl	800215c <PCD_EP_OutSetupPacket_int>
 80023c0:	e016      	b.n	80023f0 <HAL_PCD_IRQHandler+0x244>
        epnum++;
 80023c2:	f109 0901 	add.w	r9, r9, #1
        ep_intr >>= 1U;
 80023c6:	ea4f 0858 	mov.w	r8, r8, lsr #1
      while (ep_intr != 0U)
 80023ca:	f1b8 0f00 	cmp.w	r8, #0
 80023ce:	f43f af2e 	beq.w	800222e <HAL_PCD_IRQHandler+0x82>
        if ((ep_intr & 0x1U) != 0U)
 80023d2:	f018 0f01 	tst.w	r8, #1
 80023d6:	d0f4      	beq.n	80023c2 <HAL_PCD_IRQHandler+0x216>
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80023d8:	fa5f f189 	uxtb.w	r1, r9
 80023dc:	6820      	ldr	r0, [r4, #0]
 80023de:	f003 fee5 	bl	80061ac <USB_ReadDevOutEPInterrupt>
 80023e2:	4682      	mov	sl, r0
          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 80023e4:	f010 0f01 	tst.w	r0, #1
 80023e8:	d1d7      	bne.n	800239a <HAL_PCD_IRQHandler+0x1ee>
          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 80023ea:	f01a 0f08 	tst.w	sl, #8
 80023ee:	d1de      	bne.n	80023ae <HAL_PCD_IRQHandler+0x202>
          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 80023f0:	f01a 0f10 	tst.w	sl, #16
 80023f4:	d004      	beq.n	8002400 <HAL_PCD_IRQHandler+0x254>
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 80023f6:	eb07 1349 	add.w	r3, r7, r9, lsl #5
 80023fa:	2210      	movs	r2, #16
 80023fc:	f8c3 2b08 	str.w	r2, [r3, #2824]	; 0xb08
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8002400:	f01a 0f20 	tst.w	sl, #32
 8002404:	d004      	beq.n	8002410 <HAL_PCD_IRQHandler+0x264>
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002406:	eb07 1349 	add.w	r3, r7, r9, lsl #5
 800240a:	2220      	movs	r2, #32
 800240c:	f8c3 2b08 	str.w	r2, [r3, #2824]	; 0xb08
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8002410:	f41a 5f00 	tst.w	sl, #8192	; 0x2000
 8002414:	d0d5      	beq.n	80023c2 <HAL_PCD_IRQHandler+0x216>
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8002416:	eb07 1349 	add.w	r3, r7, r9, lsl #5
 800241a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800241e:	f8c3 2b08 	str.w	r2, [r3, #2824]	; 0xb08
 8002422:	e7ce      	b.n	80023c2 <HAL_PCD_IRQHandler+0x216>
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8002424:	6820      	ldr	r0, [r4, #0]
 8002426:	f003 feb9 	bl	800619c <USB_ReadDevAllInEpInterrupt>
 800242a:	4680      	mov	r8, r0
      epnum = 0U;
 800242c:	46b1      	mov	r9, r6
      while (ep_intr != 0U)
 800242e:	e02a      	b.n	8002486 <HAL_PCD_IRQHandler+0x2da>
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8002430:	4659      	mov	r1, fp
 8002432:	4620      	mov	r0, r4
 8002434:	f005 fe9c 	bl	8008170 <HAL_PCD_DataInStageCallback>
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8002438:	f01a 0f08 	tst.w	sl, #8
 800243c:	d004      	beq.n	8002448 <HAL_PCD_IRQHandler+0x29c>
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 800243e:	eb07 1349 	add.w	r3, r7, r9, lsl #5
 8002442:	2208      	movs	r2, #8
 8002444:	f8c3 2908 	str.w	r2, [r3, #2312]	; 0x908
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8002448:	f01a 0f10 	tst.w	sl, #16
 800244c:	d004      	beq.n	8002458 <HAL_PCD_IRQHandler+0x2ac>
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 800244e:	eb07 1349 	add.w	r3, r7, r9, lsl #5
 8002452:	2210      	movs	r2, #16
 8002454:	f8c3 2908 	str.w	r2, [r3, #2312]	; 0x908
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8002458:	f01a 0f40 	tst.w	sl, #64	; 0x40
 800245c:	d004      	beq.n	8002468 <HAL_PCD_IRQHandler+0x2bc>
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 800245e:	eb07 1349 	add.w	r3, r7, r9, lsl #5
 8002462:	2240      	movs	r2, #64	; 0x40
 8002464:	f8c3 2908 	str.w	r2, [r3, #2312]	; 0x908
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8002468:	f01a 0f02 	tst.w	sl, #2
 800246c:	d004      	beq.n	8002478 <HAL_PCD_IRQHandler+0x2cc>
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 800246e:	eb07 1349 	add.w	r3, r7, r9, lsl #5
 8002472:	2202      	movs	r2, #2
 8002474:	f8c3 2908 	str.w	r2, [r3, #2312]	; 0x908
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8002478:	f01a 0f80 	tst.w	sl, #128	; 0x80
 800247c:	d13f      	bne.n	80024fe <HAL_PCD_IRQHandler+0x352>
        epnum++;
 800247e:	f109 0901 	add.w	r9, r9, #1
        ep_intr >>= 1U;
 8002482:	ea4f 0858 	mov.w	r8, r8, lsr #1
      while (ep_intr != 0U)
 8002486:	f1b8 0f00 	cmp.w	r8, #0
 800248a:	f43f aed7 	beq.w	800223c <HAL_PCD_IRQHandler+0x90>
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 800248e:	f018 0f01 	tst.w	r8, #1
 8002492:	d0f4      	beq.n	800247e <HAL_PCD_IRQHandler+0x2d2>
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8002494:	fa5f fb89 	uxtb.w	fp, r9
 8002498:	4659      	mov	r1, fp
 800249a:	6820      	ldr	r0, [r4, #0]
 800249c:	f003 fe8f 	bl	80061be <USB_ReadDevInEPInterrupt>
 80024a0:	4682      	mov	sl, r0
          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 80024a2:	f010 0f01 	tst.w	r0, #1
 80024a6:	d0c7      	beq.n	8002438 <HAL_PCD_IRQHandler+0x28c>
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80024a8:	f009 030f 	and.w	r3, r9, #15
 80024ac:	2101      	movs	r1, #1
 80024ae:	fa01 f203 	lsl.w	r2, r1, r3
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80024b2:	f8d7 3834 	ldr.w	r3, [r7, #2100]	; 0x834
 80024b6:	ea23 0302 	bic.w	r3, r3, r2
 80024ba:	f8c7 3834 	str.w	r3, [r7, #2100]	; 0x834
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 80024be:	eb07 1349 	add.w	r3, r7, r9, lsl #5
 80024c2:	f8c3 1908 	str.w	r1, [r3, #2312]	; 0x908
            if (hpcd->Init.dma_enable == 1U)
 80024c6:	6923      	ldr	r3, [r4, #16]
 80024c8:	428b      	cmp	r3, r1
 80024ca:	d1b1      	bne.n	8002430 <HAL_PCD_IRQHandler+0x284>
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 80024cc:	ebc9 03c9 	rsb	r3, r9, r9, lsl #3
 80024d0:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80024d4:	6c59      	ldr	r1, [r3, #68]	; 0x44
 80024d6:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80024d8:	440a      	add	r2, r1
 80024da:	649a      	str	r2, [r3, #72]	; 0x48
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 80024dc:	f1b9 0f00 	cmp.w	r9, #0
 80024e0:	d1a6      	bne.n	8002430 <HAL_PCD_IRQHandler+0x284>
 80024e2:	ebc9 03c9 	rsb	r3, r9, r9, lsl #3
 80024e6:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80024ea:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80024ec:	2b00      	cmp	r3, #0
 80024ee:	d19f      	bne.n	8002430 <HAL_PCD_IRQHandler+0x284>
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80024f0:	f504 7271 	add.w	r2, r4, #964	; 0x3c4
 80024f4:	2101      	movs	r1, #1
 80024f6:	6820      	ldr	r0, [r4, #0]
 80024f8:	f003 fe8a 	bl	8006210 <USB_EP0_OutStart>
 80024fc:	e798      	b.n	8002430 <HAL_PCD_IRQHandler+0x284>
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 80024fe:	4649      	mov	r1, r9
 8002500:	4620      	mov	r0, r4
 8002502:	f7ff fc8b 	bl	8001e1c <PCD_WriteEmptyTxFifo>
 8002506:	e7ba      	b.n	800247e <HAL_PCD_IRQHandler+0x2d2>
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8002508:	f8d5 3804 	ldr.w	r3, [r5, #2052]	; 0x804
 800250c:	f023 0301 	bic.w	r3, r3, #1
 8002510:	f8c5 3804 	str.w	r3, [r5, #2052]	; 0x804
      if (hpcd->LPM_State == LPM_L1)
 8002514:	f894 33f4 	ldrb.w	r3, [r4, #1012]	; 0x3f4
 8002518:	2b01      	cmp	r3, #1
 800251a:	d008      	beq.n	800252e <HAL_PCD_IRQHandler+0x382>
        HAL_PCD_ResumeCallback(hpcd);
 800251c:	4620      	mov	r0, r4
 800251e:	f005 fe67 	bl	80081f0 <HAL_PCD_ResumeCallback>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8002522:	6822      	ldr	r2, [r4, #0]
 8002524:	6953      	ldr	r3, [r2, #20]
 8002526:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800252a:	6153      	str	r3, [r2, #20]
 800252c:	e68c      	b.n	8002248 <HAL_PCD_IRQHandler+0x9c>
        hpcd->LPM_State = LPM_L0;
 800252e:	2100      	movs	r1, #0
 8002530:	f884 13f4 	strb.w	r1, [r4, #1012]	; 0x3f4
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8002534:	4620      	mov	r0, r4
 8002536:	f000 fa5f 	bl	80029f8 <HAL_PCDEx_LPM_Callback>
 800253a:	e7f2      	b.n	8002522 <HAL_PCD_IRQHandler+0x376>
        HAL_PCD_SuspendCallback(hpcd);
 800253c:	4620      	mov	r0, r4
 800253e:	f005 fe3f 	bl	80081c0 <HAL_PCD_SuspendCallback>
 8002542:	e68d      	b.n	8002260 <HAL_PCD_IRQHandler+0xb4>
        HAL_PCD_SuspendCallback(hpcd);
 8002544:	4620      	mov	r0, r4
 8002546:	f005 fe3b 	bl	80081c0 <HAL_PCD_SuspendCallback>
 800254a:	e6aa      	b.n	80022a2 <HAL_PCD_IRQHandler+0xf6>
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800254c:	f505 6800 	add.w	r8, r5, #2048	; 0x800
 8002550:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8002554:	f023 0301 	bic.w	r3, r3, #1
 8002558:	f8c8 3004 	str.w	r3, [r8, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 800255c:	2110      	movs	r1, #16
 800255e:	6820      	ldr	r0, [r4, #0]
 8002560:	f003 fa16 	bl	8005990 <USB_FlushTxFifo>
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002564:	e020      	b.n	80025a8 <HAL_PCD_IRQHandler+0x3fc>
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8002566:	eb07 1346 	add.w	r3, r7, r6, lsl #5
 800256a:	f64f 317f 	movw	r1, #64383	; 0xfb7f
 800256e:	f8c3 1908 	str.w	r1, [r3, #2312]	; 0x908
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8002572:	f8d3 2900 	ldr.w	r2, [r3, #2304]	; 0x900
 8002576:	f422 1200 	bic.w	r2, r2, #2097152	; 0x200000
 800257a:	f8c3 2900 	str.w	r2, [r3, #2304]	; 0x900
        USBx_INEP(i)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 800257e:	f8d3 2900 	ldr.w	r2, [r3, #2304]	; 0x900
 8002582:	f042 6200 	orr.w	r2, r2, #134217728	; 0x8000000
 8002586:	f8c3 2900 	str.w	r2, [r3, #2304]	; 0x900
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 800258a:	f8c3 1b08 	str.w	r1, [r3, #2824]	; 0xb08
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800258e:	f8d3 2b00 	ldr.w	r2, [r3, #2816]	; 0xb00
 8002592:	f422 1200 	bic.w	r2, r2, #2097152	; 0x200000
 8002596:	f8c3 2b00 	str.w	r2, [r3, #2816]	; 0xb00
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800259a:	f8d3 2b00 	ldr.w	r2, [r3, #2816]	; 0xb00
 800259e:	f042 6200 	orr.w	r2, r2, #134217728	; 0x8000000
 80025a2:	f8c3 2b00 	str.w	r2, [r3, #2816]	; 0xb00
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80025a6:	3601      	adds	r6, #1
 80025a8:	6863      	ldr	r3, [r4, #4]
 80025aa:	42b3      	cmp	r3, r6
 80025ac:	d8db      	bhi.n	8002566 <HAL_PCD_IRQHandler+0x3ba>
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 80025ae:	f8d8 301c 	ldr.w	r3, [r8, #28]
 80025b2:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 80025b6:	f8c8 301c 	str.w	r3, [r8, #28]
      if (hpcd->Init.use_dedicated_ep1 != 0U)
 80025ba:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80025bc:	b1eb      	cbz	r3, 80025fa <HAL_PCD_IRQHandler+0x44e>
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 80025be:	f8d8 3084 	ldr.w	r3, [r8, #132]	; 0x84
 80025c2:	f043 030b 	orr.w	r3, r3, #11
 80025c6:	f8c8 3084 	str.w	r3, [r8, #132]	; 0x84
        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 80025ca:	f8d8 3044 	ldr.w	r3, [r8, #68]	; 0x44
 80025ce:	f043 030b 	orr.w	r3, r3, #11
 80025d2:	f8c8 3044 	str.w	r3, [r8, #68]	; 0x44
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 80025d6:	f8d5 3800 	ldr.w	r3, [r5, #2048]	; 0x800
 80025da:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 80025de:	f8c5 3800 	str.w	r3, [r5, #2048]	; 0x800
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80025e2:	f504 7271 	add.w	r2, r4, #964	; 0x3c4
 80025e6:	7c21      	ldrb	r1, [r4, #16]
 80025e8:	6820      	ldr	r0, [r4, #0]
 80025ea:	f003 fe11 	bl	8006210 <USB_EP0_OutStart>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 80025ee:	6822      	ldr	r2, [r4, #0]
 80025f0:	6953      	ldr	r3, [r2, #20]
 80025f2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80025f6:	6153      	str	r3, [r2, #20]
 80025f8:	e65a      	b.n	80022b0 <HAL_PCD_IRQHandler+0x104>
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 80025fa:	f8d8 2014 	ldr.w	r2, [r8, #20]
 80025fe:	f242 032b 	movw	r3, #8235	; 0x202b
 8002602:	4313      	orrs	r3, r2
 8002604:	f8c8 3014 	str.w	r3, [r8, #20]
        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8002608:	f8d8 3010 	ldr.w	r3, [r8, #16]
 800260c:	f043 030b 	orr.w	r3, r3, #11
 8002610:	f8c8 3010 	str.w	r3, [r8, #16]
 8002614:	e7df      	b.n	80025d6 <HAL_PCD_IRQHandler+0x42a>
      (void)USB_ActivateSetup(hpcd->Instance);
 8002616:	6820      	ldr	r0, [r4, #0]
 8002618:	f003 fdea 	bl	80061f0 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 800261c:	6820      	ldr	r0, [r4, #0]
 800261e:	f003 faad 	bl	8005b7c <USB_GetDevSpeed>
 8002622:	60e0      	str	r0, [r4, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8002624:	6825      	ldr	r5, [r4, #0]
 8002626:	f000 ff85 	bl	8003534 <HAL_RCC_GetHCLKFreq>
 800262a:	4601      	mov	r1, r0
 800262c:	7b22      	ldrb	r2, [r4, #12]
 800262e:	4628      	mov	r0, r5
 8002630:	f003 f918 	bl	8005864 <USB_SetTurnaroundTime>
      HAL_PCD_ResetCallback(hpcd);
 8002634:	4620      	mov	r0, r4
 8002636:	f005 fdac 	bl	8008192 <HAL_PCD_ResetCallback>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 800263a:	6822      	ldr	r2, [r4, #0]
 800263c:	6953      	ldr	r3, [r2, #20]
 800263e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002642:	6153      	str	r3, [r2, #20]
 8002644:	e63b      	b.n	80022be <HAL_PCD_IRQHandler+0x112>
      HAL_PCD_SOFCallback(hpcd);
 8002646:	4620      	mov	r0, r4
 8002648:	f005 fd9d 	bl	8008186 <HAL_PCD_SOFCallback>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 800264c:	6822      	ldr	r2, [r4, #0]
 800264e:	6953      	ldr	r3, [r2, #20]
 8002650:	f003 0308 	and.w	r3, r3, #8
 8002654:	6153      	str	r3, [r2, #20]
 8002656:	e639      	b.n	80022cc <HAL_PCD_IRQHandler+0x120>
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8002658:	2100      	movs	r1, #0
 800265a:	4620      	mov	r0, r4
 800265c:	f005 fdd4 	bl	8008208 <HAL_PCD_ISOINIncompleteCallback>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8002660:	6822      	ldr	r2, [r4, #0]
 8002662:	6953      	ldr	r3, [r2, #20]
 8002664:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002668:	6153      	str	r3, [r2, #20]
 800266a:	e636      	b.n	80022da <HAL_PCD_IRQHandler+0x12e>
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 800266c:	2100      	movs	r1, #0
 800266e:	4620      	mov	r0, r4
 8002670:	f005 fdc4 	bl	80081fc <HAL_PCD_ISOOUTIncompleteCallback>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8002674:	6822      	ldr	r2, [r4, #0]
 8002676:	6953      	ldr	r3, [r2, #20]
 8002678:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800267c:	6153      	str	r3, [r2, #20]
 800267e:	e633      	b.n	80022e8 <HAL_PCD_IRQHandler+0x13c>
      HAL_PCD_ConnectCallback(hpcd);
 8002680:	4620      	mov	r0, r4
 8002682:	f005 fdc7 	bl	8008214 <HAL_PCD_ConnectCallback>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8002686:	6822      	ldr	r2, [r4, #0]
 8002688:	6953      	ldr	r3, [r2, #20]
 800268a:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800268e:	6153      	str	r3, [r2, #20]
 8002690:	e631      	b.n	80022f6 <HAL_PCD_IRQHandler+0x14a>
        HAL_PCD_DisconnectCallback(hpcd);
 8002692:	4620      	mov	r0, r4
 8002694:	f005 fdc4 	bl	8008220 <HAL_PCD_DisconnectCallback>
 8002698:	e63a      	b.n	8002310 <HAL_PCD_IRQHandler+0x164>

0800269a <HAL_PCD_SetAddress>:
  __HAL_LOCK(hpcd);
 800269a:	f890 33bc 	ldrb.w	r3, [r0, #956]	; 0x3bc
 800269e:	2b01      	cmp	r3, #1
 80026a0:	d00d      	beq.n	80026be <HAL_PCD_SetAddress+0x24>
{
 80026a2:	b510      	push	{r4, lr}
 80026a4:	4604      	mov	r4, r0
  __HAL_LOCK(hpcd);
 80026a6:	2301      	movs	r3, #1
 80026a8:	f880 33bc 	strb.w	r3, [r0, #956]	; 0x3bc
  hpcd->USB_Address = address;
 80026ac:	f880 1038 	strb.w	r1, [r0, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80026b0:	6800      	ldr	r0, [r0, #0]
 80026b2:	f003 fd3f 	bl	8006134 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80026b6:	2000      	movs	r0, #0
 80026b8:	f884 03bc 	strb.w	r0, [r4, #956]	; 0x3bc
}
 80026bc:	bd10      	pop	{r4, pc}
  __HAL_LOCK(hpcd);
 80026be:	2002      	movs	r0, #2
}
 80026c0:	4770      	bx	lr

080026c2 <HAL_PCD_EP_Open>:
{
 80026c2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80026c4:	4607      	mov	r7, r0
 80026c6:	460c      	mov	r4, r1
  if ((ep_addr & 0x80U) == 0x80U)
 80026c8:	f011 0f80 	tst.w	r1, #128	; 0x80
 80026cc:	d127      	bne.n	800271e <HAL_PCD_EP_Open+0x5c>
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80026ce:	f001 050f 	and.w	r5, r1, #15
 80026d2:	ebc5 06c5 	rsb	r6, r5, r5, lsl #3
 80026d6:	00b6      	lsls	r6, r6, #2
 80026d8:	f506 76fc 	add.w	r6, r6, #504	; 0x1f8
 80026dc:	4406      	add	r6, r0
 80026de:	1d31      	adds	r1, r6, #4
    ep->is_in = 0U;
 80026e0:	ebc5 05c5 	rsb	r5, r5, r5, lsl #3
 80026e4:	eb00 0585 	add.w	r5, r0, r5, lsl #2
 80026e8:	2000      	movs	r0, #0
 80026ea:	f885 01fd 	strb.w	r0, [r5, #509]	; 0x1fd
  ep->num = ep_addr & EP_ADDR_MSK;
 80026ee:	f004 040f 	and.w	r4, r4, #15
 80026f2:	700c      	strb	r4, [r1, #0]
  ep->maxpacket = ep_mps;
 80026f4:	608a      	str	r2, [r1, #8]
  ep->type = ep_type;
 80026f6:	70cb      	strb	r3, [r1, #3]
  if (ep->is_in != 0U)
 80026f8:	784a      	ldrb	r2, [r1, #1]
 80026fa:	b102      	cbz	r2, 80026fe <HAL_PCD_EP_Open+0x3c>
    ep->tx_fifo_num = ep->num;
 80026fc:	80cc      	strh	r4, [r1, #6]
  if (ep_type == EP_TYPE_BULK)
 80026fe:	2b02      	cmp	r3, #2
 8002700:	d01d      	beq.n	800273e <HAL_PCD_EP_Open+0x7c>
  __HAL_LOCK(hpcd);
 8002702:	f897 33bc 	ldrb.w	r3, [r7, #956]	; 0x3bc
 8002706:	2b01      	cmp	r3, #1
 8002708:	d01c      	beq.n	8002744 <HAL_PCD_EP_Open+0x82>
 800270a:	2301      	movs	r3, #1
 800270c:	f887 33bc 	strb.w	r3, [r7, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8002710:	6838      	ldr	r0, [r7, #0]
 8002712:	f003 fa43 	bl	8005b9c <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002716:	2000      	movs	r0, #0
 8002718:	f887 03bc 	strb.w	r0, [r7, #956]	; 0x3bc
}
 800271c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800271e:	f001 000f 	and.w	r0, r1, #15
 8002722:	ebc0 01c0 	rsb	r1, r0, r0, lsl #3
 8002726:	0089      	lsls	r1, r1, #2
 8002728:	3138      	adds	r1, #56	; 0x38
 800272a:	4439      	add	r1, r7
 800272c:	3104      	adds	r1, #4
    ep->is_in = 1U;
 800272e:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
 8002732:	eb07 0080 	add.w	r0, r7, r0, lsl #2
 8002736:	2501      	movs	r5, #1
 8002738:	f880 503d 	strb.w	r5, [r0, #61]	; 0x3d
 800273c:	e7d7      	b.n	80026ee <HAL_PCD_EP_Open+0x2c>
    ep->data_pid_start = 0U;
 800273e:	2300      	movs	r3, #0
 8002740:	710b      	strb	r3, [r1, #4]
 8002742:	e7de      	b.n	8002702 <HAL_PCD_EP_Open+0x40>
  __HAL_LOCK(hpcd);
 8002744:	2002      	movs	r0, #2
 8002746:	e7e9      	b.n	800271c <HAL_PCD_EP_Open+0x5a>

08002748 <HAL_PCD_EP_Close>:
{
 8002748:	b510      	push	{r4, lr}
 800274a:	4604      	mov	r4, r0
 800274c:	460a      	mov	r2, r1
  if ((ep_addr & 0x80U) == 0x80U)
 800274e:	f011 0f80 	tst.w	r1, #128	; 0x80
 8002752:	d120      	bne.n	8002796 <HAL_PCD_EP_Close+0x4e>
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002754:	f001 000f 	and.w	r0, r1, #15
 8002758:	ebc0 03c0 	rsb	r3, r0, r0, lsl #3
 800275c:	009b      	lsls	r3, r3, #2
 800275e:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8002762:	4423      	add	r3, r4
 8002764:	1d19      	adds	r1, r3, #4
    ep->is_in = 0U;
 8002766:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
 800276a:	eb04 0080 	add.w	r0, r4, r0, lsl #2
 800276e:	2300      	movs	r3, #0
 8002770:	f880 31fd 	strb.w	r3, [r0, #509]	; 0x1fd
  ep->num   = ep_addr & EP_ADDR_MSK;
 8002774:	f002 020f 	and.w	r2, r2, #15
 8002778:	700a      	strb	r2, [r1, #0]
  __HAL_LOCK(hpcd);
 800277a:	f894 33bc 	ldrb.w	r3, [r4, #956]	; 0x3bc
 800277e:	2b01      	cmp	r3, #1
 8002780:	d019      	beq.n	80027b6 <HAL_PCD_EP_Close+0x6e>
 8002782:	2301      	movs	r3, #1
 8002784:	f884 33bc 	strb.w	r3, [r4, #956]	; 0x3bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8002788:	6820      	ldr	r0, [r4, #0]
 800278a:	f003 fa4f 	bl	8005c2c <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800278e:	2000      	movs	r0, #0
 8002790:	f884 03bc 	strb.w	r0, [r4, #956]	; 0x3bc
}
 8002794:	bd10      	pop	{r4, pc}
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002796:	f001 000f 	and.w	r0, r1, #15
 800279a:	ebc0 03c0 	rsb	r3, r0, r0, lsl #3
 800279e:	009b      	lsls	r3, r3, #2
 80027a0:	3338      	adds	r3, #56	; 0x38
 80027a2:	4423      	add	r3, r4
 80027a4:	1d19      	adds	r1, r3, #4
    ep->is_in = 1U;
 80027a6:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
 80027aa:	eb04 0080 	add.w	r0, r4, r0, lsl #2
 80027ae:	2301      	movs	r3, #1
 80027b0:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
 80027b4:	e7de      	b.n	8002774 <HAL_PCD_EP_Close+0x2c>
  __HAL_LOCK(hpcd);
 80027b6:	2002      	movs	r0, #2
 80027b8:	e7ec      	b.n	8002794 <HAL_PCD_EP_Close+0x4c>

080027ba <HAL_PCD_EP_Receive>:
{
 80027ba:	b538      	push	{r3, r4, r5, lr}
  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80027bc:	f001 040f 	and.w	r4, r1, #15
 80027c0:	ebc4 01c4 	rsb	r1, r4, r4, lsl #3
 80027c4:	0089      	lsls	r1, r1, #2
 80027c6:	f501 71fc 	add.w	r1, r1, #504	; 0x1f8
 80027ca:	4401      	add	r1, r0
 80027cc:	3104      	adds	r1, #4
  ep->xfer_buff = pBuf;
 80027ce:	ebc4 05c4 	rsb	r5, r4, r4, lsl #3
 80027d2:	eb00 0585 	add.w	r5, r0, r5, lsl #2
 80027d6:	f8c5 2208 	str.w	r2, [r5, #520]	; 0x208
  ep->xfer_len = len;
 80027da:	f8c5 3210 	str.w	r3, [r5, #528]	; 0x210
  ep->xfer_count = 0U;
 80027de:	2300      	movs	r3, #0
 80027e0:	f8c5 3214 	str.w	r3, [r5, #532]	; 0x214
  ep->is_in = 0U;
 80027e4:	f885 31fd 	strb.w	r3, [r5, #509]	; 0x1fd
  ep->num = ep_addr & EP_ADDR_MSK;
 80027e8:	f885 41fc 	strb.w	r4, [r5, #508]	; 0x1fc
  if (hpcd->Init.dma_enable == 1U)
 80027ec:	6903      	ldr	r3, [r0, #16]
 80027ee:	2b01      	cmp	r3, #1
 80027f0:	d006      	beq.n	8002800 <HAL_PCD_EP_Receive+0x46>
  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80027f2:	b964      	cbnz	r4, 800280e <HAL_PCD_EP_Receive+0x54>
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80027f4:	b2da      	uxtb	r2, r3
 80027f6:	6800      	ldr	r0, [r0, #0]
 80027f8:	f003 fa86 	bl	8005d08 <USB_EP0StartXfer>
}
 80027fc:	2000      	movs	r0, #0
 80027fe:	bd38      	pop	{r3, r4, r5, pc}
    ep->dma_addr = (uint32_t)pBuf;
 8002800:	ebc4 05c4 	rsb	r5, r4, r4, lsl #3
 8002804:	eb00 0585 	add.w	r5, r0, r5, lsl #2
 8002808:	f8c5 220c 	str.w	r2, [r5, #524]	; 0x20c
 800280c:	e7f1      	b.n	80027f2 <HAL_PCD_EP_Receive+0x38>
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800280e:	b2da      	uxtb	r2, r3
 8002810:	6800      	ldr	r0, [r0, #0]
 8002812:	f003 fb19 	bl	8005e48 <USB_EPStartXfer>
 8002816:	e7f1      	b.n	80027fc <HAL_PCD_EP_Receive+0x42>

08002818 <HAL_PCD_EP_GetRxCount>:
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8002818:	f001 010f 	and.w	r1, r1, #15
 800281c:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
 8002820:	eb00 0181 	add.w	r1, r0, r1, lsl #2
}
 8002824:	f8d1 0214 	ldr.w	r0, [r1, #532]	; 0x214
 8002828:	4770      	bx	lr

0800282a <HAL_PCD_EP_Transmit>:
{
 800282a:	b538      	push	{r3, r4, r5, lr}
  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800282c:	f001 040f 	and.w	r4, r1, #15
 8002830:	ebc4 01c4 	rsb	r1, r4, r4, lsl #3
 8002834:	0089      	lsls	r1, r1, #2
 8002836:	3138      	adds	r1, #56	; 0x38
 8002838:	4401      	add	r1, r0
 800283a:	3104      	adds	r1, #4
  ep->xfer_buff = pBuf;
 800283c:	ebc4 05c4 	rsb	r5, r4, r4, lsl #3
 8002840:	eb00 0585 	add.w	r5, r0, r5, lsl #2
 8002844:	64aa      	str	r2, [r5, #72]	; 0x48
  ep->xfer_len = len;
 8002846:	652b      	str	r3, [r5, #80]	; 0x50
  ep->xfer_count = 0U;
 8002848:	2300      	movs	r3, #0
 800284a:	656b      	str	r3, [r5, #84]	; 0x54
  ep->is_in = 1U;
 800284c:	2301      	movs	r3, #1
 800284e:	f885 303d 	strb.w	r3, [r5, #61]	; 0x3d
  ep->num = ep_addr & EP_ADDR_MSK;
 8002852:	f885 403c 	strb.w	r4, [r5, #60]	; 0x3c
  if (hpcd->Init.dma_enable == 1U)
 8002856:	6903      	ldr	r3, [r0, #16]
 8002858:	2b01      	cmp	r3, #1
 800285a:	d006      	beq.n	800286a <HAL_PCD_EP_Transmit+0x40>
  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800285c:	b95c      	cbnz	r4, 8002876 <HAL_PCD_EP_Transmit+0x4c>
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800285e:	b2da      	uxtb	r2, r3
 8002860:	6800      	ldr	r0, [r0, #0]
 8002862:	f003 fa51 	bl	8005d08 <USB_EP0StartXfer>
}
 8002866:	2000      	movs	r0, #0
 8002868:	bd38      	pop	{r3, r4, r5, pc}
    ep->dma_addr = (uint32_t)pBuf;
 800286a:	ebc4 05c4 	rsb	r5, r4, r4, lsl #3
 800286e:	eb00 0585 	add.w	r5, r0, r5, lsl #2
 8002872:	64ea      	str	r2, [r5, #76]	; 0x4c
 8002874:	e7f2      	b.n	800285c <HAL_PCD_EP_Transmit+0x32>
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002876:	b2da      	uxtb	r2, r3
 8002878:	6800      	ldr	r0, [r0, #0]
 800287a:	f003 fae5 	bl	8005e48 <USB_EPStartXfer>
 800287e:	e7f2      	b.n	8002866 <HAL_PCD_EP_Transmit+0x3c>

08002880 <HAL_PCD_EP_SetStall>:
{
 8002880:	b538      	push	{r3, r4, r5, lr}
  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8002882:	f001 050f 	and.w	r5, r1, #15
 8002886:	6842      	ldr	r2, [r0, #4]
 8002888:	4295      	cmp	r5, r2
 800288a:	d839      	bhi.n	8002900 <HAL_PCD_EP_SetStall+0x80>
 800288c:	4604      	mov	r4, r0
 800288e:	460b      	mov	r3, r1
  if ((0x80U & ep_addr) == 0x80U)
 8002890:	f011 0f80 	tst.w	r1, #128	; 0x80
 8002894:	d11f      	bne.n	80028d6 <HAL_PCD_EP_SetStall+0x56>
    ep = &hpcd->OUT_ep[ep_addr];
 8002896:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
 800289a:	0089      	lsls	r1, r1, #2
 800289c:	f501 71fc 	add.w	r1, r1, #504	; 0x1f8
 80028a0:	4401      	add	r1, r0
 80028a2:	3104      	adds	r1, #4
    ep->is_in = 0U;
 80028a4:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 80028a8:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 80028ac:	2200      	movs	r2, #0
 80028ae:	f883 21fd 	strb.w	r2, [r3, #509]	; 0x1fd
  ep->is_stall = 1U;
 80028b2:	2301      	movs	r3, #1
 80028b4:	708b      	strb	r3, [r1, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80028b6:	700d      	strb	r5, [r1, #0]
  __HAL_LOCK(hpcd);
 80028b8:	f894 33bc 	ldrb.w	r3, [r4, #956]	; 0x3bc
 80028bc:	2b01      	cmp	r3, #1
 80028be:	d021      	beq.n	8002904 <HAL_PCD_EP_SetStall+0x84>
 80028c0:	2301      	movs	r3, #1
 80028c2:	f884 33bc 	strb.w	r3, [r4, #956]	; 0x3bc
  (void)USB_EPSetStall(hpcd->Instance, ep);
 80028c6:	6820      	ldr	r0, [r4, #0]
 80028c8:	f003 fbd9 	bl	800607e <USB_EPSetStall>
  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80028cc:	b18d      	cbz	r5, 80028f2 <HAL_PCD_EP_SetStall+0x72>
  __HAL_UNLOCK(hpcd);
 80028ce:	2000      	movs	r0, #0
 80028d0:	f884 03bc 	strb.w	r0, [r4, #956]	; 0x3bc
}
 80028d4:	bd38      	pop	{r3, r4, r5, pc}
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80028d6:	ebc5 01c5 	rsb	r1, r5, r5, lsl #3
 80028da:	0089      	lsls	r1, r1, #2
 80028dc:	3138      	adds	r1, #56	; 0x38
 80028de:	4401      	add	r1, r0
 80028e0:	3104      	adds	r1, #4
    ep->is_in = 1U;
 80028e2:	ebc5 03c5 	rsb	r3, r5, r5, lsl #3
 80028e6:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 80028ea:	2201      	movs	r2, #1
 80028ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 80028f0:	e7df      	b.n	80028b2 <HAL_PCD_EP_SetStall+0x32>
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 80028f2:	f504 7271 	add.w	r2, r4, #964	; 0x3c4
 80028f6:	7c21      	ldrb	r1, [r4, #16]
 80028f8:	6820      	ldr	r0, [r4, #0]
 80028fa:	f003 fc89 	bl	8006210 <USB_EP0_OutStart>
 80028fe:	e7e6      	b.n	80028ce <HAL_PCD_EP_SetStall+0x4e>
    return HAL_ERROR;
 8002900:	2001      	movs	r0, #1
 8002902:	e7e7      	b.n	80028d4 <HAL_PCD_EP_SetStall+0x54>
  __HAL_LOCK(hpcd);
 8002904:	2002      	movs	r0, #2
 8002906:	e7e5      	b.n	80028d4 <HAL_PCD_EP_SetStall+0x54>

08002908 <HAL_PCD_EP_ClrStall>:
  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8002908:	f001 030f 	and.w	r3, r1, #15
 800290c:	6842      	ldr	r2, [r0, #4]
 800290e:	4293      	cmp	r3, r2
 8002910:	d831      	bhi.n	8002976 <HAL_PCD_EP_ClrStall+0x6e>
{
 8002912:	b510      	push	{r4, lr}
 8002914:	4604      	mov	r4, r0
  if ((0x80U & ep_addr) == 0x80U)
 8002916:	f011 0f80 	tst.w	r1, #128	; 0x80
 800291a:	d11e      	bne.n	800295a <HAL_PCD_EP_ClrStall+0x52>
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800291c:	ebc3 01c3 	rsb	r1, r3, r3, lsl #3
 8002920:	0089      	lsls	r1, r1, #2
 8002922:	f501 71fc 	add.w	r1, r1, #504	; 0x1f8
 8002926:	4401      	add	r1, r0
 8002928:	3104      	adds	r1, #4
    ep->is_in = 0U;
 800292a:	ebc3 02c3 	rsb	r2, r3, r3, lsl #3
 800292e:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 8002932:	2000      	movs	r0, #0
 8002934:	f882 01fd 	strb.w	r0, [r2, #509]	; 0x1fd
  ep->is_stall = 0U;
 8002938:	2200      	movs	r2, #0
 800293a:	708a      	strb	r2, [r1, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800293c:	700b      	strb	r3, [r1, #0]
  __HAL_LOCK(hpcd);
 800293e:	f894 33bc 	ldrb.w	r3, [r4, #956]	; 0x3bc
 8002942:	2b01      	cmp	r3, #1
 8002944:	d019      	beq.n	800297a <HAL_PCD_EP_ClrStall+0x72>
 8002946:	2301      	movs	r3, #1
 8002948:	f884 33bc 	strb.w	r3, [r4, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 800294c:	6820      	ldr	r0, [r4, #0]
 800294e:	f003 fbc3 	bl	80060d8 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8002952:	2000      	movs	r0, #0
 8002954:	f884 03bc 	strb.w	r0, [r4, #956]	; 0x3bc
}
 8002958:	bd10      	pop	{r4, pc}
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800295a:	ebc3 01c3 	rsb	r1, r3, r3, lsl #3
 800295e:	0089      	lsls	r1, r1, #2
 8002960:	3138      	adds	r1, #56	; 0x38
 8002962:	4401      	add	r1, r0
 8002964:	3104      	adds	r1, #4
    ep->is_in = 1U;
 8002966:	ebc3 02c3 	rsb	r2, r3, r3, lsl #3
 800296a:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 800296e:	2001      	movs	r0, #1
 8002970:	f882 003d 	strb.w	r0, [r2, #61]	; 0x3d
 8002974:	e7e0      	b.n	8002938 <HAL_PCD_EP_ClrStall+0x30>
    return HAL_ERROR;
 8002976:	2001      	movs	r0, #1
}
 8002978:	4770      	bx	lr
  __HAL_LOCK(hpcd);
 800297a:	2002      	movs	r0, #2
 800297c:	e7ec      	b.n	8002958 <HAL_PCD_EP_ClrStall+0x50>

0800297e <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 800297e:	b430      	push	{r4, r5}
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8002980:	6804      	ldr	r4, [r0, #0]
 8002982:	6a60      	ldr	r0, [r4, #36]	; 0x24

  if (fifo == 0U)
 8002984:	b919      	cbnz	r1, 800298e <HAL_PCDEx_SetTxFiFo+0x10>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8002986:	ea40 4002 	orr.w	r0, r0, r2, lsl #16
 800298a:	62a0      	str	r0, [r4, #40]	; 0x28
 800298c:	e018      	b.n	80029c0 <HAL_PCDEx_SetTxFiFo+0x42>
 800298e:	460d      	mov	r5, r1
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8002990:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8002992:	eb00 4013 	add.w	r0, r0, r3, lsr #16
    for (i = 0U; i < (fifo - 1U); i++)
 8002996:	2300      	movs	r3, #0
 8002998:	1e69      	subs	r1, r5, #1
 800299a:	428b      	cmp	r3, r1
 800299c:	d209      	bcs.n	80029b2 <HAL_PCDEx_SetTxFiFo+0x34>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 800299e:	f103 0140 	add.w	r1, r3, #64	; 0x40
 80029a2:	eb04 0181 	add.w	r1, r4, r1, lsl #2
 80029a6:	6849      	ldr	r1, [r1, #4]
 80029a8:	eb00 4011 	add.w	r0, r0, r1, lsr #16
    for (i = 0U; i < (fifo - 1U); i++)
 80029ac:	3301      	adds	r3, #1
 80029ae:	b2db      	uxtb	r3, r3
 80029b0:	e7f2      	b.n	8002998 <HAL_PCDEx_SetTxFiFo+0x1a>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 80029b2:	ea40 4002 	orr.w	r0, r0, r2, lsl #16
 80029b6:	f105 013f 	add.w	r1, r5, #63	; 0x3f
 80029ba:	eb04 0181 	add.w	r1, r4, r1, lsl #2
 80029be:	6048      	str	r0, [r1, #4]
  }

  return HAL_OK;
}
 80029c0:	2000      	movs	r0, #0
 80029c2:	bc30      	pop	{r4, r5}
 80029c4:	4770      	bx	lr

080029c6 <HAL_PCDEx_SetRxFiFo>:
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
  hpcd->Instance->GRXFSIZ = size;
 80029c6:	6803      	ldr	r3, [r0, #0]
 80029c8:	6259      	str	r1, [r3, #36]	; 0x24

  return HAL_OK;
}
 80029ca:	2000      	movs	r0, #0
 80029cc:	4770      	bx	lr
	...

080029d0 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 80029d0:	4603      	mov	r3, r0
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80029d2:	6802      	ldr	r2, [r0, #0]

  hpcd->lpm_active = 1U;
 80029d4:	2101      	movs	r1, #1
 80029d6:	f8c0 13fc 	str.w	r1, [r0, #1020]	; 0x3fc
  hpcd->LPM_State = LPM_L0;
 80029da:	2000      	movs	r0, #0
 80029dc:	f883 03f4 	strb.w	r0, [r3, #1012]	; 0x3f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 80029e0:	6993      	ldr	r3, [r2, #24]
 80029e2:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80029e6:	6193      	str	r3, [r2, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 80029e8:	6d51      	ldr	r1, [r2, #84]	; 0x54
 80029ea:	4b02      	ldr	r3, [pc, #8]	; (80029f4 <HAL_PCDEx_ActivateLPM+0x24>)
 80029ec:	430b      	orrs	r3, r1
 80029ee:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
}
 80029f0:	4770      	bx	lr
 80029f2:	bf00      	nop
 80029f4:	10000003 	.word	0x10000003

080029f8 <HAL_PCDEx_LPM_Callback>:
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 80029f8:	4770      	bx	lr
	...

080029fc <HAL_PWREx_ConfigSupply>:
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 80029fc:	4b13      	ldr	r3, [pc, #76]	; (8002a4c <HAL_PWREx_ConfigSupply+0x50>)
 80029fe:	68db      	ldr	r3, [r3, #12]
 8002a00:	f013 0f04 	tst.w	r3, #4
 8002a04:	d107      	bne.n	8002a16 <HAL_PWREx_ConfigSupply+0x1a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8002a06:	4b11      	ldr	r3, [pc, #68]	; (8002a4c <HAL_PWREx_ConfigSupply+0x50>)
 8002a08:	68db      	ldr	r3, [r3, #12]
 8002a0a:	f003 0307 	and.w	r3, r3, #7
 8002a0e:	4283      	cmp	r3, r0
 8002a10:	d01a      	beq.n	8002a48 <HAL_PWREx_ConfigSupply+0x4c>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8002a12:	2001      	movs	r0, #1
 8002a14:	4770      	bx	lr
{
 8002a16:	b510      	push	{r4, lr}
      return HAL_OK;
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8002a18:	4a0c      	ldr	r2, [pc, #48]	; (8002a4c <HAL_PWREx_ConfigSupply+0x50>)
 8002a1a:	68d3      	ldr	r3, [r2, #12]
 8002a1c:	f023 0307 	bic.w	r3, r3, #7
 8002a20:	4318      	orrs	r0, r3
 8002a22:	60d0      	str	r0, [r2, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8002a24:	f7fe f9e2 	bl	8000dec <HAL_GetTick>
 8002a28:	4604      	mov	r4, r0

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8002a2a:	4b08      	ldr	r3, [pc, #32]	; (8002a4c <HAL_PWREx_ConfigSupply+0x50>)
 8002a2c:	685b      	ldr	r3, [r3, #4]
 8002a2e:	f413 5f00 	tst.w	r3, #8192	; 0x2000
 8002a32:	d107      	bne.n	8002a44 <HAL_PWREx_ConfigSupply+0x48>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8002a34:	f7fe f9da 	bl	8000dec <HAL_GetTick>
 8002a38:	1b00      	subs	r0, r0, r4
 8002a3a:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8002a3e:	d9f4      	bls.n	8002a2a <HAL_PWREx_ConfigSupply+0x2e>
    {
      return HAL_ERROR;
 8002a40:	2001      	movs	r0, #1
 8002a42:	e000      	b.n	8002a46 <HAL_PWREx_ConfigSupply+0x4a>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8002a44:	2000      	movs	r0, #0
}
 8002a46:	bd10      	pop	{r4, pc}
      return HAL_OK;
 8002a48:	2000      	movs	r0, #0
}
 8002a4a:	4770      	bx	lr
 8002a4c:	58024800 	.word	0x58024800

08002a50 <HAL_PWREx_EnableUSBVoltageDetector>:
  * @retval None.
  */
void HAL_PWREx_EnableUSBVoltageDetector (void)
{
  /* Enable the USB voltage detector */
  SET_BIT (PWR->CR3, PWR_CR3_USB33DEN);
 8002a50:	4a02      	ldr	r2, [pc, #8]	; (8002a5c <HAL_PWREx_EnableUSBVoltageDetector+0xc>)
 8002a52:	68d3      	ldr	r3, [r2, #12]
 8002a54:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002a58:	60d3      	str	r3, [r2, #12]
}
 8002a5a:	4770      	bx	lr
 8002a5c:	58024800 	.word	0x58024800

08002a60 <HAL_RCC_OscConfig>:
{
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002a60:	2800      	cmp	r0, #0
 8002a62:	f000 8304 	beq.w	800306e <HAL_RCC_OscConfig+0x60e>
{
 8002a66:	b538      	push	{r3, r4, r5, lr}
 8002a68:	4604      	mov	r4, r0
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002a6a:	6803      	ldr	r3, [r0, #0]
 8002a6c:	f013 0f01 	tst.w	r3, #1
 8002a70:	d025      	beq.n	8002abe <HAL_RCC_OscConfig+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002a72:	4aae      	ldr	r2, [pc, #696]	; (8002d2c <HAL_RCC_OscConfig+0x2cc>)
 8002a74:	6913      	ldr	r3, [r2, #16]
 8002a76:	f003 0338 	and.w	r3, r3, #56	; 0x38
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002a7a:	6a92      	ldr	r2, [r2, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8002a7c:	2b10      	cmp	r3, #16
 8002a7e:	d015      	beq.n	8002aac <HAL_RCC_OscConfig+0x4c>
 8002a80:	2b18      	cmp	r3, #24
 8002a82:	d00f      	beq.n	8002aa4 <HAL_RCC_OscConfig+0x44>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002a84:	6863      	ldr	r3, [r4, #4]
 8002a86:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002a8a:	d03f      	beq.n	8002b0c <HAL_RCC_OscConfig+0xac>
 8002a8c:	2b00      	cmp	r3, #0
 8002a8e:	d153      	bne.n	8002b38 <HAL_RCC_OscConfig+0xd8>
 8002a90:	4ba6      	ldr	r3, [pc, #664]	; (8002d2c <HAL_RCC_OscConfig+0x2cc>)
 8002a92:	681a      	ldr	r2, [r3, #0]
 8002a94:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8002a98:	601a      	str	r2, [r3, #0]
 8002a9a:	681a      	ldr	r2, [r3, #0]
 8002a9c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002aa0:	601a      	str	r2, [r3, #0]
 8002aa2:	e038      	b.n	8002b16 <HAL_RCC_OscConfig+0xb6>
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8002aa4:	f002 0203 	and.w	r2, r2, #3
 8002aa8:	2a02      	cmp	r2, #2
 8002aaa:	d1eb      	bne.n	8002a84 <HAL_RCC_OscConfig+0x24>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002aac:	4b9f      	ldr	r3, [pc, #636]	; (8002d2c <HAL_RCC_OscConfig+0x2cc>)
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8002ab4:	d003      	beq.n	8002abe <HAL_RCC_OscConfig+0x5e>
 8002ab6:	6863      	ldr	r3, [r4, #4]
 8002ab8:	2b00      	cmp	r3, #0
 8002aba:	f000 82da 	beq.w	8003072 <HAL_RCC_OscConfig+0x612>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002abe:	6823      	ldr	r3, [r4, #0]
 8002ac0:	f013 0f02 	tst.w	r3, #2
 8002ac4:	f000 808b 	beq.w	8002bde <HAL_RCC_OscConfig+0x17e>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002ac8:	4a98      	ldr	r2, [pc, #608]	; (8002d2c <HAL_RCC_OscConfig+0x2cc>)
 8002aca:	6913      	ldr	r3, [r2, #16]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002acc:	6a92      	ldr	r2, [r2, #40]	; 0x28
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8002ace:	f013 0338 	ands.w	r3, r3, #56	; 0x38
 8002ad2:	d05a      	beq.n	8002b8a <HAL_RCC_OscConfig+0x12a>
 8002ad4:	2b18      	cmp	r3, #24
 8002ad6:	d055      	beq.n	8002b84 <HAL_RCC_OscConfig+0x124>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002ad8:	68e3      	ldr	r3, [r4, #12]
 8002ada:	2b00      	cmp	r3, #0
 8002adc:	f000 80c8 	beq.w	8002c70 <HAL_RCC_OscConfig+0x210>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8002ae0:	4992      	ldr	r1, [pc, #584]	; (8002d2c <HAL_RCC_OscConfig+0x2cc>)
 8002ae2:	680a      	ldr	r2, [r1, #0]
 8002ae4:	f022 0219 	bic.w	r2, r2, #25
 8002ae8:	4313      	orrs	r3, r2
 8002aea:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002aec:	f7fe f97e 	bl	8000dec <HAL_GetTick>
 8002af0:	4605      	mov	r5, r0

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002af2:	4b8e      	ldr	r3, [pc, #568]	; (8002d2c <HAL_RCC_OscConfig+0x2cc>)
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	f013 0f04 	tst.w	r3, #4
 8002afa:	f040 8097 	bne.w	8002c2c <HAL_RCC_OscConfig+0x1cc>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002afe:	f7fe f975 	bl	8000dec <HAL_GetTick>
 8002b02:	1b40      	subs	r0, r0, r5
 8002b04:	2802      	cmp	r0, #2
 8002b06:	d9f4      	bls.n	8002af2 <HAL_RCC_OscConfig+0x92>
          {
            return HAL_TIMEOUT;
 8002b08:	2003      	movs	r0, #3
 8002b0a:	e2b9      	b.n	8003080 <HAL_RCC_OscConfig+0x620>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002b0c:	4a87      	ldr	r2, [pc, #540]	; (8002d2c <HAL_RCC_OscConfig+0x2cc>)
 8002b0e:	6813      	ldr	r3, [r2, #0]
 8002b10:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002b14:	6013      	str	r3, [r2, #0]
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002b16:	6863      	ldr	r3, [r4, #4]
 8002b18:	b32b      	cbz	r3, 8002b66 <HAL_RCC_OscConfig+0x106>
        tickstart = HAL_GetTick();
 8002b1a:	f7fe f967 	bl	8000dec <HAL_GetTick>
 8002b1e:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002b20:	4b82      	ldr	r3, [pc, #520]	; (8002d2c <HAL_RCC_OscConfig+0x2cc>)
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8002b28:	d1c9      	bne.n	8002abe <HAL_RCC_OscConfig+0x5e>
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002b2a:	f7fe f95f 	bl	8000dec <HAL_GetTick>
 8002b2e:	1b40      	subs	r0, r0, r5
 8002b30:	2864      	cmp	r0, #100	; 0x64
 8002b32:	d9f5      	bls.n	8002b20 <HAL_RCC_OscConfig+0xc0>
            return HAL_TIMEOUT;
 8002b34:	2003      	movs	r0, #3
 8002b36:	e2a3      	b.n	8003080 <HAL_RCC_OscConfig+0x620>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002b38:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002b3c:	d009      	beq.n	8002b52 <HAL_RCC_OscConfig+0xf2>
 8002b3e:	4b7b      	ldr	r3, [pc, #492]	; (8002d2c <HAL_RCC_OscConfig+0x2cc>)
 8002b40:	681a      	ldr	r2, [r3, #0]
 8002b42:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8002b46:	601a      	str	r2, [r3, #0]
 8002b48:	681a      	ldr	r2, [r3, #0]
 8002b4a:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002b4e:	601a      	str	r2, [r3, #0]
 8002b50:	e7e1      	b.n	8002b16 <HAL_RCC_OscConfig+0xb6>
 8002b52:	4b76      	ldr	r3, [pc, #472]	; (8002d2c <HAL_RCC_OscConfig+0x2cc>)
 8002b54:	681a      	ldr	r2, [r3, #0]
 8002b56:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8002b5a:	601a      	str	r2, [r3, #0]
 8002b5c:	681a      	ldr	r2, [r3, #0]
 8002b5e:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8002b62:	601a      	str	r2, [r3, #0]
 8002b64:	e7d7      	b.n	8002b16 <HAL_RCC_OscConfig+0xb6>
        tickstart = HAL_GetTick();
 8002b66:	f7fe f941 	bl	8000dec <HAL_GetTick>
 8002b6a:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8002b6c:	4b6f      	ldr	r3, [pc, #444]	; (8002d2c <HAL_RCC_OscConfig+0x2cc>)
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8002b74:	d0a3      	beq.n	8002abe <HAL_RCC_OscConfig+0x5e>
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002b76:	f7fe f939 	bl	8000dec <HAL_GetTick>
 8002b7a:	1b40      	subs	r0, r0, r5
 8002b7c:	2864      	cmp	r0, #100	; 0x64
 8002b7e:	d9f5      	bls.n	8002b6c <HAL_RCC_OscConfig+0x10c>
            return HAL_TIMEOUT;
 8002b80:	2003      	movs	r0, #3
 8002b82:	e27d      	b.n	8003080 <HAL_RCC_OscConfig+0x620>
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8002b84:	f012 0f03 	tst.w	r2, #3
 8002b88:	d1a6      	bne.n	8002ad8 <HAL_RCC_OscConfig+0x78>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002b8a:	4b68      	ldr	r3, [pc, #416]	; (8002d2c <HAL_RCC_OscConfig+0x2cc>)
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	f013 0f04 	tst.w	r3, #4
 8002b92:	d003      	beq.n	8002b9c <HAL_RCC_OscConfig+0x13c>
 8002b94:	68e3      	ldr	r3, [r4, #12]
 8002b96:	2b00      	cmp	r3, #0
 8002b98:	f000 826d 	beq.w	8003076 <HAL_RCC_OscConfig+0x616>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002b9c:	f7fe f940 	bl	8000e20 <HAL_GetREVID>
 8002ba0:	f241 0303 	movw	r3, #4099	; 0x1003
 8002ba4:	4298      	cmp	r0, r3
 8002ba6:	d812      	bhi.n	8002bce <HAL_RCC_OscConfig+0x16e>
 8002ba8:	6922      	ldr	r2, [r4, #16]
 8002baa:	2a40      	cmp	r2, #64	; 0x40
 8002bac:	d007      	beq.n	8002bbe <HAL_RCC_OscConfig+0x15e>
 8002bae:	495f      	ldr	r1, [pc, #380]	; (8002d2c <HAL_RCC_OscConfig+0x2cc>)
 8002bb0:	684b      	ldr	r3, [r1, #4]
 8002bb2:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8002bb6:	ea43 3302 	orr.w	r3, r3, r2, lsl #12
 8002bba:	604b      	str	r3, [r1, #4]
 8002bbc:	e00f      	b.n	8002bde <HAL_RCC_OscConfig+0x17e>
 8002bbe:	4a5b      	ldr	r2, [pc, #364]	; (8002d2c <HAL_RCC_OscConfig+0x2cc>)
 8002bc0:	6853      	ldr	r3, [r2, #4]
 8002bc2:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8002bc6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002bca:	6053      	str	r3, [r2, #4]
 8002bcc:	e007      	b.n	8002bde <HAL_RCC_OscConfig+0x17e>
 8002bce:	4a57      	ldr	r2, [pc, #348]	; (8002d2c <HAL_RCC_OscConfig+0x2cc>)
 8002bd0:	6853      	ldr	r3, [r2, #4]
 8002bd2:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8002bd6:	6921      	ldr	r1, [r4, #16]
 8002bd8:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 8002bdc:	6053      	str	r3, [r2, #4]
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8002bde:	6823      	ldr	r3, [r4, #0]
 8002be0:	f013 0f10 	tst.w	r3, #16
 8002be4:	f000 8086 	beq.w	8002cf4 <HAL_RCC_OscConfig+0x294>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002be8:	4a50      	ldr	r2, [pc, #320]	; (8002d2c <HAL_RCC_OscConfig+0x2cc>)
 8002bea:	6913      	ldr	r3, [r2, #16]
 8002bec:	f003 0338 	and.w	r3, r3, #56	; 0x38
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002bf0:	6a92      	ldr	r2, [r2, #40]	; 0x28
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8002bf2:	2b08      	cmp	r3, #8
 8002bf4:	d054      	beq.n	8002ca0 <HAL_RCC_OscConfig+0x240>
 8002bf6:	2b18      	cmp	r3, #24
 8002bf8:	d04e      	beq.n	8002c98 <HAL_RCC_OscConfig+0x238>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 8002bfa:	69e3      	ldr	r3, [r4, #28]
 8002bfc:	2b00      	cmp	r3, #0
 8002bfe:	f000 80b9 	beq.w	8002d74 <HAL_RCC_OscConfig+0x314>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8002c02:	4a4a      	ldr	r2, [pc, #296]	; (8002d2c <HAL_RCC_OscConfig+0x2cc>)
 8002c04:	6813      	ldr	r3, [r2, #0]
 8002c06:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002c0a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c0c:	f7fe f8ee 	bl	8000dec <HAL_GetTick>
 8002c10:	4605      	mov	r5, r0

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002c12:	4b46      	ldr	r3, [pc, #280]	; (8002d2c <HAL_RCC_OscConfig+0x2cc>)
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	f413 7f80 	tst.w	r3, #256	; 0x100
 8002c1a:	f040 8089 	bne.w	8002d30 <HAL_RCC_OscConfig+0x2d0>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8002c1e:	f7fe f8e5 	bl	8000dec <HAL_GetTick>
 8002c22:	1b40      	subs	r0, r0, r5
 8002c24:	2802      	cmp	r0, #2
 8002c26:	d9f4      	bls.n	8002c12 <HAL_RCC_OscConfig+0x1b2>
          {
            return HAL_TIMEOUT;
 8002c28:	2003      	movs	r0, #3
 8002c2a:	e229      	b.n	8003080 <HAL_RCC_OscConfig+0x620>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002c2c:	f7fe f8f8 	bl	8000e20 <HAL_GetREVID>
 8002c30:	f241 0303 	movw	r3, #4099	; 0x1003
 8002c34:	4298      	cmp	r0, r3
 8002c36:	d812      	bhi.n	8002c5e <HAL_RCC_OscConfig+0x1fe>
 8002c38:	6922      	ldr	r2, [r4, #16]
 8002c3a:	2a40      	cmp	r2, #64	; 0x40
 8002c3c:	d007      	beq.n	8002c4e <HAL_RCC_OscConfig+0x1ee>
 8002c3e:	493b      	ldr	r1, [pc, #236]	; (8002d2c <HAL_RCC_OscConfig+0x2cc>)
 8002c40:	684b      	ldr	r3, [r1, #4]
 8002c42:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8002c46:	ea43 3302 	orr.w	r3, r3, r2, lsl #12
 8002c4a:	604b      	str	r3, [r1, #4]
 8002c4c:	e7c7      	b.n	8002bde <HAL_RCC_OscConfig+0x17e>
 8002c4e:	4a37      	ldr	r2, [pc, #220]	; (8002d2c <HAL_RCC_OscConfig+0x2cc>)
 8002c50:	6853      	ldr	r3, [r2, #4]
 8002c52:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8002c56:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002c5a:	6053      	str	r3, [r2, #4]
 8002c5c:	e7bf      	b.n	8002bde <HAL_RCC_OscConfig+0x17e>
 8002c5e:	4a33      	ldr	r2, [pc, #204]	; (8002d2c <HAL_RCC_OscConfig+0x2cc>)
 8002c60:	6853      	ldr	r3, [r2, #4]
 8002c62:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8002c66:	6921      	ldr	r1, [r4, #16]
 8002c68:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 8002c6c:	6053      	str	r3, [r2, #4]
 8002c6e:	e7b6      	b.n	8002bde <HAL_RCC_OscConfig+0x17e>
        __HAL_RCC_HSI_DISABLE();
 8002c70:	4a2e      	ldr	r2, [pc, #184]	; (8002d2c <HAL_RCC_OscConfig+0x2cc>)
 8002c72:	6813      	ldr	r3, [r2, #0]
 8002c74:	f023 0301 	bic.w	r3, r3, #1
 8002c78:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8002c7a:	f7fe f8b7 	bl	8000dec <HAL_GetTick>
 8002c7e:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002c80:	4b2a      	ldr	r3, [pc, #168]	; (8002d2c <HAL_RCC_OscConfig+0x2cc>)
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	f013 0f04 	tst.w	r3, #4
 8002c88:	d0a9      	beq.n	8002bde <HAL_RCC_OscConfig+0x17e>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002c8a:	f7fe f8af 	bl	8000dec <HAL_GetTick>
 8002c8e:	1b40      	subs	r0, r0, r5
 8002c90:	2802      	cmp	r0, #2
 8002c92:	d9f5      	bls.n	8002c80 <HAL_RCC_OscConfig+0x220>
            return HAL_TIMEOUT;
 8002c94:	2003      	movs	r0, #3
 8002c96:	e1f3      	b.n	8003080 <HAL_RCC_OscConfig+0x620>
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8002c98:	f002 0203 	and.w	r2, r2, #3
 8002c9c:	2a01      	cmp	r2, #1
 8002c9e:	d1ac      	bne.n	8002bfa <HAL_RCC_OscConfig+0x19a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002ca0:	4b22      	ldr	r3, [pc, #136]	; (8002d2c <HAL_RCC_OscConfig+0x2cc>)
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	f413 7f80 	tst.w	r3, #256	; 0x100
 8002ca8:	d003      	beq.n	8002cb2 <HAL_RCC_OscConfig+0x252>
 8002caa:	69e3      	ldr	r3, [r4, #28]
 8002cac:	2b80      	cmp	r3, #128	; 0x80
 8002cae:	f040 81e4 	bne.w	800307a <HAL_RCC_OscConfig+0x61a>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002cb2:	f7fe f8b5 	bl	8000e20 <HAL_GetREVID>
 8002cb6:	f241 0303 	movw	r3, #4099	; 0x1003
 8002cba:	4298      	cmp	r0, r3
 8002cbc:	d812      	bhi.n	8002ce4 <HAL_RCC_OscConfig+0x284>
 8002cbe:	6a22      	ldr	r2, [r4, #32]
 8002cc0:	2a20      	cmp	r2, #32
 8002cc2:	d007      	beq.n	8002cd4 <HAL_RCC_OscConfig+0x274>
 8002cc4:	4919      	ldr	r1, [pc, #100]	; (8002d2c <HAL_RCC_OscConfig+0x2cc>)
 8002cc6:	684b      	ldr	r3, [r1, #4]
 8002cc8:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8002ccc:	ea43 6382 	orr.w	r3, r3, r2, lsl #26
 8002cd0:	604b      	str	r3, [r1, #4]
 8002cd2:	e00f      	b.n	8002cf4 <HAL_RCC_OscConfig+0x294>
 8002cd4:	4a15      	ldr	r2, [pc, #84]	; (8002d2c <HAL_RCC_OscConfig+0x2cc>)
 8002cd6:	6853      	ldr	r3, [r2, #4]
 8002cd8:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8002cdc:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8002ce0:	6053      	str	r3, [r2, #4]
 8002ce2:	e007      	b.n	8002cf4 <HAL_RCC_OscConfig+0x294>
 8002ce4:	4a11      	ldr	r2, [pc, #68]	; (8002d2c <HAL_RCC_OscConfig+0x2cc>)
 8002ce6:	68d3      	ldr	r3, [r2, #12]
 8002ce8:	f023 537c 	bic.w	r3, r3, #1056964608	; 0x3f000000
 8002cec:	6a21      	ldr	r1, [r4, #32]
 8002cee:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 8002cf2:	60d3      	str	r3, [r2, #12]
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002cf4:	6823      	ldr	r3, [r4, #0]
 8002cf6:	f013 0f08 	tst.w	r3, #8
 8002cfa:	d063      	beq.n	8002dc4 <HAL_RCC_OscConfig+0x364>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002cfc:	6963      	ldr	r3, [r4, #20]
 8002cfe:	2b00      	cmp	r3, #0
 8002d00:	d04c      	beq.n	8002d9c <HAL_RCC_OscConfig+0x33c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002d02:	4a0a      	ldr	r2, [pc, #40]	; (8002d2c <HAL_RCC_OscConfig+0x2cc>)
 8002d04:	6f53      	ldr	r3, [r2, #116]	; 0x74
 8002d06:	f043 0301 	orr.w	r3, r3, #1
 8002d0a:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002d0c:	f7fe f86e 	bl	8000dec <HAL_GetTick>
 8002d10:	4605      	mov	r5, r0

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002d12:	4b06      	ldr	r3, [pc, #24]	; (8002d2c <HAL_RCC_OscConfig+0x2cc>)
 8002d14:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002d16:	f013 0f02 	tst.w	r3, #2
 8002d1a:	d153      	bne.n	8002dc4 <HAL_RCC_OscConfig+0x364>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002d1c:	f7fe f866 	bl	8000dec <HAL_GetTick>
 8002d20:	1b40      	subs	r0, r0, r5
 8002d22:	2802      	cmp	r0, #2
 8002d24:	d9f5      	bls.n	8002d12 <HAL_RCC_OscConfig+0x2b2>
        {
          return HAL_TIMEOUT;
 8002d26:	2003      	movs	r0, #3
 8002d28:	e1aa      	b.n	8003080 <HAL_RCC_OscConfig+0x620>
 8002d2a:	bf00      	nop
 8002d2c:	58024400 	.word	0x58024400
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002d30:	f7fe f876 	bl	8000e20 <HAL_GetREVID>
 8002d34:	f241 0303 	movw	r3, #4099	; 0x1003
 8002d38:	4298      	cmp	r0, r3
 8002d3a:	d812      	bhi.n	8002d62 <HAL_RCC_OscConfig+0x302>
 8002d3c:	6a22      	ldr	r2, [r4, #32]
 8002d3e:	2a20      	cmp	r2, #32
 8002d40:	d007      	beq.n	8002d52 <HAL_RCC_OscConfig+0x2f2>
 8002d42:	4985      	ldr	r1, [pc, #532]	; (8002f58 <HAL_RCC_OscConfig+0x4f8>)
 8002d44:	684b      	ldr	r3, [r1, #4]
 8002d46:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8002d4a:	ea43 6382 	orr.w	r3, r3, r2, lsl #26
 8002d4e:	604b      	str	r3, [r1, #4]
 8002d50:	e7d0      	b.n	8002cf4 <HAL_RCC_OscConfig+0x294>
 8002d52:	4a81      	ldr	r2, [pc, #516]	; (8002f58 <HAL_RCC_OscConfig+0x4f8>)
 8002d54:	6853      	ldr	r3, [r2, #4]
 8002d56:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8002d5a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8002d5e:	6053      	str	r3, [r2, #4]
 8002d60:	e7c8      	b.n	8002cf4 <HAL_RCC_OscConfig+0x294>
 8002d62:	4a7d      	ldr	r2, [pc, #500]	; (8002f58 <HAL_RCC_OscConfig+0x4f8>)
 8002d64:	68d3      	ldr	r3, [r2, #12]
 8002d66:	f023 537c 	bic.w	r3, r3, #1056964608	; 0x3f000000
 8002d6a:	6a21      	ldr	r1, [r4, #32]
 8002d6c:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 8002d70:	60d3      	str	r3, [r2, #12]
 8002d72:	e7bf      	b.n	8002cf4 <HAL_RCC_OscConfig+0x294>
        __HAL_RCC_CSI_DISABLE();
 8002d74:	4a78      	ldr	r2, [pc, #480]	; (8002f58 <HAL_RCC_OscConfig+0x4f8>)
 8002d76:	6813      	ldr	r3, [r2, #0]
 8002d78:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002d7c:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8002d7e:	f7fe f835 	bl	8000dec <HAL_GetTick>
 8002d82:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8002d84:	4b74      	ldr	r3, [pc, #464]	; (8002f58 <HAL_RCC_OscConfig+0x4f8>)
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	f413 7f80 	tst.w	r3, #256	; 0x100
 8002d8c:	d0b2      	beq.n	8002cf4 <HAL_RCC_OscConfig+0x294>
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8002d8e:	f7fe f82d 	bl	8000dec <HAL_GetTick>
 8002d92:	1b40      	subs	r0, r0, r5
 8002d94:	2802      	cmp	r0, #2
 8002d96:	d9f5      	bls.n	8002d84 <HAL_RCC_OscConfig+0x324>
            return HAL_TIMEOUT;
 8002d98:	2003      	movs	r0, #3
 8002d9a:	e171      	b.n	8003080 <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002d9c:	4a6e      	ldr	r2, [pc, #440]	; (8002f58 <HAL_RCC_OscConfig+0x4f8>)
 8002d9e:	6f53      	ldr	r3, [r2, #116]	; 0x74
 8002da0:	f023 0301 	bic.w	r3, r3, #1
 8002da4:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002da6:	f7fe f821 	bl	8000dec <HAL_GetTick>
 8002daa:	4605      	mov	r5, r0

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002dac:	4b6a      	ldr	r3, [pc, #424]	; (8002f58 <HAL_RCC_OscConfig+0x4f8>)
 8002dae:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002db0:	f013 0f02 	tst.w	r3, #2
 8002db4:	d006      	beq.n	8002dc4 <HAL_RCC_OscConfig+0x364>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002db6:	f7fe f819 	bl	8000dec <HAL_GetTick>
 8002dba:	1b40      	subs	r0, r0, r5
 8002dbc:	2802      	cmp	r0, #2
 8002dbe:	d9f5      	bls.n	8002dac <HAL_RCC_OscConfig+0x34c>
        {
          return HAL_TIMEOUT;
 8002dc0:	2003      	movs	r0, #3
 8002dc2:	e15d      	b.n	8003080 <HAL_RCC_OscConfig+0x620>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002dc4:	6823      	ldr	r3, [r4, #0]
 8002dc6:	f013 0f20 	tst.w	r3, #32
 8002dca:	d029      	beq.n	8002e20 <HAL_RCC_OscConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 8002dcc:	69a3      	ldr	r3, [r4, #24]
 8002dce:	b19b      	cbz	r3, 8002df8 <HAL_RCC_OscConfig+0x398>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002dd0:	4a61      	ldr	r2, [pc, #388]	; (8002f58 <HAL_RCC_OscConfig+0x4f8>)
 8002dd2:	6813      	ldr	r3, [r2, #0]
 8002dd4:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002dd8:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8002dda:	f7fe f807 	bl	8000dec <HAL_GetTick>
 8002dde:	4605      	mov	r5, r0

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8002de0:	4b5d      	ldr	r3, [pc, #372]	; (8002f58 <HAL_RCC_OscConfig+0x4f8>)
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	f413 5f00 	tst.w	r3, #8192	; 0x2000
 8002de8:	d11a      	bne.n	8002e20 <HAL_RCC_OscConfig+0x3c0>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8002dea:	f7fd ffff 	bl	8000dec <HAL_GetTick>
 8002dee:	1b40      	subs	r0, r0, r5
 8002df0:	2802      	cmp	r0, #2
 8002df2:	d9f5      	bls.n	8002de0 <HAL_RCC_OscConfig+0x380>
        {
          return HAL_TIMEOUT;
 8002df4:	2003      	movs	r0, #3
 8002df6:	e143      	b.n	8003080 <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8002df8:	4a57      	ldr	r2, [pc, #348]	; (8002f58 <HAL_RCC_OscConfig+0x4f8>)
 8002dfa:	6813      	ldr	r3, [r2, #0]
 8002dfc:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002e00:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8002e02:	f7fd fff3 	bl	8000dec <HAL_GetTick>
 8002e06:	4605      	mov	r5, r0

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8002e08:	4b53      	ldr	r3, [pc, #332]	; (8002f58 <HAL_RCC_OscConfig+0x4f8>)
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	f413 5f00 	tst.w	r3, #8192	; 0x2000
 8002e10:	d006      	beq.n	8002e20 <HAL_RCC_OscConfig+0x3c0>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8002e12:	f7fd ffeb 	bl	8000dec <HAL_GetTick>
 8002e16:	1b40      	subs	r0, r0, r5
 8002e18:	2802      	cmp	r0, #2
 8002e1a:	d9f5      	bls.n	8002e08 <HAL_RCC_OscConfig+0x3a8>
        {
          return HAL_TIMEOUT;
 8002e1c:	2003      	movs	r0, #3
 8002e1e:	e12f      	b.n	8003080 <HAL_RCC_OscConfig+0x620>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002e20:	6823      	ldr	r3, [r4, #0]
 8002e22:	f013 0f04 	tst.w	r3, #4
 8002e26:	d121      	bne.n	8002e6c <HAL_RCC_OscConfig+0x40c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002e28:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8002e2a:	2b00      	cmp	r3, #0
 8002e2c:	f000 8127 	beq.w	800307e <HAL_RCC_OscConfig+0x61e>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8002e30:	4a49      	ldr	r2, [pc, #292]	; (8002f58 <HAL_RCC_OscConfig+0x4f8>)
 8002e32:	6912      	ldr	r2, [r2, #16]
 8002e34:	f002 0238 	and.w	r2, r2, #56	; 0x38
 8002e38:	2a18      	cmp	r2, #24
 8002e3a:	f000 80ef 	beq.w	800301c <HAL_RCC_OscConfig+0x5bc>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002e3e:	2b02      	cmp	r3, #2
 8002e40:	d075      	beq.n	8002f2e <HAL_RCC_OscConfig+0x4ce>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002e42:	4a45      	ldr	r2, [pc, #276]	; (8002f58 <HAL_RCC_OscConfig+0x4f8>)
 8002e44:	6813      	ldr	r3, [r2, #0]
 8002e46:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002e4a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e4c:	f7fd ffce 	bl	8000dec <HAL_GetTick>
 8002e50:	4604      	mov	r4, r0

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002e52:	4b41      	ldr	r3, [pc, #260]	; (8002f58 <HAL_RCC_OscConfig+0x4f8>)
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8002e5a:	f000 80dd 	beq.w	8003018 <HAL_RCC_OscConfig+0x5b8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002e5e:	f7fd ffc5 	bl	8000dec <HAL_GetTick>
 8002e62:	1b00      	subs	r0, r0, r4
 8002e64:	2802      	cmp	r0, #2
 8002e66:	d9f4      	bls.n	8002e52 <HAL_RCC_OscConfig+0x3f2>
          {
            return HAL_TIMEOUT;
 8002e68:	2003      	movs	r0, #3
 8002e6a:	e109      	b.n	8003080 <HAL_RCC_OscConfig+0x620>
    PWR->CR1 |= PWR_CR1_DBP;
 8002e6c:	4a3b      	ldr	r2, [pc, #236]	; (8002f5c <HAL_RCC_OscConfig+0x4fc>)
 8002e6e:	6813      	ldr	r3, [r2, #0]
 8002e70:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002e74:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 8002e76:	f7fd ffb9 	bl	8000dec <HAL_GetTick>
 8002e7a:	4605      	mov	r5, r0
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002e7c:	4b37      	ldr	r3, [pc, #220]	; (8002f5c <HAL_RCC_OscConfig+0x4fc>)
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	f413 7f80 	tst.w	r3, #256	; 0x100
 8002e84:	d106      	bne.n	8002e94 <HAL_RCC_OscConfig+0x434>
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8002e86:	f7fd ffb1 	bl	8000dec <HAL_GetTick>
 8002e8a:	1b40      	subs	r0, r0, r5
 8002e8c:	2864      	cmp	r0, #100	; 0x64
 8002e8e:	d9f5      	bls.n	8002e7c <HAL_RCC_OscConfig+0x41c>
        return HAL_TIMEOUT;
 8002e90:	2003      	movs	r0, #3
 8002e92:	e0f5      	b.n	8003080 <HAL_RCC_OscConfig+0x620>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002e94:	68a3      	ldr	r3, [r4, #8]
 8002e96:	2b01      	cmp	r3, #1
 8002e98:	d00a      	beq.n	8002eb0 <HAL_RCC_OscConfig+0x450>
 8002e9a:	bb0b      	cbnz	r3, 8002ee0 <HAL_RCC_OscConfig+0x480>
 8002e9c:	4b2e      	ldr	r3, [pc, #184]	; (8002f58 <HAL_RCC_OscConfig+0x4f8>)
 8002e9e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002ea0:	f022 0201 	bic.w	r2, r2, #1
 8002ea4:	671a      	str	r2, [r3, #112]	; 0x70
 8002ea6:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002ea8:	f022 0204 	bic.w	r2, r2, #4
 8002eac:	671a      	str	r2, [r3, #112]	; 0x70
 8002eae:	e004      	b.n	8002eba <HAL_RCC_OscConfig+0x45a>
 8002eb0:	4a29      	ldr	r2, [pc, #164]	; (8002f58 <HAL_RCC_OscConfig+0x4f8>)
 8002eb2:	6f13      	ldr	r3, [r2, #112]	; 0x70
 8002eb4:	f043 0301 	orr.w	r3, r3, #1
 8002eb8:	6713      	str	r3, [r2, #112]	; 0x70
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002eba:	68a3      	ldr	r3, [r4, #8]
 8002ebc:	b333      	cbz	r3, 8002f0c <HAL_RCC_OscConfig+0x4ac>
      tickstart = HAL_GetTick();
 8002ebe:	f7fd ff95 	bl	8000dec <HAL_GetTick>
 8002ec2:	4605      	mov	r5, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002ec4:	4b24      	ldr	r3, [pc, #144]	; (8002f58 <HAL_RCC_OscConfig+0x4f8>)
 8002ec6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ec8:	f013 0f02 	tst.w	r3, #2
 8002ecc:	d1ac      	bne.n	8002e28 <HAL_RCC_OscConfig+0x3c8>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002ece:	f7fd ff8d 	bl	8000dec <HAL_GetTick>
 8002ed2:	1b40      	subs	r0, r0, r5
 8002ed4:	f241 3388 	movw	r3, #5000	; 0x1388
 8002ed8:	4298      	cmp	r0, r3
 8002eda:	d9f3      	bls.n	8002ec4 <HAL_RCC_OscConfig+0x464>
          return HAL_TIMEOUT;
 8002edc:	2003      	movs	r0, #3
 8002ede:	e0cf      	b.n	8003080 <HAL_RCC_OscConfig+0x620>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002ee0:	2b05      	cmp	r3, #5
 8002ee2:	d009      	beq.n	8002ef8 <HAL_RCC_OscConfig+0x498>
 8002ee4:	4b1c      	ldr	r3, [pc, #112]	; (8002f58 <HAL_RCC_OscConfig+0x4f8>)
 8002ee6:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002ee8:	f022 0201 	bic.w	r2, r2, #1
 8002eec:	671a      	str	r2, [r3, #112]	; 0x70
 8002eee:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002ef0:	f022 0204 	bic.w	r2, r2, #4
 8002ef4:	671a      	str	r2, [r3, #112]	; 0x70
 8002ef6:	e7e0      	b.n	8002eba <HAL_RCC_OscConfig+0x45a>
 8002ef8:	4b17      	ldr	r3, [pc, #92]	; (8002f58 <HAL_RCC_OscConfig+0x4f8>)
 8002efa:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002efc:	f042 0204 	orr.w	r2, r2, #4
 8002f00:	671a      	str	r2, [r3, #112]	; 0x70
 8002f02:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002f04:	f042 0201 	orr.w	r2, r2, #1
 8002f08:	671a      	str	r2, [r3, #112]	; 0x70
 8002f0a:	e7d6      	b.n	8002eba <HAL_RCC_OscConfig+0x45a>
      tickstart = HAL_GetTick();
 8002f0c:	f7fd ff6e 	bl	8000dec <HAL_GetTick>
 8002f10:	4605      	mov	r5, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002f12:	4b11      	ldr	r3, [pc, #68]	; (8002f58 <HAL_RCC_OscConfig+0x4f8>)
 8002f14:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f16:	f013 0f02 	tst.w	r3, #2
 8002f1a:	d085      	beq.n	8002e28 <HAL_RCC_OscConfig+0x3c8>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002f1c:	f7fd ff66 	bl	8000dec <HAL_GetTick>
 8002f20:	1b40      	subs	r0, r0, r5
 8002f22:	f241 3388 	movw	r3, #5000	; 0x1388
 8002f26:	4298      	cmp	r0, r3
 8002f28:	d9f3      	bls.n	8002f12 <HAL_RCC_OscConfig+0x4b2>
          return HAL_TIMEOUT;
 8002f2a:	2003      	movs	r0, #3
 8002f2c:	e0a8      	b.n	8003080 <HAL_RCC_OscConfig+0x620>
        __HAL_RCC_PLL_DISABLE();
 8002f2e:	4a0a      	ldr	r2, [pc, #40]	; (8002f58 <HAL_RCC_OscConfig+0x4f8>)
 8002f30:	6813      	ldr	r3, [r2, #0]
 8002f32:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002f36:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8002f38:	f7fd ff58 	bl	8000dec <HAL_GetTick>
 8002f3c:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002f3e:	4b06      	ldr	r3, [pc, #24]	; (8002f58 <HAL_RCC_OscConfig+0x4f8>)
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8002f46:	d00b      	beq.n	8002f60 <HAL_RCC_OscConfig+0x500>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002f48:	f7fd ff50 	bl	8000dec <HAL_GetTick>
 8002f4c:	1b40      	subs	r0, r0, r5
 8002f4e:	2802      	cmp	r0, #2
 8002f50:	d9f5      	bls.n	8002f3e <HAL_RCC_OscConfig+0x4de>
            return HAL_TIMEOUT;
 8002f52:	2003      	movs	r0, #3
 8002f54:	e094      	b.n	8003080 <HAL_RCC_OscConfig+0x620>
 8002f56:	bf00      	nop
 8002f58:	58024400 	.word	0x58024400
 8002f5c:	58024800 	.word	0x58024800
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002f60:	4b4f      	ldr	r3, [pc, #316]	; (80030a0 <HAL_RCC_OscConfig+0x640>)
 8002f62:	6a99      	ldr	r1, [r3, #40]	; 0x28
 8002f64:	4a4f      	ldr	r2, [pc, #316]	; (80030a4 <HAL_RCC_OscConfig+0x644>)
 8002f66:	400a      	ands	r2, r1
 8002f68:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 8002f6a:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 8002f6c:	ea41 1100 	orr.w	r1, r1, r0, lsl #4
 8002f70:	430a      	orrs	r2, r1
 8002f72:	629a      	str	r2, [r3, #40]	; 0x28
 8002f74:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8002f76:	3a01      	subs	r2, #1
 8002f78:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002f7c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8002f7e:	3901      	subs	r1, #1
 8002f80:	0249      	lsls	r1, r1, #9
 8002f82:	b289      	uxth	r1, r1
 8002f84:	430a      	orrs	r2, r1
 8002f86:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8002f88:	3901      	subs	r1, #1
 8002f8a:	0409      	lsls	r1, r1, #16
 8002f8c:	f401 01fe 	and.w	r1, r1, #8323072	; 0x7f0000
 8002f90:	430a      	orrs	r2, r1
 8002f92:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8002f94:	3901      	subs	r1, #1
 8002f96:	0609      	lsls	r1, r1, #24
 8002f98:	f001 41fe 	and.w	r1, r1, #2130706432	; 0x7f000000
 8002f9c:	430a      	orrs	r2, r1
 8002f9e:	631a      	str	r2, [r3, #48]	; 0x30
         __HAL_RCC_PLLFRACN_DISABLE();
 8002fa0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002fa2:	f022 0201 	bic.w	r2, r2, #1
 8002fa6:	62da      	str	r2, [r3, #44]	; 0x2c
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8002fa8:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002faa:	4a3f      	ldr	r2, [pc, #252]	; (80030a8 <HAL_RCC_OscConfig+0x648>)
 8002fac:	400a      	ands	r2, r1
 8002fae:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8002fb0:	ea42 02c1 	orr.w	r2, r2, r1, lsl #3
 8002fb4:	635a      	str	r2, [r3, #52]	; 0x34
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8002fb6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002fb8:	f022 020c 	bic.w	r2, r2, #12
 8002fbc:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8002fbe:	430a      	orrs	r2, r1
 8002fc0:	62da      	str	r2, [r3, #44]	; 0x2c
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8002fc2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002fc4:	f022 0202 	bic.w	r2, r2, #2
 8002fc8:	6c61      	ldr	r1, [r4, #68]	; 0x44
 8002fca:	430a      	orrs	r2, r1
 8002fcc:	62da      	str	r2, [r3, #44]	; 0x2c
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8002fce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002fd0:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8002fd4:	62da      	str	r2, [r3, #44]	; 0x2c
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002fd6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002fd8:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8002fdc:	62da      	str	r2, [r3, #44]	; 0x2c
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8002fde:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002fe0:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8002fe4:	62da      	str	r2, [r3, #44]	; 0x2c
         __HAL_RCC_PLLFRACN_ENABLE();
 8002fe6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002fe8:	f042 0201 	orr.w	r2, r2, #1
 8002fec:	62da      	str	r2, [r3, #44]	; 0x2c
        __HAL_RCC_PLL_ENABLE();
 8002fee:	681a      	ldr	r2, [r3, #0]
 8002ff0:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 8002ff4:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8002ff6:	f7fd fef9 	bl	8000dec <HAL_GetTick>
 8002ffa:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002ffc:	4b28      	ldr	r3, [pc, #160]	; (80030a0 <HAL_RCC_OscConfig+0x640>)
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8003004:	d106      	bne.n	8003014 <HAL_RCC_OscConfig+0x5b4>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003006:	f7fd fef1 	bl	8000dec <HAL_GetTick>
 800300a:	1b00      	subs	r0, r0, r4
 800300c:	2802      	cmp	r0, #2
 800300e:	d9f5      	bls.n	8002ffc <HAL_RCC_OscConfig+0x59c>
            return HAL_TIMEOUT;
 8003010:	2003      	movs	r0, #3
 8003012:	e035      	b.n	8003080 <HAL_RCC_OscConfig+0x620>
      {
        return HAL_ERROR;
      }
    }
  }
  return HAL_OK;
 8003014:	2000      	movs	r0, #0
 8003016:	e033      	b.n	8003080 <HAL_RCC_OscConfig+0x620>
 8003018:	2000      	movs	r0, #0
 800301a:	e031      	b.n	8003080 <HAL_RCC_OscConfig+0x620>
      temp1_pllckcfg = RCC->PLLCKSELR;
 800301c:	4a20      	ldr	r2, [pc, #128]	; (80030a0 <HAL_RCC_OscConfig+0x640>)
 800301e:	6a91      	ldr	r1, [r2, #40]	; 0x28
      temp2_pllckcfg = RCC->PLL1DIVR;
 8003020:	6b10      	ldr	r0, [r2, #48]	; 0x30
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003022:	2b01      	cmp	r3, #1
 8003024:	d02d      	beq.n	8003082 <HAL_RCC_OscConfig+0x622>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003026:	f001 0303 	and.w	r3, r1, #3
 800302a:	6aa2      	ldr	r2, [r4, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800302c:	4293      	cmp	r3, r2
 800302e:	d12a      	bne.n	8003086 <HAL_RCC_OscConfig+0x626>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8003030:	f3c1 1105 	ubfx	r1, r1, #4, #6
 8003034:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003036:	4299      	cmp	r1, r3
 8003038:	d127      	bne.n	800308a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800303a:	f3c0 0208 	ubfx	r2, r0, #0, #9
 800303e:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8003040:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8003042:	429a      	cmp	r2, r3
 8003044:	d123      	bne.n	800308e <HAL_RCC_OscConfig+0x62e>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8003046:	f3c0 2246 	ubfx	r2, r0, #9, #7
 800304a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800304c:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800304e:	429a      	cmp	r2, r3
 8003050:	d11f      	bne.n	8003092 <HAL_RCC_OscConfig+0x632>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8003052:	f3c0 4206 	ubfx	r2, r0, #16, #7
 8003056:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8003058:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800305a:	429a      	cmp	r2, r3
 800305c:	d11b      	bne.n	8003096 <HAL_RCC_OscConfig+0x636>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 800305e:	f3c0 6006 	ubfx	r0, r0, #24, #7
 8003062:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8003064:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8003066:	4298      	cmp	r0, r3
 8003068:	d117      	bne.n	800309a <HAL_RCC_OscConfig+0x63a>
  return HAL_OK;
 800306a:	2000      	movs	r0, #0
 800306c:	e008      	b.n	8003080 <HAL_RCC_OscConfig+0x620>
    return HAL_ERROR;
 800306e:	2001      	movs	r0, #1
}
 8003070:	4770      	bx	lr
        return HAL_ERROR;
 8003072:	2001      	movs	r0, #1
 8003074:	e004      	b.n	8003080 <HAL_RCC_OscConfig+0x620>
        return HAL_ERROR;
 8003076:	2001      	movs	r0, #1
 8003078:	e002      	b.n	8003080 <HAL_RCC_OscConfig+0x620>
        return HAL_ERROR;
 800307a:	2001      	movs	r0, #1
 800307c:	e000      	b.n	8003080 <HAL_RCC_OscConfig+0x620>
  return HAL_OK;
 800307e:	2000      	movs	r0, #0
}
 8003080:	bd38      	pop	{r3, r4, r5, pc}
        return HAL_ERROR;
 8003082:	2001      	movs	r0, #1
 8003084:	e7fc      	b.n	8003080 <HAL_RCC_OscConfig+0x620>
 8003086:	2001      	movs	r0, #1
 8003088:	e7fa      	b.n	8003080 <HAL_RCC_OscConfig+0x620>
 800308a:	2001      	movs	r0, #1
 800308c:	e7f8      	b.n	8003080 <HAL_RCC_OscConfig+0x620>
 800308e:	2001      	movs	r0, #1
 8003090:	e7f6      	b.n	8003080 <HAL_RCC_OscConfig+0x620>
 8003092:	2001      	movs	r0, #1
 8003094:	e7f4      	b.n	8003080 <HAL_RCC_OscConfig+0x620>
 8003096:	2001      	movs	r0, #1
 8003098:	e7f2      	b.n	8003080 <HAL_RCC_OscConfig+0x620>
 800309a:	2001      	movs	r0, #1
 800309c:	e7f0      	b.n	8003080 <HAL_RCC_OscConfig+0x620>
 800309e:	bf00      	nop
 80030a0:	58024400 	.word	0x58024400
 80030a4:	fffffc0c 	.word	0xfffffc0c
 80030a8:	ffff0007 	.word	0xffff0007

080030ac <HAL_RCC_GetSysClockFreq>:
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 80030ac:	4b74      	ldr	r3, [pc, #464]	; (8003280 <HAL_RCC_GetSysClockFreq+0x1d4>)
 80030ae:	691b      	ldr	r3, [r3, #16]
 80030b0:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80030b4:	2b10      	cmp	r3, #16
 80030b6:	f000 80df 	beq.w	8003278 <HAL_RCC_GetSysClockFreq+0x1cc>
 80030ba:	2b18      	cmp	r3, #24
 80030bc:	d010      	beq.n	80030e0 <HAL_RCC_GetSysClockFreq+0x34>
 80030be:	b10b      	cbz	r3, 80030c4 <HAL_RCC_GetSysClockFreq+0x18>
 80030c0:	4870      	ldr	r0, [pc, #448]	; (8003284 <HAL_RCC_GetSysClockFreq+0x1d8>)
 80030c2:	4770      	bx	lr
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80030c4:	4b6e      	ldr	r3, [pc, #440]	; (8003280 <HAL_RCC_GetSysClockFreq+0x1d4>)
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	f013 0f20 	tst.w	r3, #32
 80030cc:	f000 80d6 	beq.w	800327c <HAL_RCC_GetSysClockFreq+0x1d0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80030d0:	4b6b      	ldr	r3, [pc, #428]	; (8003280 <HAL_RCC_GetSysClockFreq+0x1d4>)
 80030d2:	6818      	ldr	r0, [r3, #0]
 80030d4:	f3c0 00c1 	ubfx	r0, r0, #3, #2
 80030d8:	4b6b      	ldr	r3, [pc, #428]	; (8003288 <HAL_RCC_GetSysClockFreq+0x1dc>)
 80030da:	fa23 f000 	lsr.w	r0, r3, r0
 80030de:	4770      	bx	lr
{
 80030e0:	b410      	push	{r4}
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80030e2:	4a67      	ldr	r2, [pc, #412]	; (8003280 <HAL_RCC_GetSysClockFreq+0x1d4>)
 80030e4:	6a91      	ldr	r1, [r2, #40]	; 0x28
 80030e6:	f001 0103 	and.w	r1, r1, #3
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 80030ea:	6a94      	ldr	r4, [r2, #40]	; 0x28
 80030ec:	f3c4 1005 	ubfx	r0, r4, #4, #6
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 80030f0:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 80030f2:	f003 0301 	and.w	r3, r3, #1
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 80030f6:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80030f8:	f3c2 02cc 	ubfx	r2, r2, #3, #13
 80030fc:	fb03 f302 	mul.w	r3, r3, r2
 8003100:	ee07 3a90 	vmov	s15, r3
 8003104:	eef8 7a67 	vcvt.f32.u32	s15, s15

    if (pllm != 0U)
 8003108:	f414 7f7c 	tst.w	r4, #1008	; 0x3f0
 800310c:	f000 8094 	beq.w	8003238 <HAL_RCC_GetSysClockFreq+0x18c>
    {
      switch (pllsource)
 8003110:	2901      	cmp	r1, #1
 8003112:	d066      	beq.n	80031e2 <HAL_RCC_GetSysClockFreq+0x136>
 8003114:	2902      	cmp	r1, #2
 8003116:	f000 8092 	beq.w	800323e <HAL_RCC_GetSysClockFreq+0x192>
 800311a:	b1e1      	cbz	r1, 8003156 <HAL_RCC_GetSysClockFreq+0xaa>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        break;

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800311c:	ee07 0a10 	vmov	s14, r0
 8003120:	eef8 6a47 	vcvt.f32.u32	s13, s14
 8003124:	ed9f 6a59 	vldr	s12, [pc, #356]	; 800328c <HAL_RCC_GetSysClockFreq+0x1e0>
 8003128:	ee86 7a26 	vdiv.f32	s14, s12, s13
 800312c:	4b54      	ldr	r3, [pc, #336]	; (8003280 <HAL_RCC_GetSysClockFreq+0x1d4>)
 800312e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003130:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003134:	ee06 3a90 	vmov	s13, r3
 8003138:	eef8 6a66 	vcvt.f32.u32	s13, s13
 800313c:	ed9f 6a54 	vldr	s12, [pc, #336]	; 8003290 <HAL_RCC_GetSysClockFreq+0x1e4>
 8003140:	ee67 7a86 	vmul.f32	s15, s15, s12
 8003144:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003148:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800314c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003150:	ee27 7a27 	vmul.f32	s14, s14, s15
        break;
 8003154:	e061      	b.n	800321a <HAL_RCC_GetSysClockFreq+0x16e>
       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003156:	4b4a      	ldr	r3, [pc, #296]	; (8003280 <HAL_RCC_GetSysClockFreq+0x1d4>)
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	f013 0f20 	tst.w	r3, #32
 800315e:	d023      	beq.n	80031a8 <HAL_RCC_GetSysClockFreq+0xfc>
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8003160:	4947      	ldr	r1, [pc, #284]	; (8003280 <HAL_RCC_GetSysClockFreq+0x1d4>)
 8003162:	680a      	ldr	r2, [r1, #0]
 8003164:	f3c2 02c1 	ubfx	r2, r2, #3, #2
 8003168:	4b47      	ldr	r3, [pc, #284]	; (8003288 <HAL_RCC_GetSysClockFreq+0x1dc>)
 800316a:	40d3      	lsrs	r3, r2
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800316c:	ee07 3a10 	vmov	s14, r3
 8003170:	eef8 6a47 	vcvt.f32.u32	s13, s14
 8003174:	ee07 0a10 	vmov	s14, r0
 8003178:	eeb8 6a47 	vcvt.f32.u32	s12, s14
 800317c:	ee86 7a86 	vdiv.f32	s14, s13, s12
 8003180:	6b0b      	ldr	r3, [r1, #48]	; 0x30
 8003182:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003186:	ee06 3a90 	vmov	s13, r3
 800318a:	eef8 6a66 	vcvt.f32.u32	s13, s13
 800318e:	ed9f 6a40 	vldr	s12, [pc, #256]	; 8003290 <HAL_RCC_GetSysClockFreq+0x1e4>
 8003192:	ee67 7a86 	vmul.f32	s15, s15, s12
 8003196:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800319a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800319e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80031a2:	ee27 7a27 	vmul.f32	s14, s14, s15
 80031a6:	e038      	b.n	800321a <HAL_RCC_GetSysClockFreq+0x16e>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80031a8:	ee07 0a10 	vmov	s14, r0
 80031ac:	eef8 6a47 	vcvt.f32.u32	s13, s14
 80031b0:	ed9f 6a38 	vldr	s12, [pc, #224]	; 8003294 <HAL_RCC_GetSysClockFreq+0x1e8>
 80031b4:	ee86 7a26 	vdiv.f32	s14, s12, s13
 80031b8:	4b31      	ldr	r3, [pc, #196]	; (8003280 <HAL_RCC_GetSysClockFreq+0x1d4>)
 80031ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031bc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80031c0:	ee06 3a90 	vmov	s13, r3
 80031c4:	eef8 6a66 	vcvt.f32.u32	s13, s13
 80031c8:	ed9f 6a31 	vldr	s12, [pc, #196]	; 8003290 <HAL_RCC_GetSysClockFreq+0x1e4>
 80031cc:	ee67 7a86 	vmul.f32	s15, s15, s12
 80031d0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80031d4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80031d8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80031dc:	ee27 7a27 	vmul.f32	s14, s14, s15
 80031e0:	e01b      	b.n	800321a <HAL_RCC_GetSysClockFreq+0x16e>
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80031e2:	ee07 0a10 	vmov	s14, r0
 80031e6:	eef8 6a47 	vcvt.f32.u32	s13, s14
 80031ea:	ed9f 6a28 	vldr	s12, [pc, #160]	; 800328c <HAL_RCC_GetSysClockFreq+0x1e0>
 80031ee:	ee86 7a26 	vdiv.f32	s14, s12, s13
 80031f2:	4b23      	ldr	r3, [pc, #140]	; (8003280 <HAL_RCC_GetSysClockFreq+0x1d4>)
 80031f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031f6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80031fa:	ee06 3a90 	vmov	s13, r3
 80031fe:	eef8 6a66 	vcvt.f32.u32	s13, s13
 8003202:	ed9f 6a23 	vldr	s12, [pc, #140]	; 8003290 <HAL_RCC_GetSysClockFreq+0x1e4>
 8003206:	ee67 7a86 	vmul.f32	s15, s15, s12
 800320a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800320e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003212:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003216:	ee27 7a27 	vmul.f32	s14, s14, s15
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 800321a:	4b19      	ldr	r3, [pc, #100]	; (8003280 <HAL_RCC_GetSysClockFreq+0x1d4>)
 800321c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800321e:	f3c3 2346 	ubfx	r3, r3, #9, #7
 8003222:	3301      	adds	r3, #1
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 8003224:	ee07 3a90 	vmov	s15, r3
 8003228:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800322c:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8003230:	eefc 7ae6 	vcvt.u32.f32	s15, s13
 8003234:	ee17 0a90 	vmov	r0, s15
    sysclockfreq = CSI_VALUE;
    break;
  }

  return sysclockfreq;
}
 8003238:	f85d 4b04 	ldr.w	r4, [sp], #4
 800323c:	4770      	bx	lr
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800323e:	ee07 0a10 	vmov	s14, r0
 8003242:	eef8 6a47 	vcvt.f32.u32	s13, s14
 8003246:	ed9f 6a14 	vldr	s12, [pc, #80]	; 8003298 <HAL_RCC_GetSysClockFreq+0x1ec>
 800324a:	ee86 7a26 	vdiv.f32	s14, s12, s13
 800324e:	4b0c      	ldr	r3, [pc, #48]	; (8003280 <HAL_RCC_GetSysClockFreq+0x1d4>)
 8003250:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003252:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003256:	ee06 3a90 	vmov	s13, r3
 800325a:	eef8 6a66 	vcvt.f32.u32	s13, s13
 800325e:	ed9f 6a0c 	vldr	s12, [pc, #48]	; 8003290 <HAL_RCC_GetSysClockFreq+0x1e4>
 8003262:	ee67 7a86 	vmul.f32	s15, s15, s12
 8003266:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800326a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800326e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003272:	ee27 7a27 	vmul.f32	s14, s14, s15
        break;
 8003276:	e7d0      	b.n	800321a <HAL_RCC_GetSysClockFreq+0x16e>
    sysclockfreq = HSE_VALUE;
 8003278:	4808      	ldr	r0, [pc, #32]	; (800329c <HAL_RCC_GetSysClockFreq+0x1f0>)
 800327a:	4770      	bx	lr
        sysclockfreq = (uint32_t) HSI_VALUE;
 800327c:	4802      	ldr	r0, [pc, #8]	; (8003288 <HAL_RCC_GetSysClockFreq+0x1dc>)
}
 800327e:	4770      	bx	lr
 8003280:	58024400 	.word	0x58024400
 8003284:	003d0900 	.word	0x003d0900
 8003288:	03d09000 	.word	0x03d09000
 800328c:	4a742400 	.word	0x4a742400
 8003290:	39000000 	.word	0x39000000
 8003294:	4c742400 	.word	0x4c742400
 8003298:	4af42400 	.word	0x4af42400
 800329c:	007a1200 	.word	0x007a1200

080032a0 <HAL_RCC_ClockConfig>:
  if(RCC_ClkInitStruct == NULL)
 80032a0:	2800      	cmp	r0, #0
 80032a2:	f000 8132 	beq.w	800350a <HAL_RCC_ClockConfig+0x26a>
{
 80032a6:	b570      	push	{r4, r5, r6, lr}
 80032a8:	460d      	mov	r5, r1
 80032aa:	4604      	mov	r4, r0
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80032ac:	4b9b      	ldr	r3, [pc, #620]	; (800351c <HAL_RCC_ClockConfig+0x27c>)
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	f003 030f 	and.w	r3, r3, #15
 80032b4:	428b      	cmp	r3, r1
 80032b6:	d20b      	bcs.n	80032d0 <HAL_RCC_ClockConfig+0x30>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80032b8:	4a98      	ldr	r2, [pc, #608]	; (800351c <HAL_RCC_ClockConfig+0x27c>)
 80032ba:	6813      	ldr	r3, [r2, #0]
 80032bc:	f023 030f 	bic.w	r3, r3, #15
 80032c0:	430b      	orrs	r3, r1
 80032c2:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80032c4:	6813      	ldr	r3, [r2, #0]
 80032c6:	f003 030f 	and.w	r3, r3, #15
 80032ca:	428b      	cmp	r3, r1
 80032cc:	f040 811f 	bne.w	800350e <HAL_RCC_ClockConfig+0x26e>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80032d0:	6823      	ldr	r3, [r4, #0]
 80032d2:	f013 0f04 	tst.w	r3, #4
 80032d6:	d00c      	beq.n	80032f2 <HAL_RCC_ClockConfig+0x52>
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80032d8:	6922      	ldr	r2, [r4, #16]
 80032da:	4b91      	ldr	r3, [pc, #580]	; (8003520 <HAL_RCC_ClockConfig+0x280>)
 80032dc:	699b      	ldr	r3, [r3, #24]
 80032de:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80032e2:	429a      	cmp	r2, r3
 80032e4:	d905      	bls.n	80032f2 <HAL_RCC_ClockConfig+0x52>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80032e6:	498e      	ldr	r1, [pc, #568]	; (8003520 <HAL_RCC_ClockConfig+0x280>)
 80032e8:	698b      	ldr	r3, [r1, #24]
 80032ea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80032ee:	431a      	orrs	r2, r3
 80032f0:	618a      	str	r2, [r1, #24]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80032f2:	6823      	ldr	r3, [r4, #0]
 80032f4:	f013 0f08 	tst.w	r3, #8
 80032f8:	d00c      	beq.n	8003314 <HAL_RCC_ClockConfig+0x74>
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80032fa:	6962      	ldr	r2, [r4, #20]
 80032fc:	4b88      	ldr	r3, [pc, #544]	; (8003520 <HAL_RCC_ClockConfig+0x280>)
 80032fe:	69db      	ldr	r3, [r3, #28]
 8003300:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003304:	429a      	cmp	r2, r3
 8003306:	d905      	bls.n	8003314 <HAL_RCC_ClockConfig+0x74>
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8003308:	4985      	ldr	r1, [pc, #532]	; (8003520 <HAL_RCC_ClockConfig+0x280>)
 800330a:	69cb      	ldr	r3, [r1, #28]
 800330c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003310:	431a      	orrs	r2, r3
 8003312:	61ca      	str	r2, [r1, #28]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003314:	6823      	ldr	r3, [r4, #0]
 8003316:	f013 0f10 	tst.w	r3, #16
 800331a:	d00c      	beq.n	8003336 <HAL_RCC_ClockConfig+0x96>
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800331c:	69a2      	ldr	r2, [r4, #24]
 800331e:	4b80      	ldr	r3, [pc, #512]	; (8003520 <HAL_RCC_ClockConfig+0x280>)
 8003320:	69db      	ldr	r3, [r3, #28]
 8003322:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003326:	429a      	cmp	r2, r3
 8003328:	d905      	bls.n	8003336 <HAL_RCC_ClockConfig+0x96>
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800332a:	497d      	ldr	r1, [pc, #500]	; (8003520 <HAL_RCC_ClockConfig+0x280>)
 800332c:	69cb      	ldr	r3, [r1, #28]
 800332e:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8003332:	431a      	orrs	r2, r3
 8003334:	61ca      	str	r2, [r1, #28]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8003336:	6823      	ldr	r3, [r4, #0]
 8003338:	f013 0f20 	tst.w	r3, #32
 800333c:	d00c      	beq.n	8003358 <HAL_RCC_ClockConfig+0xb8>
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800333e:	69e2      	ldr	r2, [r4, #28]
 8003340:	4b77      	ldr	r3, [pc, #476]	; (8003520 <HAL_RCC_ClockConfig+0x280>)
 8003342:	6a1b      	ldr	r3, [r3, #32]
 8003344:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003348:	429a      	cmp	r2, r3
 800334a:	d905      	bls.n	8003358 <HAL_RCC_ClockConfig+0xb8>
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 800334c:	4974      	ldr	r1, [pc, #464]	; (8003520 <HAL_RCC_ClockConfig+0x280>)
 800334e:	6a0b      	ldr	r3, [r1, #32]
 8003350:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003354:	431a      	orrs	r2, r3
 8003356:	620a      	str	r2, [r1, #32]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003358:	6823      	ldr	r3, [r4, #0]
 800335a:	f013 0f02 	tst.w	r3, #2
 800335e:	d00c      	beq.n	800337a <HAL_RCC_ClockConfig+0xda>
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8003360:	68e2      	ldr	r2, [r4, #12]
 8003362:	4b6f      	ldr	r3, [pc, #444]	; (8003520 <HAL_RCC_ClockConfig+0x280>)
 8003364:	699b      	ldr	r3, [r3, #24]
 8003366:	f003 030f 	and.w	r3, r3, #15
 800336a:	429a      	cmp	r2, r3
 800336c:	d905      	bls.n	800337a <HAL_RCC_ClockConfig+0xda>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800336e:	496c      	ldr	r1, [pc, #432]	; (8003520 <HAL_RCC_ClockConfig+0x280>)
 8003370:	698b      	ldr	r3, [r1, #24]
 8003372:	f023 030f 	bic.w	r3, r3, #15
 8003376:	431a      	orrs	r2, r3
 8003378:	618a      	str	r2, [r1, #24]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800337a:	6823      	ldr	r3, [r4, #0]
 800337c:	f013 0f01 	tst.w	r3, #1
 8003380:	d041      	beq.n	8003406 <HAL_RCC_ClockConfig+0x166>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8003382:	4a67      	ldr	r2, [pc, #412]	; (8003520 <HAL_RCC_ClockConfig+0x280>)
 8003384:	6993      	ldr	r3, [r2, #24]
 8003386:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800338a:	68a1      	ldr	r1, [r4, #8]
 800338c:	430b      	orrs	r3, r1
 800338e:	6193      	str	r3, [r2, #24]
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003390:	6863      	ldr	r3, [r4, #4]
 8003392:	2b02      	cmp	r3, #2
 8003394:	d00a      	beq.n	80033ac <HAL_RCC_ClockConfig+0x10c>
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003396:	2b03      	cmp	r3, #3
 8003398:	d027      	beq.n	80033ea <HAL_RCC_ClockConfig+0x14a>
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 800339a:	2b01      	cmp	r3, #1
 800339c:	d02c      	beq.n	80033f8 <HAL_RCC_ClockConfig+0x158>
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800339e:	4a60      	ldr	r2, [pc, #384]	; (8003520 <HAL_RCC_ClockConfig+0x280>)
 80033a0:	6812      	ldr	r2, [r2, #0]
 80033a2:	f012 0f04 	tst.w	r2, #4
 80033a6:	d106      	bne.n	80033b6 <HAL_RCC_ClockConfig+0x116>
          return HAL_ERROR;
 80033a8:	2001      	movs	r0, #1
 80033aa:	e0ad      	b.n	8003508 <HAL_RCC_ClockConfig+0x268>
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80033ac:	6812      	ldr	r2, [r2, #0]
 80033ae:	f412 3f00 	tst.w	r2, #131072	; 0x20000
 80033b2:	f000 80ae 	beq.w	8003512 <HAL_RCC_ClockConfig+0x272>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80033b6:	495a      	ldr	r1, [pc, #360]	; (8003520 <HAL_RCC_ClockConfig+0x280>)
 80033b8:	690a      	ldr	r2, [r1, #16]
 80033ba:	f022 0207 	bic.w	r2, r2, #7
 80033be:	4313      	orrs	r3, r2
 80033c0:	610b      	str	r3, [r1, #16]
      tickstart = HAL_GetTick();
 80033c2:	f7fd fd13 	bl	8000dec <HAL_GetTick>
 80033c6:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80033c8:	4b55      	ldr	r3, [pc, #340]	; (8003520 <HAL_RCC_ClockConfig+0x280>)
 80033ca:	691b      	ldr	r3, [r3, #16]
 80033cc:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80033d0:	6862      	ldr	r2, [r4, #4]
 80033d2:	ebb3 0fc2 	cmp.w	r3, r2, lsl #3
 80033d6:	d016      	beq.n	8003406 <HAL_RCC_ClockConfig+0x166>
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80033d8:	f7fd fd08 	bl	8000dec <HAL_GetTick>
 80033dc:	1b80      	subs	r0, r0, r6
 80033de:	f241 3388 	movw	r3, #5000	; 0x1388
 80033e2:	4298      	cmp	r0, r3
 80033e4:	d9f0      	bls.n	80033c8 <HAL_RCC_ClockConfig+0x128>
            return HAL_TIMEOUT;
 80033e6:	2003      	movs	r0, #3
 80033e8:	e08e      	b.n	8003508 <HAL_RCC_ClockConfig+0x268>
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80033ea:	4a4d      	ldr	r2, [pc, #308]	; (8003520 <HAL_RCC_ClockConfig+0x280>)
 80033ec:	6812      	ldr	r2, [r2, #0]
 80033ee:	f012 7f00 	tst.w	r2, #33554432	; 0x2000000
 80033f2:	d1e0      	bne.n	80033b6 <HAL_RCC_ClockConfig+0x116>
          return HAL_ERROR;
 80033f4:	2001      	movs	r0, #1
 80033f6:	e087      	b.n	8003508 <HAL_RCC_ClockConfig+0x268>
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80033f8:	4a49      	ldr	r2, [pc, #292]	; (8003520 <HAL_RCC_ClockConfig+0x280>)
 80033fa:	6812      	ldr	r2, [r2, #0]
 80033fc:	f412 7f80 	tst.w	r2, #256	; 0x100
 8003400:	d1d9      	bne.n	80033b6 <HAL_RCC_ClockConfig+0x116>
          return HAL_ERROR;
 8003402:	2001      	movs	r0, #1
 8003404:	e080      	b.n	8003508 <HAL_RCC_ClockConfig+0x268>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003406:	6823      	ldr	r3, [r4, #0]
 8003408:	f013 0f02 	tst.w	r3, #2
 800340c:	d00c      	beq.n	8003428 <HAL_RCC_ClockConfig+0x188>
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800340e:	68e2      	ldr	r2, [r4, #12]
 8003410:	4b43      	ldr	r3, [pc, #268]	; (8003520 <HAL_RCC_ClockConfig+0x280>)
 8003412:	699b      	ldr	r3, [r3, #24]
 8003414:	f003 030f 	and.w	r3, r3, #15
 8003418:	429a      	cmp	r2, r3
 800341a:	d205      	bcs.n	8003428 <HAL_RCC_ClockConfig+0x188>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800341c:	4940      	ldr	r1, [pc, #256]	; (8003520 <HAL_RCC_ClockConfig+0x280>)
 800341e:	698b      	ldr	r3, [r1, #24]
 8003420:	f023 030f 	bic.w	r3, r3, #15
 8003424:	431a      	orrs	r2, r3
 8003426:	618a      	str	r2, [r1, #24]
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003428:	4b3c      	ldr	r3, [pc, #240]	; (800351c <HAL_RCC_ClockConfig+0x27c>)
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	f003 030f 	and.w	r3, r3, #15
 8003430:	42ab      	cmp	r3, r5
 8003432:	d90a      	bls.n	800344a <HAL_RCC_ClockConfig+0x1aa>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003434:	4a39      	ldr	r2, [pc, #228]	; (800351c <HAL_RCC_ClockConfig+0x27c>)
 8003436:	6813      	ldr	r3, [r2, #0]
 8003438:	f023 030f 	bic.w	r3, r3, #15
 800343c:	432b      	orrs	r3, r5
 800343e:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003440:	6813      	ldr	r3, [r2, #0]
 8003442:	f003 030f 	and.w	r3, r3, #15
 8003446:	42ab      	cmp	r3, r5
 8003448:	d165      	bne.n	8003516 <HAL_RCC_ClockConfig+0x276>
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800344a:	6823      	ldr	r3, [r4, #0]
 800344c:	f013 0f04 	tst.w	r3, #4
 8003450:	d00c      	beq.n	800346c <HAL_RCC_ClockConfig+0x1cc>
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8003452:	6922      	ldr	r2, [r4, #16]
 8003454:	4b32      	ldr	r3, [pc, #200]	; (8003520 <HAL_RCC_ClockConfig+0x280>)
 8003456:	699b      	ldr	r3, [r3, #24]
 8003458:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800345c:	429a      	cmp	r2, r3
 800345e:	d205      	bcs.n	800346c <HAL_RCC_ClockConfig+0x1cc>
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8003460:	492f      	ldr	r1, [pc, #188]	; (8003520 <HAL_RCC_ClockConfig+0x280>)
 8003462:	698b      	ldr	r3, [r1, #24]
 8003464:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003468:	431a      	orrs	r2, r3
 800346a:	618a      	str	r2, [r1, #24]
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800346c:	6823      	ldr	r3, [r4, #0]
 800346e:	f013 0f08 	tst.w	r3, #8
 8003472:	d00c      	beq.n	800348e <HAL_RCC_ClockConfig+0x1ee>
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8003474:	6962      	ldr	r2, [r4, #20]
 8003476:	4b2a      	ldr	r3, [pc, #168]	; (8003520 <HAL_RCC_ClockConfig+0x280>)
 8003478:	69db      	ldr	r3, [r3, #28]
 800347a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800347e:	429a      	cmp	r2, r3
 8003480:	d205      	bcs.n	800348e <HAL_RCC_ClockConfig+0x1ee>
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8003482:	4927      	ldr	r1, [pc, #156]	; (8003520 <HAL_RCC_ClockConfig+0x280>)
 8003484:	69cb      	ldr	r3, [r1, #28]
 8003486:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800348a:	431a      	orrs	r2, r3
 800348c:	61ca      	str	r2, [r1, #28]
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800348e:	6823      	ldr	r3, [r4, #0]
 8003490:	f013 0f10 	tst.w	r3, #16
 8003494:	d00c      	beq.n	80034b0 <HAL_RCC_ClockConfig+0x210>
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8003496:	69a2      	ldr	r2, [r4, #24]
 8003498:	4b21      	ldr	r3, [pc, #132]	; (8003520 <HAL_RCC_ClockConfig+0x280>)
 800349a:	69db      	ldr	r3, [r3, #28]
 800349c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80034a0:	429a      	cmp	r2, r3
 80034a2:	d205      	bcs.n	80034b0 <HAL_RCC_ClockConfig+0x210>
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80034a4:	491e      	ldr	r1, [pc, #120]	; (8003520 <HAL_RCC_ClockConfig+0x280>)
 80034a6:	69cb      	ldr	r3, [r1, #28]
 80034a8:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80034ac:	431a      	orrs	r2, r3
 80034ae:	61ca      	str	r2, [r1, #28]
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80034b0:	6823      	ldr	r3, [r4, #0]
 80034b2:	f013 0f20 	tst.w	r3, #32
 80034b6:	d00c      	beq.n	80034d2 <HAL_RCC_ClockConfig+0x232>
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80034b8:	69e2      	ldr	r2, [r4, #28]
 80034ba:	4b19      	ldr	r3, [pc, #100]	; (8003520 <HAL_RCC_ClockConfig+0x280>)
 80034bc:	6a1b      	ldr	r3, [r3, #32]
 80034be:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80034c2:	429a      	cmp	r2, r3
 80034c4:	d205      	bcs.n	80034d2 <HAL_RCC_ClockConfig+0x232>
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 80034c6:	4916      	ldr	r1, [pc, #88]	; (8003520 <HAL_RCC_ClockConfig+0x280>)
 80034c8:	6a0b      	ldr	r3, [r1, #32]
 80034ca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80034ce:	431a      	orrs	r2, r3
 80034d0:	620a      	str	r2, [r1, #32]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80034d2:	f7ff fdeb 	bl	80030ac <HAL_RCC_GetSysClockFreq>
 80034d6:	4912      	ldr	r1, [pc, #72]	; (8003520 <HAL_RCC_ClockConfig+0x280>)
 80034d8:	698b      	ldr	r3, [r1, #24]
 80034da:	f3c3 2303 	ubfx	r3, r3, #8, #4
 80034de:	4a11      	ldr	r2, [pc, #68]	; (8003524 <HAL_RCC_ClockConfig+0x284>)
 80034e0:	5cd3      	ldrb	r3, [r2, r3]
 80034e2:	f003 031f 	and.w	r3, r3, #31
 80034e6:	40d8      	lsrs	r0, r3
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80034e8:	698b      	ldr	r3, [r1, #24]
 80034ea:	f003 030f 	and.w	r3, r3, #15
 80034ee:	5cd3      	ldrb	r3, [r2, r3]
 80034f0:	f003 031f 	and.w	r3, r3, #31
 80034f4:	fa20 f303 	lsr.w	r3, r0, r3
 80034f8:	4a0b      	ldr	r2, [pc, #44]	; (8003528 <HAL_RCC_ClockConfig+0x288>)
 80034fa:	6013      	str	r3, [r2, #0]
  SystemCoreClock = common_system_clock;
 80034fc:	4b0b      	ldr	r3, [pc, #44]	; (800352c <HAL_RCC_ClockConfig+0x28c>)
 80034fe:	6018      	str	r0, [r3, #0]
  halstatus = HAL_InitTick (uwTickPrio);
 8003500:	4b0b      	ldr	r3, [pc, #44]	; (8003530 <HAL_RCC_ClockConfig+0x290>)
 8003502:	6818      	ldr	r0, [r3, #0]
 8003504:	f004 fc84 	bl	8007e10 <HAL_InitTick>
}
 8003508:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_ERROR;
 800350a:	2001      	movs	r0, #1
}
 800350c:	4770      	bx	lr
      return HAL_ERROR;
 800350e:	2001      	movs	r0, #1
 8003510:	e7fa      	b.n	8003508 <HAL_RCC_ClockConfig+0x268>
          return HAL_ERROR;
 8003512:	2001      	movs	r0, #1
 8003514:	e7f8      	b.n	8003508 <HAL_RCC_ClockConfig+0x268>
      return HAL_ERROR;
 8003516:	2001      	movs	r0, #1
 8003518:	e7f6      	b.n	8003508 <HAL_RCC_ClockConfig+0x268>
 800351a:	bf00      	nop
 800351c:	52002000 	.word	0x52002000
 8003520:	58024400 	.word	0x58024400
 8003524:	080095c0 	.word	0x080095c0
 8003528:	2000011c 	.word	0x2000011c
 800352c:	20000118 	.word	0x20000118
 8003530:	20000004 	.word	0x20000004

08003534 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003534:	b508      	push	{r3, lr}
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8003536:	f7ff fdb9 	bl	80030ac <HAL_RCC_GetSysClockFreq>
 800353a:	4a0b      	ldr	r2, [pc, #44]	; (8003568 <HAL_RCC_GetHCLKFreq+0x34>)
 800353c:	6993      	ldr	r3, [r2, #24]
 800353e:	f3c3 2303 	ubfx	r3, r3, #8, #4
 8003542:	490a      	ldr	r1, [pc, #40]	; (800356c <HAL_RCC_GetHCLKFreq+0x38>)
 8003544:	5ccb      	ldrb	r3, [r1, r3]
 8003546:	f003 031f 	and.w	r3, r3, #31
 800354a:	fa20 f303 	lsr.w	r3, r0, r3
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800354e:	6992      	ldr	r2, [r2, #24]
 8003550:	f002 020f 	and.w	r2, r2, #15
 8003554:	5c88      	ldrb	r0, [r1, r2]
 8003556:	f000 001f 	and.w	r0, r0, #31
 800355a:	fa23 f000 	lsr.w	r0, r3, r0
 800355e:	4a04      	ldr	r2, [pc, #16]	; (8003570 <HAL_RCC_GetHCLKFreq+0x3c>)
 8003560:	6010      	str	r0, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8003562:	4a04      	ldr	r2, [pc, #16]	; (8003574 <HAL_RCC_GetHCLKFreq+0x40>)
 8003564:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
}
 8003566:	bd08      	pop	{r3, pc}
 8003568:	58024400 	.word	0x58024400
 800356c:	080095c0 	.word	0x080095c0
 8003570:	2000011c 	.word	0x2000011c
 8003574:	20000118 	.word	0x20000118

08003578 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003578:	b508      	push	{r3, lr}
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 800357a:	f7ff ffdb 	bl	8003534 <HAL_RCC_GetHCLKFreq>
 800357e:	4b05      	ldr	r3, [pc, #20]	; (8003594 <HAL_RCC_GetPCLK1Freq+0x1c>)
 8003580:	69db      	ldr	r3, [r3, #28]
 8003582:	f3c3 1302 	ubfx	r3, r3, #4, #3
 8003586:	4a04      	ldr	r2, [pc, #16]	; (8003598 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003588:	5cd3      	ldrb	r3, [r2, r3]
 800358a:	f003 031f 	and.w	r3, r3, #31
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 800358e:	40d8      	lsrs	r0, r3
 8003590:	bd08      	pop	{r3, pc}
 8003592:	bf00      	nop
 8003594:	58024400 	.word	0x58024400
 8003598:	080095c0 	.word	0x080095c0

0800359c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800359c:	b508      	push	{r3, lr}
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 800359e:	f7ff ffc9 	bl	8003534 <HAL_RCC_GetHCLKFreq>
 80035a2:	4b05      	ldr	r3, [pc, #20]	; (80035b8 <HAL_RCC_GetPCLK2Freq+0x1c>)
 80035a4:	69db      	ldr	r3, [r3, #28]
 80035a6:	f3c3 2302 	ubfx	r3, r3, #8, #3
 80035aa:	4a04      	ldr	r2, [pc, #16]	; (80035bc <HAL_RCC_GetPCLK2Freq+0x20>)
 80035ac:	5cd3      	ldrb	r3, [r2, r3]
 80035ae:	f003 031f 	and.w	r3, r3, #31
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 80035b2:	40d8      	lsrs	r0, r3
 80035b4:	bd08      	pop	{r3, pc}
 80035b6:	bf00      	nop
 80035b8:	58024400 	.word	0x58024400
 80035bc:	080095c0 	.word	0x080095c0

080035c0 <HAL_RCC_GetClockConfig>:
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 | RCC_CLOCKTYPE_PCLK1 |
 80035c0:	233f      	movs	r3, #63	; 0x3f
 80035c2:	6003      	str	r3, [r0, #0]
                                 RCC_CLOCKTYPE_PCLK2 |  RCC_CLOCKTYPE_D3PCLK1  ;

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80035c4:	4b11      	ldr	r3, [pc, #68]	; (800360c <HAL_RCC_GetClockConfig+0x4c>)
 80035c6:	691a      	ldr	r2, [r3, #16]
 80035c8:	f002 0207 	and.w	r2, r2, #7
 80035cc:	6042      	str	r2, [r0, #4]

#if defined(RCC_D1CFGR_D1CPRE)
  /* Get the SYSCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1CPRE);
 80035ce:	699a      	ldr	r2, [r3, #24]
 80035d0:	f402 6270 	and.w	r2, r2, #3840	; 0xf00
 80035d4:	6082      	str	r2, [r0, #8]

  /* Get the D1HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_HPRE);
 80035d6:	699a      	ldr	r2, [r3, #24]
 80035d8:	f002 020f 	and.w	r2, r2, #15
 80035dc:	60c2      	str	r2, [r0, #12]

  /* Get the APB3 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB3CLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1PPRE);
 80035de:	699a      	ldr	r2, [r3, #24]
 80035e0:	f002 0270 	and.w	r2, r2, #112	; 0x70
 80035e4:	6102      	str	r2, [r0, #16]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1);
 80035e6:	69da      	ldr	r2, [r3, #28]
 80035e8:	f002 0270 	and.w	r2, r2, #112	; 0x70
 80035ec:	6142      	str	r2, [r0, #20]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2);
 80035ee:	69da      	ldr	r2, [r3, #28]
 80035f0:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
 80035f4:	6182      	str	r2, [r0, #24]

  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->D3CFGR & RCC_D3CFGR_D3PPRE);
 80035f6:	6a1b      	ldr	r3, [r3, #32]
 80035f8:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80035fc:	61c3      	str	r3, [r0, #28]
  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE);
#endif

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80035fe:	4b04      	ldr	r3, [pc, #16]	; (8003610 <HAL_RCC_GetClockConfig+0x50>)
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	f003 030f 	and.w	r3, r3, #15
 8003606:	600b      	str	r3, [r1, #0]
}
 8003608:	4770      	bx	lr
 800360a:	bf00      	nop
 800360c:	58024400 	.word	0x58024400
 8003610:	52002000 	.word	0x52002000

08003614 <RCCEx_PLL2_Config>:
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8003614:	4b40      	ldr	r3, [pc, #256]	; (8003718 <RCCEx_PLL2_Config+0x104>)
 8003616:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003618:	f003 0303 	and.w	r3, r3, #3
 800361c:	2b03      	cmp	r3, #3
 800361e:	d079      	beq.n	8003714 <RCCEx_PLL2_Config+0x100>
{
 8003620:	b570      	push	{r4, r5, r6, lr}
 8003622:	4605      	mov	r5, r0
 8003624:	460e      	mov	r6, r1


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8003626:	4a3c      	ldr	r2, [pc, #240]	; (8003718 <RCCEx_PLL2_Config+0x104>)
 8003628:	6813      	ldr	r3, [r2, #0]
 800362a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800362e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003630:	f7fd fbdc 	bl	8000dec <HAL_GetTick>
 8003634:	4604      	mov	r4, r0

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8003636:	4b38      	ldr	r3, [pc, #224]	; (8003718 <RCCEx_PLL2_Config+0x104>)
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	f013 6f00 	tst.w	r3, #134217728	; 0x8000000
 800363e:	d006      	beq.n	800364e <RCCEx_PLL2_Config+0x3a>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8003640:	f7fd fbd4 	bl	8000dec <HAL_GetTick>
 8003644:	1b03      	subs	r3, r0, r4
 8003646:	2b02      	cmp	r3, #2
 8003648:	d9f5      	bls.n	8003636 <RCCEx_PLL2_Config+0x22>
      {
        return HAL_TIMEOUT;
 800364a:	2003      	movs	r0, #3

  }


  return status;
}
 800364c:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 800364e:	4b32      	ldr	r3, [pc, #200]	; (8003718 <RCCEx_PLL2_Config+0x104>)
 8003650:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003652:	f422 327c 	bic.w	r2, r2, #258048	; 0x3f000
 8003656:	6829      	ldr	r1, [r5, #0]
 8003658:	ea42 3201 	orr.w	r2, r2, r1, lsl #12
 800365c:	629a      	str	r2, [r3, #40]	; 0x28
 800365e:	686a      	ldr	r2, [r5, #4]
 8003660:	3a01      	subs	r2, #1
 8003662:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003666:	68a9      	ldr	r1, [r5, #8]
 8003668:	3901      	subs	r1, #1
 800366a:	0249      	lsls	r1, r1, #9
 800366c:	b289      	uxth	r1, r1
 800366e:	430a      	orrs	r2, r1
 8003670:	68e9      	ldr	r1, [r5, #12]
 8003672:	3901      	subs	r1, #1
 8003674:	0409      	lsls	r1, r1, #16
 8003676:	f401 01fe 	and.w	r1, r1, #8323072	; 0x7f0000
 800367a:	430a      	orrs	r2, r1
 800367c:	6929      	ldr	r1, [r5, #16]
 800367e:	3901      	subs	r1, #1
 8003680:	0609      	lsls	r1, r1, #24
 8003682:	f001 41fe 	and.w	r1, r1, #2130706432	; 0x7f000000
 8003686:	430a      	orrs	r2, r1
 8003688:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800368a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800368c:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 8003690:	6969      	ldr	r1, [r5, #20]
 8003692:	430a      	orrs	r2, r1
 8003694:	62da      	str	r2, [r3, #44]	; 0x2c
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8003696:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003698:	f022 0220 	bic.w	r2, r2, #32
 800369c:	69a9      	ldr	r1, [r5, #24]
 800369e:	430a      	orrs	r2, r1
 80036a0:	62da      	str	r2, [r3, #44]	; 0x2c
    __HAL_RCC_PLL2FRACN_DISABLE();
 80036a2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80036a4:	f022 0210 	bic.w	r2, r2, #16
 80036a8:	62da      	str	r2, [r3, #44]	; 0x2c
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 80036aa:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 80036ac:	4a1b      	ldr	r2, [pc, #108]	; (800371c <RCCEx_PLL2_Config+0x108>)
 80036ae:	400a      	ands	r2, r1
 80036b0:	69e9      	ldr	r1, [r5, #28]
 80036b2:	ea42 02c1 	orr.w	r2, r2, r1, lsl #3
 80036b6:	63da      	str	r2, [r3, #60]	; 0x3c
    __HAL_RCC_PLL2FRACN_ENABLE();
 80036b8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80036ba:	f042 0210 	orr.w	r2, r2, #16
 80036be:	62da      	str	r2, [r3, #44]	; 0x2c
    if(Divider == DIVIDER_P_UPDATE)
 80036c0:	b9c6      	cbnz	r6, 80036f4 <RCCEx_PLL2_Config+0xe0>
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 80036c2:	461a      	mov	r2, r3
 80036c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036c6:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80036ca:	62d3      	str	r3, [r2, #44]	; 0x2c
    __HAL_RCC_PLL2_ENABLE();
 80036cc:	4a12      	ldr	r2, [pc, #72]	; (8003718 <RCCEx_PLL2_Config+0x104>)
 80036ce:	6813      	ldr	r3, [r2, #0]
 80036d0:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80036d4:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 80036d6:	f7fd fb89 	bl	8000dec <HAL_GetTick>
 80036da:	4604      	mov	r4, r0
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80036dc:	4b0e      	ldr	r3, [pc, #56]	; (8003718 <RCCEx_PLL2_Config+0x104>)
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	f013 6f00 	tst.w	r3, #134217728	; 0x8000000
 80036e4:	d114      	bne.n	8003710 <RCCEx_PLL2_Config+0xfc>
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 80036e6:	f7fd fb81 	bl	8000dec <HAL_GetTick>
 80036ea:	1b00      	subs	r0, r0, r4
 80036ec:	2802      	cmp	r0, #2
 80036ee:	d9f5      	bls.n	80036dc <RCCEx_PLL2_Config+0xc8>
        return HAL_TIMEOUT;
 80036f0:	2003      	movs	r0, #3
 80036f2:	e7ab      	b.n	800364c <RCCEx_PLL2_Config+0x38>
    else if(Divider == DIVIDER_Q_UPDATE)
 80036f4:	2e01      	cmp	r6, #1
 80036f6:	d005      	beq.n	8003704 <RCCEx_PLL2_Config+0xf0>
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 80036f8:	4a07      	ldr	r2, [pc, #28]	; (8003718 <RCCEx_PLL2_Config+0x104>)
 80036fa:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 80036fc:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8003700:	62d3      	str	r3, [r2, #44]	; 0x2c
 8003702:	e7e3      	b.n	80036cc <RCCEx_PLL2_Config+0xb8>
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8003704:	4a04      	ldr	r2, [pc, #16]	; (8003718 <RCCEx_PLL2_Config+0x104>)
 8003706:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8003708:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800370c:	62d3      	str	r3, [r2, #44]	; 0x2c
 800370e:	e7dd      	b.n	80036cc <RCCEx_PLL2_Config+0xb8>
  return status;
 8003710:	2000      	movs	r0, #0
 8003712:	e79b      	b.n	800364c <RCCEx_PLL2_Config+0x38>
    return HAL_ERROR;
 8003714:	2001      	movs	r0, #1
}
 8003716:	4770      	bx	lr
 8003718:	58024400 	.word	0x58024400
 800371c:	ffff0007 	.word	0xffff0007

08003720 <RCCEx_PLL3_Config>:
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8003720:	4b40      	ldr	r3, [pc, #256]	; (8003824 <RCCEx_PLL3_Config+0x104>)
 8003722:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003724:	f003 0303 	and.w	r3, r3, #3
 8003728:	2b03      	cmp	r3, #3
 800372a:	d079      	beq.n	8003820 <RCCEx_PLL3_Config+0x100>
{
 800372c:	b570      	push	{r4, r5, r6, lr}
 800372e:	4605      	mov	r5, r0
 8003730:	460e      	mov	r6, r1


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8003732:	4a3c      	ldr	r2, [pc, #240]	; (8003824 <RCCEx_PLL3_Config+0x104>)
 8003734:	6813      	ldr	r3, [r2, #0]
 8003736:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800373a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800373c:	f7fd fb56 	bl	8000dec <HAL_GetTick>
 8003740:	4604      	mov	r4, r0
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8003742:	4b38      	ldr	r3, [pc, #224]	; (8003824 <RCCEx_PLL3_Config+0x104>)
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	f013 5f00 	tst.w	r3, #536870912	; 0x20000000
 800374a:	d006      	beq.n	800375a <RCCEx_PLL3_Config+0x3a>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 800374c:	f7fd fb4e 	bl	8000dec <HAL_GetTick>
 8003750:	1b03      	subs	r3, r0, r4
 8003752:	2b02      	cmp	r3, #2
 8003754:	d9f5      	bls.n	8003742 <RCCEx_PLL3_Config+0x22>
      {
        return HAL_TIMEOUT;
 8003756:	2003      	movs	r0, #3

  }


  return status;
}
 8003758:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800375a:	4b32      	ldr	r3, [pc, #200]	; (8003824 <RCCEx_PLL3_Config+0x104>)
 800375c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800375e:	f022 727c 	bic.w	r2, r2, #66060288	; 0x3f00000
 8003762:	6829      	ldr	r1, [r5, #0]
 8003764:	ea42 5201 	orr.w	r2, r2, r1, lsl #20
 8003768:	629a      	str	r2, [r3, #40]	; 0x28
 800376a:	686a      	ldr	r2, [r5, #4]
 800376c:	3a01      	subs	r2, #1
 800376e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003772:	68a9      	ldr	r1, [r5, #8]
 8003774:	3901      	subs	r1, #1
 8003776:	0249      	lsls	r1, r1, #9
 8003778:	b289      	uxth	r1, r1
 800377a:	430a      	orrs	r2, r1
 800377c:	68e9      	ldr	r1, [r5, #12]
 800377e:	3901      	subs	r1, #1
 8003780:	0409      	lsls	r1, r1, #16
 8003782:	f401 01fe 	and.w	r1, r1, #8323072	; 0x7f0000
 8003786:	430a      	orrs	r2, r1
 8003788:	6929      	ldr	r1, [r5, #16]
 800378a:	3901      	subs	r1, #1
 800378c:	0609      	lsls	r1, r1, #24
 800378e:	f001 41fe 	and.w	r1, r1, #2130706432	; 0x7f000000
 8003792:	430a      	orrs	r2, r1
 8003794:	641a      	str	r2, [r3, #64]	; 0x40
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8003796:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003798:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 800379c:	6969      	ldr	r1, [r5, #20]
 800379e:	430a      	orrs	r2, r1
 80037a0:	62da      	str	r2, [r3, #44]	; 0x2c
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 80037a2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80037a4:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80037a8:	69a9      	ldr	r1, [r5, #24]
 80037aa:	430a      	orrs	r2, r1
 80037ac:	62da      	str	r2, [r3, #44]	; 0x2c
    __HAL_RCC_PLL3FRACN_DISABLE();
 80037ae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80037b0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80037b4:	62da      	str	r2, [r3, #44]	; 0x2c
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 80037b6:	6c59      	ldr	r1, [r3, #68]	; 0x44
 80037b8:	4a1b      	ldr	r2, [pc, #108]	; (8003828 <RCCEx_PLL3_Config+0x108>)
 80037ba:	400a      	ands	r2, r1
 80037bc:	69e9      	ldr	r1, [r5, #28]
 80037be:	ea42 02c1 	orr.w	r2, r2, r1, lsl #3
 80037c2:	645a      	str	r2, [r3, #68]	; 0x44
    __HAL_RCC_PLL3FRACN_ENABLE();
 80037c4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80037c6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80037ca:	62da      	str	r2, [r3, #44]	; 0x2c
    if(Divider == DIVIDER_P_UPDATE)
 80037cc:	b9c6      	cbnz	r6, 8003800 <RCCEx_PLL3_Config+0xe0>
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 80037ce:	461a      	mov	r2, r3
 80037d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037d2:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80037d6:	62d3      	str	r3, [r2, #44]	; 0x2c
    __HAL_RCC_PLL3_ENABLE();
 80037d8:	4a12      	ldr	r2, [pc, #72]	; (8003824 <RCCEx_PLL3_Config+0x104>)
 80037da:	6813      	ldr	r3, [r2, #0]
 80037dc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80037e0:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 80037e2:	f7fd fb03 	bl	8000dec <HAL_GetTick>
 80037e6:	4604      	mov	r4, r0
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80037e8:	4b0e      	ldr	r3, [pc, #56]	; (8003824 <RCCEx_PLL3_Config+0x104>)
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	f013 5f00 	tst.w	r3, #536870912	; 0x20000000
 80037f0:	d114      	bne.n	800381c <RCCEx_PLL3_Config+0xfc>
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 80037f2:	f7fd fafb 	bl	8000dec <HAL_GetTick>
 80037f6:	1b00      	subs	r0, r0, r4
 80037f8:	2802      	cmp	r0, #2
 80037fa:	d9f5      	bls.n	80037e8 <RCCEx_PLL3_Config+0xc8>
        return HAL_TIMEOUT;
 80037fc:	2003      	movs	r0, #3
 80037fe:	e7ab      	b.n	8003758 <RCCEx_PLL3_Config+0x38>
    else if(Divider == DIVIDER_Q_UPDATE)
 8003800:	2e01      	cmp	r6, #1
 8003802:	d005      	beq.n	8003810 <RCCEx_PLL3_Config+0xf0>
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8003804:	4a07      	ldr	r2, [pc, #28]	; (8003824 <RCCEx_PLL3_Config+0x104>)
 8003806:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8003808:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800380c:	62d3      	str	r3, [r2, #44]	; 0x2c
 800380e:	e7e3      	b.n	80037d8 <RCCEx_PLL3_Config+0xb8>
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8003810:	4a04      	ldr	r2, [pc, #16]	; (8003824 <RCCEx_PLL3_Config+0x104>)
 8003812:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8003814:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8003818:	62d3      	str	r3, [r2, #44]	; 0x2c
 800381a:	e7dd      	b.n	80037d8 <RCCEx_PLL3_Config+0xb8>
  return status;
 800381c:	2000      	movs	r0, #0
 800381e:	e79b      	b.n	8003758 <RCCEx_PLL3_Config+0x38>
    return HAL_ERROR;
 8003820:	2001      	movs	r0, #1
}
 8003822:	4770      	bx	lr
 8003824:	58024400 	.word	0x58024400
 8003828:	ffff0007 	.word	0xffff0007

0800382c <HAL_RCCEx_PeriphCLKConfig>:
{
 800382c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800382e:	4604      	mov	r4, r0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003830:	6803      	ldr	r3, [r0, #0]
 8003832:	f013 6f00 	tst.w	r3, #134217728	; 0x8000000
 8003836:	d030      	beq.n	800389a <HAL_RCCEx_PeriphCLKConfig+0x6e>
    switch(PeriphClkInit->SpdifrxClockSelection)
 8003838:	6e43      	ldr	r3, [r0, #100]	; 0x64
 800383a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800383e:	d026      	beq.n	800388e <HAL_RCCEx_PeriphCLKConfig+0x62>
 8003840:	d80e      	bhi.n	8003860 <HAL_RCCEx_PeriphCLKConfig+0x34>
 8003842:	b1eb      	cbz	r3, 8003880 <HAL_RCCEx_PeriphCLKConfig+0x54>
 8003844:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003848:	d107      	bne.n	800385a <HAL_RCCEx_PeriphCLKConfig+0x2e>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800384a:	2102      	movs	r1, #2
 800384c:	3004      	adds	r0, #4
 800384e:	f7ff fee1 	bl	8003614 <RCCEx_PLL2_Config>
 8003852:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 8003854:	b145      	cbz	r5, 8003868 <HAL_RCCEx_PeriphCLKConfig+0x3c>
 8003856:	462e      	mov	r6, r5
 8003858:	e021      	b.n	800389e <HAL_RCCEx_PeriphCLKConfig+0x72>
    switch(PeriphClkInit->SpdifrxClockSelection)
 800385a:	2601      	movs	r6, #1
 800385c:	4635      	mov	r5, r6
 800385e:	e01e      	b.n	800389e <HAL_RCCEx_PeriphCLKConfig+0x72>
 8003860:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8003864:	d109      	bne.n	800387a <HAL_RCCEx_PeriphCLKConfig+0x4e>
 8003866:	2500      	movs	r5, #0
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8003868:	4a96      	ldr	r2, [pc, #600]	; (8003ac4 <HAL_RCCEx_PeriphCLKConfig+0x298>)
 800386a:	6d13      	ldr	r3, [r2, #80]	; 0x50
 800386c:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8003870:	6e61      	ldr	r1, [r4, #100]	; 0x64
 8003872:	430b      	orrs	r3, r1
 8003874:	6513      	str	r3, [r2, #80]	; 0x50
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003876:	2600      	movs	r6, #0
 8003878:	e011      	b.n	800389e <HAL_RCCEx_PeriphCLKConfig+0x72>
    switch(PeriphClkInit->SpdifrxClockSelection)
 800387a:	2601      	movs	r6, #1
 800387c:	4635      	mov	r5, r6
 800387e:	e00e      	b.n	800389e <HAL_RCCEx_PeriphCLKConfig+0x72>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003880:	4a90      	ldr	r2, [pc, #576]	; (8003ac4 <HAL_RCCEx_PeriphCLKConfig+0x298>)
 8003882:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8003884:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003888:	62d3      	str	r3, [r2, #44]	; 0x2c
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800388a:	2500      	movs	r5, #0
 800388c:	e7ec      	b.n	8003868 <HAL_RCCEx_PeriphCLKConfig+0x3c>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800388e:	2102      	movs	r1, #2
 8003890:	3024      	adds	r0, #36	; 0x24
 8003892:	f7ff ff45 	bl	8003720 <RCCEx_PLL3_Config>
 8003896:	4605      	mov	r5, r0
      break;
 8003898:	e7dc      	b.n	8003854 <HAL_RCCEx_PeriphCLKConfig+0x28>
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800389a:	2600      	movs	r6, #0
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800389c:	4635      	mov	r5, r6
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800389e:	6823      	ldr	r3, [r4, #0]
 80038a0:	f413 7f80 	tst.w	r3, #256	; 0x100
 80038a4:	d014      	beq.n	80038d0 <HAL_RCCEx_PeriphCLKConfig+0xa4>
    switch(PeriphClkInit->Sai1ClockSelection)
 80038a6:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80038a8:	2b04      	cmp	r3, #4
 80038aa:	d830      	bhi.n	800390e <HAL_RCCEx_PeriphCLKConfig+0xe2>
 80038ac:	e8df f003 	tbb	[pc, r3]
 80038b0:	08282203 	.word	0x08282203
 80038b4:	08          	.byte	0x08
 80038b5:	00          	.byte	0x00
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80038b6:	4a83      	ldr	r2, [pc, #524]	; (8003ac4 <HAL_RCCEx_PeriphCLKConfig+0x298>)
 80038b8:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 80038ba:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80038be:	62d3      	str	r3, [r2, #44]	; 0x2c
    if(ret == HAL_OK)
 80038c0:	bb45      	cbnz	r5, 8003914 <HAL_RCCEx_PeriphCLKConfig+0xe8>
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80038c2:	4a80      	ldr	r2, [pc, #512]	; (8003ac4 <HAL_RCCEx_PeriphCLKConfig+0x298>)
 80038c4:	6d13      	ldr	r3, [r2, #80]	; 0x50
 80038c6:	f023 0307 	bic.w	r3, r3, #7
 80038ca:	6d61      	ldr	r1, [r4, #84]	; 0x54
 80038cc:	430b      	orrs	r3, r1
 80038ce:	6513      	str	r3, [r2, #80]	; 0x50
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 80038d0:	6823      	ldr	r3, [r4, #0]
 80038d2:	f413 7f00 	tst.w	r3, #512	; 0x200
 80038d6:	d02f      	beq.n	8003938 <HAL_RCCEx_PeriphCLKConfig+0x10c>
    switch(PeriphClkInit->Sai23ClockSelection)
 80038d8:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80038da:	2b80      	cmp	r3, #128	; 0x80
 80038dc:	d04a      	beq.n	8003974 <HAL_RCCEx_PeriphCLKConfig+0x148>
 80038de:	d81e      	bhi.n	800391e <HAL_RCCEx_PeriphCLKConfig+0xf2>
 80038e0:	2b00      	cmp	r3, #0
 80038e2:	d041      	beq.n	8003968 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 80038e4:	2b40      	cmp	r3, #64	; 0x40
 80038e6:	d117      	bne.n	8003918 <HAL_RCCEx_PeriphCLKConfig+0xec>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80038e8:	2100      	movs	r1, #0
 80038ea:	1d20      	adds	r0, r4, #4
 80038ec:	f7ff fe92 	bl	8003614 <RCCEx_PLL2_Config>
 80038f0:	4605      	mov	r5, r0
      break;
 80038f2:	e019      	b.n	8003928 <HAL_RCCEx_PeriphCLKConfig+0xfc>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80038f4:	2100      	movs	r1, #0
 80038f6:	1d20      	adds	r0, r4, #4
 80038f8:	f7ff fe8c 	bl	8003614 <RCCEx_PLL2_Config>
 80038fc:	4605      	mov	r5, r0
      break;
 80038fe:	e7df      	b.n	80038c0 <HAL_RCCEx_PeriphCLKConfig+0x94>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8003900:	2100      	movs	r1, #0
 8003902:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8003906:	f7ff ff0b 	bl	8003720 <RCCEx_PLL3_Config>
 800390a:	4605      	mov	r5, r0
      break;
 800390c:	e7d8      	b.n	80038c0 <HAL_RCCEx_PeriphCLKConfig+0x94>
    switch(PeriphClkInit->Sai1ClockSelection)
 800390e:	2601      	movs	r6, #1
 8003910:	4635      	mov	r5, r6
 8003912:	e7dd      	b.n	80038d0 <HAL_RCCEx_PeriphCLKConfig+0xa4>
 8003914:	462e      	mov	r6, r5
 8003916:	e7db      	b.n	80038d0 <HAL_RCCEx_PeriphCLKConfig+0xa4>
    switch(PeriphClkInit->Sai23ClockSelection)
 8003918:	2601      	movs	r6, #1
 800391a:	4635      	mov	r5, r6
 800391c:	e00c      	b.n	8003938 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 800391e:	2bc0      	cmp	r3, #192	; 0xc0
 8003920:	d002      	beq.n	8003928 <HAL_RCCEx_PeriphCLKConfig+0xfc>
 8003922:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003926:	d11c      	bne.n	8003962 <HAL_RCCEx_PeriphCLKConfig+0x136>
    if(ret == HAL_OK)
 8003928:	bb5d      	cbnz	r5, 8003982 <HAL_RCCEx_PeriphCLKConfig+0x156>
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 800392a:	4a66      	ldr	r2, [pc, #408]	; (8003ac4 <HAL_RCCEx_PeriphCLKConfig+0x298>)
 800392c:	6d13      	ldr	r3, [r2, #80]	; 0x50
 800392e:	f423 73e0 	bic.w	r3, r3, #448	; 0x1c0
 8003932:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8003934:	430b      	orrs	r3, r1
 8003936:	6513      	str	r3, [r2, #80]	; 0x50
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8003938:	6823      	ldr	r3, [r4, #0]
 800393a:	f413 6f80 	tst.w	r3, #1024	; 0x400
 800393e:	d034      	beq.n	80039aa <HAL_RCCEx_PeriphCLKConfig+0x17e>
    switch(PeriphClkInit->Sai4AClockSelection)
 8003940:	f8d4 30a4 	ldr.w	r3, [r4, #164]	; 0xa4
 8003944:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003948:	d04d      	beq.n	80039e6 <HAL_RCCEx_PeriphCLKConfig+0x1ba>
 800394a:	d81f      	bhi.n	800398c <HAL_RCCEx_PeriphCLKConfig+0x160>
 800394c:	2b00      	cmp	r3, #0
 800394e:	d044      	beq.n	80039da <HAL_RCCEx_PeriphCLKConfig+0x1ae>
 8003950:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003954:	d117      	bne.n	8003986 <HAL_RCCEx_PeriphCLKConfig+0x15a>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003956:	2100      	movs	r1, #0
 8003958:	1d20      	adds	r0, r4, #4
 800395a:	f7ff fe5b 	bl	8003614 <RCCEx_PLL2_Config>
 800395e:	4605      	mov	r5, r0
      break;
 8003960:	e01a      	b.n	8003998 <HAL_RCCEx_PeriphCLKConfig+0x16c>
    switch(PeriphClkInit->Sai23ClockSelection)
 8003962:	2601      	movs	r6, #1
 8003964:	4635      	mov	r5, r6
 8003966:	e7e7      	b.n	8003938 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003968:	4a56      	ldr	r2, [pc, #344]	; (8003ac4 <HAL_RCCEx_PeriphCLKConfig+0x298>)
 800396a:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 800396c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003970:	62d3      	str	r3, [r2, #44]	; 0x2c
      break;
 8003972:	e7d9      	b.n	8003928 <HAL_RCCEx_PeriphCLKConfig+0xfc>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8003974:	2100      	movs	r1, #0
 8003976:	f104 0024 	add.w	r0, r4, #36	; 0x24
 800397a:	f7ff fed1 	bl	8003720 <RCCEx_PLL3_Config>
 800397e:	4605      	mov	r5, r0
      break;
 8003980:	e7d2      	b.n	8003928 <HAL_RCCEx_PeriphCLKConfig+0xfc>
 8003982:	462e      	mov	r6, r5
 8003984:	e7d8      	b.n	8003938 <HAL_RCCEx_PeriphCLKConfig+0x10c>
    switch(PeriphClkInit->Sai4AClockSelection)
 8003986:	2601      	movs	r6, #1
 8003988:	4635      	mov	r5, r6
 800398a:	e00e      	b.n	80039aa <HAL_RCCEx_PeriphCLKConfig+0x17e>
 800398c:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8003990:	d002      	beq.n	8003998 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 8003992:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003996:	d11d      	bne.n	80039d4 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    if(ret == HAL_OK)
 8003998:	bb65      	cbnz	r5, 80039f4 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 800399a:	4a4a      	ldr	r2, [pc, #296]	; (8003ac4 <HAL_RCCEx_PeriphCLKConfig+0x298>)
 800399c:	6d93      	ldr	r3, [r2, #88]	; 0x58
 800399e:	f423 0360 	bic.w	r3, r3, #14680064	; 0xe00000
 80039a2:	f8d4 10a4 	ldr.w	r1, [r4, #164]	; 0xa4
 80039a6:	430b      	orrs	r3, r1
 80039a8:	6593      	str	r3, [r2, #88]	; 0x58
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 80039aa:	6823      	ldr	r3, [r4, #0]
 80039ac:	f413 6f00 	tst.w	r3, #2048	; 0x800
 80039b0:	d035      	beq.n	8003a1e <HAL_RCCEx_PeriphCLKConfig+0x1f2>
    switch(PeriphClkInit->Sai4BClockSelection)
 80039b2:	f8d4 30a8 	ldr.w	r3, [r4, #168]	; 0xa8
 80039b6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80039ba:	d053      	beq.n	8003a64 <HAL_RCCEx_PeriphCLKConfig+0x238>
 80039bc:	d81f      	bhi.n	80039fe <HAL_RCCEx_PeriphCLKConfig+0x1d2>
 80039be:	2b00      	cmp	r3, #0
 80039c0:	d04a      	beq.n	8003a58 <HAL_RCCEx_PeriphCLKConfig+0x22c>
 80039c2:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80039c6:	d117      	bne.n	80039f8 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80039c8:	2100      	movs	r1, #0
 80039ca:	1d20      	adds	r0, r4, #4
 80039cc:	f7ff fe22 	bl	8003614 <RCCEx_PLL2_Config>
 80039d0:	4605      	mov	r5, r0
      break;
 80039d2:	e01a      	b.n	8003a0a <HAL_RCCEx_PeriphCLKConfig+0x1de>
    switch(PeriphClkInit->Sai4AClockSelection)
 80039d4:	2601      	movs	r6, #1
 80039d6:	4635      	mov	r5, r6
 80039d8:	e7e7      	b.n	80039aa <HAL_RCCEx_PeriphCLKConfig+0x17e>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80039da:	4a3a      	ldr	r2, [pc, #232]	; (8003ac4 <HAL_RCCEx_PeriphCLKConfig+0x298>)
 80039dc:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 80039de:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80039e2:	62d3      	str	r3, [r2, #44]	; 0x2c
      break;
 80039e4:	e7d8      	b.n	8003998 <HAL_RCCEx_PeriphCLKConfig+0x16c>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80039e6:	2100      	movs	r1, #0
 80039e8:	f104 0024 	add.w	r0, r4, #36	; 0x24
 80039ec:	f7ff fe98 	bl	8003720 <RCCEx_PLL3_Config>
 80039f0:	4605      	mov	r5, r0
      break;
 80039f2:	e7d1      	b.n	8003998 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 80039f4:	462e      	mov	r6, r5
 80039f6:	e7d8      	b.n	80039aa <HAL_RCCEx_PeriphCLKConfig+0x17e>
    switch(PeriphClkInit->Sai4BClockSelection)
 80039f8:	2601      	movs	r6, #1
 80039fa:	4635      	mov	r5, r6
 80039fc:	e00f      	b.n	8003a1e <HAL_RCCEx_PeriphCLKConfig+0x1f2>
 80039fe:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8003a02:	d002      	beq.n	8003a0a <HAL_RCCEx_PeriphCLKConfig+0x1de>
 8003a04:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003a08:	d123      	bne.n	8003a52 <HAL_RCCEx_PeriphCLKConfig+0x226>
    if(ret == HAL_OK)
 8003a0a:	2d00      	cmp	r5, #0
 8003a0c:	d131      	bne.n	8003a72 <HAL_RCCEx_PeriphCLKConfig+0x246>
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8003a0e:	4a2d      	ldr	r2, [pc, #180]	; (8003ac4 <HAL_RCCEx_PeriphCLKConfig+0x298>)
 8003a10:	6d93      	ldr	r3, [r2, #88]	; 0x58
 8003a12:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8003a16:	f8d4 10a8 	ldr.w	r1, [r4, #168]	; 0xa8
 8003a1a:	430b      	orrs	r3, r1
 8003a1c:	6593      	str	r3, [r2, #88]	; 0x58
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8003a1e:	6823      	ldr	r3, [r4, #0]
 8003a20:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8003a24:	d02e      	beq.n	8003a84 <HAL_RCCEx_PeriphCLKConfig+0x258>
    switch(PeriphClkInit->QspiClockSelection)
 8003a26:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8003a28:	2b20      	cmp	r3, #32
 8003a2a:	d03f      	beq.n	8003aac <HAL_RCCEx_PeriphCLKConfig+0x280>
 8003a2c:	d826      	bhi.n	8003a7c <HAL_RCCEx_PeriphCLKConfig+0x250>
 8003a2e:	b133      	cbz	r3, 8003a3e <HAL_RCCEx_PeriphCLKConfig+0x212>
 8003a30:	2b10      	cmp	r3, #16
 8003a32:	d120      	bne.n	8003a76 <HAL_RCCEx_PeriphCLKConfig+0x24a>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003a34:	4a23      	ldr	r2, [pc, #140]	; (8003ac4 <HAL_RCCEx_PeriphCLKConfig+0x298>)
 8003a36:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8003a38:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003a3c:	62d3      	str	r3, [r2, #44]	; 0x2c
    if(ret == HAL_OK)
 8003a3e:	2d00      	cmp	r5, #0
 8003a40:	d13a      	bne.n	8003ab8 <HAL_RCCEx_PeriphCLKConfig+0x28c>
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8003a42:	4a20      	ldr	r2, [pc, #128]	; (8003ac4 <HAL_RCCEx_PeriphCLKConfig+0x298>)
 8003a44:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 8003a46:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8003a4a:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8003a4c:	430b      	orrs	r3, r1
 8003a4e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003a50:	e018      	b.n	8003a84 <HAL_RCCEx_PeriphCLKConfig+0x258>
    switch(PeriphClkInit->Sai4BClockSelection)
 8003a52:	2601      	movs	r6, #1
 8003a54:	4635      	mov	r5, r6
 8003a56:	e7e2      	b.n	8003a1e <HAL_RCCEx_PeriphCLKConfig+0x1f2>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003a58:	4a1a      	ldr	r2, [pc, #104]	; (8003ac4 <HAL_RCCEx_PeriphCLKConfig+0x298>)
 8003a5a:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8003a5c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003a60:	62d3      	str	r3, [r2, #44]	; 0x2c
      break;
 8003a62:	e7d2      	b.n	8003a0a <HAL_RCCEx_PeriphCLKConfig+0x1de>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003a64:	2100      	movs	r1, #0
 8003a66:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8003a6a:	f7ff fe59 	bl	8003720 <RCCEx_PLL3_Config>
 8003a6e:	4605      	mov	r5, r0
      break;
 8003a70:	e7cb      	b.n	8003a0a <HAL_RCCEx_PeriphCLKConfig+0x1de>
 8003a72:	462e      	mov	r6, r5
 8003a74:	e7d3      	b.n	8003a1e <HAL_RCCEx_PeriphCLKConfig+0x1f2>
    switch(PeriphClkInit->QspiClockSelection)
 8003a76:	2601      	movs	r6, #1
 8003a78:	4635      	mov	r5, r6
 8003a7a:	e003      	b.n	8003a84 <HAL_RCCEx_PeriphCLKConfig+0x258>
 8003a7c:	2b30      	cmp	r3, #48	; 0x30
 8003a7e:	d0de      	beq.n	8003a3e <HAL_RCCEx_PeriphCLKConfig+0x212>
 8003a80:	2601      	movs	r6, #1
 8003a82:	4635      	mov	r5, r6
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8003a84:	6823      	ldr	r3, [r4, #0]
 8003a86:	f413 5f80 	tst.w	r3, #4096	; 0x1000
 8003a8a:	d02c      	beq.n	8003ae6 <HAL_RCCEx_PeriphCLKConfig+0x2ba>
    switch(PeriphClkInit->Spi123ClockSelection)
 8003a8c:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8003a8e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003a92:	d04d      	beq.n	8003b30 <HAL_RCCEx_PeriphCLKConfig+0x304>
 8003a94:	d818      	bhi.n	8003ac8 <HAL_RCCEx_PeriphCLKConfig+0x29c>
 8003a96:	2b00      	cmp	r3, #0
 8003a98:	d044      	beq.n	8003b24 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
 8003a9a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003a9e:	d10d      	bne.n	8003abc <HAL_RCCEx_PeriphCLKConfig+0x290>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003aa0:	2100      	movs	r1, #0
 8003aa2:	1d20      	adds	r0, r4, #4
 8003aa4:	f7ff fdb6 	bl	8003614 <RCCEx_PLL2_Config>
 8003aa8:	4605      	mov	r5, r0
      break;
 8003aaa:	e013      	b.n	8003ad4 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8003aac:	2102      	movs	r1, #2
 8003aae:	1d20      	adds	r0, r4, #4
 8003ab0:	f7ff fdb0 	bl	8003614 <RCCEx_PLL2_Config>
 8003ab4:	4605      	mov	r5, r0
      break;
 8003ab6:	e7c2      	b.n	8003a3e <HAL_RCCEx_PeriphCLKConfig+0x212>
 8003ab8:	462e      	mov	r6, r5
 8003aba:	e7e3      	b.n	8003a84 <HAL_RCCEx_PeriphCLKConfig+0x258>
    switch(PeriphClkInit->Spi123ClockSelection)
 8003abc:	2601      	movs	r6, #1
 8003abe:	4635      	mov	r5, r6
 8003ac0:	e011      	b.n	8003ae6 <HAL_RCCEx_PeriphCLKConfig+0x2ba>
 8003ac2:	bf00      	nop
 8003ac4:	58024400 	.word	0x58024400
 8003ac8:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8003acc:	d002      	beq.n	8003ad4 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8003ace:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003ad2:	d124      	bne.n	8003b1e <HAL_RCCEx_PeriphCLKConfig+0x2f2>
    if(ret == HAL_OK)
 8003ad4:	2d00      	cmp	r5, #0
 8003ad6:	d132      	bne.n	8003b3e <HAL_RCCEx_PeriphCLKConfig+0x312>
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8003ad8:	4a98      	ldr	r2, [pc, #608]	; (8003d3c <HAL_RCCEx_PeriphCLKConfig+0x510>)
 8003ada:	6d13      	ldr	r3, [r2, #80]	; 0x50
 8003adc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003ae0:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8003ae2:	430b      	orrs	r3, r1
 8003ae4:	6513      	str	r3, [r2, #80]	; 0x50
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8003ae6:	6823      	ldr	r3, [r4, #0]
 8003ae8:	f413 5f00 	tst.w	r3, #8192	; 0x2000
 8003aec:	d037      	beq.n	8003b5e <HAL_RCCEx_PeriphCLKConfig+0x332>
    switch(PeriphClkInit->Spi45ClockSelection)
 8003aee:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8003af0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003af4:	d051      	beq.n	8003b9a <HAL_RCCEx_PeriphCLKConfig+0x36e>
 8003af6:	d827      	bhi.n	8003b48 <HAL_RCCEx_PeriphCLKConfig+0x31c>
 8003af8:	b13b      	cbz	r3, 8003b0a <HAL_RCCEx_PeriphCLKConfig+0x2de>
 8003afa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003afe:	d120      	bne.n	8003b42 <HAL_RCCEx_PeriphCLKConfig+0x316>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8003b00:	2101      	movs	r1, #1
 8003b02:	1d20      	adds	r0, r4, #4
 8003b04:	f7ff fd86 	bl	8003614 <RCCEx_PLL2_Config>
 8003b08:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 8003b0a:	2d00      	cmp	r5, #0
 8003b0c:	d14c      	bne.n	8003ba8 <HAL_RCCEx_PeriphCLKConfig+0x37c>
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8003b0e:	4a8b      	ldr	r2, [pc, #556]	; (8003d3c <HAL_RCCEx_PeriphCLKConfig+0x510>)
 8003b10:	6d13      	ldr	r3, [r2, #80]	; 0x50
 8003b12:	f423 23e0 	bic.w	r3, r3, #458752	; 0x70000
 8003b16:	6e21      	ldr	r1, [r4, #96]	; 0x60
 8003b18:	430b      	orrs	r3, r1
 8003b1a:	6513      	str	r3, [r2, #80]	; 0x50
 8003b1c:	e01f      	b.n	8003b5e <HAL_RCCEx_PeriphCLKConfig+0x332>
    switch(PeriphClkInit->Spi123ClockSelection)
 8003b1e:	2601      	movs	r6, #1
 8003b20:	4635      	mov	r5, r6
 8003b22:	e7e0      	b.n	8003ae6 <HAL_RCCEx_PeriphCLKConfig+0x2ba>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003b24:	4a85      	ldr	r2, [pc, #532]	; (8003d3c <HAL_RCCEx_PeriphCLKConfig+0x510>)
 8003b26:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8003b28:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003b2c:	62d3      	str	r3, [r2, #44]	; 0x2c
      break;
 8003b2e:	e7d1      	b.n	8003ad4 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8003b30:	2100      	movs	r1, #0
 8003b32:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8003b36:	f7ff fdf3 	bl	8003720 <RCCEx_PLL3_Config>
 8003b3a:	4605      	mov	r5, r0
      break;
 8003b3c:	e7ca      	b.n	8003ad4 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8003b3e:	462e      	mov	r6, r5
 8003b40:	e7d1      	b.n	8003ae6 <HAL_RCCEx_PeriphCLKConfig+0x2ba>
    switch(PeriphClkInit->Spi45ClockSelection)
 8003b42:	2601      	movs	r6, #1
 8003b44:	4635      	mov	r5, r6
 8003b46:	e00a      	b.n	8003b5e <HAL_RCCEx_PeriphCLKConfig+0x332>
 8003b48:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003b4c:	d0dd      	beq.n	8003b0a <HAL_RCCEx_PeriphCLKConfig+0x2de>
 8003b4e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003b52:	d0da      	beq.n	8003b0a <HAL_RCCEx_PeriphCLKConfig+0x2de>
 8003b54:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8003b58:	d0d7      	beq.n	8003b0a <HAL_RCCEx_PeriphCLKConfig+0x2de>
 8003b5a:	2601      	movs	r6, #1
 8003b5c:	4635      	mov	r5, r6
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8003b5e:	6823      	ldr	r3, [r4, #0]
 8003b60:	f413 4f80 	tst.w	r3, #16384	; 0x4000
 8003b64:	d030      	beq.n	8003bc8 <HAL_RCCEx_PeriphCLKConfig+0x39c>
    switch(PeriphClkInit->Spi6ClockSelection)
 8003b66:	f8d4 30ac 	ldr.w	r3, [r4, #172]	; 0xac
 8003b6a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003b6e:	d044      	beq.n	8003bfa <HAL_RCCEx_PeriphCLKConfig+0x3ce>
 8003b70:	d81f      	bhi.n	8003bb2 <HAL_RCCEx_PeriphCLKConfig+0x386>
 8003b72:	b13b      	cbz	r3, 8003b84 <HAL_RCCEx_PeriphCLKConfig+0x358>
 8003b74:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003b78:	d118      	bne.n	8003bac <HAL_RCCEx_PeriphCLKConfig+0x380>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8003b7a:	2101      	movs	r1, #1
 8003b7c:	1d20      	adds	r0, r4, #4
 8003b7e:	f7ff fd49 	bl	8003614 <RCCEx_PLL2_Config>
 8003b82:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 8003b84:	2d00      	cmp	r5, #0
 8003b86:	d13f      	bne.n	8003c08 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8003b88:	4a6c      	ldr	r2, [pc, #432]	; (8003d3c <HAL_RCCEx_PeriphCLKConfig+0x510>)
 8003b8a:	6d93      	ldr	r3, [r2, #88]	; 0x58
 8003b8c:	f023 43e0 	bic.w	r3, r3, #1879048192	; 0x70000000
 8003b90:	f8d4 10ac 	ldr.w	r1, [r4, #172]	; 0xac
 8003b94:	430b      	orrs	r3, r1
 8003b96:	6593      	str	r3, [r2, #88]	; 0x58
 8003b98:	e016      	b.n	8003bc8 <HAL_RCCEx_PeriphCLKConfig+0x39c>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8003b9a:	2101      	movs	r1, #1
 8003b9c:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8003ba0:	f7ff fdbe 	bl	8003720 <RCCEx_PLL3_Config>
 8003ba4:	4605      	mov	r5, r0
      break;
 8003ba6:	e7b0      	b.n	8003b0a <HAL_RCCEx_PeriphCLKConfig+0x2de>
 8003ba8:	462e      	mov	r6, r5
 8003baa:	e7d8      	b.n	8003b5e <HAL_RCCEx_PeriphCLKConfig+0x332>
    switch(PeriphClkInit->Spi6ClockSelection)
 8003bac:	2601      	movs	r6, #1
 8003bae:	4635      	mov	r5, r6
 8003bb0:	e00a      	b.n	8003bc8 <HAL_RCCEx_PeriphCLKConfig+0x39c>
 8003bb2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003bb6:	d0e5      	beq.n	8003b84 <HAL_RCCEx_PeriphCLKConfig+0x358>
 8003bb8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003bbc:	d0e2      	beq.n	8003b84 <HAL_RCCEx_PeriphCLKConfig+0x358>
 8003bbe:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8003bc2:	d0df      	beq.n	8003b84 <HAL_RCCEx_PeriphCLKConfig+0x358>
 8003bc4:	2601      	movs	r6, #1
 8003bc6:	4635      	mov	r5, r6
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8003bc8:	6823      	ldr	r3, [r4, #0]
 8003bca:	f413 4f00 	tst.w	r3, #32768	; 0x8000
 8003bce:	d009      	beq.n	8003be4 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
    switch(PeriphClkInit->FdcanClockSelection)
 8003bd0:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 8003bd2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003bd6:	d019      	beq.n	8003c0c <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 8003bd8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003bdc:	d024      	beq.n	8003c28 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
 8003bde:	b1d3      	cbz	r3, 8003c16 <HAL_RCCEx_PeriphCLKConfig+0x3ea>
 8003be0:	2601      	movs	r6, #1
 8003be2:	4635      	mov	r5, r6
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8003be4:	6823      	ldr	r3, [r4, #0]
 8003be6:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
 8003bea:	d03d      	beq.n	8003c68 <HAL_RCCEx_PeriphCLKConfig+0x43c>
    switch(PeriphClkInit->FmcClockSelection)
 8003bec:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8003bee:	2b03      	cmp	r3, #3
 8003bf0:	d836      	bhi.n	8003c60 <HAL_RCCEx_PeriphCLKConfig+0x434>
 8003bf2:	e8df f003 	tbb	[pc, r3]
 8003bf6:	2126      	.short	0x2126
 8003bf8:	262f      	.short	0x262f
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8003bfa:	2101      	movs	r1, #1
 8003bfc:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8003c00:	f7ff fd8e 	bl	8003720 <RCCEx_PLL3_Config>
 8003c04:	4605      	mov	r5, r0
      break;
 8003c06:	e7bd      	b.n	8003b84 <HAL_RCCEx_PeriphCLKConfig+0x358>
 8003c08:	462e      	mov	r6, r5
 8003c0a:	e7dd      	b.n	8003bc8 <HAL_RCCEx_PeriphCLKConfig+0x39c>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003c0c:	4a4b      	ldr	r2, [pc, #300]	; (8003d3c <HAL_RCCEx_PeriphCLKConfig+0x510>)
 8003c0e:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8003c10:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003c14:	62d3      	str	r3, [r2, #44]	; 0x2c
    if(ret == HAL_OK)
 8003c16:	b96d      	cbnz	r5, 8003c34 <HAL_RCCEx_PeriphCLKConfig+0x408>
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8003c18:	4a48      	ldr	r2, [pc, #288]	; (8003d3c <HAL_RCCEx_PeriphCLKConfig+0x510>)
 8003c1a:	6d13      	ldr	r3, [r2, #80]	; 0x50
 8003c1c:	f023 5340 	bic.w	r3, r3, #805306368	; 0x30000000
 8003c20:	6ee1      	ldr	r1, [r4, #108]	; 0x6c
 8003c22:	430b      	orrs	r3, r1
 8003c24:	6513      	str	r3, [r2, #80]	; 0x50
 8003c26:	e7dd      	b.n	8003be4 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8003c28:	2101      	movs	r1, #1
 8003c2a:	1d20      	adds	r0, r4, #4
 8003c2c:	f7ff fcf2 	bl	8003614 <RCCEx_PLL2_Config>
 8003c30:	4605      	mov	r5, r0
      break;
 8003c32:	e7f0      	b.n	8003c16 <HAL_RCCEx_PeriphCLKConfig+0x3ea>
 8003c34:	462e      	mov	r6, r5
 8003c36:	e7d5      	b.n	8003be4 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003c38:	4a40      	ldr	r2, [pc, #256]	; (8003d3c <HAL_RCCEx_PeriphCLKConfig+0x510>)
 8003c3a:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8003c3c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003c40:	62d3      	str	r3, [r2, #44]	; 0x2c
    if(ret == HAL_OK)
 8003c42:	b985      	cbnz	r5, 8003c66 <HAL_RCCEx_PeriphCLKConfig+0x43a>
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8003c44:	4a3d      	ldr	r2, [pc, #244]	; (8003d3c <HAL_RCCEx_PeriphCLKConfig+0x510>)
 8003c46:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 8003c48:	f023 0303 	bic.w	r3, r3, #3
 8003c4c:	6c61      	ldr	r1, [r4, #68]	; 0x44
 8003c4e:	430b      	orrs	r3, r1
 8003c50:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003c52:	e009      	b.n	8003c68 <HAL_RCCEx_PeriphCLKConfig+0x43c>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8003c54:	2102      	movs	r1, #2
 8003c56:	1d20      	adds	r0, r4, #4
 8003c58:	f7ff fcdc 	bl	8003614 <RCCEx_PLL2_Config>
 8003c5c:	4605      	mov	r5, r0
      break;
 8003c5e:	e7f0      	b.n	8003c42 <HAL_RCCEx_PeriphCLKConfig+0x416>
    switch(PeriphClkInit->FmcClockSelection)
 8003c60:	2601      	movs	r6, #1
 8003c62:	4635      	mov	r5, r6
 8003c64:	e000      	b.n	8003c68 <HAL_RCCEx_PeriphCLKConfig+0x43c>
 8003c66:	462e      	mov	r6, r5
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003c68:	6823      	ldr	r3, [r4, #0]
 8003c6a:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 8003c6e:	d11f      	bne.n	8003cb0 <HAL_RCCEx_PeriphCLKConfig+0x484>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8003c70:	6823      	ldr	r3, [r4, #0]
 8003c72:	f013 0f01 	tst.w	r3, #1
 8003c76:	f000 809b 	beq.w	8003db0 <HAL_RCCEx_PeriphCLKConfig+0x584>
    switch(PeriphClkInit->Usart16ClockSelection)
 8003c7a:	6fa3      	ldr	r3, [r4, #120]	; 0x78
 8003c7c:	2b28      	cmp	r3, #40	; 0x28
 8003c7e:	f200 8095 	bhi.w	8003dac <HAL_RCCEx_PeriphCLKConfig+0x580>
 8003c82:	e8df f003 	tbb	[pc, r3]
 8003c86:	9383      	.short	0x9383
 8003c88:	93939393 	.word	0x93939393
 8003c8c:	937e9393 	.word	0x937e9393
 8003c90:	93939393 	.word	0x93939393
 8003c94:	938c9393 	.word	0x938c9393
 8003c98:	93939393 	.word	0x93939393
 8003c9c:	93839393 	.word	0x93839393
 8003ca0:	93939393 	.word	0x93939393
 8003ca4:	93839393 	.word	0x93839393
 8003ca8:	93939393 	.word	0x93939393
 8003cac:	9393      	.short	0x9393
 8003cae:	83          	.byte	0x83
 8003caf:	00          	.byte	0x00
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003cb0:	4a23      	ldr	r2, [pc, #140]	; (8003d40 <HAL_RCCEx_PeriphCLKConfig+0x514>)
 8003cb2:	6813      	ldr	r3, [r2, #0]
 8003cb4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003cb8:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 8003cba:	f7fd f897 	bl	8000dec <HAL_GetTick>
 8003cbe:	4607      	mov	r7, r0
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003cc0:	4b1f      	ldr	r3, [pc, #124]	; (8003d40 <HAL_RCCEx_PeriphCLKConfig+0x514>)
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	f413 7f80 	tst.w	r3, #256	; 0x100
 8003cc8:	d105      	bne.n	8003cd6 <HAL_RCCEx_PeriphCLKConfig+0x4aa>
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003cca:	f7fd f88f 	bl	8000dec <HAL_GetTick>
 8003cce:	1bc0      	subs	r0, r0, r7
 8003cd0:	2864      	cmp	r0, #100	; 0x64
 8003cd2:	d9f5      	bls.n	8003cc0 <HAL_RCCEx_PeriphCLKConfig+0x494>
        ret = HAL_TIMEOUT;
 8003cd4:	2503      	movs	r5, #3
    if(ret == HAL_OK)
 8003cd6:	2d00      	cmp	r5, #0
 8003cd8:	d14f      	bne.n	8003d7a <HAL_RCCEx_PeriphCLKConfig+0x54e>
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8003cda:	4b18      	ldr	r3, [pc, #96]	; (8003d3c <HAL_RCCEx_PeriphCLKConfig+0x510>)
 8003cdc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003cde:	f8d4 20b0 	ldr.w	r2, [r4, #176]	; 0xb0
 8003ce2:	4053      	eors	r3, r2
 8003ce4:	f413 7f40 	tst.w	r3, #768	; 0x300
 8003ce8:	d00c      	beq.n	8003d04 <HAL_RCCEx_PeriphCLKConfig+0x4d8>
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003cea:	4b14      	ldr	r3, [pc, #80]	; (8003d3c <HAL_RCCEx_PeriphCLKConfig+0x510>)
 8003cec:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003cee:	f422 7240 	bic.w	r2, r2, #768	; 0x300
        __HAL_RCC_BACKUPRESET_FORCE();
 8003cf2:	6f19      	ldr	r1, [r3, #112]	; 0x70
 8003cf4:	f441 3180 	orr.w	r1, r1, #65536	; 0x10000
 8003cf8:	6719      	str	r1, [r3, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003cfa:	6f19      	ldr	r1, [r3, #112]	; 0x70
 8003cfc:	f421 3180 	bic.w	r1, r1, #65536	; 0x10000
 8003d00:	6719      	str	r1, [r3, #112]	; 0x70
        RCC->BDCR = tmpreg;
 8003d02:	671a      	str	r2, [r3, #112]	; 0x70
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8003d04:	f8d4 30b0 	ldr.w	r3, [r4, #176]	; 0xb0
 8003d08:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003d0c:	d01a      	beq.n	8003d44 <HAL_RCCEx_PeriphCLKConfig+0x518>
      if(ret == HAL_OK)
 8003d0e:	2d00      	cmp	r5, #0
 8003d10:	d135      	bne.n	8003d7e <HAL_RCCEx_PeriphCLKConfig+0x552>
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003d12:	f8d4 30b0 	ldr.w	r3, [r4, #176]	; 0xb0
 8003d16:	f403 7240 	and.w	r2, r3, #768	; 0x300
 8003d1a:	f5b2 7f40 	cmp.w	r2, #768	; 0x300
 8003d1e:	d022      	beq.n	8003d66 <HAL_RCCEx_PeriphCLKConfig+0x53a>
 8003d20:	4a06      	ldr	r2, [pc, #24]	; (8003d3c <HAL_RCCEx_PeriphCLKConfig+0x510>)
 8003d22:	6913      	ldr	r3, [r2, #16]
 8003d24:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8003d28:	6113      	str	r3, [r2, #16]
 8003d2a:	4904      	ldr	r1, [pc, #16]	; (8003d3c <HAL_RCCEx_PeriphCLKConfig+0x510>)
 8003d2c:	6f0b      	ldr	r3, [r1, #112]	; 0x70
 8003d2e:	f8d4 20b0 	ldr.w	r2, [r4, #176]	; 0xb0
 8003d32:	f3c2 020b 	ubfx	r2, r2, #0, #12
 8003d36:	4313      	orrs	r3, r2
 8003d38:	670b      	str	r3, [r1, #112]	; 0x70
 8003d3a:	e799      	b.n	8003c70 <HAL_RCCEx_PeriphCLKConfig+0x444>
 8003d3c:	58024400 	.word	0x58024400
 8003d40:	58024800 	.word	0x58024800
        tickstart = HAL_GetTick();
 8003d44:	f7fd f852 	bl	8000dec <HAL_GetTick>
 8003d48:	4607      	mov	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003d4a:	4b87      	ldr	r3, [pc, #540]	; (8003f68 <HAL_RCCEx_PeriphCLKConfig+0x73c>)
 8003d4c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d4e:	f013 0f02 	tst.w	r3, #2
 8003d52:	d1dc      	bne.n	8003d0e <HAL_RCCEx_PeriphCLKConfig+0x4e2>
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003d54:	f7fd f84a 	bl	8000dec <HAL_GetTick>
 8003d58:	1bc0      	subs	r0, r0, r7
 8003d5a:	f241 3388 	movw	r3, #5000	; 0x1388
 8003d5e:	4298      	cmp	r0, r3
 8003d60:	d9f3      	bls.n	8003d4a <HAL_RCCEx_PeriphCLKConfig+0x51e>
            ret = HAL_TIMEOUT;
 8003d62:	2503      	movs	r5, #3
 8003d64:	e7d3      	b.n	8003d0e <HAL_RCCEx_PeriphCLKConfig+0x4e2>
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003d66:	4880      	ldr	r0, [pc, #512]	; (8003f68 <HAL_RCCEx_PeriphCLKConfig+0x73c>)
 8003d68:	6902      	ldr	r2, [r0, #16]
 8003d6a:	f422 527c 	bic.w	r2, r2, #16128	; 0x3f00
 8003d6e:	497f      	ldr	r1, [pc, #508]	; (8003f6c <HAL_RCCEx_PeriphCLKConfig+0x740>)
 8003d70:	ea01 1313 	and.w	r3, r1, r3, lsr #4
 8003d74:	4313      	orrs	r3, r2
 8003d76:	6103      	str	r3, [r0, #16]
 8003d78:	e7d7      	b.n	8003d2a <HAL_RCCEx_PeriphCLKConfig+0x4fe>
      status = ret;
 8003d7a:	462e      	mov	r6, r5
 8003d7c:	e778      	b.n	8003c70 <HAL_RCCEx_PeriphCLKConfig+0x444>
        status = ret;
 8003d7e:	462e      	mov	r6, r5
 8003d80:	e776      	b.n	8003c70 <HAL_RCCEx_PeriphCLKConfig+0x444>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8003d82:	2101      	movs	r1, #1
 8003d84:	1d20      	adds	r0, r4, #4
 8003d86:	f7ff fc45 	bl	8003614 <RCCEx_PLL2_Config>
 8003d8a:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 8003d8c:	b9e5      	cbnz	r5, 8003dc8 <HAL_RCCEx_PeriphCLKConfig+0x59c>
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8003d8e:	4a76      	ldr	r2, [pc, #472]	; (8003f68 <HAL_RCCEx_PeriphCLKConfig+0x73c>)
 8003d90:	6d53      	ldr	r3, [r2, #84]	; 0x54
 8003d92:	f023 0338 	bic.w	r3, r3, #56	; 0x38
 8003d96:	6fa1      	ldr	r1, [r4, #120]	; 0x78
 8003d98:	430b      	orrs	r3, r1
 8003d9a:	6553      	str	r3, [r2, #84]	; 0x54
 8003d9c:	e008      	b.n	8003db0 <HAL_RCCEx_PeriphCLKConfig+0x584>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8003d9e:	2101      	movs	r1, #1
 8003da0:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8003da4:	f7ff fcbc 	bl	8003720 <RCCEx_PLL3_Config>
 8003da8:	4605      	mov	r5, r0
      break;
 8003daa:	e7ef      	b.n	8003d8c <HAL_RCCEx_PeriphCLKConfig+0x560>
    switch(PeriphClkInit->Usart16ClockSelection)
 8003dac:	2601      	movs	r6, #1
 8003dae:	4635      	mov	r5, r6
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8003db0:	6823      	ldr	r3, [r4, #0]
 8003db2:	f013 0f02 	tst.w	r3, #2
 8003db6:	d022      	beq.n	8003dfe <HAL_RCCEx_PeriphCLKConfig+0x5d2>
    switch(PeriphClkInit->Usart234578ClockSelection)
 8003db8:	6f63      	ldr	r3, [r4, #116]	; 0x74
 8003dba:	2b05      	cmp	r3, #5
 8003dbc:	d81b      	bhi.n	8003df6 <HAL_RCCEx_PeriphCLKConfig+0x5ca>
 8003dbe:	e8df f003 	tbb	[pc, r3]
 8003dc2:	050a      	.short	0x050a
 8003dc4:	0a0a0a13 	.word	0x0a0a0a13
 8003dc8:	462e      	mov	r6, r5
 8003dca:	e7f1      	b.n	8003db0 <HAL_RCCEx_PeriphCLKConfig+0x584>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8003dcc:	2101      	movs	r1, #1
 8003dce:	1d20      	adds	r0, r4, #4
 8003dd0:	f7ff fc20 	bl	8003614 <RCCEx_PLL2_Config>
 8003dd4:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 8003dd6:	b98d      	cbnz	r5, 8003dfc <HAL_RCCEx_PeriphCLKConfig+0x5d0>
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8003dd8:	4a63      	ldr	r2, [pc, #396]	; (8003f68 <HAL_RCCEx_PeriphCLKConfig+0x73c>)
 8003dda:	6d53      	ldr	r3, [r2, #84]	; 0x54
 8003ddc:	f023 0307 	bic.w	r3, r3, #7
 8003de0:	6f61      	ldr	r1, [r4, #116]	; 0x74
 8003de2:	430b      	orrs	r3, r1
 8003de4:	6553      	str	r3, [r2, #84]	; 0x54
 8003de6:	e00a      	b.n	8003dfe <HAL_RCCEx_PeriphCLKConfig+0x5d2>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8003de8:	2101      	movs	r1, #1
 8003dea:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8003dee:	f7ff fc97 	bl	8003720 <RCCEx_PLL3_Config>
 8003df2:	4605      	mov	r5, r0
      break;
 8003df4:	e7ef      	b.n	8003dd6 <HAL_RCCEx_PeriphCLKConfig+0x5aa>
    switch(PeriphClkInit->Usart234578ClockSelection)
 8003df6:	2601      	movs	r6, #1
 8003df8:	4635      	mov	r5, r6
 8003dfa:	e000      	b.n	8003dfe <HAL_RCCEx_PeriphCLKConfig+0x5d2>
 8003dfc:	462e      	mov	r6, r5
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003dfe:	6823      	ldr	r3, [r4, #0]
 8003e00:	f013 0f04 	tst.w	r3, #4
 8003e04:	d022      	beq.n	8003e4c <HAL_RCCEx_PeriphCLKConfig+0x620>
    switch(PeriphClkInit->Lpuart1ClockSelection)
 8003e06:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 8003e0a:	2b05      	cmp	r3, #5
 8003e0c:	d81a      	bhi.n	8003e44 <HAL_RCCEx_PeriphCLKConfig+0x618>
 8003e0e:	e8df f003 	tbb	[pc, r3]
 8003e12:	0308      	.short	0x0308
 8003e14:	08080812 	.word	0x08080812
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8003e18:	2101      	movs	r1, #1
 8003e1a:	1d20      	adds	r0, r4, #4
 8003e1c:	f7ff fbfa 	bl	8003614 <RCCEx_PLL2_Config>
 8003e20:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 8003e22:	b995      	cbnz	r5, 8003e4a <HAL_RCCEx_PeriphCLKConfig+0x61e>
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003e24:	4a50      	ldr	r2, [pc, #320]	; (8003f68 <HAL_RCCEx_PeriphCLKConfig+0x73c>)
 8003e26:	6d93      	ldr	r3, [r2, #88]	; 0x58
 8003e28:	f023 0307 	bic.w	r3, r3, #7
 8003e2c:	f8d4 1090 	ldr.w	r1, [r4, #144]	; 0x90
 8003e30:	430b      	orrs	r3, r1
 8003e32:	6593      	str	r3, [r2, #88]	; 0x58
 8003e34:	e00a      	b.n	8003e4c <HAL_RCCEx_PeriphCLKConfig+0x620>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8003e36:	2101      	movs	r1, #1
 8003e38:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8003e3c:	f7ff fc70 	bl	8003720 <RCCEx_PLL3_Config>
 8003e40:	4605      	mov	r5, r0
      break;
 8003e42:	e7ee      	b.n	8003e22 <HAL_RCCEx_PeriphCLKConfig+0x5f6>
    switch(PeriphClkInit->Lpuart1ClockSelection)
 8003e44:	2601      	movs	r6, #1
 8003e46:	4635      	mov	r5, r6
 8003e48:	e000      	b.n	8003e4c <HAL_RCCEx_PeriphCLKConfig+0x620>
 8003e4a:	462e      	mov	r6, r5
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8003e4c:	6823      	ldr	r3, [r4, #0]
 8003e4e:	f013 0f20 	tst.w	r3, #32
 8003e52:	d027      	beq.n	8003ea4 <HAL_RCCEx_PeriphCLKConfig+0x678>
    switch(PeriphClkInit->Lptim1ClockSelection)
 8003e54:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
 8003e58:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003e5c:	d040      	beq.n	8003ee0 <HAL_RCCEx_PeriphCLKConfig+0x6b4>
 8003e5e:	d816      	bhi.n	8003e8e <HAL_RCCEx_PeriphCLKConfig+0x662>
 8003e60:	b13b      	cbz	r3, 8003e72 <HAL_RCCEx_PeriphCLKConfig+0x646>
 8003e62:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003e66:	d10f      	bne.n	8003e88 <HAL_RCCEx_PeriphCLKConfig+0x65c>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003e68:	2100      	movs	r1, #0
 8003e6a:	1d20      	adds	r0, r4, #4
 8003e6c:	f7ff fbd2 	bl	8003614 <RCCEx_PLL2_Config>
 8003e70:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 8003e72:	2d00      	cmp	r5, #0
 8003e74:	d13b      	bne.n	8003eee <HAL_RCCEx_PeriphCLKConfig+0x6c2>
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003e76:	4a3c      	ldr	r2, [pc, #240]	; (8003f68 <HAL_RCCEx_PeriphCLKConfig+0x73c>)
 8003e78:	6d53      	ldr	r3, [r2, #84]	; 0x54
 8003e7a:	f023 43e0 	bic.w	r3, r3, #1879048192	; 0x70000000
 8003e7e:	f8d4 108c 	ldr.w	r1, [r4, #140]	; 0x8c
 8003e82:	430b      	orrs	r3, r1
 8003e84:	6553      	str	r3, [r2, #84]	; 0x54
 8003e86:	e00d      	b.n	8003ea4 <HAL_RCCEx_PeriphCLKConfig+0x678>
    switch(PeriphClkInit->Lptim1ClockSelection)
 8003e88:	2601      	movs	r6, #1
 8003e8a:	4635      	mov	r5, r6
 8003e8c:	e00a      	b.n	8003ea4 <HAL_RCCEx_PeriphCLKConfig+0x678>
 8003e8e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003e92:	d0ee      	beq.n	8003e72 <HAL_RCCEx_PeriphCLKConfig+0x646>
 8003e94:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003e98:	d0eb      	beq.n	8003e72 <HAL_RCCEx_PeriphCLKConfig+0x646>
 8003e9a:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8003e9e:	d0e8      	beq.n	8003e72 <HAL_RCCEx_PeriphCLKConfig+0x646>
 8003ea0:	2601      	movs	r6, #1
 8003ea2:	4635      	mov	r5, r6
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8003ea4:	6823      	ldr	r3, [r4, #0]
 8003ea6:	f013 0f40 	tst.w	r3, #64	; 0x40
 8003eaa:	d030      	beq.n	8003f0e <HAL_RCCEx_PeriphCLKConfig+0x6e2>
    switch(PeriphClkInit->Lptim2ClockSelection)
 8003eac:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
 8003eb0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003eb4:	d04b      	beq.n	8003f4e <HAL_RCCEx_PeriphCLKConfig+0x722>
 8003eb6:	d81f      	bhi.n	8003ef8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>
 8003eb8:	b13b      	cbz	r3, 8003eca <HAL_RCCEx_PeriphCLKConfig+0x69e>
 8003eba:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003ebe:	d118      	bne.n	8003ef2 <HAL_RCCEx_PeriphCLKConfig+0x6c6>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003ec0:	2100      	movs	r1, #0
 8003ec2:	1d20      	adds	r0, r4, #4
 8003ec4:	f7ff fba6 	bl	8003614 <RCCEx_PLL2_Config>
 8003ec8:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 8003eca:	2d00      	cmp	r5, #0
 8003ecc:	d146      	bne.n	8003f5c <HAL_RCCEx_PeriphCLKConfig+0x730>
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003ece:	4a26      	ldr	r2, [pc, #152]	; (8003f68 <HAL_RCCEx_PeriphCLKConfig+0x73c>)
 8003ed0:	6d93      	ldr	r3, [r2, #88]	; 0x58
 8003ed2:	f423 53e0 	bic.w	r3, r3, #7168	; 0x1c00
 8003ed6:	f8d4 1098 	ldr.w	r1, [r4, #152]	; 0x98
 8003eda:	430b      	orrs	r3, r1
 8003edc:	6593      	str	r3, [r2, #88]	; 0x58
 8003ede:	e016      	b.n	8003f0e <HAL_RCCEx_PeriphCLKConfig+0x6e2>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8003ee0:	2102      	movs	r1, #2
 8003ee2:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8003ee6:	f7ff fc1b 	bl	8003720 <RCCEx_PLL3_Config>
 8003eea:	4605      	mov	r5, r0
      break;
 8003eec:	e7c1      	b.n	8003e72 <HAL_RCCEx_PeriphCLKConfig+0x646>
 8003eee:	462e      	mov	r6, r5
 8003ef0:	e7d8      	b.n	8003ea4 <HAL_RCCEx_PeriphCLKConfig+0x678>
    switch(PeriphClkInit->Lptim2ClockSelection)
 8003ef2:	2601      	movs	r6, #1
 8003ef4:	4635      	mov	r5, r6
 8003ef6:	e00a      	b.n	8003f0e <HAL_RCCEx_PeriphCLKConfig+0x6e2>
 8003ef8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003efc:	d0e5      	beq.n	8003eca <HAL_RCCEx_PeriphCLKConfig+0x69e>
 8003efe:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8003f02:	d0e2      	beq.n	8003eca <HAL_RCCEx_PeriphCLKConfig+0x69e>
 8003f04:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003f08:	d0df      	beq.n	8003eca <HAL_RCCEx_PeriphCLKConfig+0x69e>
 8003f0a:	2601      	movs	r6, #1
 8003f0c:	4635      	mov	r5, r6
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8003f0e:	6823      	ldr	r3, [r4, #0]
 8003f10:	f013 0f80 	tst.w	r3, #128	; 0x80
 8003f14:	d037      	beq.n	8003f86 <HAL_RCCEx_PeriphCLKConfig+0x75a>
    switch(PeriphClkInit->Lptim345ClockSelection)
 8003f16:	f8d4 309c 	ldr.w	r3, [r4, #156]	; 0x9c
 8003f1a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003f1e:	f000 80a2 	beq.w	8004066 <HAL_RCCEx_PeriphCLKConfig+0x83a>
 8003f22:	d825      	bhi.n	8003f70 <HAL_RCCEx_PeriphCLKConfig+0x744>
 8003f24:	b13b      	cbz	r3, 8003f36 <HAL_RCCEx_PeriphCLKConfig+0x70a>
 8003f26:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003f2a:	d119      	bne.n	8003f60 <HAL_RCCEx_PeriphCLKConfig+0x734>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003f2c:	2100      	movs	r1, #0
 8003f2e:	1d20      	adds	r0, r4, #4
 8003f30:	f7ff fb70 	bl	8003614 <RCCEx_PLL2_Config>
 8003f34:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 8003f36:	2d00      	cmp	r5, #0
 8003f38:	f040 809c 	bne.w	8004074 <HAL_RCCEx_PeriphCLKConfig+0x848>
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8003f3c:	4a0a      	ldr	r2, [pc, #40]	; (8003f68 <HAL_RCCEx_PeriphCLKConfig+0x73c>)
 8003f3e:	6d93      	ldr	r3, [r2, #88]	; 0x58
 8003f40:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8003f44:	f8d4 109c 	ldr.w	r1, [r4, #156]	; 0x9c
 8003f48:	430b      	orrs	r3, r1
 8003f4a:	6593      	str	r3, [r2, #88]	; 0x58
 8003f4c:	e01b      	b.n	8003f86 <HAL_RCCEx_PeriphCLKConfig+0x75a>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8003f4e:	2102      	movs	r1, #2
 8003f50:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8003f54:	f7ff fbe4 	bl	8003720 <RCCEx_PLL3_Config>
 8003f58:	4605      	mov	r5, r0
      break;
 8003f5a:	e7b6      	b.n	8003eca <HAL_RCCEx_PeriphCLKConfig+0x69e>
 8003f5c:	462e      	mov	r6, r5
 8003f5e:	e7d6      	b.n	8003f0e <HAL_RCCEx_PeriphCLKConfig+0x6e2>
    switch(PeriphClkInit->Lptim345ClockSelection)
 8003f60:	2601      	movs	r6, #1
 8003f62:	4635      	mov	r5, r6
 8003f64:	e00f      	b.n	8003f86 <HAL_RCCEx_PeriphCLKConfig+0x75a>
 8003f66:	bf00      	nop
 8003f68:	58024400 	.word	0x58024400
 8003f6c:	00ffffcf 	.word	0x00ffffcf
 8003f70:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003f74:	d0df      	beq.n	8003f36 <HAL_RCCEx_PeriphCLKConfig+0x70a>
 8003f76:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8003f7a:	d0dc      	beq.n	8003f36 <HAL_RCCEx_PeriphCLKConfig+0x70a>
 8003f7c:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8003f80:	d0d9      	beq.n	8003f36 <HAL_RCCEx_PeriphCLKConfig+0x70a>
 8003f82:	2601      	movs	r6, #1
 8003f84:	4635      	mov	r5, r6
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8003f86:	6823      	ldr	r3, [r4, #0]
 8003f88:	f013 0f08 	tst.w	r3, #8
 8003f8c:	d00c      	beq.n	8003fa8 <HAL_RCCEx_PeriphCLKConfig+0x77c>
    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 8003f8e:	f8d4 3080 	ldr.w	r3, [r4, #128]	; 0x80
 8003f92:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003f96:	d06f      	beq.n	8004078 <HAL_RCCEx_PeriphCLKConfig+0x84c>
      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8003f98:	4a8e      	ldr	r2, [pc, #568]	; (80041d4 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 8003f9a:	6d53      	ldr	r3, [r2, #84]	; 0x54
 8003f9c:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8003fa0:	f8d4 1080 	ldr.w	r1, [r4, #128]	; 0x80
 8003fa4:	430b      	orrs	r3, r1
 8003fa6:	6553      	str	r3, [r2, #84]	; 0x54
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8003fa8:	6823      	ldr	r3, [r4, #0]
 8003faa:	f013 0f10 	tst.w	r3, #16
 8003fae:	d00c      	beq.n	8003fca <HAL_RCCEx_PeriphCLKConfig+0x79e>
    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 8003fb0:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
 8003fb4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003fb8:	d067      	beq.n	800408a <HAL_RCCEx_PeriphCLKConfig+0x85e>
      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8003fba:	4a86      	ldr	r2, [pc, #536]	; (80041d4 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 8003fbc:	6d93      	ldr	r3, [r2, #88]	; 0x58
 8003fbe:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003fc2:	f8d4 1094 	ldr.w	r1, [r4, #148]	; 0x94
 8003fc6:	430b      	orrs	r3, r1
 8003fc8:	6593      	str	r3, [r2, #88]	; 0x58
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003fca:	6823      	ldr	r3, [r4, #0]
 8003fcc:	f413 2f00 	tst.w	r3, #524288	; 0x80000
 8003fd0:	d00b      	beq.n	8003fea <HAL_RCCEx_PeriphCLKConfig+0x7be>
    switch(PeriphClkInit->AdcClockSelection)
 8003fd2:	f8d4 30a0 	ldr.w	r3, [r4, #160]	; 0xa0
 8003fd6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003fda:	d06e      	beq.n	80040ba <HAL_RCCEx_PeriphCLKConfig+0x88e>
 8003fdc:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003fe0:	d061      	beq.n	80040a6 <HAL_RCCEx_PeriphCLKConfig+0x87a>
 8003fe2:	2b00      	cmp	r3, #0
 8003fe4:	d05a      	beq.n	800409c <HAL_RCCEx_PeriphCLKConfig+0x870>
 8003fe6:	2601      	movs	r6, #1
 8003fe8:	4635      	mov	r5, r6
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8003fea:	6823      	ldr	r3, [r4, #0]
 8003fec:	f413 2f80 	tst.w	r3, #262144	; 0x40000
 8003ff0:	d00c      	beq.n	800400c <HAL_RCCEx_PeriphCLKConfig+0x7e0>
    switch(PeriphClkInit->UsbClockSelection)
 8003ff2:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
 8003ff6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003ffa:	d076      	beq.n	80040ea <HAL_RCCEx_PeriphCLKConfig+0x8be>
 8003ffc:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8004000:	d069      	beq.n	80040d6 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
 8004002:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004006:	d061      	beq.n	80040cc <HAL_RCCEx_PeriphCLKConfig+0x8a0>
 8004008:	2601      	movs	r6, #1
 800400a:	4635      	mov	r5, r6
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800400c:	6823      	ldr	r3, [r4, #0]
 800400e:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 8004012:	d007      	beq.n	8004024 <HAL_RCCEx_PeriphCLKConfig+0x7f8>
    switch(PeriphClkInit->SdmmcClockSelection)
 8004014:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8004016:	2b00      	cmp	r3, #0
 8004018:	d070      	beq.n	80040fc <HAL_RCCEx_PeriphCLKConfig+0x8d0>
 800401a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800401e:	d07b      	beq.n	8004118 <HAL_RCCEx_PeriphCLKConfig+0x8ec>
 8004020:	2601      	movs	r6, #1
 8004022:	4635      	mov	r5, r6
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8004024:	6823      	ldr	r3, [r4, #0]
 8004026:	f013 5f00 	tst.w	r3, #536870912	; 0x20000000
 800402a:	d17d      	bne.n	8004128 <HAL_RCCEx_PeriphCLKConfig+0x8fc>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800402c:	6823      	ldr	r3, [r4, #0]
 800402e:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8004032:	f000 8086 	beq.w	8004142 <HAL_RCCEx_PeriphCLKConfig+0x916>
    switch(PeriphClkInit->RngClockSelection)
 8004036:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
 8004038:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800403c:	f000 80ba 	beq.w	80041b4 <HAL_RCCEx_PeriphCLKConfig+0x988>
 8004040:	d97c      	bls.n	800413c <HAL_RCCEx_PeriphCLKConfig+0x910>
 8004042:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004046:	d003      	beq.n	8004050 <HAL_RCCEx_PeriphCLKConfig+0x824>
 8004048:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800404c:	f040 80b0 	bne.w	80041b0 <HAL_RCCEx_PeriphCLKConfig+0x984>
    if(ret == HAL_OK)
 8004050:	2d00      	cmp	r5, #0
 8004052:	f040 80b5 	bne.w	80041c0 <HAL_RCCEx_PeriphCLKConfig+0x994>
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004056:	4a5f      	ldr	r2, [pc, #380]	; (80041d4 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 8004058:	6d53      	ldr	r3, [r2, #84]	; 0x54
 800405a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800405e:	6fe1      	ldr	r1, [r4, #124]	; 0x7c
 8004060:	430b      	orrs	r3, r1
 8004062:	6553      	str	r3, [r2, #84]	; 0x54
 8004064:	e06d      	b.n	8004142 <HAL_RCCEx_PeriphCLKConfig+0x916>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8004066:	2102      	movs	r1, #2
 8004068:	f104 0024 	add.w	r0, r4, #36	; 0x24
 800406c:	f7ff fb58 	bl	8003720 <RCCEx_PLL3_Config>
 8004070:	4605      	mov	r5, r0
      break;
 8004072:	e760      	b.n	8003f36 <HAL_RCCEx_PeriphCLKConfig+0x70a>
 8004074:	462e      	mov	r6, r5
 8004076:	e786      	b.n	8003f86 <HAL_RCCEx_PeriphCLKConfig+0x75a>
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8004078:	2102      	movs	r1, #2
 800407a:	f104 0024 	add.w	r0, r4, #36	; 0x24
 800407e:	f7ff fb4f 	bl	8003720 <RCCEx_PLL3_Config>
 8004082:	2800      	cmp	r0, #0
 8004084:	d088      	beq.n	8003f98 <HAL_RCCEx_PeriphCLKConfig+0x76c>
          status = HAL_ERROR;
 8004086:	2601      	movs	r6, #1
 8004088:	e786      	b.n	8003f98 <HAL_RCCEx_PeriphCLKConfig+0x76c>
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 800408a:	2102      	movs	r1, #2
 800408c:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8004090:	f7ff fb46 	bl	8003720 <RCCEx_PLL3_Config>
 8004094:	2800      	cmp	r0, #0
 8004096:	d090      	beq.n	8003fba <HAL_RCCEx_PeriphCLKConfig+0x78e>
        status = HAL_ERROR;
 8004098:	2601      	movs	r6, #1
 800409a:	e78e      	b.n	8003fba <HAL_RCCEx_PeriphCLKConfig+0x78e>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800409c:	2100      	movs	r1, #0
 800409e:	1d20      	adds	r0, r4, #4
 80040a0:	f7ff fab8 	bl	8003614 <RCCEx_PLL2_Config>
 80040a4:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 80040a6:	b97d      	cbnz	r5, 80040c8 <HAL_RCCEx_PeriphCLKConfig+0x89c>
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80040a8:	4a4a      	ldr	r2, [pc, #296]	; (80041d4 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 80040aa:	6d93      	ldr	r3, [r2, #88]	; 0x58
 80040ac:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 80040b0:	f8d4 10a0 	ldr.w	r1, [r4, #160]	; 0xa0
 80040b4:	430b      	orrs	r3, r1
 80040b6:	6593      	str	r3, [r2, #88]	; 0x58
 80040b8:	e797      	b.n	8003fea <HAL_RCCEx_PeriphCLKConfig+0x7be>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80040ba:	2102      	movs	r1, #2
 80040bc:	f104 0024 	add.w	r0, r4, #36	; 0x24
 80040c0:	f7ff fb2e 	bl	8003720 <RCCEx_PLL3_Config>
 80040c4:	4605      	mov	r5, r0
      break;
 80040c6:	e7ee      	b.n	80040a6 <HAL_RCCEx_PeriphCLKConfig+0x87a>
 80040c8:	462e      	mov	r6, r5
 80040ca:	e78e      	b.n	8003fea <HAL_RCCEx_PeriphCLKConfig+0x7be>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80040cc:	4a41      	ldr	r2, [pc, #260]	; (80041d4 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 80040ce:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 80040d0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80040d4:	62d3      	str	r3, [r2, #44]	; 0x2c
    if(ret == HAL_OK)
 80040d6:	b97d      	cbnz	r5, 80040f8 <HAL_RCCEx_PeriphCLKConfig+0x8cc>
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80040d8:	4a3e      	ldr	r2, [pc, #248]	; (80041d4 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 80040da:	6d53      	ldr	r3, [r2, #84]	; 0x54
 80040dc:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 80040e0:	f8d4 1084 	ldr.w	r1, [r4, #132]	; 0x84
 80040e4:	430b      	orrs	r3, r1
 80040e6:	6553      	str	r3, [r2, #84]	; 0x54
 80040e8:	e790      	b.n	800400c <HAL_RCCEx_PeriphCLKConfig+0x7e0>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80040ea:	2101      	movs	r1, #1
 80040ec:	f104 0024 	add.w	r0, r4, #36	; 0x24
 80040f0:	f7ff fb16 	bl	8003720 <RCCEx_PLL3_Config>
 80040f4:	4605      	mov	r5, r0
      break;
 80040f6:	e7ee      	b.n	80040d6 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
 80040f8:	462e      	mov	r6, r5
 80040fa:	e787      	b.n	800400c <HAL_RCCEx_PeriphCLKConfig+0x7e0>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80040fc:	4a35      	ldr	r2, [pc, #212]	; (80041d4 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 80040fe:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8004100:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004104:	62d3      	str	r3, [r2, #44]	; 0x2c
    if(ret == HAL_OK)
 8004106:	b96d      	cbnz	r5, 8004124 <HAL_RCCEx_PeriphCLKConfig+0x8f8>
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8004108:	4a32      	ldr	r2, [pc, #200]	; (80041d4 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 800410a:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 800410c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004110:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 8004112:	430b      	orrs	r3, r1
 8004114:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004116:	e785      	b.n	8004024 <HAL_RCCEx_PeriphCLKConfig+0x7f8>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8004118:	2102      	movs	r1, #2
 800411a:	1d20      	adds	r0, r4, #4
 800411c:	f7ff fa7a 	bl	8003614 <RCCEx_PLL2_Config>
 8004120:	4605      	mov	r5, r0
      break;
 8004122:	e7f0      	b.n	8004106 <HAL_RCCEx_PeriphCLKConfig+0x8da>
 8004124:	462e      	mov	r6, r5
 8004126:	e77d      	b.n	8004024 <HAL_RCCEx_PeriphCLKConfig+0x7f8>
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 8004128:	2102      	movs	r1, #2
 800412a:	f104 0024 	add.w	r0, r4, #36	; 0x24
 800412e:	f7ff faf7 	bl	8003720 <RCCEx_PLL3_Config>
 8004132:	2800      	cmp	r0, #0
 8004134:	f43f af7a 	beq.w	800402c <HAL_RCCEx_PeriphCLKConfig+0x800>
      status=HAL_ERROR;
 8004138:	2601      	movs	r6, #1
 800413a:	e777      	b.n	800402c <HAL_RCCEx_PeriphCLKConfig+0x800>
    switch(PeriphClkInit->RngClockSelection)
 800413c:	2b00      	cmp	r3, #0
 800413e:	d087      	beq.n	8004050 <HAL_RCCEx_PeriphCLKConfig+0x824>
 8004140:	2601      	movs	r6, #1
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8004142:	6823      	ldr	r3, [r4, #0]
 8004144:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8004148:	d006      	beq.n	8004158 <HAL_RCCEx_PeriphCLKConfig+0x92c>
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800414a:	4a22      	ldr	r2, [pc, #136]	; (80041d4 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 800414c:	6d13      	ldr	r3, [r2, #80]	; 0x50
 800414e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8004152:	6f21      	ldr	r1, [r4, #112]	; 0x70
 8004154:	430b      	orrs	r3, r1
 8004156:	6513      	str	r3, [r2, #80]	; 0x50
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8004158:	6823      	ldr	r3, [r4, #0]
 800415a:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 800415e:	d007      	beq.n	8004170 <HAL_RCCEx_PeriphCLKConfig+0x944>
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8004160:	4a1c      	ldr	r2, [pc, #112]	; (80041d4 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 8004162:	6913      	ldr	r3, [r2, #16]
 8004164:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004168:	f8d4 10b4 	ldr.w	r1, [r4, #180]	; 0xb4
 800416c:	430b      	orrs	r3, r1
 800416e:	6113      	str	r3, [r2, #16]
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8004170:	6823      	ldr	r3, [r4, #0]
 8004172:	f413 1f00 	tst.w	r3, #2097152	; 0x200000
 8004176:	d006      	beq.n	8004186 <HAL_RCCEx_PeriphCLKConfig+0x95a>
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8004178:	4a16      	ldr	r2, [pc, #88]	; (80041d4 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 800417a:	6d13      	ldr	r3, [r2, #80]	; 0x50
 800417c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004180:	6ea1      	ldr	r1, [r4, #104]	; 0x68
 8004182:	430b      	orrs	r3, r1
 8004184:	6513      	str	r3, [r2, #80]	; 0x50
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8004186:	6823      	ldr	r3, [r4, #0]
 8004188:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 800418c:	d009      	beq.n	80041a2 <HAL_RCCEx_PeriphCLKConfig+0x976>
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800418e:	4b11      	ldr	r3, [pc, #68]	; (80041d4 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 8004190:	691a      	ldr	r2, [r3, #16]
 8004192:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004196:	611a      	str	r2, [r3, #16]
 8004198:	691a      	ldr	r2, [r3, #16]
 800419a:	f8d4 10b8 	ldr.w	r1, [r4, #184]	; 0xb8
 800419e:	430a      	orrs	r2, r1
 80041a0:	611a      	str	r2, [r3, #16]
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 80041a2:	6823      	ldr	r3, [r4, #0]
 80041a4:	2b00      	cmp	r3, #0
 80041a6:	db0d      	blt.n	80041c4 <HAL_RCCEx_PeriphCLKConfig+0x998>
  if (status == HAL_OK)
 80041a8:	b106      	cbz	r6, 80041ac <HAL_RCCEx_PeriphCLKConfig+0x980>
  return HAL_ERROR;
 80041aa:	2601      	movs	r6, #1
}
 80041ac:	4630      	mov	r0, r6
 80041ae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    switch(PeriphClkInit->RngClockSelection)
 80041b0:	2601      	movs	r6, #1
 80041b2:	e7c6      	b.n	8004142 <HAL_RCCEx_PeriphCLKConfig+0x916>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80041b4:	4a07      	ldr	r2, [pc, #28]	; (80041d4 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 80041b6:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 80041b8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80041bc:	62d3      	str	r3, [r2, #44]	; 0x2c
      break;
 80041be:	e747      	b.n	8004050 <HAL_RCCEx_PeriphCLKConfig+0x824>
 80041c0:	462e      	mov	r6, r5
 80041c2:	e7be      	b.n	8004142 <HAL_RCCEx_PeriphCLKConfig+0x916>
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 80041c4:	4a03      	ldr	r2, [pc, #12]	; (80041d4 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 80041c6:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 80041c8:	f023 5340 	bic.w	r3, r3, #805306368	; 0x30000000
 80041cc:	6d21      	ldr	r1, [r4, #80]	; 0x50
 80041ce:	430b      	orrs	r3, r1
 80041d0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80041d2:	e7e9      	b.n	80041a8 <HAL_RCCEx_PeriphCLKConfig+0x97c>
 80041d4:	58024400 	.word	0x58024400

080041d8 <HAL_RCCEx_GetD3PCLK1Freq>:
{
 80041d8:	b508      	push	{r3, lr}
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 80041da:	f7ff f9ab 	bl	8003534 <HAL_RCC_GetHCLKFreq>
 80041de:	4b05      	ldr	r3, [pc, #20]	; (80041f4 <HAL_RCCEx_GetD3PCLK1Freq+0x1c>)
 80041e0:	6a1b      	ldr	r3, [r3, #32]
 80041e2:	f3c3 1302 	ubfx	r3, r3, #4, #3
 80041e6:	4a04      	ldr	r2, [pc, #16]	; (80041f8 <HAL_RCCEx_GetD3PCLK1Freq+0x20>)
 80041e8:	5cd3      	ldrb	r3, [r2, r3]
 80041ea:	f003 031f 	and.w	r3, r3, #31
}
 80041ee:	40d8      	lsrs	r0, r3
 80041f0:	bd08      	pop	{r3, pc}
 80041f2:	bf00      	nop
 80041f4:	58024400 	.word	0x58024400
 80041f8:	080095c0 	.word	0x080095c0

080041fc <HAL_RCCEx_GetPLL2ClockFreq>:
{
 80041fc:	b430      	push	{r4, r5}
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80041fe:	4a78      	ldr	r2, [pc, #480]	; (80043e0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>)
 8004200:	6a91      	ldr	r1, [r2, #40]	; 0x28
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 8004202:	6a94      	ldr	r4, [r2, #40]	; 0x28
 8004204:	f3c4 3505 	ubfx	r5, r4, #12, #6
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8004208:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 800420a:	f3c3 1300 	ubfx	r3, r3, #4, #1
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 800420e:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8004210:	f3c2 02cc 	ubfx	r2, r2, #3, #13
 8004214:	fb03 f302 	mul.w	r3, r3, r2
  if (pll2m != 0U)
 8004218:	f414 3f7c 	tst.w	r4, #258048	; 0x3f000
 800421c:	f000 80da 	beq.w	80043d4 <HAL_RCCEx_GetPLL2ClockFreq+0x1d8>
 8004220:	f001 0103 	and.w	r1, r1, #3
 8004224:	ee07 3a90 	vmov	s15, r3
 8004228:	eef8 7a67 	vcvt.f32.u32	s15, s15
    switch (pllsource)
 800422c:	2901      	cmp	r1, #1
 800422e:	d066      	beq.n	80042fe <HAL_RCCEx_GetPLL2ClockFreq+0x102>
 8004230:	2902      	cmp	r1, #2
 8004232:	f000 80b2 	beq.w	800439a <HAL_RCCEx_GetPLL2ClockFreq+0x19e>
 8004236:	b1e1      	cbz	r1, 8004272 <HAL_RCCEx_GetPLL2ClockFreq+0x76>
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8004238:	ee07 5a10 	vmov	s14, r5
 800423c:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 8004240:	ed9f 6a68 	vldr	s12, [pc, #416]	; 80043e4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e8>
 8004244:	eec6 6a07 	vdiv.f32	s13, s12, s14
 8004248:	4b65      	ldr	r3, [pc, #404]	; (80043e0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>)
 800424a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800424c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004250:	ee07 3a10 	vmov	s14, r3
 8004254:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 8004258:	ed9f 6a63 	vldr	s12, [pc, #396]	; 80043e8 <HAL_RCCEx_GetPLL2ClockFreq+0x1ec>
 800425c:	ee67 7a86 	vmul.f32	s15, s15, s12
 8004260:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004264:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004268:	ee77 7a87 	vadd.f32	s15, s15, s14
 800426c:	ee66 6aa7 	vmul.f32	s13, s13, s15
      break;
 8004270:	e061      	b.n	8004336 <HAL_RCCEx_GetPLL2ClockFreq+0x13a>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004272:	4b5b      	ldr	r3, [pc, #364]	; (80043e0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>)
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	f013 0f20 	tst.w	r3, #32
 800427a:	d023      	beq.n	80042c4 <HAL_RCCEx_GetPLL2ClockFreq+0xc8>
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800427c:	4958      	ldr	r1, [pc, #352]	; (80043e0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>)
 800427e:	680a      	ldr	r2, [r1, #0]
 8004280:	f3c2 02c1 	ubfx	r2, r2, #3, #2
 8004284:	4b59      	ldr	r3, [pc, #356]	; (80043ec <HAL_RCCEx_GetPLL2ClockFreq+0x1f0>)
 8004286:	40d3      	lsrs	r3, r2
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8004288:	ee07 3a10 	vmov	s14, r3
 800428c:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 8004290:	ee06 5a90 	vmov	s13, r5
 8004294:	eeb8 6a66 	vcvt.f32.u32	s12, s13
 8004298:	eec7 6a06 	vdiv.f32	s13, s14, s12
 800429c:	6b8b      	ldr	r3, [r1, #56]	; 0x38
 800429e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80042a2:	ee07 3a10 	vmov	s14, r3
 80042a6:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 80042aa:	ed9f 6a4f 	vldr	s12, [pc, #316]	; 80043e8 <HAL_RCCEx_GetPLL2ClockFreq+0x1ec>
 80042ae:	ee67 7a86 	vmul.f32	s15, s15, s12
 80042b2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80042b6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80042ba:	ee77 7a87 	vadd.f32	s15, s15, s14
 80042be:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80042c2:	e038      	b.n	8004336 <HAL_RCCEx_GetPLL2ClockFreq+0x13a>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80042c4:	ee07 5a10 	vmov	s14, r5
 80042c8:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 80042cc:	ed9f 6a48 	vldr	s12, [pc, #288]	; 80043f0 <HAL_RCCEx_GetPLL2ClockFreq+0x1f4>
 80042d0:	eec6 6a07 	vdiv.f32	s13, s12, s14
 80042d4:	4b42      	ldr	r3, [pc, #264]	; (80043e0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>)
 80042d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80042d8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80042dc:	ee07 3a10 	vmov	s14, r3
 80042e0:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 80042e4:	ed9f 6a40 	vldr	s12, [pc, #256]	; 80043e8 <HAL_RCCEx_GetPLL2ClockFreq+0x1ec>
 80042e8:	ee67 7a86 	vmul.f32	s15, s15, s12
 80042ec:	ee77 7a27 	vadd.f32	s15, s14, s15
 80042f0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80042f4:	ee77 7a87 	vadd.f32	s15, s15, s14
 80042f8:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80042fc:	e01b      	b.n	8004336 <HAL_RCCEx_GetPLL2ClockFreq+0x13a>
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80042fe:	ee07 5a10 	vmov	s14, r5
 8004302:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 8004306:	ed9f 6a37 	vldr	s12, [pc, #220]	; 80043e4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e8>
 800430a:	eec6 6a07 	vdiv.f32	s13, s12, s14
 800430e:	4b34      	ldr	r3, [pc, #208]	; (80043e0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>)
 8004310:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004312:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004316:	ee07 3a10 	vmov	s14, r3
 800431a:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 800431e:	ed9f 6a32 	vldr	s12, [pc, #200]	; 80043e8 <HAL_RCCEx_GetPLL2ClockFreq+0x1ec>
 8004322:	ee67 7a86 	vmul.f32	s15, s15, s12
 8004326:	ee77 7a27 	vadd.f32	s15, s14, s15
 800432a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800432e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8004332:	ee66 6aa7 	vmul.f32	s13, s13, s15
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 8004336:	4a2a      	ldr	r2, [pc, #168]	; (80043e0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>)
 8004338:	6b93      	ldr	r3, [r2, #56]	; 0x38
 800433a:	f3c3 2346 	ubfx	r3, r3, #9, #7
 800433e:	ee07 3a10 	vmov	s14, r3
 8004342:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 8004346:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 800434a:	ee37 7a06 	vadd.f32	s14, s14, s12
 800434e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004352:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004356:	edc0 7a00 	vstr	s15, [r0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 800435a:	6b93      	ldr	r3, [r2, #56]	; 0x38
 800435c:	f3c3 4306 	ubfx	r3, r3, #16, #7
 8004360:	ee07 3a10 	vmov	s14, r3
 8004364:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 8004368:	ee37 7a06 	vadd.f32	s14, s14, s12
 800436c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004370:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004374:	edc0 7a01 	vstr	s15, [r0, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 8004378:	6b93      	ldr	r3, [r2, #56]	; 0x38
 800437a:	f3c3 6306 	ubfx	r3, r3, #24, #7
 800437e:	ee07 3a90 	vmov	s15, r3
 8004382:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004386:	ee77 7a86 	vadd.f32	s15, s15, s12
 800438a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800438e:	eebc 7ac7 	vcvt.u32.f32	s14, s14
 8004392:	ed80 7a02 	vstr	s14, [r0, #8]
}
 8004396:	bc30      	pop	{r4, r5}
 8004398:	4770      	bx	lr
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800439a:	ee07 5a10 	vmov	s14, r5
 800439e:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 80043a2:	ed9f 6a14 	vldr	s12, [pc, #80]	; 80043f4 <HAL_RCCEx_GetPLL2ClockFreq+0x1f8>
 80043a6:	eec6 6a07 	vdiv.f32	s13, s12, s14
 80043aa:	4b0d      	ldr	r3, [pc, #52]	; (80043e0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>)
 80043ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80043ae:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80043b2:	ee07 3a10 	vmov	s14, r3
 80043b6:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 80043ba:	ed9f 6a0b 	vldr	s12, [pc, #44]	; 80043e8 <HAL_RCCEx_GetPLL2ClockFreq+0x1ec>
 80043be:	ee67 7a86 	vmul.f32	s15, s15, s12
 80043c2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80043c6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80043ca:	ee77 7a87 	vadd.f32	s15, s15, s14
 80043ce:	ee66 6aa7 	vmul.f32	s13, s13, s15
      break;
 80043d2:	e7b0      	b.n	8004336 <HAL_RCCEx_GetPLL2ClockFreq+0x13a>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 80043d4:	2300      	movs	r3, #0
 80043d6:	6003      	str	r3, [r0, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 80043d8:	6043      	str	r3, [r0, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 80043da:	6083      	str	r3, [r0, #8]
}
 80043dc:	e7db      	b.n	8004396 <HAL_RCCEx_GetPLL2ClockFreq+0x19a>
 80043de:	bf00      	nop
 80043e0:	58024400 	.word	0x58024400
 80043e4:	4a742400 	.word	0x4a742400
 80043e8:	39000000 	.word	0x39000000
 80043ec:	03d09000 	.word	0x03d09000
 80043f0:	4c742400 	.word	0x4c742400
 80043f4:	4af42400 	.word	0x4af42400

080043f8 <HAL_RCCEx_GetPLL3ClockFreq>:
{
 80043f8:	b430      	push	{r4, r5}
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80043fa:	4a78      	ldr	r2, [pc, #480]	; (80045dc <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>)
 80043fc:	6a91      	ldr	r1, [r2, #40]	; 0x28
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 80043fe:	6a94      	ldr	r4, [r2, #40]	; 0x28
 8004400:	f3c4 5505 	ubfx	r5, r4, #20, #6
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8004404:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8004406:	f3c3 2300 	ubfx	r3, r3, #8, #1
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 800440a:	6c52      	ldr	r2, [r2, #68]	; 0x44
 800440c:	f3c2 02cc 	ubfx	r2, r2, #3, #13
 8004410:	fb03 f302 	mul.w	r3, r3, r2
  if (pll3m != 0U)
 8004414:	f014 7f7c 	tst.w	r4, #66060288	; 0x3f00000
 8004418:	f000 80da 	beq.w	80045d0 <HAL_RCCEx_GetPLL3ClockFreq+0x1d8>
 800441c:	f001 0103 	and.w	r1, r1, #3
 8004420:	ee07 3a90 	vmov	s15, r3
 8004424:	eef8 7a67 	vcvt.f32.u32	s15, s15
    switch (pllsource)
 8004428:	2901      	cmp	r1, #1
 800442a:	d066      	beq.n	80044fa <HAL_RCCEx_GetPLL3ClockFreq+0x102>
 800442c:	2902      	cmp	r1, #2
 800442e:	f000 80b2 	beq.w	8004596 <HAL_RCCEx_GetPLL3ClockFreq+0x19e>
 8004432:	b1e1      	cbz	r1, 800446e <HAL_RCCEx_GetPLL3ClockFreq+0x76>
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8004434:	ee07 5a10 	vmov	s14, r5
 8004438:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 800443c:	ed9f 6a68 	vldr	s12, [pc, #416]	; 80045e0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e8>
 8004440:	eec6 6a07 	vdiv.f32	s13, s12, s14
 8004444:	4b65      	ldr	r3, [pc, #404]	; (80045dc <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>)
 8004446:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004448:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800444c:	ee07 3a10 	vmov	s14, r3
 8004450:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 8004454:	ed9f 6a63 	vldr	s12, [pc, #396]	; 80045e4 <HAL_RCCEx_GetPLL3ClockFreq+0x1ec>
 8004458:	ee67 7a86 	vmul.f32	s15, s15, s12
 800445c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004460:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004464:	ee77 7a87 	vadd.f32	s15, s15, s14
 8004468:	ee66 6aa7 	vmul.f32	s13, s13, s15
      break;
 800446c:	e061      	b.n	8004532 <HAL_RCCEx_GetPLL3ClockFreq+0x13a>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800446e:	4b5b      	ldr	r3, [pc, #364]	; (80045dc <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>)
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	f013 0f20 	tst.w	r3, #32
 8004476:	d023      	beq.n	80044c0 <HAL_RCCEx_GetPLL3ClockFreq+0xc8>
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8004478:	4958      	ldr	r1, [pc, #352]	; (80045dc <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>)
 800447a:	680a      	ldr	r2, [r1, #0]
 800447c:	f3c2 02c1 	ubfx	r2, r2, #3, #2
 8004480:	4b59      	ldr	r3, [pc, #356]	; (80045e8 <HAL_RCCEx_GetPLL3ClockFreq+0x1f0>)
 8004482:	40d3      	lsrs	r3, r2
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8004484:	ee07 3a10 	vmov	s14, r3
 8004488:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 800448c:	ee06 5a90 	vmov	s13, r5
 8004490:	eeb8 6a66 	vcvt.f32.u32	s12, s13
 8004494:	eec7 6a06 	vdiv.f32	s13, s14, s12
 8004498:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800449a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800449e:	ee07 3a10 	vmov	s14, r3
 80044a2:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 80044a6:	ed9f 6a4f 	vldr	s12, [pc, #316]	; 80045e4 <HAL_RCCEx_GetPLL3ClockFreq+0x1ec>
 80044aa:	ee67 7a86 	vmul.f32	s15, s15, s12
 80044ae:	ee77 7a27 	vadd.f32	s15, s14, s15
 80044b2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80044b6:	ee77 7a87 	vadd.f32	s15, s15, s14
 80044ba:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80044be:	e038      	b.n	8004532 <HAL_RCCEx_GetPLL3ClockFreq+0x13a>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80044c0:	ee07 5a10 	vmov	s14, r5
 80044c4:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 80044c8:	ed9f 6a48 	vldr	s12, [pc, #288]	; 80045ec <HAL_RCCEx_GetPLL3ClockFreq+0x1f4>
 80044cc:	eec6 6a07 	vdiv.f32	s13, s12, s14
 80044d0:	4b42      	ldr	r3, [pc, #264]	; (80045dc <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>)
 80044d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044d4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80044d8:	ee07 3a10 	vmov	s14, r3
 80044dc:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 80044e0:	ed9f 6a40 	vldr	s12, [pc, #256]	; 80045e4 <HAL_RCCEx_GetPLL3ClockFreq+0x1ec>
 80044e4:	ee67 7a86 	vmul.f32	s15, s15, s12
 80044e8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80044ec:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80044f0:	ee77 7a87 	vadd.f32	s15, s15, s14
 80044f4:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80044f8:	e01b      	b.n	8004532 <HAL_RCCEx_GetPLL3ClockFreq+0x13a>
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80044fa:	ee07 5a10 	vmov	s14, r5
 80044fe:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 8004502:	ed9f 6a37 	vldr	s12, [pc, #220]	; 80045e0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e8>
 8004506:	eec6 6a07 	vdiv.f32	s13, s12, s14
 800450a:	4b34      	ldr	r3, [pc, #208]	; (80045dc <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>)
 800450c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800450e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004512:	ee07 3a10 	vmov	s14, r3
 8004516:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 800451a:	ed9f 6a32 	vldr	s12, [pc, #200]	; 80045e4 <HAL_RCCEx_GetPLL3ClockFreq+0x1ec>
 800451e:	ee67 7a86 	vmul.f32	s15, s15, s12
 8004522:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004526:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800452a:	ee77 7a87 	vadd.f32	s15, s15, s14
 800452e:	ee66 6aa7 	vmul.f32	s13, s13, s15
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 8004532:	4a2a      	ldr	r2, [pc, #168]	; (80045dc <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>)
 8004534:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8004536:	f3c3 2346 	ubfx	r3, r3, #9, #7
 800453a:	ee07 3a10 	vmov	s14, r3
 800453e:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 8004542:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 8004546:	ee37 7a06 	vadd.f32	s14, s14, s12
 800454a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800454e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004552:	edc0 7a00 	vstr	s15, [r0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 8004556:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8004558:	f3c3 4306 	ubfx	r3, r3, #16, #7
 800455c:	ee07 3a10 	vmov	s14, r3
 8004560:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 8004564:	ee37 7a06 	vadd.f32	s14, s14, s12
 8004568:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800456c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004570:	edc0 7a01 	vstr	s15, [r0, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 8004574:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8004576:	f3c3 6306 	ubfx	r3, r3, #24, #7
 800457a:	ee07 3a90 	vmov	s15, r3
 800457e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004582:	ee77 7a86 	vadd.f32	s15, s15, s12
 8004586:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800458a:	eebc 7ac7 	vcvt.u32.f32	s14, s14
 800458e:	ed80 7a02 	vstr	s14, [r0, #8]
}
 8004592:	bc30      	pop	{r4, r5}
 8004594:	4770      	bx	lr
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8004596:	ee07 5a10 	vmov	s14, r5
 800459a:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 800459e:	ed9f 6a14 	vldr	s12, [pc, #80]	; 80045f0 <HAL_RCCEx_GetPLL3ClockFreq+0x1f8>
 80045a2:	eec6 6a07 	vdiv.f32	s13, s12, s14
 80045a6:	4b0d      	ldr	r3, [pc, #52]	; (80045dc <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>)
 80045a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045aa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80045ae:	ee07 3a10 	vmov	s14, r3
 80045b2:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 80045b6:	ed9f 6a0b 	vldr	s12, [pc, #44]	; 80045e4 <HAL_RCCEx_GetPLL3ClockFreq+0x1ec>
 80045ba:	ee67 7a86 	vmul.f32	s15, s15, s12
 80045be:	ee77 7a27 	vadd.f32	s15, s14, s15
 80045c2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80045c6:	ee77 7a87 	vadd.f32	s15, s15, s14
 80045ca:	ee66 6aa7 	vmul.f32	s13, s13, s15
      break;
 80045ce:	e7b0      	b.n	8004532 <HAL_RCCEx_GetPLL3ClockFreq+0x13a>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 80045d0:	2300      	movs	r3, #0
 80045d2:	6003      	str	r3, [r0, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 80045d4:	6043      	str	r3, [r0, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 80045d6:	6083      	str	r3, [r0, #8]
}
 80045d8:	e7db      	b.n	8004592 <HAL_RCCEx_GetPLL3ClockFreq+0x19a>
 80045da:	bf00      	nop
 80045dc:	58024400 	.word	0x58024400
 80045e0:	4a742400 	.word	0x4a742400
 80045e4:	39000000 	.word	0x39000000
 80045e8:	03d09000 	.word	0x03d09000
 80045ec:	4c742400 	.word	0x4c742400
 80045f0:	4af42400 	.word	0x4af42400

080045f4 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 80045f4:	b538      	push	{r3, r4, r5, lr}
 80045f6:	4604      	mov	r4, r0
  /* Clear RSF flag */
#if defined(RTC_ICSR_RSF)
  hrtc->Instance->ICSR &= (uint32_t)RTC_RSF_MASK;
#endif /* RTC_ICSR_RSF */
#if defined(RTC_ISR_RSF)
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 80045f8:	6802      	ldr	r2, [r0, #0]
 80045fa:	68d3      	ldr	r3, [r2, #12]
 80045fc:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004600:	60d3      	str	r3, [r2, #12]
#endif /* RTC_ISR_RSF */

  tickstart = HAL_GetTick();
 8004602:	f7fc fbf3 	bl	8000dec <HAL_GetTick>
 8004606:	4605      	mov	r5, r0
  /* Wait the registers to be synchronised */
#if defined(RTC_ICSR_RSF)
  while ((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
#endif /* RTC_ICSR_RSF */
#if defined(RTC_ISR_RSF)
    while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8004608:	6823      	ldr	r3, [r4, #0]
 800460a:	68db      	ldr	r3, [r3, #12]
 800460c:	f013 0f20 	tst.w	r3, #32
 8004610:	d107      	bne.n	8004622 <HAL_RTC_WaitForSynchro+0x2e>
#endif /* RTC_ISR_RSF */
    {
      if((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8004612:	f7fc fbeb 	bl	8000dec <HAL_GetTick>
 8004616:	1b40      	subs	r0, r0, r5
 8004618:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 800461c:	d9f4      	bls.n	8004608 <HAL_RTC_WaitForSynchro+0x14>
      {
        return HAL_TIMEOUT;
 800461e:	2003      	movs	r0, #3
 8004620:	e000      	b.n	8004624 <HAL_RTC_WaitForSynchro+0x30>
      }
    }

  return HAL_OK;
 8004622:	2000      	movs	r0, #0
}
 8004624:	bd38      	pop	{r3, r4, r5, pc}

08004626 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8004626:	b570      	push	{r4, r5, r6, lr}
      }
    }
  }
#endif /* RTC_ICSR_INITF */
#if defined(RTC_ISR_INITF)
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8004628:	6803      	ldr	r3, [r0, #0]
 800462a:	68da      	ldr	r2, [r3, #12]
 800462c:	f012 0f40 	tst.w	r2, #64	; 0x40
 8004630:	d002      	beq.n	8004638 <RTC_EnterInitMode+0x12>
  HAL_StatusTypeDef status = HAL_OK;
 8004632:	2600      	movs	r6, #0
    }
  }
#endif /* RTC_ISR_INITF */

  return status;
}
 8004634:	4630      	mov	r0, r6
 8004636:	bd70      	pop	{r4, r5, r6, pc}
 8004638:	4604      	mov	r4, r0
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 800463a:	f04f 32ff 	mov.w	r2, #4294967295
 800463e:	60da      	str	r2, [r3, #12]
    tickstart = HAL_GetTick();
 8004640:	f7fc fbd4 	bl	8000dec <HAL_GetTick>
 8004644:	4605      	mov	r5, r0
  HAL_StatusTypeDef status = HAL_OK;
 8004646:	2600      	movs	r6, #0
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8004648:	6823      	ldr	r3, [r4, #0]
 800464a:	68db      	ldr	r3, [r3, #12]
 800464c:	f013 0f40 	tst.w	r3, #64	; 0x40
 8004650:	d1f0      	bne.n	8004634 <RTC_EnterInitMode+0xe>
      if((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 8004652:	f7fc fbcb 	bl	8000dec <HAL_GetTick>
 8004656:	1b40      	subs	r0, r0, r5
 8004658:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 800465c:	d9f4      	bls.n	8004648 <RTC_EnterInitMode+0x22>
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800465e:	2603      	movs	r6, #3
 8004660:	f884 6021 	strb.w	r6, [r4, #33]	; 0x21
 8004664:	e7f0      	b.n	8004648 <RTC_EnterInitMode+0x22>
	...

08004668 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8004668:	b510      	push	{r4, lr}
 800466a:	4604      	mov	r4, r0
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);

#elif defined(RTC_ISR_INITF)

  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ISR, RTC_ISR_INITF);
 800466c:	4b10      	ldr	r3, [pc, #64]	; (80046b0 <RTC_ExitInitMode+0x48>)
 800466e:	68da      	ldr	r2, [r3, #12]
 8004670:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004674:	60da      	str	r2, [r3, #12]

#endif /* RTC_ISR_INITF */
  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 8004676:	689b      	ldr	r3, [r3, #8]
 8004678:	f013 0f20 	tst.w	r3, #32
 800467c:	d106      	bne.n	800468c <RTC_ExitInitMode+0x24>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800467e:	f7ff ffb9 	bl	80045f4 <HAL_RTC_WaitForSynchro>
 8004682:	b198      	cbz	r0, 80046ac <RTC_ExitInitMode+0x44>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8004684:	2003      	movs	r0, #3
 8004686:	f884 0021 	strb.w	r0, [r4, #33]	; 0x21
      status = HAL_TIMEOUT;
 800468a:	e00f      	b.n	80046ac <RTC_ExitInitMode+0x44>
    }
  }
  else
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 800468c:	4a08      	ldr	r2, [pc, #32]	; (80046b0 <RTC_ExitInitMode+0x48>)
 800468e:	6893      	ldr	r3, [r2, #8]
 8004690:	f023 0320 	bic.w	r3, r3, #32
 8004694:	6093      	str	r3, [r2, #8]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8004696:	f7ff ffad 	bl	80045f4 <HAL_RTC_WaitForSynchro>
 800469a:	b110      	cbz	r0, 80046a2 <RTC_ExitInitMode+0x3a>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800469c:	2003      	movs	r0, #3
 800469e:	f884 0021 	strb.w	r0, [r4, #33]	; 0x21
      status = HAL_TIMEOUT;
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 80046a2:	4a03      	ldr	r2, [pc, #12]	; (80046b0 <RTC_ExitInitMode+0x48>)
 80046a4:	6893      	ldr	r3, [r2, #8]
 80046a6:	f043 0320 	orr.w	r3, r3, #32
 80046aa:	6093      	str	r3, [r2, #8]
  }

  return status;
}
 80046ac:	bd10      	pop	{r4, pc}
 80046ae:	bf00      	nop
 80046b0:	58004000 	.word	0x58004000

080046b4 <HAL_RTC_Init>:
  if(hrtc != NULL)
 80046b4:	2800      	cmp	r0, #0
 80046b6:	d044      	beq.n	8004742 <HAL_RTC_Init+0x8e>
{
 80046b8:	b538      	push	{r3, r4, r5, lr}
 80046ba:	4604      	mov	r4, r0
    if(hrtc->State == HAL_RTC_STATE_RESET)
 80046bc:	f890 3021 	ldrb.w	r3, [r0, #33]	; 0x21
 80046c0:	b1a3      	cbz	r3, 80046ec <HAL_RTC_Init+0x38>
    hrtc->State = HAL_RTC_STATE_BUSY;
 80046c2:	2302      	movs	r3, #2
 80046c4:	f884 3021 	strb.w	r3, [r4, #33]	; 0x21
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80046c8:	6823      	ldr	r3, [r4, #0]
 80046ca:	22ca      	movs	r2, #202	; 0xca
 80046cc:	625a      	str	r2, [r3, #36]	; 0x24
 80046ce:	6823      	ldr	r3, [r4, #0]
 80046d0:	2253      	movs	r2, #83	; 0x53
 80046d2:	625a      	str	r2, [r3, #36]	; 0x24
    status = RTC_EnterInitMode(hrtc);
 80046d4:	4620      	mov	r0, r4
 80046d6:	f7ff ffa6 	bl	8004626 <RTC_EnterInitMode>
    if (status == HAL_OK)
 80046da:	b160      	cbz	r0, 80046f6 <HAL_RTC_Init+0x42>
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80046dc:	6823      	ldr	r3, [r4, #0]
 80046de:	22ff      	movs	r2, #255	; 0xff
 80046e0:	625a      	str	r2, [r3, #36]	; 0x24
    if (status == HAL_OK)
 80046e2:	b910      	cbnz	r0, 80046ea <HAL_RTC_Init+0x36>
      hrtc->State = HAL_RTC_STATE_READY;
 80046e4:	2301      	movs	r3, #1
 80046e6:	f884 3021 	strb.w	r3, [r4, #33]	; 0x21
}
 80046ea:	bd38      	pop	{r3, r4, r5, pc}
      hrtc->Lock = HAL_UNLOCKED;
 80046ec:	f880 3020 	strb.w	r3, [r0, #32]
      HAL_RTC_MspInit(hrtc);
 80046f0:	f003 faec 	bl	8007ccc <HAL_RTC_MspInit>
 80046f4:	e7e5      	b.n	80046c2 <HAL_RTC_Init+0xe>
      hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL);
 80046f6:	6822      	ldr	r2, [r4, #0]
 80046f8:	6891      	ldr	r1, [r2, #8]
 80046fa:	4b13      	ldr	r3, [pc, #76]	; (8004748 <HAL_RTC_Init+0x94>)
 80046fc:	400b      	ands	r3, r1
 80046fe:	6093      	str	r3, [r2, #8]
      hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8004700:	6821      	ldr	r1, [r4, #0]
 8004702:	688a      	ldr	r2, [r1, #8]
 8004704:	6863      	ldr	r3, [r4, #4]
 8004706:	6920      	ldr	r0, [r4, #16]
 8004708:	4303      	orrs	r3, r0
 800470a:	69a0      	ldr	r0, [r4, #24]
 800470c:	4303      	orrs	r3, r0
 800470e:	4313      	orrs	r3, r2
 8004710:	608b      	str	r3, [r1, #8]
      hrtc->Instance->PRER = (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos) | (hrtc->Init.SynchPrediv << RTC_PRER_PREDIV_S_Pos);
 8004712:	68a1      	ldr	r1, [r4, #8]
 8004714:	68e3      	ldr	r3, [r4, #12]
 8004716:	6822      	ldr	r2, [r4, #0]
 8004718:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800471c:	6113      	str	r3, [r2, #16]
      status = RTC_ExitInitMode(hrtc);
 800471e:	4620      	mov	r0, r4
 8004720:	f7ff ffa2 	bl	8004668 <RTC_ExitInitMode>
      if(status == HAL_OK)
 8004724:	2800      	cmp	r0, #0
 8004726:	d1d9      	bne.n	80046dc <HAL_RTC_Init+0x28>
        hrtc->Instance->OR &= ~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 8004728:	6822      	ldr	r2, [r4, #0]
 800472a:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 800472c:	f023 0303 	bic.w	r3, r3, #3
 8004730:	64d3      	str	r3, [r2, #76]	; 0x4c
        hrtc->Instance->OR |= (hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 8004732:	6821      	ldr	r1, [r4, #0]
 8004734:	6ccb      	ldr	r3, [r1, #76]	; 0x4c
 8004736:	69e2      	ldr	r2, [r4, #28]
 8004738:	6965      	ldr	r5, [r4, #20]
 800473a:	432a      	orrs	r2, r5
 800473c:	4313      	orrs	r3, r2
 800473e:	64cb      	str	r3, [r1, #76]	; 0x4c
 8004740:	e7cc      	b.n	80046dc <HAL_RTC_Init+0x28>
  HAL_StatusTypeDef status = HAL_ERROR;
 8004742:	2001      	movs	r0, #1
}
 8004744:	4770      	bx	lr
 8004746:	bf00      	nop
 8004748:	ff8fffbf 	.word	0xff8fffbf

0800474c <RTC_ByteToBcd2>:
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
  uint32_t bcdhigh = 0U;
 800474c:	2300      	movs	r3, #0
  uint8_t  bcdlow  = Value;

  while (bcdlow >= 10U)
 800474e:	2809      	cmp	r0, #9
 8004750:	d903      	bls.n	800475a <RTC_ByteToBcd2+0xe>
  {
    bcdhigh++;
 8004752:	3301      	adds	r3, #1
    bcdlow -= 10U;
 8004754:	380a      	subs	r0, #10
 8004756:	b2c0      	uxtb	r0, r0
 8004758:	e7f9      	b.n	800474e <RTC_ByteToBcd2+0x2>
  }

  return ((uint8_t)(bcdhigh << 4U) | bcdlow);
 800475a:	011b      	lsls	r3, r3, #4
 800475c:	b2db      	uxtb	r3, r3
}
 800475e:	4318      	orrs	r0, r3
 8004760:	4770      	bx	lr
	...

08004764 <HAL_RTC_SetTime>:
  __HAL_LOCK(hrtc);
 8004764:	f890 3020 	ldrb.w	r3, [r0, #32]
 8004768:	2b01      	cmp	r3, #1
 800476a:	d05b      	beq.n	8004824 <HAL_RTC_SetTime+0xc0>
{
 800476c:	b570      	push	{r4, r5, r6, lr}
 800476e:	4604      	mov	r4, r0
 8004770:	460d      	mov	r5, r1
 8004772:	4616      	mov	r6, r2
  __HAL_LOCK(hrtc);
 8004774:	2301      	movs	r3, #1
 8004776:	f880 3020 	strb.w	r3, [r0, #32]
  hrtc->State = HAL_RTC_STATE_BUSY;
 800477a:	2302      	movs	r3, #2
 800477c:	f880 3021 	strb.w	r3, [r0, #33]	; 0x21
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8004780:	6803      	ldr	r3, [r0, #0]
 8004782:	22ca      	movs	r2, #202	; 0xca
 8004784:	625a      	str	r2, [r3, #36]	; 0x24
 8004786:	6803      	ldr	r3, [r0, #0]
 8004788:	2253      	movs	r2, #83	; 0x53
 800478a:	625a      	str	r2, [r3, #36]	; 0x24
  status = RTC_EnterInitMode(hrtc);
 800478c:	f7ff ff4b 	bl	8004626 <RTC_EnterInitMode>
  if (status == HAL_OK)
 8004790:	bb58      	cbnz	r0, 80047ea <HAL_RTC_SetTime+0x86>
    if(Format == RTC_FORMAT_BIN)
 8004792:	2e00      	cmp	r6, #0
 8004794:	d134      	bne.n	8004800 <HAL_RTC_SetTime+0x9c>
      if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8004796:	6823      	ldr	r3, [r4, #0]
 8004798:	689b      	ldr	r3, [r3, #8]
 800479a:	f013 0f40 	tst.w	r3, #64	; 0x40
 800479e:	d101      	bne.n	80047a4 <HAL_RTC_SetTime+0x40>
        sTime->TimeFormat = 0x00U;
 80047a0:	2300      	movs	r3, #0
 80047a2:	70eb      	strb	r3, [r5, #3]
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 80047a4:	7828      	ldrb	r0, [r5, #0]
 80047a6:	f7ff ffd1 	bl	800474c <RTC_ByteToBcd2>
 80047aa:	0406      	lsls	r6, r0, #16
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 80047ac:	7868      	ldrb	r0, [r5, #1]
 80047ae:	f7ff ffcd 	bl	800474c <RTC_ByteToBcd2>
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 80047b2:	ea46 2600 	orr.w	r6, r6, r0, lsl #8
                          ((uint32_t)RTC_ByteToBcd2(sTime->Seconds) << RTC_TR_SU_Pos)  | \
 80047b6:	78a8      	ldrb	r0, [r5, #2]
 80047b8:	f7ff ffc8 	bl	800474c <RTC_ByteToBcd2>
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 80047bc:	4330      	orrs	r0, r6
                          (((uint32_t)sTime->TimeFormat) << RTC_TR_PM_Pos));
 80047be:	78eb      	ldrb	r3, [r5, #3]
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 80047c0:	ea40 5083 	orr.w	r0, r0, r3, lsl #22
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 80047c4:	6822      	ldr	r2, [r4, #0]
 80047c6:	4b18      	ldr	r3, [pc, #96]	; (8004828 <HAL_RTC_SetTime+0xc4>)
 80047c8:	4003      	ands	r3, r0
 80047ca:	6013      	str	r3, [r2, #0]
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BKP);
 80047cc:	6822      	ldr	r2, [r4, #0]
 80047ce:	6893      	ldr	r3, [r2, #8]
 80047d0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80047d4:	6093      	str	r3, [r2, #8]
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 80047d6:	6821      	ldr	r1, [r4, #0]
 80047d8:	688b      	ldr	r3, [r1, #8]
 80047da:	68ea      	ldr	r2, [r5, #12]
 80047dc:	6928      	ldr	r0, [r5, #16]
 80047de:	4302      	orrs	r2, r0
 80047e0:	4313      	orrs	r3, r2
 80047e2:	608b      	str	r3, [r1, #8]
    status = RTC_ExitInitMode(hrtc);
 80047e4:	4620      	mov	r0, r4
 80047e6:	f7ff ff3f 	bl	8004668 <RTC_ExitInitMode>
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80047ea:	6823      	ldr	r3, [r4, #0]
 80047ec:	22ff      	movs	r2, #255	; 0xff
 80047ee:	625a      	str	r2, [r3, #36]	; 0x24
  if (status == HAL_OK)
 80047f0:	b910      	cbnz	r0, 80047f8 <HAL_RTC_SetTime+0x94>
    hrtc->State = HAL_RTC_STATE_READY;
 80047f2:	2301      	movs	r3, #1
 80047f4:	f884 3021 	strb.w	r3, [r4, #33]	; 0x21
  __HAL_UNLOCK(hrtc);
 80047f8:	2300      	movs	r3, #0
 80047fa:	f884 3020 	strb.w	r3, [r4, #32]
}
 80047fe:	bd70      	pop	{r4, r5, r6, pc}
      if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8004800:	6823      	ldr	r3, [r4, #0]
 8004802:	689b      	ldr	r3, [r3, #8]
 8004804:	f013 0f40 	tst.w	r3, #64	; 0x40
 8004808:	d101      	bne.n	800480e <HAL_RTC_SetTime+0xaa>
        sTime->TimeFormat = 0x00U;
 800480a:	2300      	movs	r3, #0
 800480c:	70eb      	strb	r3, [r5, #3]
      tmpreg = (((uint32_t)(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800480e:	782b      	ldrb	r3, [r5, #0]
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8004810:	7868      	ldrb	r0, [r5, #1]
 8004812:	0200      	lsls	r0, r0, #8
      tmpreg = (((uint32_t)(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8004814:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
                ((uint32_t)(sTime->Seconds) << RTC_TR_SU_Pos)  | \
 8004818:	78ab      	ldrb	r3, [r5, #2]
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800481a:	4318      	orrs	r0, r3
                ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 800481c:	78eb      	ldrb	r3, [r5, #3]
      tmpreg = (((uint32_t)(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800481e:	ea40 5083 	orr.w	r0, r0, r3, lsl #22
 8004822:	e7cf      	b.n	80047c4 <HAL_RTC_SetTime+0x60>
  __HAL_LOCK(hrtc);
 8004824:	2002      	movs	r0, #2
}
 8004826:	4770      	bx	lr
 8004828:	007f7f7f 	.word	0x007f7f7f

0800482c <HAL_RTC_SetDate>:
  __HAL_LOCK(hrtc);
 800482c:	f890 3020 	ldrb.w	r3, [r0, #32]
 8004830:	2b01      	cmp	r3, #1
 8004832:	d04a      	beq.n	80048ca <HAL_RTC_SetDate+0x9e>
{
 8004834:	b570      	push	{r4, r5, r6, lr}
 8004836:	4604      	mov	r4, r0
 8004838:	460e      	mov	r6, r1
  __HAL_LOCK(hrtc);
 800483a:	2301      	movs	r3, #1
 800483c:	f880 3020 	strb.w	r3, [r0, #32]
  hrtc->State = HAL_RTC_STATE_BUSY;
 8004840:	2302      	movs	r3, #2
 8004842:	f880 3021 	strb.w	r3, [r0, #33]	; 0x21
  if((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8004846:	b93a      	cbnz	r2, 8004858 <HAL_RTC_SetDate+0x2c>
 8004848:	784b      	ldrb	r3, [r1, #1]
 800484a:	f013 0f10 	tst.w	r3, #16
 800484e:	d003      	beq.n	8004858 <HAL_RTC_SetDate+0x2c>
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8004850:	f003 03ef 	and.w	r3, r3, #239	; 0xef
 8004854:	330a      	adds	r3, #10
 8004856:	704b      	strb	r3, [r1, #1]
  if(Format == RTC_FORMAT_BIN)
 8004858:	bb22      	cbnz	r2, 80048a4 <HAL_RTC_SetDate+0x78>
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 800485a:	78f0      	ldrb	r0, [r6, #3]
 800485c:	f7ff ff76 	bl	800474c <RTC_ByteToBcd2>
 8004860:	0405      	lsls	r5, r0, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8004862:	7870      	ldrb	r0, [r6, #1]
 8004864:	f7ff ff72 	bl	800474c <RTC_ByteToBcd2>
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8004868:	ea45 2500 	orr.w	r5, r5, r0, lsl #8
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date)  << RTC_DR_DU_Pos) | \
 800486c:	78b0      	ldrb	r0, [r6, #2]
 800486e:	f7ff ff6d 	bl	800474c <RTC_ByteToBcd2>
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8004872:	4305      	orrs	r5, r0
                  ((uint32_t)sDate->WeekDay               << RTC_DR_WDU_Pos));
 8004874:	7830      	ldrb	r0, [r6, #0]
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8004876:	ea45 3540 	orr.w	r5, r5, r0, lsl #13
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800487a:	6823      	ldr	r3, [r4, #0]
 800487c:	22ca      	movs	r2, #202	; 0xca
 800487e:	625a      	str	r2, [r3, #36]	; 0x24
 8004880:	6823      	ldr	r3, [r4, #0]
 8004882:	2253      	movs	r2, #83	; 0x53
 8004884:	625a      	str	r2, [r3, #36]	; 0x24
  status = RTC_EnterInitMode(hrtc);
 8004886:	4620      	mov	r0, r4
 8004888:	f7ff fecd 	bl	8004626 <RTC_EnterInitMode>
  if (status == HAL_OK)
 800488c:	b1a8      	cbz	r0, 80048ba <HAL_RTC_SetDate+0x8e>
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800488e:	6823      	ldr	r3, [r4, #0]
 8004890:	22ff      	movs	r2, #255	; 0xff
 8004892:	625a      	str	r2, [r3, #36]	; 0x24
  if (status == HAL_OK)
 8004894:	b910      	cbnz	r0, 800489c <HAL_RTC_SetDate+0x70>
    hrtc->State = HAL_RTC_STATE_READY;
 8004896:	2301      	movs	r3, #1
 8004898:	f884 3021 	strb.w	r3, [r4, #33]	; 0x21
  __HAL_UNLOCK(hrtc);
 800489c:	2300      	movs	r3, #0
 800489e:	f884 3020 	strb.w	r3, [r4, #32]
}
 80048a2:	bd70      	pop	{r4, r5, r6, pc}
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 80048a4:	78f3      	ldrb	r3, [r6, #3]
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 80048a6:	7875      	ldrb	r5, [r6, #1]
 80048a8:	022d      	lsls	r5, r5, #8
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 80048aa:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
                  (((uint32_t)sDate->Date)    << RTC_DR_DU_Pos) | \
 80048ae:	78b0      	ldrb	r0, [r6, #2]
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 80048b0:	4305      	orrs	r5, r0
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 80048b2:	7830      	ldrb	r0, [r6, #0]
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 80048b4:	ea45 3540 	orr.w	r5, r5, r0, lsl #13
 80048b8:	e7df      	b.n	800487a <HAL_RTC_SetDate+0x4e>
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 80048ba:	6822      	ldr	r2, [r4, #0]
 80048bc:	4b04      	ldr	r3, [pc, #16]	; (80048d0 <HAL_RTC_SetDate+0xa4>)
 80048be:	402b      	ands	r3, r5
 80048c0:	6053      	str	r3, [r2, #4]
    status = RTC_ExitInitMode(hrtc);
 80048c2:	4620      	mov	r0, r4
 80048c4:	f7ff fed0 	bl	8004668 <RTC_ExitInitMode>
 80048c8:	e7e1      	b.n	800488e <HAL_RTC_SetDate+0x62>
  __HAL_LOCK(hrtc);
 80048ca:	2002      	movs	r0, #2
}
 80048cc:	4770      	bx	lr
 80048ce:	bf00      	nop
 80048d0:	00ffff3f 	.word	0x00ffff3f

080048d4 <SPI_GetPacketSize>:
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(SPI_HandleTypeDef *hspi)
{
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 80048d4:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
 80048d6:	095b      	lsrs	r3, r3, #5
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 80048d8:	68c0      	ldr	r0, [r0, #12]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 80048da:	3008      	adds	r0, #8
 80048dc:	08c0      	lsrs	r0, r0, #3

  return data_size * fifo_threashold;
}
 80048de:	fb03 0000 	mla	r0, r3, r0, r0
 80048e2:	4770      	bx	lr

080048e4 <HAL_SPI_Init>:
  if (hspi == NULL)
 80048e4:	2800      	cmp	r0, #0
 80048e6:	f000 8097 	beq.w	8004a18 <HAL_SPI_Init+0x134>
{
 80048ea:	b570      	push	{r4, r5, r6, lr}
 80048ec:	4604      	mov	r4, r0
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80048ee:	2300      	movs	r3, #0
 80048f0:	6283      	str	r3, [r0, #40]	; 0x28
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 80048f2:	6805      	ldr	r5, [r0, #0]
 80048f4:	4b4c      	ldr	r3, [pc, #304]	; (8004a28 <HAL_SPI_Init+0x144>)
 80048f6:	4e4d      	ldr	r6, [pc, #308]	; (8004a2c <HAL_SPI_Init+0x148>)
 80048f8:	429d      	cmp	r5, r3
 80048fa:	bf18      	it	ne
 80048fc:	42b5      	cmpne	r5, r6
 80048fe:	bf14      	ite	ne
 8004900:	2601      	movne	r6, #1
 8004902:	2600      	moveq	r6, #0
 8004904:	d007      	beq.n	8004916 <HAL_SPI_Init+0x32>
 8004906:	f5a3 4374 	sub.w	r3, r3, #62464	; 0xf400
 800490a:	429d      	cmp	r5, r3
 800490c:	d003      	beq.n	8004916 <HAL_SPI_Init+0x32>
 800490e:	68c3      	ldr	r3, [r0, #12]
 8004910:	2b0f      	cmp	r3, #15
 8004912:	f200 8083 	bhi.w	8004a1c <HAL_SPI_Init+0x138>
  packet_length = SPI_GetPacketSize(hspi);
 8004916:	4620      	mov	r0, r4
 8004918:	f7ff ffdc 	bl	80048d4 <SPI_GetPacketSize>
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800491c:	b126      	cbz	r6, 8004928 <HAL_SPI_Init+0x44>
 800491e:	4b44      	ldr	r3, [pc, #272]	; (8004a30 <HAL_SPI_Init+0x14c>)
 8004920:	429d      	cmp	r5, r3
 8004922:	d001      	beq.n	8004928 <HAL_SPI_Init+0x44>
 8004924:	2808      	cmp	r0, #8
 8004926:	d87b      	bhi.n	8004a20 <HAL_SPI_Init+0x13c>
 8004928:	4a3f      	ldr	r2, [pc, #252]	; (8004a28 <HAL_SPI_Init+0x144>)
 800492a:	4b40      	ldr	r3, [pc, #256]	; (8004a2c <HAL_SPI_Init+0x148>)
 800492c:	429d      	cmp	r5, r3
 800492e:	bf18      	it	ne
 8004930:	4295      	cmpne	r5, r2
 8004932:	d003      	beq.n	800493c <HAL_SPI_Init+0x58>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8004934:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004938:	429d      	cmp	r5, r3
 800493a:	d101      	bne.n	8004940 <HAL_SPI_Init+0x5c>
 800493c:	2810      	cmp	r0, #16
 800493e:	d871      	bhi.n	8004a24 <HAL_SPI_Init+0x140>
  if (hspi->State == HAL_SPI_STATE_RESET)
 8004940:	f894 3081 	ldrb.w	r3, [r4, #129]	; 0x81
 8004944:	2b00      	cmp	r3, #0
 8004946:	d054      	beq.n	80049f2 <HAL_SPI_Init+0x10e>
  hspi->State = HAL_SPI_STATE_BUSY;
 8004948:	2302      	movs	r3, #2
 800494a:	f884 3081 	strb.w	r3, [r4, #129]	; 0x81
  __HAL_SPI_DISABLE(hspi);
 800494e:	6822      	ldr	r2, [r4, #0]
 8004950:	6813      	ldr	r3, [r2, #0]
 8004952:	f023 0301 	bic.w	r3, r3, #1
 8004956:	6013      	str	r3, [r2, #0]
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW))
 8004958:	69a3      	ldr	r3, [r4, #24]
 800495a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800495e:	d04e      	beq.n	80049fe <HAL_SPI_Init+0x11a>
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 8004960:	69e3      	ldr	r3, [r4, #28]
 8004962:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8004964:	4313      	orrs	r3, r2
 8004966:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8004968:	4313      	orrs	r3, r2
 800496a:	68e1      	ldr	r1, [r4, #12]
 800496c:	6822      	ldr	r2, [r4, #0]
 800496e:	430b      	orrs	r3, r1
 8004970:	6093      	str	r3, [r2, #8]
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode     | hspi->Init.TIMode           | hspi->Init.NSSPolarity             |
 8004972:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8004974:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8004976:	4313      	orrs	r3, r2
 8004978:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 800497a:	4313      	orrs	r3, r2
 800497c:	69a2      	ldr	r2, [r4, #24]
 800497e:	4313      	orrs	r3, r2
 8004980:	6922      	ldr	r2, [r4, #16]
 8004982:	4313      	orrs	r3, r2
 8004984:	6962      	ldr	r2, [r4, #20]
 8004986:	4313      	orrs	r3, r2
 8004988:	6a22      	ldr	r2, [r4, #32]
 800498a:	4313      	orrs	r3, r2
 800498c:	6862      	ldr	r2, [r4, #4]
 800498e:	4313      	orrs	r3, r2
 8004990:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
 8004992:	4313      	orrs	r3, r2
 8004994:	68a2      	ldr	r2, [r4, #8]
 8004996:	4313      	orrs	r3, r2
 8004998:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 800499a:	4313      	orrs	r3, r2
 800499c:	6da1      	ldr	r1, [r4, #88]	; 0x58
 800499e:	6822      	ldr	r2, [r4, #0]
 80049a0:	430b      	orrs	r3, r1
 80049a2:	60d3      	str	r3, [r2, #12]
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 80049a4:	6863      	ldr	r3, [r4, #4]
 80049a6:	b96b      	cbnz	r3, 80049c4 <HAL_SPI_Init+0xe0>
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 80049a8:	6822      	ldr	r2, [r4, #0]
 80049aa:	6893      	ldr	r3, [r2, #8]
 80049ac:	f423 53c0 	bic.w	r3, r3, #6144	; 0x1800
 80049b0:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80049b4:	6093      	str	r3, [r2, #8]
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 80049b6:	6822      	ldr	r2, [r4, #0]
 80049b8:	6893      	ldr	r3, [r2, #8]
 80049ba:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80049be:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80049c2:	6093      	str	r3, [r2, #8]
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80049c4:	6822      	ldr	r2, [r4, #0]
 80049c6:	6d13      	ldr	r3, [r2, #80]	; 0x50
 80049c8:	f023 0301 	bic.w	r3, r3, #1
 80049cc:	6513      	str	r3, [r2, #80]	; 0x50
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 80049ce:	6863      	ldr	r3, [r4, #4]
 80049d0:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 80049d4:	d006      	beq.n	80049e4 <HAL_SPI_Init+0x100>
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 80049d6:	6822      	ldr	r2, [r4, #0]
 80049d8:	68d3      	ldr	r3, [r2, #12]
 80049da:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80049de:	6d61      	ldr	r1, [r4, #84]	; 0x54
 80049e0:	430b      	orrs	r3, r1
 80049e2:	60d3      	str	r3, [r2, #12]
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80049e4:	2000      	movs	r0, #0
 80049e6:	f8c4 0084 	str.w	r0, [r4, #132]	; 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 80049ea:	2301      	movs	r3, #1
 80049ec:	f884 3081 	strb.w	r3, [r4, #129]	; 0x81
}
 80049f0:	bd70      	pop	{r4, r5, r6, pc}
    hspi->Lock = HAL_UNLOCKED;
 80049f2:	f884 3080 	strb.w	r3, [r4, #128]	; 0x80
    HAL_SPI_MspInit(hspi);
 80049f6:	4620      	mov	r0, r4
 80049f8:	f003 f978 	bl	8007cec <HAL_SPI_MspInit>
 80049fc:	e7a4      	b.n	8004948 <HAL_SPI_Init+0x64>
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW))
 80049fe:	6863      	ldr	r3, [r4, #4]
 8004a00:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004a04:	d1ac      	bne.n	8004960 <HAL_SPI_Init+0x7c>
 8004a06:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8004a08:	2b00      	cmp	r3, #0
 8004a0a:	d1a9      	bne.n	8004960 <HAL_SPI_Init+0x7c>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 8004a0c:	6822      	ldr	r2, [r4, #0]
 8004a0e:	6813      	ldr	r3, [r2, #0]
 8004a10:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8004a14:	6013      	str	r3, [r2, #0]
 8004a16:	e7a3      	b.n	8004960 <HAL_SPI_Init+0x7c>
    return HAL_ERROR;
 8004a18:	2001      	movs	r0, #1
}
 8004a1a:	4770      	bx	lr
    return HAL_ERROR;
 8004a1c:	2001      	movs	r0, #1
 8004a1e:	e7e7      	b.n	80049f0 <HAL_SPI_Init+0x10c>
    return HAL_ERROR;
 8004a20:	2001      	movs	r0, #1
 8004a22:	e7e5      	b.n	80049f0 <HAL_SPI_Init+0x10c>
 8004a24:	2001      	movs	r0, #1
 8004a26:	e7e3      	b.n	80049f0 <HAL_SPI_Init+0x10c>
 8004a28:	40013000 	.word	0x40013000
 8004a2c:	40003800 	.word	0x40003800
 8004a30:	40003c00 	.word	0x40003c00

08004a34 <HAL_TIM_Base_Start>:

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004a34:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8004a38:	b2db      	uxtb	r3, r3
 8004a3a:	2b01      	cmp	r3, #1
 8004a3c:	d111      	bne.n	8004a62 <HAL_TIM_Base_Start+0x2e>
  {
    return HAL_ERROR;
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004a3e:	2302      	movs	r3, #2
 8004a40:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004a44:	6802      	ldr	r2, [r0, #0]
 8004a46:	6891      	ldr	r1, [r2, #8]
 8004a48:	4b08      	ldr	r3, [pc, #32]	; (8004a6c <HAL_TIM_Base_Start+0x38>)
 8004a4a:	400b      	ands	r3, r1
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004a4c:	2b06      	cmp	r3, #6
 8004a4e:	bf18      	it	ne
 8004a50:	f5b3 3f80 	cmpne.w	r3, #65536	; 0x10000
 8004a54:	d007      	beq.n	8004a66 <HAL_TIM_Base_Start+0x32>
  {
    __HAL_TIM_ENABLE(htim);
 8004a56:	6813      	ldr	r3, [r2, #0]
 8004a58:	f043 0301 	orr.w	r3, r3, #1
 8004a5c:	6013      	str	r3, [r2, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004a5e:	2000      	movs	r0, #0
 8004a60:	4770      	bx	lr
    return HAL_ERROR;
 8004a62:	2001      	movs	r0, #1
 8004a64:	4770      	bx	lr
  return HAL_OK;
 8004a66:	2000      	movs	r0, #0
}
 8004a68:	4770      	bx	lr
 8004a6a:	bf00      	nop
 8004a6c:	00010007 	.word	0x00010007

08004a70 <HAL_TIM_Base_Start_IT>:

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004a70:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8004a74:	b2db      	uxtb	r3, r3
 8004a76:	2b01      	cmp	r3, #1
 8004a78:	d116      	bne.n	8004aa8 <HAL_TIM_Base_Start_IT+0x38>
  {
    return HAL_ERROR;
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004a7a:	2302      	movs	r3, #2
 8004a7c:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004a80:	6802      	ldr	r2, [r0, #0]
 8004a82:	68d3      	ldr	r3, [r2, #12]
 8004a84:	f043 0301 	orr.w	r3, r3, #1
 8004a88:	60d3      	str	r3, [r2, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004a8a:	6802      	ldr	r2, [r0, #0]
 8004a8c:	6891      	ldr	r1, [r2, #8]
 8004a8e:	4b08      	ldr	r3, [pc, #32]	; (8004ab0 <HAL_TIM_Base_Start_IT+0x40>)
 8004a90:	400b      	ands	r3, r1
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004a92:	2b06      	cmp	r3, #6
 8004a94:	bf18      	it	ne
 8004a96:	f5b3 3f80 	cmpne.w	r3, #65536	; 0x10000
 8004a9a:	d007      	beq.n	8004aac <HAL_TIM_Base_Start_IT+0x3c>
  {
    __HAL_TIM_ENABLE(htim);
 8004a9c:	6813      	ldr	r3, [r2, #0]
 8004a9e:	f043 0301 	orr.w	r3, r3, #1
 8004aa2:	6013      	str	r3, [r2, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004aa4:	2000      	movs	r0, #0
 8004aa6:	4770      	bx	lr
    return HAL_ERROR;
 8004aa8:	2001      	movs	r0, #1
 8004aaa:	4770      	bx	lr
  return HAL_OK;
 8004aac:	2000      	movs	r0, #0
}
 8004aae:	4770      	bx	lr
 8004ab0:	00010007 	.word	0x00010007

08004ab4 <HAL_TIM_OC_MspInit>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 8004ab4:	4770      	bx	lr

08004ab6 <HAL_TIM_OC_DelayElapsedCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004ab6:	4770      	bx	lr

08004ab8 <HAL_TIM_IC_CaptureCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004ab8:	4770      	bx	lr

08004aba <HAL_TIM_PWM_PulseFinishedCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004aba:	4770      	bx	lr

08004abc <HAL_TIM_TriggerCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004abc:	4770      	bx	lr

08004abe <HAL_TIM_IRQHandler>:
{
 8004abe:	b510      	push	{r4, lr}
 8004ac0:	4604      	mov	r4, r0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004ac2:	6803      	ldr	r3, [r0, #0]
 8004ac4:	691a      	ldr	r2, [r3, #16]
 8004ac6:	f012 0f02 	tst.w	r2, #2
 8004aca:	d011      	beq.n	8004af0 <HAL_TIM_IRQHandler+0x32>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004acc:	68da      	ldr	r2, [r3, #12]
 8004ace:	f012 0f02 	tst.w	r2, #2
 8004ad2:	d00d      	beq.n	8004af0 <HAL_TIM_IRQHandler+0x32>
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004ad4:	f06f 0202 	mvn.w	r2, #2
 8004ad8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004ada:	2301      	movs	r3, #1
 8004adc:	7703      	strb	r3, [r0, #28]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004ade:	6803      	ldr	r3, [r0, #0]
 8004ae0:	699b      	ldr	r3, [r3, #24]
 8004ae2:	f013 0f03 	tst.w	r3, #3
 8004ae6:	d079      	beq.n	8004bdc <HAL_TIM_IRQHandler+0x11e>
          HAL_TIM_IC_CaptureCallback(htim);
 8004ae8:	f7ff ffe6 	bl	8004ab8 <HAL_TIM_IC_CaptureCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004aec:	2300      	movs	r3, #0
 8004aee:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004af0:	6823      	ldr	r3, [r4, #0]
 8004af2:	691a      	ldr	r2, [r3, #16]
 8004af4:	f012 0f04 	tst.w	r2, #4
 8004af8:	d012      	beq.n	8004b20 <HAL_TIM_IRQHandler+0x62>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004afa:	68da      	ldr	r2, [r3, #12]
 8004afc:	f012 0f04 	tst.w	r2, #4
 8004b00:	d00e      	beq.n	8004b20 <HAL_TIM_IRQHandler+0x62>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004b02:	f06f 0204 	mvn.w	r2, #4
 8004b06:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004b08:	2302      	movs	r3, #2
 8004b0a:	7723      	strb	r3, [r4, #28]
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004b0c:	6823      	ldr	r3, [r4, #0]
 8004b0e:	699b      	ldr	r3, [r3, #24]
 8004b10:	f413 7f40 	tst.w	r3, #768	; 0x300
 8004b14:	d068      	beq.n	8004be8 <HAL_TIM_IRQHandler+0x12a>
        HAL_TIM_IC_CaptureCallback(htim);
 8004b16:	4620      	mov	r0, r4
 8004b18:	f7ff ffce 	bl	8004ab8 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004b1c:	2300      	movs	r3, #0
 8004b1e:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004b20:	6823      	ldr	r3, [r4, #0]
 8004b22:	691a      	ldr	r2, [r3, #16]
 8004b24:	f012 0f08 	tst.w	r2, #8
 8004b28:	d012      	beq.n	8004b50 <HAL_TIM_IRQHandler+0x92>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004b2a:	68da      	ldr	r2, [r3, #12]
 8004b2c:	f012 0f08 	tst.w	r2, #8
 8004b30:	d00e      	beq.n	8004b50 <HAL_TIM_IRQHandler+0x92>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004b32:	f06f 0208 	mvn.w	r2, #8
 8004b36:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004b38:	2304      	movs	r3, #4
 8004b3a:	7723      	strb	r3, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004b3c:	6823      	ldr	r3, [r4, #0]
 8004b3e:	69db      	ldr	r3, [r3, #28]
 8004b40:	f013 0f03 	tst.w	r3, #3
 8004b44:	d057      	beq.n	8004bf6 <HAL_TIM_IRQHandler+0x138>
        HAL_TIM_IC_CaptureCallback(htim);
 8004b46:	4620      	mov	r0, r4
 8004b48:	f7ff ffb6 	bl	8004ab8 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004b4c:	2300      	movs	r3, #0
 8004b4e:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004b50:	6823      	ldr	r3, [r4, #0]
 8004b52:	691a      	ldr	r2, [r3, #16]
 8004b54:	f012 0f10 	tst.w	r2, #16
 8004b58:	d012      	beq.n	8004b80 <HAL_TIM_IRQHandler+0xc2>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004b5a:	68da      	ldr	r2, [r3, #12]
 8004b5c:	f012 0f10 	tst.w	r2, #16
 8004b60:	d00e      	beq.n	8004b80 <HAL_TIM_IRQHandler+0xc2>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004b62:	f06f 0210 	mvn.w	r2, #16
 8004b66:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004b68:	2308      	movs	r3, #8
 8004b6a:	7723      	strb	r3, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004b6c:	6823      	ldr	r3, [r4, #0]
 8004b6e:	69db      	ldr	r3, [r3, #28]
 8004b70:	f413 7f40 	tst.w	r3, #768	; 0x300
 8004b74:	d046      	beq.n	8004c04 <HAL_TIM_IRQHandler+0x146>
        HAL_TIM_IC_CaptureCallback(htim);
 8004b76:	4620      	mov	r0, r4
 8004b78:	f7ff ff9e 	bl	8004ab8 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004b7c:	2300      	movs	r3, #0
 8004b7e:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004b80:	6823      	ldr	r3, [r4, #0]
 8004b82:	691a      	ldr	r2, [r3, #16]
 8004b84:	f012 0f01 	tst.w	r2, #1
 8004b88:	d003      	beq.n	8004b92 <HAL_TIM_IRQHandler+0xd4>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004b8a:	68da      	ldr	r2, [r3, #12]
 8004b8c:	f012 0f01 	tst.w	r2, #1
 8004b90:	d13f      	bne.n	8004c12 <HAL_TIM_IRQHandler+0x154>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004b92:	6823      	ldr	r3, [r4, #0]
 8004b94:	691a      	ldr	r2, [r3, #16]
 8004b96:	f012 0f80 	tst.w	r2, #128	; 0x80
 8004b9a:	d003      	beq.n	8004ba4 <HAL_TIM_IRQHandler+0xe6>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004b9c:	68da      	ldr	r2, [r3, #12]
 8004b9e:	f012 0f80 	tst.w	r2, #128	; 0x80
 8004ba2:	d13d      	bne.n	8004c20 <HAL_TIM_IRQHandler+0x162>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8004ba4:	6823      	ldr	r3, [r4, #0]
 8004ba6:	691a      	ldr	r2, [r3, #16]
 8004ba8:	f412 7f80 	tst.w	r2, #256	; 0x100
 8004bac:	d003      	beq.n	8004bb6 <HAL_TIM_IRQHandler+0xf8>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004bae:	68da      	ldr	r2, [r3, #12]
 8004bb0:	f012 0f80 	tst.w	r2, #128	; 0x80
 8004bb4:	d13b      	bne.n	8004c2e <HAL_TIM_IRQHandler+0x170>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004bb6:	6823      	ldr	r3, [r4, #0]
 8004bb8:	691a      	ldr	r2, [r3, #16]
 8004bba:	f012 0f40 	tst.w	r2, #64	; 0x40
 8004bbe:	d003      	beq.n	8004bc8 <HAL_TIM_IRQHandler+0x10a>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004bc0:	68da      	ldr	r2, [r3, #12]
 8004bc2:	f012 0f40 	tst.w	r2, #64	; 0x40
 8004bc6:	d139      	bne.n	8004c3c <HAL_TIM_IRQHandler+0x17e>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004bc8:	6823      	ldr	r3, [r4, #0]
 8004bca:	691a      	ldr	r2, [r3, #16]
 8004bcc:	f012 0f20 	tst.w	r2, #32
 8004bd0:	d003      	beq.n	8004bda <HAL_TIM_IRQHandler+0x11c>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004bd2:	68da      	ldr	r2, [r3, #12]
 8004bd4:	f012 0f20 	tst.w	r2, #32
 8004bd8:	d137      	bne.n	8004c4a <HAL_TIM_IRQHandler+0x18c>
}
 8004bda:	bd10      	pop	{r4, pc}
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004bdc:	f7ff ff6b 	bl	8004ab6 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004be0:	4620      	mov	r0, r4
 8004be2:	f7ff ff6a 	bl	8004aba <HAL_TIM_PWM_PulseFinishedCallback>
 8004be6:	e781      	b.n	8004aec <HAL_TIM_IRQHandler+0x2e>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004be8:	4620      	mov	r0, r4
 8004bea:	f7ff ff64 	bl	8004ab6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004bee:	4620      	mov	r0, r4
 8004bf0:	f7ff ff63 	bl	8004aba <HAL_TIM_PWM_PulseFinishedCallback>
 8004bf4:	e792      	b.n	8004b1c <HAL_TIM_IRQHandler+0x5e>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004bf6:	4620      	mov	r0, r4
 8004bf8:	f7ff ff5d 	bl	8004ab6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004bfc:	4620      	mov	r0, r4
 8004bfe:	f7ff ff5c 	bl	8004aba <HAL_TIM_PWM_PulseFinishedCallback>
 8004c02:	e7a3      	b.n	8004b4c <HAL_TIM_IRQHandler+0x8e>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004c04:	4620      	mov	r0, r4
 8004c06:	f7ff ff56 	bl	8004ab6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004c0a:	4620      	mov	r0, r4
 8004c0c:	f7ff ff55 	bl	8004aba <HAL_TIM_PWM_PulseFinishedCallback>
 8004c10:	e7b4      	b.n	8004b7c <HAL_TIM_IRQHandler+0xbe>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004c12:	f06f 0201 	mvn.w	r2, #1
 8004c16:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 8004c18:	4620      	mov	r0, r4
 8004c1a:	f002 ff3b 	bl	8007a94 <HAL_TIM_PeriodElapsedCallback>
 8004c1e:	e7b8      	b.n	8004b92 <HAL_TIM_IRQHandler+0xd4>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004c20:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004c24:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 8004c26:	4620      	mov	r0, r4
 8004c28:	f000 f8d3 	bl	8004dd2 <HAL_TIMEx_BreakCallback>
 8004c2c:	e7ba      	b.n	8004ba4 <HAL_TIM_IRQHandler+0xe6>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8004c2e:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8004c32:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_Break2Callback(htim);
 8004c34:	4620      	mov	r0, r4
 8004c36:	f000 f8cd 	bl	8004dd4 <HAL_TIMEx_Break2Callback>
 8004c3a:	e7bc      	b.n	8004bb6 <HAL_TIM_IRQHandler+0xf8>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004c3c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004c40:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 8004c42:	4620      	mov	r0, r4
 8004c44:	f7ff ff3a 	bl	8004abc <HAL_TIM_TriggerCallback>
 8004c48:	e7be      	b.n	8004bc8 <HAL_TIM_IRQHandler+0x10a>
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004c4a:	f06f 0220 	mvn.w	r2, #32
 8004c4e:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_CommutCallback(htim);
 8004c50:	4620      	mov	r0, r4
 8004c52:	f000 f8bd 	bl	8004dd0 <HAL_TIMEx_CommutCallback>
}
 8004c56:	e7c0      	b.n	8004bda <HAL_TIM_IRQHandler+0x11c>

08004c58 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004c58:	b470      	push	{r4, r5, r6}
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004c5a:	6803      	ldr	r3, [r0, #0]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004c5c:	4c37      	ldr	r4, [pc, #220]	; (8004d3c <TIM_Base_SetConfig+0xe4>)
 8004c5e:	42a0      	cmp	r0, r4
 8004c60:	bf14      	ite	ne
 8004c62:	2400      	movne	r4, #0
 8004c64:	2401      	moveq	r4, #1
 8004c66:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8004c6a:	bf14      	ite	ne
 8004c6c:	4622      	movne	r2, r4
 8004c6e:	f044 0201 	orreq.w	r2, r4, #1
 8004c72:	b9aa      	cbnz	r2, 8004ca0 <TIM_Base_SetConfig+0x48>
 8004c74:	4d32      	ldr	r5, [pc, #200]	; (8004d40 <TIM_Base_SetConfig+0xe8>)
 8004c76:	42a8      	cmp	r0, r5
 8004c78:	bf14      	ite	ne
 8004c7a:	2500      	movne	r5, #0
 8004c7c:	2501      	moveq	r5, #1
 8004c7e:	4e31      	ldr	r6, [pc, #196]	; (8004d44 <TIM_Base_SetConfig+0xec>)
 8004c80:	42b0      	cmp	r0, r6
 8004c82:	d00d      	beq.n	8004ca0 <TIM_Base_SetConfig+0x48>
 8004c84:	b965      	cbnz	r5, 8004ca0 <TIM_Base_SetConfig+0x48>
 8004c86:	f105 4580 	add.w	r5, r5, #1073741824	; 0x40000000
 8004c8a:	f505 3582 	add.w	r5, r5, #66560	; 0x10400
 8004c8e:	42a8      	cmp	r0, r5
 8004c90:	bf14      	ite	ne
 8004c92:	2500      	movne	r5, #0
 8004c94:	2501      	moveq	r5, #1
 8004c96:	f506 6600 	add.w	r6, r6, #2048	; 0x800
 8004c9a:	42b0      	cmp	r0, r6
 8004c9c:	d000      	beq.n	8004ca0 <TIM_Base_SetConfig+0x48>
 8004c9e:	b11d      	cbz	r5, 8004ca8 <TIM_Base_SetConfig+0x50>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004ca0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8004ca4:	684d      	ldr	r5, [r1, #4]
 8004ca6:	432b      	orrs	r3, r5
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004ca8:	bb12      	cbnz	r2, 8004cf0 <TIM_Base_SetConfig+0x98>
 8004caa:	4a25      	ldr	r2, [pc, #148]	; (8004d40 <TIM_Base_SetConfig+0xe8>)
 8004cac:	4290      	cmp	r0, r2
 8004cae:	bf14      	ite	ne
 8004cb0:	2200      	movne	r2, #0
 8004cb2:	2201      	moveq	r2, #1
 8004cb4:	4d23      	ldr	r5, [pc, #140]	; (8004d44 <TIM_Base_SetConfig+0xec>)
 8004cb6:	42a8      	cmp	r0, r5
 8004cb8:	d01a      	beq.n	8004cf0 <TIM_Base_SetConfig+0x98>
 8004cba:	b9ca      	cbnz	r2, 8004cf0 <TIM_Base_SetConfig+0x98>
 8004cbc:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
 8004cc0:	f502 3282 	add.w	r2, r2, #66560	; 0x10400
 8004cc4:	4290      	cmp	r0, r2
 8004cc6:	bf14      	ite	ne
 8004cc8:	2200      	movne	r2, #0
 8004cca:	2201      	moveq	r2, #1
 8004ccc:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 8004cd0:	42a8      	cmp	r0, r5
 8004cd2:	d00d      	beq.n	8004cf0 <TIM_Base_SetConfig+0x98>
 8004cd4:	b962      	cbnz	r2, 8004cf0 <TIM_Base_SetConfig+0x98>
 8004cd6:	4a1c      	ldr	r2, [pc, #112]	; (8004d48 <TIM_Base_SetConfig+0xf0>)
 8004cd8:	4290      	cmp	r0, r2
 8004cda:	bf14      	ite	ne
 8004cdc:	2200      	movne	r2, #0
 8004cde:	2201      	moveq	r2, #1
 8004ce0:	f505 359a 	add.w	r5, r5, #78848	; 0x13400
 8004ce4:	42a8      	cmp	r0, r5
 8004ce6:	d003      	beq.n	8004cf0 <TIM_Base_SetConfig+0x98>
 8004ce8:	b912      	cbnz	r2, 8004cf0 <TIM_Base_SetConfig+0x98>
 8004cea:	4a18      	ldr	r2, [pc, #96]	; (8004d4c <TIM_Base_SetConfig+0xf4>)
 8004cec:	4290      	cmp	r0, r2
 8004cee:	d103      	bne.n	8004cf8 <TIM_Base_SetConfig+0xa0>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004cf0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004cf4:	68ca      	ldr	r2, [r1, #12]
 8004cf6:	4313      	orrs	r3, r2
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004cf8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004cfc:	694a      	ldr	r2, [r1, #20]
 8004cfe:	4313      	orrs	r3, r2

  TIMx->CR1 = tmpcr1;
 8004d00:	6003      	str	r3, [r0, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004d02:	688a      	ldr	r2, [r1, #8]
 8004d04:	62c2      	str	r2, [r0, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004d06:	680a      	ldr	r2, [r1, #0]
 8004d08:	6282      	str	r2, [r0, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004d0a:	4b11      	ldr	r3, [pc, #68]	; (8004d50 <TIM_Base_SetConfig+0xf8>)
 8004d0c:	4298      	cmp	r0, r3
 8004d0e:	bf14      	ite	ne
 8004d10:	4623      	movne	r3, r4
 8004d12:	f044 0301 	orreq.w	r3, r4, #1
 8004d16:	b95b      	cbnz	r3, 8004d30 <TIM_Base_SetConfig+0xd8>
 8004d18:	4b0b      	ldr	r3, [pc, #44]	; (8004d48 <TIM_Base_SetConfig+0xf0>)
 8004d1a:	4298      	cmp	r0, r3
 8004d1c:	bf14      	ite	ne
 8004d1e:	2300      	movne	r3, #0
 8004d20:	2301      	moveq	r3, #1
 8004d22:	4a0c      	ldr	r2, [pc, #48]	; (8004d54 <TIM_Base_SetConfig+0xfc>)
 8004d24:	4290      	cmp	r0, r2
 8004d26:	d003      	beq.n	8004d30 <TIM_Base_SetConfig+0xd8>
 8004d28:	b913      	cbnz	r3, 8004d30 <TIM_Base_SetConfig+0xd8>
 8004d2a:	4b08      	ldr	r3, [pc, #32]	; (8004d4c <TIM_Base_SetConfig+0xf4>)
 8004d2c:	4298      	cmp	r0, r3
 8004d2e:	d101      	bne.n	8004d34 <TIM_Base_SetConfig+0xdc>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004d30:	690b      	ldr	r3, [r1, #16]
 8004d32:	6303      	str	r3, [r0, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004d34:	2301      	movs	r3, #1
 8004d36:	6143      	str	r3, [r0, #20]
}
 8004d38:	bc70      	pop	{r4, r5, r6}
 8004d3a:	4770      	bx	lr
 8004d3c:	40010000 	.word	0x40010000
 8004d40:	40000800 	.word	0x40000800
 8004d44:	40000400 	.word	0x40000400
 8004d48:	40014400 	.word	0x40014400
 8004d4c:	40014800 	.word	0x40014800
 8004d50:	40010400 	.word	0x40010400
 8004d54:	40014000 	.word	0x40014000

08004d58 <HAL_TIM_Base_Init>:
  if (htim == NULL)
 8004d58:	b360      	cbz	r0, 8004db4 <HAL_TIM_Base_Init+0x5c>
{
 8004d5a:	b510      	push	{r4, lr}
 8004d5c:	4604      	mov	r4, r0
  if (htim->State == HAL_TIM_STATE_RESET)
 8004d5e:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8004d62:	b313      	cbz	r3, 8004daa <HAL_TIM_Base_Init+0x52>
  htim->State = HAL_TIM_STATE_BUSY;
 8004d64:	2302      	movs	r3, #2
 8004d66:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004d6a:	4621      	mov	r1, r4
 8004d6c:	f851 0b04 	ldr.w	r0, [r1], #4
 8004d70:	f7ff ff72 	bl	8004c58 <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004d74:	2301      	movs	r3, #1
 8004d76:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004d7a:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
 8004d7e:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 8004d82:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 8004d86:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
 8004d8a:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004d8e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004d92:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 8004d96:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8004d9a:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
 8004d9e:	f884 3047 	strb.w	r3, [r4, #71]	; 0x47
  htim->State = HAL_TIM_STATE_READY;
 8004da2:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 8004da6:	2000      	movs	r0, #0
}
 8004da8:	bd10      	pop	{r4, pc}
    htim->Lock = HAL_UNLOCKED;
 8004daa:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 8004dae:	f002 ffd9 	bl	8007d64 <HAL_TIM_Base_MspInit>
 8004db2:	e7d7      	b.n	8004d64 <HAL_TIM_Base_Init+0xc>
    return HAL_ERROR;
 8004db4:	2001      	movs	r0, #1
}
 8004db6:	4770      	bx	lr

08004db8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004db8:	b410      	push	{r4}
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004dba:	6884      	ldr	r4, [r0, #8]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004dbc:	f424 447f 	bic.w	r4, r4, #65280	; 0xff00

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004dc0:	ea42 2203 	orr.w	r2, r2, r3, lsl #8
 8004dc4:	430a      	orrs	r2, r1
 8004dc6:	4322      	orrs	r2, r4

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004dc8:	6082      	str	r2, [r0, #8]
}
 8004dca:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004dce:	4770      	bx	lr

08004dd0 <HAL_TIMEx_CommutCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004dd0:	4770      	bx	lr

08004dd2 <HAL_TIMEx_BreakCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004dd2:	4770      	bx	lr

08004dd4 <HAL_TIMEx_Break2Callback>:
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8004dd4:	4770      	bx	lr
	...

08004dd8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004dd8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004ddc:	b086      	sub	sp, #24
 8004dde:	4604      	mov	r4, r0
  uint32_t pclk;

  /* Check the parameters */
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  if (UART_INSTANCE_LOWPOWER(huart))
 8004de0:	6801      	ldr	r1, [r0, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004de2:	6883      	ldr	r3, [r0, #8]
 8004de4:	6902      	ldr	r2, [r0, #16]
 8004de6:	4313      	orrs	r3, r2
 8004de8:	6942      	ldr	r2, [r0, #20]
 8004dea:	4313      	orrs	r3, r2
 8004dec:	69c2      	ldr	r2, [r0, #28]
 8004dee:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)huart->FifoMode;
 8004df0:	6e42      	ldr	r2, [r0, #100]	; 0x64
 8004df2:	4313      	orrs	r3, r2
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004df4:	6808      	ldr	r0, [r1, #0]
 8004df6:	4a88      	ldr	r2, [pc, #544]	; (8005018 <UART_SetConfig+0x240>)
 8004df8:	4002      	ands	r2, r0
 8004dfa:	431a      	orrs	r2, r3
 8004dfc:	600a      	str	r2, [r1, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004dfe:	6822      	ldr	r2, [r4, #0]
 8004e00:	6853      	ldr	r3, [r2, #4]
 8004e02:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8004e06:	68e1      	ldr	r1, [r4, #12]
 8004e08:	430b      	orrs	r3, r1
 8004e0a:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004e0c:	69a1      	ldr	r1, [r4, #24]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004e0e:	6822      	ldr	r2, [r4, #0]
 8004e10:	4b82      	ldr	r3, [pc, #520]	; (800501c <UART_SetConfig+0x244>)
 8004e12:	429a      	cmp	r2, r3
 8004e14:	d001      	beq.n	8004e1a <UART_SetConfig+0x42>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8004e16:	6a23      	ldr	r3, [r4, #32]
 8004e18:	4319      	orrs	r1, r3
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004e1a:	6890      	ldr	r0, [r2, #8]
 8004e1c:	4b80      	ldr	r3, [pc, #512]	; (8005020 <UART_SetConfig+0x248>)
 8004e1e:	4003      	ands	r3, r0
 8004e20:	430b      	orrs	r3, r1
 8004e22:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8004e24:	6822      	ldr	r2, [r4, #0]
 8004e26:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8004e28:	f023 030f 	bic.w	r3, r3, #15
 8004e2c:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8004e2e:	430b      	orrs	r3, r1
 8004e30:	62d3      	str	r3, [r2, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004e32:	6822      	ldr	r2, [r4, #0]
 8004e34:	4b7b      	ldr	r3, [pc, #492]	; (8005024 <UART_SetConfig+0x24c>)
 8004e36:	429a      	cmp	r2, r3
 8004e38:	d021      	beq.n	8004e7e <UART_SetConfig+0xa6>
 8004e3a:	4b7b      	ldr	r3, [pc, #492]	; (8005028 <UART_SetConfig+0x250>)
 8004e3c:	429a      	cmp	r2, r3
 8004e3e:	f000 808c 	beq.w	8004f5a <UART_SetConfig+0x182>
 8004e42:	4b7a      	ldr	r3, [pc, #488]	; (800502c <UART_SetConfig+0x254>)
 8004e44:	429a      	cmp	r2, r3
 8004e46:	f000 80a2 	beq.w	8004f8e <UART_SetConfig+0x1b6>
 8004e4a:	4b79      	ldr	r3, [pc, #484]	; (8005030 <UART_SetConfig+0x258>)
 8004e4c:	429a      	cmp	r2, r3
 8004e4e:	f000 80b5 	beq.w	8004fbc <UART_SetConfig+0x1e4>
 8004e52:	4b78      	ldr	r3, [pc, #480]	; (8005034 <UART_SetConfig+0x25c>)
 8004e54:	429a      	cmp	r2, r3
 8004e56:	f000 80c8 	beq.w	8004fea <UART_SetConfig+0x212>
 8004e5a:	4b77      	ldr	r3, [pc, #476]	; (8005038 <UART_SetConfig+0x260>)
 8004e5c:	429a      	cmp	r2, r3
 8004e5e:	f000 80f3 	beq.w	8005048 <UART_SetConfig+0x270>
 8004e62:	4b76      	ldr	r3, [pc, #472]	; (800503c <UART_SetConfig+0x264>)
 8004e64:	429a      	cmp	r2, r3
 8004e66:	f000 8118 	beq.w	800509a <UART_SetConfig+0x2c2>
 8004e6a:	4b75      	ldr	r3, [pc, #468]	; (8005040 <UART_SetConfig+0x268>)
 8004e6c:	429a      	cmp	r2, r3
 8004e6e:	f000 812b 	beq.w	80050c8 <UART_SetConfig+0x2f0>
 8004e72:	4b6a      	ldr	r3, [pc, #424]	; (800501c <UART_SetConfig+0x244>)
 8004e74:	429a      	cmp	r2, r3
 8004e76:	f000 813e 	beq.w	80050f6 <UART_SetConfig+0x31e>
 8004e7a:	2380      	movs	r3, #128	; 0x80
 8004e7c:	e033      	b.n	8004ee6 <UART_SetConfig+0x10e>
 8004e7e:	4b71      	ldr	r3, [pc, #452]	; (8005044 <UART_SetConfig+0x26c>)
 8004e80:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004e82:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004e86:	2b28      	cmp	r3, #40	; 0x28
 8004e88:	d865      	bhi.n	8004f56 <UART_SetConfig+0x17e>
 8004e8a:	e8df f013 	tbh	[pc, r3, lsl #1]
 8004e8e:	0029      	.short	0x0029
 8004e90:	00640064 	.word	0x00640064
 8004e94:	00640064 	.word	0x00640064
 8004e98:	00640064 	.word	0x00640064
 8004e9c:	014c0064 	.word	0x014c0064
 8004ea0:	00640064 	.word	0x00640064
 8004ea4:	00640064 	.word	0x00640064
 8004ea8:	00640064 	.word	0x00640064
 8004eac:	002b0064 	.word	0x002b0064
 8004eb0:	00640064 	.word	0x00640064
 8004eb4:	00640064 	.word	0x00640064
 8004eb8:	00640064 	.word	0x00640064
 8004ebc:	005e0064 	.word	0x005e0064
 8004ec0:	00640064 	.word	0x00640064
 8004ec4:	00640064 	.word	0x00640064
 8004ec8:	00640064 	.word	0x00640064
 8004ecc:	00600064 	.word	0x00600064
 8004ed0:	00640064 	.word	0x00640064
 8004ed4:	00640064 	.word	0x00640064
 8004ed8:	00640064 	.word	0x00640064
 8004edc:	00620064 	.word	0x00620064
 8004ee0:	2301      	movs	r3, #1
 8004ee2:	e000      	b.n	8004ee6 <UART_SetConfig+0x10e>
 8004ee4:	2308      	movs	r3, #8

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8004ee6:	494d      	ldr	r1, [pc, #308]	; (800501c <UART_SetConfig+0x244>)
 8004ee8:	428a      	cmp	r2, r1
 8004eea:	f000 812e 	beq.w	800514a <UART_SetConfig+0x372>
        }
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004eee:	69e0      	ldr	r0, [r4, #28]
 8004ef0:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 8004ef4:	f000 81b0 	beq.w	8005258 <UART_SetConfig+0x480>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004ef8:	2b20      	cmp	r3, #32
 8004efa:	f200 8209 	bhi.w	8005310 <UART_SetConfig+0x538>
 8004efe:	2b20      	cmp	r3, #32
 8004f00:	f200 825d 	bhi.w	80053be <UART_SetConfig+0x5e6>
 8004f04:	e8df f013 	tbh	[pc, r3, lsl #1]
 8004f08:	0230022a 	.word	0x0230022a
 8004f0c:	025b025b 	.word	0x025b025b
 8004f10:	025b0233 	.word	0x025b0233
 8004f14:	025b025b 	.word	0x025b025b
 8004f18:	025b0238 	.word	0x025b0238
 8004f1c:	025b025b 	.word	0x025b025b
 8004f20:	025b025b 	.word	0x025b025b
 8004f24:	025b025b 	.word	0x025b025b
 8004f28:	025b023d 	.word	0x025b023d
 8004f2c:	025b025b 	.word	0x025b025b
 8004f30:	025b025b 	.word	0x025b025b
 8004f34:	025b025b 	.word	0x025b025b
 8004f38:	025b025b 	.word	0x025b025b
 8004f3c:	025b025b 	.word	0x025b025b
 8004f40:	025b025b 	.word	0x025b025b
 8004f44:	025b025b 	.word	0x025b025b
 8004f48:	0249      	.short	0x0249
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004f4a:	2310      	movs	r3, #16
 8004f4c:	e7cb      	b.n	8004ee6 <UART_SetConfig+0x10e>
 8004f4e:	2320      	movs	r3, #32
 8004f50:	e7c9      	b.n	8004ee6 <UART_SetConfig+0x10e>
 8004f52:	2340      	movs	r3, #64	; 0x40
 8004f54:	e7c7      	b.n	8004ee6 <UART_SetConfig+0x10e>
 8004f56:	2380      	movs	r3, #128	; 0x80
 8004f58:	e7c5      	b.n	8004ee6 <UART_SetConfig+0x10e>
 8004f5a:	4b3a      	ldr	r3, [pc, #232]	; (8005044 <UART_SetConfig+0x26c>)
 8004f5c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004f5e:	f003 0307 	and.w	r3, r3, #7
 8004f62:	2b05      	cmp	r3, #5
 8004f64:	d811      	bhi.n	8004f8a <UART_SetConfig+0x1b2>
 8004f66:	e8df f013 	tbh	[pc, r3, lsl #1]
 8004f6a:	0006      	.short	0x0006
 8004f6c:	000800e0 	.word	0x000800e0
 8004f70:	000c000a 	.word	0x000c000a
 8004f74:	000e      	.short	0x000e
 8004f76:	2300      	movs	r3, #0
 8004f78:	e7b5      	b.n	8004ee6 <UART_SetConfig+0x10e>
 8004f7a:	2308      	movs	r3, #8
 8004f7c:	e7b3      	b.n	8004ee6 <UART_SetConfig+0x10e>
 8004f7e:	2310      	movs	r3, #16
 8004f80:	e7b1      	b.n	8004ee6 <UART_SetConfig+0x10e>
 8004f82:	2320      	movs	r3, #32
 8004f84:	e7af      	b.n	8004ee6 <UART_SetConfig+0x10e>
 8004f86:	2340      	movs	r3, #64	; 0x40
 8004f88:	e7ad      	b.n	8004ee6 <UART_SetConfig+0x10e>
 8004f8a:	2380      	movs	r3, #128	; 0x80
 8004f8c:	e7ab      	b.n	8004ee6 <UART_SetConfig+0x10e>
 8004f8e:	4b2d      	ldr	r3, [pc, #180]	; (8005044 <UART_SetConfig+0x26c>)
 8004f90:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004f92:	f003 0307 	and.w	r3, r3, #7
 8004f96:	2b05      	cmp	r3, #5
 8004f98:	d80e      	bhi.n	8004fb8 <UART_SetConfig+0x1e0>
 8004f9a:	e8df f003 	tbb	[pc, r3]
 8004f9e:	c803      	.short	0xc803
 8004fa0:	0b090705 	.word	0x0b090705
 8004fa4:	2300      	movs	r3, #0
 8004fa6:	e79e      	b.n	8004ee6 <UART_SetConfig+0x10e>
 8004fa8:	2308      	movs	r3, #8
 8004faa:	e79c      	b.n	8004ee6 <UART_SetConfig+0x10e>
 8004fac:	2310      	movs	r3, #16
 8004fae:	e79a      	b.n	8004ee6 <UART_SetConfig+0x10e>
 8004fb0:	2320      	movs	r3, #32
 8004fb2:	e798      	b.n	8004ee6 <UART_SetConfig+0x10e>
 8004fb4:	2340      	movs	r3, #64	; 0x40
 8004fb6:	e796      	b.n	8004ee6 <UART_SetConfig+0x10e>
 8004fb8:	2380      	movs	r3, #128	; 0x80
 8004fba:	e794      	b.n	8004ee6 <UART_SetConfig+0x10e>
 8004fbc:	4b21      	ldr	r3, [pc, #132]	; (8005044 <UART_SetConfig+0x26c>)
 8004fbe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004fc0:	f003 0307 	and.w	r3, r3, #7
 8004fc4:	2b05      	cmp	r3, #5
 8004fc6:	d80e      	bhi.n	8004fe6 <UART_SetConfig+0x20e>
 8004fc8:	e8df f003 	tbb	[pc, r3]
 8004fcc:	0705b303 	.word	0x0705b303
 8004fd0:	0b09      	.short	0x0b09
 8004fd2:	2300      	movs	r3, #0
 8004fd4:	e787      	b.n	8004ee6 <UART_SetConfig+0x10e>
 8004fd6:	2308      	movs	r3, #8
 8004fd8:	e785      	b.n	8004ee6 <UART_SetConfig+0x10e>
 8004fda:	2310      	movs	r3, #16
 8004fdc:	e783      	b.n	8004ee6 <UART_SetConfig+0x10e>
 8004fde:	2320      	movs	r3, #32
 8004fe0:	e781      	b.n	8004ee6 <UART_SetConfig+0x10e>
 8004fe2:	2340      	movs	r3, #64	; 0x40
 8004fe4:	e77f      	b.n	8004ee6 <UART_SetConfig+0x10e>
 8004fe6:	2380      	movs	r3, #128	; 0x80
 8004fe8:	e77d      	b.n	8004ee6 <UART_SetConfig+0x10e>
 8004fea:	4b16      	ldr	r3, [pc, #88]	; (8005044 <UART_SetConfig+0x26c>)
 8004fec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004fee:	f003 0307 	and.w	r3, r3, #7
 8004ff2:	2b05      	cmp	r3, #5
 8004ff4:	d80e      	bhi.n	8005014 <UART_SetConfig+0x23c>
 8004ff6:	e8df f003 	tbb	[pc, r3]
 8004ffa:	9e03      	.short	0x9e03
 8004ffc:	0b090705 	.word	0x0b090705
 8005000:	2300      	movs	r3, #0
 8005002:	e770      	b.n	8004ee6 <UART_SetConfig+0x10e>
 8005004:	2308      	movs	r3, #8
 8005006:	e76e      	b.n	8004ee6 <UART_SetConfig+0x10e>
 8005008:	2310      	movs	r3, #16
 800500a:	e76c      	b.n	8004ee6 <UART_SetConfig+0x10e>
 800500c:	2320      	movs	r3, #32
 800500e:	e76a      	b.n	8004ee6 <UART_SetConfig+0x10e>
 8005010:	2340      	movs	r3, #64	; 0x40
 8005012:	e768      	b.n	8004ee6 <UART_SetConfig+0x10e>
 8005014:	2380      	movs	r3, #128	; 0x80
 8005016:	e766      	b.n	8004ee6 <UART_SetConfig+0x10e>
 8005018:	cfff69f3 	.word	0xcfff69f3
 800501c:	58000c00 	.word	0x58000c00
 8005020:	11fff4ff 	.word	0x11fff4ff
 8005024:	40011000 	.word	0x40011000
 8005028:	40004400 	.word	0x40004400
 800502c:	40004800 	.word	0x40004800
 8005030:	40004c00 	.word	0x40004c00
 8005034:	40005000 	.word	0x40005000
 8005038:	40011400 	.word	0x40011400
 800503c:	40007800 	.word	0x40007800
 8005040:	40007c00 	.word	0x40007c00
 8005044:	58024400 	.word	0x58024400
 8005048:	4b7e      	ldr	r3, [pc, #504]	; (8005244 <UART_SetConfig+0x46c>)
 800504a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800504c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005050:	2b28      	cmp	r3, #40	; 0x28
 8005052:	d820      	bhi.n	8005096 <UART_SetConfig+0x2be>
 8005054:	e8df f003 	tbb	[pc, r3]
 8005058:	1f1f1f15 	.word	0x1f1f1f15
 800505c:	1f1f1f1f 	.word	0x1f1f1f1f
 8005060:	1f1f1f71 	.word	0x1f1f1f71
 8005064:	1f1f1f1f 	.word	0x1f1f1f1f
 8005068:	1f1f1f17 	.word	0x1f1f1f17
 800506c:	1f1f1f1f 	.word	0x1f1f1f1f
 8005070:	1f1f1f19 	.word	0x1f1f1f19
 8005074:	1f1f1f1f 	.word	0x1f1f1f1f
 8005078:	1f1f1f1b 	.word	0x1f1f1f1b
 800507c:	1f1f1f1f 	.word	0x1f1f1f1f
 8005080:	1d          	.byte	0x1d
 8005081:	00          	.byte	0x00
 8005082:	2301      	movs	r3, #1
 8005084:	e72f      	b.n	8004ee6 <UART_SetConfig+0x10e>
 8005086:	2308      	movs	r3, #8
 8005088:	e72d      	b.n	8004ee6 <UART_SetConfig+0x10e>
 800508a:	2310      	movs	r3, #16
 800508c:	e72b      	b.n	8004ee6 <UART_SetConfig+0x10e>
 800508e:	2320      	movs	r3, #32
 8005090:	e729      	b.n	8004ee6 <UART_SetConfig+0x10e>
 8005092:	2340      	movs	r3, #64	; 0x40
 8005094:	e727      	b.n	8004ee6 <UART_SetConfig+0x10e>
 8005096:	2380      	movs	r3, #128	; 0x80
 8005098:	e725      	b.n	8004ee6 <UART_SetConfig+0x10e>
 800509a:	4b6a      	ldr	r3, [pc, #424]	; (8005244 <UART_SetConfig+0x46c>)
 800509c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800509e:	f003 0307 	and.w	r3, r3, #7
 80050a2:	2b05      	cmp	r3, #5
 80050a4:	d80e      	bhi.n	80050c4 <UART_SetConfig+0x2ec>
 80050a6:	e8df f003 	tbb	[pc, r3]
 80050aa:	4a03      	.short	0x4a03
 80050ac:	0b090705 	.word	0x0b090705
 80050b0:	2300      	movs	r3, #0
 80050b2:	e718      	b.n	8004ee6 <UART_SetConfig+0x10e>
 80050b4:	2308      	movs	r3, #8
 80050b6:	e716      	b.n	8004ee6 <UART_SetConfig+0x10e>
 80050b8:	2310      	movs	r3, #16
 80050ba:	e714      	b.n	8004ee6 <UART_SetConfig+0x10e>
 80050bc:	2320      	movs	r3, #32
 80050be:	e712      	b.n	8004ee6 <UART_SetConfig+0x10e>
 80050c0:	2340      	movs	r3, #64	; 0x40
 80050c2:	e710      	b.n	8004ee6 <UART_SetConfig+0x10e>
 80050c4:	2380      	movs	r3, #128	; 0x80
 80050c6:	e70e      	b.n	8004ee6 <UART_SetConfig+0x10e>
 80050c8:	4b5e      	ldr	r3, [pc, #376]	; (8005244 <UART_SetConfig+0x46c>)
 80050ca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80050cc:	f003 0307 	and.w	r3, r3, #7
 80050d0:	2b05      	cmp	r3, #5
 80050d2:	d80e      	bhi.n	80050f2 <UART_SetConfig+0x31a>
 80050d4:	e8df f003 	tbb	[pc, r3]
 80050d8:	07053503 	.word	0x07053503
 80050dc:	0b09      	.short	0x0b09
 80050de:	2300      	movs	r3, #0
 80050e0:	e701      	b.n	8004ee6 <UART_SetConfig+0x10e>
 80050e2:	2308      	movs	r3, #8
 80050e4:	e6ff      	b.n	8004ee6 <UART_SetConfig+0x10e>
 80050e6:	2310      	movs	r3, #16
 80050e8:	e6fd      	b.n	8004ee6 <UART_SetConfig+0x10e>
 80050ea:	2320      	movs	r3, #32
 80050ec:	e6fb      	b.n	8004ee6 <UART_SetConfig+0x10e>
 80050ee:	2340      	movs	r3, #64	; 0x40
 80050f0:	e6f9      	b.n	8004ee6 <UART_SetConfig+0x10e>
 80050f2:	2380      	movs	r3, #128	; 0x80
 80050f4:	e6f7      	b.n	8004ee6 <UART_SetConfig+0x10e>
 80050f6:	f503 330e 	add.w	r3, r3, #145408	; 0x23800
 80050fa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80050fc:	f003 0307 	and.w	r3, r3, #7
 8005100:	2b05      	cmp	r3, #5
 8005102:	d80e      	bhi.n	8005122 <UART_SetConfig+0x34a>
 8005104:	e8df f003 	tbb	[pc, r3]
 8005108:	07051f03 	.word	0x07051f03
 800510c:	0b09      	.short	0x0b09
 800510e:	2302      	movs	r3, #2
 8005110:	e6e9      	b.n	8004ee6 <UART_SetConfig+0x10e>
 8005112:	2308      	movs	r3, #8
 8005114:	e6e7      	b.n	8004ee6 <UART_SetConfig+0x10e>
 8005116:	2310      	movs	r3, #16
 8005118:	e6e5      	b.n	8004ee6 <UART_SetConfig+0x10e>
 800511a:	2320      	movs	r3, #32
 800511c:	e6e3      	b.n	8004ee6 <UART_SetConfig+0x10e>
 800511e:	2340      	movs	r3, #64	; 0x40
 8005120:	e6e1      	b.n	8004ee6 <UART_SetConfig+0x10e>
 8005122:	2380      	movs	r3, #128	; 0x80
 8005124:	e6df      	b.n	8004ee6 <UART_SetConfig+0x10e>
 8005126:	2304      	movs	r3, #4
 8005128:	e6dd      	b.n	8004ee6 <UART_SetConfig+0x10e>
 800512a:	2304      	movs	r3, #4
 800512c:	e6db      	b.n	8004ee6 <UART_SetConfig+0x10e>
 800512e:	2304      	movs	r3, #4
 8005130:	e6d9      	b.n	8004ee6 <UART_SetConfig+0x10e>
 8005132:	2304      	movs	r3, #4
 8005134:	e6d7      	b.n	8004ee6 <UART_SetConfig+0x10e>
 8005136:	2304      	movs	r3, #4
 8005138:	e6d5      	b.n	8004ee6 <UART_SetConfig+0x10e>
 800513a:	2304      	movs	r3, #4
 800513c:	e6d3      	b.n	8004ee6 <UART_SetConfig+0x10e>
 800513e:	2304      	movs	r3, #4
 8005140:	e6d1      	b.n	8004ee6 <UART_SetConfig+0x10e>
 8005142:	2304      	movs	r3, #4
 8005144:	e6cf      	b.n	8004ee6 <UART_SetConfig+0x10e>
 8005146:	2304      	movs	r3, #4
 8005148:	e6cd      	b.n	8004ee6 <UART_SetConfig+0x10e>
    switch (clocksource)
 800514a:	2b20      	cmp	r3, #32
 800514c:	d827      	bhi.n	800519e <UART_SetConfig+0x3c6>
 800514e:	2b02      	cmp	r3, #2
 8005150:	f0c0 8127 	bcc.w	80053a2 <UART_SetConfig+0x5ca>
 8005154:	3b02      	subs	r3, #2
 8005156:	2b1e      	cmp	r3, #30
 8005158:	f200 8125 	bhi.w	80053a6 <UART_SetConfig+0x5ce>
 800515c:	e8df f013 	tbh	[pc, r3, lsl #1]
 8005160:	01230052 	.word	0x01230052
 8005164:	01230058 	.word	0x01230058
 8005168:	01230123 	.word	0x01230123
 800516c:	0123005d 	.word	0x0123005d
 8005170:	01230123 	.word	0x01230123
 8005174:	01230123 	.word	0x01230123
 8005178:	01230123 	.word	0x01230123
 800517c:	01230062 	.word	0x01230062
 8005180:	01230123 	.word	0x01230123
 8005184:	01230123 	.word	0x01230123
 8005188:	01230123 	.word	0x01230123
 800518c:	01230123 	.word	0x01230123
 8005190:	01230123 	.word	0x01230123
 8005194:	01230123 	.word	0x01230123
 8005198:	01230123 	.word	0x01230123
 800519c:	006e      	.short	0x006e
 800519e:	2b40      	cmp	r3, #64	; 0x40
 80051a0:	d12e      	bne.n	8005200 <UART_SetConfig+0x428>
        pclk = (uint32_t) LSE_VALUE;
 80051a2:	f44f 4000 	mov.w	r0, #32768	; 0x8000
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80051a6:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80051a8:	4b27      	ldr	r3, [pc, #156]	; (8005248 <UART_SetConfig+0x470>)
 80051aa:	f833 2012 	ldrh.w	r2, [r3, r2, lsl #1]
 80051ae:	fbb0 f3f2 	udiv	r3, r0, r2
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80051b2:	6865      	ldr	r5, [r4, #4]
 80051b4:	eb05 0145 	add.w	r1, r5, r5, lsl #1
 80051b8:	4299      	cmp	r1, r3
 80051ba:	f200 80f6 	bhi.w	80053aa <UART_SetConfig+0x5d2>
 80051be:	ebb3 3f05 	cmp.w	r3, r5, lsl #12
 80051c2:	f200 80f4 	bhi.w	80053ae <UART_SetConfig+0x5d6>
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, (uint64_t)huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80051c6:	f04f 0800 	mov.w	r8, #0
 80051ca:	b292      	uxth	r2, r2
 80051cc:	2300      	movs	r3, #0
 80051ce:	4641      	mov	r1, r8
 80051d0:	f7fb f8d6 	bl	8000380 <__aeabi_uldivmod>
 80051d4:	020f      	lsls	r7, r1, #8
 80051d6:	ea47 6710 	orr.w	r7, r7, r0, lsr #24
 80051da:	0206      	lsls	r6, r0, #8
 80051dc:	0868      	lsrs	r0, r5, #1
 80051de:	462a      	mov	r2, r5
 80051e0:	4643      	mov	r3, r8
 80051e2:	1830      	adds	r0, r6, r0
 80051e4:	f147 0100 	adc.w	r1, r7, #0
 80051e8:	f7fb f8ca 	bl	8000380 <__aeabi_uldivmod>
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80051ec:	f5a0 7240 	sub.w	r2, r0, #768	; 0x300
 80051f0:	4b16      	ldr	r3, [pc, #88]	; (800524c <UART_SetConfig+0x474>)
 80051f2:	429a      	cmp	r2, r3
 80051f4:	f200 80dd 	bhi.w	80053b2 <UART_SetConfig+0x5da>
          huart->Instance->BRR = usartdiv;
 80051f8:	6823      	ldr	r3, [r4, #0]
 80051fa:	60d8      	str	r0, [r3, #12]
 80051fc:	4640      	mov	r0, r8
 80051fe:	e0a2      	b.n	8005346 <UART_SetConfig+0x56e>
    switch (clocksource)
 8005200:	2001      	movs	r0, #1
 8005202:	e0a0      	b.n	8005346 <UART_SetConfig+0x56e>
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8005204:	f7fe ffe8 	bl	80041d8 <HAL_RCCEx_GetD3PCLK1Freq>
    if (pclk != 0U)
 8005208:	2800      	cmp	r0, #0
 800520a:	d1cc      	bne.n	80051a6 <UART_SetConfig+0x3ce>
 800520c:	2000      	movs	r0, #0
 800520e:	e09a      	b.n	8005346 <UART_SetConfig+0x56e>
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005210:	a803      	add	r0, sp, #12
 8005212:	f7fe fff3 	bl	80041fc <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8005216:	9804      	ldr	r0, [sp, #16]
        break;
 8005218:	e7f6      	b.n	8005208 <UART_SetConfig+0x430>
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800521a:	4668      	mov	r0, sp
 800521c:	f7ff f8ec 	bl	80043f8 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8005220:	9801      	ldr	r0, [sp, #4]
        break;
 8005222:	e7f1      	b.n	8005208 <UART_SetConfig+0x430>
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005224:	4b07      	ldr	r3, [pc, #28]	; (8005244 <UART_SetConfig+0x46c>)
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	f013 0f20 	tst.w	r3, #32
 800522c:	d008      	beq.n	8005240 <UART_SetConfig+0x468>
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800522e:	4b05      	ldr	r3, [pc, #20]	; (8005244 <UART_SetConfig+0x46c>)
 8005230:	681b      	ldr	r3, [r3, #0]
 8005232:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 8005236:	4806      	ldr	r0, [pc, #24]	; (8005250 <UART_SetConfig+0x478>)
 8005238:	40d8      	lsrs	r0, r3
 800523a:	e7e5      	b.n	8005208 <UART_SetConfig+0x430>
    switch (clocksource)
 800523c:	4805      	ldr	r0, [pc, #20]	; (8005254 <UART_SetConfig+0x47c>)
 800523e:	e7b2      	b.n	80051a6 <UART_SetConfig+0x3ce>
          pclk = (uint32_t) HSI_VALUE;
 8005240:	4803      	ldr	r0, [pc, #12]	; (8005250 <UART_SetConfig+0x478>)
 8005242:	e7b0      	b.n	80051a6 <UART_SetConfig+0x3ce>
 8005244:	58024400 	.word	0x58024400
 8005248:	08009568 	.word	0x08009568
 800524c:	000ffcff 	.word	0x000ffcff
 8005250:	03d09000 	.word	0x03d09000
 8005254:	003d0900 	.word	0x003d0900
    switch (clocksource)
 8005258:	2b20      	cmp	r3, #32
 800525a:	d815      	bhi.n	8005288 <UART_SetConfig+0x4b0>
 800525c:	2b20      	cmp	r3, #32
 800525e:	f200 80aa 	bhi.w	80053b6 <UART_SetConfig+0x5de>
 8005262:	e8df f003 	tbb	[pc, r3]
 8005266:	3832      	.short	0x3832
 8005268:	a83ba8a8 	.word	0xa83ba8a8
 800526c:	a840a8a8 	.word	0xa840a8a8
 8005270:	a8a8a8a8 	.word	0xa8a8a8a8
 8005274:	a845a8a8 	.word	0xa845a8a8
 8005278:	a8a8a8a8 	.word	0xa8a8a8a8
 800527c:	a8a8a8a8 	.word	0xa8a8a8a8
 8005280:	a8a8a8a8 	.word	0xa8a8a8a8
 8005284:	a8a8      	.short	0xa8a8
 8005286:	51          	.byte	0x51
 8005287:	00          	.byte	0x00
 8005288:	2b40      	cmp	r3, #64	; 0x40
 800528a:	d11c      	bne.n	80052c6 <UART_SetConfig+0x4ee>
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800528c:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800528e:	4b4e      	ldr	r3, [pc, #312]	; (80053c8 <UART_SetConfig+0x5f0>)
 8005290:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8005294:	fbb0 f0f3 	udiv	r0, r0, r3
 8005298:	6862      	ldr	r2, [r4, #4]
 800529a:	0853      	lsrs	r3, r2, #1
 800529c:	eb03 0040 	add.w	r0, r3, r0, lsl #1
 80052a0:	fbb0 f0f2 	udiv	r0, r0, r2
 80052a4:	b280      	uxth	r0, r0
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80052a6:	f1a0 0210 	sub.w	r2, r0, #16
 80052aa:	f64f 73ef 	movw	r3, #65519	; 0xffef
 80052ae:	429a      	cmp	r2, r3
 80052b0:	f200 8083 	bhi.w	80053ba <UART_SetConfig+0x5e2>
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80052b4:	f020 030f 	bic.w	r3, r0, #15
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80052b8:	f3c0 0042 	ubfx	r0, r0, #1, #3
 80052bc:	4318      	orrs	r0, r3
        huart->Instance->BRR = brrtemp;
 80052be:	6823      	ldr	r3, [r4, #0]
 80052c0:	60d8      	str	r0, [r3, #12]
 80052c2:	2000      	movs	r0, #0
 80052c4:	e03f      	b.n	8005346 <UART_SetConfig+0x56e>
    switch (clocksource)
 80052c6:	2001      	movs	r0, #1
 80052c8:	e03d      	b.n	8005346 <UART_SetConfig+0x56e>
        pclk = HAL_RCC_GetPCLK1Freq();
 80052ca:	f7fe f955 	bl	8003578 <HAL_RCC_GetPCLK1Freq>
    if (pclk != 0U)
 80052ce:	2800      	cmp	r0, #0
 80052d0:	d1dc      	bne.n	800528c <UART_SetConfig+0x4b4>
 80052d2:	2000      	movs	r0, #0
 80052d4:	e037      	b.n	8005346 <UART_SetConfig+0x56e>
        pclk = HAL_RCC_GetPCLK2Freq();
 80052d6:	f7fe f961 	bl	800359c <HAL_RCC_GetPCLK2Freq>
        break;
 80052da:	e7f8      	b.n	80052ce <UART_SetConfig+0x4f6>
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80052dc:	a803      	add	r0, sp, #12
 80052de:	f7fe ff8d 	bl	80041fc <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80052e2:	9804      	ldr	r0, [sp, #16]
        break;
 80052e4:	e7f3      	b.n	80052ce <UART_SetConfig+0x4f6>
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80052e6:	4668      	mov	r0, sp
 80052e8:	f7ff f886 	bl	80043f8 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80052ec:	9801      	ldr	r0, [sp, #4]
        break;
 80052ee:	e7ee      	b.n	80052ce <UART_SetConfig+0x4f6>
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80052f0:	4b36      	ldr	r3, [pc, #216]	; (80053cc <UART_SetConfig+0x5f4>)
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	f013 0f20 	tst.w	r3, #32
 80052f8:	d008      	beq.n	800530c <UART_SetConfig+0x534>
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80052fa:	4b34      	ldr	r3, [pc, #208]	; (80053cc <UART_SetConfig+0x5f4>)
 80052fc:	681b      	ldr	r3, [r3, #0]
 80052fe:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 8005302:	4833      	ldr	r0, [pc, #204]	; (80053d0 <UART_SetConfig+0x5f8>)
 8005304:	40d8      	lsrs	r0, r3
 8005306:	e7e2      	b.n	80052ce <UART_SetConfig+0x4f6>
    switch (clocksource)
 8005308:	4832      	ldr	r0, [pc, #200]	; (80053d4 <UART_SetConfig+0x5fc>)
 800530a:	e7bf      	b.n	800528c <UART_SetConfig+0x4b4>
          pclk = (uint32_t) HSI_VALUE;
 800530c:	4830      	ldr	r0, [pc, #192]	; (80053d0 <UART_SetConfig+0x5f8>)
 800530e:	e7bd      	b.n	800528c <UART_SetConfig+0x4b4>
    switch (clocksource)
 8005310:	2b40      	cmp	r3, #64	; 0x40
 8005312:	d117      	bne.n	8005344 <UART_SetConfig+0x56c>
        break;
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
        break;
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005314:	f44f 4000 	mov.w	r0, #32768	; 0x8000
    }

    if (pclk != 0U)
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005318:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800531a:	4b2b      	ldr	r3, [pc, #172]	; (80053c8 <UART_SetConfig+0x5f0>)
 800531c:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8005320:	fbb0 f0f3 	udiv	r0, r0, r3
 8005324:	6863      	ldr	r3, [r4, #4]
 8005326:	eb00 0053 	add.w	r0, r0, r3, lsr #1
 800532a:	fbb0 f0f3 	udiv	r0, r0, r3
 800532e:	b280      	uxth	r0, r0
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005330:	f1a0 0210 	sub.w	r2, r0, #16
 8005334:	f64f 73ef 	movw	r3, #65519	; 0xffef
 8005338:	429a      	cmp	r2, r3
 800533a:	d842      	bhi.n	80053c2 <UART_SetConfig+0x5ea>
      {
        huart->Instance->BRR = usartdiv;
 800533c:	6823      	ldr	r3, [r4, #0]
 800533e:	60d8      	str	r0, [r3, #12]
 8005340:	2000      	movs	r0, #0
 8005342:	e000      	b.n	8005346 <UART_SetConfig+0x56e>
    switch (clocksource)
 8005344:	2001      	movs	r0, #1
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8005346:	2301      	movs	r3, #1
 8005348:	f8a4 306a 	strh.w	r3, [r4, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800534c:	f8a4 3068 	strh.w	r3, [r4, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005350:	2300      	movs	r3, #0
 8005352:	66e3      	str	r3, [r4, #108]	; 0x6c
  huart->TxISR = NULL;
 8005354:	6723      	str	r3, [r4, #112]	; 0x70

  return ret;
}
 8005356:	b006      	add	sp, #24
 8005358:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        pclk = HAL_RCC_GetPCLK1Freq();
 800535c:	f7fe f90c 	bl	8003578 <HAL_RCC_GetPCLK1Freq>
    if (pclk != 0U)
 8005360:	2800      	cmp	r0, #0
 8005362:	d1d9      	bne.n	8005318 <UART_SetConfig+0x540>
 8005364:	2000      	movs	r0, #0
 8005366:	e7ee      	b.n	8005346 <UART_SetConfig+0x56e>
        pclk = HAL_RCC_GetPCLK2Freq();
 8005368:	f7fe f918 	bl	800359c <HAL_RCC_GetPCLK2Freq>
        break;
 800536c:	e7f8      	b.n	8005360 <UART_SetConfig+0x588>
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800536e:	a803      	add	r0, sp, #12
 8005370:	f7fe ff44 	bl	80041fc <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8005374:	9804      	ldr	r0, [sp, #16]
        break;
 8005376:	e7f3      	b.n	8005360 <UART_SetConfig+0x588>
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005378:	4668      	mov	r0, sp
 800537a:	f7ff f83d 	bl	80043f8 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800537e:	9801      	ldr	r0, [sp, #4]
        break;
 8005380:	e7ee      	b.n	8005360 <UART_SetConfig+0x588>
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005382:	4b12      	ldr	r3, [pc, #72]	; (80053cc <UART_SetConfig+0x5f4>)
 8005384:	681b      	ldr	r3, [r3, #0]
 8005386:	f013 0f20 	tst.w	r3, #32
 800538a:	d008      	beq.n	800539e <UART_SetConfig+0x5c6>
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800538c:	4b0f      	ldr	r3, [pc, #60]	; (80053cc <UART_SetConfig+0x5f4>)
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 8005394:	480e      	ldr	r0, [pc, #56]	; (80053d0 <UART_SetConfig+0x5f8>)
 8005396:	40d8      	lsrs	r0, r3
 8005398:	e7e2      	b.n	8005360 <UART_SetConfig+0x588>
    switch (clocksource)
 800539a:	480e      	ldr	r0, [pc, #56]	; (80053d4 <UART_SetConfig+0x5fc>)
 800539c:	e7bc      	b.n	8005318 <UART_SetConfig+0x540>
          pclk = (uint32_t) HSI_VALUE;
 800539e:	480c      	ldr	r0, [pc, #48]	; (80053d0 <UART_SetConfig+0x5f8>)
 80053a0:	e7ba      	b.n	8005318 <UART_SetConfig+0x540>
    switch (clocksource)
 80053a2:	2001      	movs	r0, #1
 80053a4:	e7cf      	b.n	8005346 <UART_SetConfig+0x56e>
 80053a6:	2001      	movs	r0, #1
 80053a8:	e7cd      	b.n	8005346 <UART_SetConfig+0x56e>
        ret = HAL_ERROR;
 80053aa:	2001      	movs	r0, #1
 80053ac:	e7cb      	b.n	8005346 <UART_SetConfig+0x56e>
 80053ae:	2001      	movs	r0, #1
 80053b0:	e7c9      	b.n	8005346 <UART_SetConfig+0x56e>
          ret = HAL_ERROR;
 80053b2:	2001      	movs	r0, #1
 80053b4:	e7c7      	b.n	8005346 <UART_SetConfig+0x56e>
    switch (clocksource)
 80053b6:	2001      	movs	r0, #1
 80053b8:	e7c5      	b.n	8005346 <UART_SetConfig+0x56e>
        ret = HAL_ERROR;
 80053ba:	2001      	movs	r0, #1
 80053bc:	e7c3      	b.n	8005346 <UART_SetConfig+0x56e>
    switch (clocksource)
 80053be:	2001      	movs	r0, #1
 80053c0:	e7c1      	b.n	8005346 <UART_SetConfig+0x56e>
        ret = HAL_ERROR;
 80053c2:	2001      	movs	r0, #1
 80053c4:	e7bf      	b.n	8005346 <UART_SetConfig+0x56e>
 80053c6:	bf00      	nop
 80053c8:	08009568 	.word	0x08009568
 80053cc:	58024400 	.word	0x58024400
 80053d0:	03d09000 	.word	0x03d09000
 80053d4:	003d0900 	.word	0x003d0900

080053d8 <UART_AdvFeatureConfig>:
{
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80053d8:	6a83      	ldr	r3, [r0, #40]	; 0x28
 80053da:	f013 0f01 	tst.w	r3, #1
 80053de:	d006      	beq.n	80053ee <UART_AdvFeatureConfig+0x16>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80053e0:	6802      	ldr	r2, [r0, #0]
 80053e2:	6853      	ldr	r3, [r2, #4]
 80053e4:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80053e8:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
 80053ea:	430b      	orrs	r3, r1
 80053ec:	6053      	str	r3, [r2, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80053ee:	6a83      	ldr	r3, [r0, #40]	; 0x28
 80053f0:	f013 0f02 	tst.w	r3, #2
 80053f4:	d006      	beq.n	8005404 <UART_AdvFeatureConfig+0x2c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80053f6:	6802      	ldr	r2, [r0, #0]
 80053f8:	6853      	ldr	r3, [r2, #4]
 80053fa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80053fe:	6b01      	ldr	r1, [r0, #48]	; 0x30
 8005400:	430b      	orrs	r3, r1
 8005402:	6053      	str	r3, [r2, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005404:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8005406:	f013 0f04 	tst.w	r3, #4
 800540a:	d006      	beq.n	800541a <UART_AdvFeatureConfig+0x42>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800540c:	6802      	ldr	r2, [r0, #0]
 800540e:	6853      	ldr	r3, [r2, #4]
 8005410:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005414:	6b41      	ldr	r1, [r0, #52]	; 0x34
 8005416:	430b      	orrs	r3, r1
 8005418:	6053      	str	r3, [r2, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800541a:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800541c:	f013 0f08 	tst.w	r3, #8
 8005420:	d006      	beq.n	8005430 <UART_AdvFeatureConfig+0x58>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005422:	6802      	ldr	r2, [r0, #0]
 8005424:	6853      	ldr	r3, [r2, #4]
 8005426:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800542a:	6b81      	ldr	r1, [r0, #56]	; 0x38
 800542c:	430b      	orrs	r3, r1
 800542e:	6053      	str	r3, [r2, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005430:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8005432:	f013 0f10 	tst.w	r3, #16
 8005436:	d006      	beq.n	8005446 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005438:	6802      	ldr	r2, [r0, #0]
 800543a:	6893      	ldr	r3, [r2, #8]
 800543c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005440:	6bc1      	ldr	r1, [r0, #60]	; 0x3c
 8005442:	430b      	orrs	r3, r1
 8005444:	6093      	str	r3, [r2, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005446:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8005448:	f013 0f20 	tst.w	r3, #32
 800544c:	d006      	beq.n	800545c <UART_AdvFeatureConfig+0x84>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800544e:	6802      	ldr	r2, [r0, #0]
 8005450:	6893      	ldr	r3, [r2, #8]
 8005452:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005456:	6c01      	ldr	r1, [r0, #64]	; 0x40
 8005458:	430b      	orrs	r3, r1
 800545a:	6093      	str	r3, [r2, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800545c:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800545e:	f013 0f40 	tst.w	r3, #64	; 0x40
 8005462:	d00a      	beq.n	800547a <UART_AdvFeatureConfig+0xa2>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005464:	6802      	ldr	r2, [r0, #0]
 8005466:	6853      	ldr	r3, [r2, #4]
 8005468:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800546c:	6c41      	ldr	r1, [r0, #68]	; 0x44
 800546e:	430b      	orrs	r3, r1
 8005470:	6053      	str	r3, [r2, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005472:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8005474:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005478:	d00b      	beq.n	8005492 <UART_AdvFeatureConfig+0xba>
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800547a:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800547c:	f013 0f80 	tst.w	r3, #128	; 0x80
 8005480:	d006      	beq.n	8005490 <UART_AdvFeatureConfig+0xb8>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005482:	6802      	ldr	r2, [r0, #0]
 8005484:	6853      	ldr	r3, [r2, #4]
 8005486:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 800548a:	6cc1      	ldr	r1, [r0, #76]	; 0x4c
 800548c:	430b      	orrs	r3, r1
 800548e:	6053      	str	r3, [r2, #4]
  }
}
 8005490:	4770      	bx	lr
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005492:	6802      	ldr	r2, [r0, #0]
 8005494:	6853      	ldr	r3, [r2, #4]
 8005496:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 800549a:	6c81      	ldr	r1, [r0, #72]	; 0x48
 800549c:	430b      	orrs	r3, r1
 800549e:	6053      	str	r3, [r2, #4]
 80054a0:	e7eb      	b.n	800547a <UART_AdvFeatureConfig+0xa2>

080054a2 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80054a2:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80054a6:	4605      	mov	r5, r0
 80054a8:	460f      	mov	r7, r1
 80054aa:	4616      	mov	r6, r2
 80054ac:	4699      	mov	r9, r3
 80054ae:	f8dd 8020 	ldr.w	r8, [sp, #32]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80054b2:	682c      	ldr	r4, [r5, #0]
 80054b4:	69e4      	ldr	r4, [r4, #28]
 80054b6:	ea37 0304 	bics.w	r3, r7, r4
 80054ba:	bf0c      	ite	eq
 80054bc:	2401      	moveq	r4, #1
 80054be:	2400      	movne	r4, #0
 80054c0:	42b4      	cmp	r4, r6
 80054c2:	d141      	bne.n	8005548 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80054c4:	f1b8 3fff 	cmp.w	r8, #4294967295
 80054c8:	d0f3      	beq.n	80054b2 <UART_WaitOnFlagUntilTimeout+0x10>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80054ca:	f7fb fc8f 	bl	8000dec <HAL_GetTick>
 80054ce:	eba0 0009 	sub.w	r0, r0, r9
 80054d2:	4540      	cmp	r0, r8
 80054d4:	d824      	bhi.n	8005520 <UART_WaitOnFlagUntilTimeout+0x7e>
 80054d6:	f1b8 0f00 	cmp.w	r8, #0
 80054da:	d021      	beq.n	8005520 <UART_WaitOnFlagUntilTimeout+0x7e>
        __HAL_UNLOCK(huart);

        return HAL_TIMEOUT;
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80054dc:	682b      	ldr	r3, [r5, #0]
 80054de:	681a      	ldr	r2, [r3, #0]
 80054e0:	f012 0f04 	tst.w	r2, #4
 80054e4:	d0e5      	beq.n	80054b2 <UART_WaitOnFlagUntilTimeout+0x10>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80054e6:	69da      	ldr	r2, [r3, #28]
 80054e8:	f412 6f00 	tst.w	r2, #2048	; 0x800
 80054ec:	d0e1      	beq.n	80054b2 <UART_WaitOnFlagUntilTimeout+0x10>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80054ee:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80054f2:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 80054f4:	682a      	ldr	r2, [r5, #0]
 80054f6:	6813      	ldr	r3, [r2, #0]
 80054f8:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80054fc:	6013      	str	r3, [r2, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80054fe:	682a      	ldr	r2, [r5, #0]
 8005500:	6893      	ldr	r3, [r2, #8]
 8005502:	f023 0301 	bic.w	r3, r3, #1
 8005506:	6093      	str	r3, [r2, #8]

          huart->gState = HAL_UART_STATE_READY;
 8005508:	2320      	movs	r3, #32
 800550a:	f8c5 3080 	str.w	r3, [r5, #128]	; 0x80
          huart->RxState = HAL_UART_STATE_READY;
 800550e:	f8c5 3084 	str.w	r3, [r5, #132]	; 0x84
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005512:	f8c5 3088 	str.w	r3, [r5, #136]	; 0x88

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005516:	2300      	movs	r3, #0
 8005518:	f885 307c 	strb.w	r3, [r5, #124]	; 0x7c

          return HAL_TIMEOUT;
 800551c:	2003      	movs	r0, #3
 800551e:	e014      	b.n	800554a <UART_WaitOnFlagUntilTimeout+0xa8>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8005520:	682a      	ldr	r2, [r5, #0]
 8005522:	6813      	ldr	r3, [r2, #0]
 8005524:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005528:	6013      	str	r3, [r2, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800552a:	682a      	ldr	r2, [r5, #0]
 800552c:	6893      	ldr	r3, [r2, #8]
 800552e:	f023 0301 	bic.w	r3, r3, #1
 8005532:	6093      	str	r3, [r2, #8]
        huart->gState = HAL_UART_STATE_READY;
 8005534:	2320      	movs	r3, #32
 8005536:	f8c5 3080 	str.w	r3, [r5, #128]	; 0x80
        huart->RxState = HAL_UART_STATE_READY;
 800553a:	f8c5 3084 	str.w	r3, [r5, #132]	; 0x84
        __HAL_UNLOCK(huart);
 800553e:	2300      	movs	r3, #0
 8005540:	f885 307c 	strb.w	r3, [r5, #124]	; 0x7c
        return HAL_TIMEOUT;
 8005544:	2003      	movs	r0, #3
 8005546:	e000      	b.n	800554a <UART_WaitOnFlagUntilTimeout+0xa8>
        }
      }
    }
  }
  return HAL_OK;
 8005548:	2000      	movs	r0, #0
}
 800554a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

0800554e <UART_CheckIdleState>:
{
 800554e:	b530      	push	{r4, r5, lr}
 8005550:	b083      	sub	sp, #12
 8005552:	4604      	mov	r4, r0
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005554:	2300      	movs	r3, #0
 8005556:	f8c0 3088 	str.w	r3, [r0, #136]	; 0x88
  tickstart = HAL_GetTick();
 800555a:	f7fb fc47 	bl	8000dec <HAL_GetTick>
 800555e:	4605      	mov	r5, r0
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005560:	6823      	ldr	r3, [r4, #0]
 8005562:	681b      	ldr	r3, [r3, #0]
 8005564:	f013 0f08 	tst.w	r3, #8
 8005568:	d10e      	bne.n	8005588 <UART_CheckIdleState+0x3a>
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800556a:	6823      	ldr	r3, [r4, #0]
 800556c:	681b      	ldr	r3, [r3, #0]
 800556e:	f013 0f04 	tst.w	r3, #4
 8005572:	d117      	bne.n	80055a4 <UART_CheckIdleState+0x56>
  huart->gState = HAL_UART_STATE_READY;
 8005574:	2320      	movs	r3, #32
 8005576:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_READY;
 800557a:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
  __HAL_UNLOCK(huart);
 800557e:	2000      	movs	r0, #0
 8005580:	f884 007c 	strb.w	r0, [r4, #124]	; 0x7c
}
 8005584:	b003      	add	sp, #12
 8005586:	bd30      	pop	{r4, r5, pc}
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005588:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800558c:	9300      	str	r3, [sp, #0]
 800558e:	4603      	mov	r3, r0
 8005590:	2200      	movs	r2, #0
 8005592:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8005596:	4620      	mov	r0, r4
 8005598:	f7ff ff83 	bl	80054a2 <UART_WaitOnFlagUntilTimeout>
 800559c:	2800      	cmp	r0, #0
 800559e:	d0e4      	beq.n	800556a <UART_CheckIdleState+0x1c>
      return HAL_TIMEOUT;
 80055a0:	2003      	movs	r0, #3
 80055a2:	e7ef      	b.n	8005584 <UART_CheckIdleState+0x36>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80055a4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80055a8:	9300      	str	r3, [sp, #0]
 80055aa:	462b      	mov	r3, r5
 80055ac:	2200      	movs	r2, #0
 80055ae:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80055b2:	4620      	mov	r0, r4
 80055b4:	f7ff ff75 	bl	80054a2 <UART_WaitOnFlagUntilTimeout>
 80055b8:	2800      	cmp	r0, #0
 80055ba:	d0db      	beq.n	8005574 <UART_CheckIdleState+0x26>
      return HAL_TIMEOUT;
 80055bc:	2003      	movs	r0, #3
 80055be:	e7e1      	b.n	8005584 <UART_CheckIdleState+0x36>

080055c0 <HAL_LIN_Init>:
  if (huart == NULL)
 80055c0:	2800      	cmp	r0, #0
 80055c2:	d042      	beq.n	800564a <HAL_LIN_Init+0x8a>
{
 80055c4:	b538      	push	{r3, r4, r5, lr}
 80055c6:	460d      	mov	r5, r1
 80055c8:	4604      	mov	r4, r0
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80055ca:	69c3      	ldr	r3, [r0, #28]
 80055cc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80055d0:	d03d      	beq.n	800564e <HAL_LIN_Init+0x8e>
  if (huart->Init.WordLength != UART_WORDLENGTH_8B)
 80055d2:	6883      	ldr	r3, [r0, #8]
 80055d4:	2b00      	cmp	r3, #0
 80055d6:	d13c      	bne.n	8005652 <HAL_LIN_Init+0x92>
  if (huart->gState == HAL_UART_STATE_RESET)
 80055d8:	f8d0 3080 	ldr.w	r3, [r0, #128]	; 0x80
 80055dc:	b363      	cbz	r3, 8005638 <HAL_LIN_Init+0x78>
  huart->gState = HAL_UART_STATE_BUSY;
 80055de:	2324      	movs	r3, #36	; 0x24
 80055e0:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
  __HAL_UART_DISABLE(huart);
 80055e4:	6822      	ldr	r2, [r4, #0]
 80055e6:	6813      	ldr	r3, [r2, #0]
 80055e8:	f023 0301 	bic.w	r3, r3, #1
 80055ec:	6013      	str	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 80055ee:	4620      	mov	r0, r4
 80055f0:	f7ff fbf2 	bl	8004dd8 <UART_SetConfig>
 80055f4:	2801      	cmp	r0, #1
 80055f6:	d01e      	beq.n	8005636 <HAL_LIN_Init+0x76>
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80055f8:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80055fa:	bb13      	cbnz	r3, 8005642 <HAL_LIN_Init+0x82>
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
 80055fc:	6822      	ldr	r2, [r4, #0]
 80055fe:	6853      	ldr	r3, [r2, #4]
 8005600:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005604:	6053      	str	r3, [r2, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_HDSEL | USART_CR3_IREN | USART_CR3_SCEN));
 8005606:	6822      	ldr	r2, [r4, #0]
 8005608:	6893      	ldr	r3, [r2, #8]
 800560a:	f023 032a 	bic.w	r3, r3, #42	; 0x2a
 800560e:	6093      	str	r3, [r2, #8]
  SET_BIT(huart->Instance->CR2, USART_CR2_LINEN);
 8005610:	6822      	ldr	r2, [r4, #0]
 8005612:	6853      	ldr	r3, [r2, #4]
 8005614:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005618:	6053      	str	r3, [r2, #4]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_LBDL, BreakDetectLength);
 800561a:	6822      	ldr	r2, [r4, #0]
 800561c:	6853      	ldr	r3, [r2, #4]
 800561e:	f023 0320 	bic.w	r3, r3, #32
 8005622:	432b      	orrs	r3, r5
 8005624:	6053      	str	r3, [r2, #4]
  __HAL_UART_ENABLE(huart);
 8005626:	6822      	ldr	r2, [r4, #0]
 8005628:	6813      	ldr	r3, [r2, #0]
 800562a:	f043 0301 	orr.w	r3, r3, #1
 800562e:	6013      	str	r3, [r2, #0]
  return (UART_CheckIdleState(huart));
 8005630:	4620      	mov	r0, r4
 8005632:	f7ff ff8c 	bl	800554e <UART_CheckIdleState>
}
 8005636:	bd38      	pop	{r3, r4, r5, pc}
    huart->Lock = HAL_UNLOCKED;
 8005638:	f880 307c 	strb.w	r3, [r0, #124]	; 0x7c
    HAL_UART_MspInit(huart);
 800563c:	f002 fbaa 	bl	8007d94 <HAL_UART_MspInit>
 8005640:	e7cd      	b.n	80055de <HAL_LIN_Init+0x1e>
    UART_AdvFeatureConfig(huart);
 8005642:	4620      	mov	r0, r4
 8005644:	f7ff fec8 	bl	80053d8 <UART_AdvFeatureConfig>
 8005648:	e7d8      	b.n	80055fc <HAL_LIN_Init+0x3c>
    return HAL_ERROR;
 800564a:	2001      	movs	r0, #1
}
 800564c:	4770      	bx	lr
    return HAL_ERROR;
 800564e:	2001      	movs	r0, #1
 8005650:	e7f1      	b.n	8005636 <HAL_LIN_Init+0x76>
    return HAL_ERROR;
 8005652:	2001      	movs	r0, #1
 8005654:	e7ef      	b.n	8005636 <HAL_LIN_Init+0x76>
	...

08005658 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8005658:	b084      	sub	sp, #16
 800565a:	4603      	mov	r3, r0
  uint8_t rx_fifo_depth;
  uint8_t tx_fifo_depth;
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
 800565c:	4a18      	ldr	r2, [pc, #96]	; (80056c0 <UARTEx_SetNbDataToProcess+0x68>)
 800565e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8005662:	aa04      	add	r2, sp, #16
 8005664:	e902 0003 	stmdb	r2, {r0, r1}
  uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};
 8005668:	4916      	ldr	r1, [pc, #88]	; (80056c4 <UARTEx_SetNbDataToProcess+0x6c>)
 800566a:	466a      	mov	r2, sp
 800566c:	c903      	ldmia	r1, {r0, r1}
 800566e:	e882 0003 	stmia.w	r2, {r0, r1}

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8005672:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8005674:	b932      	cbnz	r2, 8005684 <UARTEx_SetNbDataToProcess+0x2c>
  {
    huart->NbTxDataToProcess = 1U;
 8005676:	2201      	movs	r2, #1
 8005678:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800567c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8005680:	b004      	add	sp, #16
 8005682:	4770      	bx	lr
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8005684:	6819      	ldr	r1, [r3, #0]
 8005686:	688a      	ldr	r2, [r1, #8]
 8005688:	f3c2 6242 	ubfx	r2, r2, #25, #3
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800568c:	6888      	ldr	r0, [r1, #8]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
 800568e:	a904      	add	r1, sp, #16
 8005690:	eb01 7050 	add.w	r0, r1, r0, lsr #29
 8005694:	f810 1c08 	ldrb.w	r1, [r0, #-8]
 8005698:	0109      	lsls	r1, r1, #4
 800569a:	f810 0c10 	ldrb.w	r0, [r0, #-16]
 800569e:	fb91 f1f0 	sdiv	r1, r1, r0
 80056a2:	f8a3 106a 	strh.w	r1, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
 80056a6:	a904      	add	r1, sp, #16
 80056a8:	440a      	add	r2, r1
 80056aa:	f812 1c08 	ldrb.w	r1, [r2, #-8]
 80056ae:	0109      	lsls	r1, r1, #4
 80056b0:	f812 2c10 	ldrb.w	r2, [r2, #-16]
 80056b4:	fb91 f2f2 	sdiv	r2, r1, r2
 80056b8:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 80056bc:	e7e0      	b.n	8005680 <UARTEx_SetNbDataToProcess+0x28>
 80056be:	bf00      	nop
 80056c0:	08009580 	.word	0x08009580
 80056c4:	080095d0 	.word	0x080095d0

080056c8 <HAL_UARTEx_DisableFifoMode>:
  __HAL_LOCK(huart);
 80056c8:	f890 307c 	ldrb.w	r3, [r0, #124]	; 0x7c
 80056cc:	2b01      	cmp	r3, #1
 80056ce:	d018      	beq.n	8005702 <HAL_UARTEx_DisableFifoMode+0x3a>
 80056d0:	2301      	movs	r3, #1
 80056d2:	f880 307c 	strb.w	r3, [r0, #124]	; 0x7c
  huart->gState = HAL_UART_STATE_BUSY;
 80056d6:	2324      	movs	r3, #36	; 0x24
 80056d8:	f8c0 3080 	str.w	r3, [r0, #128]	; 0x80
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80056dc:	6803      	ldr	r3, [r0, #0]
 80056de:	681a      	ldr	r2, [r3, #0]
  __HAL_UART_DISABLE(huart);
 80056e0:	6819      	ldr	r1, [r3, #0]
 80056e2:	f021 0101 	bic.w	r1, r1, #1
 80056e6:	6019      	str	r1, [r3, #0]
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80056e8:	f022 5200 	bic.w	r2, r2, #536870912	; 0x20000000
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80056ec:	2300      	movs	r3, #0
 80056ee:	6643      	str	r3, [r0, #100]	; 0x64
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80056f0:	6801      	ldr	r1, [r0, #0]
 80056f2:	600a      	str	r2, [r1, #0]
  huart->gState = HAL_UART_STATE_READY;
 80056f4:	2220      	movs	r2, #32
 80056f6:	f8c0 2080 	str.w	r2, [r0, #128]	; 0x80
  __HAL_UNLOCK(huart);
 80056fa:	f880 307c 	strb.w	r3, [r0, #124]	; 0x7c
  return HAL_OK;
 80056fe:	4618      	mov	r0, r3
 8005700:	4770      	bx	lr
  __HAL_LOCK(huart);
 8005702:	2002      	movs	r0, #2
}
 8005704:	4770      	bx	lr

08005706 <HAL_UARTEx_SetTxFifoThreshold>:
{
 8005706:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(huart);
 8005708:	f890 307c 	ldrb.w	r3, [r0, #124]	; 0x7c
 800570c:	2b01      	cmp	r3, #1
 800570e:	d01d      	beq.n	800574c <HAL_UARTEx_SetTxFifoThreshold+0x46>
 8005710:	4604      	mov	r4, r0
 8005712:	2301      	movs	r3, #1
 8005714:	f880 307c 	strb.w	r3, [r0, #124]	; 0x7c
  huart->gState = HAL_UART_STATE_BUSY;
 8005718:	2324      	movs	r3, #36	; 0x24
 800571a:	f8c0 3080 	str.w	r3, [r0, #128]	; 0x80
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800571e:	6803      	ldr	r3, [r0, #0]
 8005720:	681d      	ldr	r5, [r3, #0]
  __HAL_UART_DISABLE(huart);
 8005722:	681a      	ldr	r2, [r3, #0]
 8005724:	f022 0201 	bic.w	r2, r2, #1
 8005728:	601a      	str	r2, [r3, #0]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800572a:	6802      	ldr	r2, [r0, #0]
 800572c:	6893      	ldr	r3, [r2, #8]
 800572e:	f023 4360 	bic.w	r3, r3, #3758096384	; 0xe0000000
 8005732:	4319      	orrs	r1, r3
 8005734:	6091      	str	r1, [r2, #8]
  UARTEx_SetNbDataToProcess(huart);
 8005736:	f7ff ff8f 	bl	8005658 <UARTEx_SetNbDataToProcess>
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800573a:	6823      	ldr	r3, [r4, #0]
 800573c:	601d      	str	r5, [r3, #0]
  huart->gState = HAL_UART_STATE_READY;
 800573e:	2320      	movs	r3, #32
 8005740:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
  __HAL_UNLOCK(huart);
 8005744:	2000      	movs	r0, #0
 8005746:	f884 007c 	strb.w	r0, [r4, #124]	; 0x7c
}
 800574a:	bd38      	pop	{r3, r4, r5, pc}
  __HAL_LOCK(huart);
 800574c:	2002      	movs	r0, #2
 800574e:	e7fc      	b.n	800574a <HAL_UARTEx_SetTxFifoThreshold+0x44>

08005750 <HAL_UARTEx_SetRxFifoThreshold>:
{
 8005750:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(huart);
 8005752:	f890 307c 	ldrb.w	r3, [r0, #124]	; 0x7c
 8005756:	2b01      	cmp	r3, #1
 8005758:	d01d      	beq.n	8005796 <HAL_UARTEx_SetRxFifoThreshold+0x46>
 800575a:	4604      	mov	r4, r0
 800575c:	2301      	movs	r3, #1
 800575e:	f880 307c 	strb.w	r3, [r0, #124]	; 0x7c
  huart->gState = HAL_UART_STATE_BUSY;
 8005762:	2324      	movs	r3, #36	; 0x24
 8005764:	f8c0 3080 	str.w	r3, [r0, #128]	; 0x80
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005768:	6803      	ldr	r3, [r0, #0]
 800576a:	681d      	ldr	r5, [r3, #0]
  __HAL_UART_DISABLE(huart);
 800576c:	681a      	ldr	r2, [r3, #0]
 800576e:	f022 0201 	bic.w	r2, r2, #1
 8005772:	601a      	str	r2, [r3, #0]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8005774:	6802      	ldr	r2, [r0, #0]
 8005776:	6893      	ldr	r3, [r2, #8]
 8005778:	f023 6360 	bic.w	r3, r3, #234881024	; 0xe000000
 800577c:	4319      	orrs	r1, r3
 800577e:	6091      	str	r1, [r2, #8]
  UARTEx_SetNbDataToProcess(huart);
 8005780:	f7ff ff6a 	bl	8005658 <UARTEx_SetNbDataToProcess>
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005784:	6823      	ldr	r3, [r4, #0]
 8005786:	601d      	str	r5, [r3, #0]
  huart->gState = HAL_UART_STATE_READY;
 8005788:	2320      	movs	r3, #32
 800578a:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
  __HAL_UNLOCK(huart);
 800578e:	2000      	movs	r0, #0
 8005790:	f884 007c 	strb.w	r0, [r4, #124]	; 0x7c
}
 8005794:	bd38      	pop	{r3, r4, r5, pc}
  __HAL_LOCK(huart);
 8005796:	2002      	movs	r0, #2
 8005798:	e7fc      	b.n	8005794 <HAL_UARTEx_SetRxFifoThreshold+0x44>
	...

0800579c <USB_CoreReset>:
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
  uint32_t count = 0U;
 800579c:	2300      	movs	r3, #0

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 800579e:	3301      	adds	r3, #1
 80057a0:	4a0c      	ldr	r2, [pc, #48]	; (80057d4 <USB_CoreReset+0x38>)
 80057a2:	4293      	cmp	r3, r2
 80057a4:	d811      	bhi.n	80057ca <USB_CoreReset+0x2e>
    {
      return HAL_TIMEOUT;
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80057a6:	6902      	ldr	r2, [r0, #16]
 80057a8:	2a00      	cmp	r2, #0
 80057aa:	daf8      	bge.n	800579e <USB_CoreReset+0x2>

  /* Core Soft Reset */
  count = 0U;
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80057ac:	6903      	ldr	r3, [r0, #16]
 80057ae:	f043 0301 	orr.w	r3, r3, #1
 80057b2:	6103      	str	r3, [r0, #16]
  count = 0U;
 80057b4:	2300      	movs	r3, #0

  do
  {
    if (++count > 200000U)
 80057b6:	3301      	adds	r3, #1
 80057b8:	4a06      	ldr	r2, [pc, #24]	; (80057d4 <USB_CoreReset+0x38>)
 80057ba:	4293      	cmp	r3, r2
 80057bc:	d807      	bhi.n	80057ce <USB_CoreReset+0x32>
    {
      return HAL_TIMEOUT;
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80057be:	6902      	ldr	r2, [r0, #16]
 80057c0:	f012 0f01 	tst.w	r2, #1
 80057c4:	d1f7      	bne.n	80057b6 <USB_CoreReset+0x1a>

  return HAL_OK;
 80057c6:	2000      	movs	r0, #0
 80057c8:	4770      	bx	lr
      return HAL_TIMEOUT;
 80057ca:	2003      	movs	r0, #3
 80057cc:	4770      	bx	lr
      return HAL_TIMEOUT;
 80057ce:	2003      	movs	r0, #3
}
 80057d0:	4770      	bx	lr
 80057d2:	bf00      	nop
 80057d4:	00030d40 	.word	0x00030d40

080057d8 <USB_CoreInit>:
{
 80057d8:	b084      	sub	sp, #16
 80057da:	b510      	push	{r4, lr}
 80057dc:	4604      	mov	r4, r0
 80057de:	a803      	add	r0, sp, #12
 80057e0:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80057e4:	9b08      	ldr	r3, [sp, #32]
 80057e6:	2b01      	cmp	r3, #1
 80057e8:	d11d      	bne.n	8005826 <USB_CoreInit+0x4e>
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80057ea:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80057ec:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80057f0:	63a3      	str	r3, [r4, #56]	; 0x38
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80057f2:	68e2      	ldr	r2, [r4, #12]
 80057f4:	4b1a      	ldr	r3, [pc, #104]	; (8005860 <USB_CoreInit+0x88>)
 80057f6:	4013      	ands	r3, r2
 80057f8:	60e3      	str	r3, [r4, #12]
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80057fa:	68e3      	ldr	r3, [r4, #12]
 80057fc:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8005800:	60e3      	str	r3, [r4, #12]
    if (cfg.use_external_vbus == 1U)
 8005802:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8005804:	2b01      	cmp	r3, #1
 8005806:	d009      	beq.n	800581c <USB_CoreInit+0x44>
    ret = USB_CoreReset(USBx);
 8005808:	4620      	mov	r0, r4
 800580a:	f7ff ffc7 	bl	800579c <USB_CoreReset>
  if (cfg.dma_enable == 1U)
 800580e:	9b06      	ldr	r3, [sp, #24]
 8005810:	2b01      	cmp	r3, #1
 8005812:	d01b      	beq.n	800584c <USB_CoreInit+0x74>
}
 8005814:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005818:	b004      	add	sp, #16
 800581a:	4770      	bx	lr
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800581c:	68e3      	ldr	r3, [r4, #12]
 800581e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005822:	60e3      	str	r3, [r4, #12]
 8005824:	e7f0      	b.n	8005808 <USB_CoreInit+0x30>
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8005826:	68e3      	ldr	r3, [r4, #12]
 8005828:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800582c:	60e3      	str	r3, [r4, #12]
    ret = USB_CoreReset(USBx);
 800582e:	4620      	mov	r0, r4
 8005830:	f7ff ffb4 	bl	800579c <USB_CoreReset>
    if (cfg.battery_charging_enable == 0U)
 8005834:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8005836:	b923      	cbnz	r3, 8005842 <USB_CoreInit+0x6a>
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8005838:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800583a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800583e:	63a3      	str	r3, [r4, #56]	; 0x38
 8005840:	e7e5      	b.n	800580e <USB_CoreInit+0x36>
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005842:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8005844:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005848:	63a3      	str	r3, [r4, #56]	; 0x38
 800584a:	e7e0      	b.n	800580e <USB_CoreInit+0x36>
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800584c:	68a3      	ldr	r3, [r4, #8]
 800584e:	f043 0306 	orr.w	r3, r3, #6
 8005852:	60a3      	str	r3, [r4, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8005854:	68a3      	ldr	r3, [r4, #8]
 8005856:	f043 0320 	orr.w	r3, r3, #32
 800585a:	60a3      	str	r3, [r4, #8]
 800585c:	e7da      	b.n	8005814 <USB_CoreInit+0x3c>
 800585e:	bf00      	nop
 8005860:	ffbdffbf 	.word	0xffbdffbf

08005864 <USB_SetTurnaroundTime>:
  if (speed == USBD_FS_SPEED)
 8005864:	2a02      	cmp	r2, #2
 8005866:	d00a      	beq.n	800587e <USB_SetTurnaroundTime+0x1a>
    UsbTrd = USBD_HS_TRDT_VALUE;
 8005868:	2109      	movs	r1, #9
  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 800586a:	68c2      	ldr	r2, [r0, #12]
 800586c:	f422 5270 	bic.w	r2, r2, #15360	; 0x3c00
 8005870:	60c2      	str	r2, [r0, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8005872:	68c3      	ldr	r3, [r0, #12]
 8005874:	ea43 2381 	orr.w	r3, r3, r1, lsl #10
 8005878:	60c3      	str	r3, [r0, #12]
}
 800587a:	2000      	movs	r0, #0
 800587c:	4770      	bx	lr
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 800587e:	4b20      	ldr	r3, [pc, #128]	; (8005900 <USB_SetTurnaroundTime+0x9c>)
 8005880:	440b      	add	r3, r1
 8005882:	4a20      	ldr	r2, [pc, #128]	; (8005904 <USB_SetTurnaroundTime+0xa0>)
 8005884:	4293      	cmp	r3, r2
 8005886:	d929      	bls.n	80058dc <USB_SetTurnaroundTime+0x78>
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8005888:	4b1f      	ldr	r3, [pc, #124]	; (8005908 <USB_SetTurnaroundTime+0xa4>)
 800588a:	440b      	add	r3, r1
 800588c:	4a1f      	ldr	r2, [pc, #124]	; (800590c <USB_SetTurnaroundTime+0xa8>)
 800588e:	4293      	cmp	r3, r2
 8005890:	d926      	bls.n	80058e0 <USB_SetTurnaroundTime+0x7c>
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8005892:	4b1f      	ldr	r3, [pc, #124]	; (8005910 <USB_SetTurnaroundTime+0xac>)
 8005894:	440b      	add	r3, r1
 8005896:	4a1f      	ldr	r2, [pc, #124]	; (8005914 <USB_SetTurnaroundTime+0xb0>)
 8005898:	4293      	cmp	r3, r2
 800589a:	d923      	bls.n	80058e4 <USB_SetTurnaroundTime+0x80>
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 800589c:	4b1e      	ldr	r3, [pc, #120]	; (8005918 <USB_SetTurnaroundTime+0xb4>)
 800589e:	440b      	add	r3, r1
 80058a0:	4a1e      	ldr	r2, [pc, #120]	; (800591c <USB_SetTurnaroundTime+0xb8>)
 80058a2:	4293      	cmp	r3, r2
 80058a4:	d320      	bcc.n	80058e8 <USB_SetTurnaroundTime+0x84>
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 80058a6:	4b1e      	ldr	r3, [pc, #120]	; (8005920 <USB_SetTurnaroundTime+0xbc>)
 80058a8:	440b      	add	r3, r1
 80058aa:	4a1e      	ldr	r2, [pc, #120]	; (8005924 <USB_SetTurnaroundTime+0xc0>)
 80058ac:	4293      	cmp	r3, r2
 80058ae:	d91d      	bls.n	80058ec <USB_SetTurnaroundTime+0x88>
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 80058b0:	4b1d      	ldr	r3, [pc, #116]	; (8005928 <USB_SetTurnaroundTime+0xc4>)
 80058b2:	440b      	add	r3, r1
 80058b4:	4a1d      	ldr	r2, [pc, #116]	; (800592c <USB_SetTurnaroundTime+0xc8>)
 80058b6:	4293      	cmp	r3, r2
 80058b8:	d31a      	bcc.n	80058f0 <USB_SetTurnaroundTime+0x8c>
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 80058ba:	4b1d      	ldr	r3, [pc, #116]	; (8005930 <USB_SetTurnaroundTime+0xcc>)
 80058bc:	440b      	add	r3, r1
 80058be:	4a1d      	ldr	r2, [pc, #116]	; (8005934 <USB_SetTurnaroundTime+0xd0>)
 80058c0:	4293      	cmp	r3, r2
 80058c2:	d317      	bcc.n	80058f4 <USB_SetTurnaroundTime+0x90>
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 80058c4:	4b1c      	ldr	r3, [pc, #112]	; (8005938 <USB_SetTurnaroundTime+0xd4>)
 80058c6:	440b      	add	r3, r1
 80058c8:	4a1c      	ldr	r2, [pc, #112]	; (800593c <USB_SetTurnaroundTime+0xd8>)
 80058ca:	4293      	cmp	r3, r2
 80058cc:	d314      	bcc.n	80058f8 <USB_SetTurnaroundTime+0x94>
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 80058ce:	4b1c      	ldr	r3, [pc, #112]	; (8005940 <USB_SetTurnaroundTime+0xdc>)
 80058d0:	440b      	add	r3, r1
 80058d2:	4a1c      	ldr	r2, [pc, #112]	; (8005944 <USB_SetTurnaroundTime+0xe0>)
 80058d4:	4293      	cmp	r3, r2
 80058d6:	d211      	bcs.n	80058fc <USB_SetTurnaroundTime+0x98>
      UsbTrd = 0x7U;
 80058d8:	2107      	movs	r1, #7
 80058da:	e7c6      	b.n	800586a <USB_SetTurnaroundTime+0x6>
      UsbTrd = 0xFU;
 80058dc:	210f      	movs	r1, #15
 80058de:	e7c4      	b.n	800586a <USB_SetTurnaroundTime+0x6>
      UsbTrd = 0xEU;
 80058e0:	210e      	movs	r1, #14
 80058e2:	e7c2      	b.n	800586a <USB_SetTurnaroundTime+0x6>
      UsbTrd = 0xDU;
 80058e4:	210d      	movs	r1, #13
 80058e6:	e7c0      	b.n	800586a <USB_SetTurnaroundTime+0x6>
      UsbTrd = 0xCU;
 80058e8:	210c      	movs	r1, #12
 80058ea:	e7be      	b.n	800586a <USB_SetTurnaroundTime+0x6>
      UsbTrd = 0xBU;
 80058ec:	210b      	movs	r1, #11
 80058ee:	e7bc      	b.n	800586a <USB_SetTurnaroundTime+0x6>
      UsbTrd = 0xAU;
 80058f0:	210a      	movs	r1, #10
 80058f2:	e7ba      	b.n	800586a <USB_SetTurnaroundTime+0x6>
      UsbTrd = 0x9U;
 80058f4:	2109      	movs	r1, #9
 80058f6:	e7b8      	b.n	800586a <USB_SetTurnaroundTime+0x6>
      UsbTrd = 0x8U;
 80058f8:	2108      	movs	r1, #8
 80058fa:	e7b6      	b.n	800586a <USB_SetTurnaroundTime+0x6>
      UsbTrd = 0x6U;
 80058fc:	2106      	movs	r1, #6
 80058fe:	e7b4      	b.n	800586a <USB_SetTurnaroundTime+0x6>
 8005900:	ff275340 	.word	0xff275340
 8005904:	000c34ff 	.word	0x000c34ff
 8005908:	ff1b1e40 	.word	0xff1b1e40
 800590c:	000f423f 	.word	0x000f423f
 8005910:	ff0bdc00 	.word	0xff0bdc00
 8005914:	00124f7f 	.word	0x00124f7f
 8005918:	fef98c80 	.word	0xfef98c80
 800591c:	0013d620 	.word	0x0013d620
 8005920:	fee5b660 	.word	0xfee5b660
 8005924:	0016e35f 	.word	0x0016e35f
 8005928:	feced300 	.word	0xfeced300
 800592c:	001b7740 	.word	0x001b7740
 8005930:	feb35bc0 	.word	0xfeb35bc0
 8005934:	002191c0 	.word	0x002191c0
 8005938:	fe91ca00 	.word	0xfe91ca00
 800593c:	00387520 	.word	0x00387520
 8005940:	fe5954e0 	.word	0xfe5954e0
 8005944:	00419ce0 	.word	0x00419ce0

08005948 <USB_EnableGlobalInt>:
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8005948:	6883      	ldr	r3, [r0, #8]
 800594a:	f043 0301 	orr.w	r3, r3, #1
 800594e:	6083      	str	r3, [r0, #8]
}
 8005950:	2000      	movs	r0, #0
 8005952:	4770      	bx	lr

08005954 <USB_DisableGlobalInt>:
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8005954:	6883      	ldr	r3, [r0, #8]
 8005956:	f023 0301 	bic.w	r3, r3, #1
 800595a:	6083      	str	r3, [r0, #8]
}
 800595c:	2000      	movs	r0, #0
 800595e:	4770      	bx	lr

08005960 <USB_SetCurrentMode>:
{
 8005960:	b508      	push	{r3, lr}
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8005962:	68c3      	ldr	r3, [r0, #12]
 8005964:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8005968:	60c3      	str	r3, [r0, #12]
  if (mode == USB_HOST_MODE)
 800596a:	2901      	cmp	r1, #1
 800596c:	d009      	beq.n	8005982 <USB_SetCurrentMode+0x22>
  else if (mode == USB_DEVICE_MODE)
 800596e:	b969      	cbnz	r1, 800598c <USB_SetCurrentMode+0x2c>
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8005970:	68c3      	ldr	r3, [r0, #12]
 8005972:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005976:	60c3      	str	r3, [r0, #12]
  HAL_Delay(50U);
 8005978:	2032      	movs	r0, #50	; 0x32
 800597a:	f7fb fa3d 	bl	8000df8 <HAL_Delay>
  return HAL_OK;
 800597e:	2000      	movs	r0, #0
}
 8005980:	bd08      	pop	{r3, pc}
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8005982:	68c3      	ldr	r3, [r0, #12]
 8005984:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005988:	60c3      	str	r3, [r0, #12]
 800598a:	e7f5      	b.n	8005978 <USB_SetCurrentMode+0x18>
    return HAL_ERROR;
 800598c:	2001      	movs	r0, #1
 800598e:	e7f7      	b.n	8005980 <USB_SetCurrentMode+0x20>

08005990 <USB_FlushTxFifo>:
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8005990:	0189      	lsls	r1, r1, #6
 8005992:	f041 0120 	orr.w	r1, r1, #32
 8005996:	6101      	str	r1, [r0, #16]
  uint32_t count = 0U;
 8005998:	2300      	movs	r3, #0
    if (++count > 200000U)
 800599a:	3301      	adds	r3, #1
 800599c:	4a05      	ldr	r2, [pc, #20]	; (80059b4 <USB_FlushTxFifo+0x24>)
 800599e:	4293      	cmp	r3, r2
 80059a0:	d805      	bhi.n	80059ae <USB_FlushTxFifo+0x1e>
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80059a2:	6902      	ldr	r2, [r0, #16]
 80059a4:	f012 0f20 	tst.w	r2, #32
 80059a8:	d1f7      	bne.n	800599a <USB_FlushTxFifo+0xa>
  return HAL_OK;
 80059aa:	2000      	movs	r0, #0
 80059ac:	4770      	bx	lr
      return HAL_TIMEOUT;
 80059ae:	2003      	movs	r0, #3
}
 80059b0:	4770      	bx	lr
 80059b2:	bf00      	nop
 80059b4:	00030d40 	.word	0x00030d40

080059b8 <USB_FlushRxFifo>:
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80059b8:	2310      	movs	r3, #16
 80059ba:	6103      	str	r3, [r0, #16]
  uint32_t count = 0;
 80059bc:	2300      	movs	r3, #0
    if (++count > 200000U)
 80059be:	3301      	adds	r3, #1
 80059c0:	4a05      	ldr	r2, [pc, #20]	; (80059d8 <USB_FlushRxFifo+0x20>)
 80059c2:	4293      	cmp	r3, r2
 80059c4:	d805      	bhi.n	80059d2 <USB_FlushRxFifo+0x1a>
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80059c6:	6902      	ldr	r2, [r0, #16]
 80059c8:	f012 0f10 	tst.w	r2, #16
 80059cc:	d1f7      	bne.n	80059be <USB_FlushRxFifo+0x6>
  return HAL_OK;
 80059ce:	2000      	movs	r0, #0
 80059d0:	4770      	bx	lr
      return HAL_TIMEOUT;
 80059d2:	2003      	movs	r0, #3
}
 80059d4:	4770      	bx	lr
 80059d6:	bf00      	nop
 80059d8:	00030d40 	.word	0x00030d40

080059dc <USB_SetDevSpeed>:
  USBx_DEVICE->DCFG |= speed;
 80059dc:	f8d0 3800 	ldr.w	r3, [r0, #2048]	; 0x800
 80059e0:	4319      	orrs	r1, r3
 80059e2:	f8c0 1800 	str.w	r1, [r0, #2048]	; 0x800
}
 80059e6:	2000      	movs	r0, #0
 80059e8:	4770      	bx	lr
	...

080059ec <USB_DevInit>:
{
 80059ec:	b084      	sub	sp, #16
 80059ee:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80059f2:	4604      	mov	r4, r0
 80059f4:	a809      	add	r0, sp, #36	; 0x24
 80059f6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t USBx_BASE = (uint32_t)USBx;
 80059fa:	4625      	mov	r5, r4
  for (i = 0U; i < 15U; i++)
 80059fc:	2300      	movs	r3, #0
 80059fe:	e006      	b.n	8005a0e <USB_DevInit+0x22>
    USBx->DIEPTXF[i] = 0U;
 8005a00:	f103 0240 	add.w	r2, r3, #64	; 0x40
 8005a04:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 8005a08:	2100      	movs	r1, #0
 8005a0a:	6051      	str	r1, [r2, #4]
  for (i = 0U; i < 15U; i++)
 8005a0c:	3301      	adds	r3, #1
 8005a0e:	2b0e      	cmp	r3, #14
 8005a10:	d9f6      	bls.n	8005a00 <USB_DevInit+0x14>
  if (cfg.vbus_sensing_enable == 0U)
 8005a12:	f8dd 804c 	ldr.w	r8, [sp, #76]	; 0x4c
 8005a16:	f1b8 0f00 	cmp.w	r8, #0
 8005a1a:	d124      	bne.n	8005a66 <USB_DevInit+0x7a>
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8005a1c:	f8d4 3804 	ldr.w	r3, [r4, #2052]	; 0x804
 8005a20:	f043 0302 	orr.w	r3, r3, #2
 8005a24:	f8c4 3804 	str.w	r3, [r4, #2052]	; 0x804
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8005a28:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8005a2a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005a2e:	63a3      	str	r3, [r4, #56]	; 0x38
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8005a30:	6823      	ldr	r3, [r4, #0]
 8005a32:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005a36:	6023      	str	r3, [r4, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8005a38:	6823      	ldr	r3, [r4, #0]
 8005a3a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005a3e:	6023      	str	r3, [r4, #0]
  USBx_PCGCCTL = 0U;
 8005a40:	2300      	movs	r3, #0
 8005a42:	f8c4 3e00 	str.w	r3, [r4, #3584]	; 0xe00
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8005a46:	f504 6600 	add.w	r6, r4, #2048	; 0x800
 8005a4a:	f8d4 3800 	ldr.w	r3, [r4, #2048]	; 0x800
 8005a4e:	f8c4 3800 	str.w	r3, [r4, #2048]	; 0x800
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8005a52:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005a54:	2b01      	cmp	r3, #1
 8005a56:	d110      	bne.n	8005a7a <USB_DevInit+0x8e>
    if (cfg.speed == USBD_HS_SPEED)
 8005a58:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005a5a:	b94b      	cbnz	r3, 8005a70 <USB_DevInit+0x84>
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8005a5c:	2100      	movs	r1, #0
 8005a5e:	4620      	mov	r0, r4
 8005a60:	f7ff ffbc 	bl	80059dc <USB_SetDevSpeed>
 8005a64:	e00d      	b.n	8005a82 <USB_DevInit+0x96>
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8005a66:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8005a68:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8005a6c:	63a3      	str	r3, [r4, #56]	; 0x38
 8005a6e:	e7e7      	b.n	8005a40 <USB_DevInit+0x54>
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8005a70:	2101      	movs	r1, #1
 8005a72:	4620      	mov	r0, r4
 8005a74:	f7ff ffb2 	bl	80059dc <USB_SetDevSpeed>
 8005a78:	e003      	b.n	8005a82 <USB_DevInit+0x96>
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8005a7a:	2103      	movs	r1, #3
 8005a7c:	4620      	mov	r0, r4
 8005a7e:	f7ff ffad 	bl	80059dc <USB_SetDevSpeed>
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8005a82:	2110      	movs	r1, #16
 8005a84:	4620      	mov	r0, r4
 8005a86:	f7ff ff83 	bl	8005990 <USB_FlushTxFifo>
 8005a8a:	4681      	mov	r9, r0
 8005a8c:	b108      	cbz	r0, 8005a92 <USB_DevInit+0xa6>
    ret = HAL_ERROR;
 8005a8e:	f04f 0901 	mov.w	r9, #1
  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8005a92:	4620      	mov	r0, r4
 8005a94:	f7ff ff90 	bl	80059b8 <USB_FlushRxFifo>
 8005a98:	b108      	cbz	r0, 8005a9e <USB_DevInit+0xb2>
    ret = HAL_ERROR;
 8005a9a:	f04f 0901 	mov.w	r9, #1
  USBx_DEVICE->DIEPMSK = 0U;
 8005a9e:	2300      	movs	r3, #0
 8005aa0:	6133      	str	r3, [r6, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8005aa2:	6173      	str	r3, [r6, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8005aa4:	61f3      	str	r3, [r6, #28]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005aa6:	e00a      	b.n	8005abe <USB_DevInit+0xd2>
      if (i == 0U)
 8005aa8:	b9c3      	cbnz	r3, 8005adc <USB_DevInit+0xf0>
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8005aaa:	f04f 6000 	mov.w	r0, #134217728	; 0x8000000
 8005aae:	f8c2 0900 	str.w	r0, [r2, #2304]	; 0x900
    USBx_INEP(i)->DIEPTSIZ = 0U;
 8005ab2:	2200      	movs	r2, #0
 8005ab4:	610a      	str	r2, [r1, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8005ab6:	f64f 327f 	movw	r2, #64383	; 0xfb7f
 8005aba:	608a      	str	r2, [r1, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005abc:	3301      	adds	r3, #1
 8005abe:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8005ac0:	429f      	cmp	r7, r3
 8005ac2:	d910      	bls.n	8005ae6 <USB_DevInit+0xfa>
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8005ac4:	eb05 1243 	add.w	r2, r5, r3, lsl #5
 8005ac8:	f502 6110 	add.w	r1, r2, #2304	; 0x900
 8005acc:	f8d2 0900 	ldr.w	r0, [r2, #2304]	; 0x900
 8005ad0:	2800      	cmp	r0, #0
 8005ad2:	dbe9      	blt.n	8005aa8 <USB_DevInit+0xbc>
      USBx_INEP(i)->DIEPCTL = 0U;
 8005ad4:	2000      	movs	r0, #0
 8005ad6:	f8c2 0900 	str.w	r0, [r2, #2304]	; 0x900
 8005ada:	e7ea      	b.n	8005ab2 <USB_DevInit+0xc6>
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8005adc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8005ae0:	f8c2 0900 	str.w	r0, [r2, #2304]	; 0x900
 8005ae4:	e7e5      	b.n	8005ab2 <USB_DevInit+0xc6>
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005ae6:	2300      	movs	r3, #0
 8005ae8:	e00a      	b.n	8005b00 <USB_DevInit+0x114>
      if (i == 0U)
 8005aea:	b1bb      	cbz	r3, 8005b1c <USB_DevInit+0x130>
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8005aec:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8005af0:	f8c2 0b00 	str.w	r0, [r2, #2816]	; 0xb00
    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8005af4:	2200      	movs	r2, #0
 8005af6:	610a      	str	r2, [r1, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8005af8:	f64f 327f 	movw	r2, #64383	; 0xfb7f
 8005afc:	608a      	str	r2, [r1, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005afe:	3301      	adds	r3, #1
 8005b00:	429f      	cmp	r7, r3
 8005b02:	d910      	bls.n	8005b26 <USB_DevInit+0x13a>
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005b04:	eb05 1243 	add.w	r2, r5, r3, lsl #5
 8005b08:	f502 6130 	add.w	r1, r2, #2816	; 0xb00
 8005b0c:	f8d2 0b00 	ldr.w	r0, [r2, #2816]	; 0xb00
 8005b10:	2800      	cmp	r0, #0
 8005b12:	dbea      	blt.n	8005aea <USB_DevInit+0xfe>
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8005b14:	2000      	movs	r0, #0
 8005b16:	f8c2 0b00 	str.w	r0, [r2, #2816]	; 0xb00
 8005b1a:	e7eb      	b.n	8005af4 <USB_DevInit+0x108>
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8005b1c:	f04f 6000 	mov.w	r0, #134217728	; 0x8000000
 8005b20:	f8c2 0b00 	str.w	r0, [r2, #2816]	; 0xb00
 8005b24:	e7e6      	b.n	8005af4 <USB_DevInit+0x108>
  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8005b26:	6933      	ldr	r3, [r6, #16]
 8005b28:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005b2c:	6133      	str	r3, [r6, #16]
  USBx->GINTMSK = 0U;
 8005b2e:	2300      	movs	r3, #0
 8005b30:	61a3      	str	r3, [r4, #24]
  USBx->GINTSTS = 0xBFFFFFFFU;
 8005b32:	f06f 4380 	mvn.w	r3, #1073741824	; 0x40000000
 8005b36:	6163      	str	r3, [r4, #20]
  if (cfg.dma_enable == 0U)
 8005b38:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8005b3a:	b91b      	cbnz	r3, 8005b44 <USB_DevInit+0x158>
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8005b3c:	69a3      	ldr	r3, [r4, #24]
 8005b3e:	f043 0310 	orr.w	r3, r3, #16
 8005b42:	61a3      	str	r3, [r4, #24]
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8005b44:	69a2      	ldr	r2, [r4, #24]
 8005b46:	4b0b      	ldr	r3, [pc, #44]	; (8005b74 <USB_DevInit+0x188>)
 8005b48:	4313      	orrs	r3, r2
 8005b4a:	61a3      	str	r3, [r4, #24]
  if (cfg.Sof_enable != 0U)
 8005b4c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8005b4e:	b11b      	cbz	r3, 8005b58 <USB_DevInit+0x16c>
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8005b50:	69a3      	ldr	r3, [r4, #24]
 8005b52:	f043 0308 	orr.w	r3, r3, #8
 8005b56:	61a3      	str	r3, [r4, #24]
  if (cfg.vbus_sensing_enable == 1U)
 8005b58:	f1b8 0f01 	cmp.w	r8, #1
 8005b5c:	d004      	beq.n	8005b68 <USB_DevInit+0x17c>
}
 8005b5e:	4648      	mov	r0, r9
 8005b60:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005b64:	b004      	add	sp, #16
 8005b66:	4770      	bx	lr
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8005b68:	69a2      	ldr	r2, [r4, #24]
 8005b6a:	4b03      	ldr	r3, [pc, #12]	; (8005b78 <USB_DevInit+0x18c>)
 8005b6c:	4313      	orrs	r3, r2
 8005b6e:	61a3      	str	r3, [r4, #24]
 8005b70:	e7f5      	b.n	8005b5e <USB_DevInit+0x172>
 8005b72:	bf00      	nop
 8005b74:	803c3800 	.word	0x803c3800
 8005b78:	40000004 	.word	0x40000004

08005b7c <USB_GetDevSpeed>:
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8005b7c:	f8d0 3808 	ldr.w	r3, [r0, #2056]	; 0x808
  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8005b80:	f013 0306 	ands.w	r3, r3, #6
 8005b84:	d005      	beq.n	8005b92 <USB_GetDevSpeed+0x16>
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8005b86:	2b06      	cmp	r3, #6
 8005b88:	bf18      	it	ne
 8005b8a:	2b02      	cmpne	r3, #2
 8005b8c:	d103      	bne.n	8005b96 <USB_GetDevSpeed+0x1a>
    speed = USBD_FS_SPEED;
 8005b8e:	2002      	movs	r0, #2
 8005b90:	4770      	bx	lr
    speed = USBD_HS_SPEED;
 8005b92:	2000      	movs	r0, #0
 8005b94:	4770      	bx	lr
    speed = 0xFU;
 8005b96:	200f      	movs	r0, #15
}
 8005b98:	4770      	bx	lr
	...

08005b9c <USB_ActivateEndpoint>:
{
 8005b9c:	b470      	push	{r4, r5, r6}
  uint32_t epnum = (uint32_t)ep->num;
 8005b9e:	780c      	ldrb	r4, [r1, #0]
  if (ep->is_in == 1U)
 8005ba0:	784b      	ldrb	r3, [r1, #1]
 8005ba2:	2b01      	cmp	r3, #1
 8005ba4:	d020      	beq.n	8005be8 <USB_ActivateEndpoint+0x4c>
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8005ba6:	f8d0 381c 	ldr.w	r3, [r0, #2076]	; 0x81c
 8005baa:	f004 060f 	and.w	r6, r4, #15
 8005bae:	2201      	movs	r2, #1
 8005bb0:	40b2      	lsls	r2, r6
 8005bb2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005bb6:	f8c0 381c 	str.w	r3, [r0, #2076]	; 0x81c
    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8005bba:	eb00 1044 	add.w	r0, r0, r4, lsl #5
 8005bbe:	f8d0 3b00 	ldr.w	r3, [r0, #2816]	; 0xb00
 8005bc2:	f413 4f00 	tst.w	r3, #32768	; 0x8000
 8005bc6:	d10c      	bne.n	8005be2 <USB_ActivateEndpoint+0x46>
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8005bc8:	f8d0 2b00 	ldr.w	r2, [r0, #2816]	; 0xb00
 8005bcc:	688b      	ldr	r3, [r1, #8]
 8005bce:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8005bd2:	78c9      	ldrb	r1, [r1, #3]
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8005bd4:	ea43 4381 	orr.w	r3, r3, r1, lsl #18
 8005bd8:	4313      	orrs	r3, r2
 8005bda:	4a13      	ldr	r2, [pc, #76]	; (8005c28 <USB_ActivateEndpoint+0x8c>)
 8005bdc:	431a      	orrs	r2, r3
 8005bde:	f8c0 2b00 	str.w	r2, [r0, #2816]	; 0xb00
}
 8005be2:	2000      	movs	r0, #0
 8005be4:	bc70      	pop	{r4, r5, r6}
 8005be6:	4770      	bx	lr
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8005be8:	f8d0 281c 	ldr.w	r2, [r0, #2076]	; 0x81c
 8005bec:	f004 060f 	and.w	r6, r4, #15
 8005bf0:	40b3      	lsls	r3, r6
 8005bf2:	b29b      	uxth	r3, r3
 8005bf4:	4313      	orrs	r3, r2
 8005bf6:	f8c0 381c 	str.w	r3, [r0, #2076]	; 0x81c
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8005bfa:	eb00 1044 	add.w	r0, r0, r4, lsl #5
 8005bfe:	f8d0 3900 	ldr.w	r3, [r0, #2304]	; 0x900
 8005c02:	f413 4f00 	tst.w	r3, #32768	; 0x8000
 8005c06:	d1ec      	bne.n	8005be2 <USB_ActivateEndpoint+0x46>
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8005c08:	f8d0 2900 	ldr.w	r2, [r0, #2304]	; 0x900
 8005c0c:	688b      	ldr	r3, [r1, #8]
 8005c0e:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8005c12:	78c9      	ldrb	r1, [r1, #3]
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8005c14:	ea43 4381 	orr.w	r3, r3, r1, lsl #18
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8005c18:	ea43 5484 	orr.w	r4, r3, r4, lsl #22
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8005c1c:	4314      	orrs	r4, r2
 8005c1e:	4b02      	ldr	r3, [pc, #8]	; (8005c28 <USB_ActivateEndpoint+0x8c>)
 8005c20:	4323      	orrs	r3, r4
 8005c22:	f8c0 3900 	str.w	r3, [r0, #2304]	; 0x900
 8005c26:	e7dc      	b.n	8005be2 <USB_ActivateEndpoint+0x46>
 8005c28:	10008000 	.word	0x10008000

08005c2c <USB_DeactivateEndpoint>:
{
 8005c2c:	b430      	push	{r4, r5}
  uint32_t epnum = (uint32_t)ep->num;
 8005c2e:	780b      	ldrb	r3, [r1, #0]
  if (ep->is_in == 1U)
 8005c30:	784a      	ldrb	r2, [r1, #1]
 8005c32:	2a01      	cmp	r2, #1
 8005c34:	d024      	beq.n	8005c80 <USB_DeactivateEndpoint+0x54>
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005c36:	eb00 1343 	add.w	r3, r0, r3, lsl #5
 8005c3a:	f8d3 2b00 	ldr.w	r2, [r3, #2816]	; 0xb00
 8005c3e:	2a00      	cmp	r2, #0
 8005c40:	db50      	blt.n	8005ce4 <USB_DeactivateEndpoint+0xb8>
    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8005c42:	f8d0 583c 	ldr.w	r5, [r0, #2108]	; 0x83c
 8005c46:	780a      	ldrb	r2, [r1, #0]
 8005c48:	f002 020f 	and.w	r2, r2, #15
 8005c4c:	2401      	movs	r4, #1
 8005c4e:	fa04 f202 	lsl.w	r2, r4, r2
 8005c52:	ea25 4202 	bic.w	r2, r5, r2, lsl #16
 8005c56:	f8c0 283c 	str.w	r2, [r0, #2108]	; 0x83c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8005c5a:	f8d0 281c 	ldr.w	r2, [r0, #2076]	; 0x81c
 8005c5e:	7809      	ldrb	r1, [r1, #0]
 8005c60:	f001 010f 	and.w	r1, r1, #15
 8005c64:	408c      	lsls	r4, r1
 8005c66:	ea22 4404 	bic.w	r4, r2, r4, lsl #16
 8005c6a:	f8c0 481c 	str.w	r4, [r0, #2076]	; 0x81c
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8005c6e:	f8d3 1b00 	ldr.w	r1, [r3, #2816]	; 0xb00
 8005c72:	4a23      	ldr	r2, [pc, #140]	; (8005d00 <USB_DeactivateEndpoint+0xd4>)
 8005c74:	400a      	ands	r2, r1
 8005c76:	f8c3 2b00 	str.w	r2, [r3, #2816]	; 0xb00
}
 8005c7a:	2000      	movs	r0, #0
 8005c7c:	bc30      	pop	{r4, r5}
 8005c7e:	4770      	bx	lr
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8005c80:	eb00 1343 	add.w	r3, r0, r3, lsl #5
 8005c84:	f8d3 2900 	ldr.w	r2, [r3, #2304]	; 0x900
 8005c88:	2a00      	cmp	r2, #0
 8005c8a:	db1e      	blt.n	8005cca <USB_DeactivateEndpoint+0x9e>
    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8005c8c:	f8d0 583c 	ldr.w	r5, [r0, #2108]	; 0x83c
 8005c90:	780a      	ldrb	r2, [r1, #0]
 8005c92:	f002 020f 	and.w	r2, r2, #15
 8005c96:	2401      	movs	r4, #1
 8005c98:	fa04 f202 	lsl.w	r2, r4, r2
 8005c9c:	b292      	uxth	r2, r2
 8005c9e:	ea25 0202 	bic.w	r2, r5, r2
 8005ca2:	f8c0 283c 	str.w	r2, [r0, #2108]	; 0x83c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8005ca6:	f8d0 281c 	ldr.w	r2, [r0, #2076]	; 0x81c
 8005caa:	7809      	ldrb	r1, [r1, #0]
 8005cac:	f001 010f 	and.w	r1, r1, #15
 8005cb0:	408c      	lsls	r4, r1
 8005cb2:	b2a4      	uxth	r4, r4
 8005cb4:	ea22 0404 	bic.w	r4, r2, r4
 8005cb8:	f8c0 481c 	str.w	r4, [r0, #2076]	; 0x81c
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8005cbc:	f8d3 1900 	ldr.w	r1, [r3, #2304]	; 0x900
 8005cc0:	4a10      	ldr	r2, [pc, #64]	; (8005d04 <USB_DeactivateEndpoint+0xd8>)
 8005cc2:	400a      	ands	r2, r1
 8005cc4:	f8c3 2900 	str.w	r2, [r3, #2304]	; 0x900
 8005cc8:	e7d7      	b.n	8005c7a <USB_DeactivateEndpoint+0x4e>
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8005cca:	f8d3 2900 	ldr.w	r2, [r3, #2304]	; 0x900
 8005cce:	f042 6200 	orr.w	r2, r2, #134217728	; 0x8000000
 8005cd2:	f8c3 2900 	str.w	r2, [r3, #2304]	; 0x900
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8005cd6:	f8d3 2900 	ldr.w	r2, [r3, #2304]	; 0x900
 8005cda:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8005cde:	f8c3 2900 	str.w	r2, [r3, #2304]	; 0x900
 8005ce2:	e7d3      	b.n	8005c8c <USB_DeactivateEndpoint+0x60>
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8005ce4:	f8d3 2b00 	ldr.w	r2, [r3, #2816]	; 0xb00
 8005ce8:	f042 6200 	orr.w	r2, r2, #134217728	; 0x8000000
 8005cec:	f8c3 2b00 	str.w	r2, [r3, #2816]	; 0xb00
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8005cf0:	f8d3 2b00 	ldr.w	r2, [r3, #2816]	; 0xb00
 8005cf4:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8005cf8:	f8c3 2b00 	str.w	r2, [r3, #2816]	; 0xb00
 8005cfc:	e7a1      	b.n	8005c42 <USB_DeactivateEndpoint+0x16>
 8005cfe:	bf00      	nop
 8005d00:	eff37800 	.word	0xeff37800
 8005d04:	ec337800 	.word	0xec337800

08005d08 <USB_EP0StartXfer>:
{
 8005d08:	b470      	push	{r4, r5, r6}
  uint32_t epnum = (uint32_t)ep->num;
 8005d0a:	780b      	ldrb	r3, [r1, #0]
  if (ep->is_in == 1U)
 8005d0c:	784c      	ldrb	r4, [r1, #1]
 8005d0e:	2c01      	cmp	r4, #1
 8005d10:	d024      	beq.n	8005d5c <USB_EP0StartXfer+0x54>
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8005d12:	eb00 1043 	add.w	r0, r0, r3, lsl #5
 8005d16:	f500 6330 	add.w	r3, r0, #2816	; 0xb00
 8005d1a:	691d      	ldr	r5, [r3, #16]
 8005d1c:	4c3e      	ldr	r4, [pc, #248]	; (8005e18 <USB_EP0StartXfer+0x110>)
 8005d1e:	402c      	ands	r4, r5
 8005d20:	611c      	str	r4, [r3, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8005d22:	691d      	ldr	r5, [r3, #16]
 8005d24:	4c3d      	ldr	r4, [pc, #244]	; (8005e1c <USB_EP0StartXfer+0x114>)
 8005d26:	402c      	ands	r4, r5
 8005d28:	611c      	str	r4, [r3, #16]
    if (ep->xfer_len > 0U)
 8005d2a:	694c      	ldr	r4, [r1, #20]
 8005d2c:	b10c      	cbz	r4, 8005d32 <USB_EP0StartXfer+0x2a>
      ep->xfer_len = ep->maxpacket;
 8005d2e:	688c      	ldr	r4, [r1, #8]
 8005d30:	614c      	str	r4, [r1, #20]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8005d32:	691c      	ldr	r4, [r3, #16]
 8005d34:	f444 2400 	orr.w	r4, r4, #524288	; 0x80000
 8005d38:	611c      	str	r4, [r3, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 8005d3a:	691c      	ldr	r4, [r3, #16]
 8005d3c:	688d      	ldr	r5, [r1, #8]
 8005d3e:	f3c5 0512 	ubfx	r5, r5, #0, #19
 8005d42:	432c      	orrs	r4, r5
 8005d44:	611c      	str	r4, [r3, #16]
    if (dma == 1U)
 8005d46:	2a01      	cmp	r2, #1
 8005d48:	d061      	beq.n	8005e0e <USB_EP0StartXfer+0x106>
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8005d4a:	f8d0 3b00 	ldr.w	r3, [r0, #2816]	; 0xb00
 8005d4e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005d52:	f8c0 3b00 	str.w	r3, [r0, #2816]	; 0xb00
}
 8005d56:	2000      	movs	r0, #0
 8005d58:	bc70      	pop	{r4, r5, r6}
 8005d5a:	4770      	bx	lr
    if (ep->xfer_len == 0U)
 8005d5c:	694c      	ldr	r4, [r1, #20]
 8005d5e:	bb5c      	cbnz	r4, 8005db8 <USB_EP0StartXfer+0xb0>
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8005d60:	eb00 1443 	add.w	r4, r0, r3, lsl #5
 8005d64:	f8d4 6910 	ldr.w	r6, [r4, #2320]	; 0x910
 8005d68:	4d2c      	ldr	r5, [pc, #176]	; (8005e1c <USB_EP0StartXfer+0x114>)
 8005d6a:	4035      	ands	r5, r6
 8005d6c:	f8c4 5910 	str.w	r5, [r4, #2320]	; 0x910
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8005d70:	f8d4 5910 	ldr.w	r5, [r4, #2320]	; 0x910
 8005d74:	f445 2500 	orr.w	r5, r5, #524288	; 0x80000
 8005d78:	f8c4 5910 	str.w	r5, [r4, #2320]	; 0x910
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005d7c:	f8d4 6910 	ldr.w	r6, [r4, #2320]	; 0x910
 8005d80:	4d25      	ldr	r5, [pc, #148]	; (8005e18 <USB_EP0StartXfer+0x110>)
 8005d82:	4035      	ands	r5, r6
 8005d84:	f8c4 5910 	str.w	r5, [r4, #2320]	; 0x910
    if (dma == 1U)
 8005d88:	2a01      	cmp	r2, #1
 8005d8a:	d031      	beq.n	8005df0 <USB_EP0StartXfer+0xe8>
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8005d8c:	eb00 1343 	add.w	r3, r0, r3, lsl #5
 8005d90:	f8d3 2900 	ldr.w	r2, [r3, #2304]	; 0x900
 8005d94:	f042 4204 	orr.w	r2, r2, #2214592512	; 0x84000000
 8005d98:	f8c3 2900 	str.w	r2, [r3, #2304]	; 0x900
      if (ep->xfer_len > 0U)
 8005d9c:	694b      	ldr	r3, [r1, #20]
 8005d9e:	2b00      	cmp	r3, #0
 8005da0:	d0d9      	beq.n	8005d56 <USB_EP0StartXfer+0x4e>
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8005da2:	f8d0 3834 	ldr.w	r3, [r0, #2100]	; 0x834
 8005da6:	780a      	ldrb	r2, [r1, #0]
 8005da8:	f002 010f 	and.w	r1, r2, #15
 8005dac:	2201      	movs	r2, #1
 8005dae:	408a      	lsls	r2, r1
 8005db0:	4313      	orrs	r3, r2
 8005db2:	f8c0 3834 	str.w	r3, [r0, #2100]	; 0x834
 8005db6:	e7ce      	b.n	8005d56 <USB_EP0StartXfer+0x4e>
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005db8:	eb00 1443 	add.w	r4, r0, r3, lsl #5
 8005dbc:	f504 6410 	add.w	r4, r4, #2304	; 0x900
 8005dc0:	6926      	ldr	r6, [r4, #16]
 8005dc2:	4d15      	ldr	r5, [pc, #84]	; (8005e18 <USB_EP0StartXfer+0x110>)
 8005dc4:	4035      	ands	r5, r6
 8005dc6:	6125      	str	r5, [r4, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8005dc8:	6926      	ldr	r6, [r4, #16]
 8005dca:	4d14      	ldr	r5, [pc, #80]	; (8005e1c <USB_EP0StartXfer+0x114>)
 8005dcc:	4035      	ands	r5, r6
 8005dce:	6125      	str	r5, [r4, #16]
      if (ep->xfer_len > ep->maxpacket)
 8005dd0:	694e      	ldr	r6, [r1, #20]
 8005dd2:	688d      	ldr	r5, [r1, #8]
 8005dd4:	42ae      	cmp	r6, r5
 8005dd6:	d900      	bls.n	8005dda <USB_EP0StartXfer+0xd2>
        ep->xfer_len = ep->maxpacket;
 8005dd8:	614d      	str	r5, [r1, #20]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8005dda:	6925      	ldr	r5, [r4, #16]
 8005ddc:	f445 2500 	orr.w	r5, r5, #524288	; 0x80000
 8005de0:	6125      	str	r5, [r4, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8005de2:	6925      	ldr	r5, [r4, #16]
 8005de4:	694e      	ldr	r6, [r1, #20]
 8005de6:	f3c6 0612 	ubfx	r6, r6, #0, #19
 8005dea:	4335      	orrs	r5, r6
 8005dec:	6125      	str	r5, [r4, #16]
 8005dee:	e7cb      	b.n	8005d88 <USB_EP0StartXfer+0x80>
      if ((uint32_t)ep->dma_addr != 0U)
 8005df0:	690a      	ldr	r2, [r1, #16]
 8005df2:	b11a      	cbz	r2, 8005dfc <USB_EP0StartXfer+0xf4>
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8005df4:	eb00 1143 	add.w	r1, r0, r3, lsl #5
 8005df8:	f8c1 2914 	str.w	r2, [r1, #2324]	; 0x914
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8005dfc:	eb00 1043 	add.w	r0, r0, r3, lsl #5
 8005e00:	f8d0 2900 	ldr.w	r2, [r0, #2304]	; 0x900
 8005e04:	f042 4204 	orr.w	r2, r2, #2214592512	; 0x84000000
 8005e08:	f8c0 2900 	str.w	r2, [r0, #2304]	; 0x900
 8005e0c:	e7a3      	b.n	8005d56 <USB_EP0StartXfer+0x4e>
      if ((uint32_t)ep->xfer_buff != 0U)
 8005e0e:	68ca      	ldr	r2, [r1, #12]
 8005e10:	2a00      	cmp	r2, #0
 8005e12:	d09a      	beq.n	8005d4a <USB_EP0StartXfer+0x42>
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8005e14:	615a      	str	r2, [r3, #20]
 8005e16:	e798      	b.n	8005d4a <USB_EP0StartXfer+0x42>
 8005e18:	fff80000 	.word	0xfff80000
 8005e1c:	e007ffff 	.word	0xe007ffff

08005e20 <USB_WritePacket>:
{
 8005e20:	b470      	push	{r4, r5, r6}
 8005e22:	f89d 400c 	ldrb.w	r4, [sp, #12]
  if (dma == 0U)
 8005e26:	b964      	cbnz	r4, 8005e42 <USB_WritePacket+0x22>
    count32b = ((uint32_t)len + 3U) / 4U;
 8005e28:	3303      	adds	r3, #3
 8005e2a:	089d      	lsrs	r5, r3, #2
    for (i = 0U; i < count32b; i++)
 8005e2c:	42ac      	cmp	r4, r5
 8005e2e:	d208      	bcs.n	8005e42 <USB_WritePacket+0x22>
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8005e30:	eb00 3302 	add.w	r3, r0, r2, lsl #12
 8005e34:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005e38:	f851 6b04 	ldr.w	r6, [r1], #4
 8005e3c:	601e      	str	r6, [r3, #0]
    for (i = 0U; i < count32b; i++)
 8005e3e:	3401      	adds	r4, #1
 8005e40:	e7f4      	b.n	8005e2c <USB_WritePacket+0xc>
}
 8005e42:	2000      	movs	r0, #0
 8005e44:	bc70      	pop	{r4, r5, r6}
 8005e46:	4770      	bx	lr

08005e48 <USB_EPStartXfer>:
{
 8005e48:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005e4a:	b083      	sub	sp, #12
  uint32_t epnum = (uint32_t)ep->num;
 8005e4c:	780b      	ldrb	r3, [r1, #0]
  if (ep->is_in == 1U)
 8005e4e:	784c      	ldrb	r4, [r1, #1]
 8005e50:	2c01      	cmp	r4, #1
 8005e52:	d029      	beq.n	8005ea8 <USB_EPStartXfer+0x60>
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8005e54:	eb00 1343 	add.w	r3, r0, r3, lsl #5
 8005e58:	f503 6430 	add.w	r4, r3, #2816	; 0xb00
 8005e5c:	6926      	ldr	r6, [r4, #16]
 8005e5e:	4d7c      	ldr	r5, [pc, #496]	; (8006050 <USB_EPStartXfer+0x208>)
 8005e60:	4035      	ands	r5, r6
 8005e62:	6125      	str	r5, [r4, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8005e64:	6926      	ldr	r6, [r4, #16]
 8005e66:	4d7b      	ldr	r5, [pc, #492]	; (8006054 <USB_EPStartXfer+0x20c>)
 8005e68:	4035      	ands	r5, r6
 8005e6a:	6125      	str	r5, [r4, #16]
    if (ep->xfer_len == 0U)
 8005e6c:	694d      	ldr	r5, [r1, #20]
 8005e6e:	2d00      	cmp	r5, #0
 8005e70:	f040 80bf 	bne.w	8005ff2 <USB_EPStartXfer+0x1aa>
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8005e74:	6925      	ldr	r5, [r4, #16]
 8005e76:	688e      	ldr	r6, [r1, #8]
 8005e78:	f3c6 0612 	ubfx	r6, r6, #0, #19
 8005e7c:	4335      	orrs	r5, r6
 8005e7e:	6125      	str	r5, [r4, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8005e80:	6925      	ldr	r5, [r4, #16]
 8005e82:	f445 2500 	orr.w	r5, r5, #524288	; 0x80000
 8005e86:	6125      	str	r5, [r4, #16]
    if (dma == 1U)
 8005e88:	2a01      	cmp	r2, #1
 8005e8a:	f000 80c7 	beq.w	800601c <USB_EPStartXfer+0x1d4>
    if (ep->type == EP_TYPE_ISOC)
 8005e8e:	78ca      	ldrb	r2, [r1, #3]
 8005e90:	2a01      	cmp	r2, #1
 8005e92:	f000 80c9 	beq.w	8006028 <USB_EPStartXfer+0x1e0>
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8005e96:	f8d3 2b00 	ldr.w	r2, [r3, #2816]	; 0xb00
 8005e9a:	f042 4204 	orr.w	r2, r2, #2214592512	; 0x84000000
 8005e9e:	f8c3 2b00 	str.w	r2, [r3, #2816]	; 0xb00
}
 8005ea2:	2000      	movs	r0, #0
 8005ea4:	b003      	add	sp, #12
 8005ea6:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if (ep->xfer_len == 0U)
 8005ea8:	694c      	ldr	r4, [r1, #20]
 8005eaa:	bb74      	cbnz	r4, 8005f0a <USB_EPStartXfer+0xc2>
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8005eac:	eb00 1443 	add.w	r4, r0, r3, lsl #5
 8005eb0:	f8d4 6910 	ldr.w	r6, [r4, #2320]	; 0x910
 8005eb4:	4d67      	ldr	r5, [pc, #412]	; (8006054 <USB_EPStartXfer+0x20c>)
 8005eb6:	4035      	ands	r5, r6
 8005eb8:	f8c4 5910 	str.w	r5, [r4, #2320]	; 0x910
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8005ebc:	f8d4 5910 	ldr.w	r5, [r4, #2320]	; 0x910
 8005ec0:	f445 2500 	orr.w	r5, r5, #524288	; 0x80000
 8005ec4:	f8c4 5910 	str.w	r5, [r4, #2320]	; 0x910
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005ec8:	f8d4 6910 	ldr.w	r6, [r4, #2320]	; 0x910
 8005ecc:	4d60      	ldr	r5, [pc, #384]	; (8006050 <USB_EPStartXfer+0x208>)
 8005ece:	4035      	ands	r5, r6
 8005ed0:	f8c4 5910 	str.w	r5, [r4, #2320]	; 0x910
    if (dma == 1U)
 8005ed4:	2a01      	cmp	r2, #1
 8005ed6:	d04a      	beq.n	8005f6e <USB_EPStartXfer+0x126>
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8005ed8:	eb00 1343 	add.w	r3, r0, r3, lsl #5
 8005edc:	f8d3 4900 	ldr.w	r4, [r3, #2304]	; 0x900
 8005ee0:	f044 4404 	orr.w	r4, r4, #2214592512	; 0x84000000
 8005ee4:	f8c3 4900 	str.w	r4, [r3, #2304]	; 0x900
      if (ep->type != EP_TYPE_ISOC)
 8005ee8:	78cc      	ldrb	r4, [r1, #3]
 8005eea:	2c01      	cmp	r4, #1
 8005eec:	d068      	beq.n	8005fc0 <USB_EPStartXfer+0x178>
        if (ep->xfer_len > 0U)
 8005eee:	694b      	ldr	r3, [r1, #20]
 8005ef0:	2b00      	cmp	r3, #0
 8005ef2:	d0d6      	beq.n	8005ea2 <USB_EPStartXfer+0x5a>
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8005ef4:	f8d0 2834 	ldr.w	r2, [r0, #2100]	; 0x834
 8005ef8:	7809      	ldrb	r1, [r1, #0]
 8005efa:	f001 040f 	and.w	r4, r1, #15
 8005efe:	2101      	movs	r1, #1
 8005f00:	40a1      	lsls	r1, r4
 8005f02:	430a      	orrs	r2, r1
 8005f04:	f8c0 2834 	str.w	r2, [r0, #2100]	; 0x834
 8005f08:	e7cb      	b.n	8005ea2 <USB_EPStartXfer+0x5a>
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005f0a:	eb00 1443 	add.w	r4, r0, r3, lsl #5
 8005f0e:	f8d4 6910 	ldr.w	r6, [r4, #2320]	; 0x910
 8005f12:	4d4f      	ldr	r5, [pc, #316]	; (8006050 <USB_EPStartXfer+0x208>)
 8005f14:	4035      	ands	r5, r6
 8005f16:	f8c4 5910 	str.w	r5, [r4, #2320]	; 0x910
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8005f1a:	f8d4 6910 	ldr.w	r6, [r4, #2320]	; 0x910
 8005f1e:	4d4d      	ldr	r5, [pc, #308]	; (8006054 <USB_EPStartXfer+0x20c>)
 8005f20:	4035      	ands	r5, r6
 8005f22:	f8c4 5910 	str.w	r5, [r4, #2320]	; 0x910
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8005f26:	f8d4 6910 	ldr.w	r6, [r4, #2320]	; 0x910
 8005f2a:	694d      	ldr	r5, [r1, #20]
 8005f2c:	688f      	ldr	r7, [r1, #8]
 8005f2e:	443d      	add	r5, r7
 8005f30:	3d01      	subs	r5, #1
 8005f32:	fbb5 f5f7 	udiv	r5, r5, r7
 8005f36:	4f48      	ldr	r7, [pc, #288]	; (8006058 <USB_EPStartXfer+0x210>)
 8005f38:	ea07 45c5 	and.w	r5, r7, r5, lsl #19
 8005f3c:	4335      	orrs	r5, r6
 8005f3e:	f8c4 5910 	str.w	r5, [r4, #2320]	; 0x910
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8005f42:	f8d4 5910 	ldr.w	r5, [r4, #2320]	; 0x910
 8005f46:	694e      	ldr	r6, [r1, #20]
 8005f48:	f3c6 0612 	ubfx	r6, r6, #0, #19
 8005f4c:	4335      	orrs	r5, r6
 8005f4e:	f8c4 5910 	str.w	r5, [r4, #2320]	; 0x910
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005f52:	f504 6410 	add.w	r4, r4, #2304	; 0x900
      if (ep->type == EP_TYPE_ISOC)
 8005f56:	78cd      	ldrb	r5, [r1, #3]
 8005f58:	2d01      	cmp	r5, #1
 8005f5a:	d1bb      	bne.n	8005ed4 <USB_EPStartXfer+0x8c>
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8005f5c:	6925      	ldr	r5, [r4, #16]
 8005f5e:	f025 45c0 	bic.w	r5, r5, #1610612736	; 0x60000000
 8005f62:	6125      	str	r5, [r4, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8005f64:	6925      	ldr	r5, [r4, #16]
 8005f66:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 8005f6a:	6125      	str	r5, [r4, #16]
 8005f6c:	e7b2      	b.n	8005ed4 <USB_EPStartXfer+0x8c>
      if ((uint32_t)ep->dma_addr != 0U)
 8005f6e:	690a      	ldr	r2, [r1, #16]
 8005f70:	b11a      	cbz	r2, 8005f7a <USB_EPStartXfer+0x132>
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8005f72:	eb00 1443 	add.w	r4, r0, r3, lsl #5
 8005f76:	f8c4 2914 	str.w	r2, [r4, #2324]	; 0x914
      if (ep->type == EP_TYPE_ISOC)
 8005f7a:	78ca      	ldrb	r2, [r1, #3]
 8005f7c:	2a01      	cmp	r2, #1
 8005f7e:	d008      	beq.n	8005f92 <USB_EPStartXfer+0x14a>
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8005f80:	eb00 1343 	add.w	r3, r0, r3, lsl #5
 8005f84:	f8d3 2900 	ldr.w	r2, [r3, #2304]	; 0x900
 8005f88:	f042 4204 	orr.w	r2, r2, #2214592512	; 0x84000000
 8005f8c:	f8c3 2900 	str.w	r2, [r3, #2304]	; 0x900
 8005f90:	e787      	b.n	8005ea2 <USB_EPStartXfer+0x5a>
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8005f92:	f8d0 2808 	ldr.w	r2, [r0, #2056]	; 0x808
 8005f96:	f412 7f80 	tst.w	r2, #256	; 0x100
 8005f9a:	d108      	bne.n	8005fae <USB_EPStartXfer+0x166>
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8005f9c:	eb00 1143 	add.w	r1, r0, r3, lsl #5
 8005fa0:	f8d1 2900 	ldr.w	r2, [r1, #2304]	; 0x900
 8005fa4:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 8005fa8:	f8c1 2900 	str.w	r2, [r1, #2304]	; 0x900
 8005fac:	e7e8      	b.n	8005f80 <USB_EPStartXfer+0x138>
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8005fae:	eb00 1143 	add.w	r1, r0, r3, lsl #5
 8005fb2:	f8d1 2900 	ldr.w	r2, [r1, #2304]	; 0x900
 8005fb6:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8005fba:	f8c1 2900 	str.w	r2, [r1, #2304]	; 0x900
 8005fbe:	e7df      	b.n	8005f80 <USB_EPStartXfer+0x138>
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8005fc0:	f8d0 4808 	ldr.w	r4, [r0, #2056]	; 0x808
 8005fc4:	f414 7f80 	tst.w	r4, #256	; 0x100
 8005fc8:	d10c      	bne.n	8005fe4 <USB_EPStartXfer+0x19c>
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8005fca:	f8d3 4900 	ldr.w	r4, [r3, #2304]	; 0x900
 8005fce:	f044 5400 	orr.w	r4, r4, #536870912	; 0x20000000
 8005fd2:	f8c3 4900 	str.w	r4, [r3, #2304]	; 0x900
        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8005fd6:	9200      	str	r2, [sp, #0]
 8005fd8:	8a8b      	ldrh	r3, [r1, #20]
 8005fda:	780a      	ldrb	r2, [r1, #0]
 8005fdc:	68c9      	ldr	r1, [r1, #12]
 8005fde:	f7ff ff1f 	bl	8005e20 <USB_WritePacket>
 8005fe2:	e75e      	b.n	8005ea2 <USB_EPStartXfer+0x5a>
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8005fe4:	f8d3 4900 	ldr.w	r4, [r3, #2304]	; 0x900
 8005fe8:	f044 5480 	orr.w	r4, r4, #268435456	; 0x10000000
 8005fec:	f8c3 4900 	str.w	r4, [r3, #2304]	; 0x900
 8005ff0:	e7f1      	b.n	8005fd6 <USB_EPStartXfer+0x18e>
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8005ff2:	688e      	ldr	r6, [r1, #8]
 8005ff4:	4435      	add	r5, r6
 8005ff6:	3d01      	subs	r5, #1
 8005ff8:	fbb5 f5f6 	udiv	r5, r5, r6
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8005ffc:	6926      	ldr	r6, [r4, #16]
 8005ffe:	4f16      	ldr	r7, [pc, #88]	; (8006058 <USB_EPStartXfer+0x210>)
 8006000:	ea07 47c5 	and.w	r7, r7, r5, lsl #19
 8006004:	433e      	orrs	r6, r7
 8006006:	6126      	str	r6, [r4, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 8006008:	6927      	ldr	r7, [r4, #16]
 800600a:	688e      	ldr	r6, [r1, #8]
 800600c:	b2ad      	uxth	r5, r5
 800600e:	fb06 f505 	mul.w	r5, r6, r5
 8006012:	f3c5 0512 	ubfx	r5, r5, #0, #19
 8006016:	433d      	orrs	r5, r7
 8006018:	6125      	str	r5, [r4, #16]
 800601a:	e735      	b.n	8005e88 <USB_EPStartXfer+0x40>
      if ((uint32_t)ep->xfer_buff != 0U)
 800601c:	68ca      	ldr	r2, [r1, #12]
 800601e:	2a00      	cmp	r2, #0
 8006020:	f43f af35 	beq.w	8005e8e <USB_EPStartXfer+0x46>
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8006024:	6162      	str	r2, [r4, #20]
 8006026:	e732      	b.n	8005e8e <USB_EPStartXfer+0x46>
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8006028:	f8d0 2808 	ldr.w	r2, [r0, #2056]	; 0x808
 800602c:	f412 7f80 	tst.w	r2, #256	; 0x100
 8006030:	d106      	bne.n	8006040 <USB_EPStartXfer+0x1f8>
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8006032:	f8d3 2b00 	ldr.w	r2, [r3, #2816]	; 0xb00
 8006036:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 800603a:	f8c3 2b00 	str.w	r2, [r3, #2816]	; 0xb00
 800603e:	e72a      	b.n	8005e96 <USB_EPStartXfer+0x4e>
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8006040:	f8d3 2b00 	ldr.w	r2, [r3, #2816]	; 0xb00
 8006044:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8006048:	f8c3 2b00 	str.w	r2, [r3, #2816]	; 0xb00
 800604c:	e723      	b.n	8005e96 <USB_EPStartXfer+0x4e>
 800604e:	bf00      	nop
 8006050:	fff80000 	.word	0xfff80000
 8006054:	e007ffff 	.word	0xe007ffff
 8006058:	1ff80000 	.word	0x1ff80000

0800605c <USB_ReadPacket>:
{
 800605c:	b410      	push	{r4}
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 800605e:	3203      	adds	r2, #3
 8006060:	0894      	lsrs	r4, r2, #2
  for (i = 0U; i < count32b; i++)
 8006062:	2300      	movs	r3, #0
 8006064:	42a3      	cmp	r3, r4
 8006066:	d206      	bcs.n	8006076 <USB_ReadPacket+0x1a>
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8006068:	f500 5280 	add.w	r2, r0, #4096	; 0x1000
 800606c:	6812      	ldr	r2, [r2, #0]
 800606e:	f841 2b04 	str.w	r2, [r1], #4
  for (i = 0U; i < count32b; i++)
 8006072:	3301      	adds	r3, #1
 8006074:	e7f6      	b.n	8006064 <USB_ReadPacket+0x8>
}
 8006076:	4608      	mov	r0, r1
 8006078:	f85d 4b04 	ldr.w	r4, [sp], #4
 800607c:	4770      	bx	lr

0800607e <USB_EPSetStall>:
  uint32_t epnum = (uint32_t)ep->num;
 800607e:	780b      	ldrb	r3, [r1, #0]
  if (ep->is_in == 1U)
 8006080:	784a      	ldrb	r2, [r1, #1]
 8006082:	2a01      	cmp	r2, #1
 8006084:	d014      	beq.n	80060b0 <USB_EPSetStall+0x32>
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8006086:	eb00 1043 	add.w	r0, r0, r3, lsl #5
 800608a:	f8d0 2b00 	ldr.w	r2, [r0, #2816]	; 0xb00
 800608e:	2a00      	cmp	r2, #0
 8006090:	db06      	blt.n	80060a0 <USB_EPSetStall+0x22>
 8006092:	b12b      	cbz	r3, 80060a0 <USB_EPSetStall+0x22>
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8006094:	f8d0 3b00 	ldr.w	r3, [r0, #2816]	; 0xb00
 8006098:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800609c:	f8c0 3b00 	str.w	r3, [r0, #2816]	; 0xb00
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 80060a0:	f8d0 3b00 	ldr.w	r3, [r0, #2816]	; 0xb00
 80060a4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80060a8:	f8c0 3b00 	str.w	r3, [r0, #2816]	; 0xb00
}
 80060ac:	2000      	movs	r0, #0
 80060ae:	4770      	bx	lr
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 80060b0:	eb00 1043 	add.w	r0, r0, r3, lsl #5
 80060b4:	f8d0 2900 	ldr.w	r2, [r0, #2304]	; 0x900
 80060b8:	2a00      	cmp	r2, #0
 80060ba:	db06      	blt.n	80060ca <USB_EPSetStall+0x4c>
 80060bc:	b12b      	cbz	r3, 80060ca <USB_EPSetStall+0x4c>
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 80060be:	f8d0 3900 	ldr.w	r3, [r0, #2304]	; 0x900
 80060c2:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80060c6:	f8c0 3900 	str.w	r3, [r0, #2304]	; 0x900
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 80060ca:	f8d0 3900 	ldr.w	r3, [r0, #2304]	; 0x900
 80060ce:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80060d2:	f8c0 3900 	str.w	r3, [r0, #2304]	; 0x900
 80060d6:	e7e9      	b.n	80060ac <USB_EPSetStall+0x2e>

080060d8 <USB_EPClearStall>:
  uint32_t epnum = (uint32_t)ep->num;
 80060d8:	780b      	ldrb	r3, [r1, #0]
  if (ep->is_in == 1U)
 80060da:	784a      	ldrb	r2, [r1, #1]
 80060dc:	2a01      	cmp	r2, #1
 80060de:	d00e      	beq.n	80060fe <USB_EPClearStall+0x26>
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80060e0:	eb00 1043 	add.w	r0, r0, r3, lsl #5
 80060e4:	f8d0 3b00 	ldr.w	r3, [r0, #2816]	; 0xb00
 80060e8:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80060ec:	f8c0 3b00 	str.w	r3, [r0, #2816]	; 0xb00
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80060f0:	78cb      	ldrb	r3, [r1, #3]
 80060f2:	3b02      	subs	r3, #2
 80060f4:	b2db      	uxtb	r3, r3
 80060f6:	2b01      	cmp	r3, #1
 80060f8:	d915      	bls.n	8006126 <USB_EPClearStall+0x4e>
}
 80060fa:	2000      	movs	r0, #0
 80060fc:	4770      	bx	lr
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80060fe:	eb00 1043 	add.w	r0, r0, r3, lsl #5
 8006102:	f8d0 3900 	ldr.w	r3, [r0, #2304]	; 0x900
 8006106:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800610a:	f8c0 3900 	str.w	r3, [r0, #2304]	; 0x900
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800610e:	78cb      	ldrb	r3, [r1, #3]
 8006110:	3b02      	subs	r3, #2
 8006112:	b2db      	uxtb	r3, r3
 8006114:	2b01      	cmp	r3, #1
 8006116:	d8f0      	bhi.n	80060fa <USB_EPClearStall+0x22>
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8006118:	f8d0 3900 	ldr.w	r3, [r0, #2304]	; 0x900
 800611c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006120:	f8c0 3900 	str.w	r3, [r0, #2304]	; 0x900
 8006124:	e7e9      	b.n	80060fa <USB_EPClearStall+0x22>
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8006126:	f8d0 3b00 	ldr.w	r3, [r0, #2816]	; 0xb00
 800612a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800612e:	f8c0 3b00 	str.w	r3, [r0, #2816]	; 0xb00
 8006132:	e7e2      	b.n	80060fa <USB_EPClearStall+0x22>

08006134 <USB_SetDevAddress>:
  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8006134:	f8d0 3800 	ldr.w	r3, [r0, #2048]	; 0x800
 8006138:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800613c:	f8c0 3800 	str.w	r3, [r0, #2048]	; 0x800
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8006140:	f8d0 3800 	ldr.w	r3, [r0, #2048]	; 0x800
 8006144:	0109      	lsls	r1, r1, #4
 8006146:	f401 61fe 	and.w	r1, r1, #2032	; 0x7f0
 800614a:	4319      	orrs	r1, r3
 800614c:	f8c0 1800 	str.w	r1, [r0, #2048]	; 0x800
}
 8006150:	2000      	movs	r0, #0
 8006152:	4770      	bx	lr

08006154 <USB_DevConnect>:
{
 8006154:	b508      	push	{r3, lr}
  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8006156:	f8d0 3804 	ldr.w	r3, [r0, #2052]	; 0x804
 800615a:	f023 0302 	bic.w	r3, r3, #2
 800615e:	f8c0 3804 	str.w	r3, [r0, #2052]	; 0x804
  HAL_Delay(3U);
 8006162:	2003      	movs	r0, #3
 8006164:	f7fa fe48 	bl	8000df8 <HAL_Delay>
}
 8006168:	2000      	movs	r0, #0
 800616a:	bd08      	pop	{r3, pc}

0800616c <USB_DevDisconnect>:
{
 800616c:	b508      	push	{r3, lr}
  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800616e:	f8d0 3804 	ldr.w	r3, [r0, #2052]	; 0x804
 8006172:	f043 0302 	orr.w	r3, r3, #2
 8006176:	f8c0 3804 	str.w	r3, [r0, #2052]	; 0x804
  HAL_Delay(3U);
 800617a:	2003      	movs	r0, #3
 800617c:	f7fa fe3c 	bl	8000df8 <HAL_Delay>
}
 8006180:	2000      	movs	r0, #0
 8006182:	bd08      	pop	{r3, pc}

08006184 <USB_ReadInterrupts>:
  tmpreg = USBx->GINTSTS;
 8006184:	6942      	ldr	r2, [r0, #20]
  tmpreg &= USBx->GINTMSK;
 8006186:	6980      	ldr	r0, [r0, #24]
}
 8006188:	4010      	ands	r0, r2
 800618a:	4770      	bx	lr

0800618c <USB_ReadDevAllOutEpInterrupt>:
  tmpreg  = USBx_DEVICE->DAINT;
 800618c:	f8d0 3818 	ldr.w	r3, [r0, #2072]	; 0x818
 8006190:	f500 6000 	add.w	r0, r0, #2048	; 0x800
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8006194:	69c0      	ldr	r0, [r0, #28]
 8006196:	4018      	ands	r0, r3
}
 8006198:	0c00      	lsrs	r0, r0, #16
 800619a:	4770      	bx	lr

0800619c <USB_ReadDevAllInEpInterrupt>:
  tmpreg  = USBx_DEVICE->DAINT;
 800619c:	f8d0 3818 	ldr.w	r3, [r0, #2072]	; 0x818
 80061a0:	f500 6000 	add.w	r0, r0, #2048	; 0x800
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80061a4:	69c0      	ldr	r0, [r0, #28]
 80061a6:	4018      	ands	r0, r3
}
 80061a8:	b280      	uxth	r0, r0
 80061aa:	4770      	bx	lr

080061ac <USB_ReadDevOutEPInterrupt>:
  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 80061ac:	eb00 1141 	add.w	r1, r0, r1, lsl #5
 80061b0:	f8d1 2b08 	ldr.w	r2, [r1, #2824]	; 0xb08
  tmpreg &= USBx_DEVICE->DOEPMSK;
 80061b4:	f500 6000 	add.w	r0, r0, #2048	; 0x800
 80061b8:	6940      	ldr	r0, [r0, #20]
}
 80061ba:	4010      	ands	r0, r2
 80061bc:	4770      	bx	lr

080061be <USB_ReadDevInEPInterrupt>:
{
 80061be:	b410      	push	{r4}
  msk = USBx_DEVICE->DIEPMSK;
 80061c0:	f8d0 4810 	ldr.w	r4, [r0, #2064]	; 0x810
  emp = USBx_DEVICE->DIEPEMPMSK;
 80061c4:	f8d0 3834 	ldr.w	r3, [r0, #2100]	; 0x834
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 80061c8:	f001 020f 	and.w	r2, r1, #15
 80061cc:	40d3      	lsrs	r3, r2
 80061ce:	01db      	lsls	r3, r3, #7
 80061d0:	b2db      	uxtb	r3, r3
 80061d2:	4323      	orrs	r3, r4
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 80061d4:	eb00 1041 	add.w	r0, r0, r1, lsl #5
 80061d8:	f500 6010 	add.w	r0, r0, #2304	; 0x900
 80061dc:	6880      	ldr	r0, [r0, #8]
}
 80061de:	4018      	ands	r0, r3
 80061e0:	f85d 4b04 	ldr.w	r4, [sp], #4
 80061e4:	4770      	bx	lr

080061e6 <USB_GetMode>:
  return ((USBx->GINTSTS) & 0x1U);
 80061e6:	6940      	ldr	r0, [r0, #20]
}
 80061e8:	f000 0001 	and.w	r0, r0, #1
 80061ec:	4770      	bx	lr
	...

080061f0 <USB_ActivateSetup>:
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 80061f0:	f8d0 2900 	ldr.w	r2, [r0, #2304]	; 0x900
 80061f4:	4b05      	ldr	r3, [pc, #20]	; (800620c <USB_ActivateSetup+0x1c>)
 80061f6:	4013      	ands	r3, r2
 80061f8:	f8c0 3900 	str.w	r3, [r0, #2304]	; 0x900
  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 80061fc:	f8d0 3804 	ldr.w	r3, [r0, #2052]	; 0x804
 8006200:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006204:	f8c0 3804 	str.w	r3, [r0, #2052]	; 0x804
}
 8006208:	2000      	movs	r0, #0
 800620a:	4770      	bx	lr
 800620c:	fffff800 	.word	0xfffff800

08006210 <USB_EP0_OutStart>:
{
 8006210:	b410      	push	{r4}
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8006212:	6c04      	ldr	r4, [r0, #64]	; 0x40
  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8006214:	4b15      	ldr	r3, [pc, #84]	; (800626c <USB_EP0_OutStart+0x5c>)
 8006216:	429c      	cmp	r4, r3
 8006218:	d903      	bls.n	8006222 <USB_EP0_OutStart+0x12>
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800621a:	f8d0 3b00 	ldr.w	r3, [r0, #2816]	; 0xb00
 800621e:	2b00      	cmp	r3, #0
 8006220:	db16      	blt.n	8006250 <USB_EP0_OutStart+0x40>
  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8006222:	2400      	movs	r4, #0
 8006224:	f8c0 4b10 	str.w	r4, [r0, #2832]	; 0xb10
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8006228:	f8d0 4b10 	ldr.w	r4, [r0, #2832]	; 0xb10
 800622c:	f444 2400 	orr.w	r4, r4, #524288	; 0x80000
 8006230:	f8c0 4b10 	str.w	r4, [r0, #2832]	; 0xb10
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8006234:	f8d0 4b10 	ldr.w	r4, [r0, #2832]	; 0xb10
 8006238:	f044 0418 	orr.w	r4, r4, #24
 800623c:	f8c0 4b10 	str.w	r4, [r0, #2832]	; 0xb10
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8006240:	f8d0 4b10 	ldr.w	r4, [r0, #2832]	; 0xb10
 8006244:	f044 44c0 	orr.w	r4, r4, #1610612736	; 0x60000000
 8006248:	f8c0 4b10 	str.w	r4, [r0, #2832]	; 0xb10
  if (dma == 1U)
 800624c:	2901      	cmp	r1, #1
 800624e:	d003      	beq.n	8006258 <USB_EP0_OutStart+0x48>
}
 8006250:	2000      	movs	r0, #0
 8006252:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006256:	4770      	bx	lr
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8006258:	f8c0 2b14 	str.w	r2, [r0, #2836]	; 0xb14
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 800625c:	f8d0 3b00 	ldr.w	r3, [r0, #2816]	; 0xb00
 8006260:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 8006264:	f8c0 3b00 	str.w	r3, [r0, #2816]	; 0xb00
 8006268:	e7f2      	b.n	8006250 <USB_EP0_OutStart+0x40>
 800626a:	bf00      	nop
 800626c:	4f54300a 	.word	0x4f54300a

08006270 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8006270:	b510      	push	{r4, lr}
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8006272:	f8d0 42bc 	ldr.w	r4, [r0, #700]	; 0x2bc

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8006276:	f8d0 32c0 	ldr.w	r3, [r0, #704]	; 0x2c0
 800627a:	b15b      	cbz	r3, 8006294 <USBD_CDC_EP0_RxReady+0x24>
 800627c:	f894 0800 	ldrb.w	r0, [r4, #2048]	; 0x800
 8006280:	28ff      	cmp	r0, #255	; 0xff
 8006282:	d007      	beq.n	8006294 <USBD_CDC_EP0_RxReady+0x24>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8006284:	689b      	ldr	r3, [r3, #8]
 8006286:	f894 2801 	ldrb.w	r2, [r4, #2049]	; 0x801
 800628a:	4621      	mov	r1, r4
 800628c:	4798      	blx	r3
                                                      (uint8_t *)hcdc->data,
                                                      (uint16_t)hcdc->CmdLength);
    hcdc->CmdOpCode = 0xFFU;
 800628e:	23ff      	movs	r3, #255	; 0xff
 8006290:	f884 3800 	strb.w	r3, [r4, #2048]	; 0x800

  }

  return (uint8_t)USBD_OK;
}
 8006294:	2000      	movs	r0, #0
 8006296:	bd10      	pop	{r4, pc}

08006298 <USBD_CDC_GetFSCfgDesc>:
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 8006298:	2343      	movs	r3, #67	; 0x43
 800629a:	8003      	strh	r3, [r0, #0]

  return USBD_CDC_CfgFSDesc;
}
 800629c:	4800      	ldr	r0, [pc, #0]	; (80062a0 <USBD_CDC_GetFSCfgDesc+0x8>)
 800629e:	4770      	bx	lr
 80062a0:	20000008 	.word	0x20000008

080062a4 <USBD_CDC_GetHSCfgDesc>:
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 80062a4:	2343      	movs	r3, #67	; 0x43
 80062a6:	8003      	strh	r3, [r0, #0]

  return USBD_CDC_CfgHSDesc;
}
 80062a8:	4800      	ldr	r0, [pc, #0]	; (80062ac <USBD_CDC_GetHSCfgDesc+0x8>)
 80062aa:	4770      	bx	lr
 80062ac:	2000004c 	.word	0x2000004c

080062b0 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 80062b0:	2343      	movs	r3, #67	; 0x43
 80062b2:	8003      	strh	r3, [r0, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
}
 80062b4:	4800      	ldr	r0, [pc, #0]	; (80062b8 <USBD_CDC_GetOtherSpeedCfgDesc+0x8>)
 80062b6:	4770      	bx	lr
 80062b8:	20000090 	.word	0x20000090

080062bc <USBD_CDC_GetDeviceQualifierDescriptor>:
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 80062bc:	230a      	movs	r3, #10
 80062be:	8003      	strh	r3, [r0, #0]

  return USBD_CDC_DeviceQualifierDesc;
}
 80062c0:	4800      	ldr	r0, [pc, #0]	; (80062c4 <USBD_CDC_GetDeviceQualifierDescriptor+0x8>)
 80062c2:	4770      	bx	lr
 80062c4:	200000d4 	.word	0x200000d4

080062c8 <USBD_CDC_DataOut>:
{
 80062c8:	b538      	push	{r3, r4, r5, lr}
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80062ca:	f8d0 52bc 	ldr.w	r5, [r0, #700]	; 0x2bc
  if (pdev->pClassData == NULL)
 80062ce:	b175      	cbz	r5, 80062ee <USBD_CDC_DataOut+0x26>
 80062d0:	4604      	mov	r4, r0
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 80062d2:	f001 fffc 	bl	80082ce <USBD_LL_GetRxDataSize>
 80062d6:	f8c5 080c 	str.w	r0, [r5, #2060]	; 0x80c
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 80062da:	f8d4 32c0 	ldr.w	r3, [r4, #704]	; 0x2c0
 80062de:	68db      	ldr	r3, [r3, #12]
 80062e0:	f605 010c 	addw	r1, r5, #2060	; 0x80c
 80062e4:	f8d5 0804 	ldr.w	r0, [r5, #2052]	; 0x804
 80062e8:	4798      	blx	r3
  return (uint8_t)USBD_OK;
 80062ea:	2000      	movs	r0, #0
}
 80062ec:	bd38      	pop	{r3, r4, r5, pc}
    return (uint8_t)USBD_FAIL;
 80062ee:	2003      	movs	r0, #3
 80062f0:	e7fc      	b.n	80062ec <USBD_CDC_DataOut+0x24>

080062f2 <USBD_CDC_DataIn>:
{
 80062f2:	b538      	push	{r3, r4, r5, lr}
  PCD_HandleTypeDef *hpcd = pdev->pData;
 80062f4:	f8d0 42c4 	ldr.w	r4, [r0, #708]	; 0x2c4
  if (pdev->pClassData == NULL)
 80062f8:	f8d0 32bc 	ldr.w	r3, [r0, #700]	; 0x2bc
 80062fc:	b34b      	cbz	r3, 8006352 <USBD_CDC_DataIn+0x60>
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 80062fe:	eb01 0281 	add.w	r2, r1, r1, lsl #2
 8006302:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 8006306:	6992      	ldr	r2, [r2, #24]
 8006308:	b14a      	cbz	r2, 800631e <USBD_CDC_DataIn+0x2c>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 800630a:	ebc1 05c1 	rsb	r5, r1, r1, lsl #3
 800630e:	eb04 0485 	add.w	r4, r4, r5, lsl #2
 8006312:	6c65      	ldr	r5, [r4, #68]	; 0x44
 8006314:	fbb2 f4f5 	udiv	r4, r2, r5
 8006318:	fb05 2214 	mls	r2, r5, r4, r2
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 800631c:	b16a      	cbz	r2, 800633a <USBD_CDC_DataIn+0x48>
    hcdc->TxState = 0U;
 800631e:	2400      	movs	r4, #0
 8006320:	f8c3 4814 	str.w	r4, [r3, #2068]	; 0x814
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8006324:	f8d0 22c0 	ldr.w	r2, [r0, #704]	; 0x2c0
 8006328:	6915      	ldr	r5, [r2, #16]
 800632a:	460a      	mov	r2, r1
 800632c:	f503 6101 	add.w	r1, r3, #2064	; 0x810
 8006330:	f8d3 0808 	ldr.w	r0, [r3, #2056]	; 0x808
 8006334:	47a8      	blx	r5
  return (uint8_t)USBD_OK;
 8006336:	4620      	mov	r0, r4
}
 8006338:	bd38      	pop	{r3, r4, r5, pc}
    pdev->ep_in[epnum].total_length = 0U;
 800633a:	eb01 0381 	add.w	r3, r1, r1, lsl #2
 800633e:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 8006342:	2400      	movs	r4, #0
 8006344:	619c      	str	r4, [r3, #24]
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8006346:	4623      	mov	r3, r4
 8006348:	4622      	mov	r2, r4
 800634a:	f002 f803 	bl	8008354 <USBD_LL_Transmit>
  return (uint8_t)USBD_OK;
 800634e:	4620      	mov	r0, r4
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8006350:	e7f2      	b.n	8006338 <USBD_CDC_DataIn+0x46>
    return (uint8_t)USBD_FAIL;
 8006352:	2003      	movs	r0, #3
 8006354:	e7f0      	b.n	8006338 <USBD_CDC_DataIn+0x46>

08006356 <USBD_CDC_Setup>:
{
 8006356:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006358:	b083      	sub	sp, #12
 800635a:	4606      	mov	r6, r0
 800635c:	460c      	mov	r4, r1
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800635e:	f8d0 72bc 	ldr.w	r7, [r0, #700]	; 0x2bc
  uint8_t ifalt = 0U;
 8006362:	2300      	movs	r3, #0
 8006364:	f88d 3007 	strb.w	r3, [sp, #7]
  uint16_t status_info = 0U;
 8006368:	f8ad 3004 	strh.w	r3, [sp, #4]
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800636c:	780b      	ldrb	r3, [r1, #0]
 800636e:	f013 0560 	ands.w	r5, r3, #96	; 0x60
 8006372:	d027      	beq.n	80063c4 <USBD_CDC_Setup+0x6e>
 8006374:	2d20      	cmp	r5, #32
 8006376:	d158      	bne.n	800642a <USBD_CDC_Setup+0xd4>
    if (req->wLength != 0U)
 8006378:	88ca      	ldrh	r2, [r1, #6]
 800637a:	b1da      	cbz	r2, 80063b4 <USBD_CDC_Setup+0x5e>
      if ((req->bmRequest & 0x80U) != 0U)
 800637c:	f013 0f80 	tst.w	r3, #128	; 0x80
 8006380:	d00c      	beq.n	800639c <USBD_CDC_Setup+0x46>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8006382:	f8d0 32c0 	ldr.w	r3, [r0, #704]	; 0x2c0
 8006386:	689b      	ldr	r3, [r3, #8]
 8006388:	4639      	mov	r1, r7
 800638a:	7860      	ldrb	r0, [r4, #1]
 800638c:	4798      	blx	r3
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, req->wLength);
 800638e:	88e2      	ldrh	r2, [r4, #6]
 8006390:	4639      	mov	r1, r7
 8006392:	4630      	mov	r0, r6
 8006394:	f000 fdfc 	bl	8006f90 <USBD_CtlSendData>
  USBD_StatusTypeDef ret = USBD_OK;
 8006398:	2500      	movs	r5, #0
 800639a:	e049      	b.n	8006430 <USBD_CDC_Setup+0xda>
        hcdc->CmdOpCode = req->bRequest;
 800639c:	784b      	ldrb	r3, [r1, #1]
 800639e:	f887 3800 	strb.w	r3, [r7, #2048]	; 0x800
        hcdc->CmdLength = (uint8_t)req->wLength;
 80063a2:	798b      	ldrb	r3, [r1, #6]
 80063a4:	f887 3801 	strb.w	r3, [r7, #2049]	; 0x801
        (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 80063a8:	88ca      	ldrh	r2, [r1, #6]
 80063aa:	4639      	mov	r1, r7
 80063ac:	f000 fe05 	bl	8006fba <USBD_CtlPrepareRx>
  USBD_StatusTypeDef ret = USBD_OK;
 80063b0:	2500      	movs	r5, #0
 80063b2:	e03d      	b.n	8006430 <USBD_CDC_Setup+0xda>
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80063b4:	f8d0 32c0 	ldr.w	r3, [r0, #704]	; 0x2c0
 80063b8:	689b      	ldr	r3, [r3, #8]
 80063ba:	2200      	movs	r2, #0
 80063bc:	7848      	ldrb	r0, [r1, #1]
 80063be:	4798      	blx	r3
  USBD_StatusTypeDef ret = USBD_OK;
 80063c0:	2500      	movs	r5, #0
 80063c2:	e035      	b.n	8006430 <USBD_CDC_Setup+0xda>
    switch (req->bRequest)
 80063c4:	784f      	ldrb	r7, [r1, #1]
 80063c6:	2f0b      	cmp	r7, #11
 80063c8:	d82b      	bhi.n	8006422 <USBD_CDC_Setup+0xcc>
 80063ca:	e8df f007 	tbb	[pc, r7]
 80063ce:	3106      	.short	0x3106
 80063d0:	2a2a2a2a 	.word	0x2a2a2a2a
 80063d4:	2a2a2a2a 	.word	0x2a2a2a2a
 80063d8:	2214      	.short	0x2214
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80063da:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 80063de:	2b03      	cmp	r3, #3
 80063e0:	d003      	beq.n	80063ea <USBD_CDC_Setup+0x94>
        USBD_CtlError(pdev, req);
 80063e2:	f000 fa9e 	bl	8006922 <USBD_CtlError>
        ret = USBD_FAIL;
 80063e6:	2503      	movs	r5, #3
 80063e8:	e022      	b.n	8006430 <USBD_CDC_Setup+0xda>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 80063ea:	2202      	movs	r2, #2
 80063ec:	a901      	add	r1, sp, #4
 80063ee:	f000 fdcf 	bl	8006f90 <USBD_CtlSendData>
  USBD_StatusTypeDef ret = USBD_OK;
 80063f2:	463d      	mov	r5, r7
 80063f4:	e01c      	b.n	8006430 <USBD_CDC_Setup+0xda>
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80063f6:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 80063fa:	2b03      	cmp	r3, #3
 80063fc:	d003      	beq.n	8006406 <USBD_CDC_Setup+0xb0>
        USBD_CtlError(pdev, req);
 80063fe:	f000 fa90 	bl	8006922 <USBD_CtlError>
        ret = USBD_FAIL;
 8006402:	2503      	movs	r5, #3
 8006404:	e014      	b.n	8006430 <USBD_CDC_Setup+0xda>
        (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8006406:	2201      	movs	r2, #1
 8006408:	f10d 0107 	add.w	r1, sp, #7
 800640c:	f000 fdc0 	bl	8006f90 <USBD_CtlSendData>
 8006410:	e00e      	b.n	8006430 <USBD_CDC_Setup+0xda>
      if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8006412:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8006416:	2b03      	cmp	r3, #3
 8006418:	d00a      	beq.n	8006430 <USBD_CDC_Setup+0xda>
        USBD_CtlError(pdev, req);
 800641a:	f000 fa82 	bl	8006922 <USBD_CtlError>
        ret = USBD_FAIL;
 800641e:	2503      	movs	r5, #3
 8006420:	e006      	b.n	8006430 <USBD_CDC_Setup+0xda>
      USBD_CtlError(pdev, req);
 8006422:	f000 fa7e 	bl	8006922 <USBD_CtlError>
      ret = USBD_FAIL;
 8006426:	2503      	movs	r5, #3
      break;
 8006428:	e002      	b.n	8006430 <USBD_CDC_Setup+0xda>
    USBD_CtlError(pdev, req);
 800642a:	f000 fa7a 	bl	8006922 <USBD_CtlError>
    ret = USBD_FAIL;
 800642e:	2503      	movs	r5, #3
}
 8006430:	4628      	mov	r0, r5
 8006432:	b003      	add	sp, #12
 8006434:	bdf0      	pop	{r4, r5, r6, r7, pc}

08006436 <USBD_CDC_DeInit>:
{
 8006436:	b538      	push	{r3, r4, r5, lr}
 8006438:	4604      	mov	r4, r0
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 800643a:	2181      	movs	r1, #129	; 0x81
 800643c:	f001 ff6a 	bl	8008314 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8006440:	2500      	movs	r5, #0
 8006442:	8725      	strh	r5, [r4, #56]	; 0x38
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8006444:	2101      	movs	r1, #1
 8006446:	4620      	mov	r0, r4
 8006448:	f001 ff64 	bl	8008314 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 800644c:	f8a4 5178 	strh.w	r5, [r4, #376]	; 0x178
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8006450:	2182      	movs	r1, #130	; 0x82
 8006452:	4620      	mov	r0, r4
 8006454:	f001 ff5e 	bl	8008314 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8006458:	f8a4 504c 	strh.w	r5, [r4, #76]	; 0x4c
  pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = 0U;
 800645c:	f8a4 504e 	strh.w	r5, [r4, #78]	; 0x4e
  if (pdev->pClassData != NULL)
 8006460:	f8d4 32bc 	ldr.w	r3, [r4, #700]	; 0x2bc
 8006464:	b14b      	cbz	r3, 800647a <USBD_CDC_DeInit+0x44>
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8006466:	f8d4 32c0 	ldr.w	r3, [r4, #704]	; 0x2c0
 800646a:	685b      	ldr	r3, [r3, #4]
 800646c:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 800646e:	f8d4 02bc 	ldr.w	r0, [r4, #700]	; 0x2bc
 8006472:	f002 f86d 	bl	8008550 <free>
    pdev->pClassData = NULL;
 8006476:	f8c4 52bc 	str.w	r5, [r4, #700]	; 0x2bc
}
 800647a:	2000      	movs	r0, #0
 800647c:	bd38      	pop	{r3, r4, r5, pc}

0800647e <USBD_CDC_Init>:
{
 800647e:	b570      	push	{r4, r5, r6, lr}
 8006480:	4604      	mov	r4, r0
  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8006482:	f640 001c 	movw	r0, #2076	; 0x81c
 8006486:	f002 f85b 	bl	8008540 <malloc>
  if (hcdc == NULL)
 800648a:	b3b8      	cbz	r0, 80064fc <USBD_CDC_Init+0x7e>
 800648c:	4606      	mov	r6, r0
  pdev->pClassData = (void *)hcdc;
 800648e:	f8c4 02bc 	str.w	r0, [r4, #700]	; 0x2bc
  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006492:	7c23      	ldrb	r3, [r4, #16]
 8006494:	bbbb      	cbnz	r3, 8006506 <USBD_CDC_Init+0x88>
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8006496:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800649a:	2202      	movs	r2, #2
 800649c:	2181      	movs	r1, #129	; 0x81
 800649e:	4620      	mov	r0, r4
 80064a0:	f001 ff2d 	bl	80082fe <USBD_LL_OpenEP>
     pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 80064a4:	2501      	movs	r5, #1
 80064a6:	8725      	strh	r5, [r4, #56]	; 0x38
     (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 80064a8:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80064ac:	2202      	movs	r2, #2
 80064ae:	4629      	mov	r1, r5
 80064b0:	4620      	mov	r0, r4
 80064b2:	f001 ff24 	bl	80082fe <USBD_LL_OpenEP>
      pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 80064b6:	f8a4 5178 	strh.w	r5, [r4, #376]	; 0x178
      pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;
 80064ba:	2310      	movs	r3, #16
 80064bc:	f8a4 304e 	strh.w	r3, [r4, #78]	; 0x4e
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 80064c0:	2308      	movs	r3, #8
 80064c2:	2203      	movs	r2, #3
 80064c4:	2182      	movs	r1, #130	; 0x82
 80064c6:	4620      	mov	r0, r4
 80064c8:	f001 ff19 	bl	80082fe <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 80064cc:	2301      	movs	r3, #1
 80064ce:	f8a4 304c 	strh.w	r3, [r4, #76]	; 0x4c
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 80064d2:	f8d4 32c0 	ldr.w	r3, [r4, #704]	; 0x2c0
 80064d6:	681b      	ldr	r3, [r3, #0]
 80064d8:	4798      	blx	r3
  hcdc->TxState = 0U;
 80064da:	2300      	movs	r3, #0
 80064dc:	f8c6 3814 	str.w	r3, [r6, #2068]	; 0x814
  hcdc->RxState = 0U;
 80064e0:	f8c6 3818 	str.w	r3, [r6, #2072]	; 0x818
  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80064e4:	7c25      	ldrb	r5, [r4, #16]
 80064e6:	bb15      	cbnz	r5, 800652e <USBD_CDC_Init+0xb0>
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80064e8:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80064ec:	f8d6 2804 	ldr.w	r2, [r6, #2052]	; 0x804
 80064f0:	2101      	movs	r1, #1
 80064f2:	4620      	mov	r0, r4
 80064f4:	f001 ff36 	bl	8008364 <USBD_LL_PrepareReceive>
}
 80064f8:	4628      	mov	r0, r5
 80064fa:	bd70      	pop	{r4, r5, r6, pc}
    pdev->pClassData = NULL;
 80064fc:	2300      	movs	r3, #0
 80064fe:	f8c4 32bc 	str.w	r3, [r4, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 8006502:	2502      	movs	r5, #2
 8006504:	e7f8      	b.n	80064f8 <USBD_CDC_Init+0x7a>
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8006506:	2340      	movs	r3, #64	; 0x40
 8006508:	2202      	movs	r2, #2
 800650a:	2181      	movs	r1, #129	; 0x81
 800650c:	4620      	mov	r0, r4
 800650e:	f001 fef6 	bl	80082fe <USBD_LL_OpenEP>
     pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8006512:	2501      	movs	r5, #1
 8006514:	8725      	strh	r5, [r4, #56]	; 0x38
     (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8006516:	2340      	movs	r3, #64	; 0x40
 8006518:	2202      	movs	r2, #2
 800651a:	4629      	mov	r1, r5
 800651c:	4620      	mov	r0, r4
 800651e:	f001 feee 	bl	80082fe <USBD_LL_OpenEP>
      pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8006522:	f8a4 5178 	strh.w	r5, [r4, #376]	; 0x178
      pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8006526:	2310      	movs	r3, #16
 8006528:	f8a4 304e 	strh.w	r3, [r4, #78]	; 0x4e
 800652c:	e7c8      	b.n	80064c0 <USBD_CDC_Init+0x42>
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800652e:	2340      	movs	r3, #64	; 0x40
 8006530:	f8d6 2804 	ldr.w	r2, [r6, #2052]	; 0x804
 8006534:	2101      	movs	r1, #1
 8006536:	4620      	mov	r0, r4
 8006538:	f001 ff14 	bl	8008364 <USBD_LL_PrepareReceive>
  return (uint8_t)USBD_OK;
 800653c:	2500      	movs	r5, #0
 800653e:	e7db      	b.n	80064f8 <USBD_CDC_Init+0x7a>

08006540 <USBD_CDC_RegisterInterface>:
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
  if (fops == NULL)
 8006540:	b119      	cbz	r1, 800654a <USBD_CDC_RegisterInterface+0xa>
  {
    return (uint8_t)USBD_FAIL;
  }

  pdev->pUserData = fops;
 8006542:	f8c0 12c0 	str.w	r1, [r0, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 8006546:	2000      	movs	r0, #0
 8006548:	4770      	bx	lr
    return (uint8_t)USBD_FAIL;
 800654a:	2003      	movs	r0, #3
}
 800654c:	4770      	bx	lr

0800654e <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800654e:	f8d0 32bc 	ldr.w	r3, [r0, #700]	; 0x2bc

  hcdc->TxBuffer = pbuff;
 8006552:	f8c3 1808 	str.w	r1, [r3, #2056]	; 0x808
  hcdc->TxLength = length;
 8006556:	f8c3 2810 	str.w	r2, [r3, #2064]	; 0x810

  return (uint8_t)USBD_OK;
}
 800655a:	2000      	movs	r0, #0
 800655c:	4770      	bx	lr

0800655e <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800655e:	f8d0 32bc 	ldr.w	r3, [r0, #700]	; 0x2bc

  hcdc->RxBuffer = pbuff;
 8006562:	f8c3 1804 	str.w	r1, [r3, #2052]	; 0x804

  return (uint8_t)USBD_OK;
}
 8006566:	2000      	movs	r0, #0
 8006568:	4770      	bx	lr

0800656a <USBD_CDC_TransmitPacket>:
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800656a:	f8d0 22bc 	ldr.w	r2, [r0, #700]	; 0x2bc
  USBD_StatusTypeDef ret = USBD_BUSY;

  if (pdev->pClassData == NULL)
 800656e:	b1a2      	cbz	r2, 800659a <USBD_CDC_TransmitPacket+0x30>
{
 8006570:	b508      	push	{r3, lr}
  {
    return (uint8_t)USBD_FAIL;
  }

  if (hcdc->TxState == 0U)
 8006572:	f8d2 3814 	ldr.w	r3, [r2, #2068]	; 0x814
 8006576:	b10b      	cbz	r3, 800657c <USBD_CDC_TransmitPacket+0x12>
  USBD_StatusTypeDef ret = USBD_BUSY;
 8006578:	2001      	movs	r0, #1

    ret = USBD_OK;
  }

  return (uint8_t)ret;
}
 800657a:	bd08      	pop	{r3, pc}
    hcdc->TxState = 1U;
 800657c:	2301      	movs	r3, #1
 800657e:	f8c2 3814 	str.w	r3, [r2, #2068]	; 0x814
    pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 8006582:	f8d2 3810 	ldr.w	r3, [r2, #2064]	; 0x810
 8006586:	62c3      	str	r3, [r0, #44]	; 0x2c
    (void)USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer, hcdc->TxLength);
 8006588:	f8d2 3810 	ldr.w	r3, [r2, #2064]	; 0x810
 800658c:	f8d2 2808 	ldr.w	r2, [r2, #2056]	; 0x808
 8006590:	2181      	movs	r1, #129	; 0x81
 8006592:	f001 fedf 	bl	8008354 <USBD_LL_Transmit>
    ret = USBD_OK;
 8006596:	2000      	movs	r0, #0
 8006598:	e7ef      	b.n	800657a <USBD_CDC_TransmitPacket+0x10>
    return (uint8_t)USBD_FAIL;
 800659a:	2003      	movs	r0, #3
}
 800659c:	4770      	bx	lr

0800659e <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800659e:	b510      	push	{r4, lr}
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80065a0:	f8d0 22bc 	ldr.w	r2, [r0, #700]	; 0x2bc

  if (pdev->pClassData == NULL)
 80065a4:	b192      	cbz	r2, 80065cc <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80065a6:	7c04      	ldrb	r4, [r0, #16]
 80065a8:	b944      	cbnz	r4, 80065bc <USBD_CDC_ReceivePacket+0x1e>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80065aa:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80065ae:	f8d2 2804 	ldr.w	r2, [r2, #2052]	; 0x804
 80065b2:	2101      	movs	r1, #1
 80065b4:	f001 fed6 	bl	8008364 <USBD_LL_PrepareReceive>
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
}
 80065b8:	4620      	mov	r0, r4
 80065ba:	bd10      	pop	{r4, pc}
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80065bc:	2340      	movs	r3, #64	; 0x40
 80065be:	f8d2 2804 	ldr.w	r2, [r2, #2052]	; 0x804
 80065c2:	2101      	movs	r1, #1
 80065c4:	f001 fece 	bl	8008364 <USBD_LL_PrepareReceive>
  return (uint8_t)USBD_OK;
 80065c8:	2400      	movs	r4, #0
 80065ca:	e7f5      	b.n	80065b8 <USBD_CDC_ReceivePacket+0x1a>
    return (uint8_t)USBD_FAIL;
 80065cc:	2403      	movs	r4, #3
 80065ce:	e7f3      	b.n	80065b8 <USBD_CDC_ReceivePacket+0x1a>

080065d0 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 80065d0:	b508      	push	{r3, lr}
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 80065d2:	b1b8      	cbz	r0, 8006604 <USBD_Init+0x34>
 80065d4:	4603      	mov	r3, r0
#endif
    return USBD_FAIL;
  }

  /* Unlink previous class */
  if (pdev->pClass != NULL)
 80065d6:	f8d0 02b8 	ldr.w	r0, [r0, #696]	; 0x2b8
 80065da:	b110      	cbz	r0, 80065e2 <USBD_Init+0x12>
  {
    pdev->pClass = NULL;
 80065dc:	2000      	movs	r0, #0
 80065de:	f8c3 02b8 	str.w	r0, [r3, #696]	; 0x2b8
  }

  if (pdev->pConfDesc != NULL)
 80065e2:	f8d3 02cc 	ldr.w	r0, [r3, #716]	; 0x2cc
 80065e6:	b110      	cbz	r0, 80065ee <USBD_Init+0x1e>
  {
    pdev->pConfDesc = NULL;
 80065e8:	2000      	movs	r0, #0
 80065ea:	f8c3 02cc 	str.w	r0, [r3, #716]	; 0x2cc
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 80065ee:	b109      	cbz	r1, 80065f4 <USBD_Init+0x24>
  {
    pdev->pDesc = pdesc;
 80065f0:	f8c3 12b4 	str.w	r1, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80065f4:	2101      	movs	r1, #1
 80065f6:	f883 129c 	strb.w	r1, [r3, #668]	; 0x29c
  pdev->id = id;
 80065fa:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 80065fc:	4618      	mov	r0, r3
 80065fe:	f001 fe15 	bl	800822c <USBD_LL_Init>

  return ret;
}
 8006602:	bd08      	pop	{r3, pc}
    USBD_ErrLog("Invalid Device handle");
 8006604:	4805      	ldr	r0, [pc, #20]	; (800661c <USBD_Init+0x4c>)
 8006606:	f002 f86b 	bl	80086e0 <iprintf>
 800660a:	4805      	ldr	r0, [pc, #20]	; (8006620 <USBD_Init+0x50>)
 800660c:	f002 f868 	bl	80086e0 <iprintf>
 8006610:	200a      	movs	r0, #10
 8006612:	f002 f87d 	bl	8008710 <putchar>
    return USBD_FAIL;
 8006616:	2003      	movs	r0, #3
 8006618:	e7f3      	b.n	8006602 <USBD_Init+0x32>
 800661a:	bf00      	nop
 800661c:	080095dc 	.word	0x080095dc
 8006620:	080095e4 	.word	0x080095e4

08006624 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8006624:	b510      	push	{r4, lr}
 8006626:	b082      	sub	sp, #8
  uint16_t len = 0U;
 8006628:	2300      	movs	r3, #0
 800662a:	f8ad 3006 	strh.w	r3, [sp, #6]

  if (pclass == NULL)
 800662e:	b159      	cbz	r1, 8006648 <USBD_RegisterClass+0x24>
 8006630:	4604      	mov	r4, r0
#endif
    return USBD_FAIL;
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 8006632:	f8c0 12b8 	str.w	r1, [r0, #696]	; 0x2b8

  /* Get Device Configuration Descriptor */
#ifdef USE_USB_FS
  pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
#else /* USE_USB_HS */
  pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
 8006636:	6a8b      	ldr	r3, [r1, #40]	; 0x28
 8006638:	f10d 0006 	add.w	r0, sp, #6
 800663c:	4798      	blx	r3
 800663e:	f8c4 02cc 	str.w	r0, [r4, #716]	; 0x2cc
#endif /* USE_USB_FS */


  return USBD_OK;
 8006642:	2000      	movs	r0, #0
}
 8006644:	b002      	add	sp, #8
 8006646:	bd10      	pop	{r4, pc}
    USBD_ErrLog("Invalid Class handle");
 8006648:	4805      	ldr	r0, [pc, #20]	; (8006660 <USBD_RegisterClass+0x3c>)
 800664a:	f002 f849 	bl	80086e0 <iprintf>
 800664e:	4805      	ldr	r0, [pc, #20]	; (8006664 <USBD_RegisterClass+0x40>)
 8006650:	f002 f846 	bl	80086e0 <iprintf>
 8006654:	200a      	movs	r0, #10
 8006656:	f002 f85b 	bl	8008710 <putchar>
    return USBD_FAIL;
 800665a:	2003      	movs	r0, #3
 800665c:	e7f2      	b.n	8006644 <USBD_RegisterClass+0x20>
 800665e:	bf00      	nop
 8006660:	080095dc 	.word	0x080095dc
 8006664:	080095fc 	.word	0x080095fc

08006668 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8006668:	b508      	push	{r3, lr}
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800666a:	f001 fe40 	bl	80082ee <USBD_LL_Start>
}
 800666e:	bd08      	pop	{r3, pc}

08006670 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006670:	b508      	push	{r3, lr}
  USBD_StatusTypeDef ret = USBD_FAIL;

  if (pdev->pClass != NULL)
 8006672:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
 8006676:	b113      	cbz	r3, 800667e <USBD_SetClassConfig+0xe>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 8006678:	681b      	ldr	r3, [r3, #0]
 800667a:	4798      	blx	r3
  }

  return ret;
}
 800667c:	bd08      	pop	{r3, pc}
  USBD_StatusTypeDef ret = USBD_FAIL;
 800667e:	2003      	movs	r0, #3
 8006680:	e7fc      	b.n	800667c <USBD_SetClassConfig+0xc>

08006682 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006682:	b508      	push	{r3, lr}
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 8006684:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
 8006688:	b10b      	cbz	r3, 800668e <USBD_ClrClassConfig+0xc>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 800668a:	685b      	ldr	r3, [r3, #4]
 800668c:	4798      	blx	r3
  }

  return USBD_OK;
}
 800668e:	2000      	movs	r0, #0
 8006690:	bd08      	pop	{r3, pc}

08006692 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8006692:	b538      	push	{r3, r4, r5, lr}
 8006694:	4604      	mov	r4, r0
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8006696:	f200 25aa 	addw	r5, r0, #682	; 0x2aa
 800669a:	4628      	mov	r0, r5
 800669c:	f000 f92d 	bl	80068fa <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 80066a0:	2301      	movs	r3, #1
 80066a2:	f8c4 3294 	str.w	r3, [r4, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 80066a6:	f8b4 32b0 	ldrh.w	r3, [r4, #688]	; 0x2b0
 80066aa:	f8c4 3298 	str.w	r3, [r4, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 80066ae:	f894 12aa 	ldrb.w	r1, [r4, #682]	; 0x2aa
 80066b2:	f001 031f 	and.w	r3, r1, #31
 80066b6:	2b01      	cmp	r3, #1
 80066b8:	d00d      	beq.n	80066d6 <USBD_LL_SetupStage+0x44>
 80066ba:	2b02      	cmp	r3, #2
 80066bc:	d010      	beq.n	80066e0 <USBD_LL_SetupStage+0x4e>
 80066be:	b12b      	cbz	r3, 80066cc <USBD_LL_SetupStage+0x3a>
    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
      break;

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 80066c0:	f001 0180 	and.w	r1, r1, #128	; 0x80
 80066c4:	4620      	mov	r0, r4
 80066c6:	f001 fe2d 	bl	8008324 <USBD_LL_StallEP>
      break;
 80066ca:	e003      	b.n	80066d4 <USBD_LL_SetupStage+0x42>
      ret = USBD_StdDevReq(pdev, &pdev->request);
 80066cc:	4629      	mov	r1, r5
 80066ce:	4620      	mov	r0, r4
 80066d0:	f000 face 	bl	8006c70 <USBD_StdDevReq>
  }

  return ret;
}
 80066d4:	bd38      	pop	{r3, r4, r5, pc}
      ret = USBD_StdItfReq(pdev, &pdev->request);
 80066d6:	4629      	mov	r1, r5
 80066d8:	4620      	mov	r0, r4
 80066da:	f000 fb01 	bl	8006ce0 <USBD_StdItfReq>
      break;
 80066de:	e7f9      	b.n	80066d4 <USBD_LL_SetupStage+0x42>
      ret = USBD_StdEPReq(pdev, &pdev->request);
 80066e0:	4629      	mov	r1, r5
 80066e2:	4620      	mov	r0, r4
 80066e4:	f000 fb30 	bl	8006d48 <USBD_StdEPReq>
      break;
 80066e8:	e7f4      	b.n	80066d4 <USBD_LL_SetupStage+0x42>

080066ea <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 80066ea:	b538      	push	{r3, r4, r5, lr}
 80066ec:	4604      	mov	r4, r0
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 80066ee:	460d      	mov	r5, r1
 80066f0:	bb31      	cbnz	r1, 8006740 <USBD_LL_DataOutStage+0x56>
 80066f2:	4613      	mov	r3, r2
  {
    pep = &pdev->ep_out[0];

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 80066f4:	f8d0 2294 	ldr.w	r2, [r0, #660]	; 0x294
 80066f8:	2a03      	cmp	r2, #3
 80066fa:	d001      	beq.n	8006700 <USBD_LL_DataOutStage+0x16>
  {
    /* should never be in this condition */
    return USBD_FAIL;
  }

  return USBD_OK;
 80066fc:	4608      	mov	r0, r1
}
 80066fe:	bd38      	pop	{r3, r4, r5, pc}
      if (pep->rem_length > pep->maxpacket)
 8006700:	f8d0 115c 	ldr.w	r1, [r0, #348]	; 0x15c
 8006704:	f8d0 2160 	ldr.w	r2, [r0, #352]	; 0x160
 8006708:	4291      	cmp	r1, r2
 800670a:	d80c      	bhi.n	8006726 <USBD_LL_DataOutStage+0x3c>
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 800670c:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
 8006710:	691b      	ldr	r3, [r3, #16]
 8006712:	b11b      	cbz	r3, 800671c <USBD_LL_DataOutStage+0x32>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 8006714:	f890 229c 	ldrb.w	r2, [r0, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8006718:	2a03      	cmp	r2, #3
 800671a:	d00f      	beq.n	800673c <USBD_LL_DataOutStage+0x52>
        (void)USBD_CtlSendStatus(pdev);
 800671c:	4620      	mov	r0, r4
 800671e:	f000 fc63 	bl	8006fe8 <USBD_CtlSendStatus>
  return USBD_OK;
 8006722:	4628      	mov	r0, r5
 8006724:	e7eb      	b.n	80066fe <USBD_LL_DataOutStage+0x14>
        pep->rem_length -= pep->maxpacket;
 8006726:	1a89      	subs	r1, r1, r2
 8006728:	f8c0 115c 	str.w	r1, [r0, #348]	; 0x15c
        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800672c:	428a      	cmp	r2, r1
 800672e:	bf28      	it	cs
 8006730:	460a      	movcs	r2, r1
 8006732:	4619      	mov	r1, r3
 8006734:	f000 fc50 	bl	8006fd8 <USBD_CtlContinueRx>
  return USBD_OK;
 8006738:	4628      	mov	r0, r5
 800673a:	e7e0      	b.n	80066fe <USBD_LL_DataOutStage+0x14>
          pdev->pClass->EP0_RxReady(pdev);
 800673c:	4798      	blx	r3
 800673e:	e7ed      	b.n	800671c <USBD_LL_DataOutStage+0x32>
  else if ((pdev->pClass->DataOut != NULL) &&
 8006740:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
 8006744:	699b      	ldr	r3, [r3, #24]
 8006746:	b12b      	cbz	r3, 8006754 <USBD_LL_DataOutStage+0x6a>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8006748:	f890 229c 	ldrb.w	r2, [r0, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 800674c:	2a03      	cmp	r2, #3
 800674e:	d103      	bne.n	8006758 <USBD_LL_DataOutStage+0x6e>
    ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 8006750:	4798      	blx	r3
    if (ret != USBD_OK)
 8006752:	e7d4      	b.n	80066fe <USBD_LL_DataOutStage+0x14>
    return USBD_FAIL;
 8006754:	2003      	movs	r0, #3
 8006756:	e7d2      	b.n	80066fe <USBD_LL_DataOutStage+0x14>
 8006758:	2003      	movs	r0, #3
 800675a:	e7d0      	b.n	80066fe <USBD_LL_DataOutStage+0x14>

0800675c <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800675c:	b538      	push	{r3, r4, r5, lr}
 800675e:	4604      	mov	r4, r0
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8006760:	460d      	mov	r5, r1
 8006762:	2900      	cmp	r1, #0
 8006764:	d148      	bne.n	80067f8 <USBD_LL_DataInStage+0x9c>
 8006766:	4613      	mov	r3, r2
  {
    pep = &pdev->ep_in[0];

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8006768:	f8d0 2294 	ldr.w	r2, [r0, #660]	; 0x294
 800676c:	2a02      	cmp	r2, #2
 800676e:	d005      	beq.n	800677c <USBD_LL_DataInStage+0x20>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 8006770:	f894 32a0 	ldrb.w	r3, [r4, #672]	; 0x2a0
 8006774:	2b01      	cmp	r3, #1
 8006776:	d03a      	beq.n	80067ee <USBD_LL_DataInStage+0x92>
  {
    /* should never be in this condition */
    return USBD_FAIL;
  }

  return USBD_OK;
 8006778:	4628      	mov	r0, r5
}
 800677a:	bd38      	pop	{r3, r4, r5, pc}
      if (pep->rem_length > pep->maxpacket)
 800677c:	69c2      	ldr	r2, [r0, #28]
 800677e:	6a01      	ldr	r1, [r0, #32]
 8006780:	428a      	cmp	r2, r1
 8006782:	d811      	bhi.n	80067a8 <USBD_LL_DataInStage+0x4c>
        if ((pep->maxpacket == pep->rem_length) &&
 8006784:	428a      	cmp	r2, r1
 8006786:	d01b      	beq.n	80067c0 <USBD_LL_DataInStage+0x64>
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8006788:	f8d4 32b8 	ldr.w	r3, [r4, #696]	; 0x2b8
 800678c:	68db      	ldr	r3, [r3, #12]
 800678e:	b11b      	cbz	r3, 8006798 <USBD_LL_DataInStage+0x3c>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 8006790:	f894 229c 	ldrb.w	r2, [r4, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8006794:	2a03      	cmp	r2, #3
 8006796:	d027      	beq.n	80067e8 <USBD_LL_DataInStage+0x8c>
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8006798:	2180      	movs	r1, #128	; 0x80
 800679a:	4620      	mov	r0, r4
 800679c:	f001 fdc2 	bl	8008324 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 80067a0:	4620      	mov	r0, r4
 80067a2:	f000 fc2c 	bl	8006ffe <USBD_CtlReceiveStatus>
 80067a6:	e7e3      	b.n	8006770 <USBD_LL_DataInStage+0x14>
        pep->rem_length -= pep->maxpacket;
 80067a8:	1a52      	subs	r2, r2, r1
 80067aa:	61c2      	str	r2, [r0, #28]
        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 80067ac:	4619      	mov	r1, r3
 80067ae:	f000 fbfc 	bl	8006faa <USBD_CtlContinueSendData>
       (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80067b2:	2300      	movs	r3, #0
 80067b4:	461a      	mov	r2, r3
 80067b6:	4619      	mov	r1, r3
 80067b8:	4620      	mov	r0, r4
 80067ba:	f001 fdd3 	bl	8008364 <USBD_LL_PrepareReceive>
 80067be:	e7d7      	b.n	8006770 <USBD_LL_DataInStage+0x14>
            (pep->total_length >= pep->maxpacket) &&
 80067c0:	6983      	ldr	r3, [r0, #24]
        if ((pep->maxpacket == pep->rem_length) &&
 80067c2:	4299      	cmp	r1, r3
 80067c4:	d8e0      	bhi.n	8006788 <USBD_LL_DataInStage+0x2c>
            (pep->total_length < pdev->ep0_data_len))
 80067c6:	f8d0 2298 	ldr.w	r2, [r0, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 80067ca:	4293      	cmp	r3, r2
 80067cc:	d2dc      	bcs.n	8006788 <USBD_LL_DataInStage+0x2c>
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 80067ce:	2200      	movs	r2, #0
 80067d0:	4611      	mov	r1, r2
 80067d2:	f000 fbea 	bl	8006faa <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 80067d6:	2100      	movs	r1, #0
 80067d8:	f8c4 1298 	str.w	r1, [r4, #664]	; 0x298
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80067dc:	460b      	mov	r3, r1
 80067de:	460a      	mov	r2, r1
 80067e0:	4620      	mov	r0, r4
 80067e2:	f001 fdbf 	bl	8008364 <USBD_LL_PrepareReceive>
 80067e6:	e7c3      	b.n	8006770 <USBD_LL_DataInStage+0x14>
            pdev->pClass->EP0_TxSent(pdev);
 80067e8:	4620      	mov	r0, r4
 80067ea:	4798      	blx	r3
 80067ec:	e7d4      	b.n	8006798 <USBD_LL_DataInStage+0x3c>
      pdev->dev_test_mode = 0U;
 80067ee:	2300      	movs	r3, #0
 80067f0:	f884 32a0 	strb.w	r3, [r4, #672]	; 0x2a0
  return USBD_OK;
 80067f4:	4628      	mov	r0, r5
 80067f6:	e7c0      	b.n	800677a <USBD_LL_DataInStage+0x1e>
  else if ((pdev->pClass->DataIn != NULL) &&
 80067f8:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
 80067fc:	695b      	ldr	r3, [r3, #20]
 80067fe:	b12b      	cbz	r3, 800680c <USBD_LL_DataInStage+0xb0>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8006800:	f890 229c 	ldrb.w	r2, [r0, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 8006804:	2a03      	cmp	r2, #3
 8006806:	d103      	bne.n	8006810 <USBD_LL_DataInStage+0xb4>
    ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 8006808:	4798      	blx	r3
    if (ret != USBD_OK)
 800680a:	e7b6      	b.n	800677a <USBD_LL_DataInStage+0x1e>
    return USBD_FAIL;
 800680c:	2003      	movs	r0, #3
 800680e:	e7b4      	b.n	800677a <USBD_LL_DataInStage+0x1e>
 8006810:	2003      	movs	r0, #3
 8006812:	e7b2      	b.n	800677a <USBD_LL_DataInStage+0x1e>

08006814 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8006814:	b570      	push	{r4, r5, r6, lr}
 8006816:	4604      	mov	r4, r0
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8006818:	2301      	movs	r3, #1
 800681a:	f880 329c 	strb.w	r3, [r0, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800681e:	2300      	movs	r3, #0
 8006820:	f8c0 3294 	str.w	r3, [r0, #660]	; 0x294
  pdev->dev_config = 0U;
 8006824:	6043      	str	r3, [r0, #4]
  pdev->dev_remote_wakeup = 0U;
 8006826:	f8c0 32a4 	str.w	r3, [r0, #676]	; 0x2a4

  if (pdev->pClassData != NULL)
 800682a:	f8d0 32bc 	ldr.w	r3, [r0, #700]	; 0x2bc
 800682e:	b123      	cbz	r3, 800683a <USBD_LL_Reset+0x26>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8006830:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
 8006834:	685b      	ldr	r3, [r3, #4]
 8006836:	2100      	movs	r1, #0
 8006838:	4798      	blx	r3
  }

    /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800683a:	2340      	movs	r3, #64	; 0x40
 800683c:	2200      	movs	r2, #0
 800683e:	4611      	mov	r1, r2
 8006840:	4620      	mov	r0, r4
 8006842:	f001 fd5c 	bl	80082fe <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8006846:	2601      	movs	r6, #1
 8006848:	f8a4 6164 	strh.w	r6, [r4, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800684c:	2540      	movs	r5, #64	; 0x40
 800684e:	f8c4 5160 	str.w	r5, [r4, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8006852:	462b      	mov	r3, r5
 8006854:	2200      	movs	r2, #0
 8006856:	2180      	movs	r1, #128	; 0x80
 8006858:	4620      	mov	r0, r4
 800685a:	f001 fd50 	bl	80082fe <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800685e:	84a6      	strh	r6, [r4, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8006860:	6225      	str	r5, [r4, #32]

  return USBD_OK;
}
 8006862:	2000      	movs	r0, #0
 8006864:	bd70      	pop	{r4, r5, r6, pc}

08006866 <USBD_LL_SetSpeed>:
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
  pdev->dev_speed = speed;
 8006866:	7401      	strb	r1, [r0, #16]

  return USBD_OK;
}
 8006868:	2000      	movs	r0, #0
 800686a:	4770      	bx	lr

0800686c <USBD_LL_Suspend>:
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
  pdev->dev_old_state = pdev->dev_state;
 800686c:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8006870:	f880 329d 	strb.w	r3, [r0, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 8006874:	2304      	movs	r3, #4
 8006876:	f880 329c 	strb.w	r3, [r0, #668]	; 0x29c

  return USBD_OK;
}
 800687a:	2000      	movs	r0, #0
 800687c:	4770      	bx	lr

0800687e <USBD_LL_Resume>:
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800687e:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8006882:	2b04      	cmp	r3, #4
 8006884:	d001      	beq.n	800688a <USBD_LL_Resume+0xc>
  {
    pdev->dev_state = pdev->dev_old_state;
  }

  return USBD_OK;
}
 8006886:	2000      	movs	r0, #0
 8006888:	4770      	bx	lr
    pdev->dev_state = pdev->dev_old_state;
 800688a:	f890 329d 	ldrb.w	r3, [r0, #669]	; 0x29d
 800688e:	f880 329c 	strb.w	r3, [r0, #668]	; 0x29c
 8006892:	e7f8      	b.n	8006886 <USBD_LL_Resume+0x8>

08006894 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8006894:	b508      	push	{r3, lr}
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006896:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 800689a:	2b03      	cmp	r3, #3
 800689c:	d001      	beq.n	80068a2 <USBD_LL_SOF+0xe>
      pdev->pClass->SOF(pdev);
    }
  }

  return USBD_OK;
}
 800689e:	2000      	movs	r0, #0
 80068a0:	bd08      	pop	{r3, pc}
    if (pdev->pClass->SOF != NULL)
 80068a2:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
 80068a6:	69db      	ldr	r3, [r3, #28]
 80068a8:	2b00      	cmp	r3, #0
 80068aa:	d0f8      	beq.n	800689e <USBD_LL_SOF+0xa>
      pdev->pClass->SOF(pdev);
 80068ac:	4798      	blx	r3
 80068ae:	e7f6      	b.n	800689e <USBD_LL_SOF+0xa>

080068b0 <USBD_LL_IsoINIncomplete>:
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
}
 80068b0:	2000      	movs	r0, #0
 80068b2:	4770      	bx	lr

080068b4 <USBD_LL_IsoOUTIncomplete>:
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
}
 80068b4:	2000      	movs	r0, #0
 80068b6:	4770      	bx	lr

080068b8 <USBD_LL_DevConnected>:
{
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
}
 80068b8:	2000      	movs	r0, #0
 80068ba:	4770      	bx	lr

080068bc <USBD_LL_DevDisconnected>:
*         Handle device disconnection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 80068bc:	b508      	push	{r3, lr}
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80068be:	2301      	movs	r3, #1
 80068c0:	f880 329c 	strb.w	r3, [r0, #668]	; 0x29c

  if (pdev->pClass != NULL)
 80068c4:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
 80068c8:	b113      	cbz	r3, 80068d0 <USBD_LL_DevDisconnected+0x14>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 80068ca:	685b      	ldr	r3, [r3, #4]
 80068cc:	7901      	ldrb	r1, [r0, #4]
 80068ce:	4798      	blx	r3
  }

  return USBD_OK;
}
 80068d0:	2000      	movs	r0, #0
 80068d2:	bd08      	pop	{r3, pc}

080068d4 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 80068d4:	4603      	mov	r3, r0
  uint8_t  len = 0U;
 80068d6:	2000      	movs	r0, #0
  uint8_t *pbuff = buf;

  while (*pbuff != (uint8_t)'\0')
 80068d8:	781a      	ldrb	r2, [r3, #0]
 80068da:	b11a      	cbz	r2, 80068e4 <USBD_GetLen+0x10>
  {
    len++;
 80068dc:	3001      	adds	r0, #1
 80068de:	b2c0      	uxtb	r0, r0
    pbuff++;
 80068e0:	3301      	adds	r3, #1
 80068e2:	e7f9      	b.n	80068d8 <USBD_GetLen+0x4>
  }

  return len;
}
 80068e4:	4770      	bx	lr

080068e6 <USBD_SetFeature>:
{
 80068e6:	b508      	push	{r3, lr}
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80068e8:	884b      	ldrh	r3, [r1, #2]
 80068ea:	2b01      	cmp	r3, #1
 80068ec:	d000      	beq.n	80068f0 <USBD_SetFeature+0xa>
}
 80068ee:	bd08      	pop	{r3, pc}
    pdev->dev_remote_wakeup = 1U;
 80068f0:	f8c0 32a4 	str.w	r3, [r0, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 80068f4:	f000 fb78 	bl	8006fe8 <USBD_CtlSendStatus>
}
 80068f8:	e7f9      	b.n	80068ee <USBD_SetFeature+0x8>

080068fa <USBD_ParseSetupRequest>:
  req->bmRequest = *(uint8_t *)(pbuff);
 80068fa:	780b      	ldrb	r3, [r1, #0]
 80068fc:	7003      	strb	r3, [r0, #0]
  req->bRequest = *(uint8_t *)(pbuff);
 80068fe:	784b      	ldrb	r3, [r1, #1]
 8006900:	7043      	strb	r3, [r0, #1]
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;

  _Byte1 = *(uint8_t *)_pbuff;
 8006902:	788b      	ldrb	r3, [r1, #2]
  _pbuff++;
  _Byte2 = *(uint8_t *)_pbuff;
 8006904:	78ca      	ldrb	r2, [r1, #3]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8006906:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
  req->wValue = SWAPBYTE(pbuff);
 800690a:	8043      	strh	r3, [r0, #2]
  _Byte1 = *(uint8_t *)_pbuff;
 800690c:	790b      	ldrb	r3, [r1, #4]
  _Byte2 = *(uint8_t *)_pbuff;
 800690e:	794a      	ldrb	r2, [r1, #5]
  _SwapVal = (_Byte2 << 8) | _Byte1;
 8006910:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
  req->wIndex = SWAPBYTE(pbuff);
 8006914:	8083      	strh	r3, [r0, #4]
  _Byte1 = *(uint8_t *)_pbuff;
 8006916:	798b      	ldrb	r3, [r1, #6]
  _Byte2 = *(uint8_t *)_pbuff;
 8006918:	79ca      	ldrb	r2, [r1, #7]
  _SwapVal = (_Byte2 << 8) | _Byte1;
 800691a:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
  req->wLength = SWAPBYTE(pbuff);
 800691e:	80c3      	strh	r3, [r0, #6]
}
 8006920:	4770      	bx	lr

08006922 <USBD_CtlError>:
{
 8006922:	b510      	push	{r4, lr}
 8006924:	4604      	mov	r4, r0
  (void)USBD_LL_StallEP(pdev, 0x80U);
 8006926:	2180      	movs	r1, #128	; 0x80
 8006928:	f001 fcfc 	bl	8008324 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800692c:	2100      	movs	r1, #0
 800692e:	4620      	mov	r0, r4
 8006930:	f001 fcf8 	bl	8008324 <USBD_LL_StallEP>
}
 8006934:	bd10      	pop	{r4, pc}

08006936 <USBD_GetDescriptor>:
{
 8006936:	b530      	push	{r4, r5, lr}
 8006938:	b083      	sub	sp, #12
 800693a:	4604      	mov	r4, r0
 800693c:	460d      	mov	r5, r1
  uint16_t len = 0U;
 800693e:	2300      	movs	r3, #0
 8006940:	f8ad 3006 	strh.w	r3, [sp, #6]
  switch (req->wValue >> 8)
 8006944:	884a      	ldrh	r2, [r1, #2]
 8006946:	0a13      	lsrs	r3, r2, #8
 8006948:	3b01      	subs	r3, #1
 800694a:	2b06      	cmp	r3, #6
 800694c:	f200 80ab 	bhi.w	8006aa6 <USBD_GetDescriptor+0x170>
 8006950:	e8df f003 	tbb	[pc, r3]
 8006954:	a9331f04 	.word	0xa9331f04
 8006958:	8da9      	.short	0x8da9
 800695a:	9a          	.byte	0x9a
 800695b:	00          	.byte	0x00
    pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800695c:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 8006960:	681b      	ldr	r3, [r3, #0]
 8006962:	f10d 0106 	add.w	r1, sp, #6
 8006966:	7c00      	ldrb	r0, [r0, #16]
 8006968:	4798      	blx	r3
    if (req->wLength != 0U)
 800696a:	88ea      	ldrh	r2, [r5, #6]
 800696c:	2a00      	cmp	r2, #0
 800696e:	f000 80a3 	beq.w	8006ab8 <USBD_GetDescriptor+0x182>
      if (len != 0U)
 8006972:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 8006976:	2b00      	cmp	r3, #0
 8006978:	f000 8099 	beq.w	8006aae <USBD_GetDescriptor+0x178>
        len = MIN(len, req->wLength);
 800697c:	429a      	cmp	r2, r3
 800697e:	bf28      	it	cs
 8006980:	461a      	movcs	r2, r3
 8006982:	f8ad 2006 	strh.w	r2, [sp, #6]
        (void)USBD_CtlSendData(pdev, pbuf, len);
 8006986:	4601      	mov	r1, r0
 8006988:	4620      	mov	r0, r4
 800698a:	f000 fb01 	bl	8006f90 <USBD_CtlSendData>
}
 800698e:	b003      	add	sp, #12
 8006990:	bd30      	pop	{r4, r5, pc}
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006992:	7c03      	ldrb	r3, [r0, #16]
 8006994:	b943      	cbnz	r3, 80069a8 <USBD_GetDescriptor+0x72>
      pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8006996:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
 800699a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800699c:	f10d 0006 	add.w	r0, sp, #6
 80069a0:	4798      	blx	r3
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80069a2:	2302      	movs	r3, #2
 80069a4:	7043      	strb	r3, [r0, #1]
  if (err != 0U)
 80069a6:	e7e0      	b.n	800696a <USBD_GetDescriptor+0x34>
      pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 80069a8:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
 80069ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80069ae:	f10d 0006 	add.w	r0, sp, #6
 80069b2:	4798      	blx	r3
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80069b4:	2302      	movs	r3, #2
 80069b6:	7043      	strb	r3, [r0, #1]
  if (err != 0U)
 80069b8:	e7d7      	b.n	800696a <USBD_GetDescriptor+0x34>
    switch ((uint8_t)(req->wValue))
 80069ba:	b2d2      	uxtb	r2, r2
 80069bc:	2a05      	cmp	r2, #5
 80069be:	d852      	bhi.n	8006a66 <USBD_GetDescriptor+0x130>
 80069c0:	e8df f002 	tbb	[pc, r2]
 80069c4:	2a1d1003 	.word	0x2a1d1003
 80069c8:	4437      	.short	0x4437
      if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 80069ca:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 80069ce:	685b      	ldr	r3, [r3, #4]
 80069d0:	b123      	cbz	r3, 80069dc <USBD_GetDescriptor+0xa6>
        pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 80069d2:	f10d 0106 	add.w	r1, sp, #6
 80069d6:	7c00      	ldrb	r0, [r0, #16]
 80069d8:	4798      	blx	r3
  if (err != 0U)
 80069da:	e7c6      	b.n	800696a <USBD_GetDescriptor+0x34>
        USBD_CtlError(pdev, req);
 80069dc:	4629      	mov	r1, r5
 80069de:	f7ff ffa0 	bl	8006922 <USBD_CtlError>
  if (err != 0U)
 80069e2:	e7d4      	b.n	800698e <USBD_GetDescriptor+0x58>
      if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 80069e4:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 80069e8:	689b      	ldr	r3, [r3, #8]
 80069ea:	b123      	cbz	r3, 80069f6 <USBD_GetDescriptor+0xc0>
        pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 80069ec:	f10d 0106 	add.w	r1, sp, #6
 80069f0:	7c00      	ldrb	r0, [r0, #16]
 80069f2:	4798      	blx	r3
  if (err != 0U)
 80069f4:	e7b9      	b.n	800696a <USBD_GetDescriptor+0x34>
        USBD_CtlError(pdev, req);
 80069f6:	4629      	mov	r1, r5
 80069f8:	f7ff ff93 	bl	8006922 <USBD_CtlError>
  if (err != 0U)
 80069fc:	e7c7      	b.n	800698e <USBD_GetDescriptor+0x58>
      if (pdev->pDesc->GetProductStrDescriptor != NULL)
 80069fe:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 8006a02:	68db      	ldr	r3, [r3, #12]
 8006a04:	b123      	cbz	r3, 8006a10 <USBD_GetDescriptor+0xda>
        pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8006a06:	f10d 0106 	add.w	r1, sp, #6
 8006a0a:	7c00      	ldrb	r0, [r0, #16]
 8006a0c:	4798      	blx	r3
  if (err != 0U)
 8006a0e:	e7ac      	b.n	800696a <USBD_GetDescriptor+0x34>
        USBD_CtlError(pdev, req);
 8006a10:	4629      	mov	r1, r5
 8006a12:	f7ff ff86 	bl	8006922 <USBD_CtlError>
  if (err != 0U)
 8006a16:	e7ba      	b.n	800698e <USBD_GetDescriptor+0x58>
      if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8006a18:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 8006a1c:	691b      	ldr	r3, [r3, #16]
 8006a1e:	b123      	cbz	r3, 8006a2a <USBD_GetDescriptor+0xf4>
        pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8006a20:	f10d 0106 	add.w	r1, sp, #6
 8006a24:	7c00      	ldrb	r0, [r0, #16]
 8006a26:	4798      	blx	r3
  if (err != 0U)
 8006a28:	e79f      	b.n	800696a <USBD_GetDescriptor+0x34>
        USBD_CtlError(pdev, req);
 8006a2a:	4629      	mov	r1, r5
 8006a2c:	f7ff ff79 	bl	8006922 <USBD_CtlError>
  if (err != 0U)
 8006a30:	e7ad      	b.n	800698e <USBD_GetDescriptor+0x58>
      if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8006a32:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 8006a36:	695b      	ldr	r3, [r3, #20]
 8006a38:	b123      	cbz	r3, 8006a44 <USBD_GetDescriptor+0x10e>
        pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8006a3a:	f10d 0106 	add.w	r1, sp, #6
 8006a3e:	7c00      	ldrb	r0, [r0, #16]
 8006a40:	4798      	blx	r3
  if (err != 0U)
 8006a42:	e792      	b.n	800696a <USBD_GetDescriptor+0x34>
        USBD_CtlError(pdev, req);
 8006a44:	4629      	mov	r1, r5
 8006a46:	f7ff ff6c 	bl	8006922 <USBD_CtlError>
  if (err != 0U)
 8006a4a:	e7a0      	b.n	800698e <USBD_GetDescriptor+0x58>
      if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8006a4c:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 8006a50:	699b      	ldr	r3, [r3, #24]
 8006a52:	b123      	cbz	r3, 8006a5e <USBD_GetDescriptor+0x128>
        pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8006a54:	f10d 0106 	add.w	r1, sp, #6
 8006a58:	7c00      	ldrb	r0, [r0, #16]
 8006a5a:	4798      	blx	r3
  if (err != 0U)
 8006a5c:	e785      	b.n	800696a <USBD_GetDescriptor+0x34>
        USBD_CtlError(pdev, req);
 8006a5e:	4629      	mov	r1, r5
 8006a60:	f7ff ff5f 	bl	8006922 <USBD_CtlError>
  if (err != 0U)
 8006a64:	e793      	b.n	800698e <USBD_GetDescriptor+0x58>
      USBD_CtlError(pdev, req);
 8006a66:	4629      	mov	r1, r5
 8006a68:	f7ff ff5b 	bl	8006922 <USBD_CtlError>
  if (err != 0U)
 8006a6c:	e78f      	b.n	800698e <USBD_GetDescriptor+0x58>
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006a6e:	7c03      	ldrb	r3, [r0, #16]
 8006a70:	b933      	cbnz	r3, 8006a80 <USBD_GetDescriptor+0x14a>
      pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8006a72:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
 8006a76:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006a78:	f10d 0006 	add.w	r0, sp, #6
 8006a7c:	4798      	blx	r3
  if (err != 0U)
 8006a7e:	e774      	b.n	800696a <USBD_GetDescriptor+0x34>
      USBD_CtlError(pdev, req);
 8006a80:	4629      	mov	r1, r5
 8006a82:	f7ff ff4e 	bl	8006922 <USBD_CtlError>
  if (err != 0U)
 8006a86:	e782      	b.n	800698e <USBD_GetDescriptor+0x58>
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006a88:	7c03      	ldrb	r3, [r0, #16]
 8006a8a:	b943      	cbnz	r3, 8006a9e <USBD_GetDescriptor+0x168>
      pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8006a8c:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
 8006a90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006a92:	f10d 0006 	add.w	r0, sp, #6
 8006a96:	4798      	blx	r3
      pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8006a98:	2307      	movs	r3, #7
 8006a9a:	7043      	strb	r3, [r0, #1]
  if (err != 0U)
 8006a9c:	e765      	b.n	800696a <USBD_GetDescriptor+0x34>
      USBD_CtlError(pdev, req);
 8006a9e:	4629      	mov	r1, r5
 8006aa0:	f7ff ff3f 	bl	8006922 <USBD_CtlError>
  if (err != 0U)
 8006aa4:	e773      	b.n	800698e <USBD_GetDescriptor+0x58>
    USBD_CtlError(pdev, req);
 8006aa6:	4629      	mov	r1, r5
 8006aa8:	f7ff ff3b 	bl	8006922 <USBD_CtlError>
    return;
 8006aac:	e76f      	b.n	800698e <USBD_GetDescriptor+0x58>
        USBD_CtlError(pdev, req);
 8006aae:	4629      	mov	r1, r5
 8006ab0:	4620      	mov	r0, r4
 8006ab2:	f7ff ff36 	bl	8006922 <USBD_CtlError>
 8006ab6:	e76a      	b.n	800698e <USBD_GetDescriptor+0x58>
      (void)USBD_CtlSendStatus(pdev);
 8006ab8:	4620      	mov	r0, r4
 8006aba:	f000 fa95 	bl	8006fe8 <USBD_CtlSendStatus>
 8006abe:	e766      	b.n	800698e <USBD_GetDescriptor+0x58>

08006ac0 <USBD_SetAddress>:
{
 8006ac0:	b538      	push	{r3, r4, r5, lr}
 8006ac2:	4604      	mov	r4, r0
  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8006ac4:	888b      	ldrh	r3, [r1, #4]
 8006ac6:	b9f3      	cbnz	r3, 8006b06 <USBD_SetAddress+0x46>
 8006ac8:	88cb      	ldrh	r3, [r1, #6]
 8006aca:	b9e3      	cbnz	r3, 8006b06 <USBD_SetAddress+0x46>
 8006acc:	884b      	ldrh	r3, [r1, #2]
 8006ace:	2b7f      	cmp	r3, #127	; 0x7f
 8006ad0:	d819      	bhi.n	8006b06 <USBD_SetAddress+0x46>
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8006ad2:	f003 057f 	and.w	r5, r3, #127	; 0x7f
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006ad6:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8006ada:	2b03      	cmp	r3, #3
 8006adc:	d00c      	beq.n	8006af8 <USBD_SetAddress+0x38>
      pdev->dev_address = dev_addr;
 8006ade:	f880 529e 	strb.w	r5, [r0, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8006ae2:	4629      	mov	r1, r5
 8006ae4:	f001 fc2e 	bl	8008344 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8006ae8:	4620      	mov	r0, r4
 8006aea:	f000 fa7d 	bl	8006fe8 <USBD_CtlSendStatus>
      if (dev_addr != 0U)
 8006aee:	b135      	cbz	r5, 8006afe <USBD_SetAddress+0x3e>
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8006af0:	2302      	movs	r3, #2
 8006af2:	f884 329c 	strb.w	r3, [r4, #668]	; 0x29c
 8006af6:	e009      	b.n	8006b0c <USBD_SetAddress+0x4c>
      USBD_CtlError(pdev, req);
 8006af8:	f7ff ff13 	bl	8006922 <USBD_CtlError>
 8006afc:	e006      	b.n	8006b0c <USBD_SetAddress+0x4c>
        pdev->dev_state = USBD_STATE_DEFAULT;
 8006afe:	2301      	movs	r3, #1
 8006b00:	f884 329c 	strb.w	r3, [r4, #668]	; 0x29c
 8006b04:	e002      	b.n	8006b0c <USBD_SetAddress+0x4c>
    USBD_CtlError(pdev, req);
 8006b06:	4620      	mov	r0, r4
 8006b08:	f7ff ff0b 	bl	8006922 <USBD_CtlError>
}
 8006b0c:	bd38      	pop	{r3, r4, r5, pc}
	...

08006b10 <USBD_SetConfig>:
{
 8006b10:	b570      	push	{r4, r5, r6, lr}
 8006b12:	4604      	mov	r4, r0
 8006b14:	460e      	mov	r6, r1
  cfgidx = (uint8_t)(req->wValue);
 8006b16:	788d      	ldrb	r5, [r1, #2]
 8006b18:	4b2d      	ldr	r3, [pc, #180]	; (8006bd0 <USBD_SetConfig+0xc0>)
 8006b1a:	701d      	strb	r5, [r3, #0]
  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8006b1c:	2d01      	cmp	r5, #1
 8006b1e:	d80f      	bhi.n	8006b40 <USBD_SetConfig+0x30>
  switch (pdev->dev_state)
 8006b20:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8006b24:	2b02      	cmp	r3, #2
 8006b26:	d00f      	beq.n	8006b48 <USBD_SetConfig+0x38>
 8006b28:	2b03      	cmp	r3, #3
 8006b2a:	d023      	beq.n	8006b74 <USBD_SetConfig+0x64>
    USBD_CtlError(pdev, req);
 8006b2c:	f7ff fef9 	bl	8006922 <USBD_CtlError>
    (void)USBD_ClrClassConfig(pdev, cfgidx);
 8006b30:	4b27      	ldr	r3, [pc, #156]	; (8006bd0 <USBD_SetConfig+0xc0>)
 8006b32:	7819      	ldrb	r1, [r3, #0]
 8006b34:	4620      	mov	r0, r4
 8006b36:	f7ff fda4 	bl	8006682 <USBD_ClrClassConfig>
    ret = USBD_FAIL;
 8006b3a:	2503      	movs	r5, #3
}
 8006b3c:	4628      	mov	r0, r5
 8006b3e:	bd70      	pop	{r4, r5, r6, pc}
    USBD_CtlError(pdev, req);
 8006b40:	f7ff feef 	bl	8006922 <USBD_CtlError>
    return USBD_FAIL;
 8006b44:	2503      	movs	r5, #3
 8006b46:	e7f9      	b.n	8006b3c <USBD_SetConfig+0x2c>
    if (cfgidx != 0U)
 8006b48:	b18d      	cbz	r5, 8006b6e <USBD_SetConfig+0x5e>
      pdev->dev_config = cfgidx;
 8006b4a:	6045      	str	r5, [r0, #4]
      ret = USBD_SetClassConfig(pdev, cfgidx);
 8006b4c:	4629      	mov	r1, r5
 8006b4e:	f7ff fd8f 	bl	8006670 <USBD_SetClassConfig>
      if (ret != USBD_OK)
 8006b52:	4605      	mov	r5, r0
 8006b54:	b120      	cbz	r0, 8006b60 <USBD_SetConfig+0x50>
        USBD_CtlError(pdev, req);
 8006b56:	4631      	mov	r1, r6
 8006b58:	4620      	mov	r0, r4
 8006b5a:	f7ff fee2 	bl	8006922 <USBD_CtlError>
 8006b5e:	e7ed      	b.n	8006b3c <USBD_SetConfig+0x2c>
        (void)USBD_CtlSendStatus(pdev);
 8006b60:	4620      	mov	r0, r4
 8006b62:	f000 fa41 	bl	8006fe8 <USBD_CtlSendStatus>
        pdev->dev_state = USBD_STATE_CONFIGURED;
 8006b66:	2303      	movs	r3, #3
 8006b68:	f884 329c 	strb.w	r3, [r4, #668]	; 0x29c
 8006b6c:	e7e6      	b.n	8006b3c <USBD_SetConfig+0x2c>
      (void)USBD_CtlSendStatus(pdev);
 8006b6e:	f000 fa3b 	bl	8006fe8 <USBD_CtlSendStatus>
 8006b72:	e7e3      	b.n	8006b3c <USBD_SetConfig+0x2c>
    if (cfgidx == 0U)
 8006b74:	b1cd      	cbz	r5, 8006baa <USBD_SetConfig+0x9a>
    else if (cfgidx != pdev->dev_config)
 8006b76:	6841      	ldr	r1, [r0, #4]
 8006b78:	428d      	cmp	r5, r1
 8006b7a:	d025      	beq.n	8006bc8 <USBD_SetConfig+0xb8>
      (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8006b7c:	b2c9      	uxtb	r1, r1
 8006b7e:	f7ff fd80 	bl	8006682 <USBD_ClrClassConfig>
      pdev->dev_config = cfgidx;
 8006b82:	4b13      	ldr	r3, [pc, #76]	; (8006bd0 <USBD_SetConfig+0xc0>)
 8006b84:	7819      	ldrb	r1, [r3, #0]
 8006b86:	6061      	str	r1, [r4, #4]
      ret = USBD_SetClassConfig(pdev, cfgidx);
 8006b88:	4620      	mov	r0, r4
 8006b8a:	f7ff fd71 	bl	8006670 <USBD_SetClassConfig>
      if (ret != USBD_OK)
 8006b8e:	4605      	mov	r5, r0
 8006b90:	b1b0      	cbz	r0, 8006bc0 <USBD_SetConfig+0xb0>
        USBD_CtlError(pdev, req);
 8006b92:	4631      	mov	r1, r6
 8006b94:	4620      	mov	r0, r4
 8006b96:	f7ff fec4 	bl	8006922 <USBD_CtlError>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8006b9a:	7921      	ldrb	r1, [r4, #4]
 8006b9c:	4620      	mov	r0, r4
 8006b9e:	f7ff fd70 	bl	8006682 <USBD_ClrClassConfig>
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8006ba2:	2302      	movs	r3, #2
 8006ba4:	f884 329c 	strb.w	r3, [r4, #668]	; 0x29c
 8006ba8:	e7c8      	b.n	8006b3c <USBD_SetConfig+0x2c>
      pdev->dev_state = USBD_STATE_ADDRESSED;
 8006baa:	2302      	movs	r3, #2
 8006bac:	f880 329c 	strb.w	r3, [r0, #668]	; 0x29c
      pdev->dev_config = cfgidx;
 8006bb0:	6045      	str	r5, [r0, #4]
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8006bb2:	4629      	mov	r1, r5
 8006bb4:	f7ff fd65 	bl	8006682 <USBD_ClrClassConfig>
      (void)USBD_CtlSendStatus(pdev);
 8006bb8:	4620      	mov	r0, r4
 8006bba:	f000 fa15 	bl	8006fe8 <USBD_CtlSendStatus>
 8006bbe:	e7bd      	b.n	8006b3c <USBD_SetConfig+0x2c>
        (void)USBD_CtlSendStatus(pdev);
 8006bc0:	4620      	mov	r0, r4
 8006bc2:	f000 fa11 	bl	8006fe8 <USBD_CtlSendStatus>
 8006bc6:	e7b9      	b.n	8006b3c <USBD_SetConfig+0x2c>
      (void)USBD_CtlSendStatus(pdev);
 8006bc8:	f000 fa0e 	bl	8006fe8 <USBD_CtlSendStatus>
  USBD_StatusTypeDef ret = USBD_OK;
 8006bcc:	2500      	movs	r5, #0
 8006bce:	e7b5      	b.n	8006b3c <USBD_SetConfig+0x2c>
 8006bd0:	20000204 	.word	0x20000204

08006bd4 <USBD_GetConfig>:
{
 8006bd4:	b508      	push	{r3, lr}
  if (req->wLength != 1U)
 8006bd6:	88cb      	ldrh	r3, [r1, #6]
 8006bd8:	2b01      	cmp	r3, #1
 8006bda:	d10a      	bne.n	8006bf2 <USBD_GetConfig+0x1e>
    switch (pdev->dev_state)
 8006bdc:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8006be0:	2b02      	cmp	r3, #2
 8006be2:	d909      	bls.n	8006bf8 <USBD_GetConfig+0x24>
 8006be4:	2b03      	cmp	r3, #3
 8006be6:	d109      	bne.n	8006bfc <USBD_GetConfig+0x28>
      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8006be8:	2201      	movs	r2, #1
 8006bea:	1d01      	adds	r1, r0, #4
 8006bec:	f000 f9d0 	bl	8006f90 <USBD_CtlSendData>
      break;
 8006bf0:	e001      	b.n	8006bf6 <USBD_GetConfig+0x22>
    USBD_CtlError(pdev, req);
 8006bf2:	f7ff fe96 	bl	8006922 <USBD_CtlError>
}
 8006bf6:	bd08      	pop	{r3, pc}
    switch (pdev->dev_state)
 8006bf8:	b25b      	sxtb	r3, r3
 8006bfa:	b913      	cbnz	r3, 8006c02 <USBD_GetConfig+0x2e>
      USBD_CtlError(pdev, req);
 8006bfc:	f7ff fe91 	bl	8006922 <USBD_CtlError>
}
 8006c00:	e7f9      	b.n	8006bf6 <USBD_GetConfig+0x22>
      pdev->dev_default_config = 0U;
 8006c02:	4601      	mov	r1, r0
 8006c04:	2300      	movs	r3, #0
 8006c06:	f841 3f08 	str.w	r3, [r1, #8]!
      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8006c0a:	2201      	movs	r2, #1
 8006c0c:	f000 f9c0 	bl	8006f90 <USBD_CtlSendData>
      break;
 8006c10:	e7f1      	b.n	8006bf6 <USBD_GetConfig+0x22>

08006c12 <USBD_GetStatus>:
{
 8006c12:	b508      	push	{r3, lr}
  switch (pdev->dev_state)
 8006c14:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8006c18:	3b01      	subs	r3, #1
 8006c1a:	2b02      	cmp	r3, #2
 8006c1c:	d812      	bhi.n	8006c44 <USBD_GetStatus+0x32>
    if (req->wLength != 0x2U)
 8006c1e:	88cb      	ldrh	r3, [r1, #6]
 8006c20:	2b02      	cmp	r3, #2
 8006c22:	d10c      	bne.n	8006c3e <USBD_GetStatus+0x2c>
    pdev->dev_config_status = 0U;
 8006c24:	2300      	movs	r3, #0
 8006c26:	60c3      	str	r3, [r0, #12]
    if (pdev->dev_remote_wakeup != 0U)
 8006c28:	f8d0 32a4 	ldr.w	r3, [r0, #676]	; 0x2a4
 8006c2c:	b10b      	cbz	r3, 8006c32 <USBD_GetStatus+0x20>
      pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8006c2e:	2302      	movs	r3, #2
 8006c30:	60c3      	str	r3, [r0, #12]
    (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8006c32:	2202      	movs	r2, #2
 8006c34:	f100 010c 	add.w	r1, r0, #12
 8006c38:	f000 f9aa 	bl	8006f90 <USBD_CtlSendData>
}
 8006c3c:	bd08      	pop	{r3, pc}
      USBD_CtlError(pdev, req);
 8006c3e:	f7ff fe70 	bl	8006922 <USBD_CtlError>
      break;
 8006c42:	e7fb      	b.n	8006c3c <USBD_GetStatus+0x2a>
    USBD_CtlError(pdev, req);
 8006c44:	f7ff fe6d 	bl	8006922 <USBD_CtlError>
}
 8006c48:	e7f8      	b.n	8006c3c <USBD_GetStatus+0x2a>

08006c4a <USBD_ClrFeature>:
{
 8006c4a:	b508      	push	{r3, lr}
  switch (pdev->dev_state)
 8006c4c:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8006c50:	3b01      	subs	r3, #1
 8006c52:	2b02      	cmp	r3, #2
 8006c54:	d809      	bhi.n	8006c6a <USBD_ClrFeature+0x20>
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8006c56:	884b      	ldrh	r3, [r1, #2]
 8006c58:	2b01      	cmp	r3, #1
 8006c5a:	d000      	beq.n	8006c5e <USBD_ClrFeature+0x14>
}
 8006c5c:	bd08      	pop	{r3, pc}
        pdev->dev_remote_wakeup = 0U;
 8006c5e:	2300      	movs	r3, #0
 8006c60:	f8c0 32a4 	str.w	r3, [r0, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8006c64:	f000 f9c0 	bl	8006fe8 <USBD_CtlSendStatus>
 8006c68:	e7f8      	b.n	8006c5c <USBD_ClrFeature+0x12>
      USBD_CtlError(pdev, req);
 8006c6a:	f7ff fe5a 	bl	8006922 <USBD_CtlError>
}
 8006c6e:	e7f5      	b.n	8006c5c <USBD_ClrFeature+0x12>

08006c70 <USBD_StdDevReq>:
{
 8006c70:	b538      	push	{r3, r4, r5, lr}
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006c72:	780c      	ldrb	r4, [r1, #0]
 8006c74:	f004 0460 	and.w	r4, r4, #96	; 0x60
 8006c78:	2c20      	cmp	r4, #32
 8006c7a:	d006      	beq.n	8006c8a <USBD_StdDevReq+0x1a>
 8006c7c:	2c40      	cmp	r4, #64	; 0x40
 8006c7e:	d004      	beq.n	8006c8a <USBD_StdDevReq+0x1a>
 8006c80:	b154      	cbz	r4, 8006c98 <USBD_StdDevReq+0x28>
    USBD_CtlError(pdev, req);
 8006c82:	f7ff fe4e 	bl	8006922 <USBD_CtlError>
  USBD_StatusTypeDef ret = USBD_OK;
 8006c86:	2400      	movs	r4, #0
    break;
 8006c88:	e004      	b.n	8006c94 <USBD_StdDevReq+0x24>
    ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8006c8a:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
 8006c8e:	689b      	ldr	r3, [r3, #8]
 8006c90:	4798      	blx	r3
 8006c92:	4604      	mov	r4, r0
}
 8006c94:	4620      	mov	r0, r4
 8006c96:	bd38      	pop	{r3, r4, r5, pc}
    switch (req->bRequest)
 8006c98:	784d      	ldrb	r5, [r1, #1]
 8006c9a:	2d09      	cmp	r5, #9
 8006c9c:	d81d      	bhi.n	8006cda <USBD_StdDevReq+0x6a>
 8006c9e:	e8df f005 	tbb	[pc, r5]
 8006ca2:	1912      	.short	0x1912
 8006ca4:	081c161c 	.word	0x081c161c
 8006ca8:	0b0f1c05 	.word	0x0b0f1c05
      USBD_GetDescriptor(pdev, req);
 8006cac:	f7ff fe43 	bl	8006936 <USBD_GetDescriptor>
      break;
 8006cb0:	e7f0      	b.n	8006c94 <USBD_StdDevReq+0x24>
      USBD_SetAddress(pdev, req);
 8006cb2:	f7ff ff05 	bl	8006ac0 <USBD_SetAddress>
      break;
 8006cb6:	e7ed      	b.n	8006c94 <USBD_StdDevReq+0x24>
      ret = USBD_SetConfig(pdev, req);
 8006cb8:	f7ff ff2a 	bl	8006b10 <USBD_SetConfig>
 8006cbc:	4604      	mov	r4, r0
      break;
 8006cbe:	e7e9      	b.n	8006c94 <USBD_StdDevReq+0x24>
      USBD_GetConfig(pdev, req);
 8006cc0:	f7ff ff88 	bl	8006bd4 <USBD_GetConfig>
      break;
 8006cc4:	e7e6      	b.n	8006c94 <USBD_StdDevReq+0x24>
      USBD_GetStatus(pdev, req);
 8006cc6:	f7ff ffa4 	bl	8006c12 <USBD_GetStatus>
  USBD_StatusTypeDef ret = USBD_OK;
 8006cca:	462c      	mov	r4, r5
      break;
 8006ccc:	e7e2      	b.n	8006c94 <USBD_StdDevReq+0x24>
      USBD_SetFeature(pdev, req);
 8006cce:	f7ff fe0a 	bl	80068e6 <USBD_SetFeature>
      break;
 8006cd2:	e7df      	b.n	8006c94 <USBD_StdDevReq+0x24>
      USBD_ClrFeature(pdev, req);
 8006cd4:	f7ff ffb9 	bl	8006c4a <USBD_ClrFeature>
      break;
 8006cd8:	e7dc      	b.n	8006c94 <USBD_StdDevReq+0x24>
      USBD_CtlError(pdev, req);
 8006cda:	f7ff fe22 	bl	8006922 <USBD_CtlError>
      break;
 8006cde:	e7d9      	b.n	8006c94 <USBD_StdDevReq+0x24>

08006ce0 <USBD_StdItfReq>:
{
 8006ce0:	b570      	push	{r4, r5, r6, lr}
 8006ce2:	4605      	mov	r5, r0
 8006ce4:	460c      	mov	r4, r1
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006ce6:	780b      	ldrb	r3, [r1, #0]
 8006ce8:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006cec:	2b20      	cmp	r3, #32
 8006cee:	d007      	beq.n	8006d00 <USBD_StdItfReq+0x20>
 8006cf0:	2b40      	cmp	r3, #64	; 0x40
 8006cf2:	d005      	beq.n	8006d00 <USBD_StdItfReq+0x20>
 8006cf4:	b123      	cbz	r3, 8006d00 <USBD_StdItfReq+0x20>
    USBD_CtlError(pdev, req);
 8006cf6:	f7ff fe14 	bl	8006922 <USBD_CtlError>
  USBD_StatusTypeDef ret = USBD_OK;
 8006cfa:	2600      	movs	r6, #0
}
 8006cfc:	4630      	mov	r0, r6
 8006cfe:	bd70      	pop	{r4, r5, r6, pc}
    switch (pdev->dev_state)
 8006d00:	f895 329c 	ldrb.w	r3, [r5, #668]	; 0x29c
 8006d04:	3b01      	subs	r3, #1
 8006d06:	2b02      	cmp	r3, #2
 8006d08:	d818      	bhi.n	8006d3c <USBD_StdItfReq+0x5c>
      if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8006d0a:	7923      	ldrb	r3, [r4, #4]
 8006d0c:	2b01      	cmp	r3, #1
 8006d0e:	d80f      	bhi.n	8006d30 <USBD_StdItfReq+0x50>
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8006d10:	f8d5 32b8 	ldr.w	r3, [r5, #696]	; 0x2b8
 8006d14:	689b      	ldr	r3, [r3, #8]
 8006d16:	4621      	mov	r1, r4
 8006d18:	4628      	mov	r0, r5
 8006d1a:	4798      	blx	r3
 8006d1c:	4606      	mov	r6, r0
        if ((req->wLength == 0U) && (ret == USBD_OK))
 8006d1e:	88e3      	ldrh	r3, [r4, #6]
 8006d20:	2b00      	cmp	r3, #0
 8006d22:	d1eb      	bne.n	8006cfc <USBD_StdItfReq+0x1c>
 8006d24:	2800      	cmp	r0, #0
 8006d26:	d1e9      	bne.n	8006cfc <USBD_StdItfReq+0x1c>
          (void)USBD_CtlSendStatus(pdev);
 8006d28:	4628      	mov	r0, r5
 8006d2a:	f000 f95d 	bl	8006fe8 <USBD_CtlSendStatus>
 8006d2e:	e7e5      	b.n	8006cfc <USBD_StdItfReq+0x1c>
        USBD_CtlError(pdev, req);
 8006d30:	4621      	mov	r1, r4
 8006d32:	4628      	mov	r0, r5
 8006d34:	f7ff fdf5 	bl	8006922 <USBD_CtlError>
  USBD_StatusTypeDef ret = USBD_OK;
 8006d38:	2600      	movs	r6, #0
 8006d3a:	e7df      	b.n	8006cfc <USBD_StdItfReq+0x1c>
      USBD_CtlError(pdev, req);
 8006d3c:	4621      	mov	r1, r4
 8006d3e:	4628      	mov	r0, r5
 8006d40:	f7ff fdef 	bl	8006922 <USBD_CtlError>
  USBD_StatusTypeDef ret = USBD_OK;
 8006d44:	2600      	movs	r6, #0
      break;
 8006d46:	e7d9      	b.n	8006cfc <USBD_StdItfReq+0x1c>

08006d48 <USBD_StdEPReq>:
{
 8006d48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006d4a:	4606      	mov	r6, r0
 8006d4c:	460d      	mov	r5, r1
  ep_addr = LOBYTE(req->wIndex);
 8006d4e:	888b      	ldrh	r3, [r1, #4]
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006d50:	780c      	ldrb	r4, [r1, #0]
 8006d52:	f004 0460 	and.w	r4, r4, #96	; 0x60
 8006d56:	2c20      	cmp	r4, #32
 8006d58:	d008      	beq.n	8006d6c <USBD_StdEPReq+0x24>
 8006d5a:	b2d9      	uxtb	r1, r3
 8006d5c:	2c40      	cmp	r4, #64	; 0x40
 8006d5e:	d005      	beq.n	8006d6c <USBD_StdEPReq+0x24>
 8006d60:	b16c      	cbz	r4, 8006d7e <USBD_StdEPReq+0x36>
    USBD_CtlError(pdev, req);
 8006d62:	4629      	mov	r1, r5
 8006d64:	f7ff fddd 	bl	8006922 <USBD_CtlError>
  USBD_StatusTypeDef ret = USBD_OK;
 8006d68:	2400      	movs	r4, #0
    break;
 8006d6a:	e006      	b.n	8006d7a <USBD_StdEPReq+0x32>
    ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8006d6c:	f8d6 32b8 	ldr.w	r3, [r6, #696]	; 0x2b8
 8006d70:	689b      	ldr	r3, [r3, #8]
 8006d72:	4629      	mov	r1, r5
 8006d74:	4630      	mov	r0, r6
 8006d76:	4798      	blx	r3
 8006d78:	4604      	mov	r4, r0
}
 8006d7a:	4620      	mov	r0, r4
 8006d7c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    switch (req->bRequest)
 8006d7e:	786f      	ldrb	r7, [r5, #1]
 8006d80:	2f01      	cmp	r7, #1
 8006d82:	d037      	beq.n	8006df4 <USBD_StdEPReq+0xac>
 8006d84:	2f03      	cmp	r7, #3
 8006d86:	d005      	beq.n	8006d94 <USBD_StdEPReq+0x4c>
 8006d88:	2f00      	cmp	r7, #0
 8006d8a:	d063      	beq.n	8006e54 <USBD_StdEPReq+0x10c>
      USBD_CtlError(pdev, req);
 8006d8c:	4629      	mov	r1, r5
 8006d8e:	f7ff fdc8 	bl	8006922 <USBD_CtlError>
      break;
 8006d92:	e7f2      	b.n	8006d7a <USBD_StdEPReq+0x32>
      switch (pdev->dev_state)
 8006d94:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8006d98:	2b02      	cmp	r3, #2
 8006d9a:	d005      	beq.n	8006da8 <USBD_StdEPReq+0x60>
 8006d9c:	2b03      	cmp	r3, #3
 8006d9e:	d016      	beq.n	8006dce <USBD_StdEPReq+0x86>
        USBD_CtlError(pdev, req);
 8006da0:	4629      	mov	r1, r5
 8006da2:	f7ff fdbe 	bl	8006922 <USBD_CtlError>
        break;
 8006da6:	e7e8      	b.n	8006d7a <USBD_StdEPReq+0x32>
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006da8:	f1b1 0380 	subs.w	r3, r1, #128	; 0x80
 8006dac:	bf18      	it	ne
 8006dae:	2301      	movne	r3, #1
 8006db0:	2900      	cmp	r1, #0
 8006db2:	bf08      	it	eq
 8006db4:	2300      	moveq	r3, #0
 8006db6:	b133      	cbz	r3, 8006dc6 <USBD_StdEPReq+0x7e>
          (void)USBD_LL_StallEP(pdev, ep_addr);
 8006db8:	f001 fab4 	bl	8008324 <USBD_LL_StallEP>
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8006dbc:	2180      	movs	r1, #128	; 0x80
 8006dbe:	4630      	mov	r0, r6
 8006dc0:	f001 fab0 	bl	8008324 <USBD_LL_StallEP>
 8006dc4:	e7d9      	b.n	8006d7a <USBD_StdEPReq+0x32>
          USBD_CtlError(pdev, req);
 8006dc6:	4629      	mov	r1, r5
 8006dc8:	f7ff fdab 	bl	8006922 <USBD_CtlError>
 8006dcc:	e7d5      	b.n	8006d7a <USBD_StdEPReq+0x32>
        if (req->wValue == USB_FEATURE_EP_HALT)
 8006dce:	886b      	ldrh	r3, [r5, #2]
 8006dd0:	b94b      	cbnz	r3, 8006de6 <USBD_StdEPReq+0x9e>
          if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8006dd2:	f1b1 0380 	subs.w	r3, r1, #128	; 0x80
 8006dd6:	bf18      	it	ne
 8006dd8:	2301      	movne	r3, #1
 8006dda:	2900      	cmp	r1, #0
 8006ddc:	bf08      	it	eq
 8006dde:	2300      	moveq	r3, #0
 8006de0:	b10b      	cbz	r3, 8006de6 <USBD_StdEPReq+0x9e>
 8006de2:	88eb      	ldrh	r3, [r5, #6]
 8006de4:	b11b      	cbz	r3, 8006dee <USBD_StdEPReq+0xa6>
        (void)USBD_CtlSendStatus(pdev);
 8006de6:	4630      	mov	r0, r6
 8006de8:	f000 f8fe 	bl	8006fe8 <USBD_CtlSendStatus>
        break;
 8006dec:	e7c5      	b.n	8006d7a <USBD_StdEPReq+0x32>
            (void)USBD_LL_StallEP(pdev, ep_addr);
 8006dee:	f001 fa99 	bl	8008324 <USBD_LL_StallEP>
 8006df2:	e7f8      	b.n	8006de6 <USBD_StdEPReq+0x9e>
      switch (pdev->dev_state)
 8006df4:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8006df8:	2b02      	cmp	r3, #2
 8006dfa:	d005      	beq.n	8006e08 <USBD_StdEPReq+0xc0>
 8006dfc:	2b03      	cmp	r3, #3
 8006dfe:	d016      	beq.n	8006e2e <USBD_StdEPReq+0xe6>
        USBD_CtlError(pdev, req);
 8006e00:	4629      	mov	r1, r5
 8006e02:	f7ff fd8e 	bl	8006922 <USBD_CtlError>
        break;
 8006e06:	e7b8      	b.n	8006d7a <USBD_StdEPReq+0x32>
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006e08:	f1b1 0380 	subs.w	r3, r1, #128	; 0x80
 8006e0c:	bf18      	it	ne
 8006e0e:	2301      	movne	r3, #1
 8006e10:	2900      	cmp	r1, #0
 8006e12:	bf08      	it	eq
 8006e14:	2300      	moveq	r3, #0
 8006e16:	b133      	cbz	r3, 8006e26 <USBD_StdEPReq+0xde>
          (void)USBD_LL_StallEP(pdev, ep_addr);
 8006e18:	f001 fa84 	bl	8008324 <USBD_LL_StallEP>
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8006e1c:	2180      	movs	r1, #128	; 0x80
 8006e1e:	4630      	mov	r0, r6
 8006e20:	f001 fa80 	bl	8008324 <USBD_LL_StallEP>
 8006e24:	e7a9      	b.n	8006d7a <USBD_StdEPReq+0x32>
          USBD_CtlError(pdev, req);
 8006e26:	4629      	mov	r1, r5
 8006e28:	f7ff fd7b 	bl	8006922 <USBD_CtlError>
 8006e2c:	e7a5      	b.n	8006d7a <USBD_StdEPReq+0x32>
        if (req->wValue == USB_FEATURE_EP_HALT)
 8006e2e:	886b      	ldrh	r3, [r5, #2]
 8006e30:	2b00      	cmp	r3, #0
 8006e32:	d1a2      	bne.n	8006d7a <USBD_StdEPReq+0x32>
          if ((ep_addr & 0x7FU) != 0x00U)
 8006e34:	f011 0f7f 	tst.w	r1, #127	; 0x7f
 8006e38:	d109      	bne.n	8006e4e <USBD_StdEPReq+0x106>
          (void)USBD_CtlSendStatus(pdev);
 8006e3a:	4630      	mov	r0, r6
 8006e3c:	f000 f8d4 	bl	8006fe8 <USBD_CtlSendStatus>
          (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8006e40:	f8d6 32b8 	ldr.w	r3, [r6, #696]	; 0x2b8
 8006e44:	689b      	ldr	r3, [r3, #8]
 8006e46:	4629      	mov	r1, r5
 8006e48:	4630      	mov	r0, r6
 8006e4a:	4798      	blx	r3
 8006e4c:	e795      	b.n	8006d7a <USBD_StdEPReq+0x32>
            (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8006e4e:	f001 fa71 	bl	8008334 <USBD_LL_ClearStallEP>
 8006e52:	e7f2      	b.n	8006e3a <USBD_StdEPReq+0xf2>
      switch (pdev->dev_state)
 8006e54:	f890 229c 	ldrb.w	r2, [r0, #668]	; 0x29c
 8006e58:	2a02      	cmp	r2, #2
 8006e5a:	d006      	beq.n	8006e6a <USBD_StdEPReq+0x122>
 8006e5c:	2a03      	cmp	r2, #3
 8006e5e:	d02e      	beq.n	8006ebe <USBD_StdEPReq+0x176>
        USBD_CtlError(pdev, req);
 8006e60:	4629      	mov	r1, r5
 8006e62:	f7ff fd5e 	bl	8006922 <USBD_CtlError>
  USBD_StatusTypeDef ret = USBD_OK;
 8006e66:	463c      	mov	r4, r7
        break;
 8006e68:	e787      	b.n	8006d7a <USBD_StdEPReq+0x32>
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006e6a:	f1b1 0280 	subs.w	r2, r1, #128	; 0x80
 8006e6e:	bf18      	it	ne
 8006e70:	2201      	movne	r2, #1
 8006e72:	2900      	cmp	r1, #0
 8006e74:	bf08      	it	eq
 8006e76:	2200      	moveq	r2, #0
 8006e78:	b99a      	cbnz	r2, 8006ea2 <USBD_StdEPReq+0x15a>
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006e7a:	f013 0f80 	tst.w	r3, #128	; 0x80
 8006e7e:	d115      	bne.n	8006eac <USBD_StdEPReq+0x164>
              &pdev->ep_out[ep_addr & 0x7FU];
 8006e80:	f001 017f 	and.w	r1, r1, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006e84:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 8006e88:	0089      	lsls	r1, r1, #2
 8006e8a:	f501 71a8 	add.w	r1, r1, #336	; 0x150
 8006e8e:	4401      	add	r1, r0
 8006e90:	3104      	adds	r1, #4
        pep->status = 0x0000U;
 8006e92:	2300      	movs	r3, #0
 8006e94:	600b      	str	r3, [r1, #0]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8006e96:	2202      	movs	r2, #2
 8006e98:	4630      	mov	r0, r6
 8006e9a:	f000 f879 	bl	8006f90 <USBD_CtlSendData>
  USBD_StatusTypeDef ret = USBD_OK;
 8006e9e:	463c      	mov	r4, r7
        break;
 8006ea0:	e76b      	b.n	8006d7a <USBD_StdEPReq+0x32>
          USBD_CtlError(pdev, req);
 8006ea2:	4629      	mov	r1, r5
 8006ea4:	f7ff fd3d 	bl	8006922 <USBD_CtlError>
  USBD_StatusTypeDef ret = USBD_OK;
 8006ea8:	463c      	mov	r4, r7
          break;
 8006eaa:	e766      	b.n	8006d7a <USBD_StdEPReq+0x32>
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006eac:	f001 017f 	and.w	r1, r1, #127	; 0x7f
 8006eb0:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 8006eb4:	0089      	lsls	r1, r1, #2
 8006eb6:	3110      	adds	r1, #16
 8006eb8:	4401      	add	r1, r0
 8006eba:	3104      	adds	r1, #4
 8006ebc:	e7e9      	b.n	8006e92 <USBD_StdEPReq+0x14a>
        if ((ep_addr & 0x80U) == 0x80U)
 8006ebe:	b25b      	sxtb	r3, r3
 8006ec0:	2b00      	cmp	r3, #0
 8006ec2:	db24      	blt.n	8006f0e <USBD_StdEPReq+0x1c6>
          if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8006ec4:	f001 020f 	and.w	r2, r1, #15
 8006ec8:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8006ecc:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 8006ed0:	f8b2 2164 	ldrh.w	r2, [r2, #356]	; 0x164
 8006ed4:	b34a      	cbz	r2, 8006f2a <USBD_StdEPReq+0x1e2>
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006ed6:	2b00      	cmp	r3, #0
 8006ed8:	db2c      	blt.n	8006f34 <USBD_StdEPReq+0x1ec>
              &pdev->ep_out[ep_addr & 0x7FU];
 8006eda:	f001 037f 	and.w	r3, r1, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006ede:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8006ee2:	009c      	lsls	r4, r3, #2
 8006ee4:	f504 74a8 	add.w	r4, r4, #336	; 0x150
 8006ee8:	4434      	add	r4, r6
 8006eea:	3404      	adds	r4, #4
          if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8006eec:	2980      	cmp	r1, #128	; 0x80
 8006eee:	bf14      	ite	ne
 8006ef0:	2300      	movne	r3, #0
 8006ef2:	2301      	moveq	r3, #1
 8006ef4:	2900      	cmp	r1, #0
 8006ef6:	bf08      	it	eq
 8006ef8:	2301      	moveq	r3, #1
 8006efa:	b323      	cbz	r3, 8006f46 <USBD_StdEPReq+0x1fe>
            pep->status = 0x0000U;
 8006efc:	2300      	movs	r3, #0
 8006efe:	6023      	str	r3, [r4, #0]
          (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8006f00:	2202      	movs	r2, #2
 8006f02:	4621      	mov	r1, r4
 8006f04:	4630      	mov	r0, r6
 8006f06:	f000 f843 	bl	8006f90 <USBD_CtlSendData>
  USBD_StatusTypeDef ret = USBD_OK;
 8006f0a:	463c      	mov	r4, r7
          break;
 8006f0c:	e735      	b.n	8006d7a <USBD_StdEPReq+0x32>
          if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8006f0e:	f001 020f 	and.w	r2, r1, #15
 8006f12:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8006f16:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 8006f1a:	8c92      	ldrh	r2, [r2, #36]	; 0x24
 8006f1c:	2a00      	cmp	r2, #0
 8006f1e:	d1da      	bne.n	8006ed6 <USBD_StdEPReq+0x18e>
            USBD_CtlError(pdev, req);
 8006f20:	4629      	mov	r1, r5
 8006f22:	f7ff fcfe 	bl	8006922 <USBD_CtlError>
  USBD_StatusTypeDef ret = USBD_OK;
 8006f26:	463c      	mov	r4, r7
            break;
 8006f28:	e727      	b.n	8006d7a <USBD_StdEPReq+0x32>
            USBD_CtlError(pdev, req);
 8006f2a:	4629      	mov	r1, r5
 8006f2c:	f7ff fcf9 	bl	8006922 <USBD_CtlError>
  USBD_StatusTypeDef ret = USBD_OK;
 8006f30:	463c      	mov	r4, r7
            break;
 8006f32:	e722      	b.n	8006d7a <USBD_StdEPReq+0x32>
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006f34:	f001 037f 	and.w	r3, r1, #127	; 0x7f
 8006f38:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8006f3c:	009c      	lsls	r4, r3, #2
 8006f3e:	3410      	adds	r4, #16
 8006f40:	4434      	add	r4, r6
 8006f42:	3404      	adds	r4, #4
 8006f44:	e7d2      	b.n	8006eec <USBD_StdEPReq+0x1a4>
          else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8006f46:	4630      	mov	r0, r6
 8006f48:	f001 f9aa 	bl	80082a0 <USBD_LL_IsStallEP>
 8006f4c:	b110      	cbz	r0, 8006f54 <USBD_StdEPReq+0x20c>
            pep->status = 0x0001U;
 8006f4e:	2301      	movs	r3, #1
 8006f50:	6023      	str	r3, [r4, #0]
 8006f52:	e7d5      	b.n	8006f00 <USBD_StdEPReq+0x1b8>
            pep->status = 0x0000U;
 8006f54:	2300      	movs	r3, #0
 8006f56:	6023      	str	r3, [r4, #0]
 8006f58:	e7d2      	b.n	8006f00 <USBD_StdEPReq+0x1b8>

08006f5a <USBD_GetString>:
  if (desc == NULL)
 8006f5a:	b1c0      	cbz	r0, 8006f8e <USBD_GetString+0x34>
{
 8006f5c:	b570      	push	{r4, r5, r6, lr}
 8006f5e:	460d      	mov	r5, r1
 8006f60:	4616      	mov	r6, r2
 8006f62:	4604      	mov	r4, r0
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8006f64:	f7ff fcb6 	bl	80068d4 <USBD_GetLen>
 8006f68:	3001      	adds	r0, #1
 8006f6a:	0040      	lsls	r0, r0, #1
 8006f6c:	8030      	strh	r0, [r6, #0]
  unicode[idx] = *(uint8_t *)len;
 8006f6e:	7028      	strb	r0, [r5, #0]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8006f70:	2303      	movs	r3, #3
 8006f72:	706b      	strb	r3, [r5, #1]
  idx++;
 8006f74:	2302      	movs	r3, #2
  while (*pdesc != (uint8_t)'\0')
 8006f76:	7822      	ldrb	r2, [r4, #0]
 8006f78:	b142      	cbz	r2, 8006f8c <USBD_GetString+0x32>
    unicode[idx] = *pdesc;
 8006f7a:	54ea      	strb	r2, [r5, r3]
    pdesc++;
 8006f7c:	3401      	adds	r4, #1
    idx++;
 8006f7e:	1c5a      	adds	r2, r3, #1
 8006f80:	b2d2      	uxtb	r2, r2
    unicode[idx] = 0U;
 8006f82:	2100      	movs	r1, #0
 8006f84:	54a9      	strb	r1, [r5, r2]
    idx++;
 8006f86:	3302      	adds	r3, #2
 8006f88:	b2db      	uxtb	r3, r3
 8006f8a:	e7f4      	b.n	8006f76 <USBD_GetString+0x1c>
}
 8006f8c:	bd70      	pop	{r4, r5, r6, pc}
 8006f8e:	4770      	bx	lr

08006f90 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8006f90:	b510      	push	{r4, lr}
 8006f92:	4613      	mov	r3, r2
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8006f94:	2202      	movs	r2, #2
 8006f96:	f8c0 2294 	str.w	r2, [r0, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8006f9a:	6183      	str	r3, [r0, #24]
  pdev->ep_in[0].rem_length = len;
 8006f9c:	61c3      	str	r3, [r0, #28]

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8006f9e:	460a      	mov	r2, r1
 8006fa0:	2100      	movs	r1, #0
 8006fa2:	f001 f9d7 	bl	8008354 <USBD_LL_Transmit>

  return USBD_OK;
}
 8006fa6:	2000      	movs	r0, #0
 8006fa8:	bd10      	pop	{r4, pc}

08006faa <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8006faa:	b508      	push	{r3, lr}
 8006fac:	4613      	mov	r3, r2
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8006fae:	460a      	mov	r2, r1
 8006fb0:	2100      	movs	r1, #0
 8006fb2:	f001 f9cf 	bl	8008354 <USBD_LL_Transmit>

  return USBD_OK;
}
 8006fb6:	2000      	movs	r0, #0
 8006fb8:	bd08      	pop	{r3, pc}

08006fba <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8006fba:	b510      	push	{r4, lr}
 8006fbc:	4613      	mov	r3, r2
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8006fbe:	2203      	movs	r2, #3
 8006fc0:	f8c0 2294 	str.w	r2, [r0, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8006fc4:	f8c0 3158 	str.w	r3, [r0, #344]	; 0x158
  pdev->ep_out[0].rem_length = len;
 8006fc8:	f8c0 315c 	str.w	r3, [r0, #348]	; 0x15c

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8006fcc:	460a      	mov	r2, r1
 8006fce:	2100      	movs	r1, #0
 8006fd0:	f001 f9c8 	bl	8008364 <USBD_LL_PrepareReceive>

  return USBD_OK;
}
 8006fd4:	2000      	movs	r0, #0
 8006fd6:	bd10      	pop	{r4, pc}

08006fd8 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8006fd8:	b508      	push	{r3, lr}
 8006fda:	4613      	mov	r3, r2
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8006fdc:	460a      	mov	r2, r1
 8006fde:	2100      	movs	r1, #0
 8006fe0:	f001 f9c0 	bl	8008364 <USBD_LL_PrepareReceive>

  return USBD_OK;
}
 8006fe4:	2000      	movs	r0, #0
 8006fe6:	bd08      	pop	{r3, pc}

08006fe8 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8006fe8:	b508      	push	{r3, lr}
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8006fea:	2304      	movs	r3, #4
 8006fec:	f8c0 3294 	str.w	r3, [r0, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8006ff0:	2300      	movs	r3, #0
 8006ff2:	461a      	mov	r2, r3
 8006ff4:	4619      	mov	r1, r3
 8006ff6:	f001 f9ad 	bl	8008354 <USBD_LL_Transmit>

  return USBD_OK;
}
 8006ffa:	2000      	movs	r0, #0
 8006ffc:	bd08      	pop	{r3, pc}

08006ffe <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8006ffe:	b508      	push	{r3, lr}
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8007000:	2305      	movs	r3, #5
 8007002:	f8c0 3294 	str.w	r3, [r0, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007006:	2300      	movs	r3, #0
 8007008:	461a      	mov	r2, r3
 800700a:	4619      	mov	r1, r3
 800700c:	f001 f9aa 	bl	8008364 <USBD_LL_PrepareReceive>

  return USBD_OK;
}
 8007010:	2000      	movs	r0, #0
 8007012:	bd08      	pop	{r3, pc}

08007014 <_ZN4gpio18gpio_register_initEP12GPIO_TypeDefP16GPIO_InitTypeDef>:
	  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
	  gpio_register_init(GPIOB, &GPIO_InitStruct);
}

void gpio::gpio_register_init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8007014:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007016:	b083      	sub	sp, #12
	uint32_t position = 0x00U;
 8007018:	2300      	movs	r3, #0
 800701a:	e03a      	b.n	8007092 <_ZN4gpio18gpio_register_initEP12GPIO_TypeDefP16GPIO_InitTypeDef+0x7e>
	        /* Enable SYSCFG Clock */
	        __HAL_RCC_SYSCFG_CLK_ENABLE();

	        temp = SYSCFG->EXTICR[position >> 2U];
	        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
	        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800701c:	2009      	movs	r0, #9
 800701e:	e000      	b.n	8007022 <_ZN4gpio18gpio_register_initEP12GPIO_TypeDefP16GPIO_InitTypeDef+0xe>
 8007020:	2000      	movs	r0, #0
 8007022:	40b0      	lsls	r0, r6
 8007024:	4338      	orrs	r0, r7
	        SYSCFG->EXTICR[position >> 2U] = temp;
 8007026:	3502      	adds	r5, #2
 8007028:	4e6f      	ldr	r6, [pc, #444]	; (80071e8 <_ZN4gpio18gpio_register_initEP12GPIO_TypeDefP16GPIO_InitTypeDef+0x1d4>)
 800702a:	f846 0025 	str.w	r0, [r6, r5, lsl #2]

	        /* Clear EXTI line configuration */
	        temp = EXTI_CurrentCPU->IMR1;
 800702e:	486f      	ldr	r0, [pc, #444]	; (80071ec <_ZN4gpio18gpio_register_initEP12GPIO_TypeDefP16GPIO_InitTypeDef+0x1d8>)
 8007030:	6805      	ldr	r5, [r0, #0]
	        temp &= ~(iocurrent);
 8007032:	43e0      	mvns	r0, r4
 8007034:	ea25 0604 	bic.w	r6, r5, r4
	        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8007038:	6857      	ldr	r7, [r2, #4]
 800703a:	f417 3f80 	tst.w	r7, #65536	; 0x10000
 800703e:	d001      	beq.n	8007044 <_ZN4gpio18gpio_register_initEP12GPIO_TypeDefP16GPIO_InitTypeDef+0x30>
	        {
	          temp |= iocurrent;
 8007040:	ea44 0605 	orr.w	r6, r4, r5
	        }
	        EXTI_CurrentCPU->IMR1 = temp;
 8007044:	4d69      	ldr	r5, [pc, #420]	; (80071ec <_ZN4gpio18gpio_register_initEP12GPIO_TypeDefP16GPIO_InitTypeDef+0x1d8>)
 8007046:	602e      	str	r6, [r5, #0]

	        temp = EXTI_CurrentCPU->EMR1;
 8007048:	686e      	ldr	r6, [r5, #4]
	        temp &= ~(iocurrent);
 800704a:	ea00 0506 	and.w	r5, r0, r6
	        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800704e:	6857      	ldr	r7, [r2, #4]
 8007050:	f417 3f00 	tst.w	r7, #131072	; 0x20000
 8007054:	d001      	beq.n	800705a <_ZN4gpio18gpio_register_initEP12GPIO_TypeDefP16GPIO_InitTypeDef+0x46>
	        {
	          temp |= iocurrent;
 8007056:	ea44 0506 	orr.w	r5, r4, r6
	        }
	        EXTI_CurrentCPU->EMR1 = temp;
 800705a:	4e64      	ldr	r6, [pc, #400]	; (80071ec <_ZN4gpio18gpio_register_initEP12GPIO_TypeDefP16GPIO_InitTypeDef+0x1d8>)
 800705c:	6075      	str	r5, [r6, #4]

	        /* Clear Rising Falling edge configuration */
	        temp = EXTI->RTSR1;
 800705e:	f04f 45b0 	mov.w	r5, #1476395008	; 0x58000000
 8007062:	682d      	ldr	r5, [r5, #0]
	        temp &= ~(iocurrent);
 8007064:	ea00 0605 	and.w	r6, r0, r5
	        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8007068:	6857      	ldr	r7, [r2, #4]
 800706a:	f417 1f80 	tst.w	r7, #1048576	; 0x100000
 800706e:	d001      	beq.n	8007074 <_ZN4gpio18gpio_register_initEP12GPIO_TypeDefP16GPIO_InitTypeDef+0x60>
	        {
	          temp |= iocurrent;
 8007070:	ea44 0605 	orr.w	r6, r4, r5
	        }
	        EXTI->RTSR1 = temp;
 8007074:	f04f 45b0 	mov.w	r5, #1476395008	; 0x58000000
 8007078:	602e      	str	r6, [r5, #0]

	        temp = EXTI->FTSR1;
 800707a:	686d      	ldr	r5, [r5, #4]
	        temp &= ~(iocurrent);
 800707c:	4028      	ands	r0, r5
	        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800707e:	6856      	ldr	r6, [r2, #4]
 8007080:	f416 1f00 	tst.w	r6, #2097152	; 0x200000
 8007084:	d001      	beq.n	800708a <_ZN4gpio18gpio_register_initEP12GPIO_TypeDefP16GPIO_InitTypeDef+0x76>
	        {
	          temp |= iocurrent;
 8007086:	ea44 0005 	orr.w	r0, r4, r5
	        }
	        EXTI->FTSR1 = temp;
 800708a:	f04f 44b0 	mov.w	r4, #1476395008	; 0x58000000
 800708e:	6060      	str	r0, [r4, #4]
	      }
	    }

	    position++;
 8007090:	3301      	adds	r3, #1
	  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8007092:	6814      	ldr	r4, [r2, #0]
 8007094:	fa34 f003 	lsrs.w	r0, r4, r3
 8007098:	f000 80a3 	beq.w	80071e2 <_ZN4gpio18gpio_register_initEP12GPIO_TypeDefP16GPIO_InitTypeDef+0x1ce>
	    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 800709c:	2001      	movs	r0, #1
 800709e:	4098      	lsls	r0, r3
	    if (iocurrent != 0x00U)
 80070a0:	4004      	ands	r4, r0
 80070a2:	d0f5      	beq.n	8007090 <_ZN4gpio18gpio_register_initEP12GPIO_TypeDefP16GPIO_InitTypeDef+0x7c>
	      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80070a4:	6855      	ldr	r5, [r2, #4]
 80070a6:	1e6e      	subs	r6, r5, #1
 80070a8:	2d11      	cmp	r5, #17
 80070aa:	bf18      	it	ne
 80070ac:	2e01      	cmpne	r6, #1
 80070ae:	d901      	bls.n	80070b4 <_ZN4gpio18gpio_register_initEP12GPIO_TypeDefP16GPIO_InitTypeDef+0xa0>
	          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80070b0:	2d12      	cmp	r5, #18
 80070b2:	d112      	bne.n	80070da <_ZN4gpio18gpio_register_initEP12GPIO_TypeDefP16GPIO_InitTypeDef+0xc6>
	        temp = GPIOx->OSPEEDR;
 80070b4:	688e      	ldr	r6, [r1, #8]
	        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80070b6:	005f      	lsls	r7, r3, #1
 80070b8:	2503      	movs	r5, #3
 80070ba:	40bd      	lsls	r5, r7
 80070bc:	ea26 0605 	bic.w	r6, r6, r5
	        temp |= (GPIO_Init->Speed << (position * 2U));
 80070c0:	68d5      	ldr	r5, [r2, #12]
 80070c2:	40bd      	lsls	r5, r7
 80070c4:	4335      	orrs	r5, r6
	        GPIOx->OSPEEDR = temp;
 80070c6:	608d      	str	r5, [r1, #8]
	        temp = GPIOx->OTYPER;
 80070c8:	684e      	ldr	r6, [r1, #4]
	        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80070ca:	ea26 0600 	bic.w	r6, r6, r0
	        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80070ce:	6855      	ldr	r5, [r2, #4]
 80070d0:	f3c5 1000 	ubfx	r0, r5, #4, #1
 80070d4:	4098      	lsls	r0, r3
 80070d6:	4330      	orrs	r0, r6
	        GPIOx->OTYPER = temp;
 80070d8:	6048      	str	r0, [r1, #4]
	      temp = GPIOx->PUPDR;
 80070da:	68cf      	ldr	r7, [r1, #12]
	      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80070dc:	005e      	lsls	r6, r3, #1
 80070de:	2503      	movs	r5, #3
 80070e0:	40b5      	lsls	r5, r6
 80070e2:	43e8      	mvns	r0, r5
 80070e4:	ea27 0705 	bic.w	r7, r7, r5
	      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80070e8:	6895      	ldr	r5, [r2, #8]
 80070ea:	40b5      	lsls	r5, r6
 80070ec:	433d      	orrs	r5, r7
	      GPIOx->PUPDR = temp;
 80070ee:	60cd      	str	r5, [r1, #12]
	      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80070f0:	6855      	ldr	r5, [r2, #4]
 80070f2:	2d12      	cmp	r5, #18
 80070f4:	bf18      	it	ne
 80070f6:	2d02      	cmpne	r5, #2
 80070f8:	d113      	bne.n	8007122 <_ZN4gpio18gpio_register_initEP12GPIO_TypeDefP16GPIO_InitTypeDef+0x10e>
	        temp = GPIOx->AFR[position >> 3U];
 80070fa:	08df      	lsrs	r7, r3, #3
 80070fc:	3708      	adds	r7, #8
 80070fe:	f851 e027 	ldr.w	lr, [r1, r7, lsl #2]
	        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8007102:	f003 0507 	and.w	r5, r3, #7
 8007106:	ea4f 0c85 	mov.w	ip, r5, lsl #2
 800710a:	250f      	movs	r5, #15
 800710c:	fa05 f50c 	lsl.w	r5, r5, ip
 8007110:	ea2e 0e05 	bic.w	lr, lr, r5
	        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8007114:	6915      	ldr	r5, [r2, #16]
 8007116:	fa05 f50c 	lsl.w	r5, r5, ip
 800711a:	ea45 050e 	orr.w	r5, r5, lr
	        GPIOx->AFR[position >> 3U] = temp;
 800711e:	f841 5027 	str.w	r5, [r1, r7, lsl #2]
	      temp = GPIOx->MODER;
 8007122:	680d      	ldr	r5, [r1, #0]
	      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8007124:	4005      	ands	r5, r0
	      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8007126:	6850      	ldr	r0, [r2, #4]
 8007128:	f000 0003 	and.w	r0, r0, #3
 800712c:	40b0      	lsls	r0, r6
 800712e:	4328      	orrs	r0, r5
	      GPIOx->MODER = temp;
 8007130:	6008      	str	r0, [r1, #0]
	      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8007132:	6850      	ldr	r0, [r2, #4]
 8007134:	f010 5f80 	tst.w	r0, #268435456	; 0x10000000
 8007138:	d0aa      	beq.n	8007090 <_ZN4gpio18gpio_register_initEP12GPIO_TypeDefP16GPIO_InitTypeDef+0x7c>
	        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800713a:	482d      	ldr	r0, [pc, #180]	; (80071f0 <_ZN4gpio18gpio_register_initEP12GPIO_TypeDefP16GPIO_InitTypeDef+0x1dc>)
 800713c:	f8d0 50f4 	ldr.w	r5, [r0, #244]	; 0xf4
 8007140:	f045 0502 	orr.w	r5, r5, #2
 8007144:	f8c0 50f4 	str.w	r5, [r0, #244]	; 0xf4
 8007148:	f8d0 00f4 	ldr.w	r0, [r0, #244]	; 0xf4
 800714c:	f000 0002 	and.w	r0, r0, #2
 8007150:	9001      	str	r0, [sp, #4]
 8007152:	9801      	ldr	r0, [sp, #4]
	        temp = SYSCFG->EXTICR[position >> 2U];
 8007154:	089d      	lsrs	r5, r3, #2
 8007156:	1cae      	adds	r6, r5, #2
 8007158:	4823      	ldr	r0, [pc, #140]	; (80071e8 <_ZN4gpio18gpio_register_initEP12GPIO_TypeDefP16GPIO_InitTypeDef+0x1d4>)
 800715a:	f850 7026 	ldr.w	r7, [r0, r6, lsl #2]
	        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800715e:	f003 0003 	and.w	r0, r3, #3
 8007162:	0086      	lsls	r6, r0, #2
 8007164:	200f      	movs	r0, #15
 8007166:	40b0      	lsls	r0, r6
 8007168:	ea27 0700 	bic.w	r7, r7, r0
	        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800716c:	4821      	ldr	r0, [pc, #132]	; (80071f4 <_ZN4gpio18gpio_register_initEP12GPIO_TypeDefP16GPIO_InitTypeDef+0x1e0>)
 800716e:	4281      	cmp	r1, r0
 8007170:	f43f af56 	beq.w	8007020 <_ZN4gpio18gpio_register_initEP12GPIO_TypeDefP16GPIO_InitTypeDef+0xc>
 8007174:	f500 6080 	add.w	r0, r0, #1024	; 0x400
 8007178:	4281      	cmp	r1, r0
 800717a:	d022      	beq.n	80071c2 <_ZN4gpio18gpio_register_initEP12GPIO_TypeDefP16GPIO_InitTypeDef+0x1ae>
 800717c:	f500 6080 	add.w	r0, r0, #1024	; 0x400
 8007180:	4281      	cmp	r1, r0
 8007182:	d020      	beq.n	80071c6 <_ZN4gpio18gpio_register_initEP12GPIO_TypeDefP16GPIO_InitTypeDef+0x1b2>
 8007184:	f500 6080 	add.w	r0, r0, #1024	; 0x400
 8007188:	4281      	cmp	r1, r0
 800718a:	d01e      	beq.n	80071ca <_ZN4gpio18gpio_register_initEP12GPIO_TypeDefP16GPIO_InitTypeDef+0x1b6>
 800718c:	f500 6080 	add.w	r0, r0, #1024	; 0x400
 8007190:	4281      	cmp	r1, r0
 8007192:	d01c      	beq.n	80071ce <_ZN4gpio18gpio_register_initEP12GPIO_TypeDefP16GPIO_InitTypeDef+0x1ba>
 8007194:	f500 6080 	add.w	r0, r0, #1024	; 0x400
 8007198:	4281      	cmp	r1, r0
 800719a:	d01a      	beq.n	80071d2 <_ZN4gpio18gpio_register_initEP12GPIO_TypeDefP16GPIO_InitTypeDef+0x1be>
 800719c:	f500 6080 	add.w	r0, r0, #1024	; 0x400
 80071a0:	4281      	cmp	r1, r0
 80071a2:	d018      	beq.n	80071d6 <_ZN4gpio18gpio_register_initEP12GPIO_TypeDefP16GPIO_InitTypeDef+0x1c2>
 80071a4:	f500 6080 	add.w	r0, r0, #1024	; 0x400
 80071a8:	4281      	cmp	r1, r0
 80071aa:	d016      	beq.n	80071da <_ZN4gpio18gpio_register_initEP12GPIO_TypeDefP16GPIO_InitTypeDef+0x1c6>
 80071ac:	f500 6080 	add.w	r0, r0, #1024	; 0x400
 80071b0:	4281      	cmp	r1, r0
 80071b2:	d014      	beq.n	80071de <_ZN4gpio18gpio_register_initEP12GPIO_TypeDefP16GPIO_InitTypeDef+0x1ca>
 80071b4:	f500 6080 	add.w	r0, r0, #1024	; 0x400
 80071b8:	4281      	cmp	r1, r0
 80071ba:	f43f af2f 	beq.w	800701c <_ZN4gpio18gpio_register_initEP12GPIO_TypeDefP16GPIO_InitTypeDef+0x8>
 80071be:	200a      	movs	r0, #10
 80071c0:	e72f      	b.n	8007022 <_ZN4gpio18gpio_register_initEP12GPIO_TypeDefP16GPIO_InitTypeDef+0xe>
 80071c2:	2001      	movs	r0, #1
 80071c4:	e72d      	b.n	8007022 <_ZN4gpio18gpio_register_initEP12GPIO_TypeDefP16GPIO_InitTypeDef+0xe>
 80071c6:	2002      	movs	r0, #2
 80071c8:	e72b      	b.n	8007022 <_ZN4gpio18gpio_register_initEP12GPIO_TypeDefP16GPIO_InitTypeDef+0xe>
 80071ca:	2003      	movs	r0, #3
 80071cc:	e729      	b.n	8007022 <_ZN4gpio18gpio_register_initEP12GPIO_TypeDefP16GPIO_InitTypeDef+0xe>
 80071ce:	2004      	movs	r0, #4
 80071d0:	e727      	b.n	8007022 <_ZN4gpio18gpio_register_initEP12GPIO_TypeDefP16GPIO_InitTypeDef+0xe>
 80071d2:	2005      	movs	r0, #5
 80071d4:	e725      	b.n	8007022 <_ZN4gpio18gpio_register_initEP12GPIO_TypeDefP16GPIO_InitTypeDef+0xe>
 80071d6:	2006      	movs	r0, #6
 80071d8:	e723      	b.n	8007022 <_ZN4gpio18gpio_register_initEP12GPIO_TypeDefP16GPIO_InitTypeDef+0xe>
 80071da:	2007      	movs	r0, #7
 80071dc:	e721      	b.n	8007022 <_ZN4gpio18gpio_register_initEP12GPIO_TypeDefP16GPIO_InitTypeDef+0xe>
 80071de:	2008      	movs	r0, #8
 80071e0:	e71f      	b.n	8007022 <_ZN4gpio18gpio_register_initEP12GPIO_TypeDefP16GPIO_InitTypeDef+0xe>
	  }
}
 80071e2:	b003      	add	sp, #12
 80071e4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80071e6:	bf00      	nop
 80071e8:	58000400 	.word	0x58000400
 80071ec:	58000080 	.word	0x58000080
 80071f0:	58024400 	.word	0x58024400
 80071f4:	58020000 	.word	0x58020000

080071f8 <_ZN4gpio13GPIO_WritePinEP12GPIO_TypeDeft13GPIO_PinState>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80071f8:	b10b      	cbz	r3, 80071fe <_ZN4gpio13GPIO_WritePinEP12GPIO_TypeDeft13GPIO_PinState+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
 80071fa:	618a      	str	r2, [r1, #24]
 80071fc:	4770      	bx	lr
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 80071fe:	0412      	lsls	r2, r2, #16
 8007200:	618a      	str	r2, [r1, #24]
  }
}
 8007202:	4770      	bx	lr

08007204 <_ZN4gpio9gpio_initEv>:
{
 8007204:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007208:	b08a      	sub	sp, #40	; 0x28
 800720a:	4605      	mov	r5, r0
	  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800720c:	2400      	movs	r4, #0
 800720e:	9405      	str	r4, [sp, #20]
 8007210:	9406      	str	r4, [sp, #24]
 8007212:	9407      	str	r4, [sp, #28]
 8007214:	9408      	str	r4, [sp, #32]
 8007216:	9409      	str	r4, [sp, #36]	; 0x24
	  __HAL_RCC_GPIOC_CLK_ENABLE();
 8007218:	4b2b      	ldr	r3, [pc, #172]	; (80072c8 <_ZN4gpio9gpio_initEv+0xc4>)
 800721a:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 800721e:	f042 0204 	orr.w	r2, r2, #4
 8007222:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8007226:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 800722a:	f002 0204 	and.w	r2, r2, #4
 800722e:	9201      	str	r2, [sp, #4]
 8007230:	9a01      	ldr	r2, [sp, #4]
	  __HAL_RCC_GPIOH_CLK_ENABLE();
 8007232:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8007236:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800723a:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 800723e:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8007242:	f002 0280 	and.w	r2, r2, #128	; 0x80
 8007246:	9202      	str	r2, [sp, #8]
 8007248:	9a02      	ldr	r2, [sp, #8]
	  __HAL_RCC_GPIOA_CLK_ENABLE();
 800724a:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 800724e:	f042 0201 	orr.w	r2, r2, #1
 8007252:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8007256:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 800725a:	f002 0201 	and.w	r2, r2, #1
 800725e:	9203      	str	r2, [sp, #12]
 8007260:	9a03      	ldr	r2, [sp, #12]
	  __HAL_RCC_GPIOB_CLK_ENABLE();
 8007262:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8007266:	f042 0202 	orr.w	r2, r2, #2
 800726a:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 800726e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8007272:	f003 0302 	and.w	r3, r3, #2
 8007276:	9304      	str	r3, [sp, #16]
 8007278:	9b04      	ldr	r3, [sp, #16]
	  GPIO_WritePin(GPIOA, FD1_STBM_Pin|FD2_STBM_Pin, GPIO_PIN_RESET);
 800727a:	f8df 8054 	ldr.w	r8, [pc, #84]	; 80072d0 <_ZN4gpio9gpio_initEv+0xcc>
 800727e:	4623      	mov	r3, r4
 8007280:	2218      	movs	r2, #24
 8007282:	4641      	mov	r1, r8
 8007284:	f7ff ffb8 	bl	80071f8 <_ZN4gpio13GPIO_WritePinEP12GPIO_TypeDeft13GPIO_PinState>
	  GPIO_WritePin(GPIOB, GPIO_PIN_0|GPIO_PIN_1, GPIO_PIN_RESET);
 8007288:	4e10      	ldr	r6, [pc, #64]	; (80072cc <_ZN4gpio9gpio_initEv+0xc8>)
 800728a:	4623      	mov	r3, r4
 800728c:	2203      	movs	r2, #3
 800728e:	4631      	mov	r1, r6
 8007290:	4628      	mov	r0, r5
 8007292:	f7ff ffb1 	bl	80071f8 <_ZN4gpio13GPIO_WritePinEP12GPIO_TypeDeft13GPIO_PinState>
	  GPIO_InitStruct.Pin = FD1_STBM_Pin|FD2_STBM_Pin;
 8007296:	2318      	movs	r3, #24
 8007298:	9305      	str	r3, [sp, #20]
	  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800729a:	2701      	movs	r7, #1
 800729c:	9706      	str	r7, [sp, #24]
	  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800729e:	9407      	str	r4, [sp, #28]
	  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80072a0:	9408      	str	r4, [sp, #32]
	  gpio_register_init(GPIOA, &GPIO_InitStruct);
 80072a2:	aa05      	add	r2, sp, #20
 80072a4:	4641      	mov	r1, r8
 80072a6:	4628      	mov	r0, r5
 80072a8:	f7ff feb4 	bl	8007014 <_ZN4gpio18gpio_register_initEP12GPIO_TypeDefP16GPIO_InitTypeDef>
	  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80072ac:	2303      	movs	r3, #3
 80072ae:	9305      	str	r3, [sp, #20]
	  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80072b0:	9706      	str	r7, [sp, #24]
	  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80072b2:	9407      	str	r4, [sp, #28]
	  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80072b4:	9408      	str	r4, [sp, #32]
	  gpio_register_init(GPIOB, &GPIO_InitStruct);
 80072b6:	aa05      	add	r2, sp, #20
 80072b8:	4631      	mov	r1, r6
 80072ba:	4628      	mov	r0, r5
 80072bc:	f7ff feaa 	bl	8007014 <_ZN4gpio18gpio_register_initEP12GPIO_TypeDefP16GPIO_InitTypeDef>
}
 80072c0:	b00a      	add	sp, #40	; 0x28
 80072c2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80072c6:	bf00      	nop
 80072c8:	58024400 	.word	0x58024400
 80072cc:	58020400 	.word	0x58020400
 80072d0:	58020000 	.word	0x58020000

080072d4 <_ZN11BusAnalizer13Error_HandlerEv>:
  */
void BusAnalizer::Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
	if (ui8ErrorTransmisionCAN1 == 1)
 80072d4:	f890 20c8 	ldrb.w	r2, [r0, #200]	; 0xc8
 80072d8:	2a01      	cmp	r2, #1
 80072da:	d000      	beq.n	80072de <_ZN11BusAnalizer13Error_HandlerEv+0xa>
	{
		ui32CounterTransmisionErrorCAN1++;
	}
	else
	{
      while(1);
 80072dc:	e7fe      	b.n	80072dc <_ZN11BusAnalizer13Error_HandlerEv+0x8>
		ui32CounterTransmisionErrorCAN1++;
 80072de:	f8d0 20c4 	ldr.w	r2, [r0, #196]	; 0xc4
 80072e2:	3201      	adds	r2, #1
 80072e4:	f8c0 20c4 	str.w	r2, [r0, #196]	; 0xc4
	}
  /* USER CODE END Error_Handler_Debug */
}
 80072e8:	4770      	bx	lr
	...

080072ec <_ZN11BusAnalizer3RunEv>:
{
 80072ec:	b538      	push	{r3, r4, r5, lr}
 80072ee:	4604      	mov	r4, r0
	if(ui16MessageTriggerFlag == 1)
 80072f0:	f890 30c9 	ldrb.w	r3, [r0, #201]	; 0xc9
 80072f4:	b3ab      	cbz	r3, 8007362 <_ZN11BusAnalizer3RunEv+0x76>
		ui16MessageTriggerFlag = 0;
 80072f6:	2300      	movs	r3, #0
 80072f8:	f880 30c9 	strb.w	r3, [r0, #201]	; 0xc9
		FixedTxHeader.Identifier = 0x321;
 80072fc:	f240 3221 	movw	r2, #801	; 0x321
 8007300:	f8c0 209c 	str.w	r2, [r0, #156]	; 0x9c
		FixedTxHeader.IdType = FDCAN_STANDARD_ID;
 8007304:	f8c0 30a0 	str.w	r3, [r0, #160]	; 0xa0
		FixedTxHeader.TxFrameType = FDCAN_DATA_FRAME;
 8007308:	f8c0 30a4 	str.w	r3, [r0, #164]	; 0xa4
		FixedTxHeader.DataLength = FDCAN_DLC_BYTES_3;
 800730c:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8007310:	f8c0 20a8 	str.w	r2, [r0, #168]	; 0xa8
		FixedTxHeader.ErrorStateIndicator = FDCAN_ESI_ACTIVE;
 8007314:	f8c0 30ac 	str.w	r3, [r0, #172]	; 0xac
		FixedTxHeader.BitRateSwitch = FDCAN_BRS_OFF;
 8007318:	f8c0 30b0 	str.w	r3, [r0, #176]	; 0xb0
		FixedTxHeader.FDFormat = FDCAN_CLASSIC_CAN;
 800731c:	f8c0 30b4 	str.w	r3, [r0, #180]	; 0xb4
		FixedTxHeader.TxEventFifoControl = FDCAN_NO_TX_EVENTS;
 8007320:	f8c0 30b8 	str.w	r3, [r0, #184]	; 0xb8
		FixedTxHeader.MessageMarker = 0;
 8007324:	f8c0 30bc 	str.w	r3, [r0, #188]	; 0xbc
		FixedTxData[0] = 0xBC;
 8007328:	23bc      	movs	r3, #188	; 0xbc
 800732a:	f880 3030 	strb.w	r3, [r0, #48]	; 0x30
		FixedTxData[1] = 0xAD;
 800732e:	23ad      	movs	r3, #173	; 0xad
 8007330:	f880 3031 	strb.w	r3, [r0, #49]	; 0x31
		FixedTxData[2] ++;
 8007334:	f890 3032 	ldrb.w	r3, [r0, #50]	; 0x32
 8007338:	3301      	adds	r3, #1
 800733a:	f880 3032 	strb.w	r3, [r0, #50]	; 0x32
		while (HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan1, &FixedTxHeader, FixedTxData) != HAL_OK)
 800733e:	f104 0230 	add.w	r2, r4, #48	; 0x30
 8007342:	f104 019c 	add.w	r1, r4, #156	; 0x9c
 8007346:	4829      	ldr	r0, [pc, #164]	; (80073ec <_ZN11BusAnalizer3RunEv+0x100>)
 8007348:	f7fa f8b1 	bl	80014ae <HAL_FDCAN_AddMessageToTxFifoQ>
 800734c:	b148      	cbz	r0, 8007362 <_ZN11BusAnalizer3RunEv+0x76>
		  ui8ErrorTransmisionCAN1 =1;
 800734e:	2301      	movs	r3, #1
 8007350:	f884 30c8 	strb.w	r3, [r4, #200]	; 0xc8
		  Error_Handler();
 8007354:	4620      	mov	r0, r4
 8007356:	f7ff ffbd 	bl	80072d4 <_ZN11BusAnalizer13Error_HandlerEv>
		  ui8ErrorTransmisionCAN1 =0;
 800735a:	2300      	movs	r3, #0
 800735c:	f884 30c8 	strb.w	r3, [r4, #200]	; 0xc8
		while (HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan1, &FixedTxHeader, FixedTxData) != HAL_OK)
 8007360:	e7ed      	b.n	800733e <_ZN11BusAnalizer3RunEv+0x52>
	if (ui8SetRequestToUsbCAN1==true)
 8007362:	f894 30d4 	ldrb.w	r3, [r4, #212]	; 0xd4
 8007366:	2b00      	cmp	r3, #0
 8007368:	d03f      	beq.n	80073ea <_ZN11BusAnalizer3RunEv+0xfe>
		memcpy(&sText[0],&RxHeader.Identifier,sizeof(RxHeader.Identifier));
 800736a:	6823      	ldr	r3, [r4, #0]
 800736c:	63a3      	str	r3, [r4, #56]	; 0x38
		lui16Lengthpdu = ((uint32_t)RxHeader.DataLength & 0xFFFF0000) >> 16;
 800736e:	89e0      	ldrh	r0, [r4, #14]
		memcpy(&sText[ui8IndexOffset],&lui16Lengthpdu,sizeof(lui16Lengthpdu));
 8007370:	87a0      	strh	r0, [r4, #60]	; 0x3c
		memcpy(&sText[ui8IndexOffset],&ui32TimerValue,sizeof(ui32TimerValue));
 8007372:	f8d4 30cc 	ldr.w	r3, [r4, #204]	; 0xcc
 8007376:	f8c4 303e 	str.w	r3, [r4, #62]	; 0x3e
		for (uint8_t ui8Index=0;ui8Index<lui16Lengthpdu;ui8Index++)
 800737a:	2300      	movs	r3, #0
 800737c:	4283      	cmp	r3, r0
 800737e:	da0a      	bge.n	8007396 <_ZN11BusAnalizer3RunEv+0xaa>
			sText[ui8Index +ui8IndexOffset] = RxData[ui8Index];
 8007380:	f103 020a 	add.w	r2, r3, #10
 8007384:	18e1      	adds	r1, r4, r3
 8007386:	f891 1028 	ldrb.w	r1, [r1, #40]	; 0x28
 800738a:	4422      	add	r2, r4
 800738c:	f882 1038 	strb.w	r1, [r2, #56]	; 0x38
		for (uint8_t ui8Index=0;ui8Index<lui16Lengthpdu;ui8Index++)
 8007390:	3301      	adds	r3, #1
 8007392:	b2db      	uxtb	r3, r3
 8007394:	e7f2      	b.n	800737c <_ZN11BusAnalizer3RunEv+0x90>
		uint32_t lui32DeltameasureTransmit = __HAL_TIM_GET_COUNTER(&htim2);
 8007396:	4b15      	ldr	r3, [pc, #84]	; (80073ec <_ZN11BusAnalizer3RunEv+0x100>)
 8007398:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800739c:	6a5d      	ldr	r5, [r3, #36]	; 0x24
 800739e:	e000      	b.n	80073a2 <_ZN11BusAnalizer3RunEv+0xb6>
		}while (ui8ErrorUSB != USBD_OK);
 80073a0:	b173      	cbz	r3, 80073c0 <_ZN11BusAnalizer3RunEv+0xd4>
		  ui8ErrorUSB = CDC_Transmit_HS(static_cast<unsigned char *>(sText),2048);
 80073a2:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80073a6:	f104 0038 	add.w	r0, r4, #56	; 0x38
 80073aa:	f000 fe71 	bl	8008090 <CDC_Transmit_HS>
		  if (ui8ErrorUSB != USBD_OK) ui32USBerrors++;
 80073ae:	4603      	mov	r3, r0
 80073b0:	2800      	cmp	r0, #0
 80073b2:	d0f5      	beq.n	80073a0 <_ZN11BusAnalizer3RunEv+0xb4>
 80073b4:	f8d4 20d0 	ldr.w	r2, [r4, #208]	; 0xd0
 80073b8:	3201      	adds	r2, #1
 80073ba:	f8c4 20d0 	str.w	r2, [r4, #208]	; 0xd0
 80073be:	e7ef      	b.n	80073a0 <_ZN11BusAnalizer3RunEv+0xb4>
		ui32DeltameasureTransmit = __HAL_TIM_GET_COUNTER(&htim2) -lui32DeltameasureTransmit;
 80073c0:	4b0a      	ldr	r3, [pc, #40]	; (80073ec <_ZN11BusAnalizer3RunEv+0x100>)
 80073c2:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80073c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80073c8:	1b5b      	subs	r3, r3, r5
 80073ca:	f8c4 30d8 	str.w	r3, [r4, #216]	; 0xd8
		if (ui32DeltameasureTransmit>ui32DeltameasureTransmitMax)
 80073ce:	f8d4 20dc 	ldr.w	r2, [r4, #220]	; 0xdc
 80073d2:	4293      	cmp	r3, r2
 80073d4:	d901      	bls.n	80073da <_ZN11BusAnalizer3RunEv+0xee>
			ui32DeltameasureTransmitMax = ui32DeltameasureTransmit;
 80073d6:	f8c4 30dc 	str.w	r3, [r4, #220]	; 0xdc
		GPIOB->ODR ^=0x1;
 80073da:	4a05      	ldr	r2, [pc, #20]	; (80073f0 <_ZN11BusAnalizer3RunEv+0x104>)
 80073dc:	6953      	ldr	r3, [r2, #20]
 80073de:	f083 0301 	eor.w	r3, r3, #1
 80073e2:	6153      	str	r3, [r2, #20]
		ui8SetRequestToUsbCAN1 =false;
 80073e4:	2300      	movs	r3, #0
 80073e6:	f884 30d4 	strb.w	r3, [r4, #212]	; 0xd4
}
 80073ea:	bd38      	pop	{r3, r4, r5, pc}
 80073ec:	20000208 	.word	0x20000208
 80073f0:	58020400 	.word	0x58020400

080073f4 <_ZN11BusAnalizer18SystemClock_ConfigEv>:
{
 80073f4:	b510      	push	{r4, lr}
 80073f6:	b0cc      	sub	sp, #304	; 0x130
 80073f8:	4604      	mov	r4, r0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80073fa:	224c      	movs	r2, #76	; 0x4c
 80073fc:	2100      	movs	r1, #0
 80073fe:	a839      	add	r0, sp, #228	; 0xe4
 8007400:	f001 f8bc 	bl	800857c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8007404:	2220      	movs	r2, #32
 8007406:	2100      	movs	r1, #0
 8007408:	a831      	add	r0, sp, #196	; 0xc4
 800740a:	f001 f8b7 	bl	800857c <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800740e:	22bc      	movs	r2, #188	; 0xbc
 8007410:	2100      	movs	r1, #0
 8007412:	a802      	add	r0, sp, #8
 8007414:	f001 f8b2 	bl	800857c <memset>
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8007418:	2002      	movs	r0, #2
 800741a:	f7fb faef 	bl	80029fc <HAL_PWREx_ConfigSupply>
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 800741e:	2300      	movs	r3, #0
 8007420:	9301      	str	r3, [sp, #4]
 8007422:	4b35      	ldr	r3, [pc, #212]	; (80074f8 <_ZN11BusAnalizer18SystemClock_ConfigEv+0x104>)
 8007424:	699a      	ldr	r2, [r3, #24]
 8007426:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 800742a:	619a      	str	r2, [r3, #24]
 800742c:	699b      	ldr	r3, [r3, #24]
 800742e:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8007432:	9301      	str	r3, [sp, #4]
 8007434:	4b31      	ldr	r3, [pc, #196]	; (80074fc <_ZN11BusAnalizer18SystemClock_ConfigEv+0x108>)
 8007436:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007438:	f042 0201 	orr.w	r2, r2, #1
 800743c:	62da      	str	r2, [r3, #44]	; 0x2c
 800743e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007440:	f003 0301 	and.w	r3, r3, #1
 8007444:	9301      	str	r3, [sp, #4]
 8007446:	9b01      	ldr	r3, [sp, #4]
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8007448:	4b2b      	ldr	r3, [pc, #172]	; (80074f8 <_ZN11BusAnalizer18SystemClock_ConfigEv+0x104>)
 800744a:	699b      	ldr	r3, [r3, #24]
 800744c:	f413 5f00 	tst.w	r3, #8192	; 0x2000
 8007450:	d0fa      	beq.n	8007448 <_ZN11BusAnalizer18SystemClock_ConfigEv+0x54>
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 8007452:	2309      	movs	r3, #9
 8007454:	9339      	str	r3, [sp, #228]	; 0xe4
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8007456:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800745a:	933a      	str	r3, [sp, #232]	; 0xe8
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 800745c:	2201      	movs	r2, #1
 800745e:	923e      	str	r2, [sp, #248]	; 0xf8
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8007460:	2302      	movs	r3, #2
 8007462:	9342      	str	r3, [sp, #264]	; 0x108
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8007464:	9343      	str	r3, [sp, #268]	; 0x10c
  RCC_OscInitStruct.PLL.PLLM = 1;
 8007466:	9244      	str	r2, [sp, #272]	; 0x110
  RCC_OscInitStruct.PLL.PLLN = 120;
 8007468:	2278      	movs	r2, #120	; 0x78
 800746a:	9245      	str	r2, [sp, #276]	; 0x114
  RCC_OscInitStruct.PLL.PLLP = 2;
 800746c:	9346      	str	r3, [sp, #280]	; 0x118
  RCC_OscInitStruct.PLL.PLLQ = 20;
 800746e:	2214      	movs	r2, #20
 8007470:	9247      	str	r2, [sp, #284]	; 0x11c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8007472:	9348      	str	r3, [sp, #288]	; 0x120
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8007474:	230c      	movs	r3, #12
 8007476:	9349      	str	r3, [sp, #292]	; 0x124
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8007478:	2300      	movs	r3, #0
 800747a:	934a      	str	r3, [sp, #296]	; 0x128
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 800747c:	934b      	str	r3, [sp, #300]	; 0x12c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800747e:	a839      	add	r0, sp, #228	; 0xe4
 8007480:	f7fb faee 	bl	8002a60 <HAL_RCC_OscConfig>
 8007484:	bb58      	cbnz	r0, 80074de <_ZN11BusAnalizer18SystemClock_ConfigEv+0xea>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8007486:	233f      	movs	r3, #63	; 0x3f
 8007488:	9331      	str	r3, [sp, #196]	; 0xc4
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800748a:	2303      	movs	r3, #3
 800748c:	9332      	str	r3, [sp, #200]	; 0xc8
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 800748e:	2300      	movs	r3, #0
 8007490:	9333      	str	r3, [sp, #204]	; 0xcc
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8007492:	2308      	movs	r3, #8
 8007494:	9334      	str	r3, [sp, #208]	; 0xd0
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8007496:	2340      	movs	r3, #64	; 0x40
 8007498:	9335      	str	r3, [sp, #212]	; 0xd4
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV16;
 800749a:	2270      	movs	r2, #112	; 0x70
 800749c:	9236      	str	r2, [sp, #216]	; 0xd8
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 800749e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80074a2:	9237      	str	r2, [sp, #220]	; 0xdc
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 80074a4:	9338      	str	r3, [sp, #224]	; 0xe0
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80074a6:	2104      	movs	r1, #4
 80074a8:	a831      	add	r0, sp, #196	; 0xc4
 80074aa:	f7fb fef9 	bl	80032a0 <HAL_RCC_ClockConfig>
 80074ae:	b9d0      	cbnz	r0, 80074e6 <_ZN11BusAnalizer18SystemClock_ConfigEv+0xf2>
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC|RCC_PERIPHCLK_FDCAN
 80074b0:	4b13      	ldr	r3, [pc, #76]	; (8007500 <_ZN11BusAnalizer18SystemClock_ConfigEv+0x10c>)
 80074b2:	9302      	str	r3, [sp, #8]
  PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 80074b4:	2300      	movs	r3, #0
 80074b6:	9319      	str	r3, [sp, #100]	; 0x64
  PeriphClkInitStruct.FdcanClockSelection = RCC_FDCANCLKSOURCE_PLL;
 80074b8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80074bc:	921d      	str	r2, [sp, #116]	; 0x74
  PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16CLKSOURCE_D2PCLK2;
 80074be:	9320      	str	r3, [sp, #128]	; 0x80
  PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C123CLKSOURCE_D2PCLK1;
 80074c0:	9322      	str	r3, [sp, #136]	; 0x88
  PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_PLL;
 80074c2:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80074c6:	9323      	str	r3, [sp, #140]	; 0x8c
  PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 80074c8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80074cc:	932e      	str	r3, [sp, #184]	; 0xb8
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80074ce:	a802      	add	r0, sp, #8
 80074d0:	f7fc f9ac 	bl	800382c <HAL_RCCEx_PeriphCLKConfig>
 80074d4:	b958      	cbnz	r0, 80074ee <_ZN11BusAnalizer18SystemClock_ConfigEv+0xfa>
  HAL_PWREx_EnableUSBVoltageDetector();
 80074d6:	f7fb fabb 	bl	8002a50 <HAL_PWREx_EnableUSBVoltageDetector>
}
 80074da:	b04c      	add	sp, #304	; 0x130
 80074dc:	bd10      	pop	{r4, pc}
    Error_Handler();
 80074de:	4620      	mov	r0, r4
 80074e0:	f7ff fef8 	bl	80072d4 <_ZN11BusAnalizer13Error_HandlerEv>
 80074e4:	e7cf      	b.n	8007486 <_ZN11BusAnalizer18SystemClock_ConfigEv+0x92>
    Error_Handler();
 80074e6:	4620      	mov	r0, r4
 80074e8:	f7ff fef4 	bl	80072d4 <_ZN11BusAnalizer13Error_HandlerEv>
 80074ec:	e7e0      	b.n	80074b0 <_ZN11BusAnalizer18SystemClock_ConfigEv+0xbc>
    Error_Handler();
 80074ee:	4620      	mov	r0, r4
 80074f0:	f7ff fef0 	bl	80072d4 <_ZN11BusAnalizer13Error_HandlerEv>
 80074f4:	e7ef      	b.n	80074d6 <_ZN11BusAnalizer18SystemClock_ConfigEv+0xe2>
 80074f6:	bf00      	nop
 80074f8:	58024800 	.word	0x58024800
 80074fc:	58000400 	.word	0x58000400
 8007500:	00449009 	.word	0x00449009

08007504 <_ZN11BusAnalizer14MX_FDCAN1_InitEv>:
{
 8007504:	b570      	push	{r4, r5, r6, lr}
 8007506:	b08a      	sub	sp, #40	; 0x28
 8007508:	4604      	mov	r4, r0
  hfdcan1.Instance = FDCAN1;
 800750a:	482e      	ldr	r0, [pc, #184]	; (80075c4 <_ZN11BusAnalizer14MX_FDCAN1_InitEv+0xc0>)
 800750c:	4b2e      	ldr	r3, [pc, #184]	; (80075c8 <_ZN11BusAnalizer14MX_FDCAN1_InitEv+0xc4>)
 800750e:	6003      	str	r3, [r0, #0]
  hfdcan1.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 8007510:	2300      	movs	r3, #0
 8007512:	6083      	str	r3, [r0, #8]
  hfdcan1.Init.Mode = FDCAN_MODE_EXTERNAL_LOOPBACK;
 8007514:	2204      	movs	r2, #4
 8007516:	60c2      	str	r2, [r0, #12]
  hfdcan1.Init.AutoRetransmission = ENABLE;
 8007518:	2101      	movs	r1, #1
 800751a:	7401      	strb	r1, [r0, #16]
  hfdcan1.Init.TransmitPause = DISABLE;
 800751c:	7443      	strb	r3, [r0, #17]
  hfdcan1.Init.ProtocolException = ENABLE;
 800751e:	7481      	strb	r1, [r0, #18]
  hfdcan1.Init.NominalPrescaler = 2;
 8007520:	2602      	movs	r6, #2
 8007522:	6146      	str	r6, [r0, #20]
  hfdcan1.Init.NominalSyncJumpWidth = 1;
 8007524:	6181      	str	r1, [r0, #24]
  hfdcan1.Init.NominalTimeSeg1 = 4;
 8007526:	61c2      	str	r2, [r0, #28]
  hfdcan1.Init.NominalTimeSeg2 = 3;
 8007528:	2503      	movs	r5, #3
 800752a:	6205      	str	r5, [r0, #32]
  hfdcan1.Init.DataPrescaler = 2;
 800752c:	6246      	str	r6, [r0, #36]	; 0x24
  hfdcan1.Init.DataSyncJumpWidth = 1;
 800752e:	6281      	str	r1, [r0, #40]	; 0x28
  hfdcan1.Init.DataTimeSeg1 = 4;
 8007530:	62c2      	str	r2, [r0, #44]	; 0x2c
  hfdcan1.Init.DataTimeSeg2 = 3;
 8007532:	6305      	str	r5, [r0, #48]	; 0x30
  hfdcan1.Init.MessageRAMOffset = 0;
 8007534:	6343      	str	r3, [r0, #52]	; 0x34
  hfdcan1.Init.StdFiltersNbr = 0;
 8007536:	6383      	str	r3, [r0, #56]	; 0x38
  hfdcan1.Init.ExtFiltersNbr = 0;
 8007538:	63c3      	str	r3, [r0, #60]	; 0x3c
  hfdcan1.Init.RxFifo0ElmtsNbr = 64;
 800753a:	2140      	movs	r1, #64	; 0x40
 800753c:	6401      	str	r1, [r0, #64]	; 0x40
  hfdcan1.Init.RxFifo0ElmtSize = FDCAN_DATA_BYTES_8;
 800753e:	6442      	str	r2, [r0, #68]	; 0x44
  hfdcan1.Init.RxFifo1ElmtsNbr = 64;
 8007540:	6481      	str	r1, [r0, #72]	; 0x48
  hfdcan1.Init.RxFifo1ElmtSize = FDCAN_DATA_BYTES_8;
 8007542:	64c2      	str	r2, [r0, #76]	; 0x4c
  hfdcan1.Init.RxBuffersNbr = 0;
 8007544:	6503      	str	r3, [r0, #80]	; 0x50
  hfdcan1.Init.RxBufferSize = FDCAN_DATA_BYTES_8;
 8007546:	6542      	str	r2, [r0, #84]	; 0x54
  hfdcan1.Init.TxEventsNbr = 0;
 8007548:	6583      	str	r3, [r0, #88]	; 0x58
  hfdcan1.Init.TxBuffersNbr = 0;
 800754a:	65c3      	str	r3, [r0, #92]	; 0x5c
  hfdcan1.Init.TxFifoQueueElmtsNbr = 32;
 800754c:	2120      	movs	r1, #32
 800754e:	6601      	str	r1, [r0, #96]	; 0x60
  hfdcan1.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 8007550:	6643      	str	r3, [r0, #100]	; 0x64
  hfdcan1.Init.TxElmtSize = FDCAN_DATA_BYTES_8;
 8007552:	6682      	str	r2, [r0, #104]	; 0x68
  if (HAL_FDCAN_Init(&hfdcan1) != HAL_OK)
 8007554:	f7f9 fde8 	bl	8001128 <HAL_FDCAN_Init>
 8007558:	bb18      	cbnz	r0, 80075a2 <_ZN11BusAnalizer14MX_FDCAN1_InitEv+0x9e>
    sFilterConfig.IdType = FDCAN_STANDARD_ID;
 800755a:	2300      	movs	r3, #0
 800755c:	9302      	str	r3, [sp, #8]
    sFilterConfig.FilterIndex = 0;
 800755e:	9303      	str	r3, [sp, #12]
    sFilterConfig.FilterType = FDCAN_FILTER_MASK;
 8007560:	2302      	movs	r3, #2
 8007562:	9304      	str	r3, [sp, #16]
    sFilterConfig.FilterConfig = FDCAN_FILTER_TO_RXFIFO0;
 8007564:	2301      	movs	r3, #1
 8007566:	9305      	str	r3, [sp, #20]
    sFilterConfig.FilterID1 = 0x7FF;
 8007568:	f240 73ff 	movw	r3, #2047	; 0x7ff
 800756c:	9306      	str	r3, [sp, #24]
    sFilterConfig.FilterID2 = 0x7FF;
 800756e:	9307      	str	r3, [sp, #28]
    if (HAL_FDCAN_ConfigFilter(&hfdcan1, &sFilterConfig) != HAL_OK)
 8007570:	a902      	add	r1, sp, #8
 8007572:	4814      	ldr	r0, [pc, #80]	; (80075c4 <_ZN11BusAnalizer14MX_FDCAN1_InitEv+0xc0>)
 8007574:	f7f9 ff22 	bl	80013bc <HAL_FDCAN_ConfigFilter>
 8007578:	b9b8      	cbnz	r0, 80075aa <_ZN11BusAnalizer14MX_FDCAN1_InitEv+0xa6>
    HAL_FDCAN_ConfigGlobalFilter(&hfdcan1, FDCAN_ACCEPT_IN_RX_FIFO0, FDCAN_ACCEPT_IN_RX_FIFO0, FDCAN_REJECT_REMOTE, FDCAN_REJECT_REMOTE);
 800757a:	4d12      	ldr	r5, [pc, #72]	; (80075c4 <_ZN11BusAnalizer14MX_FDCAN1_InitEv+0xc0>)
 800757c:	2301      	movs	r3, #1
 800757e:	9300      	str	r3, [sp, #0]
 8007580:	2200      	movs	r2, #0
 8007582:	4611      	mov	r1, r2
 8007584:	4628      	mov	r0, r5
 8007586:	f7f9 ff5c 	bl	8001442 <HAL_FDCAN_ConfigGlobalFilter>
	if (HAL_FDCAN_Start(&hfdcan1) != HAL_OK)
 800758a:	4628      	mov	r0, r5
 800758c:	f7f9 ff75 	bl	800147a <HAL_FDCAN_Start>
 8007590:	b978      	cbnz	r0, 80075b2 <_ZN11BusAnalizer14MX_FDCAN1_InitEv+0xae>
	if (HAL_FDCAN_ActivateNotification(&hfdcan1, FDCAN_IT_RX_FIFO0_NEW_MESSAGE, 0) != HAL_OK)
 8007592:	2200      	movs	r2, #0
 8007594:	2101      	movs	r1, #1
 8007596:	480b      	ldr	r0, [pc, #44]	; (80075c4 <_ZN11BusAnalizer14MX_FDCAN1_InitEv+0xc0>)
 8007598:	f7fa f8a8 	bl	80016ec <HAL_FDCAN_ActivateNotification>
 800759c:	b968      	cbnz	r0, 80075ba <_ZN11BusAnalizer14MX_FDCAN1_InitEv+0xb6>
}
 800759e:	b00a      	add	sp, #40	; 0x28
 80075a0:	bd70      	pop	{r4, r5, r6, pc}
    Error_Handler();
 80075a2:	4620      	mov	r0, r4
 80075a4:	f7ff fe96 	bl	80072d4 <_ZN11BusAnalizer13Error_HandlerEv>
 80075a8:	e7d7      	b.n	800755a <_ZN11BusAnalizer14MX_FDCAN1_InitEv+0x56>
      Error_Handler();
 80075aa:	4620      	mov	r0, r4
 80075ac:	f7ff fe92 	bl	80072d4 <_ZN11BusAnalizer13Error_HandlerEv>
 80075b0:	e7e3      	b.n	800757a <_ZN11BusAnalizer14MX_FDCAN1_InitEv+0x76>
	Error_Handler();
 80075b2:	4620      	mov	r0, r4
 80075b4:	f7ff fe8e 	bl	80072d4 <_ZN11BusAnalizer13Error_HandlerEv>
 80075b8:	e7eb      	b.n	8007592 <_ZN11BusAnalizer14MX_FDCAN1_InitEv+0x8e>
	Error_Handler();
 80075ba:	4620      	mov	r0, r4
 80075bc:	f7ff fe8a 	bl	80072d4 <_ZN11BusAnalizer13Error_HandlerEv>
}
 80075c0:	e7ed      	b.n	800759e <_ZN11BusAnalizer14MX_FDCAN1_InitEv+0x9a>
 80075c2:	bf00      	nop
 80075c4:	20000208 	.word	0x20000208
 80075c8:	4000a000 	.word	0x4000a000

080075cc <_ZN11BusAnalizer14MX_FDCAN2_InitEv>:
{
 80075cc:	b510      	push	{r4, lr}
 80075ce:	4604      	mov	r4, r0
  hfdcan2.Instance = FDCAN2;
 80075d0:	4b24      	ldr	r3, [pc, #144]	; (8007664 <_ZN11BusAnalizer14MX_FDCAN2_InitEv+0x98>)
 80075d2:	4a25      	ldr	r2, [pc, #148]	; (8007668 <_ZN11BusAnalizer14MX_FDCAN2_InitEv+0x9c>)
 80075d4:	f8c3 20ec 	str.w	r2, [r3, #236]	; 0xec
  hfdcan2.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 80075d8:	2200      	movs	r2, #0
 80075da:	f8c3 20f4 	str.w	r2, [r3, #244]	; 0xf4
  hfdcan2.Init.Mode = FDCAN_MODE_NORMAL;
 80075de:	f8c3 20f8 	str.w	r2, [r3, #248]	; 0xf8
  hfdcan2.Init.AutoRetransmission = DISABLE;
 80075e2:	f883 20fc 	strb.w	r2, [r3, #252]	; 0xfc
  hfdcan2.Init.TransmitPause = DISABLE;
 80075e6:	f883 20fd 	strb.w	r2, [r3, #253]	; 0xfd
  hfdcan2.Init.ProtocolException = DISABLE;
 80075ea:	f883 20fe 	strb.w	r2, [r3, #254]	; 0xfe
  hfdcan2.Init.NominalPrescaler = 1;
 80075ee:	2101      	movs	r1, #1
 80075f0:	f8c3 1100 	str.w	r1, [r3, #256]	; 0x100
  hfdcan2.Init.NominalSyncJumpWidth = 1;
 80075f4:	f8c3 1104 	str.w	r1, [r3, #260]	; 0x104
  hfdcan2.Init.NominalTimeSeg1 = 2;
 80075f8:	2002      	movs	r0, #2
 80075fa:	f8c3 0108 	str.w	r0, [r3, #264]	; 0x108
  hfdcan2.Init.NominalTimeSeg2 = 2;
 80075fe:	f8c3 010c 	str.w	r0, [r3, #268]	; 0x10c
  hfdcan2.Init.DataPrescaler = 1;
 8007602:	f8c3 1110 	str.w	r1, [r3, #272]	; 0x110
  hfdcan2.Init.DataSyncJumpWidth = 1;
 8007606:	f8c3 1114 	str.w	r1, [r3, #276]	; 0x114
  hfdcan2.Init.DataTimeSeg1 = 1;
 800760a:	f8c3 1118 	str.w	r1, [r3, #280]	; 0x118
  hfdcan2.Init.DataTimeSeg2 = 1;
 800760e:	f8c3 111c 	str.w	r1, [r3, #284]	; 0x11c
  hfdcan2.Init.MessageRAMOffset = 0;
 8007612:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
  hfdcan2.Init.StdFiltersNbr = 0;
 8007616:	f8c3 2124 	str.w	r2, [r3, #292]	; 0x124
  hfdcan2.Init.ExtFiltersNbr = 0;
 800761a:	f8c3 2128 	str.w	r2, [r3, #296]	; 0x128
  hfdcan2.Init.RxFifo0ElmtsNbr = 20;
 800761e:	2014      	movs	r0, #20
 8007620:	f8c3 012c 	str.w	r0, [r3, #300]	; 0x12c
  hfdcan2.Init.RxFifo0ElmtSize = FDCAN_DATA_BYTES_8;
 8007624:	2104      	movs	r1, #4
 8007626:	f8c3 1130 	str.w	r1, [r3, #304]	; 0x130
  hfdcan2.Init.RxFifo1ElmtsNbr = 20;
 800762a:	f8c3 0134 	str.w	r0, [r3, #308]	; 0x134
  hfdcan2.Init.RxFifo1ElmtSize = FDCAN_DATA_BYTES_8;
 800762e:	f8c3 1138 	str.w	r1, [r3, #312]	; 0x138
  hfdcan2.Init.RxBuffersNbr = 0;
 8007632:	f8c3 213c 	str.w	r2, [r3, #316]	; 0x13c
  hfdcan2.Init.RxBufferSize = FDCAN_DATA_BYTES_8;
 8007636:	f8c3 1140 	str.w	r1, [r3, #320]	; 0x140
  hfdcan2.Init.TxEventsNbr = 0;
 800763a:	f8c3 2144 	str.w	r2, [r3, #324]	; 0x144
  hfdcan2.Init.TxBuffersNbr = 0;
 800763e:	f8c3 2148 	str.w	r2, [r3, #328]	; 0x148
  hfdcan2.Init.TxFifoQueueElmtsNbr = 10;
 8007642:	200a      	movs	r0, #10
 8007644:	f8c3 014c 	str.w	r0, [r3, #332]	; 0x14c
  hfdcan2.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 8007648:	f8c3 2150 	str.w	r2, [r3, #336]	; 0x150
  hfdcan2.Init.TxElmtSize = FDCAN_DATA_BYTES_8;
 800764c:	f8c3 1154 	str.w	r1, [r3, #340]	; 0x154
  if (HAL_FDCAN_Init(&hfdcan2) != HAL_OK)
 8007650:	f103 00ec 	add.w	r0, r3, #236	; 0xec
 8007654:	f7f9 fd68 	bl	8001128 <HAL_FDCAN_Init>
 8007658:	b900      	cbnz	r0, 800765c <_ZN11BusAnalizer14MX_FDCAN2_InitEv+0x90>
}
 800765a:	bd10      	pop	{r4, pc}
    Error_Handler();
 800765c:	4620      	mov	r0, r4
 800765e:	f7ff fe39 	bl	80072d4 <_ZN11BusAnalizer13Error_HandlerEv>
}
 8007662:	e7fa      	b.n	800765a <_ZN11BusAnalizer14MX_FDCAN2_InitEv+0x8e>
 8007664:	20000208 	.word	0x20000208
 8007668:	4000a400 	.word	0x4000a400

0800766c <_ZN11BusAnalizer12MX_I2C1_InitEv>:
{
 800766c:	b510      	push	{r4, lr}
 800766e:	4604      	mov	r4, r0
  hi2c1.Instance = I2C1;
 8007670:	4819      	ldr	r0, [pc, #100]	; (80076d8 <_ZN11BusAnalizer12MX_I2C1_InitEv+0x6c>)
 8007672:	4a1a      	ldr	r2, [pc, #104]	; (80076dc <_ZN11BusAnalizer12MX_I2C1_InitEv+0x70>)
 8007674:	f8c0 218c 	str.w	r2, [r0, #396]	; 0x18c
  hi2c1.Init.Timing = 0x00303956;
 8007678:	4a19      	ldr	r2, [pc, #100]	; (80076e0 <_ZN11BusAnalizer12MX_I2C1_InitEv+0x74>)
 800767a:	f8c0 2190 	str.w	r2, [r0, #400]	; 0x190
  hi2c1.Init.OwnAddress1 = 0;
 800767e:	2200      	movs	r2, #0
 8007680:	f8c0 2194 	str.w	r2, [r0, #404]	; 0x194
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8007684:	2101      	movs	r1, #1
 8007686:	f8c0 1198 	str.w	r1, [r0, #408]	; 0x198
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800768a:	f8c0 219c 	str.w	r2, [r0, #412]	; 0x19c
  hi2c1.Init.OwnAddress2 = 0;
 800768e:	f8c0 21a0 	str.w	r2, [r0, #416]	; 0x1a0
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8007692:	f8c0 21a4 	str.w	r2, [r0, #420]	; 0x1a4
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8007696:	f8c0 21a8 	str.w	r2, [r0, #424]	; 0x1a8
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800769a:	f8c0 21ac 	str.w	r2, [r0, #428]	; 0x1ac
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800769e:	f500 70c6 	add.w	r0, r0, #396	; 0x18c
 80076a2:	f7fa fb03 	bl	8001cac <HAL_I2C_Init>
 80076a6:	b950      	cbnz	r0, 80076be <_ZN11BusAnalizer12MX_I2C1_InitEv+0x52>
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80076a8:	2100      	movs	r1, #0
 80076aa:	480e      	ldr	r0, [pc, #56]	; (80076e4 <_ZN11BusAnalizer12MX_I2C1_InitEv+0x78>)
 80076ac:	f7fa fb5c 	bl	8001d68 <HAL_I2CEx_ConfigAnalogFilter>
 80076b0:	b948      	cbnz	r0, 80076c6 <_ZN11BusAnalizer12MX_I2C1_InitEv+0x5a>
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80076b2:	2100      	movs	r1, #0
 80076b4:	480b      	ldr	r0, [pc, #44]	; (80076e4 <_ZN11BusAnalizer12MX_I2C1_InitEv+0x78>)
 80076b6:	f7fa fb85 	bl	8001dc4 <HAL_I2CEx_ConfigDigitalFilter>
 80076ba:	b940      	cbnz	r0, 80076ce <_ZN11BusAnalizer12MX_I2C1_InitEv+0x62>
}
 80076bc:	bd10      	pop	{r4, pc}
    Error_Handler();
 80076be:	4620      	mov	r0, r4
 80076c0:	f7ff fe08 	bl	80072d4 <_ZN11BusAnalizer13Error_HandlerEv>
 80076c4:	e7f0      	b.n	80076a8 <_ZN11BusAnalizer12MX_I2C1_InitEv+0x3c>
    Error_Handler();
 80076c6:	4620      	mov	r0, r4
 80076c8:	f7ff fe04 	bl	80072d4 <_ZN11BusAnalizer13Error_HandlerEv>
 80076cc:	e7f1      	b.n	80076b2 <_ZN11BusAnalizer12MX_I2C1_InitEv+0x46>
    Error_Handler();
 80076ce:	4620      	mov	r0, r4
 80076d0:	f7ff fe00 	bl	80072d4 <_ZN11BusAnalizer13Error_HandlerEv>
}
 80076d4:	e7f2      	b.n	80076bc <_ZN11BusAnalizer12MX_I2C1_InitEv+0x50>
 80076d6:	bf00      	nop
 80076d8:	20000208 	.word	0x20000208
 80076dc:	40005400 	.word	0x40005400
 80076e0:	00303956 	.word	0x00303956
 80076e4:	20000394 	.word	0x20000394

080076e8 <_ZN11BusAnalizer11MX_RTC_InitEv>:
{
 80076e8:	b510      	push	{r4, lr}
 80076ea:	b086      	sub	sp, #24
 80076ec:	4604      	mov	r4, r0
  RTC_TimeTypeDef sTime = {0};
 80076ee:	2300      	movs	r3, #0
 80076f0:	9301      	str	r3, [sp, #4]
 80076f2:	9302      	str	r3, [sp, #8]
 80076f4:	9303      	str	r3, [sp, #12]
 80076f6:	9304      	str	r3, [sp, #16]
 80076f8:	9305      	str	r3, [sp, #20]
  RTC_DateTypeDef sDate = {0};
 80076fa:	9300      	str	r3, [sp, #0]
  hrtc.Instance = RTC;
 80076fc:	4822      	ldr	r0, [pc, #136]	; (8007788 <_ZN11BusAnalizer11MX_RTC_InitEv+0xa0>)
 80076fe:	4923      	ldr	r1, [pc, #140]	; (800778c <_ZN11BusAnalizer11MX_RTC_InitEv+0xa4>)
 8007700:	f8c0 11d8 	str.w	r1, [r0, #472]	; 0x1d8
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8007704:	f8c0 31dc 	str.w	r3, [r0, #476]	; 0x1dc
  hrtc.Init.AsynchPrediv = 127;
 8007708:	217f      	movs	r1, #127	; 0x7f
 800770a:	f8c0 11e0 	str.w	r1, [r0, #480]	; 0x1e0
  hrtc.Init.SynchPrediv = 255;
 800770e:	21ff      	movs	r1, #255	; 0xff
 8007710:	f8c0 11e4 	str.w	r1, [r0, #484]	; 0x1e4
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8007714:	f8c0 31e8 	str.w	r3, [r0, #488]	; 0x1e8
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8007718:	f8c0 31f0 	str.w	r3, [r0, #496]	; 0x1f0
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 800771c:	f8c0 31f4 	str.w	r3, [r0, #500]	; 0x1f4
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8007720:	f8c0 31ec 	str.w	r3, [r0, #492]	; 0x1ec
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8007724:	f500 70ec 	add.w	r0, r0, #472	; 0x1d8
 8007728:	f7fc ffc4 	bl	80046b4 <HAL_RTC_Init>
 800772c:	b9f8      	cbnz	r0, 800776e <_ZN11BusAnalizer11MX_RTC_InitEv+0x86>
  sTime.Hours = 0x0;
 800772e:	2300      	movs	r3, #0
 8007730:	f88d 3004 	strb.w	r3, [sp, #4]
  sTime.Minutes = 0x0;
 8007734:	f88d 3005 	strb.w	r3, [sp, #5]
  sTime.Seconds = 0x0;
 8007738:	f88d 3006 	strb.w	r3, [sp, #6]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 800773c:	9304      	str	r3, [sp, #16]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 800773e:	9305      	str	r3, [sp, #20]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8007740:	2201      	movs	r2, #1
 8007742:	a901      	add	r1, sp, #4
 8007744:	4812      	ldr	r0, [pc, #72]	; (8007790 <_ZN11BusAnalizer11MX_RTC_InitEv+0xa8>)
 8007746:	f7fd f80d 	bl	8004764 <HAL_RTC_SetTime>
 800774a:	b9a0      	cbnz	r0, 8007776 <_ZN11BusAnalizer11MX_RTC_InitEv+0x8e>
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 800774c:	2201      	movs	r2, #1
 800774e:	f88d 2000 	strb.w	r2, [sp]
  sDate.Month = RTC_MONTH_JANUARY;
 8007752:	f88d 2001 	strb.w	r2, [sp, #1]
  sDate.Date = 0x1;
 8007756:	f88d 2002 	strb.w	r2, [sp, #2]
  sDate.Year = 0x0;
 800775a:	2300      	movs	r3, #0
 800775c:	f88d 3003 	strb.w	r3, [sp, #3]
  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 8007760:	4669      	mov	r1, sp
 8007762:	480b      	ldr	r0, [pc, #44]	; (8007790 <_ZN11BusAnalizer11MX_RTC_InitEv+0xa8>)
 8007764:	f7fd f862 	bl	800482c <HAL_RTC_SetDate>
 8007768:	b948      	cbnz	r0, 800777e <_ZN11BusAnalizer11MX_RTC_InitEv+0x96>
}
 800776a:	b006      	add	sp, #24
 800776c:	bd10      	pop	{r4, pc}
    Error_Handler();
 800776e:	4620      	mov	r0, r4
 8007770:	f7ff fdb0 	bl	80072d4 <_ZN11BusAnalizer13Error_HandlerEv>
 8007774:	e7db      	b.n	800772e <_ZN11BusAnalizer11MX_RTC_InitEv+0x46>
    Error_Handler();
 8007776:	4620      	mov	r0, r4
 8007778:	f7ff fdac 	bl	80072d4 <_ZN11BusAnalizer13Error_HandlerEv>
 800777c:	e7e6      	b.n	800774c <_ZN11BusAnalizer11MX_RTC_InitEv+0x64>
    Error_Handler();
 800777e:	4620      	mov	r0, r4
 8007780:	f7ff fda8 	bl	80072d4 <_ZN11BusAnalizer13Error_HandlerEv>
}
 8007784:	e7f1      	b.n	800776a <_ZN11BusAnalizer11MX_RTC_InitEv+0x82>
 8007786:	bf00      	nop
 8007788:	20000208 	.word	0x20000208
 800778c:	58004000 	.word	0x58004000
 8007790:	200003e0 	.word	0x200003e0

08007794 <_ZN11BusAnalizer12MX_SPI1_InitEv>:
{
 8007794:	b510      	push	{r4, lr}
 8007796:	4604      	mov	r4, r0
  hspi1.Instance = SPI1;
 8007798:	481c      	ldr	r0, [pc, #112]	; (800780c <_ZN11BusAnalizer12MX_SPI1_InitEv+0x78>)
 800779a:	4a1d      	ldr	r2, [pc, #116]	; (8007810 <_ZN11BusAnalizer12MX_SPI1_InitEv+0x7c>)
 800779c:	f8c0 21fc 	str.w	r2, [r0, #508]	; 0x1fc
  hspi1.Init.Mode = SPI_MODE_SLAVE;
 80077a0:	2200      	movs	r2, #0
 80077a2:	f8c0 2200 	str.w	r2, [r0, #512]	; 0x200
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80077a6:	f8c0 2204 	str.w	r2, [r0, #516]	; 0x204
  hspi1.Init.DataSize = SPI_DATASIZE_4BIT;
 80077aa:	2103      	movs	r1, #3
 80077ac:	f8c0 1208 	str.w	r1, [r0, #520]	; 0x208
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80077b0:	f8c0 220c 	str.w	r2, [r0, #524]	; 0x20c
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80077b4:	f8c0 2210 	str.w	r2, [r0, #528]	; 0x210
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80077b8:	f04f 6180 	mov.w	r1, #67108864	; 0x4000000
 80077bc:	f8c0 1214 	str.w	r1, [r0, #532]	; 0x214
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80077c0:	f8c0 221c 	str.w	r2, [r0, #540]	; 0x21c
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80077c4:	f8c0 2220 	str.w	r2, [r0, #544]	; 0x220
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80077c8:	f8c0 2224 	str.w	r2, [r0, #548]	; 0x224
  hspi1.Init.CRCPolynomial = 0x0;
 80077cc:	f8c0 2228 	str.w	r2, [r0, #552]	; 0x228
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 80077d0:	f8c0 2230 	str.w	r2, [r0, #560]	; 0x230
  hspi1.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 80077d4:	f8c0 2234 	str.w	r2, [r0, #564]	; 0x234
  hspi1.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 80077d8:	f8c0 2238 	str.w	r2, [r0, #568]	; 0x238
  hspi1.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 80077dc:	f8c0 223c 	str.w	r2, [r0, #572]	; 0x23c
  hspi1.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 80077e0:	f8c0 2240 	str.w	r2, [r0, #576]	; 0x240
  hspi1.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 80077e4:	f8c0 2244 	str.w	r2, [r0, #580]	; 0x244
  hspi1.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 80077e8:	f8c0 2248 	str.w	r2, [r0, #584]	; 0x248
  hspi1.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 80077ec:	f8c0 224c 	str.w	r2, [r0, #588]	; 0x24c
  hspi1.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 80077f0:	f8c0 2250 	str.w	r2, [r0, #592]	; 0x250
  hspi1.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 80077f4:	f8c0 2254 	str.w	r2, [r0, #596]	; 0x254
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80077f8:	f500 70fe 	add.w	r0, r0, #508	; 0x1fc
 80077fc:	f7fd f872 	bl	80048e4 <HAL_SPI_Init>
 8007800:	b900      	cbnz	r0, 8007804 <_ZN11BusAnalizer12MX_SPI1_InitEv+0x70>
}
 8007802:	bd10      	pop	{r4, pc}
    Error_Handler();
 8007804:	4620      	mov	r0, r4
 8007806:	f7ff fd65 	bl	80072d4 <_ZN11BusAnalizer13Error_HandlerEv>
}
 800780a:	e7fa      	b.n	8007802 <_ZN11BusAnalizer12MX_SPI1_InitEv+0x6e>
 800780c:	20000208 	.word	0x20000208
 8007810:	40013000 	.word	0x40013000

08007814 <_ZN11BusAnalizer19MX_USART1_UART_InitEv>:
{
 8007814:	b510      	push	{r4, lr}
 8007816:	4604      	mov	r4, r0
  huart1.Instance = USART1;
 8007818:	481f      	ldr	r0, [pc, #124]	; (8007898 <_ZN11BusAnalizer19MX_USART1_UART_InitEv+0x84>)
 800781a:	4a20      	ldr	r2, [pc, #128]	; (800789c <_ZN11BusAnalizer19MX_USART1_UART_InitEv+0x88>)
 800781c:	f8c0 2284 	str.w	r2, [r0, #644]	; 0x284
  huart1.Init.BaudRate = 115200;
 8007820:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8007824:	f8c0 2288 	str.w	r2, [r0, #648]	; 0x288
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8007828:	2100      	movs	r1, #0
 800782a:	f8c0 128c 	str.w	r1, [r0, #652]	; 0x28c
  huart1.Init.StopBits = UART_STOPBITS_1;
 800782e:	f8c0 1290 	str.w	r1, [r0, #656]	; 0x290
  huart1.Init.Parity = UART_PARITY_NONE;
 8007832:	f8c0 1294 	str.w	r1, [r0, #660]	; 0x294
  huart1.Init.Mode = UART_MODE_TX_RX;
 8007836:	220c      	movs	r2, #12
 8007838:	f8c0 2298 	str.w	r2, [r0, #664]	; 0x298
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800783c:	f8c0 129c 	str.w	r1, [r0, #668]	; 0x29c
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8007840:	f8c0 12a0 	str.w	r1, [r0, #672]	; 0x2a0
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8007844:	f8c0 12a4 	str.w	r1, [r0, #676]	; 0x2a4
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8007848:	f8c0 12a8 	str.w	r1, [r0, #680]	; 0x2a8
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800784c:	f8c0 12ac 	str.w	r1, [r0, #684]	; 0x2ac
  if (HAL_LIN_Init(&huart1, UART_LINBREAKDETECTLENGTH_10B) != HAL_OK)
 8007850:	f500 7021 	add.w	r0, r0, #644	; 0x284
 8007854:	f7fd feb4 	bl	80055c0 <HAL_LIN_Init>
 8007858:	b970      	cbnz	r0, 8007878 <_ZN11BusAnalizer19MX_USART1_UART_InitEv+0x64>
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800785a:	2100      	movs	r1, #0
 800785c:	4810      	ldr	r0, [pc, #64]	; (80078a0 <_ZN11BusAnalizer19MX_USART1_UART_InitEv+0x8c>)
 800785e:	f7fd ff52 	bl	8005706 <HAL_UARTEx_SetTxFifoThreshold>
 8007862:	b968      	cbnz	r0, 8007880 <_ZN11BusAnalizer19MX_USART1_UART_InitEv+0x6c>
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8007864:	2100      	movs	r1, #0
 8007866:	480e      	ldr	r0, [pc, #56]	; (80078a0 <_ZN11BusAnalizer19MX_USART1_UART_InitEv+0x8c>)
 8007868:	f7fd ff72 	bl	8005750 <HAL_UARTEx_SetRxFifoThreshold>
 800786c:	b960      	cbnz	r0, 8007888 <_ZN11BusAnalizer19MX_USART1_UART_InitEv+0x74>
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 800786e:	480c      	ldr	r0, [pc, #48]	; (80078a0 <_ZN11BusAnalizer19MX_USART1_UART_InitEv+0x8c>)
 8007870:	f7fd ff2a 	bl	80056c8 <HAL_UARTEx_DisableFifoMode>
 8007874:	b960      	cbnz	r0, 8007890 <_ZN11BusAnalizer19MX_USART1_UART_InitEv+0x7c>
}
 8007876:	bd10      	pop	{r4, pc}
    Error_Handler();
 8007878:	4620      	mov	r0, r4
 800787a:	f7ff fd2b 	bl	80072d4 <_ZN11BusAnalizer13Error_HandlerEv>
 800787e:	e7ec      	b.n	800785a <_ZN11BusAnalizer19MX_USART1_UART_InitEv+0x46>
    Error_Handler();
 8007880:	4620      	mov	r0, r4
 8007882:	f7ff fd27 	bl	80072d4 <_ZN11BusAnalizer13Error_HandlerEv>
 8007886:	e7ed      	b.n	8007864 <_ZN11BusAnalizer19MX_USART1_UART_InitEv+0x50>
    Error_Handler();
 8007888:	4620      	mov	r0, r4
 800788a:	f7ff fd23 	bl	80072d4 <_ZN11BusAnalizer13Error_HandlerEv>
 800788e:	e7ee      	b.n	800786e <_ZN11BusAnalizer19MX_USART1_UART_InitEv+0x5a>
    Error_Handler();
 8007890:	4620      	mov	r0, r4
 8007892:	f7ff fd1f 	bl	80072d4 <_ZN11BusAnalizer13Error_HandlerEv>
}
 8007896:	e7ee      	b.n	8007876 <_ZN11BusAnalizer19MX_USART1_UART_InitEv+0x62>
 8007898:	20000208 	.word	0x20000208
 800789c:	40011000 	.word	0x40011000
 80078a0:	2000048c 	.word	0x2000048c

080078a4 <_ZN11BusAnalizerC1Ev>:
BusAnalizer::BusAnalizer(void)
 80078a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80078a8:	b0a8      	sub	sp, #160	; 0xa0
 80078aa:	4604      	mov	r4, r0
 80078ac:	f100 05c0 	add.w	r5, r0, #192	; 0xc0
 80078b0:	2300      	movs	r3, #0
 80078b2:	f8a0 30c2 	strh.w	r3, [r0, #194]	; 0xc2
 80078b6:	f8c0 30c4 	str.w	r3, [r0, #196]	; 0xc4
 80078ba:	f880 30c8 	strb.w	r3, [r0, #200]	; 0xc8
 80078be:	f880 30c9 	strb.w	r3, [r0, #201]	; 0xc9
 80078c2:	f8c0 30cc 	str.w	r3, [r0, #204]	; 0xcc
 80078c6:	f8c0 30d0 	str.w	r3, [r0, #208]	; 0xd0
 80078ca:	f880 30d4 	strb.w	r3, [r0, #212]	; 0xd4
 80078ce:	f8c0 30d8 	str.w	r3, [r0, #216]	; 0xd8
 80078d2:	f8c0 30dc 	str.w	r3, [r0, #220]	; 0xdc
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80078d6:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 80078da:	f3bf 8f6f 	isb	sy
__STATIC_INLINE void SCB_EnableICache (void)
{
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 80078de:	4a4a      	ldr	r2, [pc, #296]	; (8007a08 <_ZN11BusAnalizerC1Ev+0x164>)
 80078e0:	f8c2 3250 	str.w	r3, [r2, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 80078e4:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 80078e8:	f3bf 8f6f 	isb	sy
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 80078ec:	6951      	ldr	r1, [r2, #20]
 80078ee:	f441 3100 	orr.w	r1, r1, #131072	; 0x20000
 80078f2:	6151      	str	r1, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 80078f4:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 80078f8:	f3bf 8f6f 	isb	sy
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    SCB->CSSELR = 0U; /*(0U << 1U) | 0U;*/  /* Level 1 data cache */
 80078fc:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 8007900:	f3bf 8f4f 	dsb	sy
    __DSB();

    ccsidr = SCB->CCSIDR;
 8007904:	f8d2 0080 	ldr.w	r0, [r2, #128]	; 0x80

                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 8007908:	f3c0 324e 	ubfx	r2, r0, #13, #15
 800790c:	e000      	b.n	8007910 <_ZN11BusAnalizerC1Ev+0x6c>
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
    } while(sets-- != 0U);
 800790e:	461a      	mov	r2, r3
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8007910:	f3c0 01c9 	ubfx	r1, r0, #3, #10
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8007914:	f643 73e0 	movw	r3, #16352	; 0x3fe0
 8007918:	ea03 1342 	and.w	r3, r3, r2, lsl #5
 800791c:	ea43 7381 	orr.w	r3, r3, r1, lsl #30
 8007920:	4e39      	ldr	r6, [pc, #228]	; (8007a08 <_ZN11BusAnalizerC1Ev+0x164>)
 8007922:	f8c6 3260 	str.w	r3, [r6, #608]	; 0x260
      } while (ways-- != 0U);
 8007926:	460b      	mov	r3, r1
 8007928:	3901      	subs	r1, #1
 800792a:	2b00      	cmp	r3, #0
 800792c:	d1f2      	bne.n	8007914 <_ZN11BusAnalizerC1Ev+0x70>
    } while(sets-- != 0U);
 800792e:	1e53      	subs	r3, r2, #1
 8007930:	2a00      	cmp	r2, #0
 8007932:	d1ec      	bne.n	800790e <_ZN11BusAnalizerC1Ev+0x6a>
 8007934:	f3bf 8f4f 	dsb	sy
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 8007938:	6973      	ldr	r3, [r6, #20]
 800793a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800793e:	6173      	str	r3, [r6, #20]
 8007940:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8007944:	f3bf 8f6f 	isb	sy
	HAL_Init();
 8007948:	f7f9 fa16 	bl	8000d78 <HAL_Init>
	SystemClock_Config();
 800794c:	4620      	mov	r0, r4
 800794e:	f7ff fd51 	bl	80073f4 <_ZN11BusAnalizer18SystemClock_ConfigEv>
	GPIO_1.gpio_init();
 8007952:	4628      	mov	r0, r5
 8007954:	f7ff fc56 	bl	8007204 <_ZN4gpio9gpio_initEv>
	MX_FDCAN1_Init();
 8007958:	4620      	mov	r0, r4
 800795a:	f7ff fdd3 	bl	8007504 <_ZN11BusAnalizer14MX_FDCAN1_InitEv>
	MX_FDCAN2_Init();
 800795e:	4620      	mov	r0, r4
 8007960:	f7ff fe34 	bl	80075cc <_ZN11BusAnalizer14MX_FDCAN2_InitEv>
	MX_I2C1_Init();
 8007964:	4620      	mov	r0, r4
 8007966:	f7ff fe81 	bl	800766c <_ZN11BusAnalizer12MX_I2C1_InitEv>
	MX_RTC_Init();
 800796a:	4620      	mov	r0, r4
 800796c:	f7ff febc 	bl	80076e8 <_ZN11BusAnalizer11MX_RTC_InitEv>
	MX_SPI1_Init();
 8007970:	4620      	mov	r0, r4
 8007972:	f7ff ff0f 	bl	8007794 <_ZN11BusAnalizer12MX_SPI1_InitEv>
	MX_USART1_UART_Init();
 8007976:	4620      	mov	r0, r4
 8007978:	f7ff ff4c 	bl	8007814 <_ZN11BusAnalizer19MX_USART1_UART_InitEv>
	timerinit structinitTim2 = {TIM2, 29, TIM_COUNTERMODE_UP, 0xFFFFFFFF,
 800797c:	ad0c      	add	r5, sp, #48	; 0x30
 800797e:	4e23      	ldr	r6, [pc, #140]	; (8007a0c <_ZN11BusAnalizerC1Ev+0x168>)
 8007980:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8007982:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8007984:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8007986:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8007988:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 800798a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800798c:	e896 0003 	ldmia.w	r6, {r0, r1}
 8007990:	e885 0003 	stmia.w	r5, {r0, r1}
	  TIM_MasterConfigTypeDef sMasterConfig = {0};
	  TIM_OC_InitTypeDef sConfigOC = {0};

public:

	Timer () {};
 8007994:	2700      	movs	r7, #0
 8007996:	971a      	str	r7, [sp, #104]	; 0x68
 8007998:	971b      	str	r7, [sp, #108]	; 0x6c
 800799a:	971c      	str	r7, [sp, #112]	; 0x70
 800799c:	971d      	str	r7, [sp, #116]	; 0x74
 800799e:	971e      	str	r7, [sp, #120]	; 0x78
 80079a0:	971f      	str	r7, [sp, #124]	; 0x7c
 80079a2:	9720      	str	r7, [sp, #128]	; 0x80
 80079a4:	9721      	str	r7, [sp, #132]	; 0x84
 80079a6:	9722      	str	r7, [sp, #136]	; 0x88
 80079a8:	9723      	str	r7, [sp, #140]	; 0x8c
 80079aa:	9724      	str	r7, [sp, #144]	; 0x90
 80079ac:	9725      	str	r7, [sp, #148]	; 0x94
 80079ae:	9726      	str	r7, [sp, #152]	; 0x98
 80079b0:	9727      	str	r7, [sp, #156]	; 0x9c
	Timer2.TimerInit(&htim2, structinitTim2);
 80079b2:	f8df 8060 	ldr.w	r8, [pc, #96]	; 8007a14 <_ZN11BusAnalizerC1Ev+0x170>
 80079b6:	466d      	mov	r5, sp
 80079b8:	ae0e      	add	r6, sp, #56	; 0x38
 80079ba:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 80079bc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80079be:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 80079c0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80079c2:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 80079c6:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 80079ca:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80079cc:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80079ce:	4641      	mov	r1, r8
 80079d0:	a81a      	add	r0, sp, #104	; 0x68
 80079d2:	f7f9 f97c 	bl	8000cce <_ZN5Timer9TimerInitEP17TIM_HandleTypeDef9timerinit>
	MX_USB_DEVICE_Init();
 80079d6:	f000 fb0b 	bl	8007ff0 <MX_USB_DEVICE_Init>
	GPIOA->ODR &= 0xffe7;
 80079da:	4a0d      	ldr	r2, [pc, #52]	; (8007a10 <_ZN11BusAnalizerC1Ev+0x16c>)
 80079dc:	6953      	ldr	r3, [r2, #20]
 80079de:	f023 0318 	bic.w	r3, r3, #24
 80079e2:	041b      	lsls	r3, r3, #16
 80079e4:	0c1b      	lsrs	r3, r3, #16
 80079e6:	6153      	str	r3, [r2, #20]
	GPIOB->ODR ^=0x0003;
 80079e8:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80079ec:	6953      	ldr	r3, [r2, #20]
 80079ee:	f083 0303 	eor.w	r3, r3, #3
 80079f2:	6153      	str	r3, [r2, #20]
	ui32CounterTransmisionErrorCAN1 =0;
 80079f4:	f8c4 70c4 	str.w	r7, [r4, #196]	; 0xc4
	HAL_TIM_Base_Start(&htim2);
 80079f8:	4640      	mov	r0, r8
 80079fa:	f7fd f81b 	bl	8004a34 <HAL_TIM_Base_Start>
}
 80079fe:	4620      	mov	r0, r4
 8007a00:	b028      	add	sp, #160	; 0xa0
 8007a02:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007a06:	bf00      	nop
 8007a08:	e000ed00 	.word	0xe000ed00
 8007a0c:	08009588 	.word	0x08009588
 8007a10:	58020000 	.word	0x58020000
 8007a14:	200002a8 	.word	0x200002a8

08007a18 <_Z41__static_initialization_and_destruction_0ii>:
  /* Infinite loop */
  while (1)
  {
	sBussAnalizer.Run();
  }
}
 8007a18:	2801      	cmp	r0, #1
 8007a1a:	d000      	beq.n	8007a1e <_Z41__static_initialization_and_destruction_0ii+0x6>
 8007a1c:	4770      	bx	lr
 8007a1e:	b508      	push	{r3, lr}
 8007a20:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8007a24:	4299      	cmp	r1, r3
 8007a26:	d000      	beq.n	8007a2a <_Z41__static_initialization_and_destruction_0ii+0x12>
 8007a28:	bd08      	pop	{r3, pc}
BusAnalizer sBussAnalizer;
 8007a2a:	4802      	ldr	r0, [pc, #8]	; (8007a34 <_Z41__static_initialization_and_destruction_0ii+0x1c>)
 8007a2c:	f7ff ff3a 	bl	80078a4 <_ZN11BusAnalizerC1Ev>
 8007a30:	e7fa      	b.n	8007a28 <_Z41__static_initialization_and_destruction_0ii+0x10>
 8007a32:	bf00      	nop
 8007a34:	20000518 	.word	0x20000518

08007a38 <HAL_FDCAN_RxFifo0Callback>:
  GPIOB->ODR ^=0x2;
 8007a38:	4a14      	ldr	r2, [pc, #80]	; (8007a8c <HAL_FDCAN_RxFifo0Callback+0x54>)
 8007a3a:	6953      	ldr	r3, [r2, #20]
 8007a3c:	f083 0302 	eor.w	r3, r3, #2
 8007a40:	6153      	str	r3, [r2, #20]
  if((RxFifo0ITs & FDCAN_IT_RX_FIFO0_NEW_MESSAGE) != RESET)
 8007a42:	f011 0f01 	tst.w	r1, #1
 8007a46:	d100      	bne.n	8007a4a <HAL_FDCAN_RxFifo0Callback+0x12>
 8007a48:	4770      	bx	lr
{
 8007a4a:	b510      	push	{r4, lr}
 8007a4c:	4604      	mov	r4, r0
    if (HAL_FDCAN_GetRxMessage(hfdcan, FDCAN_RX_FIFO0, sBussAnalizer.GetRxHeadearPointer(), sBussAnalizer.GetRxDataPointer()) != HAL_OK)
 8007a4e:	4a10      	ldr	r2, [pc, #64]	; (8007a90 <HAL_FDCAN_RxFifo0Callback+0x58>)
 8007a50:	f502 734e 	add.w	r3, r2, #824	; 0x338
 8007a54:	f502 7244 	add.w	r2, r2, #784	; 0x310
 8007a58:	2140      	movs	r1, #64	; 0x40
 8007a5a:	f7f9 fd63 	bl	8001524 <HAL_FDCAN_GetRxMessage>
 8007a5e:	b970      	cbnz	r0, 8007a7e <HAL_FDCAN_RxFifo0Callback+0x46>
    sBussAnalizer.SetTimerValueRxFifo0(__HAL_TIM_GET_COUNTER(&htim2));
 8007a60:	4b0b      	ldr	r3, [pc, #44]	; (8007a90 <HAL_FDCAN_RxFifo0Callback+0x58>)
 8007a62:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 8007a66:	6a52      	ldr	r2, [r2, #36]	; 0x24
  void MX_USART1_UART_Init(void);
  //void MX_GPIO_Init(void);
  void Error_Handler(void);
  FDCAN_RxHeaderTypeDef *GetRxHeadearPointer(void){ return &(this->RxHeader);};
  uint8_t *GetRxDataPointer(void){return this->RxData;};
  void SetTimerValueRxFifo0(uint32_t lui32TimerValue){ui32TimerValue=lui32TimerValue;};
 8007a68:	f8c3 23dc 	str.w	r2, [r3, #988]	; 0x3dc
  void SetRequesttoUsbCAN1(bool ub){ui8SetRequestToUsbCAN1 =ub;}
 8007a6c:	2101      	movs	r1, #1
 8007a6e:	f883 13e4 	strb.w	r1, [r3, #996]	; 0x3e4
    if (HAL_FDCAN_ActivateNotification(hfdcan, FDCAN_IT_RX_FIFO0_NEW_MESSAGE, 0) != HAL_OK)
 8007a72:	2200      	movs	r2, #0
 8007a74:	4620      	mov	r0, r4
 8007a76:	f7f9 fe39 	bl	80016ec <HAL_FDCAN_ActivateNotification>
 8007a7a:	b918      	cbnz	r0, 8007a84 <HAL_FDCAN_RxFifo0Callback+0x4c>
}
 8007a7c:	bd10      	pop	{r4, pc}
    Error_Handler();
 8007a7e:	f000 fab5 	bl	8007fec <Error_Handler>
 8007a82:	e7ed      	b.n	8007a60 <HAL_FDCAN_RxFifo0Callback+0x28>
      Error_Handler();
 8007a84:	f000 fab2 	bl	8007fec <Error_Handler>
}
 8007a88:	e7f8      	b.n	8007a7c <HAL_FDCAN_RxFifo0Callback+0x44>
 8007a8a:	bf00      	nop
 8007a8c:	58020400 	.word	0x58020400
 8007a90:	20000208 	.word	0x20000208

08007a94 <HAL_TIM_PeriodElapsedCallback>:
{
 8007a94:	b510      	push	{r4, lr}
 8007a96:	4604      	mov	r4, r0
  if (htim->Instance == TIM1) {
 8007a98:	6802      	ldr	r2, [r0, #0]
 8007a9a:	4b10      	ldr	r3, [pc, #64]	; (8007adc <HAL_TIM_PeriodElapsedCallback+0x48>)
 8007a9c:	429a      	cmp	r2, r3
 8007a9e:	d004      	beq.n	8007aaa <HAL_TIM_PeriodElapsedCallback+0x16>
  if (htim->Instance == TIM1) {
 8007aa0:	6822      	ldr	r2, [r4, #0]
 8007aa2:	4b0e      	ldr	r3, [pc, #56]	; (8007adc <HAL_TIM_PeriodElapsedCallback+0x48>)
 8007aa4:	429a      	cmp	r2, r3
 8007aa6:	d003      	beq.n	8007ab0 <HAL_TIM_PeriodElapsedCallback+0x1c>
}
 8007aa8:	bd10      	pop	{r4, pc}
    HAL_IncTick();
 8007aaa:	f7f9 f993 	bl	8000dd4 <HAL_IncTick>
 8007aae:	e7f7      	b.n	8007aa0 <HAL_TIM_PeriodElapsedCallback+0xc>
  void IncrementMessageTrigger(void){ui16MessageTrigger++;};
 8007ab0:	4a0b      	ldr	r2, [pc, #44]	; (8007ae0 <HAL_TIM_PeriodElapsedCallback+0x4c>)
 8007ab2:	f8b2 33d2 	ldrh.w	r3, [r2, #978]	; 0x3d2
 8007ab6:	3301      	adds	r3, #1
 8007ab8:	b29b      	uxth	r3, r3
 8007aba:	f8a2 33d2 	strh.w	r3, [r2, #978]	; 0x3d2
	    if ((sBussAnalizer.Getui16MessageTrigger()%5) == 0)
 8007abe:	4a09      	ldr	r2, [pc, #36]	; (8007ae4 <HAL_TIM_PeriodElapsedCallback+0x50>)
 8007ac0:	fba2 1203 	umull	r1, r2, r2, r3
 8007ac4:	0892      	lsrs	r2, r2, #2
 8007ac6:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8007aca:	1a9b      	subs	r3, r3, r2
 8007acc:	b29b      	uxth	r3, r3
 8007ace:	2b00      	cmp	r3, #0
 8007ad0:	d1ea      	bne.n	8007aa8 <HAL_TIM_PeriodElapsedCallback+0x14>
  uint16_t Getui16MessageTrigger(void){return ui16MessageTrigger;};
  void SetMessageTriggerFlag(bool lbMessageflag){ui16MessageTriggerFlag = lbMessageflag;};
 8007ad2:	4b03      	ldr	r3, [pc, #12]	; (8007ae0 <HAL_TIM_PeriodElapsedCallback+0x4c>)
 8007ad4:	2201      	movs	r2, #1
 8007ad6:	f883 23d9 	strb.w	r2, [r3, #985]	; 0x3d9
}
 8007ada:	e7e5      	b.n	8007aa8 <HAL_TIM_PeriodElapsedCallback+0x14>
 8007adc:	40010000 	.word	0x40010000
 8007ae0:	20000208 	.word	0x20000208
 8007ae4:	cccccccd 	.word	0xcccccccd

08007ae8 <main>:
{
 8007ae8:	b508      	push	{r3, lr}
	sBussAnalizer.Run();
 8007aea:	4802      	ldr	r0, [pc, #8]	; (8007af4 <main+0xc>)
 8007aec:	f7ff fbfe 	bl	80072ec <_ZN11BusAnalizer3RunEv>
  while (1)
 8007af0:	e7fb      	b.n	8007aea <main+0x2>
 8007af2:	bf00      	nop
 8007af4:	20000518 	.word	0x20000518

08007af8 <_GLOBAL__sub_I_hfdcan1>:
}
 8007af8:	b508      	push	{r3, lr}
 8007afa:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8007afe:	2001      	movs	r0, #1
 8007b00:	f7ff ff8a 	bl	8007a18 <_Z41__static_initialization_and_destruction_0ii>
 8007b04:	bd08      	pop	{r3, pc}

08007b06 <_GLOBAL__sub_D_hfdcan1>:
 8007b06:	b508      	push	{r3, lr}
 8007b08:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8007b0c:	2000      	movs	r0, #0
 8007b0e:	f7ff ff83 	bl	8007a18 <_Z41__static_initialization_and_destruction_0ii>
 8007b12:	bd08      	pop	{r3, pc}

08007b14 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8007b14:	b082      	sub	sp, #8
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8007b16:	4b07      	ldr	r3, [pc, #28]	; (8007b34 <HAL_MspInit+0x20>)
 8007b18:	f8d3 20f4 	ldr.w	r2, [r3, #244]	; 0xf4
 8007b1c:	f042 0202 	orr.w	r2, r2, #2
 8007b20:	f8c3 20f4 	str.w	r2, [r3, #244]	; 0xf4
 8007b24:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8007b28:	f003 0302 	and.w	r3, r3, #2
 8007b2c:	9301      	str	r3, [sp, #4]
 8007b2e:	9b01      	ldr	r3, [sp, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8007b30:	b002      	add	sp, #8
 8007b32:	4770      	bx	lr
 8007b34:	58024400 	.word	0x58024400

08007b38 <HAL_FDCAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hfdcan: FDCAN handle pointer
* @retval None
*/
void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* hfdcan)
{
 8007b38:	b510      	push	{r4, lr}
 8007b3a:	b08a      	sub	sp, #40	; 0x28
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007b3c:	2300      	movs	r3, #0
 8007b3e:	9305      	str	r3, [sp, #20]
 8007b40:	9306      	str	r3, [sp, #24]
 8007b42:	9307      	str	r3, [sp, #28]
 8007b44:	9308      	str	r3, [sp, #32]
 8007b46:	9309      	str	r3, [sp, #36]	; 0x24
  if(hfdcan->Instance==FDCAN1)
 8007b48:	6803      	ldr	r3, [r0, #0]
 8007b4a:	4a3c      	ldr	r2, [pc, #240]	; (8007c3c <HAL_FDCAN_MspInit+0x104>)
 8007b4c:	4293      	cmp	r3, r2
 8007b4e:	d004      	beq.n	8007b5a <HAL_FDCAN_MspInit+0x22>
    HAL_NVIC_EnableIRQ(FDCAN1_IT1_IRQn);
  /* USER CODE BEGIN FDCAN1_MspInit 1 */

  /* USER CODE END FDCAN1_MspInit 1 */
  }
  else if(hfdcan->Instance==FDCAN2)
 8007b50:	4a3b      	ldr	r2, [pc, #236]	; (8007c40 <HAL_FDCAN_MspInit+0x108>)
 8007b52:	4293      	cmp	r3, r2
 8007b54:	d041      	beq.n	8007bda <HAL_FDCAN_MspInit+0xa2>
  /* USER CODE BEGIN FDCAN2_MspInit 1 */

  /* USER CODE END FDCAN2_MspInit 1 */
  }

}
 8007b56:	b00a      	add	sp, #40	; 0x28
 8007b58:	bd10      	pop	{r4, pc}
    HAL_RCC_FDCAN_CLK_ENABLED++;
 8007b5a:	4a3a      	ldr	r2, [pc, #232]	; (8007c44 <HAL_FDCAN_MspInit+0x10c>)
 8007b5c:	6813      	ldr	r3, [r2, #0]
 8007b5e:	3301      	adds	r3, #1
 8007b60:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_FDCAN_CLK_ENABLED==1){
 8007b62:	2b01      	cmp	r3, #1
 8007b64:	d02b      	beq.n	8007bbe <HAL_FDCAN_MspInit+0x86>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8007b66:	4b38      	ldr	r3, [pc, #224]	; (8007c48 <HAL_FDCAN_MspInit+0x110>)
 8007b68:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8007b6c:	f042 0201 	orr.w	r2, r2, #1
 8007b70:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8007b74:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8007b78:	f003 0301 	and.w	r3, r3, #1
 8007b7c:	9302      	str	r3, [sp, #8]
 8007b7e:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8007b80:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8007b84:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007b86:	2302      	movs	r3, #2
 8007b88:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007b8a:	2400      	movs	r4, #0
 8007b8c:	9407      	str	r4, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007b8e:	9408      	str	r4, [sp, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN1;
 8007b90:	2309      	movs	r3, #9
 8007b92:	9309      	str	r3, [sp, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007b94:	a905      	add	r1, sp, #20
 8007b96:	482d      	ldr	r0, [pc, #180]	; (8007c4c <HAL_FDCAN_MspInit+0x114>)
 8007b98:	f7f9 ff96 	bl	8001ac8 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(FDCAN1_IT0_IRQn, 0, 0);
 8007b9c:	4622      	mov	r2, r4
 8007b9e:	4621      	mov	r1, r4
 8007ba0:	2013      	movs	r0, #19
 8007ba2:	f7f9 f955 	bl	8000e50 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(FDCAN1_IT0_IRQn);
 8007ba6:	2013      	movs	r0, #19
 8007ba8:	f7f9 f984 	bl	8000eb4 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(FDCAN1_IT1_IRQn, 0, 0);
 8007bac:	4622      	mov	r2, r4
 8007bae:	4621      	mov	r1, r4
 8007bb0:	2015      	movs	r0, #21
 8007bb2:	f7f9 f94d 	bl	8000e50 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(FDCAN1_IT1_IRQn);
 8007bb6:	2015      	movs	r0, #21
 8007bb8:	f7f9 f97c 	bl	8000eb4 <HAL_NVIC_EnableIRQ>
 8007bbc:	e7cb      	b.n	8007b56 <HAL_FDCAN_MspInit+0x1e>
      __HAL_RCC_FDCAN_CLK_ENABLE();
 8007bbe:	4b22      	ldr	r3, [pc, #136]	; (8007c48 <HAL_FDCAN_MspInit+0x110>)
 8007bc0:	f8d3 20ec 	ldr.w	r2, [r3, #236]	; 0xec
 8007bc4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007bc8:	f8c3 20ec 	str.w	r2, [r3, #236]	; 0xec
 8007bcc:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8007bd0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007bd4:	9301      	str	r3, [sp, #4]
 8007bd6:	9b01      	ldr	r3, [sp, #4]
 8007bd8:	e7c5      	b.n	8007b66 <HAL_FDCAN_MspInit+0x2e>
    HAL_RCC_FDCAN_CLK_ENABLED++;
 8007bda:	4a1a      	ldr	r2, [pc, #104]	; (8007c44 <HAL_FDCAN_MspInit+0x10c>)
 8007bdc:	6813      	ldr	r3, [r2, #0]
 8007bde:	3301      	adds	r3, #1
 8007be0:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_FDCAN_CLK_ENABLED==1){
 8007be2:	2b01      	cmp	r3, #1
 8007be4:	d01b      	beq.n	8007c1e <HAL_FDCAN_MspInit+0xe6>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8007be6:	4b18      	ldr	r3, [pc, #96]	; (8007c48 <HAL_FDCAN_MspInit+0x110>)
 8007be8:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8007bec:	f042 0202 	orr.w	r2, r2, #2
 8007bf0:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8007bf4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8007bf8:	f003 0302 	and.w	r3, r3, #2
 8007bfc:	9304      	str	r3, [sp, #16]
 8007bfe:	9b04      	ldr	r3, [sp, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 8007c00:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8007c04:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007c06:	2302      	movs	r3, #2
 8007c08:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007c0a:	2300      	movs	r3, #0
 8007c0c:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007c0e:	9308      	str	r3, [sp, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN2;
 8007c10:	2309      	movs	r3, #9
 8007c12:	9309      	str	r3, [sp, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8007c14:	a905      	add	r1, sp, #20
 8007c16:	480e      	ldr	r0, [pc, #56]	; (8007c50 <HAL_FDCAN_MspInit+0x118>)
 8007c18:	f7f9 ff56 	bl	8001ac8 <HAL_GPIO_Init>
}
 8007c1c:	e79b      	b.n	8007b56 <HAL_FDCAN_MspInit+0x1e>
      __HAL_RCC_FDCAN_CLK_ENABLE();
 8007c1e:	4b0a      	ldr	r3, [pc, #40]	; (8007c48 <HAL_FDCAN_MspInit+0x110>)
 8007c20:	f8d3 20ec 	ldr.w	r2, [r3, #236]	; 0xec
 8007c24:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007c28:	f8c3 20ec 	str.w	r2, [r3, #236]	; 0xec
 8007c2c:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8007c30:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007c34:	9303      	str	r3, [sp, #12]
 8007c36:	9b03      	ldr	r3, [sp, #12]
 8007c38:	e7d5      	b.n	8007be6 <HAL_FDCAN_MspInit+0xae>
 8007c3a:	bf00      	nop
 8007c3c:	4000a000 	.word	0x4000a000
 8007c40:	4000a400 	.word	0x4000a400
 8007c44:	200005f8 	.word	0x200005f8
 8007c48:	58024400 	.word	0x58024400
 8007c4c:	58020000 	.word	0x58020000
 8007c50:	58020400 	.word	0x58020400

08007c54 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8007c54:	b510      	push	{r4, lr}
 8007c56:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007c58:	2300      	movs	r3, #0
 8007c5a:	9303      	str	r3, [sp, #12]
 8007c5c:	9304      	str	r3, [sp, #16]
 8007c5e:	9305      	str	r3, [sp, #20]
 8007c60:	9306      	str	r3, [sp, #24]
 8007c62:	9307      	str	r3, [sp, #28]
  if(hi2c->Instance==I2C1)
 8007c64:	6802      	ldr	r2, [r0, #0]
 8007c66:	4b16      	ldr	r3, [pc, #88]	; (8007cc0 <HAL_I2C_MspInit+0x6c>)
 8007c68:	429a      	cmp	r2, r3
 8007c6a:	d001      	beq.n	8007c70 <HAL_I2C_MspInit+0x1c>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8007c6c:	b008      	add	sp, #32
 8007c6e:	bd10      	pop	{r4, pc}
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8007c70:	4c14      	ldr	r4, [pc, #80]	; (8007cc4 <HAL_I2C_MspInit+0x70>)
 8007c72:	f8d4 30e0 	ldr.w	r3, [r4, #224]	; 0xe0
 8007c76:	f043 0302 	orr.w	r3, r3, #2
 8007c7a:	f8c4 30e0 	str.w	r3, [r4, #224]	; 0xe0
 8007c7e:	f8d4 30e0 	ldr.w	r3, [r4, #224]	; 0xe0
 8007c82:	f003 0302 	and.w	r3, r3, #2
 8007c86:	9301      	str	r3, [sp, #4]
 8007c88:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8;
 8007c8a:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8007c8e:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8007c90:	2312      	movs	r3, #18
 8007c92:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007c94:	2300      	movs	r3, #0
 8007c96:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007c98:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8007c9a:	2304      	movs	r3, #4
 8007c9c:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8007c9e:	a903      	add	r1, sp, #12
 8007ca0:	4809      	ldr	r0, [pc, #36]	; (8007cc8 <HAL_I2C_MspInit+0x74>)
 8007ca2:	f7f9 ff11 	bl	8001ac8 <HAL_GPIO_Init>
    __HAL_RCC_I2C1_CLK_ENABLE();
 8007ca6:	f8d4 30e8 	ldr.w	r3, [r4, #232]	; 0xe8
 8007caa:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8007cae:	f8c4 30e8 	str.w	r3, [r4, #232]	; 0xe8
 8007cb2:	f8d4 30e8 	ldr.w	r3, [r4, #232]	; 0xe8
 8007cb6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007cba:	9302      	str	r3, [sp, #8]
 8007cbc:	9b02      	ldr	r3, [sp, #8]
}
 8007cbe:	e7d5      	b.n	8007c6c <HAL_I2C_MspInit+0x18>
 8007cc0:	40005400 	.word	0x40005400
 8007cc4:	58024400 	.word	0x58024400
 8007cc8:	58020400 	.word	0x58020400

08007ccc <HAL_RTC_MspInit>:
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
  if(hrtc->Instance==RTC)
 8007ccc:	6802      	ldr	r2, [r0, #0]
 8007cce:	4b05      	ldr	r3, [pc, #20]	; (8007ce4 <HAL_RTC_MspInit+0x18>)
 8007cd0:	429a      	cmp	r2, r3
 8007cd2:	d000      	beq.n	8007cd6 <HAL_RTC_MspInit+0xa>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8007cd4:	4770      	bx	lr
    __HAL_RCC_RTC_ENABLE();
 8007cd6:	4a04      	ldr	r2, [pc, #16]	; (8007ce8 <HAL_RTC_MspInit+0x1c>)
 8007cd8:	6f13      	ldr	r3, [r2, #112]	; 0x70
 8007cda:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007cde:	6713      	str	r3, [r2, #112]	; 0x70
}
 8007ce0:	e7f8      	b.n	8007cd4 <HAL_RTC_MspInit+0x8>
 8007ce2:	bf00      	nop
 8007ce4:	58004000 	.word	0x58004000
 8007ce8:	58024400 	.word	0x58024400

08007cec <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8007cec:	b500      	push	{lr}
 8007cee:	b089      	sub	sp, #36	; 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007cf0:	2300      	movs	r3, #0
 8007cf2:	9303      	str	r3, [sp, #12]
 8007cf4:	9304      	str	r3, [sp, #16]
 8007cf6:	9305      	str	r3, [sp, #20]
 8007cf8:	9306      	str	r3, [sp, #24]
 8007cfa:	9307      	str	r3, [sp, #28]
  if(hspi->Instance==SPI1)
 8007cfc:	6802      	ldr	r2, [r0, #0]
 8007cfe:	4b16      	ldr	r3, [pc, #88]	; (8007d58 <HAL_SPI_MspInit+0x6c>)
 8007d00:	429a      	cmp	r2, r3
 8007d02:	d002      	beq.n	8007d0a <HAL_SPI_MspInit+0x1e>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8007d04:	b009      	add	sp, #36	; 0x24
 8007d06:	f85d fb04 	ldr.w	pc, [sp], #4
    __HAL_RCC_SPI1_CLK_ENABLE();
 8007d0a:	4b14      	ldr	r3, [pc, #80]	; (8007d5c <HAL_SPI_MspInit+0x70>)
 8007d0c:	f8d3 20f0 	ldr.w	r2, [r3, #240]	; 0xf0
 8007d10:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8007d14:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0
 8007d18:	f8d3 20f0 	ldr.w	r2, [r3, #240]	; 0xf0
 8007d1c:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8007d20:	9201      	str	r2, [sp, #4]
 8007d22:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8007d24:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8007d28:	f042 0201 	orr.w	r2, r2, #1
 8007d2c:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8007d30:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8007d34:	f003 0301 	and.w	r3, r3, #1
 8007d38:	9302      	str	r3, [sp, #8]
 8007d3a:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8007d3c:	23e0      	movs	r3, #224	; 0xe0
 8007d3e:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007d40:	2302      	movs	r3, #2
 8007d42:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007d44:	2300      	movs	r3, #0
 8007d46:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007d48:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8007d4a:	2305      	movs	r3, #5
 8007d4c:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007d4e:	a903      	add	r1, sp, #12
 8007d50:	4803      	ldr	r0, [pc, #12]	; (8007d60 <HAL_SPI_MspInit+0x74>)
 8007d52:	f7f9 feb9 	bl	8001ac8 <HAL_GPIO_Init>
}
 8007d56:	e7d5      	b.n	8007d04 <HAL_SPI_MspInit+0x18>
 8007d58:	40013000 	.word	0x40013000
 8007d5c:	58024400 	.word	0x58024400
 8007d60:	58020000 	.word	0x58020000

08007d64 <HAL_TIM_Base_MspInit>:
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
  if(htim_base->Instance==TIM2)
 8007d64:	6803      	ldr	r3, [r0, #0]
 8007d66:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007d6a:	d000      	beq.n	8007d6e <HAL_TIM_Base_MspInit+0xa>
 8007d6c:	4770      	bx	lr
{
 8007d6e:	b082      	sub	sp, #8
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8007d70:	4b07      	ldr	r3, [pc, #28]	; (8007d90 <HAL_TIM_Base_MspInit+0x2c>)
 8007d72:	f8d3 20e8 	ldr.w	r2, [r3, #232]	; 0xe8
 8007d76:	f042 0201 	orr.w	r2, r2, #1
 8007d7a:	f8c3 20e8 	str.w	r2, [r3, #232]	; 0xe8
 8007d7e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8007d82:	f003 0301 	and.w	r3, r3, #1
 8007d86:	9301      	str	r3, [sp, #4]
 8007d88:	9b01      	ldr	r3, [sp, #4]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8007d8a:	b002      	add	sp, #8
 8007d8c:	4770      	bx	lr
 8007d8e:	bf00      	nop
 8007d90:	58024400 	.word	0x58024400

08007d94 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8007d94:	b500      	push	{lr}
 8007d96:	b089      	sub	sp, #36	; 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007d98:	2300      	movs	r3, #0
 8007d9a:	9303      	str	r3, [sp, #12]
 8007d9c:	9304      	str	r3, [sp, #16]
 8007d9e:	9305      	str	r3, [sp, #20]
 8007da0:	9306      	str	r3, [sp, #24]
 8007da2:	9307      	str	r3, [sp, #28]
  if(huart->Instance==USART1)
 8007da4:	6802      	ldr	r2, [r0, #0]
 8007da6:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8007daa:	f503 3388 	add.w	r3, r3, #69632	; 0x11000
 8007dae:	429a      	cmp	r2, r3
 8007db0:	d002      	beq.n	8007db8 <HAL_UART_MspInit+0x24>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8007db2:	b009      	add	sp, #36	; 0x24
 8007db4:	f85d fb04 	ldr.w	pc, [sp], #4
    __HAL_RCC_USART1_CLK_ENABLE();
 8007db8:	4b13      	ldr	r3, [pc, #76]	; (8007e08 <HAL_UART_MspInit+0x74>)
 8007dba:	f8d3 20f0 	ldr.w	r2, [r3, #240]	; 0xf0
 8007dbe:	f042 0210 	orr.w	r2, r2, #16
 8007dc2:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0
 8007dc6:	f8d3 20f0 	ldr.w	r2, [r3, #240]	; 0xf0
 8007dca:	f002 0210 	and.w	r2, r2, #16
 8007dce:	9201      	str	r2, [sp, #4]
 8007dd0:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8007dd2:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8007dd6:	f042 0201 	orr.w	r2, r2, #1
 8007dda:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8007dde:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8007de2:	f003 0301 	and.w	r3, r3, #1
 8007de6:	9302      	str	r3, [sp, #8]
 8007de8:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8007dea:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8007dee:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007df0:	2302      	movs	r3, #2
 8007df2:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007df4:	2300      	movs	r3, #0
 8007df6:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007df8:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8007dfa:	2307      	movs	r3, #7
 8007dfc:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007dfe:	a903      	add	r1, sp, #12
 8007e00:	4802      	ldr	r0, [pc, #8]	; (8007e0c <HAL_UART_MspInit+0x78>)
 8007e02:	f7f9 fe61 	bl	8001ac8 <HAL_GPIO_Init>
}
 8007e06:	e7d4      	b.n	8007db2 <HAL_UART_MspInit+0x1e>
 8007e08:	58024400 	.word	0x58024400
 8007e0c:	58020000 	.word	0x58020000

08007e10 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8007e10:	b500      	push	{lr}
 8007e12:	b08b      	sub	sp, #44	; 0x2c
 8007e14:	4601      	mov	r1, r0
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
  uint32_t              uwPrescalerValue = 0;
  uint32_t              pFLatency;
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_IRQn, TickPriority ,0);
 8007e16:	2200      	movs	r2, #0
 8007e18:	2019      	movs	r0, #25
 8007e1a:	f7f9 f819 	bl	8000e50 <HAL_NVIC_SetPriority>

  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 8007e1e:	2019      	movs	r0, #25
 8007e20:	f7f9 f848 	bl	8000eb4 <HAL_NVIC_EnableIRQ>
  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8007e24:	4b16      	ldr	r3, [pc, #88]	; (8007e80 <HAL_InitTick+0x70>)
 8007e26:	f8d3 20f0 	ldr.w	r2, [r3, #240]	; 0xf0
 8007e2a:	f042 0201 	orr.w	r2, r2, #1
 8007e2e:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0
 8007e32:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8007e36:	f003 0301 	and.w	r3, r3, #1
 8007e3a:	9300      	str	r3, [sp, #0]
 8007e3c:	9b00      	ldr	r3, [sp, #0]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8007e3e:	a901      	add	r1, sp, #4
 8007e40:	a802      	add	r0, sp, #8
 8007e42:	f7fb fbbd 	bl	80035c0 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK2Freq();
 8007e46:	f7fb fba9 	bl	800359c <HAL_RCC_GetPCLK2Freq>
 8007e4a:	0043      	lsls	r3, r0, #1

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 8007e4c:	480d      	ldr	r0, [pc, #52]	; (8007e84 <HAL_InitTick+0x74>)
 8007e4e:	fba0 2303 	umull	r2, r3, r0, r3
 8007e52:	0c9b      	lsrs	r3, r3, #18
 8007e54:	3b01      	subs	r3, #1

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8007e56:	480c      	ldr	r0, [pc, #48]	; (8007e88 <HAL_InitTick+0x78>)
 8007e58:	4a0c      	ldr	r2, [pc, #48]	; (8007e8c <HAL_InitTick+0x7c>)
 8007e5a:	6002      	str	r2, [r0, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000 / 1000) - 1;
 8007e5c:	f240 32e7 	movw	r2, #999	; 0x3e7
 8007e60:	60c2      	str	r2, [r0, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8007e62:	6043      	str	r3, [r0, #4]
  htim1.Init.ClockDivision = 0;
 8007e64:	2300      	movs	r3, #0
 8007e66:	6103      	str	r3, [r0, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8007e68:	6083      	str	r3, [r0, #8]
  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 8007e6a:	f7fc ff75 	bl	8004d58 <HAL_TIM_Base_Init>
 8007e6e:	b118      	cbz	r0, 8007e78 <HAL_InitTick+0x68>
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
  }

  /* Return function status */
  return HAL_ERROR;
 8007e70:	2001      	movs	r0, #1
}
 8007e72:	b00b      	add	sp, #44	; 0x2c
 8007e74:	f85d fb04 	ldr.w	pc, [sp], #4
    return HAL_TIM_Base_Start_IT(&htim1);
 8007e78:	4803      	ldr	r0, [pc, #12]	; (8007e88 <HAL_InitTick+0x78>)
 8007e7a:	f7fc fdf9 	bl	8004a70 <HAL_TIM_Base_Start_IT>
 8007e7e:	e7f8      	b.n	8007e72 <HAL_InitTick+0x62>
 8007e80:	58024400 	.word	0x58024400
 8007e84:	431bde83 	.word	0x431bde83
 8007e88:	20000610 	.word	0x20000610
 8007e8c:	40010000 	.word	0x40010000

08007e90 <NMI_Handler>:

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8007e90:	4770      	bx	lr

08007e92 <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8007e92:	e7fe      	b.n	8007e92 <HardFault_Handler>

08007e94 <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8007e94:	e7fe      	b.n	8007e94 <MemManage_Handler>

08007e96 <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8007e96:	e7fe      	b.n	8007e96 <BusFault_Handler>

08007e98 <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8007e98:	e7fe      	b.n	8007e98 <UsageFault_Handler>

08007e9a <SVC_Handler>:

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8007e9a:	4770      	bx	lr

08007e9c <DebugMon_Handler>:

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8007e9c:	4770      	bx	lr

08007e9e <PendSV_Handler>:

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8007e9e:	4770      	bx	lr

08007ea0 <FDCAN1_IT0_IRQHandler>:

/**
  * @brief This function handles FDCAN1 interrupt 0.
  */
void FDCAN1_IT0_IRQHandler(void)
{
 8007ea0:	b508      	push	{r3, lr}
  /* USER CODE BEGIN FDCAN1_IT0_IRQn 0 */

  /* USER CODE END FDCAN1_IT0_IRQn 0 */
  HAL_FDCAN_IRQHandler(&hfdcan1);
 8007ea2:	4802      	ldr	r0, [pc, #8]	; (8007eac <FDCAN1_IT0_IRQHandler+0xc>)
 8007ea4:	f7f9 fc7a 	bl	800179c <HAL_FDCAN_IRQHandler>
  /* USER CODE BEGIN FDCAN1_IT0_IRQn 1 */

  /* USER CODE END FDCAN1_IT0_IRQn 1 */
}
 8007ea8:	bd08      	pop	{r3, pc}
 8007eaa:	bf00      	nop
 8007eac:	20000208 	.word	0x20000208

08007eb0 <FDCAN1_IT1_IRQHandler>:

/**
  * @brief This function handles FDCAN1 interrupt 1.
  */
void FDCAN1_IT1_IRQHandler(void)
{
 8007eb0:	b508      	push	{r3, lr}
  /* USER CODE BEGIN FDCAN1_IT1_IRQn 0 */

  /* USER CODE END FDCAN1_IT1_IRQn 0 */
  HAL_FDCAN_IRQHandler(&hfdcan1);
 8007eb2:	4802      	ldr	r0, [pc, #8]	; (8007ebc <FDCAN1_IT1_IRQHandler+0xc>)
 8007eb4:	f7f9 fc72 	bl	800179c <HAL_FDCAN_IRQHandler>
  /* USER CODE BEGIN FDCAN1_IT1_IRQn 1 */

  /* USER CODE END FDCAN1_IT1_IRQn 1 */
}
 8007eb8:	bd08      	pop	{r3, pc}
 8007eba:	bf00      	nop
 8007ebc:	20000208 	.word	0x20000208

08007ec0 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 8007ec0:	b508      	push	{r3, lr}
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8007ec2:	4802      	ldr	r0, [pc, #8]	; (8007ecc <TIM1_UP_IRQHandler+0xc>)
 8007ec4:	f7fc fdfb 	bl	8004abe <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 8007ec8:	bd08      	pop	{r3, pc}
 8007eca:	bf00      	nop
 8007ecc:	20000610 	.word	0x20000610

08007ed0 <OTG_HS_IRQHandler>:

/**
  * @brief This function handles USB On The Go HS global interrupt.
  */
void OTG_HS_IRQHandler(void)
{
 8007ed0:	b508      	push	{r3, lr}
  /* USER CODE BEGIN OTG_HS_IRQn 0 */

  /* USER CODE END OTG_HS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_HS);
 8007ed2:	4802      	ldr	r0, [pc, #8]	; (8007edc <OTG_HS_IRQHandler+0xc>)
 8007ed4:	f7fa f96a 	bl	80021ac <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_HS_IRQn 1 */

  /* USER CODE END OTG_HS_IRQn 1 */
}
 8007ed8:	bd08      	pop	{r3, pc}
 8007eda:	bf00      	nop
 8007edc:	2000192c 	.word	0x2000192c

08007ee0 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8007ee0:	b570      	push	{r4, r5, r6, lr}
 8007ee2:	460c      	mov	r4, r1
 8007ee4:	4616      	mov	r6, r2
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8007ee6:	2500      	movs	r5, #0
 8007ee8:	42b5      	cmp	r5, r6
 8007eea:	da07      	bge.n	8007efc <_read+0x1c>
	{
		*ptr++ = __io_getchar();
 8007eec:	f3af 8000 	nop.w
 8007ef0:	4621      	mov	r1, r4
 8007ef2:	f801 0b01 	strb.w	r0, [r1], #1
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8007ef6:	3501      	adds	r5, #1
		*ptr++ = __io_getchar();
 8007ef8:	460c      	mov	r4, r1
 8007efa:	e7f5      	b.n	8007ee8 <_read+0x8>
	}

return len;
}
 8007efc:	4630      	mov	r0, r6
 8007efe:	bd70      	pop	{r4, r5, r6, pc}

08007f00 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8007f00:	b570      	push	{r4, r5, r6, lr}
 8007f02:	460c      	mov	r4, r1
 8007f04:	4616      	mov	r6, r2
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8007f06:	2500      	movs	r5, #0
 8007f08:	42b5      	cmp	r5, r6
 8007f0a:	da05      	bge.n	8007f18 <_write+0x18>
	{
		__io_putchar(*ptr++);
 8007f0c:	f814 0b01 	ldrb.w	r0, [r4], #1
 8007f10:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8007f14:	3501      	adds	r5, #1
 8007f16:	e7f7      	b.n	8007f08 <_write+0x8>
	}
	return len;
}
 8007f18:	4630      	mov	r0, r6
 8007f1a:	bd70      	pop	{r4, r5, r6, pc}

08007f1c <_sbrk>:

caddr_t _sbrk(int incr)
{
 8007f1c:	b508      	push	{r3, lr}
 8007f1e:	4603      	mov	r3, r0
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8007f20:	4a0b      	ldr	r2, [pc, #44]	; (8007f50 <_sbrk+0x34>)
 8007f22:	6812      	ldr	r2, [r2, #0]
 8007f24:	b142      	cbz	r2, 8007f38 <_sbrk+0x1c>
		heap_end = &end;

	prev_heap_end = heap_end;
 8007f26:	4a0a      	ldr	r2, [pc, #40]	; (8007f50 <_sbrk+0x34>)
 8007f28:	6810      	ldr	r0, [r2, #0]
	if (heap_end + incr > stack_ptr)
 8007f2a:	4403      	add	r3, r0
 8007f2c:	466a      	mov	r2, sp
 8007f2e:	4293      	cmp	r3, r2
 8007f30:	d806      	bhi.n	8007f40 <_sbrk+0x24>
//		abort();
		errno = ENOMEM;
		return (caddr_t) -1;
	}

	heap_end += incr;
 8007f32:	4a07      	ldr	r2, [pc, #28]	; (8007f50 <_sbrk+0x34>)
 8007f34:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
}
 8007f36:	bd08      	pop	{r3, pc}
		heap_end = &end;
 8007f38:	4a05      	ldr	r2, [pc, #20]	; (8007f50 <_sbrk+0x34>)
 8007f3a:	4906      	ldr	r1, [pc, #24]	; (8007f54 <_sbrk+0x38>)
 8007f3c:	6011      	str	r1, [r2, #0]
 8007f3e:	e7f2      	b.n	8007f26 <_sbrk+0xa>
		errno = ENOMEM;
 8007f40:	f000 fad4 	bl	80084ec <__errno>
 8007f44:	230c      	movs	r3, #12
 8007f46:	6003      	str	r3, [r0, #0]
		return (caddr_t) -1;
 8007f48:	f04f 30ff 	mov.w	r0, #4294967295
 8007f4c:	e7f3      	b.n	8007f36 <_sbrk+0x1a>
 8007f4e:	bf00      	nop
 8007f50:	200005fc 	.word	0x200005fc
 8007f54:	20001f48 	.word	0x20001f48

08007f58 <_close>:

int _close(int file)
{
	return -1;
}
 8007f58:	f04f 30ff 	mov.w	r0, #4294967295
 8007f5c:	4770      	bx	lr

08007f5e <_fstat>:


int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
 8007f5e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8007f62:	604b      	str	r3, [r1, #4]
	return 0;
}
 8007f64:	2000      	movs	r0, #0
 8007f66:	4770      	bx	lr

08007f68 <_isatty>:

int _isatty(int file)
{
	return 1;
}
 8007f68:	2001      	movs	r0, #1
 8007f6a:	4770      	bx	lr

08007f6c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
	return 0;
}
 8007f6c:	2000      	movs	r0, #0
 8007f6e:	4770      	bx	lr

08007f70 <SystemInit>:
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8007f70:	4a18      	ldr	r2, [pc, #96]	; (8007fd4 <SystemInit+0x64>)
 8007f72:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8007f76:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8007f7a:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8007f7e:	4b16      	ldr	r3, [pc, #88]	; (8007fd8 <SystemInit+0x68>)
 8007f80:	681a      	ldr	r2, [r3, #0]
 8007f82:	f042 0201 	orr.w	r2, r2, #1
 8007f86:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8007f88:	2200      	movs	r2, #0
 8007f8a:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, CSSON , CSION,RC48ON, CSIKERON PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8007f8c:	6818      	ldr	r0, [r3, #0]
 8007f8e:	4913      	ldr	r1, [pc, #76]	; (8007fdc <SystemInit+0x6c>)
 8007f90:	4001      	ands	r1, r0
 8007f92:	6019      	str	r1, [r3, #0]

  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8007f94:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8007f96:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8007f98:	621a      	str	r2, [r3, #32]

  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x00000000;
 8007f9a:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00000000;
 8007f9c:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x00000000;
 8007f9e:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8007fa0:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x00000000;
 8007fa2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8007fa4:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x00000000;
 8007fa6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8007fa8:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8007faa:	6819      	ldr	r1, [r3, #0]
 8007fac:	f421 2180 	bic.w	r1, r1, #262144	; 0x40000
 8007fb0:	6019      	str	r1, [r3, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8007fb2:	661a      	str	r2, [r3, #96]	; 0x60
  SCB->VTOR = FLASH_BANK2_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
#endif /* VECT_TAB_SRAM */

#else
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8007fb4:	4b0a      	ldr	r3, [pc, #40]	; (8007fe0 <SystemInit+0x70>)
 8007fb6:	681a      	ldr	r2, [r3, #0]
 8007fb8:	4b0a      	ldr	r3, [pc, #40]	; (8007fe4 <SystemInit+0x74>)
 8007fba:	4013      	ands	r3, r2
 8007fbc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007fc0:	d202      	bcs.n	8007fc8 <SystemInit+0x58>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8007fc2:	4b09      	ldr	r3, [pc, #36]	; (8007fe8 <SystemInit+0x78>)
 8007fc4:	2201      	movs	r2, #1
 8007fc6:	601a      	str	r2, [r3, #0]

  /* Configure the Vector Table location add offset address for cortex-M7 ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D1_AXISRAM_BASE  | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM */
#else
  SCB->VTOR = FLASH_BANK1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8007fc8:	4b02      	ldr	r3, [pc, #8]	; (8007fd4 <SystemInit+0x64>)
 8007fca:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8007fce:	609a      	str	r2, [r3, #8]
#endif

#endif /*DUAL_CORE && CORE_CM4*/

}
 8007fd0:	4770      	bx	lr
 8007fd2:	bf00      	nop
 8007fd4:	e000ed00 	.word	0xe000ed00
 8007fd8:	58024400 	.word	0x58024400
 8007fdc:	eaf6ed7f 	.word	0xeaf6ed7f
 8007fe0:	5c001000 	.word	0x5c001000
 8007fe4:	ffff0000 	.word	0xffff0000
 8007fe8:	51008108 	.word	0x51008108

08007fec <Error_Handler>:

void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  while(1);
 8007fec:	e7fe      	b.n	8007fec <Error_Handler>
	...

08007ff0 <MX_USB_DEVICE_Init>:
  /* USER CODE END Error_Handler_Debug */
}

void MX_USB_DEVICE_Init(void)
{
 8007ff0:	b508      	push	{r3, lr}
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceHS, &HS_Desc, DEVICE_HS) != USBD_OK)
 8007ff2:	2201      	movs	r2, #1
 8007ff4:	490e      	ldr	r1, [pc, #56]	; (8008030 <MX_USB_DEVICE_Init+0x40>)
 8007ff6:	480f      	ldr	r0, [pc, #60]	; (8008034 <MX_USB_DEVICE_Init+0x44>)
 8007ff8:	f7fe faea 	bl	80065d0 <USBD_Init>
 8007ffc:	b980      	cbnz	r0, 8008020 <MX_USB_DEVICE_Init+0x30>
  {
    Error_Handler();
  }
  if (USBD_RegisterClass(&hUsbDeviceHS, &USBD_CDC) != USBD_OK)
 8007ffe:	490e      	ldr	r1, [pc, #56]	; (8008038 <MX_USB_DEVICE_Init+0x48>)
 8008000:	480c      	ldr	r0, [pc, #48]	; (8008034 <MX_USB_DEVICE_Init+0x44>)
 8008002:	f7fe fb0f 	bl	8006624 <USBD_RegisterClass>
 8008006:	b968      	cbnz	r0, 8008024 <MX_USB_DEVICE_Init+0x34>
  {
    Error_Handler();
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceHS, &USBD_Interface_fops_HS) != USBD_OK)
 8008008:	490c      	ldr	r1, [pc, #48]	; (800803c <MX_USB_DEVICE_Init+0x4c>)
 800800a:	480a      	ldr	r0, [pc, #40]	; (8008034 <MX_USB_DEVICE_Init+0x44>)
 800800c:	f7fe fa98 	bl	8006540 <USBD_CDC_RegisterInterface>
 8008010:	b950      	cbnz	r0, 8008028 <MX_USB_DEVICE_Init+0x38>
  {
    Error_Handler();
  }
  if (USBD_Start(&hUsbDeviceHS) != USBD_OK)
 8008012:	4808      	ldr	r0, [pc, #32]	; (8008034 <MX_USB_DEVICE_Init+0x44>)
 8008014:	f7fe fb28 	bl	8006668 <USBD_Start>
 8008018:	b940      	cbnz	r0, 800802c <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */
  HAL_PWREx_EnableUSBVoltageDetector();
 800801a:	f7fa fd19 	bl	8002a50 <HAL_PWREx_EnableUSBVoltageDetector>

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800801e:	bd08      	pop	{r3, pc}
    Error_Handler();
 8008020:	f7ff ffe4 	bl	8007fec <Error_Handler>
    Error_Handler();
 8008024:	f7ff ffe2 	bl	8007fec <Error_Handler>
    Error_Handler();
 8008028:	f7ff ffe0 	bl	8007fec <Error_Handler>
    Error_Handler();
 800802c:	f7ff ffde 	bl	8007fec <Error_Handler>
 8008030:	20000168 	.word	0x20000168
 8008034:	2000065c 	.word	0x2000065c
 8008038:	200000e0 	.word	0x200000e0
 800803c:	20000120 	.word	0x20000120

08008040 <CDC_DeInit_HS>:
static int8_t CDC_DeInit_HS(void)
{
  /* USER CODE BEGIN 9 */
  return (USBD_OK);
  /* USER CODE END 9 */
}
 8008040:	2000      	movs	r0, #0
 8008042:	4770      	bx	lr

08008044 <CDC_Control_HS>:
    break;
  }

  return (USBD_OK);
  /* USER CODE END 10 */
}
 8008044:	2000      	movs	r0, #0
 8008046:	4770      	bx	lr

08008048 <CDC_TransmitCplt_HS>:
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 14 */
  return result;
}
 8008048:	2000      	movs	r0, #0
 800804a:	4770      	bx	lr

0800804c <CDC_Receive_HS>:
{
 800804c:	b510      	push	{r4, lr}
 800804e:	4601      	mov	r1, r0
  USBD_CDC_SetRxBuffer(&hUsbDeviceHS, &Buf[0]);
 8008050:	4c04      	ldr	r4, [pc, #16]	; (8008064 <CDC_Receive_HS+0x18>)
 8008052:	4620      	mov	r0, r4
 8008054:	f7fe fa83 	bl	800655e <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceHS);
 8008058:	4620      	mov	r0, r4
 800805a:	f7fe faa0 	bl	800659e <USBD_CDC_ReceivePacket>
}
 800805e:	2000      	movs	r0, #0
 8008060:	bd10      	pop	{r4, pc}
 8008062:	bf00      	nop
 8008064:	2000065c 	.word	0x2000065c

08008068 <CDC_Init_HS>:
{
 8008068:	b510      	push	{r4, lr}
  USBD_CDC_SetTxBuffer(&hUsbDeviceHS, UserTxBufferHS, 0);
 800806a:	4c06      	ldr	r4, [pc, #24]	; (8008084 <CDC_Init_HS+0x1c>)
 800806c:	2200      	movs	r2, #0
 800806e:	4906      	ldr	r1, [pc, #24]	; (8008088 <CDC_Init_HS+0x20>)
 8008070:	4620      	mov	r0, r4
 8008072:	f7fe fa6c 	bl	800654e <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceHS, UserRxBufferHS);
 8008076:	4905      	ldr	r1, [pc, #20]	; (800808c <CDC_Init_HS+0x24>)
 8008078:	4620      	mov	r0, r4
 800807a:	f7fe fa70 	bl	800655e <USBD_CDC_SetRxBuffer>
}
 800807e:	2000      	movs	r0, #0
 8008080:	bd10      	pop	{r4, pc}
 8008082:	bf00      	nop
 8008084:	2000065c 	.word	0x2000065c
 8008088:	2000112c 	.word	0x2000112c
 800808c:	2000092c 	.word	0x2000092c

08008090 <CDC_Transmit_HS>:
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceHS.pClassData;
 8008090:	4b09      	ldr	r3, [pc, #36]	; (80080b8 <CDC_Transmit_HS+0x28>)
 8008092:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
  if (hcdc->TxState != 0){
 8008096:	f8d3 3814 	ldr.w	r3, [r3, #2068]	; 0x814
 800809a:	b10b      	cbz	r3, 80080a0 <CDC_Transmit_HS+0x10>
    return USBD_BUSY;
 800809c:	2001      	movs	r0, #1
}
 800809e:	4770      	bx	lr
{
 80080a0:	b510      	push	{r4, lr}
  USBD_CDC_SetTxBuffer(&hUsbDeviceHS, Buf, Len);
 80080a2:	4c05      	ldr	r4, [pc, #20]	; (80080b8 <CDC_Transmit_HS+0x28>)
 80080a4:	460a      	mov	r2, r1
 80080a6:	4601      	mov	r1, r0
 80080a8:	4620      	mov	r0, r4
 80080aa:	f7fe fa50 	bl	800654e <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceHS);
 80080ae:	4620      	mov	r0, r4
 80080b0:	f7fe fa5b 	bl	800656a <USBD_CDC_TransmitPacket>
}
 80080b4:	bd10      	pop	{r4, pc}
 80080b6:	bf00      	nop
 80080b8:	2000065c 	.word	0x2000065c

080080bc <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 80080bc:	b530      	push	{r4, r5, lr}
 80080be:	b089      	sub	sp, #36	; 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80080c0:	2300      	movs	r3, #0
 80080c2:	9303      	str	r3, [sp, #12]
 80080c4:	9304      	str	r3, [sp, #16]
 80080c6:	9305      	str	r3, [sp, #20]
 80080c8:	9306      	str	r3, [sp, #24]
 80080ca:	9307      	str	r3, [sp, #28]
  if(pcdHandle->Instance==USB_OTG_HS)
 80080cc:	6802      	ldr	r2, [r0, #0]
 80080ce:	4b1b      	ldr	r3, [pc, #108]	; (800813c <HAL_PCD_MspInit+0x80>)
 80080d0:	429a      	cmp	r2, r3
 80080d2:	d001      	beq.n	80080d8 <HAL_PCD_MspInit+0x1c>
    HAL_NVIC_EnableIRQ(OTG_HS_IRQn);
  /* USER CODE BEGIN USB_OTG_HS_MspInit 1 */

  /* USER CODE END USB_OTG_HS_MspInit 1 */
  }
}
 80080d4:	b009      	add	sp, #36	; 0x24
 80080d6:	bd30      	pop	{r4, r5, pc}
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80080d8:	4c19      	ldr	r4, [pc, #100]	; (8008140 <HAL_PCD_MspInit+0x84>)
 80080da:	f8d4 30e0 	ldr.w	r3, [r4, #224]	; 0xe0
 80080de:	f043 0302 	orr.w	r3, r3, #2
 80080e2:	f8c4 30e0 	str.w	r3, [r4, #224]	; 0xe0
 80080e6:	f8d4 30e0 	ldr.w	r3, [r4, #224]	; 0xe0
 80080ea:	f003 0302 	and.w	r3, r3, #2
 80080ee:	9301      	str	r3, [sp, #4]
 80080f0:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 80080f2:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 80080f6:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80080f8:	2302      	movs	r3, #2
 80080fa:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80080fc:	2500      	movs	r5, #0
 80080fe:	9505      	str	r5, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008100:	9506      	str	r5, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF12_OTG2_FS;
 8008102:	230c      	movs	r3, #12
 8008104:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8008106:	eb0d 0103 	add.w	r1, sp, r3
 800810a:	480e      	ldr	r0, [pc, #56]	; (8008144 <HAL_PCD_MspInit+0x88>)
 800810c:	f7f9 fcdc 	bl	8001ac8 <HAL_GPIO_Init>
    __HAL_RCC_USB_OTG_HS_CLK_ENABLE();
 8008110:	f8d4 30d8 	ldr.w	r3, [r4, #216]	; 0xd8
 8008114:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8008118:	f8c4 30d8 	str.w	r3, [r4, #216]	; 0xd8
 800811c:	f8d4 30d8 	ldr.w	r3, [r4, #216]	; 0xd8
 8008120:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008124:	9302      	str	r3, [sp, #8]
 8008126:	9b02      	ldr	r3, [sp, #8]
    HAL_NVIC_SetPriority(OTG_HS_IRQn, 0, 0);
 8008128:	462a      	mov	r2, r5
 800812a:	4629      	mov	r1, r5
 800812c:	204d      	movs	r0, #77	; 0x4d
 800812e:	f7f8 fe8f 	bl	8000e50 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_HS_IRQn);
 8008132:	204d      	movs	r0, #77	; 0x4d
 8008134:	f7f8 febe 	bl	8000eb4 <HAL_NVIC_EnableIRQ>
}
 8008138:	e7cc      	b.n	80080d4 <HAL_PCD_MspInit+0x18>
 800813a:	bf00      	nop
 800813c:	40040000 	.word	0x40040000
 8008140:	58024400 	.word	0x58024400
 8008144:	58020400 	.word	0x58020400

08008148 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008148:	b508      	push	{r3, lr}
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800814a:	f500 7171 	add.w	r1, r0, #964	; 0x3c4
 800814e:	f8d0 0404 	ldr.w	r0, [r0, #1028]	; 0x404
 8008152:	f7fe fa9e 	bl	8006692 <USBD_LL_SetupStage>
}
 8008156:	bd08      	pop	{r3, pc}

08008158 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008158:	b508      	push	{r3, lr}
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800815a:	ebc1 03c1 	rsb	r3, r1, r1, lsl #3
 800815e:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 8008162:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 8008166:	f8d0 0404 	ldr.w	r0, [r0, #1028]	; 0x404
 800816a:	f7fe fabe 	bl	80066ea <USBD_LL_DataOutStage>
}
 800816e:	bd08      	pop	{r3, pc}

08008170 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008170:	b508      	push	{r3, lr}
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8008172:	ebc1 03c1 	rsb	r3, r1, r1, lsl #3
 8008176:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 800817a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800817c:	f8d0 0404 	ldr.w	r0, [r0, #1028]	; 0x404
 8008180:	f7fe faec 	bl	800675c <USBD_LL_DataInStage>
}
 8008184:	bd08      	pop	{r3, pc}

08008186 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008186:	b508      	push	{r3, lr}
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8008188:	f8d0 0404 	ldr.w	r0, [r0, #1028]	; 0x404
 800818c:	f7fe fb82 	bl	8006894 <USBD_LL_SOF>
}
 8008190:	bd08      	pop	{r3, pc}

08008192 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008192:	b510      	push	{r4, lr}
 8008194:	4604      	mov	r4, r0
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 8008196:	68c3      	ldr	r3, [r0, #12]
 8008198:	b13b      	cbz	r3, 80081aa <HAL_PCD_ResetCallback+0x18>
  {
    speed = USBD_SPEED_HIGH;
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 800819a:	2b02      	cmp	r3, #2
 800819c:	d101      	bne.n	80081a2 <HAL_PCD_ResetCallback+0x10>
  {
    speed = USBD_SPEED_FULL;
 800819e:	2101      	movs	r1, #1
 80081a0:	e004      	b.n	80081ac <HAL_PCD_ResetCallback+0x1a>
  }
  else
  {
    Error_Handler();
 80081a2:	f7ff ff23 	bl	8007fec <Error_Handler>
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 80081a6:	2101      	movs	r1, #1
 80081a8:	e000      	b.n	80081ac <HAL_PCD_ResetCallback+0x1a>
    speed = USBD_SPEED_HIGH;
 80081aa:	2100      	movs	r1, #0
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 80081ac:	f8d4 0404 	ldr.w	r0, [r4, #1028]	; 0x404
 80081b0:	f7fe fb59 	bl	8006866 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 80081b4:	f8d4 0404 	ldr.w	r0, [r4, #1028]	; 0x404
 80081b8:	f7fe fb2c 	bl	8006814 <USBD_LL_Reset>
}
 80081bc:	bd10      	pop	{r4, pc}
	...

080081c0 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80081c0:	b510      	push	{r4, lr}
 80081c2:	4604      	mov	r4, r0
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 80081c4:	f8d0 0404 	ldr.w	r0, [r0, #1028]	; 0x404
 80081c8:	f7fe fb50 	bl	800686c <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 80081cc:	6822      	ldr	r2, [r4, #0]
 80081ce:	f8d2 3e00 	ldr.w	r3, [r2, #3584]	; 0xe00
 80081d2:	f043 0301 	orr.w	r3, r3, #1
 80081d6:	f8c2 3e00 	str.w	r3, [r2, #3584]	; 0xe00
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 80081da:	6a23      	ldr	r3, [r4, #32]
 80081dc:	b123      	cbz	r3, 80081e8 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80081de:	4a03      	ldr	r2, [pc, #12]	; (80081ec <HAL_PCD_SuspendCallback+0x2c>)
 80081e0:	6913      	ldr	r3, [r2, #16]
 80081e2:	f043 0306 	orr.w	r3, r3, #6
 80081e6:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 80081e8:	bd10      	pop	{r4, pc}
 80081ea:	bf00      	nop
 80081ec:	e000ed00 	.word	0xe000ed00

080081f0 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80081f0:	b508      	push	{r3, lr}
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 80081f2:	f8d0 0404 	ldr.w	r0, [r0, #1028]	; 0x404
 80081f6:	f7fe fb42 	bl	800687e <USBD_LL_Resume>
}
 80081fa:	bd08      	pop	{r3, pc}

080081fc <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80081fc:	b508      	push	{r3, lr}
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 80081fe:	f8d0 0404 	ldr.w	r0, [r0, #1028]	; 0x404
 8008202:	f7fe fb57 	bl	80068b4 <USBD_LL_IsoOUTIncomplete>
}
 8008206:	bd08      	pop	{r3, pc}

08008208 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008208:	b508      	push	{r3, lr}
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800820a:	f8d0 0404 	ldr.w	r0, [r0, #1028]	; 0x404
 800820e:	f7fe fb4f 	bl	80068b0 <USBD_LL_IsoINIncomplete>
}
 8008212:	bd08      	pop	{r3, pc}

08008214 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008214:	b508      	push	{r3, lr}
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8008216:	f8d0 0404 	ldr.w	r0, [r0, #1028]	; 0x404
 800821a:	f7fe fb4d 	bl	80068b8 <USBD_LL_DevConnected>
}
 800821e:	bd08      	pop	{r3, pc}

08008220 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008220:	b508      	push	{r3, lr}
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8008222:	f8d0 0404 	ldr.w	r0, [r0, #1028]	; 0x404
 8008226:	f7fe fb49 	bl	80068bc <USBD_LL_DevDisconnected>
}
 800822a:	bd08      	pop	{r3, pc}

0800822c <USBD_LL_Init>:
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
  /* Init USB Ip. */
  if (pdev->id == DEVICE_HS) {
 800822c:	7803      	ldrb	r3, [r0, #0]
 800822e:	2b01      	cmp	r3, #1
 8008230:	d001      	beq.n	8008236 <USBD_LL_Init+0xa>
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_HS, 0x200);
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_HS, 0, 0x80);
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_HS, 1, 0x174);
  }
  return USBD_OK;
}
 8008232:	2000      	movs	r0, #0
 8008234:	4770      	bx	lr
{
 8008236:	b510      	push	{r4, lr}
  hpcd_USB_OTG_HS.pData = pdev;
 8008238:	4b17      	ldr	r3, [pc, #92]	; (8008298 <USBD_LL_Init+0x6c>)
 800823a:	f8c3 0404 	str.w	r0, [r3, #1028]	; 0x404
  pdev->pData = &hpcd_USB_OTG_HS;
 800823e:	f8c0 32c4 	str.w	r3, [r0, #708]	; 0x2c4
  hpcd_USB_OTG_HS.Instance = USB_OTG_HS;
 8008242:	4a16      	ldr	r2, [pc, #88]	; (800829c <USBD_LL_Init+0x70>)
 8008244:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_HS.Init.dev_endpoints = 9;
 8008246:	2209      	movs	r2, #9
 8008248:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_HS.Init.speed = PCD_SPEED_FULL;
 800824a:	2102      	movs	r1, #2
 800824c:	60d9      	str	r1, [r3, #12]
  hpcd_USB_OTG_HS.Init.dma_enable = DISABLE;
 800824e:	2200      	movs	r2, #0
 8008250:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_HS.Init.phy_itface = USB_OTG_EMBEDDED_PHY;
 8008252:	6199      	str	r1, [r3, #24]
  hpcd_USB_OTG_HS.Init.Sof_enable = DISABLE;
 8008254:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_HS.Init.low_power_enable = DISABLE;
 8008256:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_HS.Init.lpm_enable = DISABLE;
 8008258:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_HS.Init.battery_charging_enable = ENABLE;
 800825a:	2101      	movs	r1, #1
 800825c:	6299      	str	r1, [r3, #40]	; 0x28
  hpcd_USB_OTG_HS.Init.vbus_sensing_enable = DISABLE;
 800825e:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_HS.Init.use_dedicated_ep1 = DISABLE;
 8008260:	631a      	str	r2, [r3, #48]	; 0x30
  hpcd_USB_OTG_HS.Init.use_external_vbus = DISABLE;
 8008262:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_PCD_Init(&hpcd_USB_OTG_HS) != HAL_OK)
 8008264:	4618      	mov	r0, r3
 8008266:	f7f9 fe42 	bl	8001eee <HAL_PCD_Init>
 800826a:	b990      	cbnz	r0, 8008292 <USBD_LL_Init+0x66>
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_HS, 0x200);
 800826c:	4c0a      	ldr	r4, [pc, #40]	; (8008298 <USBD_LL_Init+0x6c>)
 800826e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8008272:	4620      	mov	r0, r4
 8008274:	f7fa fba7 	bl	80029c6 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_HS, 0, 0x80);
 8008278:	2280      	movs	r2, #128	; 0x80
 800827a:	2100      	movs	r1, #0
 800827c:	4620      	mov	r0, r4
 800827e:	f7fa fb7e 	bl	800297e <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_HS, 1, 0x174);
 8008282:	f44f 72ba 	mov.w	r2, #372	; 0x174
 8008286:	2101      	movs	r1, #1
 8008288:	4620      	mov	r0, r4
 800828a:	f7fa fb78 	bl	800297e <HAL_PCDEx_SetTxFiFo>
}
 800828e:	2000      	movs	r0, #0
 8008290:	bd10      	pop	{r4, pc}
    Error_Handler( );
 8008292:	f7ff feab 	bl	8007fec <Error_Handler>
 8008296:	e7e9      	b.n	800826c <USBD_LL_Init+0x40>
 8008298:	2000192c 	.word	0x2000192c
 800829c:	40040000 	.word	0x40040000

080082a0 <USBD_LL_IsStallEP>:
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 80082a0:	f8d0 32c4 	ldr.w	r3, [r0, #708]	; 0x2c4

  if((ep_addr & 0x80) == 0x80)
 80082a4:	f011 0f80 	tst.w	r1, #128	; 0x80
 80082a8:	d108      	bne.n	80082bc <USBD_LL_IsStallEP+0x1c>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 80082aa:	f001 017f 	and.w	r1, r1, #127	; 0x7f
 80082ae:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
 80082b2:	eb03 0181 	add.w	r1, r3, r1, lsl #2
 80082b6:	f891 01fe 	ldrb.w	r0, [r1, #510]	; 0x1fe
  }
}
 80082ba:	4770      	bx	lr
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 80082bc:	f001 017f 	and.w	r1, r1, #127	; 0x7f
 80082c0:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
 80082c4:	eb03 0181 	add.w	r1, r3, r1, lsl #2
 80082c8:	f891 003e 	ldrb.w	r0, [r1, #62]	; 0x3e
 80082cc:	4770      	bx	lr

080082ce <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80082ce:	b508      	push	{r3, lr}
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 80082d0:	f8d0 02c4 	ldr.w	r0, [r0, #708]	; 0x2c4
 80082d4:	f7fa faa0 	bl	8002818 <HAL_PCD_EP_GetRxCount>
}
 80082d8:	bd08      	pop	{r3, pc}

080082da <USBD_Get_USB_Status>:
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
  USBD_StatusTypeDef usb_status = USBD_OK;

  switch (hal_status)
 80082da:	2803      	cmp	r0, #3
 80082dc:	d805      	bhi.n	80082ea <USBD_Get_USB_Status+0x10>
 80082de:	e8df f000 	tbb	[pc, r0]
 80082e2:	0405      	.short	0x0405
 80082e4:	0502      	.short	0x0502
    break;
    case HAL_ERROR :
      usb_status = USBD_FAIL;
    break;
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 80082e6:	2001      	movs	r0, #1
    break;
 80082e8:	4770      	bx	lr
      usb_status = USBD_FAIL;
 80082ea:	2003      	movs	r0, #3
    default :
      usb_status = USBD_FAIL;
    break;
  }
  return usb_status;
}
 80082ec:	4770      	bx	lr

080082ee <USBD_LL_Start>:
{
 80082ee:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_Start(pdev->pData);
 80082f0:	f8d0 02c4 	ldr.w	r0, [r0, #708]	; 0x2c4
 80082f4:	f7f9 fe95 	bl	8002022 <HAL_PCD_Start>
  usb_status =  USBD_Get_USB_Status(hal_status);
 80082f8:	f7ff ffef 	bl	80082da <USBD_Get_USB_Status>
}
 80082fc:	bd08      	pop	{r3, pc}

080082fe <USBD_LL_OpenEP>:
{
 80082fe:	b510      	push	{r4, lr}
 8008300:	4614      	mov	r4, r2
 8008302:	461a      	mov	r2, r3
  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8008304:	4623      	mov	r3, r4
 8008306:	f8d0 02c4 	ldr.w	r0, [r0, #708]	; 0x2c4
 800830a:	f7fa f9da 	bl	80026c2 <HAL_PCD_EP_Open>
  usb_status =  USBD_Get_USB_Status(hal_status);
 800830e:	f7ff ffe4 	bl	80082da <USBD_Get_USB_Status>
}
 8008312:	bd10      	pop	{r4, pc}

08008314 <USBD_LL_CloseEP>:
{
 8008314:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8008316:	f8d0 02c4 	ldr.w	r0, [r0, #708]	; 0x2c4
 800831a:	f7fa fa15 	bl	8002748 <HAL_PCD_EP_Close>
  usb_status =  USBD_Get_USB_Status(hal_status);
 800831e:	f7ff ffdc 	bl	80082da <USBD_Get_USB_Status>
}
 8008322:	bd08      	pop	{r3, pc}

08008324 <USBD_LL_StallEP>:
{
 8008324:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8008326:	f8d0 02c4 	ldr.w	r0, [r0, #708]	; 0x2c4
 800832a:	f7fa faa9 	bl	8002880 <HAL_PCD_EP_SetStall>
  usb_status =  USBD_Get_USB_Status(hal_status);
 800832e:	f7ff ffd4 	bl	80082da <USBD_Get_USB_Status>
}
 8008332:	bd08      	pop	{r3, pc}

08008334 <USBD_LL_ClearStallEP>:
{
 8008334:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8008336:	f8d0 02c4 	ldr.w	r0, [r0, #708]	; 0x2c4
 800833a:	f7fa fae5 	bl	8002908 <HAL_PCD_EP_ClrStall>
  usb_status =  USBD_Get_USB_Status(hal_status);
 800833e:	f7ff ffcc 	bl	80082da <USBD_Get_USB_Status>
}
 8008342:	bd08      	pop	{r3, pc}

08008344 <USBD_LL_SetUSBAddress>:
{
 8008344:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8008346:	f8d0 02c4 	ldr.w	r0, [r0, #708]	; 0x2c4
 800834a:	f7fa f9a6 	bl	800269a <HAL_PCD_SetAddress>
  usb_status =  USBD_Get_USB_Status(hal_status);
 800834e:	f7ff ffc4 	bl	80082da <USBD_Get_USB_Status>
}
 8008352:	bd08      	pop	{r3, pc}

08008354 <USBD_LL_Transmit>:
{
 8008354:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8008356:	f8d0 02c4 	ldr.w	r0, [r0, #708]	; 0x2c4
 800835a:	f7fa fa66 	bl	800282a <HAL_PCD_EP_Transmit>
  usb_status =  USBD_Get_USB_Status(hal_status);
 800835e:	f7ff ffbc 	bl	80082da <USBD_Get_USB_Status>
}
 8008362:	bd08      	pop	{r3, pc}

08008364 <USBD_LL_PrepareReceive>:
{
 8008364:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8008366:	f8d0 02c4 	ldr.w	r0, [r0, #708]	; 0x2c4
 800836a:	f7fa fa26 	bl	80027ba <HAL_PCD_EP_Receive>
  usb_status =  USBD_Get_USB_Status(hal_status);
 800836e:	f7ff ffb4 	bl	80082da <USBD_Get_USB_Status>
}
 8008372:	bd08      	pop	{r3, pc}

08008374 <USBD_HS_DeviceDescriptor>:
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
  UNUSED(speed);
  *length = sizeof(USBD_HS_DeviceDesc);
 8008374:	2312      	movs	r3, #18
 8008376:	800b      	strh	r3, [r1, #0]
  return USBD_HS_DeviceDesc;
}
 8008378:	4800      	ldr	r0, [pc, #0]	; (800837c <USBD_HS_DeviceDescriptor+0x8>)
 800837a:	4770      	bx	lr
 800837c:	20000134 	.word	0x20000134

08008380 <USBD_HS_LangIDStrDescriptor>:
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8008380:	2304      	movs	r3, #4
 8008382:	800b      	strh	r3, [r1, #0]
  return USBD_LangIDDesc;
}
 8008384:	4800      	ldr	r0, [pc, #0]	; (8008388 <USBD_HS_LangIDStrDescriptor+0x8>)
 8008386:	4770      	bx	lr
 8008388:	20000148 	.word	0x20000148

0800838c <IntToUnicode>:
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
  uint8_t idx = 0;

  for (idx = 0; idx < len; idx++)
 800838c:	2300      	movs	r3, #0
 800838e:	4293      	cmp	r3, r2
 8008390:	d217      	bcs.n	80083c2 <IntToUnicode+0x36>
{
 8008392:	b430      	push	{r4, r5}
 8008394:	e00b      	b.n	80083ae <IntToUnicode+0x22>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8008396:	3437      	adds	r4, #55	; 0x37
 8008398:	f801 4013 	strb.w	r4, [r1, r3, lsl #1]
    }

    value = value << 4;
 800839c:	0100      	lsls	r0, r0, #4

    pbuf[2 * idx + 1] = 0;
 800839e:	005c      	lsls	r4, r3, #1
 80083a0:	3401      	adds	r4, #1
 80083a2:	2500      	movs	r5, #0
 80083a4:	550d      	strb	r5, [r1, r4]
  for (idx = 0; idx < len; idx++)
 80083a6:	3301      	adds	r3, #1
 80083a8:	b2db      	uxtb	r3, r3
 80083aa:	4293      	cmp	r3, r2
 80083ac:	d207      	bcs.n	80083be <IntToUnicode+0x32>
    if (((value >> 28)) < 0xA)
 80083ae:	0f04      	lsrs	r4, r0, #28
 80083b0:	f1b0 4f20 	cmp.w	r0, #2684354560	; 0xa0000000
 80083b4:	d2ef      	bcs.n	8008396 <IntToUnicode+0xa>
      pbuf[2 * idx] = (value >> 28) + '0';
 80083b6:	3430      	adds	r4, #48	; 0x30
 80083b8:	f801 4013 	strb.w	r4, [r1, r3, lsl #1]
 80083bc:	e7ee      	b.n	800839c <IntToUnicode+0x10>
  }
}
 80083be:	bc30      	pop	{r4, r5}
 80083c0:	4770      	bx	lr
 80083c2:	4770      	bx	lr

080083c4 <Get_SerialNum>:
{
 80083c4:	b538      	push	{r3, r4, r5, lr}
  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 80083c6:	4b0b      	ldr	r3, [pc, #44]	; (80083f4 <Get_SerialNum+0x30>)
 80083c8:	6818      	ldr	r0, [r3, #0]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 80083ca:	3304      	adds	r3, #4
 80083cc:	681c      	ldr	r4, [r3, #0]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 80083ce:	3304      	adds	r3, #4
 80083d0:	681b      	ldr	r3, [r3, #0]
  if (deviceserial0 != 0)
 80083d2:	18c0      	adds	r0, r0, r3
 80083d4:	d100      	bne.n	80083d8 <Get_SerialNum+0x14>
}
 80083d6:	bd38      	pop	{r3, r4, r5, pc}
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 80083d8:	4d07      	ldr	r5, [pc, #28]	; (80083f8 <Get_SerialNum+0x34>)
 80083da:	2208      	movs	r2, #8
 80083dc:	f105 011a 	add.w	r1, r5, #26
 80083e0:	f7ff ffd4 	bl	800838c <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 80083e4:	2204      	movs	r2, #4
 80083e6:	f105 012a 	add.w	r1, r5, #42	; 0x2a
 80083ea:	4620      	mov	r0, r4
 80083ec:	f7ff ffce 	bl	800838c <IntToUnicode>
}
 80083f0:	e7f1      	b.n	80083d6 <Get_SerialNum+0x12>
 80083f2:	bf00      	nop
 80083f4:	1ff1e800 	.word	0x1ff1e800
 80083f8:	20000134 	.word	0x20000134

080083fc <USBD_HS_SerialStrDescriptor>:
{
 80083fc:	b508      	push	{r3, lr}
  *length = USB_SIZ_STRING_SERIAL;
 80083fe:	231a      	movs	r3, #26
 8008400:	800b      	strh	r3, [r1, #0]
  Get_SerialNum();
 8008402:	f7ff ffdf 	bl	80083c4 <Get_SerialNum>
}
 8008406:	4801      	ldr	r0, [pc, #4]	; (800840c <USBD_HS_SerialStrDescriptor+0x10>)
 8008408:	bd08      	pop	{r3, pc}
 800840a:	bf00      	nop
 800840c:	2000014c 	.word	0x2000014c

08008410 <USBD_HS_ProductStrDescriptor>:
{
 8008410:	b508      	push	{r3, lr}
 8008412:	460a      	mov	r2, r1
  if(speed == 0)
 8008414:	b928      	cbnz	r0, 8008422 <USBD_HS_ProductStrDescriptor+0x12>
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_HS, USBD_StrDesc, length);
 8008416:	4905      	ldr	r1, [pc, #20]	; (800842c <USBD_HS_ProductStrDescriptor+0x1c>)
 8008418:	4805      	ldr	r0, [pc, #20]	; (8008430 <USBD_HS_ProductStrDescriptor+0x20>)
 800841a:	f7fe fd9e 	bl	8006f5a <USBD_GetString>
}
 800841e:	4803      	ldr	r0, [pc, #12]	; (800842c <USBD_HS_ProductStrDescriptor+0x1c>)
 8008420:	bd08      	pop	{r3, pc}
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_HS, USBD_StrDesc, length);
 8008422:	4902      	ldr	r1, [pc, #8]	; (800842c <USBD_HS_ProductStrDescriptor+0x1c>)
 8008424:	4802      	ldr	r0, [pc, #8]	; (8008430 <USBD_HS_ProductStrDescriptor+0x20>)
 8008426:	f7fe fd98 	bl	8006f5a <USBD_GetString>
 800842a:	e7f8      	b.n	800841e <USBD_HS_ProductStrDescriptor+0xe>
 800842c:	20001d34 	.word	0x20001d34
 8008430:	08009614 	.word	0x08009614

08008434 <USBD_HS_ManufacturerStrDescriptor>:
{
 8008434:	b510      	push	{r4, lr}
 8008436:	460a      	mov	r2, r1
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8008438:	4c03      	ldr	r4, [pc, #12]	; (8008448 <USBD_HS_ManufacturerStrDescriptor+0x14>)
 800843a:	4621      	mov	r1, r4
 800843c:	4803      	ldr	r0, [pc, #12]	; (800844c <USBD_HS_ManufacturerStrDescriptor+0x18>)
 800843e:	f7fe fd8c 	bl	8006f5a <USBD_GetString>
}
 8008442:	4620      	mov	r0, r4
 8008444:	bd10      	pop	{r4, pc}
 8008446:	bf00      	nop
 8008448:	20001d34 	.word	0x20001d34
 800844c:	0800962c 	.word	0x0800962c

08008450 <USBD_HS_ConfigStrDescriptor>:
{
 8008450:	b508      	push	{r3, lr}
 8008452:	460a      	mov	r2, r1
  if(speed == USBD_SPEED_HIGH)
 8008454:	b928      	cbnz	r0, 8008462 <USBD_HS_ConfigStrDescriptor+0x12>
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_HS, USBD_StrDesc, length);
 8008456:	4905      	ldr	r1, [pc, #20]	; (800846c <USBD_HS_ConfigStrDescriptor+0x1c>)
 8008458:	4805      	ldr	r0, [pc, #20]	; (8008470 <USBD_HS_ConfigStrDescriptor+0x20>)
 800845a:	f7fe fd7e 	bl	8006f5a <USBD_GetString>
}
 800845e:	4803      	ldr	r0, [pc, #12]	; (800846c <USBD_HS_ConfigStrDescriptor+0x1c>)
 8008460:	bd08      	pop	{r3, pc}
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_HS, USBD_StrDesc, length);
 8008462:	4902      	ldr	r1, [pc, #8]	; (800846c <USBD_HS_ConfigStrDescriptor+0x1c>)
 8008464:	4802      	ldr	r0, [pc, #8]	; (8008470 <USBD_HS_ConfigStrDescriptor+0x20>)
 8008466:	f7fe fd78 	bl	8006f5a <USBD_GetString>
 800846a:	e7f8      	b.n	800845e <USBD_HS_ConfigStrDescriptor+0xe>
 800846c:	20001d34 	.word	0x20001d34
 8008470:	08009640 	.word	0x08009640

08008474 <USBD_HS_InterfaceStrDescriptor>:
{
 8008474:	b508      	push	{r3, lr}
 8008476:	460a      	mov	r2, r1
  if(speed == 0)
 8008478:	b928      	cbnz	r0, 8008486 <USBD_HS_InterfaceStrDescriptor+0x12>
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_HS, USBD_StrDesc, length);
 800847a:	4905      	ldr	r1, [pc, #20]	; (8008490 <USBD_HS_InterfaceStrDescriptor+0x1c>)
 800847c:	4805      	ldr	r0, [pc, #20]	; (8008494 <USBD_HS_InterfaceStrDescriptor+0x20>)
 800847e:	f7fe fd6c 	bl	8006f5a <USBD_GetString>
}
 8008482:	4803      	ldr	r0, [pc, #12]	; (8008490 <USBD_HS_InterfaceStrDescriptor+0x1c>)
 8008484:	bd08      	pop	{r3, pc}
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_HS, USBD_StrDesc, length);
 8008486:	4902      	ldr	r1, [pc, #8]	; (8008490 <USBD_HS_InterfaceStrDescriptor+0x1c>)
 8008488:	4802      	ldr	r0, [pc, #8]	; (8008494 <USBD_HS_InterfaceStrDescriptor+0x20>)
 800848a:	f7fe fd66 	bl	8006f5a <USBD_GetString>
 800848e:	e7f8      	b.n	8008482 <USBD_HS_InterfaceStrDescriptor+0xe>
 8008490:	20001d34 	.word	0x20001d34
 8008494:	0800964c 	.word	0x0800964c

08008498 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8008498:	f8df d034 	ldr.w	sp, [pc, #52]	; 80084d0 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 800849c:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800849e:	e003      	b.n	80084a8 <LoopCopyDataInit>

080084a0 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80084a0:	4b0c      	ldr	r3, [pc, #48]	; (80084d4 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80084a2:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80084a4:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80084a6:	3104      	adds	r1, #4

080084a8 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80084a8:	480b      	ldr	r0, [pc, #44]	; (80084d8 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80084aa:	4b0c      	ldr	r3, [pc, #48]	; (80084dc <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80084ac:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80084ae:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80084b0:	d3f6      	bcc.n	80084a0 <CopyDataInit>
  ldr  r2, =_sbss
 80084b2:	4a0b      	ldr	r2, [pc, #44]	; (80084e0 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80084b4:	e002      	b.n	80084bc <LoopFillZerobss>

080084b6 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80084b6:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80084b8:	f842 3b04 	str.w	r3, [r2], #4

080084bc <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80084bc:	4b09      	ldr	r3, [pc, #36]	; (80084e4 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80084be:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80084c0:	d3f9      	bcc.n	80084b6 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80084c2:	f7ff fd55 	bl	8007f70 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80084c6:	f000 f817 	bl	80084f8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80084ca:	f7ff fb0d 	bl	8007ae8 <main>
  bx  lr    
 80084ce:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80084d0:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 80084d4:	0800970c 	.word	0x0800970c
  ldr  r0, =_sdata
 80084d8:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 80084dc:	200001e8 	.word	0x200001e8
  ldr  r2, =_sbss
 80084e0:	200001e8 	.word	0x200001e8
  ldr  r3, = _ebss
 80084e4:	20001f44 	.word	0x20001f44

080084e8 <ADC3_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80084e8:	e7fe      	b.n	80084e8 <ADC3_IRQHandler>
	...

080084ec <__errno>:
 80084ec:	4b01      	ldr	r3, [pc, #4]	; (80084f4 <__errno+0x8>)
 80084ee:	6818      	ldr	r0, [r3, #0]
 80084f0:	4770      	bx	lr
 80084f2:	bf00      	nop
 80084f4:	20000184 	.word	0x20000184

080084f8 <__libc_init_array>:
 80084f8:	b570      	push	{r4, r5, r6, lr}
 80084fa:	4d0d      	ldr	r5, [pc, #52]	; (8008530 <__libc_init_array+0x38>)
 80084fc:	4c0d      	ldr	r4, [pc, #52]	; (8008534 <__libc_init_array+0x3c>)
 80084fe:	1b64      	subs	r4, r4, r5
 8008500:	10a4      	asrs	r4, r4, #2
 8008502:	2600      	movs	r6, #0
 8008504:	42a6      	cmp	r6, r4
 8008506:	d109      	bne.n	800851c <__libc_init_array+0x24>
 8008508:	4d0b      	ldr	r5, [pc, #44]	; (8008538 <__libc_init_array+0x40>)
 800850a:	4c0c      	ldr	r4, [pc, #48]	; (800853c <__libc_init_array+0x44>)
 800850c:	f000 fff2 	bl	80094f4 <_init>
 8008510:	1b64      	subs	r4, r4, r5
 8008512:	10a4      	asrs	r4, r4, #2
 8008514:	2600      	movs	r6, #0
 8008516:	42a6      	cmp	r6, r4
 8008518:	d105      	bne.n	8008526 <__libc_init_array+0x2e>
 800851a:	bd70      	pop	{r4, r5, r6, pc}
 800851c:	f855 3b04 	ldr.w	r3, [r5], #4
 8008520:	4798      	blx	r3
 8008522:	3601      	adds	r6, #1
 8008524:	e7ee      	b.n	8008504 <__libc_init_array+0xc>
 8008526:	f855 3b04 	ldr.w	r3, [r5], #4
 800852a:	4798      	blx	r3
 800852c:	3601      	adds	r6, #1
 800852e:	e7f2      	b.n	8008516 <__libc_init_array+0x1e>
 8008530:	080096fc 	.word	0x080096fc
 8008534:	080096fc 	.word	0x080096fc
 8008538:	080096fc 	.word	0x080096fc
 800853c:	08009704 	.word	0x08009704

08008540 <malloc>:
 8008540:	4b02      	ldr	r3, [pc, #8]	; (800854c <malloc+0xc>)
 8008542:	4601      	mov	r1, r0
 8008544:	6818      	ldr	r0, [r3, #0]
 8008546:	f000 b871 	b.w	800862c <_malloc_r>
 800854a:	bf00      	nop
 800854c:	20000184 	.word	0x20000184

08008550 <free>:
 8008550:	4b02      	ldr	r3, [pc, #8]	; (800855c <free+0xc>)
 8008552:	4601      	mov	r1, r0
 8008554:	6818      	ldr	r0, [r3, #0]
 8008556:	f000 b819 	b.w	800858c <_free_r>
 800855a:	bf00      	nop
 800855c:	20000184 	.word	0x20000184

08008560 <memcpy>:
 8008560:	440a      	add	r2, r1
 8008562:	4291      	cmp	r1, r2
 8008564:	f100 33ff 	add.w	r3, r0, #4294967295
 8008568:	d100      	bne.n	800856c <memcpy+0xc>
 800856a:	4770      	bx	lr
 800856c:	b510      	push	{r4, lr}
 800856e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008572:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008576:	4291      	cmp	r1, r2
 8008578:	d1f9      	bne.n	800856e <memcpy+0xe>
 800857a:	bd10      	pop	{r4, pc}

0800857c <memset>:
 800857c:	4402      	add	r2, r0
 800857e:	4603      	mov	r3, r0
 8008580:	4293      	cmp	r3, r2
 8008582:	d100      	bne.n	8008586 <memset+0xa>
 8008584:	4770      	bx	lr
 8008586:	f803 1b01 	strb.w	r1, [r3], #1
 800858a:	e7f9      	b.n	8008580 <memset+0x4>

0800858c <_free_r>:
 800858c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800858e:	2900      	cmp	r1, #0
 8008590:	d048      	beq.n	8008624 <_free_r+0x98>
 8008592:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008596:	9001      	str	r0, [sp, #4]
 8008598:	2b00      	cmp	r3, #0
 800859a:	f1a1 0404 	sub.w	r4, r1, #4
 800859e:	bfb8      	it	lt
 80085a0:	18e4      	addlt	r4, r4, r3
 80085a2:	f000 f9d3 	bl	800894c <__malloc_lock>
 80085a6:	4a20      	ldr	r2, [pc, #128]	; (8008628 <_free_r+0x9c>)
 80085a8:	9801      	ldr	r0, [sp, #4]
 80085aa:	6813      	ldr	r3, [r2, #0]
 80085ac:	4615      	mov	r5, r2
 80085ae:	b933      	cbnz	r3, 80085be <_free_r+0x32>
 80085b0:	6063      	str	r3, [r4, #4]
 80085b2:	6014      	str	r4, [r2, #0]
 80085b4:	b003      	add	sp, #12
 80085b6:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80085ba:	f000 b9cd 	b.w	8008958 <__malloc_unlock>
 80085be:	42a3      	cmp	r3, r4
 80085c0:	d90b      	bls.n	80085da <_free_r+0x4e>
 80085c2:	6821      	ldr	r1, [r4, #0]
 80085c4:	1862      	adds	r2, r4, r1
 80085c6:	4293      	cmp	r3, r2
 80085c8:	bf04      	itt	eq
 80085ca:	681a      	ldreq	r2, [r3, #0]
 80085cc:	685b      	ldreq	r3, [r3, #4]
 80085ce:	6063      	str	r3, [r4, #4]
 80085d0:	bf04      	itt	eq
 80085d2:	1852      	addeq	r2, r2, r1
 80085d4:	6022      	streq	r2, [r4, #0]
 80085d6:	602c      	str	r4, [r5, #0]
 80085d8:	e7ec      	b.n	80085b4 <_free_r+0x28>
 80085da:	461a      	mov	r2, r3
 80085dc:	685b      	ldr	r3, [r3, #4]
 80085de:	b10b      	cbz	r3, 80085e4 <_free_r+0x58>
 80085e0:	42a3      	cmp	r3, r4
 80085e2:	d9fa      	bls.n	80085da <_free_r+0x4e>
 80085e4:	6811      	ldr	r1, [r2, #0]
 80085e6:	1855      	adds	r5, r2, r1
 80085e8:	42a5      	cmp	r5, r4
 80085ea:	d10b      	bne.n	8008604 <_free_r+0x78>
 80085ec:	6824      	ldr	r4, [r4, #0]
 80085ee:	4421      	add	r1, r4
 80085f0:	1854      	adds	r4, r2, r1
 80085f2:	42a3      	cmp	r3, r4
 80085f4:	6011      	str	r1, [r2, #0]
 80085f6:	d1dd      	bne.n	80085b4 <_free_r+0x28>
 80085f8:	681c      	ldr	r4, [r3, #0]
 80085fa:	685b      	ldr	r3, [r3, #4]
 80085fc:	6053      	str	r3, [r2, #4]
 80085fe:	4421      	add	r1, r4
 8008600:	6011      	str	r1, [r2, #0]
 8008602:	e7d7      	b.n	80085b4 <_free_r+0x28>
 8008604:	d902      	bls.n	800860c <_free_r+0x80>
 8008606:	230c      	movs	r3, #12
 8008608:	6003      	str	r3, [r0, #0]
 800860a:	e7d3      	b.n	80085b4 <_free_r+0x28>
 800860c:	6825      	ldr	r5, [r4, #0]
 800860e:	1961      	adds	r1, r4, r5
 8008610:	428b      	cmp	r3, r1
 8008612:	bf04      	itt	eq
 8008614:	6819      	ldreq	r1, [r3, #0]
 8008616:	685b      	ldreq	r3, [r3, #4]
 8008618:	6063      	str	r3, [r4, #4]
 800861a:	bf04      	itt	eq
 800861c:	1949      	addeq	r1, r1, r5
 800861e:	6021      	streq	r1, [r4, #0]
 8008620:	6054      	str	r4, [r2, #4]
 8008622:	e7c7      	b.n	80085b4 <_free_r+0x28>
 8008624:	b003      	add	sp, #12
 8008626:	bd30      	pop	{r4, r5, pc}
 8008628:	20000604 	.word	0x20000604

0800862c <_malloc_r>:
 800862c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800862e:	1ccd      	adds	r5, r1, #3
 8008630:	f025 0503 	bic.w	r5, r5, #3
 8008634:	3508      	adds	r5, #8
 8008636:	2d0c      	cmp	r5, #12
 8008638:	bf38      	it	cc
 800863a:	250c      	movcc	r5, #12
 800863c:	2d00      	cmp	r5, #0
 800863e:	4606      	mov	r6, r0
 8008640:	db01      	blt.n	8008646 <_malloc_r+0x1a>
 8008642:	42a9      	cmp	r1, r5
 8008644:	d903      	bls.n	800864e <_malloc_r+0x22>
 8008646:	230c      	movs	r3, #12
 8008648:	6033      	str	r3, [r6, #0]
 800864a:	2000      	movs	r0, #0
 800864c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800864e:	f000 f97d 	bl	800894c <__malloc_lock>
 8008652:	4921      	ldr	r1, [pc, #132]	; (80086d8 <_malloc_r+0xac>)
 8008654:	680a      	ldr	r2, [r1, #0]
 8008656:	4614      	mov	r4, r2
 8008658:	b99c      	cbnz	r4, 8008682 <_malloc_r+0x56>
 800865a:	4f20      	ldr	r7, [pc, #128]	; (80086dc <_malloc_r+0xb0>)
 800865c:	683b      	ldr	r3, [r7, #0]
 800865e:	b923      	cbnz	r3, 800866a <_malloc_r+0x3e>
 8008660:	4621      	mov	r1, r4
 8008662:	4630      	mov	r0, r6
 8008664:	f000 f86a 	bl	800873c <_sbrk_r>
 8008668:	6038      	str	r0, [r7, #0]
 800866a:	4629      	mov	r1, r5
 800866c:	4630      	mov	r0, r6
 800866e:	f000 f865 	bl	800873c <_sbrk_r>
 8008672:	1c43      	adds	r3, r0, #1
 8008674:	d123      	bne.n	80086be <_malloc_r+0x92>
 8008676:	230c      	movs	r3, #12
 8008678:	6033      	str	r3, [r6, #0]
 800867a:	4630      	mov	r0, r6
 800867c:	f000 f96c 	bl	8008958 <__malloc_unlock>
 8008680:	e7e3      	b.n	800864a <_malloc_r+0x1e>
 8008682:	6823      	ldr	r3, [r4, #0]
 8008684:	1b5b      	subs	r3, r3, r5
 8008686:	d417      	bmi.n	80086b8 <_malloc_r+0x8c>
 8008688:	2b0b      	cmp	r3, #11
 800868a:	d903      	bls.n	8008694 <_malloc_r+0x68>
 800868c:	6023      	str	r3, [r4, #0]
 800868e:	441c      	add	r4, r3
 8008690:	6025      	str	r5, [r4, #0]
 8008692:	e004      	b.n	800869e <_malloc_r+0x72>
 8008694:	6863      	ldr	r3, [r4, #4]
 8008696:	42a2      	cmp	r2, r4
 8008698:	bf0c      	ite	eq
 800869a:	600b      	streq	r3, [r1, #0]
 800869c:	6053      	strne	r3, [r2, #4]
 800869e:	4630      	mov	r0, r6
 80086a0:	f000 f95a 	bl	8008958 <__malloc_unlock>
 80086a4:	f104 000b 	add.w	r0, r4, #11
 80086a8:	1d23      	adds	r3, r4, #4
 80086aa:	f020 0007 	bic.w	r0, r0, #7
 80086ae:	1ac2      	subs	r2, r0, r3
 80086b0:	d0cc      	beq.n	800864c <_malloc_r+0x20>
 80086b2:	1a1b      	subs	r3, r3, r0
 80086b4:	50a3      	str	r3, [r4, r2]
 80086b6:	e7c9      	b.n	800864c <_malloc_r+0x20>
 80086b8:	4622      	mov	r2, r4
 80086ba:	6864      	ldr	r4, [r4, #4]
 80086bc:	e7cc      	b.n	8008658 <_malloc_r+0x2c>
 80086be:	1cc4      	adds	r4, r0, #3
 80086c0:	f024 0403 	bic.w	r4, r4, #3
 80086c4:	42a0      	cmp	r0, r4
 80086c6:	d0e3      	beq.n	8008690 <_malloc_r+0x64>
 80086c8:	1a21      	subs	r1, r4, r0
 80086ca:	4630      	mov	r0, r6
 80086cc:	f000 f836 	bl	800873c <_sbrk_r>
 80086d0:	3001      	adds	r0, #1
 80086d2:	d1dd      	bne.n	8008690 <_malloc_r+0x64>
 80086d4:	e7cf      	b.n	8008676 <_malloc_r+0x4a>
 80086d6:	bf00      	nop
 80086d8:	20000604 	.word	0x20000604
 80086dc:	20000608 	.word	0x20000608

080086e0 <iprintf>:
 80086e0:	b40f      	push	{r0, r1, r2, r3}
 80086e2:	4b0a      	ldr	r3, [pc, #40]	; (800870c <iprintf+0x2c>)
 80086e4:	b513      	push	{r0, r1, r4, lr}
 80086e6:	681c      	ldr	r4, [r3, #0]
 80086e8:	b124      	cbz	r4, 80086f4 <iprintf+0x14>
 80086ea:	69a3      	ldr	r3, [r4, #24]
 80086ec:	b913      	cbnz	r3, 80086f4 <iprintf+0x14>
 80086ee:	4620      	mov	r0, r4
 80086f0:	f000 f88c 	bl	800880c <__sinit>
 80086f4:	ab05      	add	r3, sp, #20
 80086f6:	9a04      	ldr	r2, [sp, #16]
 80086f8:	68a1      	ldr	r1, [r4, #8]
 80086fa:	9301      	str	r3, [sp, #4]
 80086fc:	4620      	mov	r0, r4
 80086fe:	f000 f95b 	bl	80089b8 <_vfiprintf_r>
 8008702:	b002      	add	sp, #8
 8008704:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008708:	b004      	add	sp, #16
 800870a:	4770      	bx	lr
 800870c:	20000184 	.word	0x20000184

08008710 <putchar>:
 8008710:	4b09      	ldr	r3, [pc, #36]	; (8008738 <putchar+0x28>)
 8008712:	b513      	push	{r0, r1, r4, lr}
 8008714:	681c      	ldr	r4, [r3, #0]
 8008716:	4601      	mov	r1, r0
 8008718:	b134      	cbz	r4, 8008728 <putchar+0x18>
 800871a:	69a3      	ldr	r3, [r4, #24]
 800871c:	b923      	cbnz	r3, 8008728 <putchar+0x18>
 800871e:	9001      	str	r0, [sp, #4]
 8008720:	4620      	mov	r0, r4
 8008722:	f000 f873 	bl	800880c <__sinit>
 8008726:	9901      	ldr	r1, [sp, #4]
 8008728:	68a2      	ldr	r2, [r4, #8]
 800872a:	4620      	mov	r0, r4
 800872c:	b002      	add	sp, #8
 800872e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008732:	f000 bc05 	b.w	8008f40 <_putc_r>
 8008736:	bf00      	nop
 8008738:	20000184 	.word	0x20000184

0800873c <_sbrk_r>:
 800873c:	b538      	push	{r3, r4, r5, lr}
 800873e:	4d06      	ldr	r5, [pc, #24]	; (8008758 <_sbrk_r+0x1c>)
 8008740:	2300      	movs	r3, #0
 8008742:	4604      	mov	r4, r0
 8008744:	4608      	mov	r0, r1
 8008746:	602b      	str	r3, [r5, #0]
 8008748:	f7ff fbe8 	bl	8007f1c <_sbrk>
 800874c:	1c43      	adds	r3, r0, #1
 800874e:	d102      	bne.n	8008756 <_sbrk_r+0x1a>
 8008750:	682b      	ldr	r3, [r5, #0]
 8008752:	b103      	cbz	r3, 8008756 <_sbrk_r+0x1a>
 8008754:	6023      	str	r3, [r4, #0]
 8008756:	bd38      	pop	{r3, r4, r5, pc}
 8008758:	20001f40 	.word	0x20001f40

0800875c <std>:
 800875c:	2300      	movs	r3, #0
 800875e:	b510      	push	{r4, lr}
 8008760:	4604      	mov	r4, r0
 8008762:	e9c0 3300 	strd	r3, r3, [r0]
 8008766:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800876a:	6083      	str	r3, [r0, #8]
 800876c:	8181      	strh	r1, [r0, #12]
 800876e:	6643      	str	r3, [r0, #100]	; 0x64
 8008770:	81c2      	strh	r2, [r0, #14]
 8008772:	6183      	str	r3, [r0, #24]
 8008774:	4619      	mov	r1, r3
 8008776:	2208      	movs	r2, #8
 8008778:	305c      	adds	r0, #92	; 0x5c
 800877a:	f7ff feff 	bl	800857c <memset>
 800877e:	4b05      	ldr	r3, [pc, #20]	; (8008794 <std+0x38>)
 8008780:	6263      	str	r3, [r4, #36]	; 0x24
 8008782:	4b05      	ldr	r3, [pc, #20]	; (8008798 <std+0x3c>)
 8008784:	62a3      	str	r3, [r4, #40]	; 0x28
 8008786:	4b05      	ldr	r3, [pc, #20]	; (800879c <std+0x40>)
 8008788:	62e3      	str	r3, [r4, #44]	; 0x2c
 800878a:	4b05      	ldr	r3, [pc, #20]	; (80087a0 <std+0x44>)
 800878c:	6224      	str	r4, [r4, #32]
 800878e:	6323      	str	r3, [r4, #48]	; 0x30
 8008790:	bd10      	pop	{r4, pc}
 8008792:	bf00      	nop
 8008794:	08008fd1 	.word	0x08008fd1
 8008798:	08008ff3 	.word	0x08008ff3
 800879c:	0800902b 	.word	0x0800902b
 80087a0:	0800904f 	.word	0x0800904f

080087a4 <_cleanup_r>:
 80087a4:	4901      	ldr	r1, [pc, #4]	; (80087ac <_cleanup_r+0x8>)
 80087a6:	f000 b8af 	b.w	8008908 <_fwalk_reent>
 80087aa:	bf00      	nop
 80087ac:	08009329 	.word	0x08009329

080087b0 <__sfmoreglue>:
 80087b0:	b570      	push	{r4, r5, r6, lr}
 80087b2:	1e4a      	subs	r2, r1, #1
 80087b4:	2568      	movs	r5, #104	; 0x68
 80087b6:	4355      	muls	r5, r2
 80087b8:	460e      	mov	r6, r1
 80087ba:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80087be:	f7ff ff35 	bl	800862c <_malloc_r>
 80087c2:	4604      	mov	r4, r0
 80087c4:	b140      	cbz	r0, 80087d8 <__sfmoreglue+0x28>
 80087c6:	2100      	movs	r1, #0
 80087c8:	e9c0 1600 	strd	r1, r6, [r0]
 80087cc:	300c      	adds	r0, #12
 80087ce:	60a0      	str	r0, [r4, #8]
 80087d0:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80087d4:	f7ff fed2 	bl	800857c <memset>
 80087d8:	4620      	mov	r0, r4
 80087da:	bd70      	pop	{r4, r5, r6, pc}

080087dc <__sfp_lock_acquire>:
 80087dc:	4801      	ldr	r0, [pc, #4]	; (80087e4 <__sfp_lock_acquire+0x8>)
 80087de:	f000 b8b3 	b.w	8008948 <__retarget_lock_acquire_recursive>
 80087e2:	bf00      	nop
 80087e4:	20001f3c 	.word	0x20001f3c

080087e8 <__sfp_lock_release>:
 80087e8:	4801      	ldr	r0, [pc, #4]	; (80087f0 <__sfp_lock_release+0x8>)
 80087ea:	f000 b8ae 	b.w	800894a <__retarget_lock_release_recursive>
 80087ee:	bf00      	nop
 80087f0:	20001f3c 	.word	0x20001f3c

080087f4 <__sinit_lock_acquire>:
 80087f4:	4801      	ldr	r0, [pc, #4]	; (80087fc <__sinit_lock_acquire+0x8>)
 80087f6:	f000 b8a7 	b.w	8008948 <__retarget_lock_acquire_recursive>
 80087fa:	bf00      	nop
 80087fc:	20001f37 	.word	0x20001f37

08008800 <__sinit_lock_release>:
 8008800:	4801      	ldr	r0, [pc, #4]	; (8008808 <__sinit_lock_release+0x8>)
 8008802:	f000 b8a2 	b.w	800894a <__retarget_lock_release_recursive>
 8008806:	bf00      	nop
 8008808:	20001f37 	.word	0x20001f37

0800880c <__sinit>:
 800880c:	b510      	push	{r4, lr}
 800880e:	4604      	mov	r4, r0
 8008810:	f7ff fff0 	bl	80087f4 <__sinit_lock_acquire>
 8008814:	69a3      	ldr	r3, [r4, #24]
 8008816:	b11b      	cbz	r3, 8008820 <__sinit+0x14>
 8008818:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800881c:	f7ff bff0 	b.w	8008800 <__sinit_lock_release>
 8008820:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8008824:	6523      	str	r3, [r4, #80]	; 0x50
 8008826:	4b13      	ldr	r3, [pc, #76]	; (8008874 <__sinit+0x68>)
 8008828:	4a13      	ldr	r2, [pc, #76]	; (8008878 <__sinit+0x6c>)
 800882a:	681b      	ldr	r3, [r3, #0]
 800882c:	62a2      	str	r2, [r4, #40]	; 0x28
 800882e:	42a3      	cmp	r3, r4
 8008830:	bf04      	itt	eq
 8008832:	2301      	moveq	r3, #1
 8008834:	61a3      	streq	r3, [r4, #24]
 8008836:	4620      	mov	r0, r4
 8008838:	f000 f820 	bl	800887c <__sfp>
 800883c:	6060      	str	r0, [r4, #4]
 800883e:	4620      	mov	r0, r4
 8008840:	f000 f81c 	bl	800887c <__sfp>
 8008844:	60a0      	str	r0, [r4, #8]
 8008846:	4620      	mov	r0, r4
 8008848:	f000 f818 	bl	800887c <__sfp>
 800884c:	2200      	movs	r2, #0
 800884e:	60e0      	str	r0, [r4, #12]
 8008850:	2104      	movs	r1, #4
 8008852:	6860      	ldr	r0, [r4, #4]
 8008854:	f7ff ff82 	bl	800875c <std>
 8008858:	68a0      	ldr	r0, [r4, #8]
 800885a:	2201      	movs	r2, #1
 800885c:	2109      	movs	r1, #9
 800885e:	f7ff ff7d 	bl	800875c <std>
 8008862:	68e0      	ldr	r0, [r4, #12]
 8008864:	2202      	movs	r2, #2
 8008866:	2112      	movs	r1, #18
 8008868:	f7ff ff78 	bl	800875c <std>
 800886c:	2301      	movs	r3, #1
 800886e:	61a3      	str	r3, [r4, #24]
 8008870:	e7d2      	b.n	8008818 <__sinit+0xc>
 8008872:	bf00      	nop
 8008874:	0800965c 	.word	0x0800965c
 8008878:	080087a5 	.word	0x080087a5

0800887c <__sfp>:
 800887c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800887e:	4607      	mov	r7, r0
 8008880:	f7ff ffac 	bl	80087dc <__sfp_lock_acquire>
 8008884:	4b1e      	ldr	r3, [pc, #120]	; (8008900 <__sfp+0x84>)
 8008886:	681e      	ldr	r6, [r3, #0]
 8008888:	69b3      	ldr	r3, [r6, #24]
 800888a:	b913      	cbnz	r3, 8008892 <__sfp+0x16>
 800888c:	4630      	mov	r0, r6
 800888e:	f7ff ffbd 	bl	800880c <__sinit>
 8008892:	3648      	adds	r6, #72	; 0x48
 8008894:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8008898:	3b01      	subs	r3, #1
 800889a:	d503      	bpl.n	80088a4 <__sfp+0x28>
 800889c:	6833      	ldr	r3, [r6, #0]
 800889e:	b30b      	cbz	r3, 80088e4 <__sfp+0x68>
 80088a0:	6836      	ldr	r6, [r6, #0]
 80088a2:	e7f7      	b.n	8008894 <__sfp+0x18>
 80088a4:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80088a8:	b9d5      	cbnz	r5, 80088e0 <__sfp+0x64>
 80088aa:	4b16      	ldr	r3, [pc, #88]	; (8008904 <__sfp+0x88>)
 80088ac:	60e3      	str	r3, [r4, #12]
 80088ae:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80088b2:	6665      	str	r5, [r4, #100]	; 0x64
 80088b4:	f000 f847 	bl	8008946 <__retarget_lock_init_recursive>
 80088b8:	f7ff ff96 	bl	80087e8 <__sfp_lock_release>
 80088bc:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80088c0:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80088c4:	6025      	str	r5, [r4, #0]
 80088c6:	61a5      	str	r5, [r4, #24]
 80088c8:	2208      	movs	r2, #8
 80088ca:	4629      	mov	r1, r5
 80088cc:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80088d0:	f7ff fe54 	bl	800857c <memset>
 80088d4:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80088d8:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80088dc:	4620      	mov	r0, r4
 80088de:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80088e0:	3468      	adds	r4, #104	; 0x68
 80088e2:	e7d9      	b.n	8008898 <__sfp+0x1c>
 80088e4:	2104      	movs	r1, #4
 80088e6:	4638      	mov	r0, r7
 80088e8:	f7ff ff62 	bl	80087b0 <__sfmoreglue>
 80088ec:	4604      	mov	r4, r0
 80088ee:	6030      	str	r0, [r6, #0]
 80088f0:	2800      	cmp	r0, #0
 80088f2:	d1d5      	bne.n	80088a0 <__sfp+0x24>
 80088f4:	f7ff ff78 	bl	80087e8 <__sfp_lock_release>
 80088f8:	230c      	movs	r3, #12
 80088fa:	603b      	str	r3, [r7, #0]
 80088fc:	e7ee      	b.n	80088dc <__sfp+0x60>
 80088fe:	bf00      	nop
 8008900:	0800965c 	.word	0x0800965c
 8008904:	ffff0001 	.word	0xffff0001

08008908 <_fwalk_reent>:
 8008908:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800890c:	4606      	mov	r6, r0
 800890e:	4688      	mov	r8, r1
 8008910:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8008914:	2700      	movs	r7, #0
 8008916:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800891a:	f1b9 0901 	subs.w	r9, r9, #1
 800891e:	d505      	bpl.n	800892c <_fwalk_reent+0x24>
 8008920:	6824      	ldr	r4, [r4, #0]
 8008922:	2c00      	cmp	r4, #0
 8008924:	d1f7      	bne.n	8008916 <_fwalk_reent+0xe>
 8008926:	4638      	mov	r0, r7
 8008928:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800892c:	89ab      	ldrh	r3, [r5, #12]
 800892e:	2b01      	cmp	r3, #1
 8008930:	d907      	bls.n	8008942 <_fwalk_reent+0x3a>
 8008932:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8008936:	3301      	adds	r3, #1
 8008938:	d003      	beq.n	8008942 <_fwalk_reent+0x3a>
 800893a:	4629      	mov	r1, r5
 800893c:	4630      	mov	r0, r6
 800893e:	47c0      	blx	r8
 8008940:	4307      	orrs	r7, r0
 8008942:	3568      	adds	r5, #104	; 0x68
 8008944:	e7e9      	b.n	800891a <_fwalk_reent+0x12>

08008946 <__retarget_lock_init_recursive>:
 8008946:	4770      	bx	lr

08008948 <__retarget_lock_acquire_recursive>:
 8008948:	4770      	bx	lr

0800894a <__retarget_lock_release_recursive>:
 800894a:	4770      	bx	lr

0800894c <__malloc_lock>:
 800894c:	4801      	ldr	r0, [pc, #4]	; (8008954 <__malloc_lock+0x8>)
 800894e:	f7ff bffb 	b.w	8008948 <__retarget_lock_acquire_recursive>
 8008952:	bf00      	nop
 8008954:	20001f38 	.word	0x20001f38

08008958 <__malloc_unlock>:
 8008958:	4801      	ldr	r0, [pc, #4]	; (8008960 <__malloc_unlock+0x8>)
 800895a:	f7ff bff6 	b.w	800894a <__retarget_lock_release_recursive>
 800895e:	bf00      	nop
 8008960:	20001f38 	.word	0x20001f38

08008964 <__sfputc_r>:
 8008964:	6893      	ldr	r3, [r2, #8]
 8008966:	3b01      	subs	r3, #1
 8008968:	2b00      	cmp	r3, #0
 800896a:	b410      	push	{r4}
 800896c:	6093      	str	r3, [r2, #8]
 800896e:	da08      	bge.n	8008982 <__sfputc_r+0x1e>
 8008970:	6994      	ldr	r4, [r2, #24]
 8008972:	42a3      	cmp	r3, r4
 8008974:	db01      	blt.n	800897a <__sfputc_r+0x16>
 8008976:	290a      	cmp	r1, #10
 8008978:	d103      	bne.n	8008982 <__sfputc_r+0x1e>
 800897a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800897e:	f000 bb6b 	b.w	8009058 <__swbuf_r>
 8008982:	6813      	ldr	r3, [r2, #0]
 8008984:	1c58      	adds	r0, r3, #1
 8008986:	6010      	str	r0, [r2, #0]
 8008988:	7019      	strb	r1, [r3, #0]
 800898a:	4608      	mov	r0, r1
 800898c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008990:	4770      	bx	lr

08008992 <__sfputs_r>:
 8008992:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008994:	4606      	mov	r6, r0
 8008996:	460f      	mov	r7, r1
 8008998:	4614      	mov	r4, r2
 800899a:	18d5      	adds	r5, r2, r3
 800899c:	42ac      	cmp	r4, r5
 800899e:	d101      	bne.n	80089a4 <__sfputs_r+0x12>
 80089a0:	2000      	movs	r0, #0
 80089a2:	e007      	b.n	80089b4 <__sfputs_r+0x22>
 80089a4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80089a8:	463a      	mov	r2, r7
 80089aa:	4630      	mov	r0, r6
 80089ac:	f7ff ffda 	bl	8008964 <__sfputc_r>
 80089b0:	1c43      	adds	r3, r0, #1
 80089b2:	d1f3      	bne.n	800899c <__sfputs_r+0xa>
 80089b4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080089b8 <_vfiprintf_r>:
 80089b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80089bc:	460d      	mov	r5, r1
 80089be:	b09d      	sub	sp, #116	; 0x74
 80089c0:	4614      	mov	r4, r2
 80089c2:	4698      	mov	r8, r3
 80089c4:	4606      	mov	r6, r0
 80089c6:	b118      	cbz	r0, 80089d0 <_vfiprintf_r+0x18>
 80089c8:	6983      	ldr	r3, [r0, #24]
 80089ca:	b90b      	cbnz	r3, 80089d0 <_vfiprintf_r+0x18>
 80089cc:	f7ff ff1e 	bl	800880c <__sinit>
 80089d0:	4b89      	ldr	r3, [pc, #548]	; (8008bf8 <_vfiprintf_r+0x240>)
 80089d2:	429d      	cmp	r5, r3
 80089d4:	d11b      	bne.n	8008a0e <_vfiprintf_r+0x56>
 80089d6:	6875      	ldr	r5, [r6, #4]
 80089d8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80089da:	07d9      	lsls	r1, r3, #31
 80089dc:	d405      	bmi.n	80089ea <_vfiprintf_r+0x32>
 80089de:	89ab      	ldrh	r3, [r5, #12]
 80089e0:	059a      	lsls	r2, r3, #22
 80089e2:	d402      	bmi.n	80089ea <_vfiprintf_r+0x32>
 80089e4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80089e6:	f7ff ffaf 	bl	8008948 <__retarget_lock_acquire_recursive>
 80089ea:	89ab      	ldrh	r3, [r5, #12]
 80089ec:	071b      	lsls	r3, r3, #28
 80089ee:	d501      	bpl.n	80089f4 <_vfiprintf_r+0x3c>
 80089f0:	692b      	ldr	r3, [r5, #16]
 80089f2:	b9eb      	cbnz	r3, 8008a30 <_vfiprintf_r+0x78>
 80089f4:	4629      	mov	r1, r5
 80089f6:	4630      	mov	r0, r6
 80089f8:	f000 fb92 	bl	8009120 <__swsetup_r>
 80089fc:	b1c0      	cbz	r0, 8008a30 <_vfiprintf_r+0x78>
 80089fe:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008a00:	07dc      	lsls	r4, r3, #31
 8008a02:	d50e      	bpl.n	8008a22 <_vfiprintf_r+0x6a>
 8008a04:	f04f 30ff 	mov.w	r0, #4294967295
 8008a08:	b01d      	add	sp, #116	; 0x74
 8008a0a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008a0e:	4b7b      	ldr	r3, [pc, #492]	; (8008bfc <_vfiprintf_r+0x244>)
 8008a10:	429d      	cmp	r5, r3
 8008a12:	d101      	bne.n	8008a18 <_vfiprintf_r+0x60>
 8008a14:	68b5      	ldr	r5, [r6, #8]
 8008a16:	e7df      	b.n	80089d8 <_vfiprintf_r+0x20>
 8008a18:	4b79      	ldr	r3, [pc, #484]	; (8008c00 <_vfiprintf_r+0x248>)
 8008a1a:	429d      	cmp	r5, r3
 8008a1c:	bf08      	it	eq
 8008a1e:	68f5      	ldreq	r5, [r6, #12]
 8008a20:	e7da      	b.n	80089d8 <_vfiprintf_r+0x20>
 8008a22:	89ab      	ldrh	r3, [r5, #12]
 8008a24:	0598      	lsls	r0, r3, #22
 8008a26:	d4ed      	bmi.n	8008a04 <_vfiprintf_r+0x4c>
 8008a28:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008a2a:	f7ff ff8e 	bl	800894a <__retarget_lock_release_recursive>
 8008a2e:	e7e9      	b.n	8008a04 <_vfiprintf_r+0x4c>
 8008a30:	2300      	movs	r3, #0
 8008a32:	9309      	str	r3, [sp, #36]	; 0x24
 8008a34:	2320      	movs	r3, #32
 8008a36:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008a3a:	f8cd 800c 	str.w	r8, [sp, #12]
 8008a3e:	2330      	movs	r3, #48	; 0x30
 8008a40:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8008c04 <_vfiprintf_r+0x24c>
 8008a44:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008a48:	f04f 0901 	mov.w	r9, #1
 8008a4c:	4623      	mov	r3, r4
 8008a4e:	469a      	mov	sl, r3
 8008a50:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008a54:	b10a      	cbz	r2, 8008a5a <_vfiprintf_r+0xa2>
 8008a56:	2a25      	cmp	r2, #37	; 0x25
 8008a58:	d1f9      	bne.n	8008a4e <_vfiprintf_r+0x96>
 8008a5a:	ebba 0b04 	subs.w	fp, sl, r4
 8008a5e:	d00b      	beq.n	8008a78 <_vfiprintf_r+0xc0>
 8008a60:	465b      	mov	r3, fp
 8008a62:	4622      	mov	r2, r4
 8008a64:	4629      	mov	r1, r5
 8008a66:	4630      	mov	r0, r6
 8008a68:	f7ff ff93 	bl	8008992 <__sfputs_r>
 8008a6c:	3001      	adds	r0, #1
 8008a6e:	f000 80aa 	beq.w	8008bc6 <_vfiprintf_r+0x20e>
 8008a72:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008a74:	445a      	add	r2, fp
 8008a76:	9209      	str	r2, [sp, #36]	; 0x24
 8008a78:	f89a 3000 	ldrb.w	r3, [sl]
 8008a7c:	2b00      	cmp	r3, #0
 8008a7e:	f000 80a2 	beq.w	8008bc6 <_vfiprintf_r+0x20e>
 8008a82:	2300      	movs	r3, #0
 8008a84:	f04f 32ff 	mov.w	r2, #4294967295
 8008a88:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008a8c:	f10a 0a01 	add.w	sl, sl, #1
 8008a90:	9304      	str	r3, [sp, #16]
 8008a92:	9307      	str	r3, [sp, #28]
 8008a94:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008a98:	931a      	str	r3, [sp, #104]	; 0x68
 8008a9a:	4654      	mov	r4, sl
 8008a9c:	2205      	movs	r2, #5
 8008a9e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008aa2:	4858      	ldr	r0, [pc, #352]	; (8008c04 <_vfiprintf_r+0x24c>)
 8008aa4:	f7f7 fc1c 	bl	80002e0 <memchr>
 8008aa8:	9a04      	ldr	r2, [sp, #16]
 8008aaa:	b9d8      	cbnz	r0, 8008ae4 <_vfiprintf_r+0x12c>
 8008aac:	06d1      	lsls	r1, r2, #27
 8008aae:	bf44      	itt	mi
 8008ab0:	2320      	movmi	r3, #32
 8008ab2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008ab6:	0713      	lsls	r3, r2, #28
 8008ab8:	bf44      	itt	mi
 8008aba:	232b      	movmi	r3, #43	; 0x2b
 8008abc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008ac0:	f89a 3000 	ldrb.w	r3, [sl]
 8008ac4:	2b2a      	cmp	r3, #42	; 0x2a
 8008ac6:	d015      	beq.n	8008af4 <_vfiprintf_r+0x13c>
 8008ac8:	9a07      	ldr	r2, [sp, #28]
 8008aca:	4654      	mov	r4, sl
 8008acc:	2000      	movs	r0, #0
 8008ace:	f04f 0c0a 	mov.w	ip, #10
 8008ad2:	4621      	mov	r1, r4
 8008ad4:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008ad8:	3b30      	subs	r3, #48	; 0x30
 8008ada:	2b09      	cmp	r3, #9
 8008adc:	d94e      	bls.n	8008b7c <_vfiprintf_r+0x1c4>
 8008ade:	b1b0      	cbz	r0, 8008b0e <_vfiprintf_r+0x156>
 8008ae0:	9207      	str	r2, [sp, #28]
 8008ae2:	e014      	b.n	8008b0e <_vfiprintf_r+0x156>
 8008ae4:	eba0 0308 	sub.w	r3, r0, r8
 8008ae8:	fa09 f303 	lsl.w	r3, r9, r3
 8008aec:	4313      	orrs	r3, r2
 8008aee:	9304      	str	r3, [sp, #16]
 8008af0:	46a2      	mov	sl, r4
 8008af2:	e7d2      	b.n	8008a9a <_vfiprintf_r+0xe2>
 8008af4:	9b03      	ldr	r3, [sp, #12]
 8008af6:	1d19      	adds	r1, r3, #4
 8008af8:	681b      	ldr	r3, [r3, #0]
 8008afa:	9103      	str	r1, [sp, #12]
 8008afc:	2b00      	cmp	r3, #0
 8008afe:	bfbb      	ittet	lt
 8008b00:	425b      	neglt	r3, r3
 8008b02:	f042 0202 	orrlt.w	r2, r2, #2
 8008b06:	9307      	strge	r3, [sp, #28]
 8008b08:	9307      	strlt	r3, [sp, #28]
 8008b0a:	bfb8      	it	lt
 8008b0c:	9204      	strlt	r2, [sp, #16]
 8008b0e:	7823      	ldrb	r3, [r4, #0]
 8008b10:	2b2e      	cmp	r3, #46	; 0x2e
 8008b12:	d10c      	bne.n	8008b2e <_vfiprintf_r+0x176>
 8008b14:	7863      	ldrb	r3, [r4, #1]
 8008b16:	2b2a      	cmp	r3, #42	; 0x2a
 8008b18:	d135      	bne.n	8008b86 <_vfiprintf_r+0x1ce>
 8008b1a:	9b03      	ldr	r3, [sp, #12]
 8008b1c:	1d1a      	adds	r2, r3, #4
 8008b1e:	681b      	ldr	r3, [r3, #0]
 8008b20:	9203      	str	r2, [sp, #12]
 8008b22:	2b00      	cmp	r3, #0
 8008b24:	bfb8      	it	lt
 8008b26:	f04f 33ff 	movlt.w	r3, #4294967295
 8008b2a:	3402      	adds	r4, #2
 8008b2c:	9305      	str	r3, [sp, #20]
 8008b2e:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8008c14 <_vfiprintf_r+0x25c>
 8008b32:	7821      	ldrb	r1, [r4, #0]
 8008b34:	2203      	movs	r2, #3
 8008b36:	4650      	mov	r0, sl
 8008b38:	f7f7 fbd2 	bl	80002e0 <memchr>
 8008b3c:	b140      	cbz	r0, 8008b50 <_vfiprintf_r+0x198>
 8008b3e:	2340      	movs	r3, #64	; 0x40
 8008b40:	eba0 000a 	sub.w	r0, r0, sl
 8008b44:	fa03 f000 	lsl.w	r0, r3, r0
 8008b48:	9b04      	ldr	r3, [sp, #16]
 8008b4a:	4303      	orrs	r3, r0
 8008b4c:	3401      	adds	r4, #1
 8008b4e:	9304      	str	r3, [sp, #16]
 8008b50:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008b54:	482c      	ldr	r0, [pc, #176]	; (8008c08 <_vfiprintf_r+0x250>)
 8008b56:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008b5a:	2206      	movs	r2, #6
 8008b5c:	f7f7 fbc0 	bl	80002e0 <memchr>
 8008b60:	2800      	cmp	r0, #0
 8008b62:	d03f      	beq.n	8008be4 <_vfiprintf_r+0x22c>
 8008b64:	4b29      	ldr	r3, [pc, #164]	; (8008c0c <_vfiprintf_r+0x254>)
 8008b66:	bb1b      	cbnz	r3, 8008bb0 <_vfiprintf_r+0x1f8>
 8008b68:	9b03      	ldr	r3, [sp, #12]
 8008b6a:	3307      	adds	r3, #7
 8008b6c:	f023 0307 	bic.w	r3, r3, #7
 8008b70:	3308      	adds	r3, #8
 8008b72:	9303      	str	r3, [sp, #12]
 8008b74:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008b76:	443b      	add	r3, r7
 8008b78:	9309      	str	r3, [sp, #36]	; 0x24
 8008b7a:	e767      	b.n	8008a4c <_vfiprintf_r+0x94>
 8008b7c:	fb0c 3202 	mla	r2, ip, r2, r3
 8008b80:	460c      	mov	r4, r1
 8008b82:	2001      	movs	r0, #1
 8008b84:	e7a5      	b.n	8008ad2 <_vfiprintf_r+0x11a>
 8008b86:	2300      	movs	r3, #0
 8008b88:	3401      	adds	r4, #1
 8008b8a:	9305      	str	r3, [sp, #20]
 8008b8c:	4619      	mov	r1, r3
 8008b8e:	f04f 0c0a 	mov.w	ip, #10
 8008b92:	4620      	mov	r0, r4
 8008b94:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008b98:	3a30      	subs	r2, #48	; 0x30
 8008b9a:	2a09      	cmp	r2, #9
 8008b9c:	d903      	bls.n	8008ba6 <_vfiprintf_r+0x1ee>
 8008b9e:	2b00      	cmp	r3, #0
 8008ba0:	d0c5      	beq.n	8008b2e <_vfiprintf_r+0x176>
 8008ba2:	9105      	str	r1, [sp, #20]
 8008ba4:	e7c3      	b.n	8008b2e <_vfiprintf_r+0x176>
 8008ba6:	fb0c 2101 	mla	r1, ip, r1, r2
 8008baa:	4604      	mov	r4, r0
 8008bac:	2301      	movs	r3, #1
 8008bae:	e7f0      	b.n	8008b92 <_vfiprintf_r+0x1da>
 8008bb0:	ab03      	add	r3, sp, #12
 8008bb2:	9300      	str	r3, [sp, #0]
 8008bb4:	462a      	mov	r2, r5
 8008bb6:	4b16      	ldr	r3, [pc, #88]	; (8008c10 <_vfiprintf_r+0x258>)
 8008bb8:	a904      	add	r1, sp, #16
 8008bba:	4630      	mov	r0, r6
 8008bbc:	f3af 8000 	nop.w
 8008bc0:	4607      	mov	r7, r0
 8008bc2:	1c78      	adds	r0, r7, #1
 8008bc4:	d1d6      	bne.n	8008b74 <_vfiprintf_r+0x1bc>
 8008bc6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008bc8:	07d9      	lsls	r1, r3, #31
 8008bca:	d405      	bmi.n	8008bd8 <_vfiprintf_r+0x220>
 8008bcc:	89ab      	ldrh	r3, [r5, #12]
 8008bce:	059a      	lsls	r2, r3, #22
 8008bd0:	d402      	bmi.n	8008bd8 <_vfiprintf_r+0x220>
 8008bd2:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008bd4:	f7ff feb9 	bl	800894a <__retarget_lock_release_recursive>
 8008bd8:	89ab      	ldrh	r3, [r5, #12]
 8008bda:	065b      	lsls	r3, r3, #25
 8008bdc:	f53f af12 	bmi.w	8008a04 <_vfiprintf_r+0x4c>
 8008be0:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008be2:	e711      	b.n	8008a08 <_vfiprintf_r+0x50>
 8008be4:	ab03      	add	r3, sp, #12
 8008be6:	9300      	str	r3, [sp, #0]
 8008be8:	462a      	mov	r2, r5
 8008bea:	4b09      	ldr	r3, [pc, #36]	; (8008c10 <_vfiprintf_r+0x258>)
 8008bec:	a904      	add	r1, sp, #16
 8008bee:	4630      	mov	r0, r6
 8008bf0:	f000 f880 	bl	8008cf4 <_printf_i>
 8008bf4:	e7e4      	b.n	8008bc0 <_vfiprintf_r+0x208>
 8008bf6:	bf00      	nop
 8008bf8:	08009680 	.word	0x08009680
 8008bfc:	080096a0 	.word	0x080096a0
 8008c00:	08009660 	.word	0x08009660
 8008c04:	080096c0 	.word	0x080096c0
 8008c08:	080096ca 	.word	0x080096ca
 8008c0c:	00000000 	.word	0x00000000
 8008c10:	08008993 	.word	0x08008993
 8008c14:	080096c6 	.word	0x080096c6

08008c18 <_printf_common>:
 8008c18:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008c1c:	4616      	mov	r6, r2
 8008c1e:	4699      	mov	r9, r3
 8008c20:	688a      	ldr	r2, [r1, #8]
 8008c22:	690b      	ldr	r3, [r1, #16]
 8008c24:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8008c28:	4293      	cmp	r3, r2
 8008c2a:	bfb8      	it	lt
 8008c2c:	4613      	movlt	r3, r2
 8008c2e:	6033      	str	r3, [r6, #0]
 8008c30:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8008c34:	4607      	mov	r7, r0
 8008c36:	460c      	mov	r4, r1
 8008c38:	b10a      	cbz	r2, 8008c3e <_printf_common+0x26>
 8008c3a:	3301      	adds	r3, #1
 8008c3c:	6033      	str	r3, [r6, #0]
 8008c3e:	6823      	ldr	r3, [r4, #0]
 8008c40:	0699      	lsls	r1, r3, #26
 8008c42:	bf42      	ittt	mi
 8008c44:	6833      	ldrmi	r3, [r6, #0]
 8008c46:	3302      	addmi	r3, #2
 8008c48:	6033      	strmi	r3, [r6, #0]
 8008c4a:	6825      	ldr	r5, [r4, #0]
 8008c4c:	f015 0506 	ands.w	r5, r5, #6
 8008c50:	d106      	bne.n	8008c60 <_printf_common+0x48>
 8008c52:	f104 0a19 	add.w	sl, r4, #25
 8008c56:	68e3      	ldr	r3, [r4, #12]
 8008c58:	6832      	ldr	r2, [r6, #0]
 8008c5a:	1a9b      	subs	r3, r3, r2
 8008c5c:	42ab      	cmp	r3, r5
 8008c5e:	dc26      	bgt.n	8008cae <_printf_common+0x96>
 8008c60:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8008c64:	1e13      	subs	r3, r2, #0
 8008c66:	6822      	ldr	r2, [r4, #0]
 8008c68:	bf18      	it	ne
 8008c6a:	2301      	movne	r3, #1
 8008c6c:	0692      	lsls	r2, r2, #26
 8008c6e:	d42b      	bmi.n	8008cc8 <_printf_common+0xb0>
 8008c70:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008c74:	4649      	mov	r1, r9
 8008c76:	4638      	mov	r0, r7
 8008c78:	47c0      	blx	r8
 8008c7a:	3001      	adds	r0, #1
 8008c7c:	d01e      	beq.n	8008cbc <_printf_common+0xa4>
 8008c7e:	6823      	ldr	r3, [r4, #0]
 8008c80:	68e5      	ldr	r5, [r4, #12]
 8008c82:	6832      	ldr	r2, [r6, #0]
 8008c84:	f003 0306 	and.w	r3, r3, #6
 8008c88:	2b04      	cmp	r3, #4
 8008c8a:	bf08      	it	eq
 8008c8c:	1aad      	subeq	r5, r5, r2
 8008c8e:	68a3      	ldr	r3, [r4, #8]
 8008c90:	6922      	ldr	r2, [r4, #16]
 8008c92:	bf0c      	ite	eq
 8008c94:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008c98:	2500      	movne	r5, #0
 8008c9a:	4293      	cmp	r3, r2
 8008c9c:	bfc4      	itt	gt
 8008c9e:	1a9b      	subgt	r3, r3, r2
 8008ca0:	18ed      	addgt	r5, r5, r3
 8008ca2:	2600      	movs	r6, #0
 8008ca4:	341a      	adds	r4, #26
 8008ca6:	42b5      	cmp	r5, r6
 8008ca8:	d11a      	bne.n	8008ce0 <_printf_common+0xc8>
 8008caa:	2000      	movs	r0, #0
 8008cac:	e008      	b.n	8008cc0 <_printf_common+0xa8>
 8008cae:	2301      	movs	r3, #1
 8008cb0:	4652      	mov	r2, sl
 8008cb2:	4649      	mov	r1, r9
 8008cb4:	4638      	mov	r0, r7
 8008cb6:	47c0      	blx	r8
 8008cb8:	3001      	adds	r0, #1
 8008cba:	d103      	bne.n	8008cc4 <_printf_common+0xac>
 8008cbc:	f04f 30ff 	mov.w	r0, #4294967295
 8008cc0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008cc4:	3501      	adds	r5, #1
 8008cc6:	e7c6      	b.n	8008c56 <_printf_common+0x3e>
 8008cc8:	18e1      	adds	r1, r4, r3
 8008cca:	1c5a      	adds	r2, r3, #1
 8008ccc:	2030      	movs	r0, #48	; 0x30
 8008cce:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8008cd2:	4422      	add	r2, r4
 8008cd4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8008cd8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8008cdc:	3302      	adds	r3, #2
 8008cde:	e7c7      	b.n	8008c70 <_printf_common+0x58>
 8008ce0:	2301      	movs	r3, #1
 8008ce2:	4622      	mov	r2, r4
 8008ce4:	4649      	mov	r1, r9
 8008ce6:	4638      	mov	r0, r7
 8008ce8:	47c0      	blx	r8
 8008cea:	3001      	adds	r0, #1
 8008cec:	d0e6      	beq.n	8008cbc <_printf_common+0xa4>
 8008cee:	3601      	adds	r6, #1
 8008cf0:	e7d9      	b.n	8008ca6 <_printf_common+0x8e>
	...

08008cf4 <_printf_i>:
 8008cf4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008cf8:	460c      	mov	r4, r1
 8008cfa:	4691      	mov	r9, r2
 8008cfc:	7e27      	ldrb	r7, [r4, #24]
 8008cfe:	990c      	ldr	r1, [sp, #48]	; 0x30
 8008d00:	2f78      	cmp	r7, #120	; 0x78
 8008d02:	4680      	mov	r8, r0
 8008d04:	469a      	mov	sl, r3
 8008d06:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008d0a:	d807      	bhi.n	8008d1c <_printf_i+0x28>
 8008d0c:	2f62      	cmp	r7, #98	; 0x62
 8008d0e:	d80a      	bhi.n	8008d26 <_printf_i+0x32>
 8008d10:	2f00      	cmp	r7, #0
 8008d12:	f000 80d8 	beq.w	8008ec6 <_printf_i+0x1d2>
 8008d16:	2f58      	cmp	r7, #88	; 0x58
 8008d18:	f000 80a3 	beq.w	8008e62 <_printf_i+0x16e>
 8008d1c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8008d20:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8008d24:	e03a      	b.n	8008d9c <_printf_i+0xa8>
 8008d26:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8008d2a:	2b15      	cmp	r3, #21
 8008d2c:	d8f6      	bhi.n	8008d1c <_printf_i+0x28>
 8008d2e:	a001      	add	r0, pc, #4	; (adr r0, 8008d34 <_printf_i+0x40>)
 8008d30:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8008d34:	08008d8d 	.word	0x08008d8d
 8008d38:	08008da1 	.word	0x08008da1
 8008d3c:	08008d1d 	.word	0x08008d1d
 8008d40:	08008d1d 	.word	0x08008d1d
 8008d44:	08008d1d 	.word	0x08008d1d
 8008d48:	08008d1d 	.word	0x08008d1d
 8008d4c:	08008da1 	.word	0x08008da1
 8008d50:	08008d1d 	.word	0x08008d1d
 8008d54:	08008d1d 	.word	0x08008d1d
 8008d58:	08008d1d 	.word	0x08008d1d
 8008d5c:	08008d1d 	.word	0x08008d1d
 8008d60:	08008ead 	.word	0x08008ead
 8008d64:	08008dd1 	.word	0x08008dd1
 8008d68:	08008e8f 	.word	0x08008e8f
 8008d6c:	08008d1d 	.word	0x08008d1d
 8008d70:	08008d1d 	.word	0x08008d1d
 8008d74:	08008ecf 	.word	0x08008ecf
 8008d78:	08008d1d 	.word	0x08008d1d
 8008d7c:	08008dd1 	.word	0x08008dd1
 8008d80:	08008d1d 	.word	0x08008d1d
 8008d84:	08008d1d 	.word	0x08008d1d
 8008d88:	08008e97 	.word	0x08008e97
 8008d8c:	680b      	ldr	r3, [r1, #0]
 8008d8e:	1d1a      	adds	r2, r3, #4
 8008d90:	681b      	ldr	r3, [r3, #0]
 8008d92:	600a      	str	r2, [r1, #0]
 8008d94:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8008d98:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008d9c:	2301      	movs	r3, #1
 8008d9e:	e0a3      	b.n	8008ee8 <_printf_i+0x1f4>
 8008da0:	6825      	ldr	r5, [r4, #0]
 8008da2:	6808      	ldr	r0, [r1, #0]
 8008da4:	062e      	lsls	r6, r5, #24
 8008da6:	f100 0304 	add.w	r3, r0, #4
 8008daa:	d50a      	bpl.n	8008dc2 <_printf_i+0xce>
 8008dac:	6805      	ldr	r5, [r0, #0]
 8008dae:	600b      	str	r3, [r1, #0]
 8008db0:	2d00      	cmp	r5, #0
 8008db2:	da03      	bge.n	8008dbc <_printf_i+0xc8>
 8008db4:	232d      	movs	r3, #45	; 0x2d
 8008db6:	426d      	negs	r5, r5
 8008db8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008dbc:	485e      	ldr	r0, [pc, #376]	; (8008f38 <_printf_i+0x244>)
 8008dbe:	230a      	movs	r3, #10
 8008dc0:	e019      	b.n	8008df6 <_printf_i+0x102>
 8008dc2:	f015 0f40 	tst.w	r5, #64	; 0x40
 8008dc6:	6805      	ldr	r5, [r0, #0]
 8008dc8:	600b      	str	r3, [r1, #0]
 8008dca:	bf18      	it	ne
 8008dcc:	b22d      	sxthne	r5, r5
 8008dce:	e7ef      	b.n	8008db0 <_printf_i+0xbc>
 8008dd0:	680b      	ldr	r3, [r1, #0]
 8008dd2:	6825      	ldr	r5, [r4, #0]
 8008dd4:	1d18      	adds	r0, r3, #4
 8008dd6:	6008      	str	r0, [r1, #0]
 8008dd8:	0628      	lsls	r0, r5, #24
 8008dda:	d501      	bpl.n	8008de0 <_printf_i+0xec>
 8008ddc:	681d      	ldr	r5, [r3, #0]
 8008dde:	e002      	b.n	8008de6 <_printf_i+0xf2>
 8008de0:	0669      	lsls	r1, r5, #25
 8008de2:	d5fb      	bpl.n	8008ddc <_printf_i+0xe8>
 8008de4:	881d      	ldrh	r5, [r3, #0]
 8008de6:	4854      	ldr	r0, [pc, #336]	; (8008f38 <_printf_i+0x244>)
 8008de8:	2f6f      	cmp	r7, #111	; 0x6f
 8008dea:	bf0c      	ite	eq
 8008dec:	2308      	moveq	r3, #8
 8008dee:	230a      	movne	r3, #10
 8008df0:	2100      	movs	r1, #0
 8008df2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8008df6:	6866      	ldr	r6, [r4, #4]
 8008df8:	60a6      	str	r6, [r4, #8]
 8008dfa:	2e00      	cmp	r6, #0
 8008dfc:	bfa2      	ittt	ge
 8008dfe:	6821      	ldrge	r1, [r4, #0]
 8008e00:	f021 0104 	bicge.w	r1, r1, #4
 8008e04:	6021      	strge	r1, [r4, #0]
 8008e06:	b90d      	cbnz	r5, 8008e0c <_printf_i+0x118>
 8008e08:	2e00      	cmp	r6, #0
 8008e0a:	d04d      	beq.n	8008ea8 <_printf_i+0x1b4>
 8008e0c:	4616      	mov	r6, r2
 8008e0e:	fbb5 f1f3 	udiv	r1, r5, r3
 8008e12:	fb03 5711 	mls	r7, r3, r1, r5
 8008e16:	5dc7      	ldrb	r7, [r0, r7]
 8008e18:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8008e1c:	462f      	mov	r7, r5
 8008e1e:	42bb      	cmp	r3, r7
 8008e20:	460d      	mov	r5, r1
 8008e22:	d9f4      	bls.n	8008e0e <_printf_i+0x11a>
 8008e24:	2b08      	cmp	r3, #8
 8008e26:	d10b      	bne.n	8008e40 <_printf_i+0x14c>
 8008e28:	6823      	ldr	r3, [r4, #0]
 8008e2a:	07df      	lsls	r7, r3, #31
 8008e2c:	d508      	bpl.n	8008e40 <_printf_i+0x14c>
 8008e2e:	6923      	ldr	r3, [r4, #16]
 8008e30:	6861      	ldr	r1, [r4, #4]
 8008e32:	4299      	cmp	r1, r3
 8008e34:	bfde      	ittt	le
 8008e36:	2330      	movle	r3, #48	; 0x30
 8008e38:	f806 3c01 	strble.w	r3, [r6, #-1]
 8008e3c:	f106 36ff 	addle.w	r6, r6, #4294967295
 8008e40:	1b92      	subs	r2, r2, r6
 8008e42:	6122      	str	r2, [r4, #16]
 8008e44:	f8cd a000 	str.w	sl, [sp]
 8008e48:	464b      	mov	r3, r9
 8008e4a:	aa03      	add	r2, sp, #12
 8008e4c:	4621      	mov	r1, r4
 8008e4e:	4640      	mov	r0, r8
 8008e50:	f7ff fee2 	bl	8008c18 <_printf_common>
 8008e54:	3001      	adds	r0, #1
 8008e56:	d14c      	bne.n	8008ef2 <_printf_i+0x1fe>
 8008e58:	f04f 30ff 	mov.w	r0, #4294967295
 8008e5c:	b004      	add	sp, #16
 8008e5e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008e62:	4835      	ldr	r0, [pc, #212]	; (8008f38 <_printf_i+0x244>)
 8008e64:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8008e68:	6823      	ldr	r3, [r4, #0]
 8008e6a:	680e      	ldr	r6, [r1, #0]
 8008e6c:	061f      	lsls	r7, r3, #24
 8008e6e:	f856 5b04 	ldr.w	r5, [r6], #4
 8008e72:	600e      	str	r6, [r1, #0]
 8008e74:	d514      	bpl.n	8008ea0 <_printf_i+0x1ac>
 8008e76:	07d9      	lsls	r1, r3, #31
 8008e78:	bf44      	itt	mi
 8008e7a:	f043 0320 	orrmi.w	r3, r3, #32
 8008e7e:	6023      	strmi	r3, [r4, #0]
 8008e80:	b91d      	cbnz	r5, 8008e8a <_printf_i+0x196>
 8008e82:	6823      	ldr	r3, [r4, #0]
 8008e84:	f023 0320 	bic.w	r3, r3, #32
 8008e88:	6023      	str	r3, [r4, #0]
 8008e8a:	2310      	movs	r3, #16
 8008e8c:	e7b0      	b.n	8008df0 <_printf_i+0xfc>
 8008e8e:	6823      	ldr	r3, [r4, #0]
 8008e90:	f043 0320 	orr.w	r3, r3, #32
 8008e94:	6023      	str	r3, [r4, #0]
 8008e96:	2378      	movs	r3, #120	; 0x78
 8008e98:	4828      	ldr	r0, [pc, #160]	; (8008f3c <_printf_i+0x248>)
 8008e9a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8008e9e:	e7e3      	b.n	8008e68 <_printf_i+0x174>
 8008ea0:	065e      	lsls	r6, r3, #25
 8008ea2:	bf48      	it	mi
 8008ea4:	b2ad      	uxthmi	r5, r5
 8008ea6:	e7e6      	b.n	8008e76 <_printf_i+0x182>
 8008ea8:	4616      	mov	r6, r2
 8008eaa:	e7bb      	b.n	8008e24 <_printf_i+0x130>
 8008eac:	680b      	ldr	r3, [r1, #0]
 8008eae:	6826      	ldr	r6, [r4, #0]
 8008eb0:	6960      	ldr	r0, [r4, #20]
 8008eb2:	1d1d      	adds	r5, r3, #4
 8008eb4:	600d      	str	r5, [r1, #0]
 8008eb6:	0635      	lsls	r5, r6, #24
 8008eb8:	681b      	ldr	r3, [r3, #0]
 8008eba:	d501      	bpl.n	8008ec0 <_printf_i+0x1cc>
 8008ebc:	6018      	str	r0, [r3, #0]
 8008ebe:	e002      	b.n	8008ec6 <_printf_i+0x1d2>
 8008ec0:	0671      	lsls	r1, r6, #25
 8008ec2:	d5fb      	bpl.n	8008ebc <_printf_i+0x1c8>
 8008ec4:	8018      	strh	r0, [r3, #0]
 8008ec6:	2300      	movs	r3, #0
 8008ec8:	6123      	str	r3, [r4, #16]
 8008eca:	4616      	mov	r6, r2
 8008ecc:	e7ba      	b.n	8008e44 <_printf_i+0x150>
 8008ece:	680b      	ldr	r3, [r1, #0]
 8008ed0:	1d1a      	adds	r2, r3, #4
 8008ed2:	600a      	str	r2, [r1, #0]
 8008ed4:	681e      	ldr	r6, [r3, #0]
 8008ed6:	6862      	ldr	r2, [r4, #4]
 8008ed8:	2100      	movs	r1, #0
 8008eda:	4630      	mov	r0, r6
 8008edc:	f7f7 fa00 	bl	80002e0 <memchr>
 8008ee0:	b108      	cbz	r0, 8008ee6 <_printf_i+0x1f2>
 8008ee2:	1b80      	subs	r0, r0, r6
 8008ee4:	6060      	str	r0, [r4, #4]
 8008ee6:	6863      	ldr	r3, [r4, #4]
 8008ee8:	6123      	str	r3, [r4, #16]
 8008eea:	2300      	movs	r3, #0
 8008eec:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008ef0:	e7a8      	b.n	8008e44 <_printf_i+0x150>
 8008ef2:	6923      	ldr	r3, [r4, #16]
 8008ef4:	4632      	mov	r2, r6
 8008ef6:	4649      	mov	r1, r9
 8008ef8:	4640      	mov	r0, r8
 8008efa:	47d0      	blx	sl
 8008efc:	3001      	adds	r0, #1
 8008efe:	d0ab      	beq.n	8008e58 <_printf_i+0x164>
 8008f00:	6823      	ldr	r3, [r4, #0]
 8008f02:	079b      	lsls	r3, r3, #30
 8008f04:	d413      	bmi.n	8008f2e <_printf_i+0x23a>
 8008f06:	68e0      	ldr	r0, [r4, #12]
 8008f08:	9b03      	ldr	r3, [sp, #12]
 8008f0a:	4298      	cmp	r0, r3
 8008f0c:	bfb8      	it	lt
 8008f0e:	4618      	movlt	r0, r3
 8008f10:	e7a4      	b.n	8008e5c <_printf_i+0x168>
 8008f12:	2301      	movs	r3, #1
 8008f14:	4632      	mov	r2, r6
 8008f16:	4649      	mov	r1, r9
 8008f18:	4640      	mov	r0, r8
 8008f1a:	47d0      	blx	sl
 8008f1c:	3001      	adds	r0, #1
 8008f1e:	d09b      	beq.n	8008e58 <_printf_i+0x164>
 8008f20:	3501      	adds	r5, #1
 8008f22:	68e3      	ldr	r3, [r4, #12]
 8008f24:	9903      	ldr	r1, [sp, #12]
 8008f26:	1a5b      	subs	r3, r3, r1
 8008f28:	42ab      	cmp	r3, r5
 8008f2a:	dcf2      	bgt.n	8008f12 <_printf_i+0x21e>
 8008f2c:	e7eb      	b.n	8008f06 <_printf_i+0x212>
 8008f2e:	2500      	movs	r5, #0
 8008f30:	f104 0619 	add.w	r6, r4, #25
 8008f34:	e7f5      	b.n	8008f22 <_printf_i+0x22e>
 8008f36:	bf00      	nop
 8008f38:	080096d1 	.word	0x080096d1
 8008f3c:	080096e2 	.word	0x080096e2

08008f40 <_putc_r>:
 8008f40:	b570      	push	{r4, r5, r6, lr}
 8008f42:	460d      	mov	r5, r1
 8008f44:	4614      	mov	r4, r2
 8008f46:	4606      	mov	r6, r0
 8008f48:	b118      	cbz	r0, 8008f52 <_putc_r+0x12>
 8008f4a:	6983      	ldr	r3, [r0, #24]
 8008f4c:	b90b      	cbnz	r3, 8008f52 <_putc_r+0x12>
 8008f4e:	f7ff fc5d 	bl	800880c <__sinit>
 8008f52:	4b1c      	ldr	r3, [pc, #112]	; (8008fc4 <_putc_r+0x84>)
 8008f54:	429c      	cmp	r4, r3
 8008f56:	d124      	bne.n	8008fa2 <_putc_r+0x62>
 8008f58:	6874      	ldr	r4, [r6, #4]
 8008f5a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008f5c:	07d8      	lsls	r0, r3, #31
 8008f5e:	d405      	bmi.n	8008f6c <_putc_r+0x2c>
 8008f60:	89a3      	ldrh	r3, [r4, #12]
 8008f62:	0599      	lsls	r1, r3, #22
 8008f64:	d402      	bmi.n	8008f6c <_putc_r+0x2c>
 8008f66:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008f68:	f7ff fcee 	bl	8008948 <__retarget_lock_acquire_recursive>
 8008f6c:	68a3      	ldr	r3, [r4, #8]
 8008f6e:	3b01      	subs	r3, #1
 8008f70:	2b00      	cmp	r3, #0
 8008f72:	60a3      	str	r3, [r4, #8]
 8008f74:	da05      	bge.n	8008f82 <_putc_r+0x42>
 8008f76:	69a2      	ldr	r2, [r4, #24]
 8008f78:	4293      	cmp	r3, r2
 8008f7a:	db1c      	blt.n	8008fb6 <_putc_r+0x76>
 8008f7c:	b2eb      	uxtb	r3, r5
 8008f7e:	2b0a      	cmp	r3, #10
 8008f80:	d019      	beq.n	8008fb6 <_putc_r+0x76>
 8008f82:	6823      	ldr	r3, [r4, #0]
 8008f84:	1c5a      	adds	r2, r3, #1
 8008f86:	6022      	str	r2, [r4, #0]
 8008f88:	701d      	strb	r5, [r3, #0]
 8008f8a:	b2ed      	uxtb	r5, r5
 8008f8c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008f8e:	07da      	lsls	r2, r3, #31
 8008f90:	d405      	bmi.n	8008f9e <_putc_r+0x5e>
 8008f92:	89a3      	ldrh	r3, [r4, #12]
 8008f94:	059b      	lsls	r3, r3, #22
 8008f96:	d402      	bmi.n	8008f9e <_putc_r+0x5e>
 8008f98:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008f9a:	f7ff fcd6 	bl	800894a <__retarget_lock_release_recursive>
 8008f9e:	4628      	mov	r0, r5
 8008fa0:	bd70      	pop	{r4, r5, r6, pc}
 8008fa2:	4b09      	ldr	r3, [pc, #36]	; (8008fc8 <_putc_r+0x88>)
 8008fa4:	429c      	cmp	r4, r3
 8008fa6:	d101      	bne.n	8008fac <_putc_r+0x6c>
 8008fa8:	68b4      	ldr	r4, [r6, #8]
 8008faa:	e7d6      	b.n	8008f5a <_putc_r+0x1a>
 8008fac:	4b07      	ldr	r3, [pc, #28]	; (8008fcc <_putc_r+0x8c>)
 8008fae:	429c      	cmp	r4, r3
 8008fb0:	bf08      	it	eq
 8008fb2:	68f4      	ldreq	r4, [r6, #12]
 8008fb4:	e7d1      	b.n	8008f5a <_putc_r+0x1a>
 8008fb6:	4629      	mov	r1, r5
 8008fb8:	4622      	mov	r2, r4
 8008fba:	4630      	mov	r0, r6
 8008fbc:	f000 f84c 	bl	8009058 <__swbuf_r>
 8008fc0:	4605      	mov	r5, r0
 8008fc2:	e7e3      	b.n	8008f8c <_putc_r+0x4c>
 8008fc4:	08009680 	.word	0x08009680
 8008fc8:	080096a0 	.word	0x080096a0
 8008fcc:	08009660 	.word	0x08009660

08008fd0 <__sread>:
 8008fd0:	b510      	push	{r4, lr}
 8008fd2:	460c      	mov	r4, r1
 8008fd4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008fd8:	f000 fa58 	bl	800948c <_read_r>
 8008fdc:	2800      	cmp	r0, #0
 8008fde:	bfab      	itete	ge
 8008fe0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8008fe2:	89a3      	ldrhlt	r3, [r4, #12]
 8008fe4:	181b      	addge	r3, r3, r0
 8008fe6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8008fea:	bfac      	ite	ge
 8008fec:	6563      	strge	r3, [r4, #84]	; 0x54
 8008fee:	81a3      	strhlt	r3, [r4, #12]
 8008ff0:	bd10      	pop	{r4, pc}

08008ff2 <__swrite>:
 8008ff2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008ff6:	461f      	mov	r7, r3
 8008ff8:	898b      	ldrh	r3, [r1, #12]
 8008ffa:	05db      	lsls	r3, r3, #23
 8008ffc:	4605      	mov	r5, r0
 8008ffe:	460c      	mov	r4, r1
 8009000:	4616      	mov	r6, r2
 8009002:	d505      	bpl.n	8009010 <__swrite+0x1e>
 8009004:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009008:	2302      	movs	r3, #2
 800900a:	2200      	movs	r2, #0
 800900c:	f000 f9c8 	bl	80093a0 <_lseek_r>
 8009010:	89a3      	ldrh	r3, [r4, #12]
 8009012:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009016:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800901a:	81a3      	strh	r3, [r4, #12]
 800901c:	4632      	mov	r2, r6
 800901e:	463b      	mov	r3, r7
 8009020:	4628      	mov	r0, r5
 8009022:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009026:	f000 b869 	b.w	80090fc <_write_r>

0800902a <__sseek>:
 800902a:	b510      	push	{r4, lr}
 800902c:	460c      	mov	r4, r1
 800902e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009032:	f000 f9b5 	bl	80093a0 <_lseek_r>
 8009036:	1c43      	adds	r3, r0, #1
 8009038:	89a3      	ldrh	r3, [r4, #12]
 800903a:	bf15      	itete	ne
 800903c:	6560      	strne	r0, [r4, #84]	; 0x54
 800903e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8009042:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8009046:	81a3      	strheq	r3, [r4, #12]
 8009048:	bf18      	it	ne
 800904a:	81a3      	strhne	r3, [r4, #12]
 800904c:	bd10      	pop	{r4, pc}

0800904e <__sclose>:
 800904e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009052:	f000 b8d3 	b.w	80091fc <_close_r>
	...

08009058 <__swbuf_r>:
 8009058:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800905a:	460e      	mov	r6, r1
 800905c:	4614      	mov	r4, r2
 800905e:	4605      	mov	r5, r0
 8009060:	b118      	cbz	r0, 800906a <__swbuf_r+0x12>
 8009062:	6983      	ldr	r3, [r0, #24]
 8009064:	b90b      	cbnz	r3, 800906a <__swbuf_r+0x12>
 8009066:	f7ff fbd1 	bl	800880c <__sinit>
 800906a:	4b21      	ldr	r3, [pc, #132]	; (80090f0 <__swbuf_r+0x98>)
 800906c:	429c      	cmp	r4, r3
 800906e:	d12b      	bne.n	80090c8 <__swbuf_r+0x70>
 8009070:	686c      	ldr	r4, [r5, #4]
 8009072:	69a3      	ldr	r3, [r4, #24]
 8009074:	60a3      	str	r3, [r4, #8]
 8009076:	89a3      	ldrh	r3, [r4, #12]
 8009078:	071a      	lsls	r2, r3, #28
 800907a:	d52f      	bpl.n	80090dc <__swbuf_r+0x84>
 800907c:	6923      	ldr	r3, [r4, #16]
 800907e:	b36b      	cbz	r3, 80090dc <__swbuf_r+0x84>
 8009080:	6923      	ldr	r3, [r4, #16]
 8009082:	6820      	ldr	r0, [r4, #0]
 8009084:	1ac0      	subs	r0, r0, r3
 8009086:	6963      	ldr	r3, [r4, #20]
 8009088:	b2f6      	uxtb	r6, r6
 800908a:	4283      	cmp	r3, r0
 800908c:	4637      	mov	r7, r6
 800908e:	dc04      	bgt.n	800909a <__swbuf_r+0x42>
 8009090:	4621      	mov	r1, r4
 8009092:	4628      	mov	r0, r5
 8009094:	f000 f948 	bl	8009328 <_fflush_r>
 8009098:	bb30      	cbnz	r0, 80090e8 <__swbuf_r+0x90>
 800909a:	68a3      	ldr	r3, [r4, #8]
 800909c:	3b01      	subs	r3, #1
 800909e:	60a3      	str	r3, [r4, #8]
 80090a0:	6823      	ldr	r3, [r4, #0]
 80090a2:	1c5a      	adds	r2, r3, #1
 80090a4:	6022      	str	r2, [r4, #0]
 80090a6:	701e      	strb	r6, [r3, #0]
 80090a8:	6963      	ldr	r3, [r4, #20]
 80090aa:	3001      	adds	r0, #1
 80090ac:	4283      	cmp	r3, r0
 80090ae:	d004      	beq.n	80090ba <__swbuf_r+0x62>
 80090b0:	89a3      	ldrh	r3, [r4, #12]
 80090b2:	07db      	lsls	r3, r3, #31
 80090b4:	d506      	bpl.n	80090c4 <__swbuf_r+0x6c>
 80090b6:	2e0a      	cmp	r6, #10
 80090b8:	d104      	bne.n	80090c4 <__swbuf_r+0x6c>
 80090ba:	4621      	mov	r1, r4
 80090bc:	4628      	mov	r0, r5
 80090be:	f000 f933 	bl	8009328 <_fflush_r>
 80090c2:	b988      	cbnz	r0, 80090e8 <__swbuf_r+0x90>
 80090c4:	4638      	mov	r0, r7
 80090c6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80090c8:	4b0a      	ldr	r3, [pc, #40]	; (80090f4 <__swbuf_r+0x9c>)
 80090ca:	429c      	cmp	r4, r3
 80090cc:	d101      	bne.n	80090d2 <__swbuf_r+0x7a>
 80090ce:	68ac      	ldr	r4, [r5, #8]
 80090d0:	e7cf      	b.n	8009072 <__swbuf_r+0x1a>
 80090d2:	4b09      	ldr	r3, [pc, #36]	; (80090f8 <__swbuf_r+0xa0>)
 80090d4:	429c      	cmp	r4, r3
 80090d6:	bf08      	it	eq
 80090d8:	68ec      	ldreq	r4, [r5, #12]
 80090da:	e7ca      	b.n	8009072 <__swbuf_r+0x1a>
 80090dc:	4621      	mov	r1, r4
 80090de:	4628      	mov	r0, r5
 80090e0:	f000 f81e 	bl	8009120 <__swsetup_r>
 80090e4:	2800      	cmp	r0, #0
 80090e6:	d0cb      	beq.n	8009080 <__swbuf_r+0x28>
 80090e8:	f04f 37ff 	mov.w	r7, #4294967295
 80090ec:	e7ea      	b.n	80090c4 <__swbuf_r+0x6c>
 80090ee:	bf00      	nop
 80090f0:	08009680 	.word	0x08009680
 80090f4:	080096a0 	.word	0x080096a0
 80090f8:	08009660 	.word	0x08009660

080090fc <_write_r>:
 80090fc:	b538      	push	{r3, r4, r5, lr}
 80090fe:	4d07      	ldr	r5, [pc, #28]	; (800911c <_write_r+0x20>)
 8009100:	4604      	mov	r4, r0
 8009102:	4608      	mov	r0, r1
 8009104:	4611      	mov	r1, r2
 8009106:	2200      	movs	r2, #0
 8009108:	602a      	str	r2, [r5, #0]
 800910a:	461a      	mov	r2, r3
 800910c:	f7fe fef8 	bl	8007f00 <_write>
 8009110:	1c43      	adds	r3, r0, #1
 8009112:	d102      	bne.n	800911a <_write_r+0x1e>
 8009114:	682b      	ldr	r3, [r5, #0]
 8009116:	b103      	cbz	r3, 800911a <_write_r+0x1e>
 8009118:	6023      	str	r3, [r4, #0]
 800911a:	bd38      	pop	{r3, r4, r5, pc}
 800911c:	20001f40 	.word	0x20001f40

08009120 <__swsetup_r>:
 8009120:	4b32      	ldr	r3, [pc, #200]	; (80091ec <__swsetup_r+0xcc>)
 8009122:	b570      	push	{r4, r5, r6, lr}
 8009124:	681d      	ldr	r5, [r3, #0]
 8009126:	4606      	mov	r6, r0
 8009128:	460c      	mov	r4, r1
 800912a:	b125      	cbz	r5, 8009136 <__swsetup_r+0x16>
 800912c:	69ab      	ldr	r3, [r5, #24]
 800912e:	b913      	cbnz	r3, 8009136 <__swsetup_r+0x16>
 8009130:	4628      	mov	r0, r5
 8009132:	f7ff fb6b 	bl	800880c <__sinit>
 8009136:	4b2e      	ldr	r3, [pc, #184]	; (80091f0 <__swsetup_r+0xd0>)
 8009138:	429c      	cmp	r4, r3
 800913a:	d10f      	bne.n	800915c <__swsetup_r+0x3c>
 800913c:	686c      	ldr	r4, [r5, #4]
 800913e:	89a3      	ldrh	r3, [r4, #12]
 8009140:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009144:	0719      	lsls	r1, r3, #28
 8009146:	d42c      	bmi.n	80091a2 <__swsetup_r+0x82>
 8009148:	06dd      	lsls	r5, r3, #27
 800914a:	d411      	bmi.n	8009170 <__swsetup_r+0x50>
 800914c:	2309      	movs	r3, #9
 800914e:	6033      	str	r3, [r6, #0]
 8009150:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8009154:	81a3      	strh	r3, [r4, #12]
 8009156:	f04f 30ff 	mov.w	r0, #4294967295
 800915a:	e03e      	b.n	80091da <__swsetup_r+0xba>
 800915c:	4b25      	ldr	r3, [pc, #148]	; (80091f4 <__swsetup_r+0xd4>)
 800915e:	429c      	cmp	r4, r3
 8009160:	d101      	bne.n	8009166 <__swsetup_r+0x46>
 8009162:	68ac      	ldr	r4, [r5, #8]
 8009164:	e7eb      	b.n	800913e <__swsetup_r+0x1e>
 8009166:	4b24      	ldr	r3, [pc, #144]	; (80091f8 <__swsetup_r+0xd8>)
 8009168:	429c      	cmp	r4, r3
 800916a:	bf08      	it	eq
 800916c:	68ec      	ldreq	r4, [r5, #12]
 800916e:	e7e6      	b.n	800913e <__swsetup_r+0x1e>
 8009170:	0758      	lsls	r0, r3, #29
 8009172:	d512      	bpl.n	800919a <__swsetup_r+0x7a>
 8009174:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009176:	b141      	cbz	r1, 800918a <__swsetup_r+0x6a>
 8009178:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800917c:	4299      	cmp	r1, r3
 800917e:	d002      	beq.n	8009186 <__swsetup_r+0x66>
 8009180:	4630      	mov	r0, r6
 8009182:	f7ff fa03 	bl	800858c <_free_r>
 8009186:	2300      	movs	r3, #0
 8009188:	6363      	str	r3, [r4, #52]	; 0x34
 800918a:	89a3      	ldrh	r3, [r4, #12]
 800918c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8009190:	81a3      	strh	r3, [r4, #12]
 8009192:	2300      	movs	r3, #0
 8009194:	6063      	str	r3, [r4, #4]
 8009196:	6923      	ldr	r3, [r4, #16]
 8009198:	6023      	str	r3, [r4, #0]
 800919a:	89a3      	ldrh	r3, [r4, #12]
 800919c:	f043 0308 	orr.w	r3, r3, #8
 80091a0:	81a3      	strh	r3, [r4, #12]
 80091a2:	6923      	ldr	r3, [r4, #16]
 80091a4:	b94b      	cbnz	r3, 80091ba <__swsetup_r+0x9a>
 80091a6:	89a3      	ldrh	r3, [r4, #12]
 80091a8:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80091ac:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80091b0:	d003      	beq.n	80091ba <__swsetup_r+0x9a>
 80091b2:	4621      	mov	r1, r4
 80091b4:	4630      	mov	r0, r6
 80091b6:	f000 f929 	bl	800940c <__smakebuf_r>
 80091ba:	89a0      	ldrh	r0, [r4, #12]
 80091bc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80091c0:	f010 0301 	ands.w	r3, r0, #1
 80091c4:	d00a      	beq.n	80091dc <__swsetup_r+0xbc>
 80091c6:	2300      	movs	r3, #0
 80091c8:	60a3      	str	r3, [r4, #8]
 80091ca:	6963      	ldr	r3, [r4, #20]
 80091cc:	425b      	negs	r3, r3
 80091ce:	61a3      	str	r3, [r4, #24]
 80091d0:	6923      	ldr	r3, [r4, #16]
 80091d2:	b943      	cbnz	r3, 80091e6 <__swsetup_r+0xc6>
 80091d4:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80091d8:	d1ba      	bne.n	8009150 <__swsetup_r+0x30>
 80091da:	bd70      	pop	{r4, r5, r6, pc}
 80091dc:	0781      	lsls	r1, r0, #30
 80091de:	bf58      	it	pl
 80091e0:	6963      	ldrpl	r3, [r4, #20]
 80091e2:	60a3      	str	r3, [r4, #8]
 80091e4:	e7f4      	b.n	80091d0 <__swsetup_r+0xb0>
 80091e6:	2000      	movs	r0, #0
 80091e8:	e7f7      	b.n	80091da <__swsetup_r+0xba>
 80091ea:	bf00      	nop
 80091ec:	20000184 	.word	0x20000184
 80091f0:	08009680 	.word	0x08009680
 80091f4:	080096a0 	.word	0x080096a0
 80091f8:	08009660 	.word	0x08009660

080091fc <_close_r>:
 80091fc:	b538      	push	{r3, r4, r5, lr}
 80091fe:	4d06      	ldr	r5, [pc, #24]	; (8009218 <_close_r+0x1c>)
 8009200:	2300      	movs	r3, #0
 8009202:	4604      	mov	r4, r0
 8009204:	4608      	mov	r0, r1
 8009206:	602b      	str	r3, [r5, #0]
 8009208:	f7fe fea6 	bl	8007f58 <_close>
 800920c:	1c43      	adds	r3, r0, #1
 800920e:	d102      	bne.n	8009216 <_close_r+0x1a>
 8009210:	682b      	ldr	r3, [r5, #0]
 8009212:	b103      	cbz	r3, 8009216 <_close_r+0x1a>
 8009214:	6023      	str	r3, [r4, #0]
 8009216:	bd38      	pop	{r3, r4, r5, pc}
 8009218:	20001f40 	.word	0x20001f40

0800921c <__sflush_r>:
 800921c:	898a      	ldrh	r2, [r1, #12]
 800921e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009222:	4605      	mov	r5, r0
 8009224:	0710      	lsls	r0, r2, #28
 8009226:	460c      	mov	r4, r1
 8009228:	d458      	bmi.n	80092dc <__sflush_r+0xc0>
 800922a:	684b      	ldr	r3, [r1, #4]
 800922c:	2b00      	cmp	r3, #0
 800922e:	dc05      	bgt.n	800923c <__sflush_r+0x20>
 8009230:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8009232:	2b00      	cmp	r3, #0
 8009234:	dc02      	bgt.n	800923c <__sflush_r+0x20>
 8009236:	2000      	movs	r0, #0
 8009238:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800923c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800923e:	2e00      	cmp	r6, #0
 8009240:	d0f9      	beq.n	8009236 <__sflush_r+0x1a>
 8009242:	2300      	movs	r3, #0
 8009244:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8009248:	682f      	ldr	r7, [r5, #0]
 800924a:	602b      	str	r3, [r5, #0]
 800924c:	d032      	beq.n	80092b4 <__sflush_r+0x98>
 800924e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8009250:	89a3      	ldrh	r3, [r4, #12]
 8009252:	075a      	lsls	r2, r3, #29
 8009254:	d505      	bpl.n	8009262 <__sflush_r+0x46>
 8009256:	6863      	ldr	r3, [r4, #4]
 8009258:	1ac0      	subs	r0, r0, r3
 800925a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800925c:	b10b      	cbz	r3, 8009262 <__sflush_r+0x46>
 800925e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8009260:	1ac0      	subs	r0, r0, r3
 8009262:	2300      	movs	r3, #0
 8009264:	4602      	mov	r2, r0
 8009266:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009268:	6a21      	ldr	r1, [r4, #32]
 800926a:	4628      	mov	r0, r5
 800926c:	47b0      	blx	r6
 800926e:	1c43      	adds	r3, r0, #1
 8009270:	89a3      	ldrh	r3, [r4, #12]
 8009272:	d106      	bne.n	8009282 <__sflush_r+0x66>
 8009274:	6829      	ldr	r1, [r5, #0]
 8009276:	291d      	cmp	r1, #29
 8009278:	d82c      	bhi.n	80092d4 <__sflush_r+0xb8>
 800927a:	4a2a      	ldr	r2, [pc, #168]	; (8009324 <__sflush_r+0x108>)
 800927c:	40ca      	lsrs	r2, r1
 800927e:	07d6      	lsls	r6, r2, #31
 8009280:	d528      	bpl.n	80092d4 <__sflush_r+0xb8>
 8009282:	2200      	movs	r2, #0
 8009284:	6062      	str	r2, [r4, #4]
 8009286:	04d9      	lsls	r1, r3, #19
 8009288:	6922      	ldr	r2, [r4, #16]
 800928a:	6022      	str	r2, [r4, #0]
 800928c:	d504      	bpl.n	8009298 <__sflush_r+0x7c>
 800928e:	1c42      	adds	r2, r0, #1
 8009290:	d101      	bne.n	8009296 <__sflush_r+0x7a>
 8009292:	682b      	ldr	r3, [r5, #0]
 8009294:	b903      	cbnz	r3, 8009298 <__sflush_r+0x7c>
 8009296:	6560      	str	r0, [r4, #84]	; 0x54
 8009298:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800929a:	602f      	str	r7, [r5, #0]
 800929c:	2900      	cmp	r1, #0
 800929e:	d0ca      	beq.n	8009236 <__sflush_r+0x1a>
 80092a0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80092a4:	4299      	cmp	r1, r3
 80092a6:	d002      	beq.n	80092ae <__sflush_r+0x92>
 80092a8:	4628      	mov	r0, r5
 80092aa:	f7ff f96f 	bl	800858c <_free_r>
 80092ae:	2000      	movs	r0, #0
 80092b0:	6360      	str	r0, [r4, #52]	; 0x34
 80092b2:	e7c1      	b.n	8009238 <__sflush_r+0x1c>
 80092b4:	6a21      	ldr	r1, [r4, #32]
 80092b6:	2301      	movs	r3, #1
 80092b8:	4628      	mov	r0, r5
 80092ba:	47b0      	blx	r6
 80092bc:	1c41      	adds	r1, r0, #1
 80092be:	d1c7      	bne.n	8009250 <__sflush_r+0x34>
 80092c0:	682b      	ldr	r3, [r5, #0]
 80092c2:	2b00      	cmp	r3, #0
 80092c4:	d0c4      	beq.n	8009250 <__sflush_r+0x34>
 80092c6:	2b1d      	cmp	r3, #29
 80092c8:	d001      	beq.n	80092ce <__sflush_r+0xb2>
 80092ca:	2b16      	cmp	r3, #22
 80092cc:	d101      	bne.n	80092d2 <__sflush_r+0xb6>
 80092ce:	602f      	str	r7, [r5, #0]
 80092d0:	e7b1      	b.n	8009236 <__sflush_r+0x1a>
 80092d2:	89a3      	ldrh	r3, [r4, #12]
 80092d4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80092d8:	81a3      	strh	r3, [r4, #12]
 80092da:	e7ad      	b.n	8009238 <__sflush_r+0x1c>
 80092dc:	690f      	ldr	r7, [r1, #16]
 80092de:	2f00      	cmp	r7, #0
 80092e0:	d0a9      	beq.n	8009236 <__sflush_r+0x1a>
 80092e2:	0793      	lsls	r3, r2, #30
 80092e4:	680e      	ldr	r6, [r1, #0]
 80092e6:	bf08      	it	eq
 80092e8:	694b      	ldreq	r3, [r1, #20]
 80092ea:	600f      	str	r7, [r1, #0]
 80092ec:	bf18      	it	ne
 80092ee:	2300      	movne	r3, #0
 80092f0:	eba6 0807 	sub.w	r8, r6, r7
 80092f4:	608b      	str	r3, [r1, #8]
 80092f6:	f1b8 0f00 	cmp.w	r8, #0
 80092fa:	dd9c      	ble.n	8009236 <__sflush_r+0x1a>
 80092fc:	6a21      	ldr	r1, [r4, #32]
 80092fe:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8009300:	4643      	mov	r3, r8
 8009302:	463a      	mov	r2, r7
 8009304:	4628      	mov	r0, r5
 8009306:	47b0      	blx	r6
 8009308:	2800      	cmp	r0, #0
 800930a:	dc06      	bgt.n	800931a <__sflush_r+0xfe>
 800930c:	89a3      	ldrh	r3, [r4, #12]
 800930e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009312:	81a3      	strh	r3, [r4, #12]
 8009314:	f04f 30ff 	mov.w	r0, #4294967295
 8009318:	e78e      	b.n	8009238 <__sflush_r+0x1c>
 800931a:	4407      	add	r7, r0
 800931c:	eba8 0800 	sub.w	r8, r8, r0
 8009320:	e7e9      	b.n	80092f6 <__sflush_r+0xda>
 8009322:	bf00      	nop
 8009324:	20400001 	.word	0x20400001

08009328 <_fflush_r>:
 8009328:	b538      	push	{r3, r4, r5, lr}
 800932a:	690b      	ldr	r3, [r1, #16]
 800932c:	4605      	mov	r5, r0
 800932e:	460c      	mov	r4, r1
 8009330:	b913      	cbnz	r3, 8009338 <_fflush_r+0x10>
 8009332:	2500      	movs	r5, #0
 8009334:	4628      	mov	r0, r5
 8009336:	bd38      	pop	{r3, r4, r5, pc}
 8009338:	b118      	cbz	r0, 8009342 <_fflush_r+0x1a>
 800933a:	6983      	ldr	r3, [r0, #24]
 800933c:	b90b      	cbnz	r3, 8009342 <_fflush_r+0x1a>
 800933e:	f7ff fa65 	bl	800880c <__sinit>
 8009342:	4b14      	ldr	r3, [pc, #80]	; (8009394 <_fflush_r+0x6c>)
 8009344:	429c      	cmp	r4, r3
 8009346:	d11b      	bne.n	8009380 <_fflush_r+0x58>
 8009348:	686c      	ldr	r4, [r5, #4]
 800934a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800934e:	2b00      	cmp	r3, #0
 8009350:	d0ef      	beq.n	8009332 <_fflush_r+0xa>
 8009352:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8009354:	07d0      	lsls	r0, r2, #31
 8009356:	d404      	bmi.n	8009362 <_fflush_r+0x3a>
 8009358:	0599      	lsls	r1, r3, #22
 800935a:	d402      	bmi.n	8009362 <_fflush_r+0x3a>
 800935c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800935e:	f7ff faf3 	bl	8008948 <__retarget_lock_acquire_recursive>
 8009362:	4628      	mov	r0, r5
 8009364:	4621      	mov	r1, r4
 8009366:	f7ff ff59 	bl	800921c <__sflush_r>
 800936a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800936c:	07da      	lsls	r2, r3, #31
 800936e:	4605      	mov	r5, r0
 8009370:	d4e0      	bmi.n	8009334 <_fflush_r+0xc>
 8009372:	89a3      	ldrh	r3, [r4, #12]
 8009374:	059b      	lsls	r3, r3, #22
 8009376:	d4dd      	bmi.n	8009334 <_fflush_r+0xc>
 8009378:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800937a:	f7ff fae6 	bl	800894a <__retarget_lock_release_recursive>
 800937e:	e7d9      	b.n	8009334 <_fflush_r+0xc>
 8009380:	4b05      	ldr	r3, [pc, #20]	; (8009398 <_fflush_r+0x70>)
 8009382:	429c      	cmp	r4, r3
 8009384:	d101      	bne.n	800938a <_fflush_r+0x62>
 8009386:	68ac      	ldr	r4, [r5, #8]
 8009388:	e7df      	b.n	800934a <_fflush_r+0x22>
 800938a:	4b04      	ldr	r3, [pc, #16]	; (800939c <_fflush_r+0x74>)
 800938c:	429c      	cmp	r4, r3
 800938e:	bf08      	it	eq
 8009390:	68ec      	ldreq	r4, [r5, #12]
 8009392:	e7da      	b.n	800934a <_fflush_r+0x22>
 8009394:	08009680 	.word	0x08009680
 8009398:	080096a0 	.word	0x080096a0
 800939c:	08009660 	.word	0x08009660

080093a0 <_lseek_r>:
 80093a0:	b538      	push	{r3, r4, r5, lr}
 80093a2:	4d07      	ldr	r5, [pc, #28]	; (80093c0 <_lseek_r+0x20>)
 80093a4:	4604      	mov	r4, r0
 80093a6:	4608      	mov	r0, r1
 80093a8:	4611      	mov	r1, r2
 80093aa:	2200      	movs	r2, #0
 80093ac:	602a      	str	r2, [r5, #0]
 80093ae:	461a      	mov	r2, r3
 80093b0:	f7fe fddc 	bl	8007f6c <_lseek>
 80093b4:	1c43      	adds	r3, r0, #1
 80093b6:	d102      	bne.n	80093be <_lseek_r+0x1e>
 80093b8:	682b      	ldr	r3, [r5, #0]
 80093ba:	b103      	cbz	r3, 80093be <_lseek_r+0x1e>
 80093bc:	6023      	str	r3, [r4, #0]
 80093be:	bd38      	pop	{r3, r4, r5, pc}
 80093c0:	20001f40 	.word	0x20001f40

080093c4 <__swhatbuf_r>:
 80093c4:	b570      	push	{r4, r5, r6, lr}
 80093c6:	460e      	mov	r6, r1
 80093c8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80093cc:	2900      	cmp	r1, #0
 80093ce:	b096      	sub	sp, #88	; 0x58
 80093d0:	4614      	mov	r4, r2
 80093d2:	461d      	mov	r5, r3
 80093d4:	da07      	bge.n	80093e6 <__swhatbuf_r+0x22>
 80093d6:	2300      	movs	r3, #0
 80093d8:	602b      	str	r3, [r5, #0]
 80093da:	89b3      	ldrh	r3, [r6, #12]
 80093dc:	061a      	lsls	r2, r3, #24
 80093de:	d410      	bmi.n	8009402 <__swhatbuf_r+0x3e>
 80093e0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80093e4:	e00e      	b.n	8009404 <__swhatbuf_r+0x40>
 80093e6:	466a      	mov	r2, sp
 80093e8:	f000 f862 	bl	80094b0 <_fstat_r>
 80093ec:	2800      	cmp	r0, #0
 80093ee:	dbf2      	blt.n	80093d6 <__swhatbuf_r+0x12>
 80093f0:	9a01      	ldr	r2, [sp, #4]
 80093f2:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80093f6:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80093fa:	425a      	negs	r2, r3
 80093fc:	415a      	adcs	r2, r3
 80093fe:	602a      	str	r2, [r5, #0]
 8009400:	e7ee      	b.n	80093e0 <__swhatbuf_r+0x1c>
 8009402:	2340      	movs	r3, #64	; 0x40
 8009404:	2000      	movs	r0, #0
 8009406:	6023      	str	r3, [r4, #0]
 8009408:	b016      	add	sp, #88	; 0x58
 800940a:	bd70      	pop	{r4, r5, r6, pc}

0800940c <__smakebuf_r>:
 800940c:	898b      	ldrh	r3, [r1, #12]
 800940e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8009410:	079d      	lsls	r5, r3, #30
 8009412:	4606      	mov	r6, r0
 8009414:	460c      	mov	r4, r1
 8009416:	d507      	bpl.n	8009428 <__smakebuf_r+0x1c>
 8009418:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800941c:	6023      	str	r3, [r4, #0]
 800941e:	6123      	str	r3, [r4, #16]
 8009420:	2301      	movs	r3, #1
 8009422:	6163      	str	r3, [r4, #20]
 8009424:	b002      	add	sp, #8
 8009426:	bd70      	pop	{r4, r5, r6, pc}
 8009428:	ab01      	add	r3, sp, #4
 800942a:	466a      	mov	r2, sp
 800942c:	f7ff ffca 	bl	80093c4 <__swhatbuf_r>
 8009430:	9900      	ldr	r1, [sp, #0]
 8009432:	4605      	mov	r5, r0
 8009434:	4630      	mov	r0, r6
 8009436:	f7ff f8f9 	bl	800862c <_malloc_r>
 800943a:	b948      	cbnz	r0, 8009450 <__smakebuf_r+0x44>
 800943c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009440:	059a      	lsls	r2, r3, #22
 8009442:	d4ef      	bmi.n	8009424 <__smakebuf_r+0x18>
 8009444:	f023 0303 	bic.w	r3, r3, #3
 8009448:	f043 0302 	orr.w	r3, r3, #2
 800944c:	81a3      	strh	r3, [r4, #12]
 800944e:	e7e3      	b.n	8009418 <__smakebuf_r+0xc>
 8009450:	4b0d      	ldr	r3, [pc, #52]	; (8009488 <__smakebuf_r+0x7c>)
 8009452:	62b3      	str	r3, [r6, #40]	; 0x28
 8009454:	89a3      	ldrh	r3, [r4, #12]
 8009456:	6020      	str	r0, [r4, #0]
 8009458:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800945c:	81a3      	strh	r3, [r4, #12]
 800945e:	9b00      	ldr	r3, [sp, #0]
 8009460:	6163      	str	r3, [r4, #20]
 8009462:	9b01      	ldr	r3, [sp, #4]
 8009464:	6120      	str	r0, [r4, #16]
 8009466:	b15b      	cbz	r3, 8009480 <__smakebuf_r+0x74>
 8009468:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800946c:	4630      	mov	r0, r6
 800946e:	f000 f831 	bl	80094d4 <_isatty_r>
 8009472:	b128      	cbz	r0, 8009480 <__smakebuf_r+0x74>
 8009474:	89a3      	ldrh	r3, [r4, #12]
 8009476:	f023 0303 	bic.w	r3, r3, #3
 800947a:	f043 0301 	orr.w	r3, r3, #1
 800947e:	81a3      	strh	r3, [r4, #12]
 8009480:	89a0      	ldrh	r0, [r4, #12]
 8009482:	4305      	orrs	r5, r0
 8009484:	81a5      	strh	r5, [r4, #12]
 8009486:	e7cd      	b.n	8009424 <__smakebuf_r+0x18>
 8009488:	080087a5 	.word	0x080087a5

0800948c <_read_r>:
 800948c:	b538      	push	{r3, r4, r5, lr}
 800948e:	4d07      	ldr	r5, [pc, #28]	; (80094ac <_read_r+0x20>)
 8009490:	4604      	mov	r4, r0
 8009492:	4608      	mov	r0, r1
 8009494:	4611      	mov	r1, r2
 8009496:	2200      	movs	r2, #0
 8009498:	602a      	str	r2, [r5, #0]
 800949a:	461a      	mov	r2, r3
 800949c:	f7fe fd20 	bl	8007ee0 <_read>
 80094a0:	1c43      	adds	r3, r0, #1
 80094a2:	d102      	bne.n	80094aa <_read_r+0x1e>
 80094a4:	682b      	ldr	r3, [r5, #0]
 80094a6:	b103      	cbz	r3, 80094aa <_read_r+0x1e>
 80094a8:	6023      	str	r3, [r4, #0]
 80094aa:	bd38      	pop	{r3, r4, r5, pc}
 80094ac:	20001f40 	.word	0x20001f40

080094b0 <_fstat_r>:
 80094b0:	b538      	push	{r3, r4, r5, lr}
 80094b2:	4d07      	ldr	r5, [pc, #28]	; (80094d0 <_fstat_r+0x20>)
 80094b4:	2300      	movs	r3, #0
 80094b6:	4604      	mov	r4, r0
 80094b8:	4608      	mov	r0, r1
 80094ba:	4611      	mov	r1, r2
 80094bc:	602b      	str	r3, [r5, #0]
 80094be:	f7fe fd4e 	bl	8007f5e <_fstat>
 80094c2:	1c43      	adds	r3, r0, #1
 80094c4:	d102      	bne.n	80094cc <_fstat_r+0x1c>
 80094c6:	682b      	ldr	r3, [r5, #0]
 80094c8:	b103      	cbz	r3, 80094cc <_fstat_r+0x1c>
 80094ca:	6023      	str	r3, [r4, #0]
 80094cc:	bd38      	pop	{r3, r4, r5, pc}
 80094ce:	bf00      	nop
 80094d0:	20001f40 	.word	0x20001f40

080094d4 <_isatty_r>:
 80094d4:	b538      	push	{r3, r4, r5, lr}
 80094d6:	4d06      	ldr	r5, [pc, #24]	; (80094f0 <_isatty_r+0x1c>)
 80094d8:	2300      	movs	r3, #0
 80094da:	4604      	mov	r4, r0
 80094dc:	4608      	mov	r0, r1
 80094de:	602b      	str	r3, [r5, #0]
 80094e0:	f7fe fd42 	bl	8007f68 <_isatty>
 80094e4:	1c43      	adds	r3, r0, #1
 80094e6:	d102      	bne.n	80094ee <_isatty_r+0x1a>
 80094e8:	682b      	ldr	r3, [r5, #0]
 80094ea:	b103      	cbz	r3, 80094ee <_isatty_r+0x1a>
 80094ec:	6023      	str	r3, [r4, #0]
 80094ee:	bd38      	pop	{r3, r4, r5, pc}
 80094f0:	20001f40 	.word	0x20001f40

080094f4 <_init>:
 80094f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80094f6:	bf00      	nop
 80094f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80094fa:	bc08      	pop	{r3}
 80094fc:	469e      	mov	lr, r3
 80094fe:	4770      	bx	lr

08009500 <_fini>:
 8009500:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009502:	bf00      	nop
 8009504:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009506:	bc08      	pop	{r3}
 8009508:	469e      	mov	lr, r3
 800950a:	4770      	bx	lr
