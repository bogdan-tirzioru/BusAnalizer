
FirmwareB.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002cc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000120e4  080002d0  080002d0  000102d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000128  080123b4  080123b4  000223b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  080124dc  080124dc  000224dc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  080124e4  080124e4  000224e4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  080124e8  080124e8  000224e8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000188  20000000  080124ec  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00006c5c  20000188  08012674  00030188  2**2
                  ALLOC
  8 ._user_heap_stack 00000604  20006de4  08012674  00036de4  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  00030188  2**0
                  CONTENTS, READONLY
 10 .debug_info   0004d149  00000000  00000000  000301b6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00007c36  00000000  00000000  0007d2ff  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00002950  00000000  00000000  00084f38  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 000026d8  00000000  00000000  00087888  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  0000aa65  00000000  00000000  00089f60  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   000323aa  00000000  00000000  000949c5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    00179e1b  00000000  00000000  000c6d6f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000053  00000000  00000000  00240b8a  2**0
                  CONTENTS, READONLY
 18 .debug_frame  0000b108  00000000  00000000  00240be0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002d0 <__do_global_dtors_aux>:
 80002d0:	b510      	push	{r4, lr}
 80002d2:	4c05      	ldr	r4, [pc, #20]	; (80002e8 <__do_global_dtors_aux+0x18>)
 80002d4:	7823      	ldrb	r3, [r4, #0]
 80002d6:	b933      	cbnz	r3, 80002e6 <__do_global_dtors_aux+0x16>
 80002d8:	4b04      	ldr	r3, [pc, #16]	; (80002ec <__do_global_dtors_aux+0x1c>)
 80002da:	b113      	cbz	r3, 80002e2 <__do_global_dtors_aux+0x12>
 80002dc:	4804      	ldr	r0, [pc, #16]	; (80002f0 <__do_global_dtors_aux+0x20>)
 80002de:	f3af 8000 	nop.w
 80002e2:	2301      	movs	r3, #1
 80002e4:	7023      	strb	r3, [r4, #0]
 80002e6:	bd10      	pop	{r4, pc}
 80002e8:	20000188 	.word	0x20000188
 80002ec:	00000000 	.word	0x00000000
 80002f0:	0801239c 	.word	0x0801239c

080002f4 <frame_dummy>:
 80002f4:	b508      	push	{r3, lr}
 80002f6:	4b03      	ldr	r3, [pc, #12]	; (8000304 <frame_dummy+0x10>)
 80002f8:	b11b      	cbz	r3, 8000302 <frame_dummy+0xe>
 80002fa:	4903      	ldr	r1, [pc, #12]	; (8000308 <frame_dummy+0x14>)
 80002fc:	4803      	ldr	r0, [pc, #12]	; (800030c <frame_dummy+0x18>)
 80002fe:	f3af 8000 	nop.w
 8000302:	bd08      	pop	{r3, pc}
 8000304:	00000000 	.word	0x00000000
 8000308:	2000018c 	.word	0x2000018c
 800030c:	0801239c 	.word	0x0801239c

08000310 <__aeabi_uldivmod>:
 8000310:	b953      	cbnz	r3, 8000328 <__aeabi_uldivmod+0x18>
 8000312:	b94a      	cbnz	r2, 8000328 <__aeabi_uldivmod+0x18>
 8000314:	2900      	cmp	r1, #0
 8000316:	bf08      	it	eq
 8000318:	2800      	cmpeq	r0, #0
 800031a:	bf1c      	itt	ne
 800031c:	f04f 31ff 	movne.w	r1, #4294967295
 8000320:	f04f 30ff 	movne.w	r0, #4294967295
 8000324:	f000 b96e 	b.w	8000604 <__aeabi_idiv0>
 8000328:	f1ad 0c08 	sub.w	ip, sp, #8
 800032c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000330:	f000 f806 	bl	8000340 <__udivmoddi4>
 8000334:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000338:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800033c:	b004      	add	sp, #16
 800033e:	4770      	bx	lr

08000340 <__udivmoddi4>:
 8000340:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000344:	9d08      	ldr	r5, [sp, #32]
 8000346:	4604      	mov	r4, r0
 8000348:	468c      	mov	ip, r1
 800034a:	2b00      	cmp	r3, #0
 800034c:	f040 8083 	bne.w	8000456 <__udivmoddi4+0x116>
 8000350:	428a      	cmp	r2, r1
 8000352:	4617      	mov	r7, r2
 8000354:	d947      	bls.n	80003e6 <__udivmoddi4+0xa6>
 8000356:	fab2 f282 	clz	r2, r2
 800035a:	b142      	cbz	r2, 800036e <__udivmoddi4+0x2e>
 800035c:	f1c2 0020 	rsb	r0, r2, #32
 8000360:	fa24 f000 	lsr.w	r0, r4, r0
 8000364:	4091      	lsls	r1, r2
 8000366:	4097      	lsls	r7, r2
 8000368:	ea40 0c01 	orr.w	ip, r0, r1
 800036c:	4094      	lsls	r4, r2
 800036e:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000372:	0c23      	lsrs	r3, r4, #16
 8000374:	fbbc f6f8 	udiv	r6, ip, r8
 8000378:	fa1f fe87 	uxth.w	lr, r7
 800037c:	fb08 c116 	mls	r1, r8, r6, ip
 8000380:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000384:	fb06 f10e 	mul.w	r1, r6, lr
 8000388:	4299      	cmp	r1, r3
 800038a:	d909      	bls.n	80003a0 <__udivmoddi4+0x60>
 800038c:	18fb      	adds	r3, r7, r3
 800038e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000392:	f080 8119 	bcs.w	80005c8 <__udivmoddi4+0x288>
 8000396:	4299      	cmp	r1, r3
 8000398:	f240 8116 	bls.w	80005c8 <__udivmoddi4+0x288>
 800039c:	3e02      	subs	r6, #2
 800039e:	443b      	add	r3, r7
 80003a0:	1a5b      	subs	r3, r3, r1
 80003a2:	b2a4      	uxth	r4, r4
 80003a4:	fbb3 f0f8 	udiv	r0, r3, r8
 80003a8:	fb08 3310 	mls	r3, r8, r0, r3
 80003ac:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80003b0:	fb00 fe0e 	mul.w	lr, r0, lr
 80003b4:	45a6      	cmp	lr, r4
 80003b6:	d909      	bls.n	80003cc <__udivmoddi4+0x8c>
 80003b8:	193c      	adds	r4, r7, r4
 80003ba:	f100 33ff 	add.w	r3, r0, #4294967295
 80003be:	f080 8105 	bcs.w	80005cc <__udivmoddi4+0x28c>
 80003c2:	45a6      	cmp	lr, r4
 80003c4:	f240 8102 	bls.w	80005cc <__udivmoddi4+0x28c>
 80003c8:	3802      	subs	r0, #2
 80003ca:	443c      	add	r4, r7
 80003cc:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003d0:	eba4 040e 	sub.w	r4, r4, lr
 80003d4:	2600      	movs	r6, #0
 80003d6:	b11d      	cbz	r5, 80003e0 <__udivmoddi4+0xa0>
 80003d8:	40d4      	lsrs	r4, r2
 80003da:	2300      	movs	r3, #0
 80003dc:	e9c5 4300 	strd	r4, r3, [r5]
 80003e0:	4631      	mov	r1, r6
 80003e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003e6:	b902      	cbnz	r2, 80003ea <__udivmoddi4+0xaa>
 80003e8:	deff      	udf	#255	; 0xff
 80003ea:	fab2 f282 	clz	r2, r2
 80003ee:	2a00      	cmp	r2, #0
 80003f0:	d150      	bne.n	8000494 <__udivmoddi4+0x154>
 80003f2:	1bcb      	subs	r3, r1, r7
 80003f4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003f8:	fa1f f887 	uxth.w	r8, r7
 80003fc:	2601      	movs	r6, #1
 80003fe:	fbb3 fcfe 	udiv	ip, r3, lr
 8000402:	0c21      	lsrs	r1, r4, #16
 8000404:	fb0e 331c 	mls	r3, lr, ip, r3
 8000408:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800040c:	fb08 f30c 	mul.w	r3, r8, ip
 8000410:	428b      	cmp	r3, r1
 8000412:	d907      	bls.n	8000424 <__udivmoddi4+0xe4>
 8000414:	1879      	adds	r1, r7, r1
 8000416:	f10c 30ff 	add.w	r0, ip, #4294967295
 800041a:	d202      	bcs.n	8000422 <__udivmoddi4+0xe2>
 800041c:	428b      	cmp	r3, r1
 800041e:	f200 80e9 	bhi.w	80005f4 <__udivmoddi4+0x2b4>
 8000422:	4684      	mov	ip, r0
 8000424:	1ac9      	subs	r1, r1, r3
 8000426:	b2a3      	uxth	r3, r4
 8000428:	fbb1 f0fe 	udiv	r0, r1, lr
 800042c:	fb0e 1110 	mls	r1, lr, r0, r1
 8000430:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000434:	fb08 f800 	mul.w	r8, r8, r0
 8000438:	45a0      	cmp	r8, r4
 800043a:	d907      	bls.n	800044c <__udivmoddi4+0x10c>
 800043c:	193c      	adds	r4, r7, r4
 800043e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000442:	d202      	bcs.n	800044a <__udivmoddi4+0x10a>
 8000444:	45a0      	cmp	r8, r4
 8000446:	f200 80d9 	bhi.w	80005fc <__udivmoddi4+0x2bc>
 800044a:	4618      	mov	r0, r3
 800044c:	eba4 0408 	sub.w	r4, r4, r8
 8000450:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000454:	e7bf      	b.n	80003d6 <__udivmoddi4+0x96>
 8000456:	428b      	cmp	r3, r1
 8000458:	d909      	bls.n	800046e <__udivmoddi4+0x12e>
 800045a:	2d00      	cmp	r5, #0
 800045c:	f000 80b1 	beq.w	80005c2 <__udivmoddi4+0x282>
 8000460:	2600      	movs	r6, #0
 8000462:	e9c5 0100 	strd	r0, r1, [r5]
 8000466:	4630      	mov	r0, r6
 8000468:	4631      	mov	r1, r6
 800046a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800046e:	fab3 f683 	clz	r6, r3
 8000472:	2e00      	cmp	r6, #0
 8000474:	d14a      	bne.n	800050c <__udivmoddi4+0x1cc>
 8000476:	428b      	cmp	r3, r1
 8000478:	d302      	bcc.n	8000480 <__udivmoddi4+0x140>
 800047a:	4282      	cmp	r2, r0
 800047c:	f200 80b8 	bhi.w	80005f0 <__udivmoddi4+0x2b0>
 8000480:	1a84      	subs	r4, r0, r2
 8000482:	eb61 0103 	sbc.w	r1, r1, r3
 8000486:	2001      	movs	r0, #1
 8000488:	468c      	mov	ip, r1
 800048a:	2d00      	cmp	r5, #0
 800048c:	d0a8      	beq.n	80003e0 <__udivmoddi4+0xa0>
 800048e:	e9c5 4c00 	strd	r4, ip, [r5]
 8000492:	e7a5      	b.n	80003e0 <__udivmoddi4+0xa0>
 8000494:	f1c2 0320 	rsb	r3, r2, #32
 8000498:	fa20 f603 	lsr.w	r6, r0, r3
 800049c:	4097      	lsls	r7, r2
 800049e:	fa01 f002 	lsl.w	r0, r1, r2
 80004a2:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80004a6:	40d9      	lsrs	r1, r3
 80004a8:	4330      	orrs	r0, r6
 80004aa:	0c03      	lsrs	r3, r0, #16
 80004ac:	fbb1 f6fe 	udiv	r6, r1, lr
 80004b0:	fa1f f887 	uxth.w	r8, r7
 80004b4:	fb0e 1116 	mls	r1, lr, r6, r1
 80004b8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004bc:	fb06 f108 	mul.w	r1, r6, r8
 80004c0:	4299      	cmp	r1, r3
 80004c2:	fa04 f402 	lsl.w	r4, r4, r2
 80004c6:	d909      	bls.n	80004dc <__udivmoddi4+0x19c>
 80004c8:	18fb      	adds	r3, r7, r3
 80004ca:	f106 3cff 	add.w	ip, r6, #4294967295
 80004ce:	f080 808d 	bcs.w	80005ec <__udivmoddi4+0x2ac>
 80004d2:	4299      	cmp	r1, r3
 80004d4:	f240 808a 	bls.w	80005ec <__udivmoddi4+0x2ac>
 80004d8:	3e02      	subs	r6, #2
 80004da:	443b      	add	r3, r7
 80004dc:	1a5b      	subs	r3, r3, r1
 80004de:	b281      	uxth	r1, r0
 80004e0:	fbb3 f0fe 	udiv	r0, r3, lr
 80004e4:	fb0e 3310 	mls	r3, lr, r0, r3
 80004e8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004ec:	fb00 f308 	mul.w	r3, r0, r8
 80004f0:	428b      	cmp	r3, r1
 80004f2:	d907      	bls.n	8000504 <__udivmoddi4+0x1c4>
 80004f4:	1879      	adds	r1, r7, r1
 80004f6:	f100 3cff 	add.w	ip, r0, #4294967295
 80004fa:	d273      	bcs.n	80005e4 <__udivmoddi4+0x2a4>
 80004fc:	428b      	cmp	r3, r1
 80004fe:	d971      	bls.n	80005e4 <__udivmoddi4+0x2a4>
 8000500:	3802      	subs	r0, #2
 8000502:	4439      	add	r1, r7
 8000504:	1acb      	subs	r3, r1, r3
 8000506:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800050a:	e778      	b.n	80003fe <__udivmoddi4+0xbe>
 800050c:	f1c6 0c20 	rsb	ip, r6, #32
 8000510:	fa03 f406 	lsl.w	r4, r3, r6
 8000514:	fa22 f30c 	lsr.w	r3, r2, ip
 8000518:	431c      	orrs	r4, r3
 800051a:	fa20 f70c 	lsr.w	r7, r0, ip
 800051e:	fa01 f306 	lsl.w	r3, r1, r6
 8000522:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000526:	fa21 f10c 	lsr.w	r1, r1, ip
 800052a:	431f      	orrs	r7, r3
 800052c:	0c3b      	lsrs	r3, r7, #16
 800052e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000532:	fa1f f884 	uxth.w	r8, r4
 8000536:	fb0e 1119 	mls	r1, lr, r9, r1
 800053a:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 800053e:	fb09 fa08 	mul.w	sl, r9, r8
 8000542:	458a      	cmp	sl, r1
 8000544:	fa02 f206 	lsl.w	r2, r2, r6
 8000548:	fa00 f306 	lsl.w	r3, r0, r6
 800054c:	d908      	bls.n	8000560 <__udivmoddi4+0x220>
 800054e:	1861      	adds	r1, r4, r1
 8000550:	f109 30ff 	add.w	r0, r9, #4294967295
 8000554:	d248      	bcs.n	80005e8 <__udivmoddi4+0x2a8>
 8000556:	458a      	cmp	sl, r1
 8000558:	d946      	bls.n	80005e8 <__udivmoddi4+0x2a8>
 800055a:	f1a9 0902 	sub.w	r9, r9, #2
 800055e:	4421      	add	r1, r4
 8000560:	eba1 010a 	sub.w	r1, r1, sl
 8000564:	b2bf      	uxth	r7, r7
 8000566:	fbb1 f0fe 	udiv	r0, r1, lr
 800056a:	fb0e 1110 	mls	r1, lr, r0, r1
 800056e:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000572:	fb00 f808 	mul.w	r8, r0, r8
 8000576:	45b8      	cmp	r8, r7
 8000578:	d907      	bls.n	800058a <__udivmoddi4+0x24a>
 800057a:	19e7      	adds	r7, r4, r7
 800057c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000580:	d22e      	bcs.n	80005e0 <__udivmoddi4+0x2a0>
 8000582:	45b8      	cmp	r8, r7
 8000584:	d92c      	bls.n	80005e0 <__udivmoddi4+0x2a0>
 8000586:	3802      	subs	r0, #2
 8000588:	4427      	add	r7, r4
 800058a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800058e:	eba7 0708 	sub.w	r7, r7, r8
 8000592:	fba0 8902 	umull	r8, r9, r0, r2
 8000596:	454f      	cmp	r7, r9
 8000598:	46c6      	mov	lr, r8
 800059a:	4649      	mov	r1, r9
 800059c:	d31a      	bcc.n	80005d4 <__udivmoddi4+0x294>
 800059e:	d017      	beq.n	80005d0 <__udivmoddi4+0x290>
 80005a0:	b15d      	cbz	r5, 80005ba <__udivmoddi4+0x27a>
 80005a2:	ebb3 020e 	subs.w	r2, r3, lr
 80005a6:	eb67 0701 	sbc.w	r7, r7, r1
 80005aa:	fa07 fc0c 	lsl.w	ip, r7, ip
 80005ae:	40f2      	lsrs	r2, r6
 80005b0:	ea4c 0202 	orr.w	r2, ip, r2
 80005b4:	40f7      	lsrs	r7, r6
 80005b6:	e9c5 2700 	strd	r2, r7, [r5]
 80005ba:	2600      	movs	r6, #0
 80005bc:	4631      	mov	r1, r6
 80005be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80005c2:	462e      	mov	r6, r5
 80005c4:	4628      	mov	r0, r5
 80005c6:	e70b      	b.n	80003e0 <__udivmoddi4+0xa0>
 80005c8:	4606      	mov	r6, r0
 80005ca:	e6e9      	b.n	80003a0 <__udivmoddi4+0x60>
 80005cc:	4618      	mov	r0, r3
 80005ce:	e6fd      	b.n	80003cc <__udivmoddi4+0x8c>
 80005d0:	4543      	cmp	r3, r8
 80005d2:	d2e5      	bcs.n	80005a0 <__udivmoddi4+0x260>
 80005d4:	ebb8 0e02 	subs.w	lr, r8, r2
 80005d8:	eb69 0104 	sbc.w	r1, r9, r4
 80005dc:	3801      	subs	r0, #1
 80005de:	e7df      	b.n	80005a0 <__udivmoddi4+0x260>
 80005e0:	4608      	mov	r0, r1
 80005e2:	e7d2      	b.n	800058a <__udivmoddi4+0x24a>
 80005e4:	4660      	mov	r0, ip
 80005e6:	e78d      	b.n	8000504 <__udivmoddi4+0x1c4>
 80005e8:	4681      	mov	r9, r0
 80005ea:	e7b9      	b.n	8000560 <__udivmoddi4+0x220>
 80005ec:	4666      	mov	r6, ip
 80005ee:	e775      	b.n	80004dc <__udivmoddi4+0x19c>
 80005f0:	4630      	mov	r0, r6
 80005f2:	e74a      	b.n	800048a <__udivmoddi4+0x14a>
 80005f4:	f1ac 0c02 	sub.w	ip, ip, #2
 80005f8:	4439      	add	r1, r7
 80005fa:	e713      	b.n	8000424 <__udivmoddi4+0xe4>
 80005fc:	3802      	subs	r0, #2
 80005fe:	443c      	add	r4, r7
 8000600:	e724      	b.n	800044c <__udivmoddi4+0x10c>
 8000602:	bf00      	nop

08000604 <__aeabi_idiv0>:
 8000604:	4770      	bx	lr
 8000606:	bf00      	nop

08000608 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000608:	b580      	push	{r7, lr}
 800060a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800060c:	f001 f840 	bl	8001690 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000610:	f000 f826 	bl	8000660 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000614:	f000 fac4 	bl	8000ba0 <MX_GPIO_Init>
  MX_FDCAN1_Init();
 8000618:	f000 f892 	bl	8000740 <MX_FDCAN1_Init>
  MX_FDCAN3_Init();
 800061c:	f000 f8f4 	bl	8000808 <MX_FDCAN3_Init>
  MX_OCTOSPI1_Init();
 8000620:	f000 f956 	bl	80008d0 <MX_OCTOSPI1_Init>
  MX_SDMMC1_SD_Init();
 8000624:	f000 fa00 	bl	8000a28 <MX_SDMMC1_SD_Init>
  MX_USART1_UART_Init();
 8000628:	f000 fa6e 	bl	8000b08 <MX_USART1_UART_Init>
  MX_RTC_Init();
 800062c:	f000 f9d4 	bl	80009d8 <MX_RTC_Init>
  MX_FATFS_Init();
 8000630:	f00c fad0 	bl	800cbd4 <MX_FATFS_Init>
  MX_TIM2_Init();
 8000634:	f000 fa1a 	bl	8000a6c <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000638:	f00e f9d8 	bl	800e9ec <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 800063c:	4a05      	ldr	r2, [pc, #20]	; (8000654 <main+0x4c>)
 800063e:	2100      	movs	r1, #0
 8000640:	4805      	ldr	r0, [pc, #20]	; (8000658 <main+0x50>)
 8000642:	f00e fa54 	bl	800eaee <osThreadNew>
 8000646:	4603      	mov	r3, r0
 8000648:	4a04      	ldr	r2, [pc, #16]	; (800065c <main+0x54>)
 800064a:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 800064c:	f00e fa14 	bl	800ea78 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000650:	e7fe      	b.n	8000650 <main+0x48>
 8000652:	bf00      	nop
 8000654:	0801246c 	.word	0x0801246c
 8000658:	08000d1d 	.word	0x08000d1d
 800065c:	20004cec 	.word	0x20004cec

08000660 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000660:	b580      	push	{r7, lr}
 8000662:	b09c      	sub	sp, #112	; 0x70
 8000664:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000666:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800066a:	224c      	movs	r2, #76	; 0x4c
 800066c:	2100      	movs	r1, #0
 800066e:	4618      	mov	r0, r3
 8000670:	f011 fe8c 	bl	801238c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000674:	1d3b      	adds	r3, r7, #4
 8000676:	2220      	movs	r2, #32
 8000678:	2100      	movs	r1, #0
 800067a:	4618      	mov	r0, r3
 800067c:	f011 fe86 	bl	801238c <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8000680:	2002      	movs	r0, #2
 8000682:	f003 ff9b 	bl	80045bc <HAL_PWREx_ConfigSupply>
  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8000686:	2300      	movs	r3, #0
 8000688:	603b      	str	r3, [r7, #0]
 800068a:	4b2c      	ldr	r3, [pc, #176]	; (800073c <SystemClock_Config+0xdc>)
 800068c:	699b      	ldr	r3, [r3, #24]
 800068e:	4a2b      	ldr	r2, [pc, #172]	; (800073c <SystemClock_Config+0xdc>)
 8000690:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000694:	6193      	str	r3, [r2, #24]
 8000696:	4b29      	ldr	r3, [pc, #164]	; (800073c <SystemClock_Config+0xdc>)
 8000698:	699b      	ldr	r3, [r3, #24]
 800069a:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800069e:	603b      	str	r3, [r7, #0]
 80006a0:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 80006a2:	bf00      	nop
 80006a4:	4b25      	ldr	r3, [pc, #148]	; (800073c <SystemClock_Config+0xdc>)
 80006a6:	699b      	ldr	r3, [r3, #24]
 80006a8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80006ac:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80006b0:	d1f8      	bne.n	80006a4 <SystemClock_Config+0x44>
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 80006b2:	2309      	movs	r3, #9
 80006b4:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80006b6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80006ba:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 80006bc:	2301      	movs	r3, #1
 80006be:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006c0:	2302      	movs	r3, #2
 80006c2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80006c4:	2302      	movs	r3, #2
 80006c6:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 1;
 80006c8:	2301      	movs	r3, #1
 80006ca:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 68;
 80006cc:	2344      	movs	r3, #68	; 0x44
 80006ce:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 1;
 80006d0:	2301      	movs	r3, #1
 80006d2:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 5;
 80006d4:	2305      	movs	r3, #5
 80006d6:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 80006d8:	2302      	movs	r3, #2
 80006da:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 80006dc:	230c      	movs	r3, #12
 80006de:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 80006e0:	2300      	movs	r3, #0
 80006e2:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 6144;
 80006e4:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80006e8:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006ea:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80006ee:	4618      	mov	r0, r3
 80006f0:	f003 ffce 	bl	8004690 <HAL_RCC_OscConfig>
 80006f4:	4603      	mov	r3, r0
 80006f6:	2b00      	cmp	r3, #0
 80006f8:	d001      	beq.n	80006fe <SystemClock_Config+0x9e>
  {
    Error_Handler();
 80006fa:	f000 fb31 	bl	8000d60 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006fe:	233f      	movs	r3, #63	; 0x3f
 8000700:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000702:	2303      	movs	r3, #3
 8000704:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000706:	2300      	movs	r3, #0
 8000708:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 800070a:	2308      	movs	r3, #8
 800070c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 800070e:	2340      	movs	r3, #64	; 0x40
 8000710:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000712:	2340      	movs	r3, #64	; 0x40
 8000714:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8000716:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800071a:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 800071c:	2340      	movs	r3, #64	; 0x40
 800071e:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000720:	1d3b      	adds	r3, r7, #4
 8000722:	2103      	movs	r1, #3
 8000724:	4618      	mov	r0, r3
 8000726:	f004 fb41 	bl	8004dac <HAL_RCC_ClockConfig>
 800072a:	4603      	mov	r3, r0
 800072c:	2b00      	cmp	r3, #0
 800072e:	d001      	beq.n	8000734 <SystemClock_Config+0xd4>
  {
    Error_Handler();
 8000730:	f000 fb16 	bl	8000d60 <Error_Handler>
  }
}
 8000734:	bf00      	nop
 8000736:	3770      	adds	r7, #112	; 0x70
 8000738:	46bd      	mov	sp, r7
 800073a:	bd80      	pop	{r7, pc}
 800073c:	58024800 	.word	0x58024800

08000740 <MX_FDCAN1_Init>:
  * @brief FDCAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_FDCAN1_Init(void)
{
 8000740:	b580      	push	{r7, lr}
 8000742:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN1_Init 0 */

  /* USER CODE BEGIN FDCAN1_Init 1 */

  /* USER CODE END FDCAN1_Init 1 */
  hfdcan1.Instance = FDCAN1;
 8000744:	4b2e      	ldr	r3, [pc, #184]	; (8000800 <MX_FDCAN1_Init+0xc0>)
 8000746:	4a2f      	ldr	r2, [pc, #188]	; (8000804 <MX_FDCAN1_Init+0xc4>)
 8000748:	601a      	str	r2, [r3, #0]
  hfdcan1.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 800074a:	4b2d      	ldr	r3, [pc, #180]	; (8000800 <MX_FDCAN1_Init+0xc0>)
 800074c:	2200      	movs	r2, #0
 800074e:	609a      	str	r2, [r3, #8]
  hfdcan1.Init.Mode = FDCAN_MODE_NORMAL;
 8000750:	4b2b      	ldr	r3, [pc, #172]	; (8000800 <MX_FDCAN1_Init+0xc0>)
 8000752:	2200      	movs	r2, #0
 8000754:	60da      	str	r2, [r3, #12]
  hfdcan1.Init.AutoRetransmission = DISABLE;
 8000756:	4b2a      	ldr	r3, [pc, #168]	; (8000800 <MX_FDCAN1_Init+0xc0>)
 8000758:	2200      	movs	r2, #0
 800075a:	741a      	strb	r2, [r3, #16]
  hfdcan1.Init.TransmitPause = DISABLE;
 800075c:	4b28      	ldr	r3, [pc, #160]	; (8000800 <MX_FDCAN1_Init+0xc0>)
 800075e:	2200      	movs	r2, #0
 8000760:	745a      	strb	r2, [r3, #17]
  hfdcan1.Init.ProtocolException = DISABLE;
 8000762:	4b27      	ldr	r3, [pc, #156]	; (8000800 <MX_FDCAN1_Init+0xc0>)
 8000764:	2200      	movs	r2, #0
 8000766:	749a      	strb	r2, [r3, #18]
  hfdcan1.Init.NominalPrescaler = 1;
 8000768:	4b25      	ldr	r3, [pc, #148]	; (8000800 <MX_FDCAN1_Init+0xc0>)
 800076a:	2201      	movs	r2, #1
 800076c:	615a      	str	r2, [r3, #20]
  hfdcan1.Init.NominalSyncJumpWidth = 1;
 800076e:	4b24      	ldr	r3, [pc, #144]	; (8000800 <MX_FDCAN1_Init+0xc0>)
 8000770:	2201      	movs	r2, #1
 8000772:	619a      	str	r2, [r3, #24]
  hfdcan1.Init.NominalTimeSeg1 = 2;
 8000774:	4b22      	ldr	r3, [pc, #136]	; (8000800 <MX_FDCAN1_Init+0xc0>)
 8000776:	2202      	movs	r2, #2
 8000778:	61da      	str	r2, [r3, #28]
  hfdcan1.Init.NominalTimeSeg2 = 2;
 800077a:	4b21      	ldr	r3, [pc, #132]	; (8000800 <MX_FDCAN1_Init+0xc0>)
 800077c:	2202      	movs	r2, #2
 800077e:	621a      	str	r2, [r3, #32]
  hfdcan1.Init.DataPrescaler = 1;
 8000780:	4b1f      	ldr	r3, [pc, #124]	; (8000800 <MX_FDCAN1_Init+0xc0>)
 8000782:	2201      	movs	r2, #1
 8000784:	625a      	str	r2, [r3, #36]	; 0x24
  hfdcan1.Init.DataSyncJumpWidth = 1;
 8000786:	4b1e      	ldr	r3, [pc, #120]	; (8000800 <MX_FDCAN1_Init+0xc0>)
 8000788:	2201      	movs	r2, #1
 800078a:	629a      	str	r2, [r3, #40]	; 0x28
  hfdcan1.Init.DataTimeSeg1 = 1;
 800078c:	4b1c      	ldr	r3, [pc, #112]	; (8000800 <MX_FDCAN1_Init+0xc0>)
 800078e:	2201      	movs	r2, #1
 8000790:	62da      	str	r2, [r3, #44]	; 0x2c
  hfdcan1.Init.DataTimeSeg2 = 1;
 8000792:	4b1b      	ldr	r3, [pc, #108]	; (8000800 <MX_FDCAN1_Init+0xc0>)
 8000794:	2201      	movs	r2, #1
 8000796:	631a      	str	r2, [r3, #48]	; 0x30
  hfdcan1.Init.MessageRAMOffset = 0;
 8000798:	4b19      	ldr	r3, [pc, #100]	; (8000800 <MX_FDCAN1_Init+0xc0>)
 800079a:	2200      	movs	r2, #0
 800079c:	635a      	str	r2, [r3, #52]	; 0x34
  hfdcan1.Init.StdFiltersNbr = 0;
 800079e:	4b18      	ldr	r3, [pc, #96]	; (8000800 <MX_FDCAN1_Init+0xc0>)
 80007a0:	2200      	movs	r2, #0
 80007a2:	639a      	str	r2, [r3, #56]	; 0x38
  hfdcan1.Init.ExtFiltersNbr = 0;
 80007a4:	4b16      	ldr	r3, [pc, #88]	; (8000800 <MX_FDCAN1_Init+0xc0>)
 80007a6:	2200      	movs	r2, #0
 80007a8:	63da      	str	r2, [r3, #60]	; 0x3c
  hfdcan1.Init.RxFifo0ElmtsNbr = 0;
 80007aa:	4b15      	ldr	r3, [pc, #84]	; (8000800 <MX_FDCAN1_Init+0xc0>)
 80007ac:	2200      	movs	r2, #0
 80007ae:	641a      	str	r2, [r3, #64]	; 0x40
  hfdcan1.Init.RxFifo0ElmtSize = FDCAN_DATA_BYTES_8;
 80007b0:	4b13      	ldr	r3, [pc, #76]	; (8000800 <MX_FDCAN1_Init+0xc0>)
 80007b2:	2204      	movs	r2, #4
 80007b4:	645a      	str	r2, [r3, #68]	; 0x44
  hfdcan1.Init.RxFifo1ElmtsNbr = 0;
 80007b6:	4b12      	ldr	r3, [pc, #72]	; (8000800 <MX_FDCAN1_Init+0xc0>)
 80007b8:	2200      	movs	r2, #0
 80007ba:	649a      	str	r2, [r3, #72]	; 0x48
  hfdcan1.Init.RxFifo1ElmtSize = FDCAN_DATA_BYTES_8;
 80007bc:	4b10      	ldr	r3, [pc, #64]	; (8000800 <MX_FDCAN1_Init+0xc0>)
 80007be:	2204      	movs	r2, #4
 80007c0:	64da      	str	r2, [r3, #76]	; 0x4c
  hfdcan1.Init.RxBuffersNbr = 0;
 80007c2:	4b0f      	ldr	r3, [pc, #60]	; (8000800 <MX_FDCAN1_Init+0xc0>)
 80007c4:	2200      	movs	r2, #0
 80007c6:	651a      	str	r2, [r3, #80]	; 0x50
  hfdcan1.Init.RxBufferSize = FDCAN_DATA_BYTES_8;
 80007c8:	4b0d      	ldr	r3, [pc, #52]	; (8000800 <MX_FDCAN1_Init+0xc0>)
 80007ca:	2204      	movs	r2, #4
 80007cc:	655a      	str	r2, [r3, #84]	; 0x54
  hfdcan1.Init.TxEventsNbr = 0;
 80007ce:	4b0c      	ldr	r3, [pc, #48]	; (8000800 <MX_FDCAN1_Init+0xc0>)
 80007d0:	2200      	movs	r2, #0
 80007d2:	659a      	str	r2, [r3, #88]	; 0x58
  hfdcan1.Init.TxBuffersNbr = 0;
 80007d4:	4b0a      	ldr	r3, [pc, #40]	; (8000800 <MX_FDCAN1_Init+0xc0>)
 80007d6:	2200      	movs	r2, #0
 80007d8:	65da      	str	r2, [r3, #92]	; 0x5c
  hfdcan1.Init.TxFifoQueueElmtsNbr = 0;
 80007da:	4b09      	ldr	r3, [pc, #36]	; (8000800 <MX_FDCAN1_Init+0xc0>)
 80007dc:	2200      	movs	r2, #0
 80007de:	661a      	str	r2, [r3, #96]	; 0x60
  hfdcan1.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 80007e0:	4b07      	ldr	r3, [pc, #28]	; (8000800 <MX_FDCAN1_Init+0xc0>)
 80007e2:	2200      	movs	r2, #0
 80007e4:	665a      	str	r2, [r3, #100]	; 0x64
  hfdcan1.Init.TxElmtSize = FDCAN_DATA_BYTES_8;
 80007e6:	4b06      	ldr	r3, [pc, #24]	; (8000800 <MX_FDCAN1_Init+0xc0>)
 80007e8:	2204      	movs	r2, #4
 80007ea:	669a      	str	r2, [r3, #104]	; 0x68
  if (HAL_FDCAN_Init(&hfdcan1) != HAL_OK)
 80007ec:	4804      	ldr	r0, [pc, #16]	; (8000800 <MX_FDCAN1_Init+0xc0>)
 80007ee:	f001 f8af 	bl	8001950 <HAL_FDCAN_Init>
 80007f2:	4603      	mov	r3, r0
 80007f4:	2b00      	cmp	r3, #0
 80007f6:	d001      	beq.n	80007fc <MX_FDCAN1_Init+0xbc>
  {
    Error_Handler();
 80007f8:	f000 fab2 	bl	8000d60 <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN1_Init 2 */

  /* USER CODE END FDCAN1_Init 2 */

}
 80007fc:	bf00      	nop
 80007fe:	bd80      	pop	{r7, pc}
 8000800:	20004f24 	.word	0x20004f24
 8000804:	4000a000 	.word	0x4000a000

08000808 <MX_FDCAN3_Init>:
  * @brief FDCAN3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_FDCAN3_Init(void)
{
 8000808:	b580      	push	{r7, lr}
 800080a:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN3_Init 0 */

  /* USER CODE BEGIN FDCAN3_Init 1 */

  /* USER CODE END FDCAN3_Init 1 */
  hfdcan3.Instance = FDCAN3;
 800080c:	4b2e      	ldr	r3, [pc, #184]	; (80008c8 <MX_FDCAN3_Init+0xc0>)
 800080e:	4a2f      	ldr	r2, [pc, #188]	; (80008cc <MX_FDCAN3_Init+0xc4>)
 8000810:	601a      	str	r2, [r3, #0]
  hfdcan3.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 8000812:	4b2d      	ldr	r3, [pc, #180]	; (80008c8 <MX_FDCAN3_Init+0xc0>)
 8000814:	2200      	movs	r2, #0
 8000816:	609a      	str	r2, [r3, #8]
  hfdcan3.Init.Mode = FDCAN_MODE_NORMAL;
 8000818:	4b2b      	ldr	r3, [pc, #172]	; (80008c8 <MX_FDCAN3_Init+0xc0>)
 800081a:	2200      	movs	r2, #0
 800081c:	60da      	str	r2, [r3, #12]
  hfdcan3.Init.AutoRetransmission = DISABLE;
 800081e:	4b2a      	ldr	r3, [pc, #168]	; (80008c8 <MX_FDCAN3_Init+0xc0>)
 8000820:	2200      	movs	r2, #0
 8000822:	741a      	strb	r2, [r3, #16]
  hfdcan3.Init.TransmitPause = DISABLE;
 8000824:	4b28      	ldr	r3, [pc, #160]	; (80008c8 <MX_FDCAN3_Init+0xc0>)
 8000826:	2200      	movs	r2, #0
 8000828:	745a      	strb	r2, [r3, #17]
  hfdcan3.Init.ProtocolException = DISABLE;
 800082a:	4b27      	ldr	r3, [pc, #156]	; (80008c8 <MX_FDCAN3_Init+0xc0>)
 800082c:	2200      	movs	r2, #0
 800082e:	749a      	strb	r2, [r3, #18]
  hfdcan3.Init.NominalPrescaler = 1;
 8000830:	4b25      	ldr	r3, [pc, #148]	; (80008c8 <MX_FDCAN3_Init+0xc0>)
 8000832:	2201      	movs	r2, #1
 8000834:	615a      	str	r2, [r3, #20]
  hfdcan3.Init.NominalSyncJumpWidth = 1;
 8000836:	4b24      	ldr	r3, [pc, #144]	; (80008c8 <MX_FDCAN3_Init+0xc0>)
 8000838:	2201      	movs	r2, #1
 800083a:	619a      	str	r2, [r3, #24]
  hfdcan3.Init.NominalTimeSeg1 = 2;
 800083c:	4b22      	ldr	r3, [pc, #136]	; (80008c8 <MX_FDCAN3_Init+0xc0>)
 800083e:	2202      	movs	r2, #2
 8000840:	61da      	str	r2, [r3, #28]
  hfdcan3.Init.NominalTimeSeg2 = 2;
 8000842:	4b21      	ldr	r3, [pc, #132]	; (80008c8 <MX_FDCAN3_Init+0xc0>)
 8000844:	2202      	movs	r2, #2
 8000846:	621a      	str	r2, [r3, #32]
  hfdcan3.Init.DataPrescaler = 1;
 8000848:	4b1f      	ldr	r3, [pc, #124]	; (80008c8 <MX_FDCAN3_Init+0xc0>)
 800084a:	2201      	movs	r2, #1
 800084c:	625a      	str	r2, [r3, #36]	; 0x24
  hfdcan3.Init.DataSyncJumpWidth = 1;
 800084e:	4b1e      	ldr	r3, [pc, #120]	; (80008c8 <MX_FDCAN3_Init+0xc0>)
 8000850:	2201      	movs	r2, #1
 8000852:	629a      	str	r2, [r3, #40]	; 0x28
  hfdcan3.Init.DataTimeSeg1 = 1;
 8000854:	4b1c      	ldr	r3, [pc, #112]	; (80008c8 <MX_FDCAN3_Init+0xc0>)
 8000856:	2201      	movs	r2, #1
 8000858:	62da      	str	r2, [r3, #44]	; 0x2c
  hfdcan3.Init.DataTimeSeg2 = 1;
 800085a:	4b1b      	ldr	r3, [pc, #108]	; (80008c8 <MX_FDCAN3_Init+0xc0>)
 800085c:	2201      	movs	r2, #1
 800085e:	631a      	str	r2, [r3, #48]	; 0x30
  hfdcan3.Init.MessageRAMOffset = 0;
 8000860:	4b19      	ldr	r3, [pc, #100]	; (80008c8 <MX_FDCAN3_Init+0xc0>)
 8000862:	2200      	movs	r2, #0
 8000864:	635a      	str	r2, [r3, #52]	; 0x34
  hfdcan3.Init.StdFiltersNbr = 0;
 8000866:	4b18      	ldr	r3, [pc, #96]	; (80008c8 <MX_FDCAN3_Init+0xc0>)
 8000868:	2200      	movs	r2, #0
 800086a:	639a      	str	r2, [r3, #56]	; 0x38
  hfdcan3.Init.ExtFiltersNbr = 0;
 800086c:	4b16      	ldr	r3, [pc, #88]	; (80008c8 <MX_FDCAN3_Init+0xc0>)
 800086e:	2200      	movs	r2, #0
 8000870:	63da      	str	r2, [r3, #60]	; 0x3c
  hfdcan3.Init.RxFifo0ElmtsNbr = 0;
 8000872:	4b15      	ldr	r3, [pc, #84]	; (80008c8 <MX_FDCAN3_Init+0xc0>)
 8000874:	2200      	movs	r2, #0
 8000876:	641a      	str	r2, [r3, #64]	; 0x40
  hfdcan3.Init.RxFifo0ElmtSize = FDCAN_DATA_BYTES_8;
 8000878:	4b13      	ldr	r3, [pc, #76]	; (80008c8 <MX_FDCAN3_Init+0xc0>)
 800087a:	2204      	movs	r2, #4
 800087c:	645a      	str	r2, [r3, #68]	; 0x44
  hfdcan3.Init.RxFifo1ElmtsNbr = 0;
 800087e:	4b12      	ldr	r3, [pc, #72]	; (80008c8 <MX_FDCAN3_Init+0xc0>)
 8000880:	2200      	movs	r2, #0
 8000882:	649a      	str	r2, [r3, #72]	; 0x48
  hfdcan3.Init.RxFifo1ElmtSize = FDCAN_DATA_BYTES_8;
 8000884:	4b10      	ldr	r3, [pc, #64]	; (80008c8 <MX_FDCAN3_Init+0xc0>)
 8000886:	2204      	movs	r2, #4
 8000888:	64da      	str	r2, [r3, #76]	; 0x4c
  hfdcan3.Init.RxBuffersNbr = 0;
 800088a:	4b0f      	ldr	r3, [pc, #60]	; (80008c8 <MX_FDCAN3_Init+0xc0>)
 800088c:	2200      	movs	r2, #0
 800088e:	651a      	str	r2, [r3, #80]	; 0x50
  hfdcan3.Init.RxBufferSize = FDCAN_DATA_BYTES_8;
 8000890:	4b0d      	ldr	r3, [pc, #52]	; (80008c8 <MX_FDCAN3_Init+0xc0>)
 8000892:	2204      	movs	r2, #4
 8000894:	655a      	str	r2, [r3, #84]	; 0x54
  hfdcan3.Init.TxEventsNbr = 0;
 8000896:	4b0c      	ldr	r3, [pc, #48]	; (80008c8 <MX_FDCAN3_Init+0xc0>)
 8000898:	2200      	movs	r2, #0
 800089a:	659a      	str	r2, [r3, #88]	; 0x58
  hfdcan3.Init.TxBuffersNbr = 0;
 800089c:	4b0a      	ldr	r3, [pc, #40]	; (80008c8 <MX_FDCAN3_Init+0xc0>)
 800089e:	2200      	movs	r2, #0
 80008a0:	65da      	str	r2, [r3, #92]	; 0x5c
  hfdcan3.Init.TxFifoQueueElmtsNbr = 0;
 80008a2:	4b09      	ldr	r3, [pc, #36]	; (80008c8 <MX_FDCAN3_Init+0xc0>)
 80008a4:	2200      	movs	r2, #0
 80008a6:	661a      	str	r2, [r3, #96]	; 0x60
  hfdcan3.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 80008a8:	4b07      	ldr	r3, [pc, #28]	; (80008c8 <MX_FDCAN3_Init+0xc0>)
 80008aa:	2200      	movs	r2, #0
 80008ac:	665a      	str	r2, [r3, #100]	; 0x64
  hfdcan3.Init.TxElmtSize = FDCAN_DATA_BYTES_8;
 80008ae:	4b06      	ldr	r3, [pc, #24]	; (80008c8 <MX_FDCAN3_Init+0xc0>)
 80008b0:	2204      	movs	r2, #4
 80008b2:	669a      	str	r2, [r3, #104]	; 0x68
  if (HAL_FDCAN_Init(&hfdcan3) != HAL_OK)
 80008b4:	4804      	ldr	r0, [pc, #16]	; (80008c8 <MX_FDCAN3_Init+0xc0>)
 80008b6:	f001 f84b 	bl	8001950 <HAL_FDCAN_Init>
 80008ba:	4603      	mov	r3, r0
 80008bc:	2b00      	cmp	r3, #0
 80008be:	d001      	beq.n	80008c4 <MX_FDCAN3_Init+0xbc>
  {
    Error_Handler();
 80008c0:	f000 fa4e 	bl	8000d60 <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN3_Init 2 */

  /* USER CODE END FDCAN3_Init 2 */

}
 80008c4:	bf00      	nop
 80008c6:	bd80      	pop	{r7, pc}
 80008c8:	20004dd0 	.word	0x20004dd0
 80008cc:	4000d400 	.word	0x4000d400

080008d0 <MX_OCTOSPI1_Init>:
  * @brief OCTOSPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_OCTOSPI1_Init(void)
{
 80008d0:	b580      	push	{r7, lr}
 80008d2:	b08a      	sub	sp, #40	; 0x28
 80008d4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN OCTOSPI1_Init 0 */

  /* USER CODE END OCTOSPI1_Init 0 */

  OSPIM_CfgTypeDef sOspiManagerCfg = {0};
 80008d6:	f107 0310 	add.w	r3, r7, #16
 80008da:	2200      	movs	r2, #0
 80008dc:	601a      	str	r2, [r3, #0]
 80008de:	605a      	str	r2, [r3, #4]
 80008e0:	609a      	str	r2, [r3, #8]
 80008e2:	60da      	str	r2, [r3, #12]
 80008e4:	611a      	str	r2, [r3, #16]
 80008e6:	615a      	str	r2, [r3, #20]
  OSPI_HyperbusCfgTypeDef sHyperBusCfg = {0};
 80008e8:	463b      	mov	r3, r7
 80008ea:	2200      	movs	r2, #0
 80008ec:	601a      	str	r2, [r3, #0]
 80008ee:	605a      	str	r2, [r3, #4]
 80008f0:	609a      	str	r2, [r3, #8]
 80008f2:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN OCTOSPI1_Init 1 */

  /* USER CODE END OCTOSPI1_Init 1 */
  /* OCTOSPI1 parameter configuration*/
  hospi1.Instance = OCTOSPI1;
 80008f4:	4b35      	ldr	r3, [pc, #212]	; (80009cc <MX_OCTOSPI1_Init+0xfc>)
 80008f6:	4a36      	ldr	r2, [pc, #216]	; (80009d0 <MX_OCTOSPI1_Init+0x100>)
 80008f8:	601a      	str	r2, [r3, #0]
  hospi1.Init.FifoThreshold = 1;
 80008fa:	4b34      	ldr	r3, [pc, #208]	; (80009cc <MX_OCTOSPI1_Init+0xfc>)
 80008fc:	2201      	movs	r2, #1
 80008fe:	605a      	str	r2, [r3, #4]
  hospi1.Init.DualQuad = HAL_OSPI_DUALQUAD_DISABLE;
 8000900:	4b32      	ldr	r3, [pc, #200]	; (80009cc <MX_OCTOSPI1_Init+0xfc>)
 8000902:	2200      	movs	r2, #0
 8000904:	609a      	str	r2, [r3, #8]
  hospi1.Init.MemoryType = HAL_OSPI_MEMTYPE_HYPERBUS;
 8000906:	4b31      	ldr	r3, [pc, #196]	; (80009cc <MX_OCTOSPI1_Init+0xfc>)
 8000908:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 800090c:	60da      	str	r2, [r3, #12]
  hospi1.Init.DeviceSize = 32;
 800090e:	4b2f      	ldr	r3, [pc, #188]	; (80009cc <MX_OCTOSPI1_Init+0xfc>)
 8000910:	2220      	movs	r2, #32
 8000912:	611a      	str	r2, [r3, #16]
  hospi1.Init.ChipSelectHighTime = 1;
 8000914:	4b2d      	ldr	r3, [pc, #180]	; (80009cc <MX_OCTOSPI1_Init+0xfc>)
 8000916:	2201      	movs	r2, #1
 8000918:	615a      	str	r2, [r3, #20]
  hospi1.Init.FreeRunningClock = HAL_OSPI_FREERUNCLK_DISABLE;
 800091a:	4b2c      	ldr	r3, [pc, #176]	; (80009cc <MX_OCTOSPI1_Init+0xfc>)
 800091c:	2200      	movs	r2, #0
 800091e:	619a      	str	r2, [r3, #24]
  hospi1.Init.ClockMode = HAL_OSPI_CLOCK_MODE_0;
 8000920:	4b2a      	ldr	r3, [pc, #168]	; (80009cc <MX_OCTOSPI1_Init+0xfc>)
 8000922:	2200      	movs	r2, #0
 8000924:	61da      	str	r2, [r3, #28]
  hospi1.Init.WrapSize = HAL_OSPI_WRAP_NOT_SUPPORTED;
 8000926:	4b29      	ldr	r3, [pc, #164]	; (80009cc <MX_OCTOSPI1_Init+0xfc>)
 8000928:	2200      	movs	r2, #0
 800092a:	621a      	str	r2, [r3, #32]
  hospi1.Init.ClockPrescaler = 1;
 800092c:	4b27      	ldr	r3, [pc, #156]	; (80009cc <MX_OCTOSPI1_Init+0xfc>)
 800092e:	2201      	movs	r2, #1
 8000930:	625a      	str	r2, [r3, #36]	; 0x24
  hospi1.Init.SampleShifting = HAL_OSPI_SAMPLE_SHIFTING_NONE;
 8000932:	4b26      	ldr	r3, [pc, #152]	; (80009cc <MX_OCTOSPI1_Init+0xfc>)
 8000934:	2200      	movs	r2, #0
 8000936:	629a      	str	r2, [r3, #40]	; 0x28
  hospi1.Init.DelayHoldQuarterCycle = HAL_OSPI_DHQC_DISABLE;
 8000938:	4b24      	ldr	r3, [pc, #144]	; (80009cc <MX_OCTOSPI1_Init+0xfc>)
 800093a:	2200      	movs	r2, #0
 800093c:	62da      	str	r2, [r3, #44]	; 0x2c
  hospi1.Init.ChipSelectBoundary = 1;
 800093e:	4b23      	ldr	r3, [pc, #140]	; (80009cc <MX_OCTOSPI1_Init+0xfc>)
 8000940:	2201      	movs	r2, #1
 8000942:	631a      	str	r2, [r3, #48]	; 0x30
  hospi1.Init.ClkChipSelectHighTime = 0;
 8000944:	4b21      	ldr	r3, [pc, #132]	; (80009cc <MX_OCTOSPI1_Init+0xfc>)
 8000946:	2200      	movs	r2, #0
 8000948:	635a      	str	r2, [r3, #52]	; 0x34
  hospi1.Init.DelayBlockBypass = HAL_OSPI_DELAY_BLOCK_BYPASSED;
 800094a:	4b20      	ldr	r3, [pc, #128]	; (80009cc <MX_OCTOSPI1_Init+0xfc>)
 800094c:	2208      	movs	r2, #8
 800094e:	639a      	str	r2, [r3, #56]	; 0x38
  hospi1.Init.MaxTran = 0;
 8000950:	4b1e      	ldr	r3, [pc, #120]	; (80009cc <MX_OCTOSPI1_Init+0xfc>)
 8000952:	2200      	movs	r2, #0
 8000954:	63da      	str	r2, [r3, #60]	; 0x3c
  hospi1.Init.Refresh = 0;
 8000956:	4b1d      	ldr	r3, [pc, #116]	; (80009cc <MX_OCTOSPI1_Init+0xfc>)
 8000958:	2200      	movs	r2, #0
 800095a:	641a      	str	r2, [r3, #64]	; 0x40
  if (HAL_OSPI_Init(&hospi1) != HAL_OK)
 800095c:	481b      	ldr	r0, [pc, #108]	; (80009cc <MX_OCTOSPI1_Init+0xfc>)
 800095e:	f001 fd3b 	bl	80023d8 <HAL_OSPI_Init>
 8000962:	4603      	mov	r3, r0
 8000964:	2b00      	cmp	r3, #0
 8000966:	d001      	beq.n	800096c <MX_OCTOSPI1_Init+0x9c>
  {
    Error_Handler();
 8000968:	f000 f9fa 	bl	8000d60 <Error_Handler>
  }
  sOspiManagerCfg.ClkPort = 1;
 800096c:	2301      	movs	r3, #1
 800096e:	613b      	str	r3, [r7, #16]
  sOspiManagerCfg.DQSPort = 1;
 8000970:	2301      	movs	r3, #1
 8000972:	617b      	str	r3, [r7, #20]
  sOspiManagerCfg.NCSPort = 1;
 8000974:	2301      	movs	r3, #1
 8000976:	61bb      	str	r3, [r7, #24]
  sOspiManagerCfg.IOLowPort = HAL_OSPIM_IOPORT_1_LOW;
 8000978:	f04f 1301 	mov.w	r3, #65537	; 0x10001
 800097c:	61fb      	str	r3, [r7, #28]
  sOspiManagerCfg.IOHighPort = HAL_OSPIM_IOPORT_1_HIGH;
 800097e:	4b15      	ldr	r3, [pc, #84]	; (80009d4 <MX_OCTOSPI1_Init+0x104>)
 8000980:	623b      	str	r3, [r7, #32]
  if (HAL_OSPIM_Config(&hospi1, &sOspiManagerCfg, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8000982:	f107 0310 	add.w	r3, r7, #16
 8000986:	f241 3288 	movw	r2, #5000	; 0x1388
 800098a:	4619      	mov	r1, r3
 800098c:	480f      	ldr	r0, [pc, #60]	; (80009cc <MX_OCTOSPI1_Init+0xfc>)
 800098e:	f001 fe31 	bl	80025f4 <HAL_OSPIM_Config>
 8000992:	4603      	mov	r3, r0
 8000994:	2b00      	cmp	r3, #0
 8000996:	d001      	beq.n	800099c <MX_OCTOSPI1_Init+0xcc>
  {
    Error_Handler();
 8000998:	f000 f9e2 	bl	8000d60 <Error_Handler>
  }
  sHyperBusCfg.RWRecoveryTime = 0;
 800099c:	2300      	movs	r3, #0
 800099e:	603b      	str	r3, [r7, #0]
  sHyperBusCfg.AccessTime = 0;
 80009a0:	2300      	movs	r3, #0
 80009a2:	607b      	str	r3, [r7, #4]
  sHyperBusCfg.WriteZeroLatency = HAL_OSPI_NO_LATENCY_ON_WRITE;
 80009a4:	2302      	movs	r3, #2
 80009a6:	60bb      	str	r3, [r7, #8]
  sHyperBusCfg.LatencyMode = HAL_OSPI_VARIABLE_LATENCY;
 80009a8:	2300      	movs	r3, #0
 80009aa:	60fb      	str	r3, [r7, #12]
  if (HAL_OSPI_HyperbusCfg(&hospi1, &sHyperBusCfg, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80009ac:	463b      	mov	r3, r7
 80009ae:	f241 3288 	movw	r2, #5000	; 0x1388
 80009b2:	4619      	mov	r1, r3
 80009b4:	4805      	ldr	r0, [pc, #20]	; (80009cc <MX_OCTOSPI1_Init+0xfc>)
 80009b6:	f001 fdcf 	bl	8002558 <HAL_OSPI_HyperbusCfg>
 80009ba:	4603      	mov	r3, r0
 80009bc:	2b00      	cmp	r3, #0
 80009be:	d001      	beq.n	80009c4 <MX_OCTOSPI1_Init+0xf4>
  {
    Error_Handler();
 80009c0:	f000 f9ce 	bl	8000d60 <Error_Handler>
  }
  /* USER CODE BEGIN OCTOSPI1_Init 2 */

  /* USER CODE END OCTOSPI1_Init 2 */

}
 80009c4:	bf00      	nop
 80009c6:	3728      	adds	r7, #40	; 0x28
 80009c8:	46bd      	mov	sp, r7
 80009ca:	bd80      	pop	{r7, pc}
 80009cc:	20004cf0 	.word	0x20004cf0
 80009d0:	52005000 	.word	0x52005000
 80009d4:	01000001 	.word	0x01000001

080009d8 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 80009d8:	b580      	push	{r7, lr}
 80009da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 80009dc:	4b10      	ldr	r3, [pc, #64]	; (8000a20 <MX_RTC_Init+0x48>)
 80009de:	4a11      	ldr	r2, [pc, #68]	; (8000a24 <MX_RTC_Init+0x4c>)
 80009e0:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 80009e2:	4b0f      	ldr	r3, [pc, #60]	; (8000a20 <MX_RTC_Init+0x48>)
 80009e4:	2200      	movs	r2, #0
 80009e6:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 80009e8:	4b0d      	ldr	r3, [pc, #52]	; (8000a20 <MX_RTC_Init+0x48>)
 80009ea:	227f      	movs	r2, #127	; 0x7f
 80009ec:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 80009ee:	4b0c      	ldr	r3, [pc, #48]	; (8000a20 <MX_RTC_Init+0x48>)
 80009f0:	22ff      	movs	r2, #255	; 0xff
 80009f2:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 80009f4:	4b0a      	ldr	r3, [pc, #40]	; (8000a20 <MX_RTC_Init+0x48>)
 80009f6:	2200      	movs	r2, #0
 80009f8:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 80009fa:	4b09      	ldr	r3, [pc, #36]	; (8000a20 <MX_RTC_Init+0x48>)
 80009fc:	2200      	movs	r2, #0
 80009fe:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8000a00:	4b07      	ldr	r3, [pc, #28]	; (8000a20 <MX_RTC_Init+0x48>)
 8000a02:	2200      	movs	r2, #0
 8000a04:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8000a06:	4b06      	ldr	r3, [pc, #24]	; (8000a20 <MX_RTC_Init+0x48>)
 8000a08:	2200      	movs	r2, #0
 8000a0a:	615a      	str	r2, [r3, #20]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8000a0c:	4804      	ldr	r0, [pc, #16]	; (8000a20 <MX_RTC_Init+0x48>)
 8000a0e:	f006 fe2d 	bl	800766c <HAL_RTC_Init>
 8000a12:	4603      	mov	r3, r0
 8000a14:	2b00      	cmp	r3, #0
 8000a16:	d001      	beq.n	8000a1c <MX_RTC_Init+0x44>
  {
    Error_Handler();
 8000a18:	f000 f9a2 	bl	8000d60 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8000a1c:	bf00      	nop
 8000a1e:	bd80      	pop	{r7, pc}
 8000a20:	20004f00 	.word	0x20004f00
 8000a24:	58004000 	.word	0x58004000

08000a28 <MX_SDMMC1_SD_Init>:
  * @brief SDMMC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDMMC1_SD_Init(void)
{
 8000a28:	b480      	push	{r7}
 8000a2a:	af00      	add	r7, sp, #0
  /* USER CODE END SDMMC1_Init 0 */

  /* USER CODE BEGIN SDMMC1_Init 1 */

  /* USER CODE END SDMMC1_Init 1 */
  hsd1.Instance = SDMMC1;
 8000a2c:	4b0d      	ldr	r3, [pc, #52]	; (8000a64 <MX_SDMMC1_SD_Init+0x3c>)
 8000a2e:	4a0e      	ldr	r2, [pc, #56]	; (8000a68 <MX_SDMMC1_SD_Init+0x40>)
 8000a30:	601a      	str	r2, [r3, #0]
  hsd1.Init.ClockEdge = SDMMC_CLOCK_EDGE_RISING;
 8000a32:	4b0c      	ldr	r3, [pc, #48]	; (8000a64 <MX_SDMMC1_SD_Init+0x3c>)
 8000a34:	2200      	movs	r2, #0
 8000a36:	605a      	str	r2, [r3, #4]
  hsd1.Init.ClockPowerSave = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 8000a38:	4b0a      	ldr	r3, [pc, #40]	; (8000a64 <MX_SDMMC1_SD_Init+0x3c>)
 8000a3a:	2200      	movs	r2, #0
 8000a3c:	609a      	str	r2, [r3, #8]
  hsd1.Init.BusWide = SDMMC_BUS_WIDE_4B;
 8000a3e:	4b09      	ldr	r3, [pc, #36]	; (8000a64 <MX_SDMMC1_SD_Init+0x3c>)
 8000a40:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000a44:	60da      	str	r2, [r3, #12]
  hsd1.Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 8000a46:	4b07      	ldr	r3, [pc, #28]	; (8000a64 <MX_SDMMC1_SD_Init+0x3c>)
 8000a48:	2200      	movs	r2, #0
 8000a4a:	611a      	str	r2, [r3, #16]
  hsd1.Init.ClockDiv = 0;
 8000a4c:	4b05      	ldr	r3, [pc, #20]	; (8000a64 <MX_SDMMC1_SD_Init+0x3c>)
 8000a4e:	2200      	movs	r2, #0
 8000a50:	615a      	str	r2, [r3, #20]
  hsd1.Init.TranceiverPresent = SDMMC_TRANSCEIVER_NOT_PRESENT;
 8000a52:	4b04      	ldr	r3, [pc, #16]	; (8000a64 <MX_SDMMC1_SD_Init+0x3c>)
 8000a54:	2201      	movs	r2, #1
 8000a56:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN SDMMC1_Init 2 */

  /* USER CODE END SDMMC1_Init 2 */

}
 8000a58:	bf00      	nop
 8000a5a:	46bd      	mov	sp, r7
 8000a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a60:	4770      	bx	lr
 8000a62:	bf00      	nop
 8000a64:	20004d50 	.word	0x20004d50
 8000a68:	52007000 	.word	0x52007000

08000a6c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000a6c:	b580      	push	{r7, lr}
 8000a6e:	b088      	sub	sp, #32
 8000a70:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000a72:	f107 0310 	add.w	r3, r7, #16
 8000a76:	2200      	movs	r2, #0
 8000a78:	601a      	str	r2, [r3, #0]
 8000a7a:	605a      	str	r2, [r3, #4]
 8000a7c:	609a      	str	r2, [r3, #8]
 8000a7e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000a80:	1d3b      	adds	r3, r7, #4
 8000a82:	2200      	movs	r2, #0
 8000a84:	601a      	str	r2, [r3, #0]
 8000a86:	605a      	str	r2, [r3, #4]
 8000a88:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000a8a:	4b1e      	ldr	r3, [pc, #120]	; (8000b04 <MX_TIM2_Init+0x98>)
 8000a8c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000a90:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8000a92:	4b1c      	ldr	r3, [pc, #112]	; (8000b04 <MX_TIM2_Init+0x98>)
 8000a94:	2200      	movs	r2, #0
 8000a96:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a98:	4b1a      	ldr	r3, [pc, #104]	; (8000b04 <MX_TIM2_Init+0x98>)
 8000a9a:	2200      	movs	r2, #0
 8000a9c:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8000a9e:	4b19      	ldr	r3, [pc, #100]	; (8000b04 <MX_TIM2_Init+0x98>)
 8000aa0:	f04f 32ff 	mov.w	r2, #4294967295
 8000aa4:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000aa6:	4b17      	ldr	r3, [pc, #92]	; (8000b04 <MX_TIM2_Init+0x98>)
 8000aa8:	2200      	movs	r2, #0
 8000aaa:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000aac:	4b15      	ldr	r3, [pc, #84]	; (8000b04 <MX_TIM2_Init+0x98>)
 8000aae:	2200      	movs	r2, #0
 8000ab0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000ab2:	4814      	ldr	r0, [pc, #80]	; (8000b04 <MX_TIM2_Init+0x98>)
 8000ab4:	f008 f94a 	bl	8008d4c <HAL_TIM_Base_Init>
 8000ab8:	4603      	mov	r3, r0
 8000aba:	2b00      	cmp	r3, #0
 8000abc:	d001      	beq.n	8000ac2 <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8000abe:	f000 f94f 	bl	8000d60 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000ac2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000ac6:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000ac8:	f107 0310 	add.w	r3, r7, #16
 8000acc:	4619      	mov	r1, r3
 8000ace:	480d      	ldr	r0, [pc, #52]	; (8000b04 <MX_TIM2_Init+0x98>)
 8000ad0:	f008 fb3a 	bl	8009148 <HAL_TIM_ConfigClockSource>
 8000ad4:	4603      	mov	r3, r0
 8000ad6:	2b00      	cmp	r3, #0
 8000ad8:	d001      	beq.n	8000ade <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8000ada:	f000 f941 	bl	8000d60 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000ade:	2300      	movs	r3, #0
 8000ae0:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000ae2:	2300      	movs	r3, #0
 8000ae4:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000ae6:	1d3b      	adds	r3, r7, #4
 8000ae8:	4619      	mov	r1, r3
 8000aea:	4806      	ldr	r0, [pc, #24]	; (8000b04 <MX_TIM2_Init+0x98>)
 8000aec:	f008 fd8c 	bl	8009608 <HAL_TIMEx_MasterConfigSynchronization>
 8000af0:	4603      	mov	r3, r0
 8000af2:	2b00      	cmp	r3, #0
 8000af4:	d001      	beq.n	8000afa <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8000af6:	f000 f933 	bl	8000d60 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000afa:	bf00      	nop
 8000afc:	3720      	adds	r7, #32
 8000afe:	46bd      	mov	sp, r7
 8000b00:	bd80      	pop	{r7, pc}
 8000b02:	bf00      	nop
 8000b04:	20004fc4 	.word	0x20004fc4

08000b08 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000b08:	b580      	push	{r7, lr}
 8000b0a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000b0c:	4b22      	ldr	r3, [pc, #136]	; (8000b98 <MX_USART1_UART_Init+0x90>)
 8000b0e:	4a23      	ldr	r2, [pc, #140]	; (8000b9c <MX_USART1_UART_Init+0x94>)
 8000b10:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000b12:	4b21      	ldr	r3, [pc, #132]	; (8000b98 <MX_USART1_UART_Init+0x90>)
 8000b14:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000b18:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000b1a:	4b1f      	ldr	r3, [pc, #124]	; (8000b98 <MX_USART1_UART_Init+0x90>)
 8000b1c:	2200      	movs	r2, #0
 8000b1e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000b20:	4b1d      	ldr	r3, [pc, #116]	; (8000b98 <MX_USART1_UART_Init+0x90>)
 8000b22:	2200      	movs	r2, #0
 8000b24:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000b26:	4b1c      	ldr	r3, [pc, #112]	; (8000b98 <MX_USART1_UART_Init+0x90>)
 8000b28:	2200      	movs	r2, #0
 8000b2a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000b2c:	4b1a      	ldr	r3, [pc, #104]	; (8000b98 <MX_USART1_UART_Init+0x90>)
 8000b2e:	220c      	movs	r2, #12
 8000b30:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000b32:	4b19      	ldr	r3, [pc, #100]	; (8000b98 <MX_USART1_UART_Init+0x90>)
 8000b34:	2200      	movs	r2, #0
 8000b36:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000b38:	4b17      	ldr	r3, [pc, #92]	; (8000b98 <MX_USART1_UART_Init+0x90>)
 8000b3a:	2200      	movs	r2, #0
 8000b3c:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000b3e:	4b16      	ldr	r3, [pc, #88]	; (8000b98 <MX_USART1_UART_Init+0x90>)
 8000b40:	2200      	movs	r2, #0
 8000b42:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000b44:	4b14      	ldr	r3, [pc, #80]	; (8000b98 <MX_USART1_UART_Init+0x90>)
 8000b46:	2200      	movs	r2, #0
 8000b48:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000b4a:	4b13      	ldr	r3, [pc, #76]	; (8000b98 <MX_USART1_UART_Init+0x90>)
 8000b4c:	2200      	movs	r2, #0
 8000b4e:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000b50:	4811      	ldr	r0, [pc, #68]	; (8000b98 <MX_USART1_UART_Init+0x90>)
 8000b52:	f008 fe13 	bl	800977c <HAL_UART_Init>
 8000b56:	4603      	mov	r3, r0
 8000b58:	2b00      	cmp	r3, #0
 8000b5a:	d001      	beq.n	8000b60 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8000b5c:	f000 f900 	bl	8000d60 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000b60:	2100      	movs	r1, #0
 8000b62:	480d      	ldr	r0, [pc, #52]	; (8000b98 <MX_USART1_UART_Init+0x90>)
 8000b64:	f009 fe5e 	bl	800a824 <HAL_UARTEx_SetTxFifoThreshold>
 8000b68:	4603      	mov	r3, r0
 8000b6a:	2b00      	cmp	r3, #0
 8000b6c:	d001      	beq.n	8000b72 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8000b6e:	f000 f8f7 	bl	8000d60 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000b72:	2100      	movs	r1, #0
 8000b74:	4808      	ldr	r0, [pc, #32]	; (8000b98 <MX_USART1_UART_Init+0x90>)
 8000b76:	f009 fe93 	bl	800a8a0 <HAL_UARTEx_SetRxFifoThreshold>
 8000b7a:	4603      	mov	r3, r0
 8000b7c:	2b00      	cmp	r3, #0
 8000b7e:	d001      	beq.n	8000b84 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8000b80:	f000 f8ee 	bl	8000d60 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8000b84:	4804      	ldr	r0, [pc, #16]	; (8000b98 <MX_USART1_UART_Init+0x90>)
 8000b86:	f009 fe14 	bl	800a7b2 <HAL_UARTEx_DisableFifoMode>
 8000b8a:	4603      	mov	r3, r0
 8000b8c:	2b00      	cmp	r3, #0
 8000b8e:	d001      	beq.n	8000b94 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8000b90:	f000 f8e6 	bl	8000d60 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000b94:	bf00      	nop
 8000b96:	bd80      	pop	{r7, pc}
 8000b98:	20004e70 	.word	0x20004e70
 8000b9c:	40011000 	.word	0x40011000

08000ba0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000ba0:	b580      	push	{r7, lr}
 8000ba2:	b08c      	sub	sp, #48	; 0x30
 8000ba4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ba6:	f107 031c 	add.w	r3, r7, #28
 8000baa:	2200      	movs	r2, #0
 8000bac:	601a      	str	r2, [r3, #0]
 8000bae:	605a      	str	r2, [r3, #4]
 8000bb0:	609a      	str	r2, [r3, #8]
 8000bb2:	60da      	str	r2, [r3, #12]
 8000bb4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000bb6:	4b55      	ldr	r3, [pc, #340]	; (8000d0c <MX_GPIO_Init+0x16c>)
 8000bb8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000bbc:	4a53      	ldr	r2, [pc, #332]	; (8000d0c <MX_GPIO_Init+0x16c>)
 8000bbe:	f043 0310 	orr.w	r3, r3, #16
 8000bc2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000bc6:	4b51      	ldr	r3, [pc, #324]	; (8000d0c <MX_GPIO_Init+0x16c>)
 8000bc8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000bcc:	f003 0310 	and.w	r3, r3, #16
 8000bd0:	61bb      	str	r3, [r7, #24]
 8000bd2:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000bd4:	4b4d      	ldr	r3, [pc, #308]	; (8000d0c <MX_GPIO_Init+0x16c>)
 8000bd6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000bda:	4a4c      	ldr	r2, [pc, #304]	; (8000d0c <MX_GPIO_Init+0x16c>)
 8000bdc:	f043 0304 	orr.w	r3, r3, #4
 8000be0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000be4:	4b49      	ldr	r3, [pc, #292]	; (8000d0c <MX_GPIO_Init+0x16c>)
 8000be6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000bea:	f003 0304 	and.w	r3, r3, #4
 8000bee:	617b      	str	r3, [r7, #20]
 8000bf0:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000bf2:	4b46      	ldr	r3, [pc, #280]	; (8000d0c <MX_GPIO_Init+0x16c>)
 8000bf4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000bf8:	4a44      	ldr	r2, [pc, #272]	; (8000d0c <MX_GPIO_Init+0x16c>)
 8000bfa:	f043 0320 	orr.w	r3, r3, #32
 8000bfe:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000c02:	4b42      	ldr	r3, [pc, #264]	; (8000d0c <MX_GPIO_Init+0x16c>)
 8000c04:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c08:	f003 0320 	and.w	r3, r3, #32
 8000c0c:	613b      	str	r3, [r7, #16]
 8000c0e:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000c10:	4b3e      	ldr	r3, [pc, #248]	; (8000d0c <MX_GPIO_Init+0x16c>)
 8000c12:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c16:	4a3d      	ldr	r2, [pc, #244]	; (8000d0c <MX_GPIO_Init+0x16c>)
 8000c18:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000c1c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000c20:	4b3a      	ldr	r3, [pc, #232]	; (8000d0c <MX_GPIO_Init+0x16c>)
 8000c22:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c26:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000c2a:	60fb      	str	r3, [r7, #12]
 8000c2c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c2e:	4b37      	ldr	r3, [pc, #220]	; (8000d0c <MX_GPIO_Init+0x16c>)
 8000c30:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c34:	4a35      	ldr	r2, [pc, #212]	; (8000d0c <MX_GPIO_Init+0x16c>)
 8000c36:	f043 0301 	orr.w	r3, r3, #1
 8000c3a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000c3e:	4b33      	ldr	r3, [pc, #204]	; (8000d0c <MX_GPIO_Init+0x16c>)
 8000c40:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c44:	f003 0301 	and.w	r3, r3, #1
 8000c48:	60bb      	str	r3, [r7, #8]
 8000c4a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c4c:	4b2f      	ldr	r3, [pc, #188]	; (8000d0c <MX_GPIO_Init+0x16c>)
 8000c4e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c52:	4a2e      	ldr	r2, [pc, #184]	; (8000d0c <MX_GPIO_Init+0x16c>)
 8000c54:	f043 0302 	orr.w	r3, r3, #2
 8000c58:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000c5c:	4b2b      	ldr	r3, [pc, #172]	; (8000d0c <MX_GPIO_Init+0x16c>)
 8000c5e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c62:	f003 0302 	and.w	r3, r3, #2
 8000c66:	607b      	str	r3, [r7, #4]
 8000c68:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000c6a:	4b28      	ldr	r3, [pc, #160]	; (8000d0c <MX_GPIO_Init+0x16c>)
 8000c6c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c70:	4a26      	ldr	r2, [pc, #152]	; (8000d0c <MX_GPIO_Init+0x16c>)
 8000c72:	f043 0308 	orr.w	r3, r3, #8
 8000c76:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000c7a:	4b24      	ldr	r3, [pc, #144]	; (8000d0c <MX_GPIO_Init+0x16c>)
 8000c7c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c80:	f003 0308 	and.w	r3, r3, #8
 8000c84:	603b      	str	r3, [r7, #0]
 8000c86:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, LED1_Pin|LED0_Pin, GPIO_PIN_RESET);
 8000c88:	2200      	movs	r2, #0
 8000c8a:	2118      	movs	r1, #24
 8000c8c:	4820      	ldr	r0, [pc, #128]	; (8000d10 <MX_GPIO_Init+0x170>)
 8000c8e:	f001 fb6f 	bl	8002370 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(FD_CAN3_STB_GPIO_Port, FD_CAN3_STB_Pin, GPIO_PIN_RESET);
 8000c92:	2200      	movs	r2, #0
 8000c94:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000c98:	481e      	ldr	r0, [pc, #120]	; (8000d14 <MX_GPIO_Init+0x174>)
 8000c9a:	f001 fb69 	bl	8002370 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(FDCAN1_STB_GPIO_Port, FDCAN1_STB_Pin, GPIO_PIN_RESET);
 8000c9e:	2200      	movs	r2, #0
 8000ca0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000ca4:	481c      	ldr	r0, [pc, #112]	; (8000d18 <MX_GPIO_Init+0x178>)
 8000ca6:	f001 fb63 	bl	8002370 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : LED1_Pin LED0_Pin */
  GPIO_InitStruct.Pin = LED1_Pin|LED0_Pin;
 8000caa:	2318      	movs	r3, #24
 8000cac:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000cae:	2301      	movs	r3, #1
 8000cb0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cb2:	2300      	movs	r3, #0
 8000cb4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cb6:	2300      	movs	r3, #0
 8000cb8:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000cba:	f107 031c 	add.w	r3, r7, #28
 8000cbe:	4619      	mov	r1, r3
 8000cc0:	4813      	ldr	r0, [pc, #76]	; (8000d10 <MX_GPIO_Init+0x170>)
 8000cc2:	f001 f9ad 	bl	8002020 <HAL_GPIO_Init>

  /*Configure GPIO pin : FD_CAN3_STB_Pin */
  GPIO_InitStruct.Pin = FD_CAN3_STB_Pin;
 8000cc6:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000cca:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ccc:	2301      	movs	r3, #1
 8000cce:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cd0:	2300      	movs	r3, #0
 8000cd2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cd4:	2300      	movs	r3, #0
 8000cd6:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(FD_CAN3_STB_GPIO_Port, &GPIO_InitStruct);
 8000cd8:	f107 031c 	add.w	r3, r7, #28
 8000cdc:	4619      	mov	r1, r3
 8000cde:	480d      	ldr	r0, [pc, #52]	; (8000d14 <MX_GPIO_Init+0x174>)
 8000ce0:	f001 f99e 	bl	8002020 <HAL_GPIO_Init>

  /*Configure GPIO pin : FDCAN1_STB_Pin */
  GPIO_InitStruct.Pin = FDCAN1_STB_Pin;
 8000ce4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000ce8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000cea:	2301      	movs	r3, #1
 8000cec:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cee:	2300      	movs	r3, #0
 8000cf0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cf2:	2300      	movs	r3, #0
 8000cf4:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(FDCAN1_STB_GPIO_Port, &GPIO_InitStruct);
 8000cf6:	f107 031c 	add.w	r3, r7, #28
 8000cfa:	4619      	mov	r1, r3
 8000cfc:	4806      	ldr	r0, [pc, #24]	; (8000d18 <MX_GPIO_Init+0x178>)
 8000cfe:	f001 f98f 	bl	8002020 <HAL_GPIO_Init>

}
 8000d02:	bf00      	nop
 8000d04:	3730      	adds	r7, #48	; 0x30
 8000d06:	46bd      	mov	sp, r7
 8000d08:	bd80      	pop	{r7, pc}
 8000d0a:	bf00      	nop
 8000d0c:	58024400 	.word	0x58024400
 8000d10:	58021000 	.word	0x58021000
 8000d14:	58021400 	.word	0x58021400
 8000d18:	58020000 	.word	0x58020000

08000d1c <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8000d1c:	b580      	push	{r7, lr}
 8000d1e:	b082      	sub	sp, #8
 8000d20:	af00      	add	r7, sp, #0
 8000d22:	6078      	str	r0, [r7, #4]
  /* init code for USB_DEVICE */
  MX_USB_DEVICE_Init();
 8000d24:	f010 fd8a 	bl	801183c <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(200);
 8000d28:	20c8      	movs	r0, #200	; 0xc8
 8000d2a:	f00d ff72 	bl	800ec12 <osDelay>
    HAL_GPIO_TogglePin(LED1_GPIO_Port,LED1_Pin);
 8000d2e:	2108      	movs	r1, #8
 8000d30:	4801      	ldr	r0, [pc, #4]	; (8000d38 <StartDefaultTask+0x1c>)
 8000d32:	f001 fb36 	bl	80023a2 <HAL_GPIO_TogglePin>
    osDelay(200);
 8000d36:	e7f7      	b.n	8000d28 <StartDefaultTask+0xc>
 8000d38:	58021000 	.word	0x58021000

08000d3c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000d3c:	b580      	push	{r7, lr}
 8000d3e:	b082      	sub	sp, #8
 8000d40:	af00      	add	r7, sp, #0
 8000d42:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8000d44:	687b      	ldr	r3, [r7, #4]
 8000d46:	681b      	ldr	r3, [r3, #0]
 8000d48:	4a04      	ldr	r2, [pc, #16]	; (8000d5c <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000d4a:	4293      	cmp	r3, r2
 8000d4c:	d101      	bne.n	8000d52 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000d4e:	f000 fcdb 	bl	8001708 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000d52:	bf00      	nop
 8000d54:	3708      	adds	r7, #8
 8000d56:	46bd      	mov	sp, r7
 8000d58:	bd80      	pop	{r7, pc}
 8000d5a:	bf00      	nop
 8000d5c:	40010000 	.word	0x40010000

08000d60 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000d60:	b580      	push	{r7, lr}
 8000d62:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000d64:	b672      	cpsid	i
}
 8000d66:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  HAL_GPIO_WritePin(LED0_GPIO_Port,LED0_Pin,GPIO_PIN_SET);
 8000d68:	2201      	movs	r2, #1
 8000d6a:	2110      	movs	r1, #16
 8000d6c:	4801      	ldr	r0, [pc, #4]	; (8000d74 <Error_Handler+0x14>)
 8000d6e:	f001 faff 	bl	8002370 <HAL_GPIO_WritePin>
  while (1)
 8000d72:	e7fe      	b.n	8000d72 <Error_Handler+0x12>
 8000d74:	58021000 	.word	0x58021000

08000d78 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000d78:	b580      	push	{r7, lr}
 8000d7a:	b082      	sub	sp, #8
 8000d7c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d7e:	4b0c      	ldr	r3, [pc, #48]	; (8000db0 <HAL_MspInit+0x38>)
 8000d80:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000d84:	4a0a      	ldr	r2, [pc, #40]	; (8000db0 <HAL_MspInit+0x38>)
 8000d86:	f043 0302 	orr.w	r3, r3, #2
 8000d8a:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8000d8e:	4b08      	ldr	r3, [pc, #32]	; (8000db0 <HAL_MspInit+0x38>)
 8000d90:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000d94:	f003 0302 	and.w	r3, r3, #2
 8000d98:	607b      	str	r3, [r7, #4]
 8000d9a:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000d9c:	2200      	movs	r2, #0
 8000d9e:	210f      	movs	r1, #15
 8000da0:	f06f 0001 	mvn.w	r0, #1
 8000da4:	f000 fdac 	bl	8001900 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000da8:	bf00      	nop
 8000daa:	3708      	adds	r7, #8
 8000dac:	46bd      	mov	sp, r7
 8000dae:	bd80      	pop	{r7, pc}
 8000db0:	58024400 	.word	0x58024400

08000db4 <HAL_FDCAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hfdcan: FDCAN handle pointer
* @retval None
*/
void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* hfdcan)
{
 8000db4:	b580      	push	{r7, lr}
 8000db6:	b0b8      	sub	sp, #224	; 0xe0
 8000db8:	af00      	add	r7, sp, #0
 8000dba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000dbc:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8000dc0:	2200      	movs	r2, #0
 8000dc2:	601a      	str	r2, [r3, #0]
 8000dc4:	605a      	str	r2, [r3, #4]
 8000dc6:	609a      	str	r2, [r3, #8]
 8000dc8:	60da      	str	r2, [r3, #12]
 8000dca:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000dcc:	f107 0318 	add.w	r3, r7, #24
 8000dd0:	22b4      	movs	r2, #180	; 0xb4
 8000dd2:	2100      	movs	r1, #0
 8000dd4:	4618      	mov	r0, r3
 8000dd6:	f011 fad9 	bl	801238c <memset>
  if(hfdcan->Instance==FDCAN1)
 8000dda:	687b      	ldr	r3, [r7, #4]
 8000ddc:	681b      	ldr	r3, [r3, #0]
 8000dde:	4a54      	ldr	r2, [pc, #336]	; (8000f30 <HAL_FDCAN_MspInit+0x17c>)
 8000de0:	4293      	cmp	r3, r2
 8000de2:	d14e      	bne.n	8000e82 <HAL_FDCAN_MspInit+0xce>
  /* USER CODE BEGIN FDCAN1_MspInit 0 */

  /* USER CODE END FDCAN1_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 8000de4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000de8:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.FdcanClockSelection = RCC_FDCANCLKSOURCE_PLL;
 8000dea:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000dee:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000df2:	f107 0318 	add.w	r3, r7, #24
 8000df6:	4618      	mov	r0, r3
 8000df8:	f004 fba6 	bl	8005548 <HAL_RCCEx_PeriphCLKConfig>
 8000dfc:	4603      	mov	r3, r0
 8000dfe:	2b00      	cmp	r3, #0
 8000e00:	d001      	beq.n	8000e06 <HAL_FDCAN_MspInit+0x52>
    {
      Error_Handler();
 8000e02:	f7ff ffad 	bl	8000d60 <Error_Handler>
    }

    /* Peripheral clock enable */
    HAL_RCC_FDCAN_CLK_ENABLED++;
 8000e06:	4b4b      	ldr	r3, [pc, #300]	; (8000f34 <HAL_FDCAN_MspInit+0x180>)
 8000e08:	681b      	ldr	r3, [r3, #0]
 8000e0a:	3301      	adds	r3, #1
 8000e0c:	4a49      	ldr	r2, [pc, #292]	; (8000f34 <HAL_FDCAN_MspInit+0x180>)
 8000e0e:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_FDCAN_CLK_ENABLED==1){
 8000e10:	4b48      	ldr	r3, [pc, #288]	; (8000f34 <HAL_FDCAN_MspInit+0x180>)
 8000e12:	681b      	ldr	r3, [r3, #0]
 8000e14:	2b01      	cmp	r3, #1
 8000e16:	d10e      	bne.n	8000e36 <HAL_FDCAN_MspInit+0x82>
      __HAL_RCC_FDCAN_CLK_ENABLE();
 8000e18:	4b47      	ldr	r3, [pc, #284]	; (8000f38 <HAL_FDCAN_MspInit+0x184>)
 8000e1a:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8000e1e:	4a46      	ldr	r2, [pc, #280]	; (8000f38 <HAL_FDCAN_MspInit+0x184>)
 8000e20:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000e24:	f8c2 30ec 	str.w	r3, [r2, #236]	; 0xec
 8000e28:	4b43      	ldr	r3, [pc, #268]	; (8000f38 <HAL_FDCAN_MspInit+0x184>)
 8000e2a:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8000e2e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000e32:	617b      	str	r3, [r7, #20]
 8000e34:	697b      	ldr	r3, [r7, #20]
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e36:	4b40      	ldr	r3, [pc, #256]	; (8000f38 <HAL_FDCAN_MspInit+0x184>)
 8000e38:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e3c:	4a3e      	ldr	r2, [pc, #248]	; (8000f38 <HAL_FDCAN_MspInit+0x184>)
 8000e3e:	f043 0301 	orr.w	r3, r3, #1
 8000e42:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000e46:	4b3c      	ldr	r3, [pc, #240]	; (8000f38 <HAL_FDCAN_MspInit+0x184>)
 8000e48:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e4c:	f003 0301 	and.w	r3, r3, #1
 8000e50:	613b      	str	r3, [r7, #16]
 8000e52:	693b      	ldr	r3, [r7, #16]
    /**FDCAN1 GPIO Configuration
    PA11     ------> FDCAN1_RX
    PA12     ------> FDCAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8000e54:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8000e58:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e5c:	2302      	movs	r3, #2
 8000e5e:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e62:	2300      	movs	r3, #0
 8000e64:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e68:	2300      	movs	r3, #0
 8000e6a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN1;
 8000e6e:	2309      	movs	r3, #9
 8000e70:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e74:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8000e78:	4619      	mov	r1, r3
 8000e7a:	4830      	ldr	r0, [pc, #192]	; (8000f3c <HAL_FDCAN_MspInit+0x188>)
 8000e7c:	f001 f8d0 	bl	8002020 <HAL_GPIO_Init>
  /* USER CODE BEGIN FDCAN3_MspInit 1 */

  /* USER CODE END FDCAN3_MspInit 1 */
  }

}
 8000e80:	e051      	b.n	8000f26 <HAL_FDCAN_MspInit+0x172>
  else if(hfdcan->Instance==FDCAN3)
 8000e82:	687b      	ldr	r3, [r7, #4]
 8000e84:	681b      	ldr	r3, [r3, #0]
 8000e86:	4a2e      	ldr	r2, [pc, #184]	; (8000f40 <HAL_FDCAN_MspInit+0x18c>)
 8000e88:	4293      	cmp	r3, r2
 8000e8a:	d14c      	bne.n	8000f26 <HAL_FDCAN_MspInit+0x172>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 8000e8c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000e90:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.FdcanClockSelection = RCC_FDCANCLKSOURCE_PLL;
 8000e92:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000e96:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000e9a:	f107 0318 	add.w	r3, r7, #24
 8000e9e:	4618      	mov	r0, r3
 8000ea0:	f004 fb52 	bl	8005548 <HAL_RCCEx_PeriphCLKConfig>
 8000ea4:	4603      	mov	r3, r0
 8000ea6:	2b00      	cmp	r3, #0
 8000ea8:	d001      	beq.n	8000eae <HAL_FDCAN_MspInit+0xfa>
      Error_Handler();
 8000eaa:	f7ff ff59 	bl	8000d60 <Error_Handler>
    HAL_RCC_FDCAN_CLK_ENABLED++;
 8000eae:	4b21      	ldr	r3, [pc, #132]	; (8000f34 <HAL_FDCAN_MspInit+0x180>)
 8000eb0:	681b      	ldr	r3, [r3, #0]
 8000eb2:	3301      	adds	r3, #1
 8000eb4:	4a1f      	ldr	r2, [pc, #124]	; (8000f34 <HAL_FDCAN_MspInit+0x180>)
 8000eb6:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_FDCAN_CLK_ENABLED==1){
 8000eb8:	4b1e      	ldr	r3, [pc, #120]	; (8000f34 <HAL_FDCAN_MspInit+0x180>)
 8000eba:	681b      	ldr	r3, [r3, #0]
 8000ebc:	2b01      	cmp	r3, #1
 8000ebe:	d10e      	bne.n	8000ede <HAL_FDCAN_MspInit+0x12a>
      __HAL_RCC_FDCAN_CLK_ENABLE();
 8000ec0:	4b1d      	ldr	r3, [pc, #116]	; (8000f38 <HAL_FDCAN_MspInit+0x184>)
 8000ec2:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8000ec6:	4a1c      	ldr	r2, [pc, #112]	; (8000f38 <HAL_FDCAN_MspInit+0x184>)
 8000ec8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000ecc:	f8c2 30ec 	str.w	r3, [r2, #236]	; 0xec
 8000ed0:	4b19      	ldr	r3, [pc, #100]	; (8000f38 <HAL_FDCAN_MspInit+0x184>)
 8000ed2:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8000ed6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000eda:	60fb      	str	r3, [r7, #12]
 8000edc:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8000ede:	4b16      	ldr	r3, [pc, #88]	; (8000f38 <HAL_FDCAN_MspInit+0x184>)
 8000ee0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ee4:	4a14      	ldr	r2, [pc, #80]	; (8000f38 <HAL_FDCAN_MspInit+0x184>)
 8000ee6:	f043 0320 	orr.w	r3, r3, #32
 8000eea:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000eee:	4b12      	ldr	r3, [pc, #72]	; (8000f38 <HAL_FDCAN_MspInit+0x184>)
 8000ef0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ef4:	f003 0320 	and.w	r3, r3, #32
 8000ef8:	60bb      	str	r3, [r7, #8]
 8000efa:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000efc:	23c0      	movs	r3, #192	; 0xc0
 8000efe:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f02:	2302      	movs	r3, #2
 8000f04:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f08:	2300      	movs	r3, #0
 8000f0a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f0e:	2300      	movs	r3, #0
 8000f10:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF2_FDCAN3;
 8000f14:	2302      	movs	r3, #2
 8000f16:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000f1a:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8000f1e:	4619      	mov	r1, r3
 8000f20:	4808      	ldr	r0, [pc, #32]	; (8000f44 <HAL_FDCAN_MspInit+0x190>)
 8000f22:	f001 f87d 	bl	8002020 <HAL_GPIO_Init>
}
 8000f26:	bf00      	nop
 8000f28:	37e0      	adds	r7, #224	; 0xe0
 8000f2a:	46bd      	mov	sp, r7
 8000f2c:	bd80      	pop	{r7, pc}
 8000f2e:	bf00      	nop
 8000f30:	4000a000 	.word	0x4000a000
 8000f34:	200001a4 	.word	0x200001a4
 8000f38:	58024400 	.word	0x58024400
 8000f3c:	58020000 	.word	0x58020000
 8000f40:	4000d400 	.word	0x4000d400
 8000f44:	58021400 	.word	0x58021400

08000f48 <HAL_OSPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hospi: OSPI handle pointer
* @retval None
*/
void HAL_OSPI_MspInit(OSPI_HandleTypeDef* hospi)
{
 8000f48:	b580      	push	{r7, lr}
 8000f4a:	b0ba      	sub	sp, #232	; 0xe8
 8000f4c:	af00      	add	r7, sp, #0
 8000f4e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f50:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8000f54:	2200      	movs	r2, #0
 8000f56:	601a      	str	r2, [r3, #0]
 8000f58:	605a      	str	r2, [r3, #4]
 8000f5a:	609a      	str	r2, [r3, #8]
 8000f5c:	60da      	str	r2, [r3, #12]
 8000f5e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000f60:	f107 0320 	add.w	r3, r7, #32
 8000f64:	22b4      	movs	r2, #180	; 0xb4
 8000f66:	2100      	movs	r1, #0
 8000f68:	4618      	mov	r0, r3
 8000f6a:	f011 fa0f 	bl	801238c <memset>
  if(hospi->Instance==OCTOSPI1)
 8000f6e:	687b      	ldr	r3, [r7, #4]
 8000f70:	681b      	ldr	r3, [r3, #0]
 8000f72:	4a87      	ldr	r2, [pc, #540]	; (8001190 <HAL_OSPI_MspInit+0x248>)
 8000f74:	4293      	cmp	r3, r2
 8000f76:	f040 8106 	bne.w	8001186 <HAL_OSPI_MspInit+0x23e>
  /* USER CODE BEGIN OCTOSPI1_MspInit 0 */

  /* USER CODE END OCTOSPI1_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_OSPI;
 8000f7a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8000f7e:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.OspiClockSelection = RCC_OSPICLKSOURCE_D1HCLK;
 8000f80:	2300      	movs	r3, #0
 8000f82:	66bb      	str	r3, [r7, #104]	; 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000f84:	f107 0320 	add.w	r3, r7, #32
 8000f88:	4618      	mov	r0, r3
 8000f8a:	f004 fadd 	bl	8005548 <HAL_RCCEx_PeriphCLKConfig>
 8000f8e:	4603      	mov	r3, r0
 8000f90:	2b00      	cmp	r3, #0
 8000f92:	d001      	beq.n	8000f98 <HAL_OSPI_MspInit+0x50>
    {
      Error_Handler();
 8000f94:	f7ff fee4 	bl	8000d60 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_OSPI1_CLK_ENABLE();
 8000f98:	4b7e      	ldr	r3, [pc, #504]	; (8001194 <HAL_OSPI_MspInit+0x24c>)
 8000f9a:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8000f9e:	4a7d      	ldr	r2, [pc, #500]	; (8001194 <HAL_OSPI_MspInit+0x24c>)
 8000fa0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000fa4:	f8c2 30d4 	str.w	r3, [r2, #212]	; 0xd4
 8000fa8:	4b7a      	ldr	r3, [pc, #488]	; (8001194 <HAL_OSPI_MspInit+0x24c>)
 8000faa:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8000fae:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000fb2:	61fb      	str	r3, [r7, #28]
 8000fb4:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8000fb6:	4b77      	ldr	r3, [pc, #476]	; (8001194 <HAL_OSPI_MspInit+0x24c>)
 8000fb8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000fbc:	4a75      	ldr	r2, [pc, #468]	; (8001194 <HAL_OSPI_MspInit+0x24c>)
 8000fbe:	f043 0310 	orr.w	r3, r3, #16
 8000fc2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000fc6:	4b73      	ldr	r3, [pc, #460]	; (8001194 <HAL_OSPI_MspInit+0x24c>)
 8000fc8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000fcc:	f003 0310 	and.w	r3, r3, #16
 8000fd0:	61bb      	str	r3, [r7, #24]
 8000fd2:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8000fd4:	4b6f      	ldr	r3, [pc, #444]	; (8001194 <HAL_OSPI_MspInit+0x24c>)
 8000fd6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000fda:	4a6e      	ldr	r2, [pc, #440]	; (8001194 <HAL_OSPI_MspInit+0x24c>)
 8000fdc:	f043 0320 	orr.w	r3, r3, #32
 8000fe0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000fe4:	4b6b      	ldr	r3, [pc, #428]	; (8001194 <HAL_OSPI_MspInit+0x24c>)
 8000fe6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000fea:	f003 0320 	and.w	r3, r3, #32
 8000fee:	617b      	str	r3, [r7, #20]
 8000ff0:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000ff2:	4b68      	ldr	r3, [pc, #416]	; (8001194 <HAL_OSPI_MspInit+0x24c>)
 8000ff4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ff8:	4a66      	ldr	r2, [pc, #408]	; (8001194 <HAL_OSPI_MspInit+0x24c>)
 8000ffa:	f043 0304 	orr.w	r3, r3, #4
 8000ffe:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001002:	4b64      	ldr	r3, [pc, #400]	; (8001194 <HAL_OSPI_MspInit+0x24c>)
 8001004:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001008:	f003 0304 	and.w	r3, r3, #4
 800100c:	613b      	str	r3, [r7, #16]
 800100e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001010:	4b60      	ldr	r3, [pc, #384]	; (8001194 <HAL_OSPI_MspInit+0x24c>)
 8001012:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001016:	4a5f      	ldr	r2, [pc, #380]	; (8001194 <HAL_OSPI_MspInit+0x24c>)
 8001018:	f043 0301 	orr.w	r3, r3, #1
 800101c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001020:	4b5c      	ldr	r3, [pc, #368]	; (8001194 <HAL_OSPI_MspInit+0x24c>)
 8001022:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001026:	f003 0301 	and.w	r3, r3, #1
 800102a:	60fb      	str	r3, [r7, #12]
 800102c:	68fb      	ldr	r3, [r7, #12]
    PE8     ------> OCTOSPIM_P1_IO5
    PE9     ------> OCTOSPIM_P1_IO6
    PE10     ------> OCTOSPIM_P1_IO7
    PE11     ------> OCTOSPIM_P1_NCS
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 800102e:	2304      	movs	r3, #4
 8001030:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001034:	2302      	movs	r3, #2
 8001036:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800103a:	2300      	movs	r3, #0
 800103c:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001040:	2303      	movs	r3, #3
 8001042:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF9_OCTOSPIM_P1;
 8001046:	2309      	movs	r3, #9
 8001048:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800104c:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8001050:	4619      	mov	r1, r3
 8001052:	4851      	ldr	r0, [pc, #324]	; (8001198 <HAL_OSPI_MspInit+0x250>)
 8001054:	f000 ffe4 	bl	8002020 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001058:	f44f 7300 	mov.w	r3, #512	; 0x200
 800105c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001060:	2302      	movs	r3, #2
 8001062:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001066:	2300      	movs	r3, #0
 8001068:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800106c:	2303      	movs	r3, #3
 800106e:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF10_OCTOSPIM_P1;
 8001072:	230a      	movs	r3, #10
 8001074:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001078:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 800107c:	4619      	mov	r1, r3
 800107e:	4847      	ldr	r0, [pc, #284]	; (800119c <HAL_OSPI_MspInit+0x254>)
 8001080:	f000 ffce 	bl	8002020 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001084:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001088:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800108c:	2302      	movs	r3, #2
 800108e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001092:	2300      	movs	r3, #0
 8001094:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001098:	2303      	movs	r3, #3
 800109a:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF9_OCTOSPIM_P1;
 800109e:	2309      	movs	r3, #9
 80010a0:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80010a4:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80010a8:	4619      	mov	r1, r3
 80010aa:	483c      	ldr	r0, [pc, #240]	; (800119c <HAL_OSPI_MspInit+0x254>)
 80010ac:	f000 ffb8 	bl	8002020 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_5;
 80010b0:	2322      	movs	r3, #34	; 0x22
 80010b2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010b6:	2302      	movs	r3, #2
 80010b8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010bc:	2300      	movs	r3, #0
 80010be:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80010c2:	2303      	movs	r3, #3
 80010c4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF10_OCTOSPIM_P1;
 80010c8:	230a      	movs	r3, #10
 80010ca:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80010ce:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80010d2:	4619      	mov	r1, r3
 80010d4:	4832      	ldr	r0, [pc, #200]	; (80011a0 <HAL_OSPI_MspInit+0x258>)
 80010d6:	f000 ffa3 	bl	8002020 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1;
 80010da:	2302      	movs	r3, #2
 80010dc:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010e0:	2302      	movs	r3, #2
 80010e2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010e6:	2300      	movs	r3, #0
 80010e8:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80010ec:	2303      	movs	r3, #3
 80010ee:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF9_OCTOSPIM_P1;
 80010f2:	2309      	movs	r3, #9
 80010f4:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010f8:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80010fc:	4619      	mov	r1, r3
 80010fe:	4829      	ldr	r0, [pc, #164]	; (80011a4 <HAL_OSPI_MspInit+0x25c>)
 8001100:	f000 ff8e 	bl	8002020 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001104:	2304      	movs	r3, #4
 8001106:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800110a:	2302      	movs	r3, #2
 800110c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001110:	2300      	movs	r3, #0
 8001112:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001116:	2303      	movs	r3, #3
 8001118:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF6_OCTOSPIM_P1;
 800111c:	2306      	movs	r3, #6
 800111e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001122:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8001126:	4619      	mov	r1, r3
 8001128:	481e      	ldr	r0, [pc, #120]	; (80011a4 <HAL_OSPI_MspInit+0x25c>)
 800112a:	f000 ff79 	bl	8002020 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10;
 800112e:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 8001132:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001136:	2302      	movs	r3, #2
 8001138:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800113c:	2300      	movs	r3, #0
 800113e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001142:	2303      	movs	r3, #3
 8001144:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF10_OCTOSPIM_P1;
 8001148:	230a      	movs	r3, #10
 800114a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800114e:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8001152:	4619      	mov	r1, r3
 8001154:	4810      	ldr	r0, [pc, #64]	; (8001198 <HAL_OSPI_MspInit+0x250>)
 8001156:	f000 ff63 	bl	8002020 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11;
 800115a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800115e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001162:	2302      	movs	r3, #2
 8001164:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001168:	2300      	movs	r3, #0
 800116a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800116e:	2303      	movs	r3, #3
 8001170:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF11_OCTOSPIM_P1;
 8001174:	230b      	movs	r3, #11
 8001176:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800117a:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 800117e:	4619      	mov	r1, r3
 8001180:	4805      	ldr	r0, [pc, #20]	; (8001198 <HAL_OSPI_MspInit+0x250>)
 8001182:	f000 ff4d 	bl	8002020 <HAL_GPIO_Init>
  /* USER CODE BEGIN OCTOSPI1_MspInit 1 */

  /* USER CODE END OCTOSPI1_MspInit 1 */
  }

}
 8001186:	bf00      	nop
 8001188:	37e8      	adds	r7, #232	; 0xe8
 800118a:	46bd      	mov	sp, r7
 800118c:	bd80      	pop	{r7, pc}
 800118e:	bf00      	nop
 8001190:	52005000 	.word	0x52005000
 8001194:	58024400 	.word	0x58024400
 8001198:	58021000 	.word	0x58021000
 800119c:	58021400 	.word	0x58021400
 80011a0:	58020800 	.word	0x58020800
 80011a4:	58020000 	.word	0x58020000

080011a8 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 80011a8:	b580      	push	{r7, lr}
 80011aa:	b0b0      	sub	sp, #192	; 0xc0
 80011ac:	af00      	add	r7, sp, #0
 80011ae:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80011b0:	f107 030c 	add.w	r3, r7, #12
 80011b4:	22b4      	movs	r2, #180	; 0xb4
 80011b6:	2100      	movs	r1, #0
 80011b8:	4618      	mov	r0, r3
 80011ba:	f011 f8e7 	bl	801238c <memset>
  if(hrtc->Instance==RTC)
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	681b      	ldr	r3, [r3, #0]
 80011c2:	4a0f      	ldr	r2, [pc, #60]	; (8001200 <HAL_RTC_MspInit+0x58>)
 80011c4:	4293      	cmp	r3, r2
 80011c6:	d116      	bne.n	80011f6 <HAL_RTC_MspInit+0x4e>
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 80011c8:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80011cc:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 80011ce:	f44f 7300 	mov.w	r3, #512	; 0x200
 80011d2:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80011d6:	f107 030c 	add.w	r3, r7, #12
 80011da:	4618      	mov	r0, r3
 80011dc:	f004 f9b4 	bl	8005548 <HAL_RCCEx_PeriphCLKConfig>
 80011e0:	4603      	mov	r3, r0
 80011e2:	2b00      	cmp	r3, #0
 80011e4:	d001      	beq.n	80011ea <HAL_RTC_MspInit+0x42>
    {
      Error_Handler();
 80011e6:	f7ff fdbb 	bl	8000d60 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 80011ea:	4b06      	ldr	r3, [pc, #24]	; (8001204 <HAL_RTC_MspInit+0x5c>)
 80011ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80011ee:	4a05      	ldr	r2, [pc, #20]	; (8001204 <HAL_RTC_MspInit+0x5c>)
 80011f0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80011f4:	6713      	str	r3, [r2, #112]	; 0x70
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 80011f6:	bf00      	nop
 80011f8:	37c0      	adds	r7, #192	; 0xc0
 80011fa:	46bd      	mov	sp, r7
 80011fc:	bd80      	pop	{r7, pc}
 80011fe:	bf00      	nop
 8001200:	58004000 	.word	0x58004000
 8001204:	58024400 	.word	0x58024400

08001208 <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 8001208:	b580      	push	{r7, lr}
 800120a:	b0b8      	sub	sp, #224	; 0xe0
 800120c:	af00      	add	r7, sp, #0
 800120e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001210:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001214:	2200      	movs	r2, #0
 8001216:	601a      	str	r2, [r3, #0]
 8001218:	605a      	str	r2, [r3, #4]
 800121a:	609a      	str	r2, [r3, #8]
 800121c:	60da      	str	r2, [r3, #12]
 800121e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001220:	f107 0318 	add.w	r3, r7, #24
 8001224:	22b4      	movs	r2, #180	; 0xb4
 8001226:	2100      	movs	r1, #0
 8001228:	4618      	mov	r0, r3
 800122a:	f011 f8af 	bl	801238c <memset>
  if(hsd->Instance==SDMMC1)
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	681b      	ldr	r3, [r3, #0]
 8001232:	4a37      	ldr	r2, [pc, #220]	; (8001310 <HAL_SD_MspInit+0x108>)
 8001234:	4293      	cmp	r3, r2
 8001236:	d166      	bne.n	8001306 <HAL_SD_MspInit+0xfe>
  /* USER CODE BEGIN SDMMC1_MspInit 0 */

  /* USER CODE END SDMMC1_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SDMMC;
 8001238:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800123c:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.SdmmcClockSelection = RCC_SDMMCCLKSOURCE_PLL;
 800123e:	2300      	movs	r3, #0
 8001240:	667b      	str	r3, [r7, #100]	; 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001242:	f107 0318 	add.w	r3, r7, #24
 8001246:	4618      	mov	r0, r3
 8001248:	f004 f97e 	bl	8005548 <HAL_RCCEx_PeriphCLKConfig>
 800124c:	4603      	mov	r3, r0
 800124e:	2b00      	cmp	r3, #0
 8001250:	d001      	beq.n	8001256 <HAL_SD_MspInit+0x4e>
    {
      Error_Handler();
 8001252:	f7ff fd85 	bl	8000d60 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SDMMC1_CLK_ENABLE();
 8001256:	4b2f      	ldr	r3, [pc, #188]	; (8001314 <HAL_SD_MspInit+0x10c>)
 8001258:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 800125c:	4a2d      	ldr	r2, [pc, #180]	; (8001314 <HAL_SD_MspInit+0x10c>)
 800125e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001262:	f8c2 30d4 	str.w	r3, [r2, #212]	; 0xd4
 8001266:	4b2b      	ldr	r3, [pc, #172]	; (8001314 <HAL_SD_MspInit+0x10c>)
 8001268:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 800126c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001270:	617b      	str	r3, [r7, #20]
 8001272:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001274:	4b27      	ldr	r3, [pc, #156]	; (8001314 <HAL_SD_MspInit+0x10c>)
 8001276:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800127a:	4a26      	ldr	r2, [pc, #152]	; (8001314 <HAL_SD_MspInit+0x10c>)
 800127c:	f043 0304 	orr.w	r3, r3, #4
 8001280:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001284:	4b23      	ldr	r3, [pc, #140]	; (8001314 <HAL_SD_MspInit+0x10c>)
 8001286:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800128a:	f003 0304 	and.w	r3, r3, #4
 800128e:	613b      	str	r3, [r7, #16]
 8001290:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001292:	4b20      	ldr	r3, [pc, #128]	; (8001314 <HAL_SD_MspInit+0x10c>)
 8001294:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001298:	4a1e      	ldr	r2, [pc, #120]	; (8001314 <HAL_SD_MspInit+0x10c>)
 800129a:	f043 0308 	orr.w	r3, r3, #8
 800129e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80012a2:	4b1c      	ldr	r3, [pc, #112]	; (8001314 <HAL_SD_MspInit+0x10c>)
 80012a4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80012a8:	f003 0308 	and.w	r3, r3, #8
 80012ac:	60fb      	str	r3, [r7, #12]
 80012ae:	68fb      	ldr	r3, [r7, #12]
    PC10     ------> SDMMC1_D2
    PC11     ------> SDMMC1_D3
    PC12     ------> SDMMC1_CK
    PD2     ------> SDMMC1_CMD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 80012b0:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 80012b4:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
                          |GPIO_PIN_12;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012b8:	2302      	movs	r3, #2
 80012ba:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012be:	2300      	movs	r3, #0
 80012c0:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80012c4:	2303      	movs	r3, #3
 80012c6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 80012ca:	230c      	movs	r3, #12
 80012cc:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80012d0:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80012d4:	4619      	mov	r1, r3
 80012d6:	4810      	ldr	r0, [pc, #64]	; (8001318 <HAL_SD_MspInit+0x110>)
 80012d8:	f000 fea2 	bl	8002020 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80012dc:	2304      	movs	r3, #4
 80012de:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012e2:	2302      	movs	r3, #2
 80012e4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012e8:	2300      	movs	r3, #0
 80012ea:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80012ee:	2303      	movs	r3, #3
 80012f0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 80012f4:	230c      	movs	r3, #12
 80012f6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80012fa:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80012fe:	4619      	mov	r1, r3
 8001300:	4806      	ldr	r0, [pc, #24]	; (800131c <HAL_SD_MspInit+0x114>)
 8001302:	f000 fe8d 	bl	8002020 <HAL_GPIO_Init>
  /* USER CODE BEGIN SDMMC1_MspInit 1 */

  /* USER CODE END SDMMC1_MspInit 1 */
  }

}
 8001306:	bf00      	nop
 8001308:	37e0      	adds	r7, #224	; 0xe0
 800130a:	46bd      	mov	sp, r7
 800130c:	bd80      	pop	{r7, pc}
 800130e:	bf00      	nop
 8001310:	52007000 	.word	0x52007000
 8001314:	58024400 	.word	0x58024400
 8001318:	58020800 	.word	0x58020800
 800131c:	58020c00 	.word	0x58020c00

08001320 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001320:	b480      	push	{r7}
 8001322:	b085      	sub	sp, #20
 8001324:	af00      	add	r7, sp, #0
 8001326:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	681b      	ldr	r3, [r3, #0]
 800132c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001330:	d10e      	bne.n	8001350 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001332:	4b0a      	ldr	r3, [pc, #40]	; (800135c <HAL_TIM_Base_MspInit+0x3c>)
 8001334:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001338:	4a08      	ldr	r2, [pc, #32]	; (800135c <HAL_TIM_Base_MspInit+0x3c>)
 800133a:	f043 0301 	orr.w	r3, r3, #1
 800133e:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8001342:	4b06      	ldr	r3, [pc, #24]	; (800135c <HAL_TIM_Base_MspInit+0x3c>)
 8001344:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001348:	f003 0301 	and.w	r3, r3, #1
 800134c:	60fb      	str	r3, [r7, #12]
 800134e:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8001350:	bf00      	nop
 8001352:	3714      	adds	r7, #20
 8001354:	46bd      	mov	sp, r7
 8001356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800135a:	4770      	bx	lr
 800135c:	58024400 	.word	0x58024400

08001360 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001360:	b580      	push	{r7, lr}
 8001362:	b0b6      	sub	sp, #216	; 0xd8
 8001364:	af00      	add	r7, sp, #0
 8001366:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001368:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 800136c:	2200      	movs	r2, #0
 800136e:	601a      	str	r2, [r3, #0]
 8001370:	605a      	str	r2, [r3, #4]
 8001372:	609a      	str	r2, [r3, #8]
 8001374:	60da      	str	r2, [r3, #12]
 8001376:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001378:	f107 0310 	add.w	r3, r7, #16
 800137c:	22b4      	movs	r2, #180	; 0xb4
 800137e:	2100      	movs	r1, #0
 8001380:	4618      	mov	r0, r3
 8001382:	f011 f803 	bl	801238c <memset>
  if(huart->Instance==USART1)
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	681b      	ldr	r3, [r3, #0]
 800138a:	4a25      	ldr	r2, [pc, #148]	; (8001420 <HAL_UART_MspInit+0xc0>)
 800138c:	4293      	cmp	r3, r2
 800138e:	d142      	bne.n	8001416 <HAL_UART_MspInit+0xb6>
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8001390:	2301      	movs	r3, #1
 8001392:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16910CLKSOURCE_D2PCLK2;
 8001394:	2300      	movs	r3, #0
 8001396:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800139a:	f107 0310 	add.w	r3, r7, #16
 800139e:	4618      	mov	r0, r3
 80013a0:	f004 f8d2 	bl	8005548 <HAL_RCCEx_PeriphCLKConfig>
 80013a4:	4603      	mov	r3, r0
 80013a6:	2b00      	cmp	r3, #0
 80013a8:	d001      	beq.n	80013ae <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 80013aa:	f7ff fcd9 	bl	8000d60 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80013ae:	4b1d      	ldr	r3, [pc, #116]	; (8001424 <HAL_UART_MspInit+0xc4>)
 80013b0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80013b4:	4a1b      	ldr	r2, [pc, #108]	; (8001424 <HAL_UART_MspInit+0xc4>)
 80013b6:	f043 0310 	orr.w	r3, r3, #16
 80013ba:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 80013be:	4b19      	ldr	r3, [pc, #100]	; (8001424 <HAL_UART_MspInit+0xc4>)
 80013c0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80013c4:	f003 0310 	and.w	r3, r3, #16
 80013c8:	60fb      	str	r3, [r7, #12]
 80013ca:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80013cc:	4b15      	ldr	r3, [pc, #84]	; (8001424 <HAL_UART_MspInit+0xc4>)
 80013ce:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80013d2:	4a14      	ldr	r2, [pc, #80]	; (8001424 <HAL_UART_MspInit+0xc4>)
 80013d4:	f043 0302 	orr.w	r3, r3, #2
 80013d8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80013dc:	4b11      	ldr	r3, [pc, #68]	; (8001424 <HAL_UART_MspInit+0xc4>)
 80013de:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80013e2:	f003 0302 	and.w	r3, r3, #2
 80013e6:	60bb      	str	r3, [r7, #8]
 80013e8:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PB14     ------> USART1_TX
    PB15     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 80013ea:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 80013ee:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013f2:	2302      	movs	r3, #2
 80013f4:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013f8:	2300      	movs	r3, #0
 80013fa:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013fe:	2300      	movs	r3, #0
 8001400:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Alternate = GPIO_AF4_USART1;
 8001404:	2304      	movs	r3, #4
 8001406:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800140a:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 800140e:	4619      	mov	r1, r3
 8001410:	4805      	ldr	r0, [pc, #20]	; (8001428 <HAL_UART_MspInit+0xc8>)
 8001412:	f000 fe05 	bl	8002020 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8001416:	bf00      	nop
 8001418:	37d8      	adds	r7, #216	; 0xd8
 800141a:	46bd      	mov	sp, r7
 800141c:	bd80      	pop	{r7, pc}
 800141e:	bf00      	nop
 8001420:	40011000 	.word	0x40011000
 8001424:	58024400 	.word	0x58024400
 8001428:	58020400 	.word	0x58020400

0800142c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800142c:	b580      	push	{r7, lr}
 800142e:	b08e      	sub	sp, #56	; 0x38
 8001430:	af00      	add	r7, sp, #0
 8001432:	6078      	str	r0, [r7, #4]
  uint32_t              uwTimclock;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
/*Configure the TIM1 IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	2b0f      	cmp	r3, #15
 8001438:	d844      	bhi.n	80014c4 <HAL_InitTick+0x98>
  {
  HAL_NVIC_SetPriority(TIM1_UP_IRQn, TickPriority ,0U);
 800143a:	2200      	movs	r2, #0
 800143c:	6879      	ldr	r1, [r7, #4]
 800143e:	2019      	movs	r0, #25
 8001440:	f000 fa5e 	bl	8001900 <HAL_NVIC_SetPriority>

  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 8001444:	2019      	movs	r0, #25
 8001446:	f000 fa75 	bl	8001934 <HAL_NVIC_EnableIRQ>
    uwTickPrio = TickPriority;
 800144a:	4a24      	ldr	r2, [pc, #144]	; (80014dc <HAL_InitTick+0xb0>)
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8001450:	4b23      	ldr	r3, [pc, #140]	; (80014e0 <HAL_InitTick+0xb4>)
 8001452:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001456:	4a22      	ldr	r2, [pc, #136]	; (80014e0 <HAL_InitTick+0xb4>)
 8001458:	f043 0301 	orr.w	r3, r3, #1
 800145c:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8001460:	4b1f      	ldr	r3, [pc, #124]	; (80014e0 <HAL_InitTick+0xb4>)
 8001462:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001466:	f003 0301 	and.w	r3, r3, #1
 800146a:	60bb      	str	r3, [r7, #8]
 800146c:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800146e:	f107 020c 	add.w	r2, r7, #12
 8001472:	f107 0310 	add.w	r3, r7, #16
 8001476:	4611      	mov	r1, r2
 8001478:	4618      	mov	r0, r3
 800147a:	f004 f823 	bl	80054c4 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */

  uwTimclock = 2*HAL_RCC_GetPCLK2Freq();
 800147e:	f004 f80b 	bl	8005498 <HAL_RCC_GetPCLK2Freq>
 8001482:	4603      	mov	r3, r0
 8001484:	005b      	lsls	r3, r3, #1
 8001486:	637b      	str	r3, [r7, #52]	; 0x34

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001488:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800148a:	4a16      	ldr	r2, [pc, #88]	; (80014e4 <HAL_InitTick+0xb8>)
 800148c:	fba2 2303 	umull	r2, r3, r2, r3
 8001490:	0c9b      	lsrs	r3, r3, #18
 8001492:	3b01      	subs	r3, #1
 8001494:	633b      	str	r3, [r7, #48]	; 0x30

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8001496:	4b14      	ldr	r3, [pc, #80]	; (80014e8 <HAL_InitTick+0xbc>)
 8001498:	4a14      	ldr	r2, [pc, #80]	; (80014ec <HAL_InitTick+0xc0>)
 800149a:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 800149c:	4b12      	ldr	r3, [pc, #72]	; (80014e8 <HAL_InitTick+0xbc>)
 800149e:	f240 32e7 	movw	r2, #999	; 0x3e7
 80014a2:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 80014a4:	4a10      	ldr	r2, [pc, #64]	; (80014e8 <HAL_InitTick+0xbc>)
 80014a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80014a8:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 80014aa:	4b0f      	ldr	r3, [pc, #60]	; (80014e8 <HAL_InitTick+0xbc>)
 80014ac:	2200      	movs	r2, #0
 80014ae:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80014b0:	4b0d      	ldr	r3, [pc, #52]	; (80014e8 <HAL_InitTick+0xbc>)
 80014b2:	2200      	movs	r2, #0
 80014b4:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 80014b6:	480c      	ldr	r0, [pc, #48]	; (80014e8 <HAL_InitTick+0xbc>)
 80014b8:	f007 fc48 	bl	8008d4c <HAL_TIM_Base_Init>
 80014bc:	4603      	mov	r3, r0
 80014be:	2b00      	cmp	r3, #0
 80014c0:	d107      	bne.n	80014d2 <HAL_InitTick+0xa6>
 80014c2:	e001      	b.n	80014c8 <HAL_InitTick+0x9c>
    return HAL_ERROR;
 80014c4:	2301      	movs	r3, #1
 80014c6:	e005      	b.n	80014d4 <HAL_InitTick+0xa8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 80014c8:	4807      	ldr	r0, [pc, #28]	; (80014e8 <HAL_InitTick+0xbc>)
 80014ca:	f007 fc97 	bl	8008dfc <HAL_TIM_Base_Start_IT>
 80014ce:	4603      	mov	r3, r0
 80014d0:	e000      	b.n	80014d4 <HAL_InitTick+0xa8>
  }

  /* Return function status */
  return HAL_ERROR;
 80014d2:	2301      	movs	r3, #1
}
 80014d4:	4618      	mov	r0, r3
 80014d6:	3738      	adds	r7, #56	; 0x38
 80014d8:	46bd      	mov	sp, r7
 80014da:	bd80      	pop	{r7, pc}
 80014dc:	20000008 	.word	0x20000008
 80014e0:	58024400 	.word	0x58024400
 80014e4:	431bde83 	.word	0x431bde83
 80014e8:	20005010 	.word	0x20005010
 80014ec:	40010000 	.word	0x40010000

080014f0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80014f0:	b480      	push	{r7}
 80014f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80014f4:	e7fe      	b.n	80014f4 <NMI_Handler+0x4>

080014f6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80014f6:	b480      	push	{r7}
 80014f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80014fa:	e7fe      	b.n	80014fa <HardFault_Handler+0x4>

080014fc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80014fc:	b480      	push	{r7}
 80014fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001500:	e7fe      	b.n	8001500 <MemManage_Handler+0x4>

08001502 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001502:	b480      	push	{r7}
 8001504:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001506:	e7fe      	b.n	8001506 <BusFault_Handler+0x4>

08001508 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001508:	b480      	push	{r7}
 800150a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800150c:	e7fe      	b.n	800150c <UsageFault_Handler+0x4>

0800150e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800150e:	b480      	push	{r7}
 8001510:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001512:	bf00      	nop
 8001514:	46bd      	mov	sp, r7
 8001516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800151a:	4770      	bx	lr

0800151c <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 800151c:	b580      	push	{r7, lr}
 800151e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001520:	4802      	ldr	r0, [pc, #8]	; (800152c <TIM1_UP_IRQHandler+0x10>)
 8001522:	f007 fcf1 	bl	8008f08 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 8001526:	bf00      	nop
 8001528:	bd80      	pop	{r7, pc}
 800152a:	bf00      	nop
 800152c:	20005010 	.word	0x20005010

08001530 <OTG_HS_IRQHandler>:

/**
  * @brief This function handles USB On The Go HS global interrupt.
  */
void OTG_HS_IRQHandler(void)
{
 8001530:	b580      	push	{r7, lr}
 8001532:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_HS_IRQn 0 */

  /* USER CODE END OTG_HS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_HS);
 8001534:	4802      	ldr	r0, [pc, #8]	; (8001540 <OTG_HS_IRQHandler+0x10>)
 8001536:	f001 ffbc 	bl	80034b2 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_HS_IRQn 1 */

  /* USER CODE END OTG_HS_IRQn 1 */
}
 800153a:	bf00      	nop
 800153c:	bd80      	pop	{r7, pc}
 800153e:	bf00      	nop
 8001540:	200069dc 	.word	0x200069dc

08001544 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001544:	b480      	push	{r7}
 8001546:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001548:	4b34      	ldr	r3, [pc, #208]	; (800161c <SystemInit+0xd8>)
 800154a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800154e:	4a33      	ldr	r2, [pc, #204]	; (800161c <SystemInit+0xd8>)
 8001550:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001554:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001558:	4b31      	ldr	r3, [pc, #196]	; (8001620 <SystemInit+0xdc>)
 800155a:	681b      	ldr	r3, [r3, #0]
 800155c:	f003 030f 	and.w	r3, r3, #15
 8001560:	2b06      	cmp	r3, #6
 8001562:	d807      	bhi.n	8001574 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001564:	4b2e      	ldr	r3, [pc, #184]	; (8001620 <SystemInit+0xdc>)
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	f023 030f 	bic.w	r3, r3, #15
 800156c:	4a2c      	ldr	r2, [pc, #176]	; (8001620 <SystemInit+0xdc>)
 800156e:	f043 0307 	orr.w	r3, r3, #7
 8001572:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8001574:	4b2b      	ldr	r3, [pc, #172]	; (8001624 <SystemInit+0xe0>)
 8001576:	681b      	ldr	r3, [r3, #0]
 8001578:	4a2a      	ldr	r2, [pc, #168]	; (8001624 <SystemInit+0xe0>)
 800157a:	f043 0301 	orr.w	r3, r3, #1
 800157e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8001580:	4b28      	ldr	r3, [pc, #160]	; (8001624 <SystemInit+0xe0>)
 8001582:	2200      	movs	r2, #0
 8001584:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8001586:	4b27      	ldr	r3, [pc, #156]	; (8001624 <SystemInit+0xe0>)
 8001588:	681a      	ldr	r2, [r3, #0]
 800158a:	4926      	ldr	r1, [pc, #152]	; (8001624 <SystemInit+0xe0>)
 800158c:	4b26      	ldr	r3, [pc, #152]	; (8001628 <SystemInit+0xe4>)
 800158e:	4013      	ands	r3, r2
 8001590:	600b      	str	r3, [r1, #0]
  
   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001592:	4b23      	ldr	r3, [pc, #140]	; (8001620 <SystemInit+0xdc>)
 8001594:	681b      	ldr	r3, [r3, #0]
 8001596:	f003 0308 	and.w	r3, r3, #8
 800159a:	2b00      	cmp	r3, #0
 800159c:	d007      	beq.n	80015ae <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800159e:	4b20      	ldr	r3, [pc, #128]	; (8001620 <SystemInit+0xdc>)
 80015a0:	681b      	ldr	r3, [r3, #0]
 80015a2:	f023 030f 	bic.w	r3, r3, #15
 80015a6:	4a1e      	ldr	r2, [pc, #120]	; (8001620 <SystemInit+0xdc>)
 80015a8:	f043 0307 	orr.w	r3, r3, #7
 80015ac:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 80015ae:	4b1d      	ldr	r3, [pc, #116]	; (8001624 <SystemInit+0xe0>)
 80015b0:	2200      	movs	r2, #0
 80015b2:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 80015b4:	4b1b      	ldr	r3, [pc, #108]	; (8001624 <SystemInit+0xe0>)
 80015b6:	2200      	movs	r2, #0
 80015b8:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 80015ba:	4b1a      	ldr	r3, [pc, #104]	; (8001624 <SystemInit+0xe0>)
 80015bc:	2200      	movs	r2, #0
 80015be:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 80015c0:	4b18      	ldr	r3, [pc, #96]	; (8001624 <SystemInit+0xe0>)
 80015c2:	4a1a      	ldr	r2, [pc, #104]	; (800162c <SystemInit+0xe8>)
 80015c4:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 80015c6:	4b17      	ldr	r3, [pc, #92]	; (8001624 <SystemInit+0xe0>)
 80015c8:	4a19      	ldr	r2, [pc, #100]	; (8001630 <SystemInit+0xec>)
 80015ca:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 80015cc:	4b15      	ldr	r3, [pc, #84]	; (8001624 <SystemInit+0xe0>)
 80015ce:	4a19      	ldr	r2, [pc, #100]	; (8001634 <SystemInit+0xf0>)
 80015d0:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 80015d2:	4b14      	ldr	r3, [pc, #80]	; (8001624 <SystemInit+0xe0>)
 80015d4:	2200      	movs	r2, #0
 80015d6:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 80015d8:	4b12      	ldr	r3, [pc, #72]	; (8001624 <SystemInit+0xe0>)
 80015da:	4a16      	ldr	r2, [pc, #88]	; (8001634 <SystemInit+0xf0>)
 80015dc:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 80015de:	4b11      	ldr	r3, [pc, #68]	; (8001624 <SystemInit+0xe0>)
 80015e0:	2200      	movs	r2, #0
 80015e2:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 80015e4:	4b0f      	ldr	r3, [pc, #60]	; (8001624 <SystemInit+0xe0>)
 80015e6:	4a13      	ldr	r2, [pc, #76]	; (8001634 <SystemInit+0xf0>)
 80015e8:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 80015ea:	4b0e      	ldr	r3, [pc, #56]	; (8001624 <SystemInit+0xe0>)
 80015ec:	2200      	movs	r2, #0
 80015ee:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80015f0:	4b0c      	ldr	r3, [pc, #48]	; (8001624 <SystemInit+0xe0>)
 80015f2:	681b      	ldr	r3, [r3, #0]
 80015f4:	4a0b      	ldr	r2, [pc, #44]	; (8001624 <SystemInit+0xe0>)
 80015f6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80015fa:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 80015fc:	4b09      	ldr	r3, [pc, #36]	; (8001624 <SystemInit+0xe0>)
 80015fe:	2200      	movs	r2, #0
 8001600:	661a      	str	r2, [r3, #96]	; 0x60
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8001602:	4b0d      	ldr	r3, [pc, #52]	; (8001638 <SystemInit+0xf4>)
 8001604:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8001608:	601a      	str	r2, [r3, #0]

  /* Configure the Vector Table location add offset address for cortex-M7 ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D1_AXISRAM_BASE  | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal AXI-RAM */
#else
  SCB->VTOR = FLASH_BANK1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800160a:	4b04      	ldr	r3, [pc, #16]	; (800161c <SystemInit+0xd8>)
 800160c:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001610:	609a      	str	r2, [r3, #8]
#endif

#endif /*DUAL_CORE && CORE_CM4*/

}
 8001612:	bf00      	nop
 8001614:	46bd      	mov	sp, r7
 8001616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800161a:	4770      	bx	lr
 800161c:	e000ed00 	.word	0xe000ed00
 8001620:	52002000 	.word	0x52002000
 8001624:	58024400 	.word	0x58024400
 8001628:	eaf6ed7f 	.word	0xeaf6ed7f
 800162c:	02020200 	.word	0x02020200
 8001630:	01ff0000 	.word	0x01ff0000
 8001634:	01010280 	.word	0x01010280
 8001638:	52004000 	.word	0x52004000

0800163c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 800163c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001674 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8001640:	f7ff ff80 	bl	8001544 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001644:	480c      	ldr	r0, [pc, #48]	; (8001678 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001646:	490d      	ldr	r1, [pc, #52]	; (800167c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001648:	4a0d      	ldr	r2, [pc, #52]	; (8001680 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800164a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800164c:	e002      	b.n	8001654 <LoopCopyDataInit>

0800164e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800164e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001650:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001652:	3304      	adds	r3, #4

08001654 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001654:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001656:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001658:	d3f9      	bcc.n	800164e <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800165a:	4a0a      	ldr	r2, [pc, #40]	; (8001684 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800165c:	4c0a      	ldr	r4, [pc, #40]	; (8001688 <LoopFillZerobss+0x22>)
  movs r3, #0
 800165e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001660:	e001      	b.n	8001666 <LoopFillZerobss>

08001662 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001662:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001664:	3204      	adds	r2, #4

08001666 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001666:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001668:	d3fb      	bcc.n	8001662 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800166a:	f010 fe5d 	bl	8012328 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800166e:	f7fe ffcb 	bl	8000608 <main>
  bx  lr
 8001672:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001674:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001678:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800167c:	20000188 	.word	0x20000188
  ldr r2, =_sidata
 8001680:	080124ec 	.word	0x080124ec
  ldr r2, =_sbss
 8001684:	20000188 	.word	0x20000188
  ldr r4, =_ebss
 8001688:	20006de4 	.word	0x20006de4

0800168c <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800168c:	e7fe      	b.n	800168c <ADC3_IRQHandler>
	...

08001690 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001690:	b580      	push	{r7, lr}
 8001692:	b082      	sub	sp, #8
 8001694:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001696:	2003      	movs	r0, #3
 8001698:	f000 f927 	bl	80018ea <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800169c:	f003 fd3c 	bl	8005118 <HAL_RCC_GetSysClockFreq>
 80016a0:	4602      	mov	r2, r0
 80016a2:	4b15      	ldr	r3, [pc, #84]	; (80016f8 <HAL_Init+0x68>)
 80016a4:	699b      	ldr	r3, [r3, #24]
 80016a6:	0a1b      	lsrs	r3, r3, #8
 80016a8:	f003 030f 	and.w	r3, r3, #15
 80016ac:	4913      	ldr	r1, [pc, #76]	; (80016fc <HAL_Init+0x6c>)
 80016ae:	5ccb      	ldrb	r3, [r1, r3]
 80016b0:	f003 031f 	and.w	r3, r3, #31
 80016b4:	fa22 f303 	lsr.w	r3, r2, r3
 80016b8:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80016ba:	4b0f      	ldr	r3, [pc, #60]	; (80016f8 <HAL_Init+0x68>)
 80016bc:	699b      	ldr	r3, [r3, #24]
 80016be:	f003 030f 	and.w	r3, r3, #15
 80016c2:	4a0e      	ldr	r2, [pc, #56]	; (80016fc <HAL_Init+0x6c>)
 80016c4:	5cd3      	ldrb	r3, [r2, r3]
 80016c6:	f003 031f 	and.w	r3, r3, #31
 80016ca:	687a      	ldr	r2, [r7, #4]
 80016cc:	fa22 f303 	lsr.w	r3, r2, r3
 80016d0:	4a0b      	ldr	r2, [pc, #44]	; (8001700 <HAL_Init+0x70>)
 80016d2:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80016d4:	4a0b      	ldr	r2, [pc, #44]	; (8001704 <HAL_Init+0x74>)
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80016da:	2000      	movs	r0, #0
 80016dc:	f7ff fea6 	bl	800142c <HAL_InitTick>
 80016e0:	4603      	mov	r3, r0
 80016e2:	2b00      	cmp	r3, #0
 80016e4:	d001      	beq.n	80016ea <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 80016e6:	2301      	movs	r3, #1
 80016e8:	e002      	b.n	80016f0 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 80016ea:	f7ff fb45 	bl	8000d78 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80016ee:	2300      	movs	r3, #0
}
 80016f0:	4618      	mov	r0, r3
 80016f2:	3708      	adds	r7, #8
 80016f4:	46bd      	mov	sp, r7
 80016f6:	bd80      	pop	{r7, pc}
 80016f8:	58024400 	.word	0x58024400
 80016fc:	08012490 	.word	0x08012490
 8001700:	20000004 	.word	0x20000004
 8001704:	20000000 	.word	0x20000000

08001708 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001708:	b480      	push	{r7}
 800170a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800170c:	4b06      	ldr	r3, [pc, #24]	; (8001728 <HAL_IncTick+0x20>)
 800170e:	781b      	ldrb	r3, [r3, #0]
 8001710:	461a      	mov	r2, r3
 8001712:	4b06      	ldr	r3, [pc, #24]	; (800172c <HAL_IncTick+0x24>)
 8001714:	681b      	ldr	r3, [r3, #0]
 8001716:	4413      	add	r3, r2
 8001718:	4a04      	ldr	r2, [pc, #16]	; (800172c <HAL_IncTick+0x24>)
 800171a:	6013      	str	r3, [r2, #0]
}
 800171c:	bf00      	nop
 800171e:	46bd      	mov	sp, r7
 8001720:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001724:	4770      	bx	lr
 8001726:	bf00      	nop
 8001728:	2000000c 	.word	0x2000000c
 800172c:	2000505c 	.word	0x2000505c

08001730 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001730:	b480      	push	{r7}
 8001732:	af00      	add	r7, sp, #0
  return uwTick;
 8001734:	4b03      	ldr	r3, [pc, #12]	; (8001744 <HAL_GetTick+0x14>)
 8001736:	681b      	ldr	r3, [r3, #0]
}
 8001738:	4618      	mov	r0, r3
 800173a:	46bd      	mov	sp, r7
 800173c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001740:	4770      	bx	lr
 8001742:	bf00      	nop
 8001744:	2000505c 	.word	0x2000505c

08001748 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001748:	b580      	push	{r7, lr}
 800174a:	b084      	sub	sp, #16
 800174c:	af00      	add	r7, sp, #0
 800174e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001750:	f7ff ffee 	bl	8001730 <HAL_GetTick>
 8001754:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800175a:	68fb      	ldr	r3, [r7, #12]
 800175c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001760:	d005      	beq.n	800176e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001762:	4b0a      	ldr	r3, [pc, #40]	; (800178c <HAL_Delay+0x44>)
 8001764:	781b      	ldrb	r3, [r3, #0]
 8001766:	461a      	mov	r2, r3
 8001768:	68fb      	ldr	r3, [r7, #12]
 800176a:	4413      	add	r3, r2
 800176c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800176e:	bf00      	nop
 8001770:	f7ff ffde 	bl	8001730 <HAL_GetTick>
 8001774:	4602      	mov	r2, r0
 8001776:	68bb      	ldr	r3, [r7, #8]
 8001778:	1ad3      	subs	r3, r2, r3
 800177a:	68fa      	ldr	r2, [r7, #12]
 800177c:	429a      	cmp	r2, r3
 800177e:	d8f7      	bhi.n	8001770 <HAL_Delay+0x28>
  {
  }
}
 8001780:	bf00      	nop
 8001782:	bf00      	nop
 8001784:	3710      	adds	r7, #16
 8001786:	46bd      	mov	sp, r7
 8001788:	bd80      	pop	{r7, pc}
 800178a:	bf00      	nop
 800178c:	2000000c 	.word	0x2000000c

08001790 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001790:	b480      	push	{r7}
 8001792:	b085      	sub	sp, #20
 8001794:	af00      	add	r7, sp, #0
 8001796:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	f003 0307 	and.w	r3, r3, #7
 800179e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80017a0:	4b0b      	ldr	r3, [pc, #44]	; (80017d0 <__NVIC_SetPriorityGrouping+0x40>)
 80017a2:	68db      	ldr	r3, [r3, #12]
 80017a4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80017a6:	68ba      	ldr	r2, [r7, #8]
 80017a8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80017ac:	4013      	ands	r3, r2
 80017ae:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80017b0:	68fb      	ldr	r3, [r7, #12]
 80017b2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80017b4:	68bb      	ldr	r3, [r7, #8]
 80017b6:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80017b8:	4b06      	ldr	r3, [pc, #24]	; (80017d4 <__NVIC_SetPriorityGrouping+0x44>)
 80017ba:	4313      	orrs	r3, r2
 80017bc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80017be:	4a04      	ldr	r2, [pc, #16]	; (80017d0 <__NVIC_SetPriorityGrouping+0x40>)
 80017c0:	68bb      	ldr	r3, [r7, #8]
 80017c2:	60d3      	str	r3, [r2, #12]
}
 80017c4:	bf00      	nop
 80017c6:	3714      	adds	r7, #20
 80017c8:	46bd      	mov	sp, r7
 80017ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ce:	4770      	bx	lr
 80017d0:	e000ed00 	.word	0xe000ed00
 80017d4:	05fa0000 	.word	0x05fa0000

080017d8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80017d8:	b480      	push	{r7}
 80017da:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80017dc:	4b04      	ldr	r3, [pc, #16]	; (80017f0 <__NVIC_GetPriorityGrouping+0x18>)
 80017de:	68db      	ldr	r3, [r3, #12]
 80017e0:	0a1b      	lsrs	r3, r3, #8
 80017e2:	f003 0307 	and.w	r3, r3, #7
}
 80017e6:	4618      	mov	r0, r3
 80017e8:	46bd      	mov	sp, r7
 80017ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ee:	4770      	bx	lr
 80017f0:	e000ed00 	.word	0xe000ed00

080017f4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80017f4:	b480      	push	{r7}
 80017f6:	b083      	sub	sp, #12
 80017f8:	af00      	add	r7, sp, #0
 80017fa:	4603      	mov	r3, r0
 80017fc:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80017fe:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001802:	2b00      	cmp	r3, #0
 8001804:	db0b      	blt.n	800181e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001806:	88fb      	ldrh	r3, [r7, #6]
 8001808:	f003 021f 	and.w	r2, r3, #31
 800180c:	4907      	ldr	r1, [pc, #28]	; (800182c <__NVIC_EnableIRQ+0x38>)
 800180e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001812:	095b      	lsrs	r3, r3, #5
 8001814:	2001      	movs	r0, #1
 8001816:	fa00 f202 	lsl.w	r2, r0, r2
 800181a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800181e:	bf00      	nop
 8001820:	370c      	adds	r7, #12
 8001822:	46bd      	mov	sp, r7
 8001824:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001828:	4770      	bx	lr
 800182a:	bf00      	nop
 800182c:	e000e100 	.word	0xe000e100

08001830 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001830:	b480      	push	{r7}
 8001832:	b083      	sub	sp, #12
 8001834:	af00      	add	r7, sp, #0
 8001836:	4603      	mov	r3, r0
 8001838:	6039      	str	r1, [r7, #0]
 800183a:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800183c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001840:	2b00      	cmp	r3, #0
 8001842:	db0a      	blt.n	800185a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001844:	683b      	ldr	r3, [r7, #0]
 8001846:	b2da      	uxtb	r2, r3
 8001848:	490c      	ldr	r1, [pc, #48]	; (800187c <__NVIC_SetPriority+0x4c>)
 800184a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800184e:	0112      	lsls	r2, r2, #4
 8001850:	b2d2      	uxtb	r2, r2
 8001852:	440b      	add	r3, r1
 8001854:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001858:	e00a      	b.n	8001870 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800185a:	683b      	ldr	r3, [r7, #0]
 800185c:	b2da      	uxtb	r2, r3
 800185e:	4908      	ldr	r1, [pc, #32]	; (8001880 <__NVIC_SetPriority+0x50>)
 8001860:	88fb      	ldrh	r3, [r7, #6]
 8001862:	f003 030f 	and.w	r3, r3, #15
 8001866:	3b04      	subs	r3, #4
 8001868:	0112      	lsls	r2, r2, #4
 800186a:	b2d2      	uxtb	r2, r2
 800186c:	440b      	add	r3, r1
 800186e:	761a      	strb	r2, [r3, #24]
}
 8001870:	bf00      	nop
 8001872:	370c      	adds	r7, #12
 8001874:	46bd      	mov	sp, r7
 8001876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800187a:	4770      	bx	lr
 800187c:	e000e100 	.word	0xe000e100
 8001880:	e000ed00 	.word	0xe000ed00

08001884 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001884:	b480      	push	{r7}
 8001886:	b089      	sub	sp, #36	; 0x24
 8001888:	af00      	add	r7, sp, #0
 800188a:	60f8      	str	r0, [r7, #12]
 800188c:	60b9      	str	r1, [r7, #8]
 800188e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001890:	68fb      	ldr	r3, [r7, #12]
 8001892:	f003 0307 	and.w	r3, r3, #7
 8001896:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001898:	69fb      	ldr	r3, [r7, #28]
 800189a:	f1c3 0307 	rsb	r3, r3, #7
 800189e:	2b04      	cmp	r3, #4
 80018a0:	bf28      	it	cs
 80018a2:	2304      	movcs	r3, #4
 80018a4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80018a6:	69fb      	ldr	r3, [r7, #28]
 80018a8:	3304      	adds	r3, #4
 80018aa:	2b06      	cmp	r3, #6
 80018ac:	d902      	bls.n	80018b4 <NVIC_EncodePriority+0x30>
 80018ae:	69fb      	ldr	r3, [r7, #28]
 80018b0:	3b03      	subs	r3, #3
 80018b2:	e000      	b.n	80018b6 <NVIC_EncodePriority+0x32>
 80018b4:	2300      	movs	r3, #0
 80018b6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80018b8:	f04f 32ff 	mov.w	r2, #4294967295
 80018bc:	69bb      	ldr	r3, [r7, #24]
 80018be:	fa02 f303 	lsl.w	r3, r2, r3
 80018c2:	43da      	mvns	r2, r3
 80018c4:	68bb      	ldr	r3, [r7, #8]
 80018c6:	401a      	ands	r2, r3
 80018c8:	697b      	ldr	r3, [r7, #20]
 80018ca:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80018cc:	f04f 31ff 	mov.w	r1, #4294967295
 80018d0:	697b      	ldr	r3, [r7, #20]
 80018d2:	fa01 f303 	lsl.w	r3, r1, r3
 80018d6:	43d9      	mvns	r1, r3
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80018dc:	4313      	orrs	r3, r2
         );
}
 80018de:	4618      	mov	r0, r3
 80018e0:	3724      	adds	r7, #36	; 0x24
 80018e2:	46bd      	mov	sp, r7
 80018e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018e8:	4770      	bx	lr

080018ea <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80018ea:	b580      	push	{r7, lr}
 80018ec:	b082      	sub	sp, #8
 80018ee:	af00      	add	r7, sp, #0
 80018f0:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80018f2:	6878      	ldr	r0, [r7, #4]
 80018f4:	f7ff ff4c 	bl	8001790 <__NVIC_SetPriorityGrouping>
}
 80018f8:	bf00      	nop
 80018fa:	3708      	adds	r7, #8
 80018fc:	46bd      	mov	sp, r7
 80018fe:	bd80      	pop	{r7, pc}

08001900 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001900:	b580      	push	{r7, lr}
 8001902:	b086      	sub	sp, #24
 8001904:	af00      	add	r7, sp, #0
 8001906:	4603      	mov	r3, r0
 8001908:	60b9      	str	r1, [r7, #8]
 800190a:	607a      	str	r2, [r7, #4]
 800190c:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800190e:	f7ff ff63 	bl	80017d8 <__NVIC_GetPriorityGrouping>
 8001912:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001914:	687a      	ldr	r2, [r7, #4]
 8001916:	68b9      	ldr	r1, [r7, #8]
 8001918:	6978      	ldr	r0, [r7, #20]
 800191a:	f7ff ffb3 	bl	8001884 <NVIC_EncodePriority>
 800191e:	4602      	mov	r2, r0
 8001920:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001924:	4611      	mov	r1, r2
 8001926:	4618      	mov	r0, r3
 8001928:	f7ff ff82 	bl	8001830 <__NVIC_SetPriority>
}
 800192c:	bf00      	nop
 800192e:	3718      	adds	r7, #24
 8001930:	46bd      	mov	sp, r7
 8001932:	bd80      	pop	{r7, pc}

08001934 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001934:	b580      	push	{r7, lr}
 8001936:	b082      	sub	sp, #8
 8001938:	af00      	add	r7, sp, #0
 800193a:	4603      	mov	r3, r0
 800193c:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800193e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001942:	4618      	mov	r0, r3
 8001944:	f7ff ff56 	bl	80017f4 <__NVIC_EnableIRQ>
}
 8001948:	bf00      	nop
 800194a:	3708      	adds	r7, #8
 800194c:	46bd      	mov	sp, r7
 800194e:	bd80      	pop	{r7, pc}

08001950 <HAL_FDCAN_Init>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
 8001950:	b580      	push	{r7, lr}
 8001952:	b098      	sub	sp, #96	; 0x60
 8001954:	af00      	add	r7, sp, #0
 8001956:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  const uint32_t CvtEltSize[] = {0, 0, 0, 0, 0, 1, 2, 3, 4, 0, 5, 0, 0, 0, 6, 0, 0, 0, 7};
 8001958:	4a84      	ldr	r2, [pc, #528]	; (8001b6c <HAL_FDCAN_Init+0x21c>)
 800195a:	f107 030c 	add.w	r3, r7, #12
 800195e:	4611      	mov	r1, r2
 8001960:	224c      	movs	r2, #76	; 0x4c
 8001962:	4618      	mov	r0, r3
 8001964:	f010 fd04 	bl	8012370 <memcpy>

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	2b00      	cmp	r3, #0
 800196c:	d101      	bne.n	8001972 <HAL_FDCAN_Init+0x22>
  {
    return HAL_ERROR;
 800196e:	2301      	movs	r3, #1
 8001970:	e1ca      	b.n	8001d08 <HAL_FDCAN_Init+0x3b8>
  }

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	681b      	ldr	r3, [r3, #0]
 8001976:	4a7e      	ldr	r2, [pc, #504]	; (8001b70 <HAL_FDCAN_Init+0x220>)
 8001978:	4293      	cmp	r3, r2
 800197a:	d106      	bne.n	800198a <HAL_FDCAN_Init+0x3a>
  {
    hfdcan->ttcan = (TTCAN_TypeDef *)((uint32_t)hfdcan->Instance + 0x100U);
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8001984:	461a      	mov	r2, r3
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	605a      	str	r2, [r3, #4]

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8001990:	b2db      	uxtb	r3, r3
 8001992:	2b00      	cmp	r3, #0
 8001994:	d106      	bne.n	80019a4 <HAL_FDCAN_Init+0x54>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	2200      	movs	r2, #0
 800199a:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99

    /* Init the low level hardware: CLOCK, NVIC */
    HAL_FDCAN_MspInit(hfdcan);
 800199e:	6878      	ldr	r0, [r7, #4]
 80019a0:	f7ff fa08 	bl	8000db4 <HAL_FDCAN_MspInit>
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	699a      	ldr	r2, [r3, #24]
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	f022 0210 	bic.w	r2, r2, #16
 80019b2:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 80019b4:	f7ff febc 	bl	8001730 <HAL_GetTick>
 80019b8:	65f8      	str	r0, [r7, #92]	; 0x5c

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 80019ba:	e014      	b.n	80019e6 <HAL_FDCAN_Init+0x96>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 80019bc:	f7ff feb8 	bl	8001730 <HAL_GetTick>
 80019c0:	4602      	mov	r2, r0
 80019c2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80019c4:	1ad3      	subs	r3, r2, r3
 80019c6:	2b0a      	cmp	r3, #10
 80019c8:	d90d      	bls.n	80019e6 <HAL_FDCAN_Init+0x96>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80019d0:	f043 0201 	orr.w	r2, r3, #1
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	2203      	movs	r2, #3
 80019de:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

      return HAL_ERROR;
 80019e2:	2301      	movs	r3, #1
 80019e4:	e190      	b.n	8001d08 <HAL_FDCAN_Init+0x3b8>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	699b      	ldr	r3, [r3, #24]
 80019ec:	f003 0308 	and.w	r3, r3, #8
 80019f0:	2b08      	cmp	r3, #8
 80019f2:	d0e3      	beq.n	80019bc <HAL_FDCAN_Init+0x6c>
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	699a      	ldr	r2, [r3, #24]
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	f042 0201 	orr.w	r2, r2, #1
 8001a02:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001a04:	f7ff fe94 	bl	8001730 <HAL_GetTick>
 8001a08:	65f8      	str	r0, [r7, #92]	; 0x5c

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8001a0a:	e014      	b.n	8001a36 <HAL_FDCAN_Init+0xe6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8001a0c:	f7ff fe90 	bl	8001730 <HAL_GetTick>
 8001a10:	4602      	mov	r2, r0
 8001a12:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001a14:	1ad3      	subs	r3, r2, r3
 8001a16:	2b0a      	cmp	r3, #10
 8001a18:	d90d      	bls.n	8001a36 <HAL_FDCAN_Init+0xe6>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8001a20:	f043 0201 	orr.w	r2, r3, #1
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	2203      	movs	r2, #3
 8001a2e:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

      return HAL_ERROR;
 8001a32:	2301      	movs	r3, #1
 8001a34:	e168      	b.n	8001d08 <HAL_FDCAN_Init+0x3b8>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	699b      	ldr	r3, [r3, #24]
 8001a3c:	f003 0301 	and.w	r3, r3, #1
 8001a40:	2b00      	cmp	r3, #0
 8001a42:	d0e3      	beq.n	8001a0c <HAL_FDCAN_Init+0xbc>
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	699a      	ldr	r2, [r3, #24]
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	f042 0202 	orr.w	r2, r2, #2
 8001a52:	619a      	str	r2, [r3, #24]

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	7c1b      	ldrb	r3, [r3, #16]
 8001a58:	2b01      	cmp	r3, #1
 8001a5a:	d108      	bne.n	8001a6e <HAL_FDCAN_Init+0x11e>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	699a      	ldr	r2, [r3, #24]
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001a6a:	619a      	str	r2, [r3, #24]
 8001a6c:	e007      	b.n	8001a7e <HAL_FDCAN_Init+0x12e>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	699a      	ldr	r2, [r3, #24]
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001a7c:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	7c5b      	ldrb	r3, [r3, #17]
 8001a82:	2b01      	cmp	r3, #1
 8001a84:	d108      	bne.n	8001a98 <HAL_FDCAN_Init+0x148>
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	699a      	ldr	r2, [r3, #24]
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001a94:	619a      	str	r2, [r3, #24]
 8001a96:	e007      	b.n	8001aa8 <HAL_FDCAN_Init+0x158>
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	699a      	ldr	r2, [r3, #24]
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8001aa6:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	7c9b      	ldrb	r3, [r3, #18]
 8001aac:	2b01      	cmp	r3, #1
 8001aae:	d108      	bne.n	8001ac2 <HAL_FDCAN_Init+0x172>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	699a      	ldr	r2, [r3, #24]
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8001abe:	619a      	str	r2, [r3, #24]
 8001ac0:	e007      	b.n	8001ad2 <HAL_FDCAN_Init+0x182>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	699a      	ldr	r2, [r3, #24]
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8001ad0:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	699b      	ldr	r3, [r3, #24]
 8001ad8:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	689a      	ldr	r2, [r3, #8]
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	430a      	orrs	r2, r1
 8001ae6:	619a      	str	r2, [r3, #24]

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	699a      	ldr	r2, [r3, #24]
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	f022 02a4 	bic.w	r2, r2, #164	; 0xa4
 8001af6:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	691a      	ldr	r2, [r3, #16]
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	f022 0210 	bic.w	r2, r2, #16
 8001b06:	611a      	str	r2, [r3, #16]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	68db      	ldr	r3, [r3, #12]
 8001b0c:	2b01      	cmp	r3, #1
 8001b0e:	d108      	bne.n	8001b22 <HAL_FDCAN_Init+0x1d2>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	699a      	ldr	r2, [r3, #24]
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	f042 0204 	orr.w	r2, r2, #4
 8001b1e:	619a      	str	r2, [r3, #24]
 8001b20:	e030      	b.n	8001b84 <HAL_FDCAN_Init+0x234>
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	68db      	ldr	r3, [r3, #12]
 8001b26:	2b00      	cmp	r3, #0
 8001b28:	d02c      	beq.n	8001b84 <HAL_FDCAN_Init+0x234>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	68db      	ldr	r3, [r3, #12]
 8001b2e:	2b02      	cmp	r3, #2
 8001b30:	d020      	beq.n	8001b74 <HAL_FDCAN_Init+0x224>
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	699a      	ldr	r2, [r3, #24]
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001b40:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	691a      	ldr	r2, [r3, #16]
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	f042 0210 	orr.w	r2, r2, #16
 8001b50:	611a      	str	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	68db      	ldr	r3, [r3, #12]
 8001b56:	2b03      	cmp	r3, #3
 8001b58:	d114      	bne.n	8001b84 <HAL_FDCAN_Init+0x234>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	699a      	ldr	r2, [r3, #24]
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	f042 0220 	orr.w	r2, r2, #32
 8001b68:	619a      	str	r2, [r3, #24]
 8001b6a:	e00b      	b.n	8001b84 <HAL_FDCAN_Init+0x234>
 8001b6c:	080123c0 	.word	0x080123c0
 8001b70:	4000a000 	.word	0x4000a000
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	699a      	ldr	r2, [r3, #24]
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	f042 0220 	orr.w	r2, r2, #32
 8001b82:	619a      	str	r2, [r3, #24]
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	699b      	ldr	r3, [r3, #24]
 8001b88:	3b01      	subs	r3, #1
 8001b8a:	065a      	lsls	r2, r3, #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	69db      	ldr	r3, [r3, #28]
 8001b90:	3b01      	subs	r3, #1
 8001b92:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8001b94:	431a      	orrs	r2, r3
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	6a1b      	ldr	r3, [r3, #32]
 8001b9a:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8001b9c:	ea42 0103 	orr.w	r1, r2, r3
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	695b      	ldr	r3, [r3, #20]
 8001ba4:	3b01      	subs	r3, #1
 8001ba6:	041a      	lsls	r2, r3, #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	681b      	ldr	r3, [r3, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8001bac:	430a      	orrs	r2, r1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8001bae:	61da      	str	r2, [r3, #28]

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	689b      	ldr	r3, [r3, #8]
 8001bb4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8001bb8:	d115      	bne.n	8001be6 <HAL_FDCAN_Init+0x296>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001bbe:	1e5a      	subs	r2, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)    | \
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001bc4:	3b01      	subs	r3, #1
 8001bc6:	021b      	lsls	r3, r3, #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 8001bc8:	431a      	orrs	r2, r3
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)    | \
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bce:	3b01      	subs	r3, #1
 8001bd0:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)    | \
 8001bd2:	ea42 0103 	orr.w	r1, r2, r3
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bda:	3b01      	subs	r3, #1
 8001bdc:	041a      	lsls	r2, r3, #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	681b      	ldr	r3, [r3, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)    | \
 8001be2:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 8001be4:	60da      	str	r2, [r3, #12]
  }

  if (hfdcan->Init.TxFifoQueueElmtsNbr > 0U)
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001bea:	2b00      	cmp	r3, #0
 8001bec:	d00a      	beq.n	8001c04 <HAL_FDCAN_Init+0x2b4>
  {
    /* Select between Tx FIFO and Tx Queue operation modes */
    SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	f8d3 10c0 	ldr.w	r1, [r3, #192]	; 0xc0
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	430a      	orrs	r2, r1
 8001c00:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
  }

  /* Configure Tx element size */
  if ((hfdcan->Init.TxBuffersNbr + hfdcan->Init.TxFifoQueueElmtsNbr) > 0U)
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001c0c:	4413      	add	r3, r2
 8001c0e:	2b00      	cmp	r3, #0
 8001c10:	d012      	beq.n	8001c38 <HAL_FDCAN_Init+0x2e8>
  {
    MODIFY_REG(hfdcan->Instance->TXESC, FDCAN_TXESC_TBDS, CvtEltSize[hfdcan->Init.TxElmtSize]);
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 8001c1a:	f023 0107 	bic.w	r1, r3, #7
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8001c22:	009b      	lsls	r3, r3, #2
 8001c24:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8001c28:	4413      	add	r3, r2
 8001c2a:	f853 2c54 	ldr.w	r2, [r3, #-84]
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	430a      	orrs	r2, r1
 8001c34:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  /* Configure Rx FIFO 0 element size */
  if (hfdcan->Init.RxFifo0ElmtsNbr > 0U)
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c3c:	2b00      	cmp	r3, #0
 8001c3e:	d012      	beq.n	8001c66 <HAL_FDCAN_Init+0x316>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_F0DS, (CvtEltSize[hfdcan->Init.RxFifo0ElmtSize] << FDCAN_RXESC_F0DS_Pos));
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8001c48:	f023 0107 	bic.w	r1, r3, #7
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c50:	009b      	lsls	r3, r3, #2
 8001c52:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8001c56:	4413      	add	r3, r2
 8001c58:	f853 2c54 	ldr.w	r2, [r3, #-84]
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	430a      	orrs	r2, r1
 8001c62:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  }

  /* Configure Rx FIFO 1 element size */
  if (hfdcan->Init.RxFifo1ElmtsNbr > 0U)
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001c6a:	2b00      	cmp	r3, #0
 8001c6c:	d013      	beq.n	8001c96 <HAL_FDCAN_Init+0x346>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_F1DS, (CvtEltSize[hfdcan->Init.RxFifo1ElmtSize] << FDCAN_RXESC_F1DS_Pos));
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8001c76:	f023 0170 	bic.w	r1, r3, #112	; 0x70
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c7e:	009b      	lsls	r3, r3, #2
 8001c80:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8001c84:	4413      	add	r3, r2
 8001c86:	f853 3c54 	ldr.w	r3, [r3, #-84]
 8001c8a:	011a      	lsls	r2, r3, #4
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	430a      	orrs	r2, r1
 8001c92:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  }

  /* Configure Rx buffer element size */
  if (hfdcan->Init.RxBuffersNbr > 0U)
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001c9a:	2b00      	cmp	r3, #0
 8001c9c:	d013      	beq.n	8001cc6 <HAL_FDCAN_Init+0x376>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_RBDS, (CvtEltSize[hfdcan->Init.RxBufferSize] << FDCAN_RXESC_RBDS_Pos));
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8001ca6:	f423 61e0 	bic.w	r1, r3, #1792	; 0x700
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001cae:	009b      	lsls	r3, r3, #2
 8001cb0:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8001cb4:	4413      	add	r3, r2
 8001cb6:	f853 3c54 	ldr.w	r3, [r3, #-84]
 8001cba:	021a      	lsls	r2, r3, #8
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	430a      	orrs	r2, r1
 8001cc2:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  }

  /* By default operation mode is set to Event-driven communication.
     If Time-triggered communication is needed, user should call the
     HAL_FDCAN_TT_ConfigOperation function just after the HAL_FDCAN_Init */
  if (hfdcan->Instance == FDCAN1)
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	4a11      	ldr	r2, [pc, #68]	; (8001d10 <HAL_FDCAN_Init+0x3c0>)
 8001ccc:	4293      	cmp	r3, r2
 8001cce:	d107      	bne.n	8001ce0 <HAL_FDCAN_Init+0x390>
  {
    CLEAR_BIT(hfdcan->ttcan->TTOCF, FDCAN_TTOCF_OM);
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	685b      	ldr	r3, [r3, #4]
 8001cd4:	689a      	ldr	r2, [r3, #8]
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	685b      	ldr	r3, [r3, #4]
 8001cda:	f022 0203 	bic.w	r2, r2, #3
 8001cde:	609a      	str	r2, [r3, #8]
  }

  /* Initialize the Latest Tx FIFO/Queue request buffer index */
  hfdcan->LatestTxFifoQRequest = 0U;
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	2200      	movs	r2, #0
 8001ce4:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

  /* Initialize the error code */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	2200      	movs	r2, #0
 8001cec:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	2201      	movs	r2, #1
 8001cf4:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

  /* Calculate each RAM block address */
  status = FDCAN_CalcultateRamBlockAddresses(hfdcan);
 8001cf8:	6878      	ldr	r0, [r7, #4]
 8001cfa:	f000 f80b 	bl	8001d14 <FDCAN_CalcultateRamBlockAddresses>
 8001cfe:	4603      	mov	r3, r0
 8001d00:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b

  /* Return function status */
  return status;
 8001d04:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
}
 8001d08:	4618      	mov	r0, r3
 8001d0a:	3760      	adds	r7, #96	; 0x60
 8001d0c:	46bd      	mov	sp, r7
 8001d0e:	bd80      	pop	{r7, pc}
 8001d10:	4000a000 	.word	0x4000a000

08001d14 <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
 */
static HAL_StatusTypeDef FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 8001d14:	b480      	push	{r7}
 8001d16:	b085      	sub	sp, #20
 8001d18:	af00      	add	r7, sp, #0
 8001d1a:	6078      	str	r0, [r7, #4]
  uint32_t RAMcounter;
  uint32_t StartAddress;

  StartAddress = hfdcan->Init.MessageRAMOffset;
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001d20:	60bb      	str	r3, [r7, #8]

  /* Standard filter list start address */
  MODIFY_REG(hfdcan->Instance->SIDFC, FDCAN_SIDFC_FLSSA, (StartAddress << FDCAN_SIDFC_FLSSA_Pos));
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 8001d2a:	4ba7      	ldr	r3, [pc, #668]	; (8001fc8 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8001d2c:	4013      	ands	r3, r2
 8001d2e:	68ba      	ldr	r2, [r7, #8]
 8001d30:	0091      	lsls	r1, r2, #2
 8001d32:	687a      	ldr	r2, [r7, #4]
 8001d34:	6812      	ldr	r2, [r2, #0]
 8001d36:	430b      	orrs	r3, r1
 8001d38:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->SIDFC, FDCAN_SIDFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_SIDFC_LSS_Pos));
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001d44:	f423 017f 	bic.w	r1, r3, #16711680	; 0xff0000
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001d4c:	041a      	lsls	r2, r3, #16
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	430a      	orrs	r2, r1
 8001d54:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Extended filter list start address */
  StartAddress += hfdcan->Init.StdFiltersNbr;
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001d5c:	68ba      	ldr	r2, [r7, #8]
 8001d5e:	4413      	add	r3, r2
 8001d60:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->XIDFC, FDCAN_XIDFC_FLESA, (StartAddress << FDCAN_XIDFC_FLESA_Pos));
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8001d6a:	4b97      	ldr	r3, [pc, #604]	; (8001fc8 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8001d6c:	4013      	ands	r3, r2
 8001d6e:	68ba      	ldr	r2, [r7, #8]
 8001d70:	0091      	lsls	r1, r2, #2
 8001d72:	687a      	ldr	r2, [r7, #4]
 8001d74:	6812      	ldr	r2, [r2, #0]
 8001d76:	430b      	orrs	r3, r1
 8001d78:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->XIDFC, FDCAN_XIDFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_XIDFC_LSE_Pos));
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001d84:	f423 01fe 	bic.w	r1, r3, #8323072	; 0x7f0000
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001d8c:	041a      	lsls	r2, r3, #16
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	430a      	orrs	r2, r1
 8001d94:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Rx FIFO 0 start address */
  StartAddress += (hfdcan->Init.ExtFiltersNbr * 2U);
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001d9c:	005b      	lsls	r3, r3, #1
 8001d9e:	68ba      	ldr	r2, [r7, #8]
 8001da0:	4413      	add	r3, r2
 8001da2:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXF0C, FDCAN_RXF0C_F0SA, (StartAddress << FDCAN_RXF0C_F0SA_Pos));
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 8001dac:	4b86      	ldr	r3, [pc, #536]	; (8001fc8 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8001dae:	4013      	ands	r3, r2
 8001db0:	68ba      	ldr	r2, [r7, #8]
 8001db2:	0091      	lsls	r1, r2, #2
 8001db4:	687a      	ldr	r2, [r7, #4]
 8001db6:	6812      	ldr	r2, [r2, #0]
 8001db8:	430b      	orrs	r3, r1
 8001dba:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0

  /* Rx FIFO 0 elements number */
  MODIFY_REG(hfdcan->Instance->RXF0C, FDCAN_RXF0C_F0S, (hfdcan->Init.RxFifo0ElmtsNbr << FDCAN_RXF0C_F0S_Pos));
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8001dc6:	f423 01fe 	bic.w	r1, r3, #8323072	; 0x7f0000
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dce:	041a      	lsls	r2, r3, #16
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	430a      	orrs	r2, r1
 8001dd6:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0

  /* Rx FIFO 1 start address */
  StartAddress += (hfdcan->Init.RxFifo0ElmtsNbr * hfdcan->Init.RxFifo0ElmtSize);
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dde:	687a      	ldr	r2, [r7, #4]
 8001de0:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8001de2:	fb02 f303 	mul.w	r3, r2, r3
 8001de6:	68ba      	ldr	r2, [r7, #8]
 8001de8:	4413      	add	r3, r2
 8001dea:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXF1C, FDCAN_RXF1C_F1SA, (StartAddress << FDCAN_RXF1C_F1SA_Pos));
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8001df4:	4b74      	ldr	r3, [pc, #464]	; (8001fc8 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8001df6:	4013      	ands	r3, r2
 8001df8:	68ba      	ldr	r2, [r7, #8]
 8001dfa:	0091      	lsls	r1, r2, #2
 8001dfc:	687a      	ldr	r2, [r7, #4]
 8001dfe:	6812      	ldr	r2, [r2, #0]
 8001e00:	430b      	orrs	r3, r1
 8001e02:	f8c2 30b0 	str.w	r3, [r2, #176]	; 0xb0

  /* Rx FIFO 1 elements number */
  MODIFY_REG(hfdcan->Instance->RXF1C, FDCAN_RXF1C_F1S, (hfdcan->Init.RxFifo1ElmtsNbr << FDCAN_RXF1C_F1S_Pos));
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8001e0e:	f423 01fe 	bic.w	r1, r3, #8323072	; 0x7f0000
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001e16:	041a      	lsls	r2, r3, #16
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	430a      	orrs	r2, r1
 8001e1e:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0

  /* Rx buffer list start address */
  StartAddress += (hfdcan->Init.RxFifo1ElmtsNbr * hfdcan->Init.RxFifo1ElmtSize);
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001e26:	687a      	ldr	r2, [r7, #4]
 8001e28:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8001e2a:	fb02 f303 	mul.w	r3, r2, r3
 8001e2e:	68ba      	ldr	r2, [r7, #8]
 8001e30:	4413      	add	r3, r2
 8001e32:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXBC, FDCAN_RXBC_RBSA, (StartAddress << FDCAN_RXBC_RBSA_Pos));
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	f8d3 20ac 	ldr.w	r2, [r3, #172]	; 0xac
 8001e3c:	4b62      	ldr	r3, [pc, #392]	; (8001fc8 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8001e3e:	4013      	ands	r3, r2
 8001e40:	68ba      	ldr	r2, [r7, #8]
 8001e42:	0091      	lsls	r1, r2, #2
 8001e44:	687a      	ldr	r2, [r7, #4]
 8001e46:	6812      	ldr	r2, [r2, #0]
 8001e48:	430b      	orrs	r3, r1
 8001e4a:	f8c2 30ac 	str.w	r3, [r2, #172]	; 0xac

  /* Tx event FIFO start address */
  StartAddress += (hfdcan->Init.RxBuffersNbr * hfdcan->Init.RxBufferSize);
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001e52:	687a      	ldr	r2, [r7, #4]
 8001e54:	6d52      	ldr	r2, [r2, #84]	; 0x54
 8001e56:	fb02 f303 	mul.w	r3, r2, r3
 8001e5a:	68ba      	ldr	r2, [r7, #8]
 8001e5c:	4413      	add	r3, r2
 8001e5e:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->TXEFC, FDCAN_TXEFC_EFSA, (StartAddress << FDCAN_TXEFC_EFSA_Pos));
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	f8d3 20f0 	ldr.w	r2, [r3, #240]	; 0xf0
 8001e68:	4b57      	ldr	r3, [pc, #348]	; (8001fc8 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8001e6a:	4013      	ands	r3, r2
 8001e6c:	68ba      	ldr	r2, [r7, #8]
 8001e6e:	0091      	lsls	r1, r2, #2
 8001e70:	687a      	ldr	r2, [r7, #4]
 8001e72:	6812      	ldr	r2, [r2, #0]
 8001e74:	430b      	orrs	r3, r1
 8001e76:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

  /* Tx event FIFO elements number */
  MODIFY_REG(hfdcan->Instance->TXEFC, FDCAN_TXEFC_EFS, (hfdcan->Init.TxEventsNbr << FDCAN_TXEFC_EFS_Pos));
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001e82:	f423 117c 	bic.w	r1, r3, #4128768	; 0x3f0000
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e8a:	041a      	lsls	r2, r3, #16
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	430a      	orrs	r2, r1
 8001e92:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0

  /* Tx buffer list start address */
  StartAddress += (hfdcan->Init.TxEventsNbr * 2U);
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e9a:	005b      	lsls	r3, r3, #1
 8001e9c:	68ba      	ldr	r2, [r7, #8]
 8001e9e:	4413      	add	r3, r2
 8001ea0:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_TBSA, (StartAddress << FDCAN_TXBC_TBSA_Pos));
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 8001eaa:	4b47      	ldr	r3, [pc, #284]	; (8001fc8 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8001eac:	4013      	ands	r3, r2
 8001eae:	68ba      	ldr	r2, [r7, #8]
 8001eb0:	0091      	lsls	r1, r2, #2
 8001eb2:	687a      	ldr	r2, [r7, #4]
 8001eb4:	6812      	ldr	r2, [r2, #0]
 8001eb6:	430b      	orrs	r3, r1
 8001eb8:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0

  /* Dedicated Tx buffers number */
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_NDTB, (hfdcan->Init.TxBuffersNbr << FDCAN_TXBC_NDTB_Pos));
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8001ec4:	f423 117c 	bic.w	r1, r3, #4128768	; 0x3f0000
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001ecc:	041a      	lsls	r2, r3, #16
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	430a      	orrs	r2, r1
 8001ed4:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0

  /* Tx FIFO/queue elements number */
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_TFQS, (hfdcan->Init.TxFifoQueueElmtsNbr << FDCAN_TXBC_TFQS_Pos));
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8001ee0:	f023 517c 	bic.w	r1, r3, #1056964608	; 0x3f000000
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001ee8:	061a      	lsls	r2, r3, #24
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	430a      	orrs	r2, r1
 8001ef0:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0

  hfdcan->msgRam.StandardFilterSA = SRAMCAN_BASE + (hfdcan->Init.MessageRAMOffset * 4U);
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001ef8:	4b34      	ldr	r3, [pc, #208]	; (8001fcc <FDCAN_CalcultateRamBlockAddresses+0x2b8>)
 8001efa:	4413      	add	r3, r2
 8001efc:	009a      	lsls	r2, r3, #2
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	66da      	str	r2, [r3, #108]	; 0x6c
  hfdcan->msgRam.ExtendedFilterSA = hfdcan->msgRam.StandardFilterSA + (hfdcan->Init.StdFiltersNbr * 4U);
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001f0a:	009b      	lsls	r3, r3, #2
 8001f0c:	441a      	add	r2, r3
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	671a      	str	r2, [r3, #112]	; 0x70
  hfdcan->msgRam.RxFIFO0SA = hfdcan->msgRam.ExtendedFilterSA + (hfdcan->Init.ExtFiltersNbr * 2U * 4U);
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001f1a:	00db      	lsls	r3, r3, #3
 8001f1c:	441a      	add	r2, r3
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	675a      	str	r2, [r3, #116]	; 0x74
  hfdcan->msgRam.RxFIFO1SA = hfdcan->msgRam.RxFIFO0SA + (hfdcan->Init.RxFifo0ElmtsNbr * hfdcan->Init.RxFifo0ElmtSize * 4U);
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f2a:	6879      	ldr	r1, [r7, #4]
 8001f2c:	6c49      	ldr	r1, [r1, #68]	; 0x44
 8001f2e:	fb01 f303 	mul.w	r3, r1, r3
 8001f32:	009b      	lsls	r3, r3, #2
 8001f34:	441a      	add	r2, r3
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	679a      	str	r2, [r3, #120]	; 0x78
  hfdcan->msgRam.RxBufferSA = hfdcan->msgRam.RxFIFO1SA + (hfdcan->Init.RxFifo1ElmtsNbr * hfdcan->Init.RxFifo1ElmtSize * 4U);
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	6f9a      	ldr	r2, [r3, #120]	; 0x78
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001f42:	6879      	ldr	r1, [r7, #4]
 8001f44:	6cc9      	ldr	r1, [r1, #76]	; 0x4c
 8001f46:	fb01 f303 	mul.w	r3, r1, r3
 8001f4a:	009b      	lsls	r3, r3, #2
 8001f4c:	441a      	add	r2, r3
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	67da      	str	r2, [r3, #124]	; 0x7c
  hfdcan->msgRam.TxEventFIFOSA = hfdcan->msgRam.RxBufferSA + (hfdcan->Init.RxBuffersNbr * hfdcan->Init.RxBufferSize * 4U);
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001f5a:	6879      	ldr	r1, [r7, #4]
 8001f5c:	6d49      	ldr	r1, [r1, #84]	; 0x54
 8001f5e:	fb01 f303 	mul.w	r3, r1, r3
 8001f62:	009b      	lsls	r3, r3, #2
 8001f64:	441a      	add	r2, r3
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  hfdcan->msgRam.TxBufferSA = hfdcan->msgRam.TxEventFIFOSA + (hfdcan->Init.TxEventsNbr * 2U * 4U);
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f76:	00db      	lsls	r3, r3, #3
 8001f78:	441a      	add	r2, r3
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hfdcan->msgRam.TxFIFOQSA = hfdcan->msgRam.TxBufferSA + (hfdcan->Init.TxBuffersNbr * hfdcan->Init.TxElmtSize * 4U);
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f8a:	6879      	ldr	r1, [r7, #4]
 8001f8c:	6e89      	ldr	r1, [r1, #104]	; 0x68
 8001f8e:	fb01 f303 	mul.w	r3, r1, r3
 8001f92:	009b      	lsls	r3, r3, #2
 8001f94:	441a      	add	r2, r3
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  hfdcan->msgRam.EndAddress = hfdcan->msgRam.TxFIFOQSA + (hfdcan->Init.TxFifoQueueElmtsNbr * hfdcan->Init.TxElmtSize * 4U);
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001fa6:	6879      	ldr	r1, [r7, #4]
 8001fa8:	6e89      	ldr	r1, [r1, #104]	; 0x68
 8001faa:	fb01 f303 	mul.w	r3, r1, r3
 8001fae:	009b      	lsls	r3, r3, #2
 8001fb0:	441a      	add	r2, r3
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  if (hfdcan->msgRam.EndAddress > FDCAN_MESSAGE_RAM_END_ADDRESS) /* Last address of the Message RAM */
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001fbe:	4a04      	ldr	r2, [pc, #16]	; (8001fd0 <FDCAN_CalcultateRamBlockAddresses+0x2bc>)
 8001fc0:	4293      	cmp	r3, r2
 8001fc2:	d915      	bls.n	8001ff0 <FDCAN_CalcultateRamBlockAddresses+0x2dc>
 8001fc4:	e006      	b.n	8001fd4 <FDCAN_CalcultateRamBlockAddresses+0x2c0>
 8001fc6:	bf00      	nop
 8001fc8:	ffff0003 	.word	0xffff0003
 8001fcc:	10002b00 	.word	0x10002b00
 8001fd0:	4000d3fc 	.word	0x4000d3fc
  {
    /* Update error code.
       Message RAM overflow */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8001fda:	f043 0220 	orr.w	r2, r3, #32
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    /* Change FDCAN state */
    hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	2203      	movs	r2, #3
 8001fe8:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

    return HAL_ERROR;
 8001fec:	2301      	movs	r3, #1
 8001fee:	e010      	b.n	8002012 <FDCAN_CalcultateRamBlockAddresses+0x2fe>
  }
  else
  {
    /* Flush the allocated Message RAM area */
    for (RAMcounter = hfdcan->msgRam.StandardFilterSA; RAMcounter < hfdcan->msgRam.EndAddress; RAMcounter += 4U)
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001ff4:	60fb      	str	r3, [r7, #12]
 8001ff6:	e005      	b.n	8002004 <FDCAN_CalcultateRamBlockAddresses+0x2f0>
    {
      *(uint32_t *)(RAMcounter) = 0x00000000;
 8001ff8:	68fb      	ldr	r3, [r7, #12]
 8001ffa:	2200      	movs	r2, #0
 8001ffc:	601a      	str	r2, [r3, #0]
    for (RAMcounter = hfdcan->msgRam.StandardFilterSA; RAMcounter < hfdcan->msgRam.EndAddress; RAMcounter += 4U)
 8001ffe:	68fb      	ldr	r3, [r7, #12]
 8002000:	3304      	adds	r3, #4
 8002002:	60fb      	str	r3, [r7, #12]
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800200a:	68fa      	ldr	r2, [r7, #12]
 800200c:	429a      	cmp	r2, r3
 800200e:	d3f3      	bcc.n	8001ff8 <FDCAN_CalcultateRamBlockAddresses+0x2e4>
    }
  }

  /* Return function status */
  return HAL_OK;
 8002010:	2300      	movs	r3, #0
}
 8002012:	4618      	mov	r0, r3
 8002014:	3714      	adds	r7, #20
 8002016:	46bd      	mov	sp, r7
 8002018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800201c:	4770      	bx	lr
 800201e:	bf00      	nop

08002020 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002020:	b480      	push	{r7}
 8002022:	b089      	sub	sp, #36	; 0x24
 8002024:	af00      	add	r7, sp, #0
 8002026:	6078      	str	r0, [r7, #4]
 8002028:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800202a:	2300      	movs	r3, #0
 800202c:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 800202e:	4b86      	ldr	r3, [pc, #536]	; (8002248 <HAL_GPIO_Init+0x228>)
 8002030:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8002032:	e18c      	b.n	800234e <HAL_GPIO_Init+0x32e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8002034:	683b      	ldr	r3, [r7, #0]
 8002036:	681a      	ldr	r2, [r3, #0]
 8002038:	2101      	movs	r1, #1
 800203a:	69fb      	ldr	r3, [r7, #28]
 800203c:	fa01 f303 	lsl.w	r3, r1, r3
 8002040:	4013      	ands	r3, r2
 8002042:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8002044:	693b      	ldr	r3, [r7, #16]
 8002046:	2b00      	cmp	r3, #0
 8002048:	f000 817e 	beq.w	8002348 <HAL_GPIO_Init+0x328>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800204c:	683b      	ldr	r3, [r7, #0]
 800204e:	685b      	ldr	r3, [r3, #4]
 8002050:	2b01      	cmp	r3, #1
 8002052:	d00b      	beq.n	800206c <HAL_GPIO_Init+0x4c>
 8002054:	683b      	ldr	r3, [r7, #0]
 8002056:	685b      	ldr	r3, [r3, #4]
 8002058:	2b02      	cmp	r3, #2
 800205a:	d007      	beq.n	800206c <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800205c:	683b      	ldr	r3, [r7, #0]
 800205e:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002060:	2b11      	cmp	r3, #17
 8002062:	d003      	beq.n	800206c <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002064:	683b      	ldr	r3, [r7, #0]
 8002066:	685b      	ldr	r3, [r3, #4]
 8002068:	2b12      	cmp	r3, #18
 800206a:	d130      	bne.n	80020ce <HAL_GPIO_Init+0xae>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	689b      	ldr	r3, [r3, #8]
 8002070:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8002072:	69fb      	ldr	r3, [r7, #28]
 8002074:	005b      	lsls	r3, r3, #1
 8002076:	2203      	movs	r2, #3
 8002078:	fa02 f303 	lsl.w	r3, r2, r3
 800207c:	43db      	mvns	r3, r3
 800207e:	69ba      	ldr	r2, [r7, #24]
 8002080:	4013      	ands	r3, r2
 8002082:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002084:	683b      	ldr	r3, [r7, #0]
 8002086:	68da      	ldr	r2, [r3, #12]
 8002088:	69fb      	ldr	r3, [r7, #28]
 800208a:	005b      	lsls	r3, r3, #1
 800208c:	fa02 f303 	lsl.w	r3, r2, r3
 8002090:	69ba      	ldr	r2, [r7, #24]
 8002092:	4313      	orrs	r3, r2
 8002094:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	69ba      	ldr	r2, [r7, #24]
 800209a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	685b      	ldr	r3, [r3, #4]
 80020a0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80020a2:	2201      	movs	r2, #1
 80020a4:	69fb      	ldr	r3, [r7, #28]
 80020a6:	fa02 f303 	lsl.w	r3, r2, r3
 80020aa:	43db      	mvns	r3, r3
 80020ac:	69ba      	ldr	r2, [r7, #24]
 80020ae:	4013      	ands	r3, r2
 80020b0:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80020b2:	683b      	ldr	r3, [r7, #0]
 80020b4:	685b      	ldr	r3, [r3, #4]
 80020b6:	091b      	lsrs	r3, r3, #4
 80020b8:	f003 0201 	and.w	r2, r3, #1
 80020bc:	69fb      	ldr	r3, [r7, #28]
 80020be:	fa02 f303 	lsl.w	r3, r2, r3
 80020c2:	69ba      	ldr	r2, [r7, #24]
 80020c4:	4313      	orrs	r3, r2
 80020c6:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	69ba      	ldr	r2, [r7, #24]
 80020cc:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	68db      	ldr	r3, [r3, #12]
 80020d2:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80020d4:	69fb      	ldr	r3, [r7, #28]
 80020d6:	005b      	lsls	r3, r3, #1
 80020d8:	2203      	movs	r2, #3
 80020da:	fa02 f303 	lsl.w	r3, r2, r3
 80020de:	43db      	mvns	r3, r3
 80020e0:	69ba      	ldr	r2, [r7, #24]
 80020e2:	4013      	ands	r3, r2
 80020e4:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80020e6:	683b      	ldr	r3, [r7, #0]
 80020e8:	689a      	ldr	r2, [r3, #8]
 80020ea:	69fb      	ldr	r3, [r7, #28]
 80020ec:	005b      	lsls	r3, r3, #1
 80020ee:	fa02 f303 	lsl.w	r3, r2, r3
 80020f2:	69ba      	ldr	r2, [r7, #24]
 80020f4:	4313      	orrs	r3, r2
 80020f6:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	69ba      	ldr	r2, [r7, #24]
 80020fc:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80020fe:	683b      	ldr	r3, [r7, #0]
 8002100:	685b      	ldr	r3, [r3, #4]
 8002102:	2b02      	cmp	r3, #2
 8002104:	d003      	beq.n	800210e <HAL_GPIO_Init+0xee>
 8002106:	683b      	ldr	r3, [r7, #0]
 8002108:	685b      	ldr	r3, [r3, #4]
 800210a:	2b12      	cmp	r3, #18
 800210c:	d123      	bne.n	8002156 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800210e:	69fb      	ldr	r3, [r7, #28]
 8002110:	08da      	lsrs	r2, r3, #3
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	3208      	adds	r2, #8
 8002116:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800211a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 800211c:	69fb      	ldr	r3, [r7, #28]
 800211e:	f003 0307 	and.w	r3, r3, #7
 8002122:	009b      	lsls	r3, r3, #2
 8002124:	220f      	movs	r2, #15
 8002126:	fa02 f303 	lsl.w	r3, r2, r3
 800212a:	43db      	mvns	r3, r3
 800212c:	69ba      	ldr	r2, [r7, #24]
 800212e:	4013      	ands	r3, r2
 8002130:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8002132:	683b      	ldr	r3, [r7, #0]
 8002134:	691a      	ldr	r2, [r3, #16]
 8002136:	69fb      	ldr	r3, [r7, #28]
 8002138:	f003 0307 	and.w	r3, r3, #7
 800213c:	009b      	lsls	r3, r3, #2
 800213e:	fa02 f303 	lsl.w	r3, r2, r3
 8002142:	69ba      	ldr	r2, [r7, #24]
 8002144:	4313      	orrs	r3, r2
 8002146:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002148:	69fb      	ldr	r3, [r7, #28]
 800214a:	08da      	lsrs	r2, r3, #3
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	3208      	adds	r2, #8
 8002150:	69b9      	ldr	r1, [r7, #24]
 8002152:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800215c:	69fb      	ldr	r3, [r7, #28]
 800215e:	005b      	lsls	r3, r3, #1
 8002160:	2203      	movs	r2, #3
 8002162:	fa02 f303 	lsl.w	r3, r2, r3
 8002166:	43db      	mvns	r3, r3
 8002168:	69ba      	ldr	r2, [r7, #24]
 800216a:	4013      	ands	r3, r2
 800216c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800216e:	683b      	ldr	r3, [r7, #0]
 8002170:	685b      	ldr	r3, [r3, #4]
 8002172:	f003 0203 	and.w	r2, r3, #3
 8002176:	69fb      	ldr	r3, [r7, #28]
 8002178:	005b      	lsls	r3, r3, #1
 800217a:	fa02 f303 	lsl.w	r3, r2, r3
 800217e:	69ba      	ldr	r2, [r7, #24]
 8002180:	4313      	orrs	r3, r2
 8002182:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	69ba      	ldr	r2, [r7, #24]
 8002188:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800218a:	683b      	ldr	r3, [r7, #0]
 800218c:	685b      	ldr	r3, [r3, #4]
 800218e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002192:	2b00      	cmp	r3, #0
 8002194:	f000 80d8 	beq.w	8002348 <HAL_GPIO_Init+0x328>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002198:	4b2c      	ldr	r3, [pc, #176]	; (800224c <HAL_GPIO_Init+0x22c>)
 800219a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800219e:	4a2b      	ldr	r2, [pc, #172]	; (800224c <HAL_GPIO_Init+0x22c>)
 80021a0:	f043 0302 	orr.w	r3, r3, #2
 80021a4:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 80021a8:	4b28      	ldr	r3, [pc, #160]	; (800224c <HAL_GPIO_Init+0x22c>)
 80021aa:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80021ae:	f003 0302 	and.w	r3, r3, #2
 80021b2:	60fb      	str	r3, [r7, #12]
 80021b4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80021b6:	4a26      	ldr	r2, [pc, #152]	; (8002250 <HAL_GPIO_Init+0x230>)
 80021b8:	69fb      	ldr	r3, [r7, #28]
 80021ba:	089b      	lsrs	r3, r3, #2
 80021bc:	3302      	adds	r3, #2
 80021be:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80021c2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80021c4:	69fb      	ldr	r3, [r7, #28]
 80021c6:	f003 0303 	and.w	r3, r3, #3
 80021ca:	009b      	lsls	r3, r3, #2
 80021cc:	220f      	movs	r2, #15
 80021ce:	fa02 f303 	lsl.w	r3, r2, r3
 80021d2:	43db      	mvns	r3, r3
 80021d4:	69ba      	ldr	r2, [r7, #24]
 80021d6:	4013      	ands	r3, r2
 80021d8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	4a1d      	ldr	r2, [pc, #116]	; (8002254 <HAL_GPIO_Init+0x234>)
 80021de:	4293      	cmp	r3, r2
 80021e0:	d04a      	beq.n	8002278 <HAL_GPIO_Init+0x258>
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	4a1c      	ldr	r2, [pc, #112]	; (8002258 <HAL_GPIO_Init+0x238>)
 80021e6:	4293      	cmp	r3, r2
 80021e8:	d02b      	beq.n	8002242 <HAL_GPIO_Init+0x222>
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	4a1b      	ldr	r2, [pc, #108]	; (800225c <HAL_GPIO_Init+0x23c>)
 80021ee:	4293      	cmp	r3, r2
 80021f0:	d025      	beq.n	800223e <HAL_GPIO_Init+0x21e>
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	4a1a      	ldr	r2, [pc, #104]	; (8002260 <HAL_GPIO_Init+0x240>)
 80021f6:	4293      	cmp	r3, r2
 80021f8:	d01f      	beq.n	800223a <HAL_GPIO_Init+0x21a>
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	4a19      	ldr	r2, [pc, #100]	; (8002264 <HAL_GPIO_Init+0x244>)
 80021fe:	4293      	cmp	r3, r2
 8002200:	d019      	beq.n	8002236 <HAL_GPIO_Init+0x216>
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	4a18      	ldr	r2, [pc, #96]	; (8002268 <HAL_GPIO_Init+0x248>)
 8002206:	4293      	cmp	r3, r2
 8002208:	d013      	beq.n	8002232 <HAL_GPIO_Init+0x212>
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	4a17      	ldr	r2, [pc, #92]	; (800226c <HAL_GPIO_Init+0x24c>)
 800220e:	4293      	cmp	r3, r2
 8002210:	d00d      	beq.n	800222e <HAL_GPIO_Init+0x20e>
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	4a16      	ldr	r2, [pc, #88]	; (8002270 <HAL_GPIO_Init+0x250>)
 8002216:	4293      	cmp	r3, r2
 8002218:	d007      	beq.n	800222a <HAL_GPIO_Init+0x20a>
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	4a15      	ldr	r2, [pc, #84]	; (8002274 <HAL_GPIO_Init+0x254>)
 800221e:	4293      	cmp	r3, r2
 8002220:	d101      	bne.n	8002226 <HAL_GPIO_Init+0x206>
 8002222:	2309      	movs	r3, #9
 8002224:	e029      	b.n	800227a <HAL_GPIO_Init+0x25a>
 8002226:	230a      	movs	r3, #10
 8002228:	e027      	b.n	800227a <HAL_GPIO_Init+0x25a>
 800222a:	2307      	movs	r3, #7
 800222c:	e025      	b.n	800227a <HAL_GPIO_Init+0x25a>
 800222e:	2306      	movs	r3, #6
 8002230:	e023      	b.n	800227a <HAL_GPIO_Init+0x25a>
 8002232:	2305      	movs	r3, #5
 8002234:	e021      	b.n	800227a <HAL_GPIO_Init+0x25a>
 8002236:	2304      	movs	r3, #4
 8002238:	e01f      	b.n	800227a <HAL_GPIO_Init+0x25a>
 800223a:	2303      	movs	r3, #3
 800223c:	e01d      	b.n	800227a <HAL_GPIO_Init+0x25a>
 800223e:	2302      	movs	r3, #2
 8002240:	e01b      	b.n	800227a <HAL_GPIO_Init+0x25a>
 8002242:	2301      	movs	r3, #1
 8002244:	e019      	b.n	800227a <HAL_GPIO_Init+0x25a>
 8002246:	bf00      	nop
 8002248:	58000080 	.word	0x58000080
 800224c:	58024400 	.word	0x58024400
 8002250:	58000400 	.word	0x58000400
 8002254:	58020000 	.word	0x58020000
 8002258:	58020400 	.word	0x58020400
 800225c:	58020800 	.word	0x58020800
 8002260:	58020c00 	.word	0x58020c00
 8002264:	58021000 	.word	0x58021000
 8002268:	58021400 	.word	0x58021400
 800226c:	58021800 	.word	0x58021800
 8002270:	58021c00 	.word	0x58021c00
 8002274:	58022400 	.word	0x58022400
 8002278:	2300      	movs	r3, #0
 800227a:	69fa      	ldr	r2, [r7, #28]
 800227c:	f002 0203 	and.w	r2, r2, #3
 8002280:	0092      	lsls	r2, r2, #2
 8002282:	4093      	lsls	r3, r2
 8002284:	69ba      	ldr	r2, [r7, #24]
 8002286:	4313      	orrs	r3, r2
 8002288:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800228a:	4938      	ldr	r1, [pc, #224]	; (800236c <HAL_GPIO_Init+0x34c>)
 800228c:	69fb      	ldr	r3, [r7, #28]
 800228e:	089b      	lsrs	r3, r3, #2
 8002290:	3302      	adds	r3, #2
 8002292:	69ba      	ldr	r2, [r7, #24]
 8002294:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8002298:	697b      	ldr	r3, [r7, #20]
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800229e:	693b      	ldr	r3, [r7, #16]
 80022a0:	43db      	mvns	r3, r3
 80022a2:	69ba      	ldr	r2, [r7, #24]
 80022a4:	4013      	ands	r3, r2
 80022a6:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80022a8:	683b      	ldr	r3, [r7, #0]
 80022aa:	685b      	ldr	r3, [r3, #4]
 80022ac:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80022b0:	2b00      	cmp	r3, #0
 80022b2:	d003      	beq.n	80022bc <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 80022b4:	69ba      	ldr	r2, [r7, #24]
 80022b6:	693b      	ldr	r3, [r7, #16]
 80022b8:	4313      	orrs	r3, r2
 80022ba:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 80022bc:	697b      	ldr	r3, [r7, #20]
 80022be:	69ba      	ldr	r2, [r7, #24]
 80022c0:	601a      	str	r2, [r3, #0]

        temp = EXTI_CurrentCPU->EMR1;
 80022c2:	697b      	ldr	r3, [r7, #20]
 80022c4:	685b      	ldr	r3, [r3, #4]
 80022c6:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80022c8:	693b      	ldr	r3, [r7, #16]
 80022ca:	43db      	mvns	r3, r3
 80022cc:	69ba      	ldr	r2, [r7, #24]
 80022ce:	4013      	ands	r3, r2
 80022d0:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80022d2:	683b      	ldr	r3, [r7, #0]
 80022d4:	685b      	ldr	r3, [r3, #4]
 80022d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80022da:	2b00      	cmp	r3, #0
 80022dc:	d003      	beq.n	80022e6 <HAL_GPIO_Init+0x2c6>
        {
          temp |= iocurrent;
 80022de:	69ba      	ldr	r2, [r7, #24]
 80022e0:	693b      	ldr	r3, [r7, #16]
 80022e2:	4313      	orrs	r3, r2
 80022e4:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 80022e6:	697b      	ldr	r3, [r7, #20]
 80022e8:	69ba      	ldr	r2, [r7, #24]
 80022ea:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80022ec:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80022f4:	693b      	ldr	r3, [r7, #16]
 80022f6:	43db      	mvns	r3, r3
 80022f8:	69ba      	ldr	r2, [r7, #24]
 80022fa:	4013      	ands	r3, r2
 80022fc:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80022fe:	683b      	ldr	r3, [r7, #0]
 8002300:	685b      	ldr	r3, [r3, #4]
 8002302:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002306:	2b00      	cmp	r3, #0
 8002308:	d003      	beq.n	8002312 <HAL_GPIO_Init+0x2f2>
        {
          temp |= iocurrent;
 800230a:	69ba      	ldr	r2, [r7, #24]
 800230c:	693b      	ldr	r3, [r7, #16]
 800230e:	4313      	orrs	r3, r2
 8002310:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8002312:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002316:	69bb      	ldr	r3, [r7, #24]
 8002318:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 800231a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800231e:	685b      	ldr	r3, [r3, #4]
 8002320:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002322:	693b      	ldr	r3, [r7, #16]
 8002324:	43db      	mvns	r3, r3
 8002326:	69ba      	ldr	r2, [r7, #24]
 8002328:	4013      	ands	r3, r2
 800232a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800232c:	683b      	ldr	r3, [r7, #0]
 800232e:	685b      	ldr	r3, [r3, #4]
 8002330:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002334:	2b00      	cmp	r3, #0
 8002336:	d003      	beq.n	8002340 <HAL_GPIO_Init+0x320>
        {
          temp |= iocurrent;
 8002338:	69ba      	ldr	r2, [r7, #24]
 800233a:	693b      	ldr	r3, [r7, #16]
 800233c:	4313      	orrs	r3, r2
 800233e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8002340:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002344:	69bb      	ldr	r3, [r7, #24]
 8002346:	6053      	str	r3, [r2, #4]
      }
    }

    position++;
 8002348:	69fb      	ldr	r3, [r7, #28]
 800234a:	3301      	adds	r3, #1
 800234c:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800234e:	683b      	ldr	r3, [r7, #0]
 8002350:	681a      	ldr	r2, [r3, #0]
 8002352:	69fb      	ldr	r3, [r7, #28]
 8002354:	fa22 f303 	lsr.w	r3, r2, r3
 8002358:	2b00      	cmp	r3, #0
 800235a:	f47f ae6b 	bne.w	8002034 <HAL_GPIO_Init+0x14>
  }
}
 800235e:	bf00      	nop
 8002360:	bf00      	nop
 8002362:	3724      	adds	r7, #36	; 0x24
 8002364:	46bd      	mov	sp, r7
 8002366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800236a:	4770      	bx	lr
 800236c:	58000400 	.word	0x58000400

08002370 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002370:	b480      	push	{r7}
 8002372:	b083      	sub	sp, #12
 8002374:	af00      	add	r7, sp, #0
 8002376:	6078      	str	r0, [r7, #4]
 8002378:	460b      	mov	r3, r1
 800237a:	807b      	strh	r3, [r7, #2]
 800237c:	4613      	mov	r3, r2
 800237e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002380:	787b      	ldrb	r3, [r7, #1]
 8002382:	2b00      	cmp	r3, #0
 8002384:	d003      	beq.n	800238e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002386:	887a      	ldrh	r2, [r7, #2]
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 800238c:	e003      	b.n	8002396 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 800238e:	887b      	ldrh	r3, [r7, #2]
 8002390:	041a      	lsls	r2, r3, #16
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	619a      	str	r2, [r3, #24]
}
 8002396:	bf00      	nop
 8002398:	370c      	adds	r7, #12
 800239a:	46bd      	mov	sp, r7
 800239c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023a0:	4770      	bx	lr

080023a2 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80023a2:	b480      	push	{r7}
 80023a4:	b085      	sub	sp, #20
 80023a6:	af00      	add	r7, sp, #0
 80023a8:	6078      	str	r0, [r7, #4]
 80023aa:	460b      	mov	r3, r1
 80023ac:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	695b      	ldr	r3, [r3, #20]
 80023b2:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80023b4:	887a      	ldrh	r2, [r7, #2]
 80023b6:	68fb      	ldr	r3, [r7, #12]
 80023b8:	4013      	ands	r3, r2
 80023ba:	041a      	lsls	r2, r3, #16
 80023bc:	68fb      	ldr	r3, [r7, #12]
 80023be:	43d9      	mvns	r1, r3
 80023c0:	887b      	ldrh	r3, [r7, #2]
 80023c2:	400b      	ands	r3, r1
 80023c4:	431a      	orrs	r2, r3
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	619a      	str	r2, [r3, #24]
}
 80023ca:	bf00      	nop
 80023cc:	3714      	adds	r7, #20
 80023ce:	46bd      	mov	sp, r7
 80023d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023d4:	4770      	bx	lr
	...

080023d8 <HAL_OSPI_Init>:
  *         in the OSPI_InitTypeDef and initialize the associated handle.
  * @param  hospi : OSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_OSPI_Init (OSPI_HandleTypeDef *hospi)
{
 80023d8:	b580      	push	{r7, lr}
 80023da:	b086      	sub	sp, #24
 80023dc:	af02      	add	r7, sp, #8
 80023de:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80023e0:	2300      	movs	r3, #0
 80023e2:	73fb      	strb	r3, [r7, #15]
  uint32_t tickstart = HAL_GetTick();
 80023e4:	f7ff f9a4 	bl	8001730 <HAL_GetTick>
 80023e8:	60b8      	str	r0, [r7, #8]

  /* Check the OSPI handle allocation */
  if (hospi == NULL)
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	2b00      	cmp	r3, #0
 80023ee:	d102      	bne.n	80023f6 <HAL_OSPI_Init+0x1e>
  {
    status = HAL_ERROR;
 80023f0:	2301      	movs	r3, #1
 80023f2:	73fb      	strb	r3, [r7, #15]
 80023f4:	e0a9      	b.n	800254a <HAL_OSPI_Init+0x172>
    assert_param(IS_OSPI_CKCSHT         (hospi->Init.ClkChipSelectHighTime));
    assert_param(IS_OSPI_DLYBYP         (hospi->Init.DelayBlockBypass));
    assert_param(IS_OSPI_MAXTRAN        (hospi->Init.MaxTran));

    /* Initialize error code */
    hospi->ErrorCode = HAL_OSPI_ERROR_NONE;
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	2200      	movs	r2, #0
 80023fa:	659a      	str	r2, [r3, #88]	; 0x58

    /* Check if the state is the reset state */
    if (hospi->State == HAL_OSPI_STATE_RESET)
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002400:	2b00      	cmp	r3, #0
 8002402:	f040 80a2 	bne.w	800254a <HAL_OSPI_Init+0x172>

      /* Init the low level hardware */
      hospi->MspInitCallback(hospi);
#else
      /* Initialization of the low level hardware */
      HAL_OSPI_MspInit(hospi);
 8002406:	6878      	ldr	r0, [r7, #4]
 8002408:	f7fe fd9e 	bl	8000f48 <HAL_OSPI_MspInit>
#endif /* defined (USE_HAL_OSPI_REGISTER_CALLBACKS) && (USE_HAL_OSPI_REGISTER_CALLBACKS == 1U) */

      /* Configure the default timeout for the OSPI memory access */
      (void)HAL_OSPI_SetTimeout(hospi, HAL_OSPI_TIMEOUT_DEFAULT_VALUE);
 800240c:	f241 3188 	movw	r1, #5000	; 0x1388
 8002410:	6878      	ldr	r0, [r7, #4]
 8002412:	f000 f8e0 	bl	80025d6 <HAL_OSPI_SetTimeout>

      /* Configure memory type, device size, chip select high time, clocked chip select high time, delay block bypass, free running clock, clock mode */
      MODIFY_REG(hospi->Instance->DCR1,
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	689a      	ldr	r2, [r3, #8]
 800241c:	4b4d      	ldr	r3, [pc, #308]	; (8002554 <HAL_OSPI_Init+0x17c>)
 800241e:	4013      	ands	r3, r2
 8002420:	687a      	ldr	r2, [r7, #4]
 8002422:	68d1      	ldr	r1, [r2, #12]
 8002424:	687a      	ldr	r2, [r7, #4]
 8002426:	6912      	ldr	r2, [r2, #16]
 8002428:	3a01      	subs	r2, #1
 800242a:	0412      	lsls	r2, r2, #16
 800242c:	4311      	orrs	r1, r2
 800242e:	687a      	ldr	r2, [r7, #4]
 8002430:	6952      	ldr	r2, [r2, #20]
 8002432:	3a01      	subs	r2, #1
 8002434:	0212      	lsls	r2, r2, #8
 8002436:	4311      	orrs	r1, r2
 8002438:	687a      	ldr	r2, [r7, #4]
 800243a:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800243c:	0112      	lsls	r2, r2, #4
 800243e:	4311      	orrs	r1, r2
 8002440:	687a      	ldr	r2, [r7, #4]
 8002442:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002444:	4311      	orrs	r1, r2
 8002446:	687a      	ldr	r2, [r7, #4]
 8002448:	69d2      	ldr	r2, [r2, #28]
 800244a:	4311      	orrs	r1, r2
 800244c:	687a      	ldr	r2, [r7, #4]
 800244e:	6812      	ldr	r2, [r2, #0]
 8002450:	430b      	orrs	r3, r1
 8002452:	6093      	str	r3, [r2, #8]
                  ((hospi->Init.ChipSelectHighTime - 1U) << OCTOSPI_DCR1_CSHT_Pos) |
                  (hospi->Init.ClkChipSelectHighTime << OCTOSPI_DCR1_CKCSHT_Pos) |
                  hospi->Init.DelayBlockBypass | hospi->Init.ClockMode));

      /* Configure wrap size */
      MODIFY_REG(hospi->Instance->DCR2, OCTOSPI_DCR2_WRAPSIZE, hospi->Init.WrapSize);
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	68db      	ldr	r3, [r3, #12]
 800245a:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	6a1a      	ldr	r2, [r3, #32]
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	430a      	orrs	r2, r1
 8002468:	60da      	str	r2, [r3, #12]

      /* Configure chip select boundary and maximum transfer */
      hospi->Instance->DCR3 = ((hospi->Init.ChipSelectBoundary << OCTOSPI_DCR3_CSBOUND_Pos) |
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800246e:	0419      	lsls	r1, r3, #16
                               (hospi->Init.MaxTran << OCTOSPI_DCR3_MAXTRAN_Pos));
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	6bda      	ldr	r2, [r3, #60]	; 0x3c
      hospi->Instance->DCR3 = ((hospi->Init.ChipSelectBoundary << OCTOSPI_DCR3_CSBOUND_Pos) |
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	430a      	orrs	r2, r1
 800247a:	611a      	str	r2, [r3, #16]

      /* Configure refresh */
      hospi->Instance->DCR4 = hospi->Init.Refresh;
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	687a      	ldr	r2, [r7, #4]
 8002482:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8002484:	615a      	str	r2, [r3, #20]

      /* Configure FIFO threshold */
      MODIFY_REG(hospi->Instance->CR, OCTOSPI_CR_FTHRES, ((hospi->Init.FifoThreshold - 1U) << OCTOSPI_CR_FTHRES_Pos));
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	f423 51f8 	bic.w	r1, r3, #7936	; 0x1f00
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	685b      	ldr	r3, [r3, #4]
 8002494:	3b01      	subs	r3, #1
 8002496:	021a      	lsls	r2, r3, #8
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	430a      	orrs	r2, r1
 800249e:	601a      	str	r2, [r3, #0]

      /* Wait till busy flag is reset */
      status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_BUSY, RESET, tickstart, hospi->Timeout);
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80024a4:	9300      	str	r3, [sp, #0]
 80024a6:	68bb      	ldr	r3, [r7, #8]
 80024a8:	2200      	movs	r2, #0
 80024aa:	2120      	movs	r1, #32
 80024ac:	6878      	ldr	r0, [r7, #4]
 80024ae:	f000 fdb7 	bl	8003020 <OSPI_WaitFlagStateUntilTimeout>
 80024b2:	4603      	mov	r3, r0
 80024b4:	73fb      	strb	r3, [r7, #15]

      if (status == HAL_OK)
 80024b6:	7bfb      	ldrb	r3, [r7, #15]
 80024b8:	2b00      	cmp	r3, #0
 80024ba:	d146      	bne.n	800254a <HAL_OSPI_Init+0x172>
      {
        /* Configure clock prescaler */
        MODIFY_REG(hospi->Instance->DCR2, OCTOSPI_DCR2_PRESCALER, 
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	68db      	ldr	r3, [r3, #12]
 80024c2:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024ca:	1e5a      	subs	r2, r3, #1
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	430a      	orrs	r2, r1
 80024d2:	60da      	str	r2, [r3, #12]
                  ((hospi->Init.ClockPrescaler - 1U) << OCTOSPI_DCR2_PRESCALER_Pos));

        /* Configure Dual Quad mode */
        MODIFY_REG(hospi->Instance->CR, OCTOSPI_CR_DQM, hospi->Init.DualQuad);
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	f023 0140 	bic.w	r1, r3, #64	; 0x40
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	689a      	ldr	r2, [r3, #8]
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	430a      	orrs	r2, r1
 80024e8:	601a      	str	r2, [r3, #0]

        /* Configure sample shifting and delay hold quarter cycle */
        MODIFY_REG(hospi->Instance->TCR, (OCTOSPI_TCR_SSHIFT | OCTOSPI_TCR_DHQC),
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 80024f2:	f023 41a0 	bic.w	r1, r3, #1342177280	; 0x50000000
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80024fe:	431a      	orrs	r2, r3
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	430a      	orrs	r2, r1
 8002506:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
                  (hospi->Init.SampleShifting | hospi->Init.DelayHoldQuarterCycle));

        /* Enable OctoSPI */
        __HAL_OSPI_ENABLE(hospi);
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	681a      	ldr	r2, [r3, #0]
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	f042 0201 	orr.w	r2, r2, #1
 8002518:	601a      	str	r2, [r3, #0]

        /* Enable free running clock if needed : must be done after OSPI enable */
        if (hospi->Init.FreeRunningClock == HAL_OSPI_FREERUNCLK_ENABLE)
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	699b      	ldr	r3, [r3, #24]
 800251e:	2b02      	cmp	r3, #2
 8002520:	d107      	bne.n	8002532 <HAL_OSPI_Init+0x15a>
        {
          SET_BIT(hospi->Instance->DCR1, OCTOSPI_DCR1_FRCK);
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	689a      	ldr	r2, [r3, #8]
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	f042 0202 	orr.w	r2, r2, #2
 8002530:	609a      	str	r2, [r3, #8]
        }

        /* Initialize the OSPI state */
        if (hospi->Init.MemoryType == HAL_OSPI_MEMTYPE_HYPERBUS)
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	68db      	ldr	r3, [r3, #12]
 8002536:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800253a:	d103      	bne.n	8002544 <HAL_OSPI_Init+0x16c>
        {
          hospi->State = HAL_OSPI_STATE_HYPERBUS_INIT;
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	2201      	movs	r2, #1
 8002540:	655a      	str	r2, [r3, #84]	; 0x54
 8002542:	e002      	b.n	800254a <HAL_OSPI_Init+0x172>
        }
        else
        {
          hospi->State = HAL_OSPI_STATE_READY;
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	2202      	movs	r2, #2
 8002548:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
  }

  /* Return function status */
  return status;
 800254a:	7bfb      	ldrb	r3, [r7, #15]
}
 800254c:	4618      	mov	r0, r3
 800254e:	3710      	adds	r7, #16
 8002550:	46bd      	mov	sp, r7
 8002552:	bd80      	pop	{r7, pc}
 8002554:	f8e0f884 	.word	0xf8e0f884

08002558 <HAL_OSPI_HyperbusCfg>:
  * @param  cfg     : Structure containing the Hyperbus configuration
  * @param  Timeout : Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_OSPI_HyperbusCfg(OSPI_HandleTypeDef *hospi, OSPI_HyperbusCfgTypeDef *cfg, uint32_t Timeout)
{
 8002558:	b580      	push	{r7, lr}
 800255a:	b08a      	sub	sp, #40	; 0x28
 800255c:	af02      	add	r7, sp, #8
 800255e:	60f8      	str	r0, [r7, #12]
 8002560:	60b9      	str	r1, [r7, #8]
 8002562:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t state;
  uint32_t tickstart = HAL_GetTick();
 8002564:	f7ff f8e4 	bl	8001730 <HAL_GetTick>
 8002568:	61b8      	str	r0, [r7, #24]
  assert_param(IS_OSPI_ACCESS_TIME       (cfg->AccessTime));
  assert_param(IS_OSPI_WRITE_ZERO_LATENCY(cfg->WriteZeroLatency));
  assert_param(IS_OSPI_LATENCY_MODE      (cfg->LatencyMode));

  /* Check the state of the driver */
  state = hospi->State;
 800256a:	68fb      	ldr	r3, [r7, #12]
 800256c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800256e:	617b      	str	r3, [r7, #20]
  if ((state == HAL_OSPI_STATE_HYPERBUS_INIT) || (state == HAL_OSPI_STATE_READY))
 8002570:	697b      	ldr	r3, [r7, #20]
 8002572:	2b01      	cmp	r3, #1
 8002574:	d002      	beq.n	800257c <HAL_OSPI_HyperbusCfg+0x24>
 8002576:	697b      	ldr	r3, [r7, #20]
 8002578:	2b02      	cmp	r3, #2
 800257a:	d122      	bne.n	80025c2 <HAL_OSPI_HyperbusCfg+0x6a>
  {
    /* Wait till busy flag is reset */
    status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_BUSY, RESET, tickstart, Timeout);
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	9300      	str	r3, [sp, #0]
 8002580:	69bb      	ldr	r3, [r7, #24]
 8002582:	2200      	movs	r2, #0
 8002584:	2120      	movs	r1, #32
 8002586:	68f8      	ldr	r0, [r7, #12]
 8002588:	f000 fd4a 	bl	8003020 <OSPI_WaitFlagStateUntilTimeout>
 800258c:	4603      	mov	r3, r0
 800258e:	77fb      	strb	r3, [r7, #31]

    if (status == HAL_OK)
 8002590:	7ffb      	ldrb	r3, [r7, #31]
 8002592:	2b00      	cmp	r3, #0
 8002594:	d11a      	bne.n	80025cc <HAL_OSPI_HyperbusCfg+0x74>
    {
      /* Configure Hyperbus configuration Latency register */
      WRITE_REG(hospi->Instance->HLCR, ((cfg->RWRecoveryTime << OCTOSPI_HLCR_TRWR_Pos) |
 8002596:	68bb      	ldr	r3, [r7, #8]
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	041a      	lsls	r2, r3, #16
 800259c:	68bb      	ldr	r3, [r7, #8]
 800259e:	685b      	ldr	r3, [r3, #4]
 80025a0:	021b      	lsls	r3, r3, #8
 80025a2:	431a      	orrs	r2, r3
 80025a4:	68bb      	ldr	r3, [r7, #8]
 80025a6:	689b      	ldr	r3, [r3, #8]
 80025a8:	ea42 0103 	orr.w	r1, r2, r3
 80025ac:	68bb      	ldr	r3, [r7, #8]
 80025ae:	68da      	ldr	r2, [r3, #12]
 80025b0:	68fb      	ldr	r3, [r7, #12]
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	430a      	orrs	r2, r1
 80025b6:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
                                        (cfg->AccessTime << OCTOSPI_HLCR_TACC_Pos)     |
                                        cfg->WriteZeroLatency | cfg->LatencyMode));

      /* Update the state */
      hospi->State = HAL_OSPI_STATE_READY;
 80025ba:	68fb      	ldr	r3, [r7, #12]
 80025bc:	2202      	movs	r2, #2
 80025be:	655a      	str	r2, [r3, #84]	; 0x54
    if (status == HAL_OK)
 80025c0:	e004      	b.n	80025cc <HAL_OSPI_HyperbusCfg+0x74>
    }
  }
  else
  {
    status = HAL_ERROR;
 80025c2:	2301      	movs	r3, #1
 80025c4:	77fb      	strb	r3, [r7, #31]
    hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_SEQUENCE;
 80025c6:	68fb      	ldr	r3, [r7, #12]
 80025c8:	2210      	movs	r2, #16
 80025ca:	659a      	str	r2, [r3, #88]	; 0x58
  }

  /* Return function status */
  return status;
 80025cc:	7ffb      	ldrb	r3, [r7, #31]
}
 80025ce:	4618      	mov	r0, r3
 80025d0:	3720      	adds	r7, #32
 80025d2:	46bd      	mov	sp, r7
 80025d4:	bd80      	pop	{r7, pc}

080025d6 <HAL_OSPI_SetTimeout>:
  * @param  hospi   : OSPI handle.
  * @param  Timeout : Timeout for the memory access.
  * @retval None
  */
HAL_StatusTypeDef HAL_OSPI_SetTimeout(OSPI_HandleTypeDef *hospi, uint32_t Timeout)
{
 80025d6:	b480      	push	{r7}
 80025d8:	b083      	sub	sp, #12
 80025da:	af00      	add	r7, sp, #0
 80025dc:	6078      	str	r0, [r7, #4]
 80025de:	6039      	str	r1, [r7, #0]
  hospi->Timeout = Timeout;
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	683a      	ldr	r2, [r7, #0]
 80025e4:	65da      	str	r2, [r3, #92]	; 0x5c
  return HAL_OK;
 80025e6:	2300      	movs	r3, #0
}
 80025e8:	4618      	mov	r0, r3
 80025ea:	370c      	adds	r7, #12
 80025ec:	46bd      	mov	sp, r7
 80025ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025f2:	4770      	bx	lr

080025f4 <HAL_OSPIM_Config>:
  * @param  cfg     : Configuration of the IO Manager for the instance
  * @param  Timeout : Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_OSPIM_Config(OSPI_HandleTypeDef *hospi, OSPIM_CfgTypeDef *cfg, uint32_t Timeout)
{
 80025f4:	b580      	push	{r7, lr}
 80025f6:	b094      	sub	sp, #80	; 0x50
 80025f8:	af00      	add	r7, sp, #0
 80025fa:	60f8      	str	r0, [r7, #12]
 80025fc:	60b9      	str	r1, [r7, #8]
 80025fe:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002600:	2300      	movs	r3, #0
 8002602:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
  uint32_t instance;
  uint8_t index;
  uint8_t ospi_enabled = 0U;
 8002606:	2300      	movs	r3, #0
 8002608:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
  assert_param(IS_OSPIM_PORT(cfg->NCSPort));
  assert_param(IS_OSPIM_IO_PORT(cfg->IOLowPort));
  assert_param(IS_OSPIM_IO_PORT(cfg->IOHighPort));
  assert_param(IS_OSPIM_REQ2ACKTIME(cfg->Req2AckTime));

  if (hospi->Instance == OCTOSPI1)
 800260c:	68fb      	ldr	r3, [r7, #12]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	4aa3      	ldr	r2, [pc, #652]	; (80028a0 <HAL_OSPIM_Config+0x2ac>)
 8002612:	4293      	cmp	r3, r2
 8002614:	d105      	bne.n	8002622 <HAL_OSPIM_Config+0x2e>
  {
    instance = 0U;
 8002616:	2300      	movs	r3, #0
 8002618:	64bb      	str	r3, [r7, #72]	; 0x48
    other_instance = 1U;
 800261a:	2301      	movs	r3, #1
 800261c:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
 8002620:	e004      	b.n	800262c <HAL_OSPIM_Config+0x38>
  }
  else
  {
    instance = 1U;
 8002622:	2301      	movs	r3, #1
 8002624:	64bb      	str	r3, [r7, #72]	; 0x48
    other_instance = 0U;
 8002626:	2300      	movs	r3, #0
 8002628:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
  }

  /**************** Get current configuration of the instances ****************/
  for (index = 0U; index < OSPI_NB_INSTANCE; index++)
 800262c:	2300      	movs	r3, #0
 800262e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 8002632:	e01d      	b.n	8002670 <HAL_OSPIM_Config+0x7c>
  {
    if (OSPIM_GetConfig(index+1U, &(IOM_cfg[index])) != HAL_OK)
 8002634:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8002638:	3301      	adds	r3, #1
 800263a:	b2d8      	uxtb	r0, r3
 800263c:	f897 2047 	ldrb.w	r2, [r7, #71]	; 0x47
 8002640:	f107 0114 	add.w	r1, r7, #20
 8002644:	4613      	mov	r3, r2
 8002646:	005b      	lsls	r3, r3, #1
 8002648:	4413      	add	r3, r2
 800264a:	00db      	lsls	r3, r3, #3
 800264c:	440b      	add	r3, r1
 800264e:	4619      	mov	r1, r3
 8002650:	f000 fd1e 	bl	8003090 <OSPIM_GetConfig>
 8002654:	4603      	mov	r3, r0
 8002656:	2b00      	cmp	r3, #0
 8002658:	d005      	beq.n	8002666 <HAL_OSPIM_Config+0x72>
    {
      status = HAL_ERROR;
 800265a:	2301      	movs	r3, #1
 800265c:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
      hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_PARAM;
 8002660:	68fb      	ldr	r3, [r7, #12]
 8002662:	2208      	movs	r2, #8
 8002664:	659a      	str	r2, [r3, #88]	; 0x58
  for (index = 0U; index < OSPI_NB_INSTANCE; index++)
 8002666:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800266a:	3301      	adds	r3, #1
 800266c:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 8002670:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8002674:	2b01      	cmp	r3, #1
 8002676:	d9dd      	bls.n	8002634 <HAL_OSPIM_Config+0x40>
    }
  }

  if (status == HAL_OK)
 8002678:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800267c:	2b00      	cmp	r3, #0
 800267e:	f040 84c3 	bne.w	8003008 <HAL_OSPIM_Config+0xa14>
  {
    /********** Disable both OctoSPI to configure OctoSPI IO Manager **********/
    if ((OCTOSPI1->CR & OCTOSPI_CR_EN) != 0U)
 8002682:	4b87      	ldr	r3, [pc, #540]	; (80028a0 <HAL_OSPIM_Config+0x2ac>)
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	f003 0301 	and.w	r3, r3, #1
 800268a:	2b00      	cmp	r3, #0
 800268c:	d00b      	beq.n	80026a6 <HAL_OSPIM_Config+0xb2>
    {
      CLEAR_BIT(OCTOSPI1->CR, OCTOSPI_CR_EN);
 800268e:	4b84      	ldr	r3, [pc, #528]	; (80028a0 <HAL_OSPIM_Config+0x2ac>)
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	4a83      	ldr	r2, [pc, #524]	; (80028a0 <HAL_OSPIM_Config+0x2ac>)
 8002694:	f023 0301 	bic.w	r3, r3, #1
 8002698:	6013      	str	r3, [r2, #0]
      ospi_enabled |= 0x1U;
 800269a:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 800269e:	f043 0301 	orr.w	r3, r3, #1
 80026a2:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
    }
    if ((OCTOSPI2->CR & OCTOSPI_CR_EN) != 0U)
 80026a6:	4b7f      	ldr	r3, [pc, #508]	; (80028a4 <HAL_OSPIM_Config+0x2b0>)
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	f003 0301 	and.w	r3, r3, #1
 80026ae:	2b00      	cmp	r3, #0
 80026b0:	d00b      	beq.n	80026ca <HAL_OSPIM_Config+0xd6>
    {
      CLEAR_BIT(OCTOSPI2->CR, OCTOSPI_CR_EN);
 80026b2:	4b7c      	ldr	r3, [pc, #496]	; (80028a4 <HAL_OSPIM_Config+0x2b0>)
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	4a7b      	ldr	r2, [pc, #492]	; (80028a4 <HAL_OSPIM_Config+0x2b0>)
 80026b8:	f023 0301 	bic.w	r3, r3, #1
 80026bc:	6013      	str	r3, [r2, #0]
      ospi_enabled |= 0x2U;
 80026be:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 80026c2:	f043 0302 	orr.w	r3, r3, #2
 80026c6:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
    }

    /***************** Deactivation of previous configuration *****************/
    CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[instance].NCSPort-1U)], OCTOSPIM_PCR_NCSEN);
 80026ca:	4977      	ldr	r1, [pc, #476]	; (80028a8 <HAL_OSPIM_Config+0x2b4>)
 80026cc:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80026ce:	4613      	mov	r3, r2
 80026d0:	005b      	lsls	r3, r3, #1
 80026d2:	4413      	add	r3, r2
 80026d4:	00db      	lsls	r3, r3, #3
 80026d6:	f107 0250 	add.w	r2, r7, #80	; 0x50
 80026da:	4413      	add	r3, r2
 80026dc:	3b34      	subs	r3, #52	; 0x34
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	3b01      	subs	r3, #1
 80026e2:	009b      	lsls	r3, r3, #2
 80026e4:	440b      	add	r3, r1
 80026e6:	6859      	ldr	r1, [r3, #4]
 80026e8:	486f      	ldr	r0, [pc, #444]	; (80028a8 <HAL_OSPIM_Config+0x2b4>)
 80026ea:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80026ec:	4613      	mov	r3, r2
 80026ee:	005b      	lsls	r3, r3, #1
 80026f0:	4413      	add	r3, r2
 80026f2:	00db      	lsls	r3, r3, #3
 80026f4:	f107 0250 	add.w	r2, r7, #80	; 0x50
 80026f8:	4413      	add	r3, r2
 80026fa:	3b34      	subs	r3, #52	; 0x34
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	3b01      	subs	r3, #1
 8002700:	f421 7280 	bic.w	r2, r1, #256	; 0x100
 8002704:	009b      	lsls	r3, r3, #2
 8002706:	4403      	add	r3, r0
 8002708:	605a      	str	r2, [r3, #4]
    if ((OCTOSPIM->CR & OCTOSPIM_CR_MUXEN) != 0U)
 800270a:	4b67      	ldr	r3, [pc, #412]	; (80028a8 <HAL_OSPIM_Config+0x2b4>)
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	f003 0301 	and.w	r3, r3, #1
 8002712:	2b00      	cmp	r3, #0
 8002714:	f000 80ca 	beq.w	80028ac <HAL_OSPIM_Config+0x2b8>
    {
      /* De-multiplexing should be performed */
      CLEAR_BIT(OCTOSPIM->CR, OCTOSPIM_CR_MUXEN);
 8002718:	4b63      	ldr	r3, [pc, #396]	; (80028a8 <HAL_OSPIM_Config+0x2b4>)
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	4a62      	ldr	r2, [pc, #392]	; (80028a8 <HAL_OSPIM_Config+0x2b4>)
 800271e:	f023 0301 	bic.w	r3, r3, #1
 8002722:	6013      	str	r3, [r2, #0]

      if (other_instance == 1U)
 8002724:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 8002728:	2b01      	cmp	r3, #1
 800272a:	f040 8178 	bne.w	8002a1e <HAL_OSPIM_Config+0x42a>
      {
        SET_BIT(OCTOSPIM->PCR[(IOM_cfg[other_instance].ClkPort-1U)], OCTOSPIM_PCR_CLKSRC);
 800272e:	495e      	ldr	r1, [pc, #376]	; (80028a8 <HAL_OSPIM_Config+0x2b4>)
 8002730:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 8002734:	4613      	mov	r3, r2
 8002736:	005b      	lsls	r3, r3, #1
 8002738:	4413      	add	r3, r2
 800273a:	00db      	lsls	r3, r3, #3
 800273c:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8002740:	4413      	add	r3, r2
 8002742:	3b3c      	subs	r3, #60	; 0x3c
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	3b01      	subs	r3, #1
 8002748:	009b      	lsls	r3, r3, #2
 800274a:	440b      	add	r3, r1
 800274c:	6859      	ldr	r1, [r3, #4]
 800274e:	4856      	ldr	r0, [pc, #344]	; (80028a8 <HAL_OSPIM_Config+0x2b4>)
 8002750:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 8002754:	4613      	mov	r3, r2
 8002756:	005b      	lsls	r3, r3, #1
 8002758:	4413      	add	r3, r2
 800275a:	00db      	lsls	r3, r3, #3
 800275c:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8002760:	4413      	add	r3, r2
 8002762:	3b3c      	subs	r3, #60	; 0x3c
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	3b01      	subs	r3, #1
 8002768:	f041 0202 	orr.w	r2, r1, #2
 800276c:	009b      	lsls	r3, r3, #2
 800276e:	4403      	add	r3, r0
 8002770:	605a      	str	r2, [r3, #4]
        if (IOM_cfg[other_instance].DQSPort != 0U)
 8002772:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 8002776:	4613      	mov	r3, r2
 8002778:	005b      	lsls	r3, r3, #1
 800277a:	4413      	add	r3, r2
 800277c:	00db      	lsls	r3, r3, #3
 800277e:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8002782:	4413      	add	r3, r2
 8002784:	3b38      	subs	r3, #56	; 0x38
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	2b00      	cmp	r3, #0
 800278a:	d021      	beq.n	80027d0 <HAL_OSPIM_Config+0x1dc>
        {
          SET_BIT(OCTOSPIM->PCR[(IOM_cfg[other_instance].DQSPort-1U)], OCTOSPIM_PCR_DQSSRC);
 800278c:	4946      	ldr	r1, [pc, #280]	; (80028a8 <HAL_OSPIM_Config+0x2b4>)
 800278e:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 8002792:	4613      	mov	r3, r2
 8002794:	005b      	lsls	r3, r3, #1
 8002796:	4413      	add	r3, r2
 8002798:	00db      	lsls	r3, r3, #3
 800279a:	f107 0250 	add.w	r2, r7, #80	; 0x50
 800279e:	4413      	add	r3, r2
 80027a0:	3b38      	subs	r3, #56	; 0x38
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	3b01      	subs	r3, #1
 80027a6:	009b      	lsls	r3, r3, #2
 80027a8:	440b      	add	r3, r1
 80027aa:	6859      	ldr	r1, [r3, #4]
 80027ac:	483e      	ldr	r0, [pc, #248]	; (80028a8 <HAL_OSPIM_Config+0x2b4>)
 80027ae:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 80027b2:	4613      	mov	r3, r2
 80027b4:	005b      	lsls	r3, r3, #1
 80027b6:	4413      	add	r3, r2
 80027b8:	00db      	lsls	r3, r3, #3
 80027ba:	f107 0250 	add.w	r2, r7, #80	; 0x50
 80027be:	4413      	add	r3, r2
 80027c0:	3b38      	subs	r3, #56	; 0x38
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	3b01      	subs	r3, #1
 80027c6:	f041 0220 	orr.w	r2, r1, #32
 80027ca:	009b      	lsls	r3, r3, #2
 80027cc:	4403      	add	r3, r0
 80027ce:	605a      	str	r2, [r3, #4]
        }
        if (IOM_cfg[other_instance].IOLowPort != HAL_OSPIM_IOPORT_NONE)
 80027d0:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 80027d4:	4613      	mov	r3, r2
 80027d6:	005b      	lsls	r3, r3, #1
 80027d8:	4413      	add	r3, r2
 80027da:	00db      	lsls	r3, r3, #3
 80027dc:	f107 0250 	add.w	r2, r7, #80	; 0x50
 80027e0:	4413      	add	r3, r2
 80027e2:	3b30      	subs	r3, #48	; 0x30
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	2b00      	cmp	r3, #0
 80027e8:	d025      	beq.n	8002836 <HAL_OSPIM_Config+0x242>
        {
          SET_BIT(OCTOSPIM->PCR[((IOM_cfg[other_instance].IOLowPort-1U)& OSPI_IOM_PORT_MASK)], OCTOSPIM_PCR_IOLSRC_1);
 80027ea:	492f      	ldr	r1, [pc, #188]	; (80028a8 <HAL_OSPIM_Config+0x2b4>)
 80027ec:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 80027f0:	4613      	mov	r3, r2
 80027f2:	005b      	lsls	r3, r3, #1
 80027f4:	4413      	add	r3, r2
 80027f6:	00db      	lsls	r3, r3, #3
 80027f8:	f107 0250 	add.w	r2, r7, #80	; 0x50
 80027fc:	4413      	add	r3, r2
 80027fe:	3b30      	subs	r3, #48	; 0x30
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	3b01      	subs	r3, #1
 8002804:	f003 0301 	and.w	r3, r3, #1
 8002808:	009b      	lsls	r3, r3, #2
 800280a:	440b      	add	r3, r1
 800280c:	6859      	ldr	r1, [r3, #4]
 800280e:	4826      	ldr	r0, [pc, #152]	; (80028a8 <HAL_OSPIM_Config+0x2b4>)
 8002810:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 8002814:	4613      	mov	r3, r2
 8002816:	005b      	lsls	r3, r3, #1
 8002818:	4413      	add	r3, r2
 800281a:	00db      	lsls	r3, r3, #3
 800281c:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8002820:	4413      	add	r3, r2
 8002822:	3b30      	subs	r3, #48	; 0x30
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	3b01      	subs	r3, #1
 8002828:	f003 0301 	and.w	r3, r3, #1
 800282c:	f441 2280 	orr.w	r2, r1, #262144	; 0x40000
 8002830:	009b      	lsls	r3, r3, #2
 8002832:	4403      	add	r3, r0
 8002834:	605a      	str	r2, [r3, #4]
        }
        if (IOM_cfg[other_instance].IOHighPort != HAL_OSPIM_IOPORT_NONE)
 8002836:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 800283a:	4613      	mov	r3, r2
 800283c:	005b      	lsls	r3, r3, #1
 800283e:	4413      	add	r3, r2
 8002840:	00db      	lsls	r3, r3, #3
 8002842:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8002846:	4413      	add	r3, r2
 8002848:	3b2c      	subs	r3, #44	; 0x2c
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	2b00      	cmp	r3, #0
 800284e:	f000 80e6 	beq.w	8002a1e <HAL_OSPIM_Config+0x42a>
        {
          SET_BIT(OCTOSPIM->PCR[((IOM_cfg[other_instance].IOHighPort-1U)& OSPI_IOM_PORT_MASK)], OCTOSPIM_PCR_IOHSRC_1);
 8002852:	4915      	ldr	r1, [pc, #84]	; (80028a8 <HAL_OSPIM_Config+0x2b4>)
 8002854:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 8002858:	4613      	mov	r3, r2
 800285a:	005b      	lsls	r3, r3, #1
 800285c:	4413      	add	r3, r2
 800285e:	00db      	lsls	r3, r3, #3
 8002860:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8002864:	4413      	add	r3, r2
 8002866:	3b2c      	subs	r3, #44	; 0x2c
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	3b01      	subs	r3, #1
 800286c:	f003 0301 	and.w	r3, r3, #1
 8002870:	009b      	lsls	r3, r3, #2
 8002872:	440b      	add	r3, r1
 8002874:	6859      	ldr	r1, [r3, #4]
 8002876:	480c      	ldr	r0, [pc, #48]	; (80028a8 <HAL_OSPIM_Config+0x2b4>)
 8002878:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 800287c:	4613      	mov	r3, r2
 800287e:	005b      	lsls	r3, r3, #1
 8002880:	4413      	add	r3, r2
 8002882:	00db      	lsls	r3, r3, #3
 8002884:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8002888:	4413      	add	r3, r2
 800288a:	3b2c      	subs	r3, #44	; 0x2c
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	3b01      	subs	r3, #1
 8002890:	f003 0301 	and.w	r3, r3, #1
 8002894:	f041 6280 	orr.w	r2, r1, #67108864	; 0x4000000
 8002898:	009b      	lsls	r3, r3, #2
 800289a:	4403      	add	r3, r0
 800289c:	605a      	str	r2, [r3, #4]
 800289e:	e0be      	b.n	8002a1e <HAL_OSPIM_Config+0x42a>
 80028a0:	52005000 	.word	0x52005000
 80028a4:	5200a000 	.word	0x5200a000
 80028a8:	5200b400 	.word	0x5200b400
        }
      }
    }
    else
    {
      if (IOM_cfg[instance].ClkPort != 0U)
 80028ac:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80028ae:	4613      	mov	r3, r2
 80028b0:	005b      	lsls	r3, r3, #1
 80028b2:	4413      	add	r3, r2
 80028b4:	00db      	lsls	r3, r3, #3
 80028b6:	f107 0250 	add.w	r2, r7, #80	; 0x50
 80028ba:	4413      	add	r3, r2
 80028bc:	3b3c      	subs	r3, #60	; 0x3c
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	2b00      	cmp	r3, #0
 80028c2:	f000 80ac 	beq.w	8002a1e <HAL_OSPIM_Config+0x42a>
      {
        CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[instance].ClkPort-1U)], OCTOSPIM_PCR_CLKEN);
 80028c6:	499d      	ldr	r1, [pc, #628]	; (8002b3c <HAL_OSPIM_Config+0x548>)
 80028c8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80028ca:	4613      	mov	r3, r2
 80028cc:	005b      	lsls	r3, r3, #1
 80028ce:	4413      	add	r3, r2
 80028d0:	00db      	lsls	r3, r3, #3
 80028d2:	f107 0250 	add.w	r2, r7, #80	; 0x50
 80028d6:	4413      	add	r3, r2
 80028d8:	3b3c      	subs	r3, #60	; 0x3c
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	3b01      	subs	r3, #1
 80028de:	009b      	lsls	r3, r3, #2
 80028e0:	440b      	add	r3, r1
 80028e2:	6859      	ldr	r1, [r3, #4]
 80028e4:	4895      	ldr	r0, [pc, #596]	; (8002b3c <HAL_OSPIM_Config+0x548>)
 80028e6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80028e8:	4613      	mov	r3, r2
 80028ea:	005b      	lsls	r3, r3, #1
 80028ec:	4413      	add	r3, r2
 80028ee:	00db      	lsls	r3, r3, #3
 80028f0:	f107 0250 	add.w	r2, r7, #80	; 0x50
 80028f4:	4413      	add	r3, r2
 80028f6:	3b3c      	subs	r3, #60	; 0x3c
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	3b01      	subs	r3, #1
 80028fc:	f021 0201 	bic.w	r2, r1, #1
 8002900:	009b      	lsls	r3, r3, #2
 8002902:	4403      	add	r3, r0
 8002904:	605a      	str	r2, [r3, #4]
        if (IOM_cfg[instance].DQSPort != 0U)
 8002906:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002908:	4613      	mov	r3, r2
 800290a:	005b      	lsls	r3, r3, #1
 800290c:	4413      	add	r3, r2
 800290e:	00db      	lsls	r3, r3, #3
 8002910:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8002914:	4413      	add	r3, r2
 8002916:	3b38      	subs	r3, #56	; 0x38
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	2b00      	cmp	r3, #0
 800291c:	d01f      	beq.n	800295e <HAL_OSPIM_Config+0x36a>
        {
          CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[instance].DQSPort-1U)], OCTOSPIM_PCR_DQSEN);
 800291e:	4987      	ldr	r1, [pc, #540]	; (8002b3c <HAL_OSPIM_Config+0x548>)
 8002920:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002922:	4613      	mov	r3, r2
 8002924:	005b      	lsls	r3, r3, #1
 8002926:	4413      	add	r3, r2
 8002928:	00db      	lsls	r3, r3, #3
 800292a:	f107 0250 	add.w	r2, r7, #80	; 0x50
 800292e:	4413      	add	r3, r2
 8002930:	3b38      	subs	r3, #56	; 0x38
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	3b01      	subs	r3, #1
 8002936:	009b      	lsls	r3, r3, #2
 8002938:	440b      	add	r3, r1
 800293a:	6859      	ldr	r1, [r3, #4]
 800293c:	487f      	ldr	r0, [pc, #508]	; (8002b3c <HAL_OSPIM_Config+0x548>)
 800293e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002940:	4613      	mov	r3, r2
 8002942:	005b      	lsls	r3, r3, #1
 8002944:	4413      	add	r3, r2
 8002946:	00db      	lsls	r3, r3, #3
 8002948:	f107 0250 	add.w	r2, r7, #80	; 0x50
 800294c:	4413      	add	r3, r2
 800294e:	3b38      	subs	r3, #56	; 0x38
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	3b01      	subs	r3, #1
 8002954:	f021 0210 	bic.w	r2, r1, #16
 8002958:	009b      	lsls	r3, r3, #2
 800295a:	4403      	add	r3, r0
 800295c:	605a      	str	r2, [r3, #4]
        }
        if (IOM_cfg[instance].IOLowPort != HAL_OSPIM_IOPORT_NONE)
 800295e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002960:	4613      	mov	r3, r2
 8002962:	005b      	lsls	r3, r3, #1
 8002964:	4413      	add	r3, r2
 8002966:	00db      	lsls	r3, r3, #3
 8002968:	f107 0250 	add.w	r2, r7, #80	; 0x50
 800296c:	4413      	add	r3, r2
 800296e:	3b30      	subs	r3, #48	; 0x30
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	2b00      	cmp	r3, #0
 8002974:	d023      	beq.n	80029be <HAL_OSPIM_Config+0x3ca>
        {
          CLEAR_BIT(OCTOSPIM->PCR[((IOM_cfg[instance].IOLowPort-1U)& OSPI_IOM_PORT_MASK)], OCTOSPIM_PCR_IOLEN);
 8002976:	4971      	ldr	r1, [pc, #452]	; (8002b3c <HAL_OSPIM_Config+0x548>)
 8002978:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800297a:	4613      	mov	r3, r2
 800297c:	005b      	lsls	r3, r3, #1
 800297e:	4413      	add	r3, r2
 8002980:	00db      	lsls	r3, r3, #3
 8002982:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8002986:	4413      	add	r3, r2
 8002988:	3b30      	subs	r3, #48	; 0x30
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	3b01      	subs	r3, #1
 800298e:	f003 0301 	and.w	r3, r3, #1
 8002992:	009b      	lsls	r3, r3, #2
 8002994:	440b      	add	r3, r1
 8002996:	6859      	ldr	r1, [r3, #4]
 8002998:	4868      	ldr	r0, [pc, #416]	; (8002b3c <HAL_OSPIM_Config+0x548>)
 800299a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800299c:	4613      	mov	r3, r2
 800299e:	005b      	lsls	r3, r3, #1
 80029a0:	4413      	add	r3, r2
 80029a2:	00db      	lsls	r3, r3, #3
 80029a4:	f107 0250 	add.w	r2, r7, #80	; 0x50
 80029a8:	4413      	add	r3, r2
 80029aa:	3b30      	subs	r3, #48	; 0x30
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	3b01      	subs	r3, #1
 80029b0:	f003 0301 	and.w	r3, r3, #1
 80029b4:	f421 3280 	bic.w	r2, r1, #65536	; 0x10000
 80029b8:	009b      	lsls	r3, r3, #2
 80029ba:	4403      	add	r3, r0
 80029bc:	605a      	str	r2, [r3, #4]
        }
        if (IOM_cfg[instance].IOHighPort != HAL_OSPIM_IOPORT_NONE)
 80029be:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80029c0:	4613      	mov	r3, r2
 80029c2:	005b      	lsls	r3, r3, #1
 80029c4:	4413      	add	r3, r2
 80029c6:	00db      	lsls	r3, r3, #3
 80029c8:	f107 0250 	add.w	r2, r7, #80	; 0x50
 80029cc:	4413      	add	r3, r2
 80029ce:	3b2c      	subs	r3, #44	; 0x2c
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	2b00      	cmp	r3, #0
 80029d4:	d023      	beq.n	8002a1e <HAL_OSPIM_Config+0x42a>
        {
          CLEAR_BIT(OCTOSPIM->PCR[((IOM_cfg[instance].IOHighPort-1U)& OSPI_IOM_PORT_MASK)], OCTOSPIM_PCR_IOHEN);
 80029d6:	4959      	ldr	r1, [pc, #356]	; (8002b3c <HAL_OSPIM_Config+0x548>)
 80029d8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80029da:	4613      	mov	r3, r2
 80029dc:	005b      	lsls	r3, r3, #1
 80029de:	4413      	add	r3, r2
 80029e0:	00db      	lsls	r3, r3, #3
 80029e2:	f107 0250 	add.w	r2, r7, #80	; 0x50
 80029e6:	4413      	add	r3, r2
 80029e8:	3b2c      	subs	r3, #44	; 0x2c
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	3b01      	subs	r3, #1
 80029ee:	f003 0301 	and.w	r3, r3, #1
 80029f2:	009b      	lsls	r3, r3, #2
 80029f4:	440b      	add	r3, r1
 80029f6:	6859      	ldr	r1, [r3, #4]
 80029f8:	4850      	ldr	r0, [pc, #320]	; (8002b3c <HAL_OSPIM_Config+0x548>)
 80029fa:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80029fc:	4613      	mov	r3, r2
 80029fe:	005b      	lsls	r3, r3, #1
 8002a00:	4413      	add	r3, r2
 8002a02:	00db      	lsls	r3, r3, #3
 8002a04:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8002a08:	4413      	add	r3, r2
 8002a0a:	3b2c      	subs	r3, #44	; 0x2c
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	3b01      	subs	r3, #1
 8002a10:	f003 0301 	and.w	r3, r3, #1
 8002a14:	f021 7280 	bic.w	r2, r1, #16777216	; 0x1000000
 8002a18:	009b      	lsls	r3, r3, #2
 8002a1a:	4403      	add	r3, r0
 8002a1c:	605a      	str	r2, [r3, #4]
        }
      }
    }

    /********************* Deactivation of other instance *********************/
    if ((cfg->ClkPort == IOM_cfg[other_instance].ClkPort) || (cfg->DQSPort == IOM_cfg[other_instance].DQSPort)     ||
 8002a1e:	68bb      	ldr	r3, [r7, #8]
 8002a20:	6819      	ldr	r1, [r3, #0]
 8002a22:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 8002a26:	4613      	mov	r3, r2
 8002a28:	005b      	lsls	r3, r3, #1
 8002a2a:	4413      	add	r3, r2
 8002a2c:	00db      	lsls	r3, r3, #3
 8002a2e:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8002a32:	4413      	add	r3, r2
 8002a34:	3b3c      	subs	r3, #60	; 0x3c
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	4299      	cmp	r1, r3
 8002a3a:	d03c      	beq.n	8002ab6 <HAL_OSPIM_Config+0x4c2>
 8002a3c:	68bb      	ldr	r3, [r7, #8]
 8002a3e:	6859      	ldr	r1, [r3, #4]
 8002a40:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 8002a44:	4613      	mov	r3, r2
 8002a46:	005b      	lsls	r3, r3, #1
 8002a48:	4413      	add	r3, r2
 8002a4a:	00db      	lsls	r3, r3, #3
 8002a4c:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8002a50:	4413      	add	r3, r2
 8002a52:	3b38      	subs	r3, #56	; 0x38
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	4299      	cmp	r1, r3
 8002a58:	d02d      	beq.n	8002ab6 <HAL_OSPIM_Config+0x4c2>
        (cfg->NCSPort == IOM_cfg[other_instance].NCSPort) || (cfg->IOLowPort == IOM_cfg[other_instance].IOLowPort) ||
 8002a5a:	68bb      	ldr	r3, [r7, #8]
 8002a5c:	6899      	ldr	r1, [r3, #8]
 8002a5e:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 8002a62:	4613      	mov	r3, r2
 8002a64:	005b      	lsls	r3, r3, #1
 8002a66:	4413      	add	r3, r2
 8002a68:	00db      	lsls	r3, r3, #3
 8002a6a:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8002a6e:	4413      	add	r3, r2
 8002a70:	3b34      	subs	r3, #52	; 0x34
 8002a72:	681b      	ldr	r3, [r3, #0]
    if ((cfg->ClkPort == IOM_cfg[other_instance].ClkPort) || (cfg->DQSPort == IOM_cfg[other_instance].DQSPort)     ||
 8002a74:	4299      	cmp	r1, r3
 8002a76:	d01e      	beq.n	8002ab6 <HAL_OSPIM_Config+0x4c2>
        (cfg->NCSPort == IOM_cfg[other_instance].NCSPort) || (cfg->IOLowPort == IOM_cfg[other_instance].IOLowPort) ||
 8002a78:	68bb      	ldr	r3, [r7, #8]
 8002a7a:	68d9      	ldr	r1, [r3, #12]
 8002a7c:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 8002a80:	4613      	mov	r3, r2
 8002a82:	005b      	lsls	r3, r3, #1
 8002a84:	4413      	add	r3, r2
 8002a86:	00db      	lsls	r3, r3, #3
 8002a88:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8002a8c:	4413      	add	r3, r2
 8002a8e:	3b30      	subs	r3, #48	; 0x30
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	4299      	cmp	r1, r3
 8002a94:	d00f      	beq.n	8002ab6 <HAL_OSPIM_Config+0x4c2>
        (cfg->IOHighPort == IOM_cfg[other_instance].IOHighPort))
 8002a96:	68bb      	ldr	r3, [r7, #8]
 8002a98:	6919      	ldr	r1, [r3, #16]
 8002a9a:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 8002a9e:	4613      	mov	r3, r2
 8002aa0:	005b      	lsls	r3, r3, #1
 8002aa2:	4413      	add	r3, r2
 8002aa4:	00db      	lsls	r3, r3, #3
 8002aa6:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8002aaa:	4413      	add	r3, r2
 8002aac:	3b2c      	subs	r3, #44	; 0x2c
 8002aae:	681b      	ldr	r3, [r3, #0]
        (cfg->NCSPort == IOM_cfg[other_instance].NCSPort) || (cfg->IOLowPort == IOM_cfg[other_instance].IOLowPort) ||
 8002ab0:	4299      	cmp	r1, r3
 8002ab2:	f040 811e 	bne.w	8002cf2 <HAL_OSPIM_Config+0x6fe>
    {
      if ((cfg->ClkPort   == IOM_cfg[other_instance].ClkPort)   && 
 8002ab6:	68bb      	ldr	r3, [r7, #8]
 8002ab8:	6819      	ldr	r1, [r3, #0]
 8002aba:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 8002abe:	4613      	mov	r3, r2
 8002ac0:	005b      	lsls	r3, r3, #1
 8002ac2:	4413      	add	r3, r2
 8002ac4:	00db      	lsls	r3, r3, #3
 8002ac6:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8002aca:	4413      	add	r3, r2
 8002acc:	3b3c      	subs	r3, #60	; 0x3c
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	4299      	cmp	r1, r3
 8002ad2:	d135      	bne.n	8002b40 <HAL_OSPIM_Config+0x54c>
          (cfg->DQSPort    == IOM_cfg[other_instance].DQSPort)  &&
 8002ad4:	68bb      	ldr	r3, [r7, #8]
 8002ad6:	6859      	ldr	r1, [r3, #4]
 8002ad8:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 8002adc:	4613      	mov	r3, r2
 8002ade:	005b      	lsls	r3, r3, #1
 8002ae0:	4413      	add	r3, r2
 8002ae2:	00db      	lsls	r3, r3, #3
 8002ae4:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8002ae8:	4413      	add	r3, r2
 8002aea:	3b38      	subs	r3, #56	; 0x38
 8002aec:	681b      	ldr	r3, [r3, #0]
      if ((cfg->ClkPort   == IOM_cfg[other_instance].ClkPort)   && 
 8002aee:	4299      	cmp	r1, r3
 8002af0:	d126      	bne.n	8002b40 <HAL_OSPIM_Config+0x54c>
          (cfg->IOLowPort == IOM_cfg[other_instance].IOLowPort) && 
 8002af2:	68bb      	ldr	r3, [r7, #8]
 8002af4:	68d9      	ldr	r1, [r3, #12]
 8002af6:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 8002afa:	4613      	mov	r3, r2
 8002afc:	005b      	lsls	r3, r3, #1
 8002afe:	4413      	add	r3, r2
 8002b00:	00db      	lsls	r3, r3, #3
 8002b02:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8002b06:	4413      	add	r3, r2
 8002b08:	3b30      	subs	r3, #48	; 0x30
 8002b0a:	681b      	ldr	r3, [r3, #0]
          (cfg->DQSPort    == IOM_cfg[other_instance].DQSPort)  &&
 8002b0c:	4299      	cmp	r1, r3
 8002b0e:	d117      	bne.n	8002b40 <HAL_OSPIM_Config+0x54c>
          (cfg->IOHighPort == IOM_cfg[other_instance].IOHighPort))
 8002b10:	68bb      	ldr	r3, [r7, #8]
 8002b12:	6919      	ldr	r1, [r3, #16]
 8002b14:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 8002b18:	4613      	mov	r3, r2
 8002b1a:	005b      	lsls	r3, r3, #1
 8002b1c:	4413      	add	r3, r2
 8002b1e:	00db      	lsls	r3, r3, #3
 8002b20:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8002b24:	4413      	add	r3, r2
 8002b26:	3b2c      	subs	r3, #44	; 0x2c
 8002b28:	681b      	ldr	r3, [r3, #0]
          (cfg->IOLowPort == IOM_cfg[other_instance].IOLowPort) && 
 8002b2a:	4299      	cmp	r1, r3
 8002b2c:	d108      	bne.n	8002b40 <HAL_OSPIM_Config+0x54c>
      {
        /* Multiplexing should be performed */
        SET_BIT(OCTOSPIM->CR, OCTOSPIM_CR_MUXEN);
 8002b2e:	4b03      	ldr	r3, [pc, #12]	; (8002b3c <HAL_OSPIM_Config+0x548>)
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	4a02      	ldr	r2, [pc, #8]	; (8002b3c <HAL_OSPIM_Config+0x548>)
 8002b34:	f043 0301 	orr.w	r3, r3, #1
 8002b38:	6013      	str	r3, [r2, #0]
 8002b3a:	e0da      	b.n	8002cf2 <HAL_OSPIM_Config+0x6fe>
 8002b3c:	5200b400 	.word	0x5200b400
      }
      else
      {
        CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[other_instance].ClkPort-1U)], OCTOSPIM_PCR_CLKEN);
 8002b40:	49c2      	ldr	r1, [pc, #776]	; (8002e4c <HAL_OSPIM_Config+0x858>)
 8002b42:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 8002b46:	4613      	mov	r3, r2
 8002b48:	005b      	lsls	r3, r3, #1
 8002b4a:	4413      	add	r3, r2
 8002b4c:	00db      	lsls	r3, r3, #3
 8002b4e:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8002b52:	4413      	add	r3, r2
 8002b54:	3b3c      	subs	r3, #60	; 0x3c
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	3b01      	subs	r3, #1
 8002b5a:	009b      	lsls	r3, r3, #2
 8002b5c:	440b      	add	r3, r1
 8002b5e:	6859      	ldr	r1, [r3, #4]
 8002b60:	48ba      	ldr	r0, [pc, #744]	; (8002e4c <HAL_OSPIM_Config+0x858>)
 8002b62:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 8002b66:	4613      	mov	r3, r2
 8002b68:	005b      	lsls	r3, r3, #1
 8002b6a:	4413      	add	r3, r2
 8002b6c:	00db      	lsls	r3, r3, #3
 8002b6e:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8002b72:	4413      	add	r3, r2
 8002b74:	3b3c      	subs	r3, #60	; 0x3c
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	3b01      	subs	r3, #1
 8002b7a:	f021 0201 	bic.w	r2, r1, #1
 8002b7e:	009b      	lsls	r3, r3, #2
 8002b80:	4403      	add	r3, r0
 8002b82:	605a      	str	r2, [r3, #4]
        if (IOM_cfg[other_instance].DQSPort != 0U)
 8002b84:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 8002b88:	4613      	mov	r3, r2
 8002b8a:	005b      	lsls	r3, r3, #1
 8002b8c:	4413      	add	r3, r2
 8002b8e:	00db      	lsls	r3, r3, #3
 8002b90:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8002b94:	4413      	add	r3, r2
 8002b96:	3b38      	subs	r3, #56	; 0x38
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	2b00      	cmp	r3, #0
 8002b9c:	d021      	beq.n	8002be2 <HAL_OSPIM_Config+0x5ee>
        {
          CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[other_instance].DQSPort-1U)], OCTOSPIM_PCR_DQSEN);
 8002b9e:	49ab      	ldr	r1, [pc, #684]	; (8002e4c <HAL_OSPIM_Config+0x858>)
 8002ba0:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 8002ba4:	4613      	mov	r3, r2
 8002ba6:	005b      	lsls	r3, r3, #1
 8002ba8:	4413      	add	r3, r2
 8002baa:	00db      	lsls	r3, r3, #3
 8002bac:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8002bb0:	4413      	add	r3, r2
 8002bb2:	3b38      	subs	r3, #56	; 0x38
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	3b01      	subs	r3, #1
 8002bb8:	009b      	lsls	r3, r3, #2
 8002bba:	440b      	add	r3, r1
 8002bbc:	6859      	ldr	r1, [r3, #4]
 8002bbe:	48a3      	ldr	r0, [pc, #652]	; (8002e4c <HAL_OSPIM_Config+0x858>)
 8002bc0:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 8002bc4:	4613      	mov	r3, r2
 8002bc6:	005b      	lsls	r3, r3, #1
 8002bc8:	4413      	add	r3, r2
 8002bca:	00db      	lsls	r3, r3, #3
 8002bcc:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8002bd0:	4413      	add	r3, r2
 8002bd2:	3b38      	subs	r3, #56	; 0x38
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	3b01      	subs	r3, #1
 8002bd8:	f021 0210 	bic.w	r2, r1, #16
 8002bdc:	009b      	lsls	r3, r3, #2
 8002bde:	4403      	add	r3, r0
 8002be0:	605a      	str	r2, [r3, #4]
        }
        CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[other_instance].NCSPort-1U)], OCTOSPIM_PCR_NCSEN);
 8002be2:	499a      	ldr	r1, [pc, #616]	; (8002e4c <HAL_OSPIM_Config+0x858>)
 8002be4:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 8002be8:	4613      	mov	r3, r2
 8002bea:	005b      	lsls	r3, r3, #1
 8002bec:	4413      	add	r3, r2
 8002bee:	00db      	lsls	r3, r3, #3
 8002bf0:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8002bf4:	4413      	add	r3, r2
 8002bf6:	3b34      	subs	r3, #52	; 0x34
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	3b01      	subs	r3, #1
 8002bfc:	009b      	lsls	r3, r3, #2
 8002bfe:	440b      	add	r3, r1
 8002c00:	6859      	ldr	r1, [r3, #4]
 8002c02:	4892      	ldr	r0, [pc, #584]	; (8002e4c <HAL_OSPIM_Config+0x858>)
 8002c04:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 8002c08:	4613      	mov	r3, r2
 8002c0a:	005b      	lsls	r3, r3, #1
 8002c0c:	4413      	add	r3, r2
 8002c0e:	00db      	lsls	r3, r3, #3
 8002c10:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8002c14:	4413      	add	r3, r2
 8002c16:	3b34      	subs	r3, #52	; 0x34
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	3b01      	subs	r3, #1
 8002c1c:	f421 7280 	bic.w	r2, r1, #256	; 0x100
 8002c20:	009b      	lsls	r3, r3, #2
 8002c22:	4403      	add	r3, r0
 8002c24:	605a      	str	r2, [r3, #4]
        if (IOM_cfg[other_instance].IOLowPort != HAL_OSPIM_IOPORT_NONE)
 8002c26:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 8002c2a:	4613      	mov	r3, r2
 8002c2c:	005b      	lsls	r3, r3, #1
 8002c2e:	4413      	add	r3, r2
 8002c30:	00db      	lsls	r3, r3, #3
 8002c32:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8002c36:	4413      	add	r3, r2
 8002c38:	3b30      	subs	r3, #48	; 0x30
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	2b00      	cmp	r3, #0
 8002c3e:	d025      	beq.n	8002c8c <HAL_OSPIM_Config+0x698>
        {
          CLEAR_BIT(OCTOSPIM->PCR[((IOM_cfg[other_instance].IOLowPort-1U)& OSPI_IOM_PORT_MASK)],
 8002c40:	4982      	ldr	r1, [pc, #520]	; (8002e4c <HAL_OSPIM_Config+0x858>)
 8002c42:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 8002c46:	4613      	mov	r3, r2
 8002c48:	005b      	lsls	r3, r3, #1
 8002c4a:	4413      	add	r3, r2
 8002c4c:	00db      	lsls	r3, r3, #3
 8002c4e:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8002c52:	4413      	add	r3, r2
 8002c54:	3b30      	subs	r3, #48	; 0x30
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	3b01      	subs	r3, #1
 8002c5a:	f003 0301 	and.w	r3, r3, #1
 8002c5e:	009b      	lsls	r3, r3, #2
 8002c60:	440b      	add	r3, r1
 8002c62:	6859      	ldr	r1, [r3, #4]
 8002c64:	4879      	ldr	r0, [pc, #484]	; (8002e4c <HAL_OSPIM_Config+0x858>)
 8002c66:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 8002c6a:	4613      	mov	r3, r2
 8002c6c:	005b      	lsls	r3, r3, #1
 8002c6e:	4413      	add	r3, r2
 8002c70:	00db      	lsls	r3, r3, #3
 8002c72:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8002c76:	4413      	add	r3, r2
 8002c78:	3b30      	subs	r3, #48	; 0x30
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	3b01      	subs	r3, #1
 8002c7e:	f003 0301 	and.w	r3, r3, #1
 8002c82:	f421 3280 	bic.w	r2, r1, #65536	; 0x10000
 8002c86:	009b      	lsls	r3, r3, #2
 8002c88:	4403      	add	r3, r0
 8002c8a:	605a      	str	r2, [r3, #4]
                    OCTOSPIM_PCR_IOLEN);
        }
        if (IOM_cfg[other_instance].IOHighPort != HAL_OSPIM_IOPORT_NONE)
 8002c8c:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 8002c90:	4613      	mov	r3, r2
 8002c92:	005b      	lsls	r3, r3, #1
 8002c94:	4413      	add	r3, r2
 8002c96:	00db      	lsls	r3, r3, #3
 8002c98:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8002c9c:	4413      	add	r3, r2
 8002c9e:	3b2c      	subs	r3, #44	; 0x2c
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	2b00      	cmp	r3, #0
 8002ca4:	d025      	beq.n	8002cf2 <HAL_OSPIM_Config+0x6fe>
        {
          CLEAR_BIT(OCTOSPIM->PCR[((IOM_cfg[other_instance].IOHighPort-1U)& OSPI_IOM_PORT_MASK)],
 8002ca6:	4969      	ldr	r1, [pc, #420]	; (8002e4c <HAL_OSPIM_Config+0x858>)
 8002ca8:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 8002cac:	4613      	mov	r3, r2
 8002cae:	005b      	lsls	r3, r3, #1
 8002cb0:	4413      	add	r3, r2
 8002cb2:	00db      	lsls	r3, r3, #3
 8002cb4:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8002cb8:	4413      	add	r3, r2
 8002cba:	3b2c      	subs	r3, #44	; 0x2c
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	3b01      	subs	r3, #1
 8002cc0:	f003 0301 	and.w	r3, r3, #1
 8002cc4:	009b      	lsls	r3, r3, #2
 8002cc6:	440b      	add	r3, r1
 8002cc8:	6859      	ldr	r1, [r3, #4]
 8002cca:	4860      	ldr	r0, [pc, #384]	; (8002e4c <HAL_OSPIM_Config+0x858>)
 8002ccc:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 8002cd0:	4613      	mov	r3, r2
 8002cd2:	005b      	lsls	r3, r3, #1
 8002cd4:	4413      	add	r3, r2
 8002cd6:	00db      	lsls	r3, r3, #3
 8002cd8:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8002cdc:	4413      	add	r3, r2
 8002cde:	3b2c      	subs	r3, #44	; 0x2c
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	3b01      	subs	r3, #1
 8002ce4:	f003 0301 	and.w	r3, r3, #1
 8002ce8:	f021 7280 	bic.w	r2, r1, #16777216	; 0x1000000
 8002cec:	009b      	lsls	r3, r3, #2
 8002cee:	4403      	add	r3, r0
 8002cf0:	605a      	str	r2, [r3, #4]
        }
      }
    }

    /******************** Activation of new configuration *********************/
        MODIFY_REG(OCTOSPIM->PCR[(cfg->NCSPort - 1U)], (OCTOSPIM_PCR_NCSEN | OCTOSPIM_PCR_NCSSRC),
 8002cf2:	4a56      	ldr	r2, [pc, #344]	; (8002e4c <HAL_OSPIM_Config+0x858>)
 8002cf4:	68bb      	ldr	r3, [r7, #8]
 8002cf6:	689b      	ldr	r3, [r3, #8]
 8002cf8:	3b01      	subs	r3, #1
 8002cfa:	009b      	lsls	r3, r3, #2
 8002cfc:	4413      	add	r3, r2
 8002cfe:	685b      	ldr	r3, [r3, #4]
 8002d00:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002d04:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002d06:	025b      	lsls	r3, r3, #9
 8002d08:	431a      	orrs	r2, r3
 8002d0a:	4950      	ldr	r1, [pc, #320]	; (8002e4c <HAL_OSPIM_Config+0x858>)
 8002d0c:	68bb      	ldr	r3, [r7, #8]
 8002d0e:	689b      	ldr	r3, [r3, #8]
 8002d10:	3b01      	subs	r3, #1
 8002d12:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002d16:	009b      	lsls	r3, r3, #2
 8002d18:	440b      	add	r3, r1
 8002d1a:	605a      	str	r2, [r3, #4]
                  (OCTOSPIM_PCR_NCSEN | (instance << OCTOSPIM_PCR_NCSSRC_Pos)));

    if ((cfg->Req2AckTime - 1U) > ((OCTOSPIM->CR & OCTOSPIM_CR_REQ2ACK_TIME) >> OCTOSPIM_CR_REQ2ACK_TIME_Pos))
 8002d1c:	68bb      	ldr	r3, [r7, #8]
 8002d1e:	695b      	ldr	r3, [r3, #20]
 8002d20:	1e5a      	subs	r2, r3, #1
 8002d22:	4b4a      	ldr	r3, [pc, #296]	; (8002e4c <HAL_OSPIM_Config+0x858>)
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	0c1b      	lsrs	r3, r3, #16
 8002d28:	b2db      	uxtb	r3, r3
 8002d2a:	429a      	cmp	r2, r3
 8002d2c:	d90a      	bls.n	8002d44 <HAL_OSPIM_Config+0x750>
    {
      MODIFY_REG(OCTOSPIM->CR, OCTOSPIM_CR_REQ2ACK_TIME, ((cfg->Req2AckTime - 1U) << OCTOSPIM_CR_REQ2ACK_TIME_Pos));
 8002d2e:	4b47      	ldr	r3, [pc, #284]	; (8002e4c <HAL_OSPIM_Config+0x858>)
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	f423 027f 	bic.w	r2, r3, #16711680	; 0xff0000
 8002d36:	68bb      	ldr	r3, [r7, #8]
 8002d38:	695b      	ldr	r3, [r3, #20]
 8002d3a:	3b01      	subs	r3, #1
 8002d3c:	041b      	lsls	r3, r3, #16
 8002d3e:	4943      	ldr	r1, [pc, #268]	; (8002e4c <HAL_OSPIM_Config+0x858>)
 8002d40:	4313      	orrs	r3, r2
 8002d42:	600b      	str	r3, [r1, #0]
    }

    if ((OCTOSPIM->CR & OCTOSPIM_CR_MUXEN) != 0U)
 8002d44:	4b41      	ldr	r3, [pc, #260]	; (8002e4c <HAL_OSPIM_Config+0x858>)
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	f003 0301 	and.w	r3, r3, #1
 8002d4c:	2b00      	cmp	r3, #0
 8002d4e:	f000 809b 	beq.w	8002e88 <HAL_OSPIM_Config+0x894>
    {
      MODIFY_REG(OCTOSPIM->PCR[(cfg->ClkPort-1U)], (OCTOSPIM_PCR_CLKEN | OCTOSPIM_PCR_CLKSRC), OCTOSPIM_PCR_CLKEN);
 8002d52:	4a3e      	ldr	r2, [pc, #248]	; (8002e4c <HAL_OSPIM_Config+0x858>)
 8002d54:	68bb      	ldr	r3, [r7, #8]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	3b01      	subs	r3, #1
 8002d5a:	009b      	lsls	r3, r3, #2
 8002d5c:	4413      	add	r3, r2
 8002d5e:	685b      	ldr	r3, [r3, #4]
 8002d60:	f023 0203 	bic.w	r2, r3, #3
 8002d64:	4939      	ldr	r1, [pc, #228]	; (8002e4c <HAL_OSPIM_Config+0x858>)
 8002d66:	68bb      	ldr	r3, [r7, #8]
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	3b01      	subs	r3, #1
 8002d6c:	f042 0201 	orr.w	r2, r2, #1
 8002d70:	009b      	lsls	r3, r3, #2
 8002d72:	440b      	add	r3, r1
 8002d74:	605a      	str	r2, [r3, #4]
      if (cfg->DQSPort != 0U)
 8002d76:	68bb      	ldr	r3, [r7, #8]
 8002d78:	685b      	ldr	r3, [r3, #4]
 8002d7a:	2b00      	cmp	r3, #0
 8002d7c:	d011      	beq.n	8002da2 <HAL_OSPIM_Config+0x7ae>
      {
        MODIFY_REG(OCTOSPIM->PCR[(cfg->DQSPort-1U)], (OCTOSPIM_PCR_DQSEN | OCTOSPIM_PCR_DQSSRC), OCTOSPIM_PCR_DQSEN);
 8002d7e:	4a33      	ldr	r2, [pc, #204]	; (8002e4c <HAL_OSPIM_Config+0x858>)
 8002d80:	68bb      	ldr	r3, [r7, #8]
 8002d82:	685b      	ldr	r3, [r3, #4]
 8002d84:	3b01      	subs	r3, #1
 8002d86:	009b      	lsls	r3, r3, #2
 8002d88:	4413      	add	r3, r2
 8002d8a:	685b      	ldr	r3, [r3, #4]
 8002d8c:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8002d90:	492e      	ldr	r1, [pc, #184]	; (8002e4c <HAL_OSPIM_Config+0x858>)
 8002d92:	68bb      	ldr	r3, [r7, #8]
 8002d94:	685b      	ldr	r3, [r3, #4]
 8002d96:	3b01      	subs	r3, #1
 8002d98:	f042 0210 	orr.w	r2, r2, #16
 8002d9c:	009b      	lsls	r3, r3, #2
 8002d9e:	440b      	add	r3, r1
 8002da0:	605a      	str	r2, [r3, #4]
      }

      if ((cfg->IOLowPort & OCTOSPIM_PCR_IOLEN) != 0U)
 8002da2:	68bb      	ldr	r3, [r7, #8]
 8002da4:	68db      	ldr	r3, [r3, #12]
 8002da6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002daa:	2b00      	cmp	r3, #0
 8002dac:	d016      	beq.n	8002ddc <HAL_OSPIM_Config+0x7e8>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOLowPort-1U)& OSPI_IOM_PORT_MASK)], 
 8002dae:	4a27      	ldr	r2, [pc, #156]	; (8002e4c <HAL_OSPIM_Config+0x858>)
 8002db0:	68bb      	ldr	r3, [r7, #8]
 8002db2:	68db      	ldr	r3, [r3, #12]
 8002db4:	3b01      	subs	r3, #1
 8002db6:	f003 0301 	and.w	r3, r3, #1
 8002dba:	009b      	lsls	r3, r3, #2
 8002dbc:	4413      	add	r3, r2
 8002dbe:	685b      	ldr	r3, [r3, #4]
 8002dc0:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8002dc4:	4921      	ldr	r1, [pc, #132]	; (8002e4c <HAL_OSPIM_Config+0x858>)
 8002dc6:	68bb      	ldr	r3, [r7, #8]
 8002dc8:	68db      	ldr	r3, [r3, #12]
 8002dca:	3b01      	subs	r3, #1
 8002dcc:	f003 0301 	and.w	r3, r3, #1
 8002dd0:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8002dd4:	009b      	lsls	r3, r3, #2
 8002dd6:	440b      	add	r3, r1
 8002dd8:	605a      	str	r2, [r3, #4]
 8002dda:	e019      	b.n	8002e10 <HAL_OSPIM_Config+0x81c>
                  (OCTOSPIM_PCR_IOLEN | OCTOSPIM_PCR_IOLSRC), OCTOSPIM_PCR_IOLEN);
      }
      else if (cfg->IOLowPort != HAL_OSPIM_IOPORT_NONE)
 8002ddc:	68bb      	ldr	r3, [r7, #8]
 8002dde:	68db      	ldr	r3, [r3, #12]
 8002de0:	2b00      	cmp	r3, #0
 8002de2:	d015      	beq.n	8002e10 <HAL_OSPIM_Config+0x81c>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOLowPort-1U)& OSPI_IOM_PORT_MASK)], 
 8002de4:	4a19      	ldr	r2, [pc, #100]	; (8002e4c <HAL_OSPIM_Config+0x858>)
 8002de6:	68bb      	ldr	r3, [r7, #8]
 8002de8:	68db      	ldr	r3, [r3, #12]
 8002dea:	3b01      	subs	r3, #1
 8002dec:	f003 0301 	and.w	r3, r3, #1
 8002df0:	009b      	lsls	r3, r3, #2
 8002df2:	4413      	add	r3, r2
 8002df4:	685b      	ldr	r3, [r3, #4]
 8002df6:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 8002dfa:	4914      	ldr	r1, [pc, #80]	; (8002e4c <HAL_OSPIM_Config+0x858>)
 8002dfc:	68bb      	ldr	r3, [r7, #8]
 8002dfe:	68db      	ldr	r3, [r3, #12]
 8002e00:	3b01      	subs	r3, #1
 8002e02:	f003 0301 	and.w	r3, r3, #1
 8002e06:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 8002e0a:	009b      	lsls	r3, r3, #2
 8002e0c:	440b      	add	r3, r1
 8002e0e:	605a      	str	r2, [r3, #4]
      else
      {
         /* Nothing to do */
      }

      if ((cfg->IOHighPort & OCTOSPIM_PCR_IOLEN) != 0U)
 8002e10:	68bb      	ldr	r3, [r7, #8]
 8002e12:	691b      	ldr	r3, [r3, #16]
 8002e14:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002e18:	2b00      	cmp	r3, #0
 8002e1a:	d019      	beq.n	8002e50 <HAL_OSPIM_Config+0x85c>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOHighPort-1U)& OSPI_IOM_PORT_MASK)], 
 8002e1c:	4a0b      	ldr	r2, [pc, #44]	; (8002e4c <HAL_OSPIM_Config+0x858>)
 8002e1e:	68bb      	ldr	r3, [r7, #8]
 8002e20:	691b      	ldr	r3, [r3, #16]
 8002e22:	3b01      	subs	r3, #1
 8002e24:	f003 0301 	and.w	r3, r3, #1
 8002e28:	009b      	lsls	r3, r3, #2
 8002e2a:	4413      	add	r3, r2
 8002e2c:	685b      	ldr	r3, [r3, #4]
 8002e2e:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8002e32:	4906      	ldr	r1, [pc, #24]	; (8002e4c <HAL_OSPIM_Config+0x858>)
 8002e34:	68bb      	ldr	r3, [r7, #8]
 8002e36:	691b      	ldr	r3, [r3, #16]
 8002e38:	3b01      	subs	r3, #1
 8002e3a:	f003 0301 	and.w	r3, r3, #1
 8002e3e:	f442 3240 	orr.w	r2, r2, #196608	; 0x30000
 8002e42:	009b      	lsls	r3, r3, #2
 8002e44:	440b      	add	r3, r1
 8002e46:	605a      	str	r2, [r3, #4]
 8002e48:	e0c6      	b.n	8002fd8 <HAL_OSPIM_Config+0x9e4>
 8002e4a:	bf00      	nop
 8002e4c:	5200b400 	.word	0x5200b400
                  (OCTOSPIM_PCR_IOLEN | OCTOSPIM_PCR_IOLSRC), (OCTOSPIM_PCR_IOLEN | OCTOSPIM_PCR_IOLSRC_0));
      }
      else if (cfg->IOHighPort != HAL_OSPIM_IOPORT_NONE)
 8002e50:	68bb      	ldr	r3, [r7, #8]
 8002e52:	691b      	ldr	r3, [r3, #16]
 8002e54:	2b00      	cmp	r3, #0
 8002e56:	f000 80bf 	beq.w	8002fd8 <HAL_OSPIM_Config+0x9e4>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOHighPort-1U)& OSPI_IOM_PORT_MASK)], 
 8002e5a:	4a6e      	ldr	r2, [pc, #440]	; (8003014 <HAL_OSPIM_Config+0xa20>)
 8002e5c:	68bb      	ldr	r3, [r7, #8]
 8002e5e:	691b      	ldr	r3, [r3, #16]
 8002e60:	3b01      	subs	r3, #1
 8002e62:	f003 0301 	and.w	r3, r3, #1
 8002e66:	009b      	lsls	r3, r3, #2
 8002e68:	4413      	add	r3, r2
 8002e6a:	685b      	ldr	r3, [r3, #4]
 8002e6c:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 8002e70:	4968      	ldr	r1, [pc, #416]	; (8003014 <HAL_OSPIM_Config+0xa20>)
 8002e72:	68bb      	ldr	r3, [r7, #8]
 8002e74:	691b      	ldr	r3, [r3, #16]
 8002e76:	3b01      	subs	r3, #1
 8002e78:	f003 0301 	and.w	r3, r3, #1
 8002e7c:	f042 7240 	orr.w	r2, r2, #50331648	; 0x3000000
 8002e80:	009b      	lsls	r3, r3, #2
 8002e82:	440b      	add	r3, r1
 8002e84:	605a      	str	r2, [r3, #4]
 8002e86:	e0a7      	b.n	8002fd8 <HAL_OSPIM_Config+0x9e4>
         /* Nothing to do */
      }
    }
    else
    {
      MODIFY_REG(OCTOSPIM->PCR[(cfg->ClkPort-1U)], (OCTOSPIM_PCR_CLKEN | OCTOSPIM_PCR_CLKSRC), 
 8002e88:	4a62      	ldr	r2, [pc, #392]	; (8003014 <HAL_OSPIM_Config+0xa20>)
 8002e8a:	68bb      	ldr	r3, [r7, #8]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	3b01      	subs	r3, #1
 8002e90:	009b      	lsls	r3, r3, #2
 8002e92:	4413      	add	r3, r2
 8002e94:	685b      	ldr	r3, [r3, #4]
 8002e96:	f023 0203 	bic.w	r2, r3, #3
 8002e9a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002e9c:	005b      	lsls	r3, r3, #1
 8002e9e:	431a      	orrs	r2, r3
 8002ea0:	495c      	ldr	r1, [pc, #368]	; (8003014 <HAL_OSPIM_Config+0xa20>)
 8002ea2:	68bb      	ldr	r3, [r7, #8]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	3b01      	subs	r3, #1
 8002ea8:	f042 0201 	orr.w	r2, r2, #1
 8002eac:	009b      	lsls	r3, r3, #2
 8002eae:	440b      	add	r3, r1
 8002eb0:	605a      	str	r2, [r3, #4]
                (OCTOSPIM_PCR_CLKEN | (instance << OCTOSPIM_PCR_CLKSRC_Pos)));
      if (cfg->DQSPort != 0U)
 8002eb2:	68bb      	ldr	r3, [r7, #8]
 8002eb4:	685b      	ldr	r3, [r3, #4]
 8002eb6:	2b00      	cmp	r3, #0
 8002eb8:	d014      	beq.n	8002ee4 <HAL_OSPIM_Config+0x8f0>
      {
        MODIFY_REG(OCTOSPIM->PCR[(cfg->DQSPort-1U)], (OCTOSPIM_PCR_DQSEN | OCTOSPIM_PCR_DQSSRC), 
 8002eba:	4a56      	ldr	r2, [pc, #344]	; (8003014 <HAL_OSPIM_Config+0xa20>)
 8002ebc:	68bb      	ldr	r3, [r7, #8]
 8002ebe:	685b      	ldr	r3, [r3, #4]
 8002ec0:	3b01      	subs	r3, #1
 8002ec2:	009b      	lsls	r3, r3, #2
 8002ec4:	4413      	add	r3, r2
 8002ec6:	685b      	ldr	r3, [r3, #4]
 8002ec8:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8002ecc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002ece:	015b      	lsls	r3, r3, #5
 8002ed0:	431a      	orrs	r2, r3
 8002ed2:	4950      	ldr	r1, [pc, #320]	; (8003014 <HAL_OSPIM_Config+0xa20>)
 8002ed4:	68bb      	ldr	r3, [r7, #8]
 8002ed6:	685b      	ldr	r3, [r3, #4]
 8002ed8:	3b01      	subs	r3, #1
 8002eda:	f042 0210 	orr.w	r2, r2, #16
 8002ede:	009b      	lsls	r3, r3, #2
 8002ee0:	440b      	add	r3, r1
 8002ee2:	605a      	str	r2, [r3, #4]
                  (OCTOSPIM_PCR_DQSEN | (instance << OCTOSPIM_PCR_DQSSRC_Pos)));
      }

      if ((cfg->IOLowPort & OCTOSPIM_PCR_IOLEN) != 0U)
 8002ee4:	68bb      	ldr	r3, [r7, #8]
 8002ee6:	68db      	ldr	r3, [r3, #12]
 8002ee8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002eec:	2b00      	cmp	r3, #0
 8002eee:	d019      	beq.n	8002f24 <HAL_OSPIM_Config+0x930>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOLowPort-1U)& OSPI_IOM_PORT_MASK)], 
 8002ef0:	4a48      	ldr	r2, [pc, #288]	; (8003014 <HAL_OSPIM_Config+0xa20>)
 8002ef2:	68bb      	ldr	r3, [r7, #8]
 8002ef4:	68db      	ldr	r3, [r3, #12]
 8002ef6:	3b01      	subs	r3, #1
 8002ef8:	f003 0301 	and.w	r3, r3, #1
 8002efc:	009b      	lsls	r3, r3, #2
 8002efe:	4413      	add	r3, r2
 8002f00:	685b      	ldr	r3, [r3, #4]
 8002f02:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8002f06:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002f08:	049b      	lsls	r3, r3, #18
 8002f0a:	431a      	orrs	r2, r3
 8002f0c:	4941      	ldr	r1, [pc, #260]	; (8003014 <HAL_OSPIM_Config+0xa20>)
 8002f0e:	68bb      	ldr	r3, [r7, #8]
 8002f10:	68db      	ldr	r3, [r3, #12]
 8002f12:	3b01      	subs	r3, #1
 8002f14:	f003 0301 	and.w	r3, r3, #1
 8002f18:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8002f1c:	009b      	lsls	r3, r3, #2
 8002f1e:	440b      	add	r3, r1
 8002f20:	605a      	str	r2, [r3, #4]
 8002f22:	e01c      	b.n	8002f5e <HAL_OSPIM_Config+0x96a>
                  (OCTOSPIM_PCR_IOLEN | OCTOSPIM_PCR_IOLSRC),
                  (OCTOSPIM_PCR_IOLEN | (instance << (OCTOSPIM_PCR_IOLSRC_Pos+1U))));
      }
      else if (cfg->IOLowPort != HAL_OSPIM_IOPORT_NONE)
 8002f24:	68bb      	ldr	r3, [r7, #8]
 8002f26:	68db      	ldr	r3, [r3, #12]
 8002f28:	2b00      	cmp	r3, #0
 8002f2a:	d018      	beq.n	8002f5e <HAL_OSPIM_Config+0x96a>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOLowPort-1U)& OSPI_IOM_PORT_MASK)], 
 8002f2c:	4a39      	ldr	r2, [pc, #228]	; (8003014 <HAL_OSPIM_Config+0xa20>)
 8002f2e:	68bb      	ldr	r3, [r7, #8]
 8002f30:	68db      	ldr	r3, [r3, #12]
 8002f32:	3b01      	subs	r3, #1
 8002f34:	f003 0301 	and.w	r3, r3, #1
 8002f38:	009b      	lsls	r3, r3, #2
 8002f3a:	4413      	add	r3, r2
 8002f3c:	685b      	ldr	r3, [r3, #4]
 8002f3e:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 8002f42:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002f44:	069b      	lsls	r3, r3, #26
 8002f46:	431a      	orrs	r2, r3
 8002f48:	4932      	ldr	r1, [pc, #200]	; (8003014 <HAL_OSPIM_Config+0xa20>)
 8002f4a:	68bb      	ldr	r3, [r7, #8]
 8002f4c:	68db      	ldr	r3, [r3, #12]
 8002f4e:	3b01      	subs	r3, #1
 8002f50:	f003 0301 	and.w	r3, r3, #1
 8002f54:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 8002f58:	009b      	lsls	r3, r3, #2
 8002f5a:	440b      	add	r3, r1
 8002f5c:	605a      	str	r2, [r3, #4]
      else
      {
         /* Nothing to do */
      }

      if ((cfg->IOHighPort & OCTOSPIM_PCR_IOLEN) != 0U)
 8002f5e:	68bb      	ldr	r3, [r7, #8]
 8002f60:	691b      	ldr	r3, [r3, #16]
 8002f62:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002f66:	2b00      	cmp	r3, #0
 8002f68:	d019      	beq.n	8002f9e <HAL_OSPIM_Config+0x9aa>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOHighPort-1U)& OSPI_IOM_PORT_MASK)], 
 8002f6a:	4a2a      	ldr	r2, [pc, #168]	; (8003014 <HAL_OSPIM_Config+0xa20>)
 8002f6c:	68bb      	ldr	r3, [r7, #8]
 8002f6e:	691b      	ldr	r3, [r3, #16]
 8002f70:	3b01      	subs	r3, #1
 8002f72:	f003 0301 	and.w	r3, r3, #1
 8002f76:	009b      	lsls	r3, r3, #2
 8002f78:	4413      	add	r3, r2
 8002f7a:	685b      	ldr	r3, [r3, #4]
 8002f7c:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8002f80:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002f82:	049b      	lsls	r3, r3, #18
 8002f84:	431a      	orrs	r2, r3
 8002f86:	4923      	ldr	r1, [pc, #140]	; (8003014 <HAL_OSPIM_Config+0xa20>)
 8002f88:	68bb      	ldr	r3, [r7, #8]
 8002f8a:	691b      	ldr	r3, [r3, #16]
 8002f8c:	3b01      	subs	r3, #1
 8002f8e:	f003 0301 	and.w	r3, r3, #1
 8002f92:	f442 3240 	orr.w	r2, r2, #196608	; 0x30000
 8002f96:	009b      	lsls	r3, r3, #2
 8002f98:	440b      	add	r3, r1
 8002f9a:	605a      	str	r2, [r3, #4]
 8002f9c:	e01c      	b.n	8002fd8 <HAL_OSPIM_Config+0x9e4>
                  (OCTOSPIM_PCR_IOLEN | OCTOSPIM_PCR_IOLSRC),
                  (OCTOSPIM_PCR_IOLEN | OCTOSPIM_PCR_IOLSRC_0 | (instance << (OCTOSPIM_PCR_IOLSRC_Pos+1U))));
      }
      else if (cfg->IOHighPort != HAL_OSPIM_IOPORT_NONE)
 8002f9e:	68bb      	ldr	r3, [r7, #8]
 8002fa0:	691b      	ldr	r3, [r3, #16]
 8002fa2:	2b00      	cmp	r3, #0
 8002fa4:	d018      	beq.n	8002fd8 <HAL_OSPIM_Config+0x9e4>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOHighPort-1U)& OSPI_IOM_PORT_MASK)], 
 8002fa6:	4a1b      	ldr	r2, [pc, #108]	; (8003014 <HAL_OSPIM_Config+0xa20>)
 8002fa8:	68bb      	ldr	r3, [r7, #8]
 8002faa:	691b      	ldr	r3, [r3, #16]
 8002fac:	3b01      	subs	r3, #1
 8002fae:	f003 0301 	and.w	r3, r3, #1
 8002fb2:	009b      	lsls	r3, r3, #2
 8002fb4:	4413      	add	r3, r2
 8002fb6:	685b      	ldr	r3, [r3, #4]
 8002fb8:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 8002fbc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002fbe:	069b      	lsls	r3, r3, #26
 8002fc0:	431a      	orrs	r2, r3
 8002fc2:	4914      	ldr	r1, [pc, #80]	; (8003014 <HAL_OSPIM_Config+0xa20>)
 8002fc4:	68bb      	ldr	r3, [r7, #8]
 8002fc6:	691b      	ldr	r3, [r3, #16]
 8002fc8:	3b01      	subs	r3, #1
 8002fca:	f003 0301 	and.w	r3, r3, #1
 8002fce:	f042 7240 	orr.w	r2, r2, #50331648	; 0x3000000
 8002fd2:	009b      	lsls	r3, r3, #2
 8002fd4:	440b      	add	r3, r1
 8002fd6:	605a      	str	r2, [r3, #4]
         /* Nothing to do */
      }
    }

    /******* Re-enable both OctoSPI after configure OctoSPI IO Manager ********/
    if ((ospi_enabled & 0x1U) != 0U)
 8002fd8:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8002fdc:	f003 0301 	and.w	r3, r3, #1
 8002fe0:	2b00      	cmp	r3, #0
 8002fe2:	d005      	beq.n	8002ff0 <HAL_OSPIM_Config+0x9fc>
    {
      SET_BIT(OCTOSPI1->CR, OCTOSPI_CR_EN);
 8002fe4:	4b0c      	ldr	r3, [pc, #48]	; (8003018 <HAL_OSPIM_Config+0xa24>)
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	4a0b      	ldr	r2, [pc, #44]	; (8003018 <HAL_OSPIM_Config+0xa24>)
 8002fea:	f043 0301 	orr.w	r3, r3, #1
 8002fee:	6013      	str	r3, [r2, #0]
    }
    if ((ospi_enabled & 0x2U) != 0U)
 8002ff0:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8002ff4:	f003 0302 	and.w	r3, r3, #2
 8002ff8:	2b00      	cmp	r3, #0
 8002ffa:	d005      	beq.n	8003008 <HAL_OSPIM_Config+0xa14>
    {
      SET_BIT(OCTOSPI2->CR, OCTOSPI_CR_EN);
 8002ffc:	4b07      	ldr	r3, [pc, #28]	; (800301c <HAL_OSPIM_Config+0xa28>)
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	4a06      	ldr	r2, [pc, #24]	; (800301c <HAL_OSPIM_Config+0xa28>)
 8003002:	f043 0301 	orr.w	r3, r3, #1
 8003006:	6013      	str	r3, [r2, #0]
    }
  }

  /* Return function status */
  return status;
 8003008:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
}
 800300c:	4618      	mov	r0, r3
 800300e:	3750      	adds	r7, #80	; 0x50
 8003010:	46bd      	mov	sp, r7
 8003012:	bd80      	pop	{r7, pc}
 8003014:	5200b400 	.word	0x5200b400
 8003018:	52005000 	.word	0x52005000
 800301c:	5200a000 	.word	0x5200a000

08003020 <OSPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart : Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef OSPI_WaitFlagStateUntilTimeout(OSPI_HandleTypeDef *hospi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 8003020:	b580      	push	{r7, lr}
 8003022:	b084      	sub	sp, #16
 8003024:	af00      	add	r7, sp, #0
 8003026:	60f8      	str	r0, [r7, #12]
 8003028:	60b9      	str	r1, [r7, #8]
 800302a:	603b      	str	r3, [r7, #0]
 800302c:	4613      	mov	r3, r2
 800302e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while((__HAL_OSPI_GET_FLAG(hospi, Flag)) != State)
 8003030:	e01a      	b.n	8003068 <OSPI_WaitFlagStateUntilTimeout+0x48>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003032:	69bb      	ldr	r3, [r7, #24]
 8003034:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003038:	d016      	beq.n	8003068 <OSPI_WaitFlagStateUntilTimeout+0x48>
    {
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800303a:	f7fe fb79 	bl	8001730 <HAL_GetTick>
 800303e:	4602      	mov	r2, r0
 8003040:	683b      	ldr	r3, [r7, #0]
 8003042:	1ad3      	subs	r3, r2, r3
 8003044:	69ba      	ldr	r2, [r7, #24]
 8003046:	429a      	cmp	r2, r3
 8003048:	d302      	bcc.n	8003050 <OSPI_WaitFlagStateUntilTimeout+0x30>
 800304a:	69bb      	ldr	r3, [r7, #24]
 800304c:	2b00      	cmp	r3, #0
 800304e:	d10b      	bne.n	8003068 <OSPI_WaitFlagStateUntilTimeout+0x48>
      {
        hospi->State     = HAL_OSPI_STATE_ERROR;
 8003050:	68fb      	ldr	r3, [r7, #12]
 8003052:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003056:	655a      	str	r2, [r3, #84]	; 0x54
        hospi->ErrorCode |= HAL_OSPI_ERROR_TIMEOUT;
 8003058:	68fb      	ldr	r3, [r7, #12]
 800305a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800305c:	f043 0201 	orr.w	r2, r3, #1
 8003060:	68fb      	ldr	r3, [r7, #12]
 8003062:	659a      	str	r2, [r3, #88]	; 0x58

        return HAL_ERROR;
 8003064:	2301      	movs	r3, #1
 8003066:	e00e      	b.n	8003086 <OSPI_WaitFlagStateUntilTimeout+0x66>
  while((__HAL_OSPI_GET_FLAG(hospi, Flag)) != State)
 8003068:	68fb      	ldr	r3, [r7, #12]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	6a1a      	ldr	r2, [r3, #32]
 800306e:	68bb      	ldr	r3, [r7, #8]
 8003070:	4013      	ands	r3, r2
 8003072:	2b00      	cmp	r3, #0
 8003074:	bf14      	ite	ne
 8003076:	2301      	movne	r3, #1
 8003078:	2300      	moveq	r3, #0
 800307a:	b2db      	uxtb	r3, r3
 800307c:	461a      	mov	r2, r3
 800307e:	79fb      	ldrb	r3, [r7, #7]
 8003080:	429a      	cmp	r2, r3
 8003082:	d1d6      	bne.n	8003032 <OSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003084:	2300      	movs	r3, #0
}
 8003086:	4618      	mov	r0, r3
 8003088:	3710      	adds	r7, #16
 800308a:	46bd      	mov	sp, r7
 800308c:	bd80      	pop	{r7, pc}
	...

08003090 <OSPIM_GetConfig>:
  * @param  instance_nb : number of the instance
  * @param  cfg         : configuration of the IO Manager for the instance
  * @retval HAL status
  */
static HAL_StatusTypeDef OSPIM_GetConfig(uint8_t instance_nb, OSPIM_CfgTypeDef *cfg)
{
 8003090:	b480      	push	{r7}
 8003092:	b087      	sub	sp, #28
 8003094:	af00      	add	r7, sp, #0
 8003096:	4603      	mov	r3, r0
 8003098:	6039      	str	r1, [r7, #0]
 800309a:	71fb      	strb	r3, [r7, #7]
  HAL_StatusTypeDef status = HAL_OK;
 800309c:	2300      	movs	r3, #0
 800309e:	75fb      	strb	r3, [r7, #23]
  uint32_t reg; 
  uint32_t value = 0U;
 80030a0:	2300      	movs	r3, #0
 80030a2:	613b      	str	r3, [r7, #16]
  uint32_t index;

  if ((instance_nb == 0U) || (instance_nb > OSPI_NB_INSTANCE) || (cfg == NULL))
 80030a4:	79fb      	ldrb	r3, [r7, #7]
 80030a6:	2b00      	cmp	r3, #0
 80030a8:	d005      	beq.n	80030b6 <OSPIM_GetConfig+0x26>
 80030aa:	79fb      	ldrb	r3, [r7, #7]
 80030ac:	2b02      	cmp	r3, #2
 80030ae:	d802      	bhi.n	80030b6 <OSPIM_GetConfig+0x26>
 80030b0:	683b      	ldr	r3, [r7, #0]
 80030b2:	2b00      	cmp	r3, #0
 80030b4:	d102      	bne.n	80030bc <OSPIM_GetConfig+0x2c>
  {
    /* Invalid parameter -> error returned */
    status = HAL_ERROR;
 80030b6:	2301      	movs	r3, #1
 80030b8:	75fb      	strb	r3, [r7, #23]
 80030ba:	e098      	b.n	80031ee <OSPIM_GetConfig+0x15e>
  }
  else
  {
    /* Initialize the structure */
    cfg->ClkPort    = 0U;
 80030bc:	683b      	ldr	r3, [r7, #0]
 80030be:	2200      	movs	r2, #0
 80030c0:	601a      	str	r2, [r3, #0]
    cfg->DQSPort    = 0U;
 80030c2:	683b      	ldr	r3, [r7, #0]
 80030c4:	2200      	movs	r2, #0
 80030c6:	605a      	str	r2, [r3, #4]
    cfg->NCSPort    = 0U;
 80030c8:	683b      	ldr	r3, [r7, #0]
 80030ca:	2200      	movs	r2, #0
 80030cc:	609a      	str	r2, [r3, #8]
    cfg->IOLowPort  = 0U;
 80030ce:	683b      	ldr	r3, [r7, #0]
 80030d0:	2200      	movs	r2, #0
 80030d2:	60da      	str	r2, [r3, #12]
    cfg->IOHighPort = 0U;
 80030d4:	683b      	ldr	r3, [r7, #0]
 80030d6:	2200      	movs	r2, #0
 80030d8:	611a      	str	r2, [r3, #16]

    if (instance_nb == 2U)
 80030da:	79fb      	ldrb	r3, [r7, #7]
 80030dc:	2b02      	cmp	r3, #2
 80030de:	d10b      	bne.n	80030f8 <OSPIM_GetConfig+0x68>
    {
      if ((OCTOSPIM->CR & OCTOSPIM_CR_MUXEN) == 0U)
 80030e0:	4b46      	ldr	r3, [pc, #280]	; (80031fc <OSPIM_GetConfig+0x16c>)
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	f003 0301 	and.w	r3, r3, #1
 80030e8:	2b00      	cmp	r3, #0
 80030ea:	d102      	bne.n	80030f2 <OSPIM_GetConfig+0x62>
      {
        value = (OCTOSPIM_PCR_CLKSRC | OCTOSPIM_PCR_DQSSRC | OCTOSPIM_PCR_NCSSRC 
 80030ec:	4b44      	ldr	r3, [pc, #272]	; (8003200 <OSPIM_GetConfig+0x170>)
 80030ee:	613b      	str	r3, [r7, #16]
 80030f0:	e002      	b.n	80030f8 <OSPIM_GetConfig+0x68>
               | OCTOSPIM_PCR_IOLSRC_1 | OCTOSPIM_PCR_IOHSRC_1);
      }
      else
      {
        value = OCTOSPIM_PCR_NCSSRC;
 80030f2:	f44f 7300 	mov.w	r3, #512	; 0x200
 80030f6:	613b      	str	r3, [r7, #16]
      }
    }

    /* Get the information about the instance */
    for (index = 0U; index < OSPI_IOM_NB_PORTS; index ++)
 80030f8:	2300      	movs	r3, #0
 80030fa:	60fb      	str	r3, [r7, #12]
 80030fc:	e074      	b.n	80031e8 <OSPIM_GetConfig+0x158>
    {
      reg = OCTOSPIM->PCR[index];
 80030fe:	4a3f      	ldr	r2, [pc, #252]	; (80031fc <OSPIM_GetConfig+0x16c>)
 8003100:	68fb      	ldr	r3, [r7, #12]
 8003102:	009b      	lsls	r3, r3, #2
 8003104:	4413      	add	r3, r2
 8003106:	685b      	ldr	r3, [r3, #4]
 8003108:	60bb      	str	r3, [r7, #8]

      if ((reg & OCTOSPIM_PCR_CLKEN) != 0U)
 800310a:	68bb      	ldr	r3, [r7, #8]
 800310c:	f003 0301 	and.w	r3, r3, #1
 8003110:	2b00      	cmp	r3, #0
 8003112:	d00a      	beq.n	800312a <OSPIM_GetConfig+0x9a>
      {
        /* The clock is enabled on this port */
        if ((reg & OCTOSPIM_PCR_CLKSRC) == (value & OCTOSPIM_PCR_CLKSRC))
 8003114:	68ba      	ldr	r2, [r7, #8]
 8003116:	693b      	ldr	r3, [r7, #16]
 8003118:	4053      	eors	r3, r2
 800311a:	f003 0302 	and.w	r3, r3, #2
 800311e:	2b00      	cmp	r3, #0
 8003120:	d103      	bne.n	800312a <OSPIM_GetConfig+0x9a>
        {
          /* The clock correspond to the instance passed as parameter */
          cfg->ClkPort = index+1U;
 8003122:	68fb      	ldr	r3, [r7, #12]
 8003124:	1c5a      	adds	r2, r3, #1
 8003126:	683b      	ldr	r3, [r7, #0]
 8003128:	601a      	str	r2, [r3, #0]
        }
      }

      if ((reg & OCTOSPIM_PCR_DQSEN) != 0U)
 800312a:	68bb      	ldr	r3, [r7, #8]
 800312c:	f003 0310 	and.w	r3, r3, #16
 8003130:	2b00      	cmp	r3, #0
 8003132:	d00a      	beq.n	800314a <OSPIM_GetConfig+0xba>
      {
        /* The DQS is enabled on this port */
        if ((reg & OCTOSPIM_PCR_DQSSRC) == (value & OCTOSPIM_PCR_DQSSRC))
 8003134:	68ba      	ldr	r2, [r7, #8]
 8003136:	693b      	ldr	r3, [r7, #16]
 8003138:	4053      	eors	r3, r2
 800313a:	f003 0320 	and.w	r3, r3, #32
 800313e:	2b00      	cmp	r3, #0
 8003140:	d103      	bne.n	800314a <OSPIM_GetConfig+0xba>
        {
          /* The DQS correspond to the instance passed as parameter */
          cfg->DQSPort = index+1U;
 8003142:	68fb      	ldr	r3, [r7, #12]
 8003144:	1c5a      	adds	r2, r3, #1
 8003146:	683b      	ldr	r3, [r7, #0]
 8003148:	605a      	str	r2, [r3, #4]
        }
      }

      if ((reg & OCTOSPIM_PCR_NCSEN) != 0U)
 800314a:	68bb      	ldr	r3, [r7, #8]
 800314c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003150:	2b00      	cmp	r3, #0
 8003152:	d00a      	beq.n	800316a <OSPIM_GetConfig+0xda>
      {
        /* The nCS is enabled on this port */
        if ((reg & OCTOSPIM_PCR_NCSSRC) == (value & OCTOSPIM_PCR_NCSSRC))
 8003154:	68ba      	ldr	r2, [r7, #8]
 8003156:	693b      	ldr	r3, [r7, #16]
 8003158:	4053      	eors	r3, r2
 800315a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800315e:	2b00      	cmp	r3, #0
 8003160:	d103      	bne.n	800316a <OSPIM_GetConfig+0xda>
        {
          /* The nCS correspond to the instance passed as parameter */
          cfg->NCSPort = index+1U;
 8003162:	68fb      	ldr	r3, [r7, #12]
 8003164:	1c5a      	adds	r2, r3, #1
 8003166:	683b      	ldr	r3, [r7, #0]
 8003168:	609a      	str	r2, [r3, #8]
        }
      }

      if ((reg & OCTOSPIM_PCR_IOLEN) != 0U)
 800316a:	68bb      	ldr	r3, [r7, #8]
 800316c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003170:	2b00      	cmp	r3, #0
 8003172:	d018      	beq.n	80031a6 <OSPIM_GetConfig+0x116>
      {
        /* The IO Low is enabled on this port */
        if ((reg & OCTOSPIM_PCR_IOLSRC_1) == (value & OCTOSPIM_PCR_IOLSRC_1))
 8003174:	68ba      	ldr	r2, [r7, #8]
 8003176:	693b      	ldr	r3, [r7, #16]
 8003178:	4053      	eors	r3, r2
 800317a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800317e:	2b00      	cmp	r3, #0
 8003180:	d111      	bne.n	80031a6 <OSPIM_GetConfig+0x116>
        {
          /* The IO Low correspond to the instance passed as parameter */
          if ((reg & OCTOSPIM_PCR_IOLSRC_0) == 0U)
 8003182:	68bb      	ldr	r3, [r7, #8]
 8003184:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003188:	2b00      	cmp	r3, #0
 800318a:	d106      	bne.n	800319a <OSPIM_GetConfig+0x10a>
          {
            cfg->IOLowPort = (OCTOSPIM_PCR_IOLEN | (index+1U));
 800318c:	68fb      	ldr	r3, [r7, #12]
 800318e:	3301      	adds	r3, #1
 8003190:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8003194:	683b      	ldr	r3, [r7, #0]
 8003196:	60da      	str	r2, [r3, #12]
 8003198:	e005      	b.n	80031a6 <OSPIM_GetConfig+0x116>
          }
          else
          {
            cfg->IOLowPort = (OCTOSPIM_PCR_IOHEN | (index+1U));
 800319a:	68fb      	ldr	r3, [r7, #12]
 800319c:	3301      	adds	r3, #1
 800319e:	f043 7280 	orr.w	r2, r3, #16777216	; 0x1000000
 80031a2:	683b      	ldr	r3, [r7, #0]
 80031a4:	60da      	str	r2, [r3, #12]
          }
        }
      }

      if ((reg & OCTOSPIM_PCR_IOHEN) != 0U)
 80031a6:	68bb      	ldr	r3, [r7, #8]
 80031a8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80031ac:	2b00      	cmp	r3, #0
 80031ae:	d018      	beq.n	80031e2 <OSPIM_GetConfig+0x152>
      {
        /* The IO High is enabled on this port */
        if ((reg & OCTOSPIM_PCR_IOHSRC_1) == (value & OCTOSPIM_PCR_IOHSRC_1))
 80031b0:	68ba      	ldr	r2, [r7, #8]
 80031b2:	693b      	ldr	r3, [r7, #16]
 80031b4:	4053      	eors	r3, r2
 80031b6:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80031ba:	2b00      	cmp	r3, #0
 80031bc:	d111      	bne.n	80031e2 <OSPIM_GetConfig+0x152>
        {
          /* The IO High correspond to the instance passed as parameter */
          if ((reg & OCTOSPIM_PCR_IOHSRC_0) == 0U)
 80031be:	68bb      	ldr	r3, [r7, #8]
 80031c0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80031c4:	2b00      	cmp	r3, #0
 80031c6:	d106      	bne.n	80031d6 <OSPIM_GetConfig+0x146>
          {
            cfg->IOHighPort = (OCTOSPIM_PCR_IOLEN | (index+1U));
 80031c8:	68fb      	ldr	r3, [r7, #12]
 80031ca:	3301      	adds	r3, #1
 80031cc:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80031d0:	683b      	ldr	r3, [r7, #0]
 80031d2:	611a      	str	r2, [r3, #16]
 80031d4:	e005      	b.n	80031e2 <OSPIM_GetConfig+0x152>
          }
          else
          {
            cfg->IOHighPort = (OCTOSPIM_PCR_IOHEN | (index+1U));
 80031d6:	68fb      	ldr	r3, [r7, #12]
 80031d8:	3301      	adds	r3, #1
 80031da:	f043 7280 	orr.w	r2, r3, #16777216	; 0x1000000
 80031de:	683b      	ldr	r3, [r7, #0]
 80031e0:	611a      	str	r2, [r3, #16]
    for (index = 0U; index < OSPI_IOM_NB_PORTS; index ++)
 80031e2:	68fb      	ldr	r3, [r7, #12]
 80031e4:	3301      	adds	r3, #1
 80031e6:	60fb      	str	r3, [r7, #12]
 80031e8:	68fb      	ldr	r3, [r7, #12]
 80031ea:	2b01      	cmp	r3, #1
 80031ec:	d987      	bls.n	80030fe <OSPIM_GetConfig+0x6e>
      }
    }
  }

  /* Return function status */
  return status;
 80031ee:	7dfb      	ldrb	r3, [r7, #23]
}
 80031f0:	4618      	mov	r0, r3
 80031f2:	371c      	adds	r7, #28
 80031f4:	46bd      	mov	sp, r7
 80031f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031fa:	4770      	bx	lr
 80031fc:	5200b400 	.word	0x5200b400
 8003200:	04040222 	.word	0x04040222

08003204 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8003204:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003206:	b08f      	sub	sp, #60	; 0x3c
 8003208:	af0a      	add	r7, sp, #40	; 0x28
 800320a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	2b00      	cmp	r3, #0
 8003210:	d101      	bne.n	8003216 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8003212:	2301      	movs	r3, #1
 8003214:	e116      	b.n	8003444 <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 8003222:	b2db      	uxtb	r3, r3
 8003224:	2b00      	cmp	r3, #0
 8003226:	d106      	bne.n	8003236 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	2200      	movs	r2, #0
 800322c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8003230:	6878      	ldr	r0, [r7, #4]
 8003232:	f00e fce5 	bl	8011c00 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	2203      	movs	r2, #3
 800323a:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 800323e:	68bb      	ldr	r3, [r7, #8]
 8003240:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003242:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003246:	2b00      	cmp	r3, #0
 8003248:	d102      	bne.n	8003250 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	2200      	movs	r2, #0
 800324e:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	4618      	mov	r0, r3
 8003256:	f008 fa6c 	bl	800b732 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	603b      	str	r3, [r7, #0]
 8003260:	687e      	ldr	r6, [r7, #4]
 8003262:	466d      	mov	r5, sp
 8003264:	f106 0410 	add.w	r4, r6, #16
 8003268:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800326a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800326c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800326e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003270:	e894 0003 	ldmia.w	r4, {r0, r1}
 8003274:	e885 0003 	stmia.w	r5, {r0, r1}
 8003278:	1d33      	adds	r3, r6, #4
 800327a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800327c:	6838      	ldr	r0, [r7, #0]
 800327e:	f008 f937 	bl	800b4f0 <USB_CoreInit>
 8003282:	4603      	mov	r3, r0
 8003284:	2b00      	cmp	r3, #0
 8003286:	d005      	beq.n	8003294 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	2202      	movs	r2, #2
 800328c:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8003290:	2301      	movs	r3, #1
 8003292:	e0d7      	b.n	8003444 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	2100      	movs	r1, #0
 800329a:	4618      	mov	r0, r3
 800329c:	f008 fa5a 	bl	800b754 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80032a0:	2300      	movs	r3, #0
 80032a2:	73fb      	strb	r3, [r7, #15]
 80032a4:	e04a      	b.n	800333c <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80032a6:	7bfa      	ldrb	r2, [r7, #15]
 80032a8:	6879      	ldr	r1, [r7, #4]
 80032aa:	4613      	mov	r3, r2
 80032ac:	00db      	lsls	r3, r3, #3
 80032ae:	1a9b      	subs	r3, r3, r2
 80032b0:	009b      	lsls	r3, r3, #2
 80032b2:	440b      	add	r3, r1
 80032b4:	333d      	adds	r3, #61	; 0x3d
 80032b6:	2201      	movs	r2, #1
 80032b8:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80032ba:	7bfa      	ldrb	r2, [r7, #15]
 80032bc:	6879      	ldr	r1, [r7, #4]
 80032be:	4613      	mov	r3, r2
 80032c0:	00db      	lsls	r3, r3, #3
 80032c2:	1a9b      	subs	r3, r3, r2
 80032c4:	009b      	lsls	r3, r3, #2
 80032c6:	440b      	add	r3, r1
 80032c8:	333c      	adds	r3, #60	; 0x3c
 80032ca:	7bfa      	ldrb	r2, [r7, #15]
 80032cc:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80032ce:	7bfa      	ldrb	r2, [r7, #15]
 80032d0:	7bfb      	ldrb	r3, [r7, #15]
 80032d2:	b298      	uxth	r0, r3
 80032d4:	6879      	ldr	r1, [r7, #4]
 80032d6:	4613      	mov	r3, r2
 80032d8:	00db      	lsls	r3, r3, #3
 80032da:	1a9b      	subs	r3, r3, r2
 80032dc:	009b      	lsls	r3, r3, #2
 80032de:	440b      	add	r3, r1
 80032e0:	3342      	adds	r3, #66	; 0x42
 80032e2:	4602      	mov	r2, r0
 80032e4:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80032e6:	7bfa      	ldrb	r2, [r7, #15]
 80032e8:	6879      	ldr	r1, [r7, #4]
 80032ea:	4613      	mov	r3, r2
 80032ec:	00db      	lsls	r3, r3, #3
 80032ee:	1a9b      	subs	r3, r3, r2
 80032f0:	009b      	lsls	r3, r3, #2
 80032f2:	440b      	add	r3, r1
 80032f4:	333f      	adds	r3, #63	; 0x3f
 80032f6:	2200      	movs	r2, #0
 80032f8:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80032fa:	7bfa      	ldrb	r2, [r7, #15]
 80032fc:	6879      	ldr	r1, [r7, #4]
 80032fe:	4613      	mov	r3, r2
 8003300:	00db      	lsls	r3, r3, #3
 8003302:	1a9b      	subs	r3, r3, r2
 8003304:	009b      	lsls	r3, r3, #2
 8003306:	440b      	add	r3, r1
 8003308:	3344      	adds	r3, #68	; 0x44
 800330a:	2200      	movs	r2, #0
 800330c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800330e:	7bfa      	ldrb	r2, [r7, #15]
 8003310:	6879      	ldr	r1, [r7, #4]
 8003312:	4613      	mov	r3, r2
 8003314:	00db      	lsls	r3, r3, #3
 8003316:	1a9b      	subs	r3, r3, r2
 8003318:	009b      	lsls	r3, r3, #2
 800331a:	440b      	add	r3, r1
 800331c:	3348      	adds	r3, #72	; 0x48
 800331e:	2200      	movs	r2, #0
 8003320:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8003322:	7bfa      	ldrb	r2, [r7, #15]
 8003324:	6879      	ldr	r1, [r7, #4]
 8003326:	4613      	mov	r3, r2
 8003328:	00db      	lsls	r3, r3, #3
 800332a:	1a9b      	subs	r3, r3, r2
 800332c:	009b      	lsls	r3, r3, #2
 800332e:	440b      	add	r3, r1
 8003330:	3350      	adds	r3, #80	; 0x50
 8003332:	2200      	movs	r2, #0
 8003334:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003336:	7bfb      	ldrb	r3, [r7, #15]
 8003338:	3301      	adds	r3, #1
 800333a:	73fb      	strb	r3, [r7, #15]
 800333c:	7bfa      	ldrb	r2, [r7, #15]
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	685b      	ldr	r3, [r3, #4]
 8003342:	429a      	cmp	r2, r3
 8003344:	d3af      	bcc.n	80032a6 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003346:	2300      	movs	r3, #0
 8003348:	73fb      	strb	r3, [r7, #15]
 800334a:	e044      	b.n	80033d6 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800334c:	7bfa      	ldrb	r2, [r7, #15]
 800334e:	6879      	ldr	r1, [r7, #4]
 8003350:	4613      	mov	r3, r2
 8003352:	00db      	lsls	r3, r3, #3
 8003354:	1a9b      	subs	r3, r3, r2
 8003356:	009b      	lsls	r3, r3, #2
 8003358:	440b      	add	r3, r1
 800335a:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 800335e:	2200      	movs	r2, #0
 8003360:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8003362:	7bfa      	ldrb	r2, [r7, #15]
 8003364:	6879      	ldr	r1, [r7, #4]
 8003366:	4613      	mov	r3, r2
 8003368:	00db      	lsls	r3, r3, #3
 800336a:	1a9b      	subs	r3, r3, r2
 800336c:	009b      	lsls	r3, r3, #2
 800336e:	440b      	add	r3, r1
 8003370:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 8003374:	7bfa      	ldrb	r2, [r7, #15]
 8003376:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8003378:	7bfa      	ldrb	r2, [r7, #15]
 800337a:	6879      	ldr	r1, [r7, #4]
 800337c:	4613      	mov	r3, r2
 800337e:	00db      	lsls	r3, r3, #3
 8003380:	1a9b      	subs	r3, r3, r2
 8003382:	009b      	lsls	r3, r3, #2
 8003384:	440b      	add	r3, r1
 8003386:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 800338a:	2200      	movs	r2, #0
 800338c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800338e:	7bfa      	ldrb	r2, [r7, #15]
 8003390:	6879      	ldr	r1, [r7, #4]
 8003392:	4613      	mov	r3, r2
 8003394:	00db      	lsls	r3, r3, #3
 8003396:	1a9b      	subs	r3, r3, r2
 8003398:	009b      	lsls	r3, r3, #2
 800339a:	440b      	add	r3, r1
 800339c:	f503 7301 	add.w	r3, r3, #516	; 0x204
 80033a0:	2200      	movs	r2, #0
 80033a2:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80033a4:	7bfa      	ldrb	r2, [r7, #15]
 80033a6:	6879      	ldr	r1, [r7, #4]
 80033a8:	4613      	mov	r3, r2
 80033aa:	00db      	lsls	r3, r3, #3
 80033ac:	1a9b      	subs	r3, r3, r2
 80033ae:	009b      	lsls	r3, r3, #2
 80033b0:	440b      	add	r3, r1
 80033b2:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80033b6:	2200      	movs	r2, #0
 80033b8:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80033ba:	7bfa      	ldrb	r2, [r7, #15]
 80033bc:	6879      	ldr	r1, [r7, #4]
 80033be:	4613      	mov	r3, r2
 80033c0:	00db      	lsls	r3, r3, #3
 80033c2:	1a9b      	subs	r3, r3, r2
 80033c4:	009b      	lsls	r3, r3, #2
 80033c6:	440b      	add	r3, r1
 80033c8:	f503 7304 	add.w	r3, r3, #528	; 0x210
 80033cc:	2200      	movs	r2, #0
 80033ce:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80033d0:	7bfb      	ldrb	r3, [r7, #15]
 80033d2:	3301      	adds	r3, #1
 80033d4:	73fb      	strb	r3, [r7, #15]
 80033d6:	7bfa      	ldrb	r2, [r7, #15]
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	685b      	ldr	r3, [r3, #4]
 80033dc:	429a      	cmp	r2, r3
 80033de:	d3b5      	bcc.n	800334c <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	603b      	str	r3, [r7, #0]
 80033e6:	687e      	ldr	r6, [r7, #4]
 80033e8:	466d      	mov	r5, sp
 80033ea:	f106 0410 	add.w	r4, r6, #16
 80033ee:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80033f0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80033f2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80033f4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80033f6:	e894 0003 	ldmia.w	r4, {r0, r1}
 80033fa:	e885 0003 	stmia.w	r5, {r0, r1}
 80033fe:	1d33      	adds	r3, r6, #4
 8003400:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003402:	6838      	ldr	r0, [r7, #0]
 8003404:	f008 f9d0 	bl	800b7a8 <USB_DevInit>
 8003408:	4603      	mov	r3, r0
 800340a:	2b00      	cmp	r3, #0
 800340c:	d005      	beq.n	800341a <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	2202      	movs	r2, #2
 8003412:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8003416:	2301      	movs	r3, #1
 8003418:	e014      	b.n	8003444 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	2200      	movs	r2, #0
 800341e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	2201      	movs	r2, #1
 8003426:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800342e:	2b01      	cmp	r3, #1
 8003430:	d102      	bne.n	8003438 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8003432:	6878      	ldr	r0, [r7, #4]
 8003434:	f001 f892 	bl	800455c <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	4618      	mov	r0, r3
 800343e:	f009 fa50 	bl	800c8e2 <USB_DevDisconnect>

  return HAL_OK;
 8003442:	2300      	movs	r3, #0
}
 8003444:	4618      	mov	r0, r3
 8003446:	3714      	adds	r7, #20
 8003448:	46bd      	mov	sp, r7
 800344a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800344c <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 800344c:	b580      	push	{r7, lr}
 800344e:	b084      	sub	sp, #16
 8003450:	af00      	add	r7, sp, #0
 8003452:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8003460:	2b01      	cmp	r3, #1
 8003462:	d101      	bne.n	8003468 <HAL_PCD_Start+0x1c>
 8003464:	2302      	movs	r3, #2
 8003466:	e020      	b.n	80034aa <HAL_PCD_Start+0x5e>
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	2201      	movs	r2, #1
 800346c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003474:	2b01      	cmp	r3, #1
 8003476:	d109      	bne.n	800348c <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 800347c:	2b01      	cmp	r3, #1
 800347e:	d005      	beq.n	800348c <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8003480:	68fb      	ldr	r3, [r7, #12]
 8003482:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003484:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8003488:	68fb      	ldr	r3, [r7, #12]
 800348a:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	4618      	mov	r0, r3
 8003492:	f008 f93d 	bl	800b710 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	4618      	mov	r0, r3
 800349c:	f009 fa00 	bl	800c8a0 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	2200      	movs	r2, #0
 80034a4:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 80034a8:	2300      	movs	r3, #0
}
 80034aa:	4618      	mov	r0, r3
 80034ac:	3710      	adds	r7, #16
 80034ae:	46bd      	mov	sp, r7
 80034b0:	bd80      	pop	{r7, pc}

080034b2 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80034b2:	b590      	push	{r4, r7, lr}
 80034b4:	b08d      	sub	sp, #52	; 0x34
 80034b6:	af00      	add	r7, sp, #0
 80034b8:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80034c0:	6a3b      	ldr	r3, [r7, #32]
 80034c2:	61fb      	str	r3, [r7, #28]
  uint32_t i, ep_intr, epint, epnum;
  uint32_t fifoemptymsk, temp;
  USB_OTG_EPTypeDef *ep;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	4618      	mov	r0, r3
 80034ca:	f009 fabe 	bl	800ca4a <USB_GetMode>
 80034ce:	4603      	mov	r3, r0
 80034d0:	2b00      	cmp	r3, #0
 80034d2:	f040 83ca 	bne.w	8003c6a <HAL_PCD_IRQHandler+0x7b8>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	4618      	mov	r0, r3
 80034dc:	f009 fa22 	bl	800c924 <USB_ReadInterrupts>
 80034e0:	4603      	mov	r3, r0
 80034e2:	2b00      	cmp	r3, #0
 80034e4:	f000 83c0 	beq.w	8003c68 <HAL_PCD_IRQHandler+0x7b6>
    {
      return;
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	4618      	mov	r0, r3
 80034ee:	f009 fa19 	bl	800c924 <USB_ReadInterrupts>
 80034f2:	4603      	mov	r3, r0
 80034f4:	f003 0302 	and.w	r3, r3, #2
 80034f8:	2b02      	cmp	r3, #2
 80034fa:	d107      	bne.n	800350c <HAL_PCD_IRQHandler+0x5a>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	695a      	ldr	r2, [r3, #20]
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	f002 0202 	and.w	r2, r2, #2
 800350a:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	4618      	mov	r0, r3
 8003512:	f009 fa07 	bl	800c924 <USB_ReadInterrupts>
 8003516:	4603      	mov	r3, r0
 8003518:	f003 0310 	and.w	r3, r3, #16
 800351c:	2b10      	cmp	r3, #16
 800351e:	d161      	bne.n	80035e4 <HAL_PCD_IRQHandler+0x132>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	699a      	ldr	r2, [r3, #24]
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	f022 0210 	bic.w	r2, r2, #16
 800352e:	619a      	str	r2, [r3, #24]

      temp = USBx->GRXSTSP;
 8003530:	6a3b      	ldr	r3, [r7, #32]
 8003532:	6a1b      	ldr	r3, [r3, #32]
 8003534:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 8003536:	69bb      	ldr	r3, [r7, #24]
 8003538:	f003 020f 	and.w	r2, r3, #15
 800353c:	4613      	mov	r3, r2
 800353e:	00db      	lsls	r3, r3, #3
 8003540:	1a9b      	subs	r3, r3, r2
 8003542:	009b      	lsls	r3, r3, #2
 8003544:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8003548:	687a      	ldr	r2, [r7, #4]
 800354a:	4413      	add	r3, r2
 800354c:	3304      	adds	r3, #4
 800354e:	617b      	str	r3, [r7, #20]

      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8003550:	69bb      	ldr	r3, [r7, #24]
 8003552:	0c5b      	lsrs	r3, r3, #17
 8003554:	f003 030f 	and.w	r3, r3, #15
 8003558:	2b02      	cmp	r3, #2
 800355a:	d124      	bne.n	80035a6 <HAL_PCD_IRQHandler+0xf4>
      {
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 800355c:	69ba      	ldr	r2, [r7, #24]
 800355e:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8003562:	4013      	ands	r3, r2
 8003564:	2b00      	cmp	r3, #0
 8003566:	d035      	beq.n	80035d4 <HAL_PCD_IRQHandler+0x122>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8003568:	697b      	ldr	r3, [r7, #20]
 800356a:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));
 800356c:	69bb      	ldr	r3, [r7, #24]
 800356e:	091b      	lsrs	r3, r3, #4
 8003570:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8003572:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003576:	b29b      	uxth	r3, r3
 8003578:	461a      	mov	r2, r3
 800357a:	6a38      	ldr	r0, [r7, #32]
 800357c:	f009 f83e 	bl	800c5fc <USB_ReadPacket>

          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003580:	697b      	ldr	r3, [r7, #20]
 8003582:	68da      	ldr	r2, [r3, #12]
 8003584:	69bb      	ldr	r3, [r7, #24]
 8003586:	091b      	lsrs	r3, r3, #4
 8003588:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800358c:	441a      	add	r2, r3
 800358e:	697b      	ldr	r3, [r7, #20]
 8003590:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003592:	697b      	ldr	r3, [r7, #20]
 8003594:	699a      	ldr	r2, [r3, #24]
 8003596:	69bb      	ldr	r3, [r7, #24]
 8003598:	091b      	lsrs	r3, r3, #4
 800359a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800359e:	441a      	add	r2, r3
 80035a0:	697b      	ldr	r3, [r7, #20]
 80035a2:	619a      	str	r2, [r3, #24]
 80035a4:	e016      	b.n	80035d4 <HAL_PCD_IRQHandler+0x122>
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 80035a6:	69bb      	ldr	r3, [r7, #24]
 80035a8:	0c5b      	lsrs	r3, r3, #17
 80035aa:	f003 030f 	and.w	r3, r3, #15
 80035ae:	2b06      	cmp	r3, #6
 80035b0:	d110      	bne.n	80035d4 <HAL_PCD_IRQHandler+0x122>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80035b8:	2208      	movs	r2, #8
 80035ba:	4619      	mov	r1, r3
 80035bc:	6a38      	ldr	r0, [r7, #32]
 80035be:	f009 f81d 	bl	800c5fc <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 80035c2:	697b      	ldr	r3, [r7, #20]
 80035c4:	699a      	ldr	r2, [r3, #24]
 80035c6:	69bb      	ldr	r3, [r7, #24]
 80035c8:	091b      	lsrs	r3, r3, #4
 80035ca:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80035ce:	441a      	add	r2, r3
 80035d0:	697b      	ldr	r3, [r7, #20]
 80035d2:	619a      	str	r2, [r3, #24]
      }
      else
      {
        /* ... */
      }
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	699a      	ldr	r2, [r3, #24]
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	f042 0210 	orr.w	r2, r2, #16
 80035e2:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	4618      	mov	r0, r3
 80035ea:	f009 f99b 	bl	800c924 <USB_ReadInterrupts>
 80035ee:	4603      	mov	r3, r0
 80035f0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80035f4:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80035f8:	d16e      	bne.n	80036d8 <HAL_PCD_IRQHandler+0x226>
    {
      epnum = 0U;
 80035fa:	2300      	movs	r3, #0
 80035fc:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	4618      	mov	r0, r3
 8003604:	f009 f9a1 	bl	800c94a <USB_ReadDevAllOutEpInterrupt>
 8003608:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 800360a:	e062      	b.n	80036d2 <HAL_PCD_IRQHandler+0x220>
      {
        if ((ep_intr & 0x1U) != 0U)
 800360c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800360e:	f003 0301 	and.w	r3, r3, #1
 8003612:	2b00      	cmp	r3, #0
 8003614:	d057      	beq.n	80036c6 <HAL_PCD_IRQHandler+0x214>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800361c:	b2d2      	uxtb	r2, r2
 800361e:	4611      	mov	r1, r2
 8003620:	4618      	mov	r0, r3
 8003622:	f009 f9c6 	bl	800c9b2 <USB_ReadDevOutEPInterrupt>
 8003626:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8003628:	693b      	ldr	r3, [r7, #16]
 800362a:	f003 0301 	and.w	r3, r3, #1
 800362e:	2b00      	cmp	r3, #0
 8003630:	d00c      	beq.n	800364c <HAL_PCD_IRQHandler+0x19a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8003632:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003634:	015a      	lsls	r2, r3, #5
 8003636:	69fb      	ldr	r3, [r7, #28]
 8003638:	4413      	add	r3, r2
 800363a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800363e:	461a      	mov	r2, r3
 8003640:	2301      	movs	r3, #1
 8003642:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8003644:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003646:	6878      	ldr	r0, [r7, #4]
 8003648:	f000 fdde 	bl	8004208 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 800364c:	693b      	ldr	r3, [r7, #16]
 800364e:	f003 0308 	and.w	r3, r3, #8
 8003652:	2b00      	cmp	r3, #0
 8003654:	d00c      	beq.n	8003670 <HAL_PCD_IRQHandler+0x1be>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8003656:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003658:	015a      	lsls	r2, r3, #5
 800365a:	69fb      	ldr	r3, [r7, #28]
 800365c:	4413      	add	r3, r2
 800365e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003662:	461a      	mov	r2, r3
 8003664:	2308      	movs	r3, #8
 8003666:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8003668:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800366a:	6878      	ldr	r0, [r7, #4]
 800366c:	f000 fed8 	bl	8004420 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8003670:	693b      	ldr	r3, [r7, #16]
 8003672:	f003 0310 	and.w	r3, r3, #16
 8003676:	2b00      	cmp	r3, #0
 8003678:	d008      	beq.n	800368c <HAL_PCD_IRQHandler+0x1da>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 800367a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800367c:	015a      	lsls	r2, r3, #5
 800367e:	69fb      	ldr	r3, [r7, #28]
 8003680:	4413      	add	r3, r2
 8003682:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003686:	461a      	mov	r2, r3
 8003688:	2310      	movs	r3, #16
 800368a:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800368c:	693b      	ldr	r3, [r7, #16]
 800368e:	f003 0320 	and.w	r3, r3, #32
 8003692:	2b00      	cmp	r3, #0
 8003694:	d008      	beq.n	80036a8 <HAL_PCD_IRQHandler+0x1f6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003696:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003698:	015a      	lsls	r2, r3, #5
 800369a:	69fb      	ldr	r3, [r7, #28]
 800369c:	4413      	add	r3, r2
 800369e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80036a2:	461a      	mov	r2, r3
 80036a4:	2320      	movs	r3, #32
 80036a6:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 80036a8:	693b      	ldr	r3, [r7, #16]
 80036aa:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80036ae:	2b00      	cmp	r3, #0
 80036b0:	d009      	beq.n	80036c6 <HAL_PCD_IRQHandler+0x214>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 80036b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036b4:	015a      	lsls	r2, r3, #5
 80036b6:	69fb      	ldr	r3, [r7, #28]
 80036b8:	4413      	add	r3, r2
 80036ba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80036be:	461a      	mov	r2, r3
 80036c0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80036c4:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 80036c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036c8:	3301      	adds	r3, #1
 80036ca:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 80036cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80036ce:	085b      	lsrs	r3, r3, #1
 80036d0:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 80036d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80036d4:	2b00      	cmp	r3, #0
 80036d6:	d199      	bne.n	800360c <HAL_PCD_IRQHandler+0x15a>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	4618      	mov	r0, r3
 80036de:	f009 f921 	bl	800c924 <USB_ReadInterrupts>
 80036e2:	4603      	mov	r3, r0
 80036e4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80036e8:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80036ec:	f040 80c0 	bne.w	8003870 <HAL_PCD_IRQHandler+0x3be>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	4618      	mov	r0, r3
 80036f6:	f009 f942 	bl	800c97e <USB_ReadDevAllInEpInterrupt>
 80036fa:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 80036fc:	2300      	movs	r3, #0
 80036fe:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8003700:	e0b2      	b.n	8003868 <HAL_PCD_IRQHandler+0x3b6>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8003702:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003704:	f003 0301 	and.w	r3, r3, #1
 8003708:	2b00      	cmp	r3, #0
 800370a:	f000 80a7 	beq.w	800385c <HAL_PCD_IRQHandler+0x3aa>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003714:	b2d2      	uxtb	r2, r2
 8003716:	4611      	mov	r1, r2
 8003718:	4618      	mov	r0, r3
 800371a:	f009 f968 	bl	800c9ee <USB_ReadDevInEPInterrupt>
 800371e:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8003720:	693b      	ldr	r3, [r7, #16]
 8003722:	f003 0301 	and.w	r3, r3, #1
 8003726:	2b00      	cmp	r3, #0
 8003728:	d057      	beq.n	80037da <HAL_PCD_IRQHandler+0x328>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800372a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800372c:	f003 030f 	and.w	r3, r3, #15
 8003730:	2201      	movs	r2, #1
 8003732:	fa02 f303 	lsl.w	r3, r2, r3
 8003736:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8003738:	69fb      	ldr	r3, [r7, #28]
 800373a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800373e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003740:	68fb      	ldr	r3, [r7, #12]
 8003742:	43db      	mvns	r3, r3
 8003744:	69f9      	ldr	r1, [r7, #28]
 8003746:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800374a:	4013      	ands	r3, r2
 800374c:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 800374e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003750:	015a      	lsls	r2, r3, #5
 8003752:	69fb      	ldr	r3, [r7, #28]
 8003754:	4413      	add	r3, r2
 8003756:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800375a:	461a      	mov	r2, r3
 800375c:	2301      	movs	r3, #1
 800375e:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	691b      	ldr	r3, [r3, #16]
 8003764:	2b01      	cmp	r3, #1
 8003766:	d132      	bne.n	80037ce <HAL_PCD_IRQHandler+0x31c>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8003768:	6879      	ldr	r1, [r7, #4]
 800376a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800376c:	4613      	mov	r3, r2
 800376e:	00db      	lsls	r3, r3, #3
 8003770:	1a9b      	subs	r3, r3, r2
 8003772:	009b      	lsls	r3, r3, #2
 8003774:	440b      	add	r3, r1
 8003776:	3348      	adds	r3, #72	; 0x48
 8003778:	6819      	ldr	r1, [r3, #0]
 800377a:	6878      	ldr	r0, [r7, #4]
 800377c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800377e:	4613      	mov	r3, r2
 8003780:	00db      	lsls	r3, r3, #3
 8003782:	1a9b      	subs	r3, r3, r2
 8003784:	009b      	lsls	r3, r3, #2
 8003786:	4403      	add	r3, r0
 8003788:	3344      	adds	r3, #68	; 0x44
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	4419      	add	r1, r3
 800378e:	6878      	ldr	r0, [r7, #4]
 8003790:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003792:	4613      	mov	r3, r2
 8003794:	00db      	lsls	r3, r3, #3
 8003796:	1a9b      	subs	r3, r3, r2
 8003798:	009b      	lsls	r3, r3, #2
 800379a:	4403      	add	r3, r0
 800379c:	3348      	adds	r3, #72	; 0x48
 800379e:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 80037a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037a2:	2b00      	cmp	r3, #0
 80037a4:	d113      	bne.n	80037ce <HAL_PCD_IRQHandler+0x31c>
 80037a6:	6879      	ldr	r1, [r7, #4]
 80037a8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80037aa:	4613      	mov	r3, r2
 80037ac:	00db      	lsls	r3, r3, #3
 80037ae:	1a9b      	subs	r3, r3, r2
 80037b0:	009b      	lsls	r3, r3, #2
 80037b2:	440b      	add	r3, r1
 80037b4:	3350      	adds	r3, #80	; 0x50
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	2b00      	cmp	r3, #0
 80037ba:	d108      	bne.n	80037ce <HAL_PCD_IRQHandler+0x31c>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	6818      	ldr	r0, [r3, #0]
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80037c6:	461a      	mov	r2, r3
 80037c8:	2101      	movs	r1, #1
 80037ca:	f009 f971 	bl	800cab0 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 80037ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037d0:	b2db      	uxtb	r3, r3
 80037d2:	4619      	mov	r1, r3
 80037d4:	6878      	ldr	r0, [r7, #4]
 80037d6:	f00e fb0e 	bl	8011df6 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 80037da:	693b      	ldr	r3, [r7, #16]
 80037dc:	f003 0308 	and.w	r3, r3, #8
 80037e0:	2b00      	cmp	r3, #0
 80037e2:	d008      	beq.n	80037f6 <HAL_PCD_IRQHandler+0x344>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 80037e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037e6:	015a      	lsls	r2, r3, #5
 80037e8:	69fb      	ldr	r3, [r7, #28]
 80037ea:	4413      	add	r3, r2
 80037ec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80037f0:	461a      	mov	r2, r3
 80037f2:	2308      	movs	r3, #8
 80037f4:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 80037f6:	693b      	ldr	r3, [r7, #16]
 80037f8:	f003 0310 	and.w	r3, r3, #16
 80037fc:	2b00      	cmp	r3, #0
 80037fe:	d008      	beq.n	8003812 <HAL_PCD_IRQHandler+0x360>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8003800:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003802:	015a      	lsls	r2, r3, #5
 8003804:	69fb      	ldr	r3, [r7, #28]
 8003806:	4413      	add	r3, r2
 8003808:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800380c:	461a      	mov	r2, r3
 800380e:	2310      	movs	r3, #16
 8003810:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8003812:	693b      	ldr	r3, [r7, #16]
 8003814:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003818:	2b00      	cmp	r3, #0
 800381a:	d008      	beq.n	800382e <HAL_PCD_IRQHandler+0x37c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 800381c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800381e:	015a      	lsls	r2, r3, #5
 8003820:	69fb      	ldr	r3, [r7, #28]
 8003822:	4413      	add	r3, r2
 8003824:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003828:	461a      	mov	r2, r3
 800382a:	2340      	movs	r3, #64	; 0x40
 800382c:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 800382e:	693b      	ldr	r3, [r7, #16]
 8003830:	f003 0302 	and.w	r3, r3, #2
 8003834:	2b00      	cmp	r3, #0
 8003836:	d008      	beq.n	800384a <HAL_PCD_IRQHandler+0x398>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8003838:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800383a:	015a      	lsls	r2, r3, #5
 800383c:	69fb      	ldr	r3, [r7, #28]
 800383e:	4413      	add	r3, r2
 8003840:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003844:	461a      	mov	r2, r3
 8003846:	2302      	movs	r3, #2
 8003848:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 800384a:	693b      	ldr	r3, [r7, #16]
 800384c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003850:	2b00      	cmp	r3, #0
 8003852:	d003      	beq.n	800385c <HAL_PCD_IRQHandler+0x3aa>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8003854:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003856:	6878      	ldr	r0, [r7, #4]
 8003858:	f000 fc48 	bl	80040ec <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 800385c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800385e:	3301      	adds	r3, #1
 8003860:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8003862:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003864:	085b      	lsrs	r3, r3, #1
 8003866:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8003868:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800386a:	2b00      	cmp	r3, #0
 800386c:	f47f af49 	bne.w	8003702 <HAL_PCD_IRQHandler+0x250>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	4618      	mov	r0, r3
 8003876:	f009 f855 	bl	800c924 <USB_ReadInterrupts>
 800387a:	4603      	mov	r3, r0
 800387c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003880:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003884:	d122      	bne.n	80038cc <HAL_PCD_IRQHandler+0x41a>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8003886:	69fb      	ldr	r3, [r7, #28]
 8003888:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800388c:	685b      	ldr	r3, [r3, #4]
 800388e:	69fa      	ldr	r2, [r7, #28]
 8003890:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003894:	f023 0301 	bic.w	r3, r3, #1
 8003898:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 80038a0:	2b01      	cmp	r3, #1
 80038a2:	d108      	bne.n	80038b6 <HAL_PCD_IRQHandler+0x404>
      {
        hpcd->LPM_State = LPM_L0;
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	2200      	movs	r2, #0
 80038a8:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 80038ac:	2100      	movs	r1, #0
 80038ae:	6878      	ldr	r0, [r7, #4]
 80038b0:	f000 fe78 	bl	80045a4 <HAL_PCDEx_LPM_Callback>
 80038b4:	e002      	b.n	80038bc <HAL_PCD_IRQHandler+0x40a>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 80038b6:	6878      	ldr	r0, [r7, #4]
 80038b8:	f00e fb14 	bl	8011ee4 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	695a      	ldr	r2, [r3, #20]
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 80038ca:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	4618      	mov	r0, r3
 80038d2:	f009 f827 	bl	800c924 <USB_ReadInterrupts>
 80038d6:	4603      	mov	r3, r0
 80038d8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80038dc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80038e0:	d112      	bne.n	8003908 <HAL_PCD_IRQHandler+0x456>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 80038e2:	69fb      	ldr	r3, [r7, #28]
 80038e4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80038e8:	689b      	ldr	r3, [r3, #8]
 80038ea:	f003 0301 	and.w	r3, r3, #1
 80038ee:	2b01      	cmp	r3, #1
 80038f0:	d102      	bne.n	80038f8 <HAL_PCD_IRQHandler+0x446>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 80038f2:	6878      	ldr	r0, [r7, #4]
 80038f4:	f00e fad0 	bl	8011e98 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	695a      	ldr	r2, [r3, #20]
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8003906:	615a      	str	r2, [r3, #20]
    }

    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	4618      	mov	r0, r3
 800390e:	f009 f809 	bl	800c924 <USB_ReadInterrupts>
 8003912:	4603      	mov	r3, r0
 8003914:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003918:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800391c:	d121      	bne.n	8003962 <HAL_PCD_IRQHandler+0x4b0>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	695a      	ldr	r2, [r3, #20]
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	f002 6200 	and.w	r2, r2, #134217728	; 0x8000000
 800392c:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 8003934:	2b00      	cmp	r3, #0
 8003936:	d111      	bne.n	800395c <HAL_PCD_IRQHandler+0x4aa>
      {
        hpcd->LPM_State = LPM_L1;
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	2201      	movs	r2, #1
 800393c:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003946:	089b      	lsrs	r3, r3, #2
 8003948:	f003 020f 	and.w	r2, r3, #15
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	f8c3 23f8 	str.w	r2, [r3, #1016]	; 0x3f8

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8003952:	2101      	movs	r1, #1
 8003954:	6878      	ldr	r0, [r7, #4]
 8003956:	f000 fe25 	bl	80045a4 <HAL_PCDEx_LPM_Callback>
 800395a:	e002      	b.n	8003962 <HAL_PCD_IRQHandler+0x4b0>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 800395c:	6878      	ldr	r0, [r7, #4]
 800395e:	f00e fa9b 	bl	8011e98 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	4618      	mov	r0, r3
 8003968:	f008 ffdc 	bl	800c924 <USB_ReadInterrupts>
 800396c:	4603      	mov	r3, r0
 800396e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003972:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003976:	f040 80c7 	bne.w	8003b08 <HAL_PCD_IRQHandler+0x656>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800397a:	69fb      	ldr	r3, [r7, #28]
 800397c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003980:	685b      	ldr	r3, [r3, #4]
 8003982:	69fa      	ldr	r2, [r7, #28]
 8003984:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003988:	f023 0301 	bic.w	r3, r3, #1
 800398c:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	2110      	movs	r1, #16
 8003994:	4618      	mov	r0, r3
 8003996:	f008 f865 	bl	800ba64 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800399a:	2300      	movs	r3, #0
 800399c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800399e:	e056      	b.n	8003a4e <HAL_PCD_IRQHandler+0x59c>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 80039a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80039a2:	015a      	lsls	r2, r3, #5
 80039a4:	69fb      	ldr	r3, [r7, #28]
 80039a6:	4413      	add	r3, r2
 80039a8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80039ac:	461a      	mov	r2, r3
 80039ae:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80039b2:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80039b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80039b6:	015a      	lsls	r2, r3, #5
 80039b8:	69fb      	ldr	r3, [r7, #28]
 80039ba:	4413      	add	r3, r2
 80039bc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80039c4:	0151      	lsls	r1, r2, #5
 80039c6:	69fa      	ldr	r2, [r7, #28]
 80039c8:	440a      	add	r2, r1
 80039ca:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80039ce:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80039d2:	6013      	str	r3, [r2, #0]
        USBx_INEP(i)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 80039d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80039d6:	015a      	lsls	r2, r3, #5
 80039d8:	69fb      	ldr	r3, [r7, #28]
 80039da:	4413      	add	r3, r2
 80039dc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80039e4:	0151      	lsls	r1, r2, #5
 80039e6:	69fa      	ldr	r2, [r7, #28]
 80039e8:	440a      	add	r2, r1
 80039ea:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80039ee:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80039f2:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 80039f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80039f6:	015a      	lsls	r2, r3, #5
 80039f8:	69fb      	ldr	r3, [r7, #28]
 80039fa:	4413      	add	r3, r2
 80039fc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003a00:	461a      	mov	r2, r3
 8003a02:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8003a06:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8003a08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003a0a:	015a      	lsls	r2, r3, #5
 8003a0c:	69fb      	ldr	r3, [r7, #28]
 8003a0e:	4413      	add	r3, r2
 8003a10:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003a18:	0151      	lsls	r1, r2, #5
 8003a1a:	69fa      	ldr	r2, [r7, #28]
 8003a1c:	440a      	add	r2, r1
 8003a1e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003a22:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8003a26:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8003a28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003a2a:	015a      	lsls	r2, r3, #5
 8003a2c:	69fb      	ldr	r3, [r7, #28]
 8003a2e:	4413      	add	r3, r2
 8003a30:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003a38:	0151      	lsls	r1, r2, #5
 8003a3a:	69fa      	ldr	r2, [r7, #28]
 8003a3c:	440a      	add	r2, r1
 8003a3e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003a42:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8003a46:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003a48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003a4a:	3301      	adds	r3, #1
 8003a4c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	685b      	ldr	r3, [r3, #4]
 8003a52:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003a54:	429a      	cmp	r2, r3
 8003a56:	d3a3      	bcc.n	80039a0 <HAL_PCD_IRQHandler+0x4ee>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8003a58:	69fb      	ldr	r3, [r7, #28]
 8003a5a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003a5e:	69db      	ldr	r3, [r3, #28]
 8003a60:	69fa      	ldr	r2, [r7, #28]
 8003a62:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003a66:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8003a6a:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a70:	2b00      	cmp	r3, #0
 8003a72:	d016      	beq.n	8003aa2 <HAL_PCD_IRQHandler+0x5f0>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8003a74:	69fb      	ldr	r3, [r7, #28]
 8003a76:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003a7a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003a7e:	69fa      	ldr	r2, [r7, #28]
 8003a80:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003a84:	f043 030b 	orr.w	r3, r3, #11
 8003a88:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8003a8c:	69fb      	ldr	r3, [r7, #28]
 8003a8e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003a92:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a94:	69fa      	ldr	r2, [r7, #28]
 8003a96:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003a9a:	f043 030b 	orr.w	r3, r3, #11
 8003a9e:	6453      	str	r3, [r2, #68]	; 0x44
 8003aa0:	e015      	b.n	8003ace <HAL_PCD_IRQHandler+0x61c>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8003aa2:	69fb      	ldr	r3, [r7, #28]
 8003aa4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003aa8:	695a      	ldr	r2, [r3, #20]
 8003aaa:	69fb      	ldr	r3, [r7, #28]
 8003aac:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003ab0:	4619      	mov	r1, r3
 8003ab2:	f242 032b 	movw	r3, #8235	; 0x202b
 8003ab6:	4313      	orrs	r3, r2
 8003ab8:	614b      	str	r3, [r1, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8003aba:	69fb      	ldr	r3, [r7, #28]
 8003abc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003ac0:	691b      	ldr	r3, [r3, #16]
 8003ac2:	69fa      	ldr	r2, [r7, #28]
 8003ac4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003ac8:	f043 030b 	orr.w	r3, r3, #11
 8003acc:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8003ace:	69fb      	ldr	r3, [r7, #28]
 8003ad0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	69fa      	ldr	r2, [r7, #28]
 8003ad8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003adc:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8003ae0:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	6818      	ldr	r0, [r3, #0]
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	691b      	ldr	r3, [r3, #16]
 8003aea:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8003af2:	461a      	mov	r2, r3
 8003af4:	f008 ffdc 	bl	800cab0 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	695a      	ldr	r2, [r3, #20]
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8003b06:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	4618      	mov	r0, r3
 8003b0e:	f008 ff09 	bl	800c924 <USB_ReadInterrupts>
 8003b12:	4603      	mov	r3, r0
 8003b14:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003b18:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003b1c:	d124      	bne.n	8003b68 <HAL_PCD_IRQHandler+0x6b6>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	4618      	mov	r0, r3
 8003b24:	f008 ffa0 	bl	800ca68 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	4618      	mov	r0, r3
 8003b2e:	f007 fffa 	bl	800bb26 <USB_GetDevSpeed>
 8003b32:	4603      	mov	r3, r0
 8003b34:	461a      	mov	r2, r3
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	681c      	ldr	r4, [r3, #0]
 8003b3e:	f001 fc65 	bl	800540c <HAL_RCC_GetHCLKFreq>
 8003b42:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8003b48:	b2db      	uxtb	r3, r3
 8003b4a:	461a      	mov	r2, r3
 8003b4c:	4620      	mov	r0, r4
 8003b4e:	f007 fd3d 	bl	800b5cc <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8003b52:	6878      	ldr	r0, [r7, #4]
 8003b54:	f00e f977 	bl	8011e46 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	695a      	ldr	r2, [r3, #20]
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8003b66:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	4618      	mov	r0, r3
 8003b6e:	f008 fed9 	bl	800c924 <USB_ReadInterrupts>
 8003b72:	4603      	mov	r3, r0
 8003b74:	f003 0308 	and.w	r3, r3, #8
 8003b78:	2b08      	cmp	r3, #8
 8003b7a:	d10a      	bne.n	8003b92 <HAL_PCD_IRQHandler+0x6e0>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8003b7c:	6878      	ldr	r0, [r7, #4]
 8003b7e:	f00e f954 	bl	8011e2a <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	695a      	ldr	r2, [r3, #20]
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	f002 0208 	and.w	r2, r2, #8
 8003b90:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	4618      	mov	r0, r3
 8003b98:	f008 fec4 	bl	800c924 <USB_ReadInterrupts>
 8003b9c:	4603      	mov	r3, r0
 8003b9e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003ba2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003ba6:	d10f      	bne.n	8003bc8 <HAL_PCD_IRQHandler+0x716>
    {
      /* Keep application checking the corresponding Iso IN endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8003ba8:	2300      	movs	r3, #0
 8003baa:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8003bac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bae:	b2db      	uxtb	r3, r3
 8003bb0:	4619      	mov	r1, r3
 8003bb2:	6878      	ldr	r0, [r7, #4]
 8003bb4:	f00e f9b6 	bl	8011f24 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	695a      	ldr	r2, [r3, #20]
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8003bc6:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	4618      	mov	r0, r3
 8003bce:	f008 fea9 	bl	800c924 <USB_ReadInterrupts>
 8003bd2:	4603      	mov	r3, r0
 8003bd4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003bd8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003bdc:	d10f      	bne.n	8003bfe <HAL_PCD_IRQHandler+0x74c>
    {
      /* Keep application checking the corresponding Iso OUT endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8003bde:	2300      	movs	r3, #0
 8003be0:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8003be2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003be4:	b2db      	uxtb	r3, r3
 8003be6:	4619      	mov	r1, r3
 8003be8:	6878      	ldr	r0, [r7, #4]
 8003bea:	f00e f989 	bl	8011f00 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	695a      	ldr	r2, [r3, #20]
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8003bfc:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	4618      	mov	r0, r3
 8003c04:	f008 fe8e 	bl	800c924 <USB_ReadInterrupts>
 8003c08:	4603      	mov	r3, r0
 8003c0a:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8003c0e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003c12:	d10a      	bne.n	8003c2a <HAL_PCD_IRQHandler+0x778>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8003c14:	6878      	ldr	r0, [r7, #4]
 8003c16:	f00e f997 	bl	8011f48 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	695a      	ldr	r2, [r3, #20]
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8003c28:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	4618      	mov	r0, r3
 8003c30:	f008 fe78 	bl	800c924 <USB_ReadInterrupts>
 8003c34:	4603      	mov	r3, r0
 8003c36:	f003 0304 	and.w	r3, r3, #4
 8003c3a:	2b04      	cmp	r3, #4
 8003c3c:	d115      	bne.n	8003c6a <HAL_PCD_IRQHandler+0x7b8>
    {
      temp = hpcd->Instance->GOTGINT;
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	685b      	ldr	r3, [r3, #4]
 8003c44:	61bb      	str	r3, [r7, #24]

      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8003c46:	69bb      	ldr	r3, [r7, #24]
 8003c48:	f003 0304 	and.w	r3, r3, #4
 8003c4c:	2b00      	cmp	r3, #0
 8003c4e:	d002      	beq.n	8003c56 <HAL_PCD_IRQHandler+0x7a4>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8003c50:	6878      	ldr	r0, [r7, #4]
 8003c52:	f00e f987 	bl	8011f64 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	6859      	ldr	r1, [r3, #4]
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	69ba      	ldr	r2, [r7, #24]
 8003c62:	430a      	orrs	r2, r1
 8003c64:	605a      	str	r2, [r3, #4]
 8003c66:	e000      	b.n	8003c6a <HAL_PCD_IRQHandler+0x7b8>
      return;
 8003c68:	bf00      	nop
    }
  }
}
 8003c6a:	3734      	adds	r7, #52	; 0x34
 8003c6c:	46bd      	mov	sp, r7
 8003c6e:	bd90      	pop	{r4, r7, pc}

08003c70 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8003c70:	b580      	push	{r7, lr}
 8003c72:	b082      	sub	sp, #8
 8003c74:	af00      	add	r7, sp, #0
 8003c76:	6078      	str	r0, [r7, #4]
 8003c78:	460b      	mov	r3, r1
 8003c7a:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8003c82:	2b01      	cmp	r3, #1
 8003c84:	d101      	bne.n	8003c8a <HAL_PCD_SetAddress+0x1a>
 8003c86:	2302      	movs	r3, #2
 8003c88:	e013      	b.n	8003cb2 <HAL_PCD_SetAddress+0x42>
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	2201      	movs	r2, #1
 8003c8e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  hpcd->USB_Address = address;
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	78fa      	ldrb	r2, [r7, #3]
 8003c96:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	78fa      	ldrb	r2, [r7, #3]
 8003ca0:	4611      	mov	r1, r2
 8003ca2:	4618      	mov	r0, r3
 8003ca4:	f008 fdd6 	bl	800c854 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	2200      	movs	r2, #0
 8003cac:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8003cb0:	2300      	movs	r3, #0
}
 8003cb2:	4618      	mov	r0, r3
 8003cb4:	3708      	adds	r7, #8
 8003cb6:	46bd      	mov	sp, r7
 8003cb8:	bd80      	pop	{r7, pc}

08003cba <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8003cba:	b580      	push	{r7, lr}
 8003cbc:	b084      	sub	sp, #16
 8003cbe:	af00      	add	r7, sp, #0
 8003cc0:	6078      	str	r0, [r7, #4]
 8003cc2:	4608      	mov	r0, r1
 8003cc4:	4611      	mov	r1, r2
 8003cc6:	461a      	mov	r2, r3
 8003cc8:	4603      	mov	r3, r0
 8003cca:	70fb      	strb	r3, [r7, #3]
 8003ccc:	460b      	mov	r3, r1
 8003cce:	803b      	strh	r3, [r7, #0]
 8003cd0:	4613      	mov	r3, r2
 8003cd2:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8003cd4:	2300      	movs	r3, #0
 8003cd6:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003cd8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003cdc:	2b00      	cmp	r3, #0
 8003cde:	da0f      	bge.n	8003d00 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003ce0:	78fb      	ldrb	r3, [r7, #3]
 8003ce2:	f003 020f 	and.w	r2, r3, #15
 8003ce6:	4613      	mov	r3, r2
 8003ce8:	00db      	lsls	r3, r3, #3
 8003cea:	1a9b      	subs	r3, r3, r2
 8003cec:	009b      	lsls	r3, r3, #2
 8003cee:	3338      	adds	r3, #56	; 0x38
 8003cf0:	687a      	ldr	r2, [r7, #4]
 8003cf2:	4413      	add	r3, r2
 8003cf4:	3304      	adds	r3, #4
 8003cf6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003cf8:	68fb      	ldr	r3, [r7, #12]
 8003cfa:	2201      	movs	r2, #1
 8003cfc:	705a      	strb	r2, [r3, #1]
 8003cfe:	e00f      	b.n	8003d20 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003d00:	78fb      	ldrb	r3, [r7, #3]
 8003d02:	f003 020f 	and.w	r2, r3, #15
 8003d06:	4613      	mov	r3, r2
 8003d08:	00db      	lsls	r3, r3, #3
 8003d0a:	1a9b      	subs	r3, r3, r2
 8003d0c:	009b      	lsls	r3, r3, #2
 8003d0e:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8003d12:	687a      	ldr	r2, [r7, #4]
 8003d14:	4413      	add	r3, r2
 8003d16:	3304      	adds	r3, #4
 8003d18:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003d1a:	68fb      	ldr	r3, [r7, #12]
 8003d1c:	2200      	movs	r2, #0
 8003d1e:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8003d20:	78fb      	ldrb	r3, [r7, #3]
 8003d22:	f003 030f 	and.w	r3, r3, #15
 8003d26:	b2da      	uxtb	r2, r3
 8003d28:	68fb      	ldr	r3, [r7, #12]
 8003d2a:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8003d2c:	883a      	ldrh	r2, [r7, #0]
 8003d2e:	68fb      	ldr	r3, [r7, #12]
 8003d30:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8003d32:	68fb      	ldr	r3, [r7, #12]
 8003d34:	78ba      	ldrb	r2, [r7, #2]
 8003d36:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8003d38:	68fb      	ldr	r3, [r7, #12]
 8003d3a:	785b      	ldrb	r3, [r3, #1]
 8003d3c:	2b00      	cmp	r3, #0
 8003d3e:	d004      	beq.n	8003d4a <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8003d40:	68fb      	ldr	r3, [r7, #12]
 8003d42:	781b      	ldrb	r3, [r3, #0]
 8003d44:	b29a      	uxth	r2, r3
 8003d46:	68fb      	ldr	r3, [r7, #12]
 8003d48:	80da      	strh	r2, [r3, #6]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8003d4a:	78bb      	ldrb	r3, [r7, #2]
 8003d4c:	2b02      	cmp	r3, #2
 8003d4e:	d102      	bne.n	8003d56 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8003d50:	68fb      	ldr	r3, [r7, #12]
 8003d52:	2200      	movs	r2, #0
 8003d54:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8003d5c:	2b01      	cmp	r3, #1
 8003d5e:	d101      	bne.n	8003d64 <HAL_PCD_EP_Open+0xaa>
 8003d60:	2302      	movs	r3, #2
 8003d62:	e00e      	b.n	8003d82 <HAL_PCD_EP_Open+0xc8>
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	2201      	movs	r2, #1
 8003d68:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	68f9      	ldr	r1, [r7, #12]
 8003d72:	4618      	mov	r0, r3
 8003d74:	f007 fefc 	bl	800bb70 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	2200      	movs	r2, #0
 8003d7c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return ret;
 8003d80:	7afb      	ldrb	r3, [r7, #11]
}
 8003d82:	4618      	mov	r0, r3
 8003d84:	3710      	adds	r7, #16
 8003d86:	46bd      	mov	sp, r7
 8003d88:	bd80      	pop	{r7, pc}

08003d8a <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003d8a:	b580      	push	{r7, lr}
 8003d8c:	b084      	sub	sp, #16
 8003d8e:	af00      	add	r7, sp, #0
 8003d90:	6078      	str	r0, [r7, #4]
 8003d92:	460b      	mov	r3, r1
 8003d94:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003d96:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003d9a:	2b00      	cmp	r3, #0
 8003d9c:	da0f      	bge.n	8003dbe <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003d9e:	78fb      	ldrb	r3, [r7, #3]
 8003da0:	f003 020f 	and.w	r2, r3, #15
 8003da4:	4613      	mov	r3, r2
 8003da6:	00db      	lsls	r3, r3, #3
 8003da8:	1a9b      	subs	r3, r3, r2
 8003daa:	009b      	lsls	r3, r3, #2
 8003dac:	3338      	adds	r3, #56	; 0x38
 8003dae:	687a      	ldr	r2, [r7, #4]
 8003db0:	4413      	add	r3, r2
 8003db2:	3304      	adds	r3, #4
 8003db4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003db6:	68fb      	ldr	r3, [r7, #12]
 8003db8:	2201      	movs	r2, #1
 8003dba:	705a      	strb	r2, [r3, #1]
 8003dbc:	e00f      	b.n	8003dde <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003dbe:	78fb      	ldrb	r3, [r7, #3]
 8003dc0:	f003 020f 	and.w	r2, r3, #15
 8003dc4:	4613      	mov	r3, r2
 8003dc6:	00db      	lsls	r3, r3, #3
 8003dc8:	1a9b      	subs	r3, r3, r2
 8003dca:	009b      	lsls	r3, r3, #2
 8003dcc:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8003dd0:	687a      	ldr	r2, [r7, #4]
 8003dd2:	4413      	add	r3, r2
 8003dd4:	3304      	adds	r3, #4
 8003dd6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003dd8:	68fb      	ldr	r3, [r7, #12]
 8003dda:	2200      	movs	r2, #0
 8003ddc:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8003dde:	78fb      	ldrb	r3, [r7, #3]
 8003de0:	f003 030f 	and.w	r3, r3, #15
 8003de4:	b2da      	uxtb	r2, r3
 8003de6:	68fb      	ldr	r3, [r7, #12]
 8003de8:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8003df0:	2b01      	cmp	r3, #1
 8003df2:	d101      	bne.n	8003df8 <HAL_PCD_EP_Close+0x6e>
 8003df4:	2302      	movs	r3, #2
 8003df6:	e00e      	b.n	8003e16 <HAL_PCD_EP_Close+0x8c>
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	2201      	movs	r2, #1
 8003dfc:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	68f9      	ldr	r1, [r7, #12]
 8003e06:	4618      	mov	r0, r3
 8003e08:	f007 ff3a 	bl	800bc80 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	2200      	movs	r2, #0
 8003e10:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 8003e14:	2300      	movs	r3, #0
}
 8003e16:	4618      	mov	r0, r3
 8003e18:	3710      	adds	r7, #16
 8003e1a:	46bd      	mov	sp, r7
 8003e1c:	bd80      	pop	{r7, pc}

08003e1e <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003e1e:	b580      	push	{r7, lr}
 8003e20:	b086      	sub	sp, #24
 8003e22:	af00      	add	r7, sp, #0
 8003e24:	60f8      	str	r0, [r7, #12]
 8003e26:	607a      	str	r2, [r7, #4]
 8003e28:	603b      	str	r3, [r7, #0]
 8003e2a:	460b      	mov	r3, r1
 8003e2c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003e2e:	7afb      	ldrb	r3, [r7, #11]
 8003e30:	f003 020f 	and.w	r2, r3, #15
 8003e34:	4613      	mov	r3, r2
 8003e36:	00db      	lsls	r3, r3, #3
 8003e38:	1a9b      	subs	r3, r3, r2
 8003e3a:	009b      	lsls	r3, r3, #2
 8003e3c:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8003e40:	68fa      	ldr	r2, [r7, #12]
 8003e42:	4413      	add	r3, r2
 8003e44:	3304      	adds	r3, #4
 8003e46:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003e48:	697b      	ldr	r3, [r7, #20]
 8003e4a:	687a      	ldr	r2, [r7, #4]
 8003e4c:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8003e4e:	697b      	ldr	r3, [r7, #20]
 8003e50:	683a      	ldr	r2, [r7, #0]
 8003e52:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8003e54:	697b      	ldr	r3, [r7, #20]
 8003e56:	2200      	movs	r2, #0
 8003e58:	619a      	str	r2, [r3, #24]
  ep->is_in = 0U;
 8003e5a:	697b      	ldr	r3, [r7, #20]
 8003e5c:	2200      	movs	r2, #0
 8003e5e:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003e60:	7afb      	ldrb	r3, [r7, #11]
 8003e62:	f003 030f 	and.w	r3, r3, #15
 8003e66:	b2da      	uxtb	r2, r3
 8003e68:	697b      	ldr	r3, [r7, #20]
 8003e6a:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8003e6c:	68fb      	ldr	r3, [r7, #12]
 8003e6e:	691b      	ldr	r3, [r3, #16]
 8003e70:	2b01      	cmp	r3, #1
 8003e72:	d102      	bne.n	8003e7a <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8003e74:	687a      	ldr	r2, [r7, #4]
 8003e76:	697b      	ldr	r3, [r7, #20]
 8003e78:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003e7a:	7afb      	ldrb	r3, [r7, #11]
 8003e7c:	f003 030f 	and.w	r3, r3, #15
 8003e80:	2b00      	cmp	r3, #0
 8003e82:	d109      	bne.n	8003e98 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003e84:	68fb      	ldr	r3, [r7, #12]
 8003e86:	6818      	ldr	r0, [r3, #0]
 8003e88:	68fb      	ldr	r3, [r7, #12]
 8003e8a:	691b      	ldr	r3, [r3, #16]
 8003e8c:	b2db      	uxtb	r3, r3
 8003e8e:	461a      	mov	r2, r3
 8003e90:	6979      	ldr	r1, [r7, #20]
 8003e92:	f008 fa1d 	bl	800c2d0 <USB_EP0StartXfer>
 8003e96:	e008      	b.n	8003eaa <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003e98:	68fb      	ldr	r3, [r7, #12]
 8003e9a:	6818      	ldr	r0, [r3, #0]
 8003e9c:	68fb      	ldr	r3, [r7, #12]
 8003e9e:	691b      	ldr	r3, [r3, #16]
 8003ea0:	b2db      	uxtb	r3, r3
 8003ea2:	461a      	mov	r2, r3
 8003ea4:	6979      	ldr	r1, [r7, #20]
 8003ea6:	f007 ffc7 	bl	800be38 <USB_EPStartXfer>
  }

  return HAL_OK;
 8003eaa:	2300      	movs	r3, #0
}
 8003eac:	4618      	mov	r0, r3
 8003eae:	3718      	adds	r7, #24
 8003eb0:	46bd      	mov	sp, r7
 8003eb2:	bd80      	pop	{r7, pc}

08003eb4 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003eb4:	b480      	push	{r7}
 8003eb6:	b083      	sub	sp, #12
 8003eb8:	af00      	add	r7, sp, #0
 8003eba:	6078      	str	r0, [r7, #4]
 8003ebc:	460b      	mov	r3, r1
 8003ebe:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8003ec0:	78fb      	ldrb	r3, [r7, #3]
 8003ec2:	f003 020f 	and.w	r2, r3, #15
 8003ec6:	6879      	ldr	r1, [r7, #4]
 8003ec8:	4613      	mov	r3, r2
 8003eca:	00db      	lsls	r3, r3, #3
 8003ecc:	1a9b      	subs	r3, r3, r2
 8003ece:	009b      	lsls	r3, r3, #2
 8003ed0:	440b      	add	r3, r1
 8003ed2:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8003ed6:	681b      	ldr	r3, [r3, #0]
}
 8003ed8:	4618      	mov	r0, r3
 8003eda:	370c      	adds	r7, #12
 8003edc:	46bd      	mov	sp, r7
 8003ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ee2:	4770      	bx	lr

08003ee4 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003ee4:	b580      	push	{r7, lr}
 8003ee6:	b086      	sub	sp, #24
 8003ee8:	af00      	add	r7, sp, #0
 8003eea:	60f8      	str	r0, [r7, #12]
 8003eec:	607a      	str	r2, [r7, #4]
 8003eee:	603b      	str	r3, [r7, #0]
 8003ef0:	460b      	mov	r3, r1
 8003ef2:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003ef4:	7afb      	ldrb	r3, [r7, #11]
 8003ef6:	f003 020f 	and.w	r2, r3, #15
 8003efa:	4613      	mov	r3, r2
 8003efc:	00db      	lsls	r3, r3, #3
 8003efe:	1a9b      	subs	r3, r3, r2
 8003f00:	009b      	lsls	r3, r3, #2
 8003f02:	3338      	adds	r3, #56	; 0x38
 8003f04:	68fa      	ldr	r2, [r7, #12]
 8003f06:	4413      	add	r3, r2
 8003f08:	3304      	adds	r3, #4
 8003f0a:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003f0c:	697b      	ldr	r3, [r7, #20]
 8003f0e:	687a      	ldr	r2, [r7, #4]
 8003f10:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8003f12:	697b      	ldr	r3, [r7, #20]
 8003f14:	683a      	ldr	r2, [r7, #0]
 8003f16:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8003f18:	697b      	ldr	r3, [r7, #20]
 8003f1a:	2200      	movs	r2, #0
 8003f1c:	619a      	str	r2, [r3, #24]
  ep->is_in = 1U;
 8003f1e:	697b      	ldr	r3, [r7, #20]
 8003f20:	2201      	movs	r2, #1
 8003f22:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003f24:	7afb      	ldrb	r3, [r7, #11]
 8003f26:	f003 030f 	and.w	r3, r3, #15
 8003f2a:	b2da      	uxtb	r2, r3
 8003f2c:	697b      	ldr	r3, [r7, #20]
 8003f2e:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8003f30:	68fb      	ldr	r3, [r7, #12]
 8003f32:	691b      	ldr	r3, [r3, #16]
 8003f34:	2b01      	cmp	r3, #1
 8003f36:	d102      	bne.n	8003f3e <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8003f38:	687a      	ldr	r2, [r7, #4]
 8003f3a:	697b      	ldr	r3, [r7, #20]
 8003f3c:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003f3e:	7afb      	ldrb	r3, [r7, #11]
 8003f40:	f003 030f 	and.w	r3, r3, #15
 8003f44:	2b00      	cmp	r3, #0
 8003f46:	d109      	bne.n	8003f5c <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003f48:	68fb      	ldr	r3, [r7, #12]
 8003f4a:	6818      	ldr	r0, [r3, #0]
 8003f4c:	68fb      	ldr	r3, [r7, #12]
 8003f4e:	691b      	ldr	r3, [r3, #16]
 8003f50:	b2db      	uxtb	r3, r3
 8003f52:	461a      	mov	r2, r3
 8003f54:	6979      	ldr	r1, [r7, #20]
 8003f56:	f008 f9bb 	bl	800c2d0 <USB_EP0StartXfer>
 8003f5a:	e008      	b.n	8003f6e <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003f5c:	68fb      	ldr	r3, [r7, #12]
 8003f5e:	6818      	ldr	r0, [r3, #0]
 8003f60:	68fb      	ldr	r3, [r7, #12]
 8003f62:	691b      	ldr	r3, [r3, #16]
 8003f64:	b2db      	uxtb	r3, r3
 8003f66:	461a      	mov	r2, r3
 8003f68:	6979      	ldr	r1, [r7, #20]
 8003f6a:	f007 ff65 	bl	800be38 <USB_EPStartXfer>
  }

  return HAL_OK;
 8003f6e:	2300      	movs	r3, #0
}
 8003f70:	4618      	mov	r0, r3
 8003f72:	3718      	adds	r7, #24
 8003f74:	46bd      	mov	sp, r7
 8003f76:	bd80      	pop	{r7, pc}

08003f78 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003f78:	b580      	push	{r7, lr}
 8003f7a:	b084      	sub	sp, #16
 8003f7c:	af00      	add	r7, sp, #0
 8003f7e:	6078      	str	r0, [r7, #4]
 8003f80:	460b      	mov	r3, r1
 8003f82:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8003f84:	78fb      	ldrb	r3, [r7, #3]
 8003f86:	f003 020f 	and.w	r2, r3, #15
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	685b      	ldr	r3, [r3, #4]
 8003f8e:	429a      	cmp	r2, r3
 8003f90:	d901      	bls.n	8003f96 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8003f92:	2301      	movs	r3, #1
 8003f94:	e050      	b.n	8004038 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003f96:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003f9a:	2b00      	cmp	r3, #0
 8003f9c:	da0f      	bge.n	8003fbe <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003f9e:	78fb      	ldrb	r3, [r7, #3]
 8003fa0:	f003 020f 	and.w	r2, r3, #15
 8003fa4:	4613      	mov	r3, r2
 8003fa6:	00db      	lsls	r3, r3, #3
 8003fa8:	1a9b      	subs	r3, r3, r2
 8003faa:	009b      	lsls	r3, r3, #2
 8003fac:	3338      	adds	r3, #56	; 0x38
 8003fae:	687a      	ldr	r2, [r7, #4]
 8003fb0:	4413      	add	r3, r2
 8003fb2:	3304      	adds	r3, #4
 8003fb4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003fb6:	68fb      	ldr	r3, [r7, #12]
 8003fb8:	2201      	movs	r2, #1
 8003fba:	705a      	strb	r2, [r3, #1]
 8003fbc:	e00d      	b.n	8003fda <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8003fbe:	78fa      	ldrb	r2, [r7, #3]
 8003fc0:	4613      	mov	r3, r2
 8003fc2:	00db      	lsls	r3, r3, #3
 8003fc4:	1a9b      	subs	r3, r3, r2
 8003fc6:	009b      	lsls	r3, r3, #2
 8003fc8:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8003fcc:	687a      	ldr	r2, [r7, #4]
 8003fce:	4413      	add	r3, r2
 8003fd0:	3304      	adds	r3, #4
 8003fd2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003fd4:	68fb      	ldr	r3, [r7, #12]
 8003fd6:	2200      	movs	r2, #0
 8003fd8:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8003fda:	68fb      	ldr	r3, [r7, #12]
 8003fdc:	2201      	movs	r2, #1
 8003fde:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003fe0:	78fb      	ldrb	r3, [r7, #3]
 8003fe2:	f003 030f 	and.w	r3, r3, #15
 8003fe6:	b2da      	uxtb	r2, r3
 8003fe8:	68fb      	ldr	r3, [r7, #12]
 8003fea:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8003ff2:	2b01      	cmp	r3, #1
 8003ff4:	d101      	bne.n	8003ffa <HAL_PCD_EP_SetStall+0x82>
 8003ff6:	2302      	movs	r3, #2
 8003ff8:	e01e      	b.n	8004038 <HAL_PCD_EP_SetStall+0xc0>
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	2201      	movs	r2, #1
 8003ffe:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	68f9      	ldr	r1, [r7, #12]
 8004008:	4618      	mov	r0, r3
 800400a:	f008 fb4f 	bl	800c6ac <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800400e:	78fb      	ldrb	r3, [r7, #3]
 8004010:	f003 030f 	and.w	r3, r3, #15
 8004014:	2b00      	cmp	r3, #0
 8004016:	d10a      	bne.n	800402e <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	6818      	ldr	r0, [r3, #0]
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	691b      	ldr	r3, [r3, #16]
 8004020:	b2d9      	uxtb	r1, r3
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8004028:	461a      	mov	r2, r3
 800402a:	f008 fd41 	bl	800cab0 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	2200      	movs	r2, #0
 8004032:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8004036:	2300      	movs	r3, #0
}
 8004038:	4618      	mov	r0, r3
 800403a:	3710      	adds	r7, #16
 800403c:	46bd      	mov	sp, r7
 800403e:	bd80      	pop	{r7, pc}

08004040 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004040:	b580      	push	{r7, lr}
 8004042:	b084      	sub	sp, #16
 8004044:	af00      	add	r7, sp, #0
 8004046:	6078      	str	r0, [r7, #4]
 8004048:	460b      	mov	r3, r1
 800404a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 800404c:	78fb      	ldrb	r3, [r7, #3]
 800404e:	f003 020f 	and.w	r2, r3, #15
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	685b      	ldr	r3, [r3, #4]
 8004056:	429a      	cmp	r2, r3
 8004058:	d901      	bls.n	800405e <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 800405a:	2301      	movs	r3, #1
 800405c:	e042      	b.n	80040e4 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800405e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004062:	2b00      	cmp	r3, #0
 8004064:	da0f      	bge.n	8004086 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004066:	78fb      	ldrb	r3, [r7, #3]
 8004068:	f003 020f 	and.w	r2, r3, #15
 800406c:	4613      	mov	r3, r2
 800406e:	00db      	lsls	r3, r3, #3
 8004070:	1a9b      	subs	r3, r3, r2
 8004072:	009b      	lsls	r3, r3, #2
 8004074:	3338      	adds	r3, #56	; 0x38
 8004076:	687a      	ldr	r2, [r7, #4]
 8004078:	4413      	add	r3, r2
 800407a:	3304      	adds	r3, #4
 800407c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800407e:	68fb      	ldr	r3, [r7, #12]
 8004080:	2201      	movs	r2, #1
 8004082:	705a      	strb	r2, [r3, #1]
 8004084:	e00f      	b.n	80040a6 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004086:	78fb      	ldrb	r3, [r7, #3]
 8004088:	f003 020f 	and.w	r2, r3, #15
 800408c:	4613      	mov	r3, r2
 800408e:	00db      	lsls	r3, r3, #3
 8004090:	1a9b      	subs	r3, r3, r2
 8004092:	009b      	lsls	r3, r3, #2
 8004094:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8004098:	687a      	ldr	r2, [r7, #4]
 800409a:	4413      	add	r3, r2
 800409c:	3304      	adds	r3, #4
 800409e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80040a0:	68fb      	ldr	r3, [r7, #12]
 80040a2:	2200      	movs	r2, #0
 80040a4:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 80040a6:	68fb      	ldr	r3, [r7, #12]
 80040a8:	2200      	movs	r2, #0
 80040aa:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80040ac:	78fb      	ldrb	r3, [r7, #3]
 80040ae:	f003 030f 	and.w	r3, r3, #15
 80040b2:	b2da      	uxtb	r2, r3
 80040b4:	68fb      	ldr	r3, [r7, #12]
 80040b6:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80040be:	2b01      	cmp	r3, #1
 80040c0:	d101      	bne.n	80040c6 <HAL_PCD_EP_ClrStall+0x86>
 80040c2:	2302      	movs	r3, #2
 80040c4:	e00e      	b.n	80040e4 <HAL_PCD_EP_ClrStall+0xa4>
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	2201      	movs	r2, #1
 80040ca:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	68f9      	ldr	r1, [r7, #12]
 80040d4:	4618      	mov	r0, r3
 80040d6:	f008 fb57 	bl	800c788 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	2200      	movs	r2, #0
 80040de:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 80040e2:	2300      	movs	r3, #0
}
 80040e4:	4618      	mov	r0, r3
 80040e6:	3710      	adds	r7, #16
 80040e8:	46bd      	mov	sp, r7
 80040ea:	bd80      	pop	{r7, pc}

080040ec <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80040ec:	b580      	push	{r7, lr}
 80040ee:	b08a      	sub	sp, #40	; 0x28
 80040f0:	af02      	add	r7, sp, #8
 80040f2:	6078      	str	r0, [r7, #4]
 80040f4:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80040fc:	697b      	ldr	r3, [r7, #20]
 80040fe:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8004100:	683a      	ldr	r2, [r7, #0]
 8004102:	4613      	mov	r3, r2
 8004104:	00db      	lsls	r3, r3, #3
 8004106:	1a9b      	subs	r3, r3, r2
 8004108:	009b      	lsls	r3, r3, #2
 800410a:	3338      	adds	r3, #56	; 0x38
 800410c:	687a      	ldr	r2, [r7, #4]
 800410e:	4413      	add	r3, r2
 8004110:	3304      	adds	r3, #4
 8004112:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8004114:	68fb      	ldr	r3, [r7, #12]
 8004116:	699a      	ldr	r2, [r3, #24]
 8004118:	68fb      	ldr	r3, [r7, #12]
 800411a:	695b      	ldr	r3, [r3, #20]
 800411c:	429a      	cmp	r2, r3
 800411e:	d901      	bls.n	8004124 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8004120:	2301      	movs	r3, #1
 8004122:	e06c      	b.n	80041fe <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8004124:	68fb      	ldr	r3, [r7, #12]
 8004126:	695a      	ldr	r2, [r3, #20]
 8004128:	68fb      	ldr	r3, [r7, #12]
 800412a:	699b      	ldr	r3, [r3, #24]
 800412c:	1ad3      	subs	r3, r2, r3
 800412e:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8004130:	68fb      	ldr	r3, [r7, #12]
 8004132:	689b      	ldr	r3, [r3, #8]
 8004134:	69fa      	ldr	r2, [r7, #28]
 8004136:	429a      	cmp	r2, r3
 8004138:	d902      	bls.n	8004140 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 800413a:	68fb      	ldr	r3, [r7, #12]
 800413c:	689b      	ldr	r3, [r3, #8]
 800413e:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8004140:	69fb      	ldr	r3, [r7, #28]
 8004142:	3303      	adds	r3, #3
 8004144:	089b      	lsrs	r3, r3, #2
 8004146:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8004148:	e02b      	b.n	80041a2 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 800414a:	68fb      	ldr	r3, [r7, #12]
 800414c:	695a      	ldr	r2, [r3, #20]
 800414e:	68fb      	ldr	r3, [r7, #12]
 8004150:	699b      	ldr	r3, [r3, #24]
 8004152:	1ad3      	subs	r3, r2, r3
 8004154:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8004156:	68fb      	ldr	r3, [r7, #12]
 8004158:	689b      	ldr	r3, [r3, #8]
 800415a:	69fa      	ldr	r2, [r7, #28]
 800415c:	429a      	cmp	r2, r3
 800415e:	d902      	bls.n	8004166 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8004160:	68fb      	ldr	r3, [r7, #12]
 8004162:	689b      	ldr	r3, [r3, #8]
 8004164:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8004166:	69fb      	ldr	r3, [r7, #28]
 8004168:	3303      	adds	r3, #3
 800416a:	089b      	lsrs	r3, r3, #2
 800416c:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800416e:	68fb      	ldr	r3, [r7, #12]
 8004170:	68d9      	ldr	r1, [r3, #12]
 8004172:	683b      	ldr	r3, [r7, #0]
 8004174:	b2da      	uxtb	r2, r3
 8004176:	69fb      	ldr	r3, [r7, #28]
 8004178:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800417e:	b2db      	uxtb	r3, r3
 8004180:	9300      	str	r3, [sp, #0]
 8004182:	4603      	mov	r3, r0
 8004184:	6978      	ldr	r0, [r7, #20]
 8004186:	f008 f9fb 	bl	800c580 <USB_WritePacket>

    ep->xfer_buff  += len;
 800418a:	68fb      	ldr	r3, [r7, #12]
 800418c:	68da      	ldr	r2, [r3, #12]
 800418e:	69fb      	ldr	r3, [r7, #28]
 8004190:	441a      	add	r2, r3
 8004192:	68fb      	ldr	r3, [r7, #12]
 8004194:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8004196:	68fb      	ldr	r3, [r7, #12]
 8004198:	699a      	ldr	r2, [r3, #24]
 800419a:	69fb      	ldr	r3, [r7, #28]
 800419c:	441a      	add	r2, r3
 800419e:	68fb      	ldr	r3, [r7, #12]
 80041a0:	619a      	str	r2, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80041a2:	683b      	ldr	r3, [r7, #0]
 80041a4:	015a      	lsls	r2, r3, #5
 80041a6:	693b      	ldr	r3, [r7, #16]
 80041a8:	4413      	add	r3, r2
 80041aa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80041ae:	699b      	ldr	r3, [r3, #24]
 80041b0:	b29b      	uxth	r3, r3
 80041b2:	69ba      	ldr	r2, [r7, #24]
 80041b4:	429a      	cmp	r2, r3
 80041b6:	d809      	bhi.n	80041cc <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80041b8:	68fb      	ldr	r3, [r7, #12]
 80041ba:	699a      	ldr	r2, [r3, #24]
 80041bc:	68fb      	ldr	r3, [r7, #12]
 80041be:	695b      	ldr	r3, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80041c0:	429a      	cmp	r2, r3
 80041c2:	d203      	bcs.n	80041cc <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80041c4:	68fb      	ldr	r3, [r7, #12]
 80041c6:	695b      	ldr	r3, [r3, #20]
 80041c8:	2b00      	cmp	r3, #0
 80041ca:	d1be      	bne.n	800414a <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 80041cc:	68fb      	ldr	r3, [r7, #12]
 80041ce:	695a      	ldr	r2, [r3, #20]
 80041d0:	68fb      	ldr	r3, [r7, #12]
 80041d2:	699b      	ldr	r3, [r3, #24]
 80041d4:	429a      	cmp	r2, r3
 80041d6:	d811      	bhi.n	80041fc <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80041d8:	683b      	ldr	r3, [r7, #0]
 80041da:	f003 030f 	and.w	r3, r3, #15
 80041de:	2201      	movs	r2, #1
 80041e0:	fa02 f303 	lsl.w	r3, r2, r3
 80041e4:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80041e6:	693b      	ldr	r3, [r7, #16]
 80041e8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80041ec:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80041ee:	68bb      	ldr	r3, [r7, #8]
 80041f0:	43db      	mvns	r3, r3
 80041f2:	6939      	ldr	r1, [r7, #16]
 80041f4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80041f8:	4013      	ands	r3, r2
 80041fa:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 80041fc:	2300      	movs	r3, #0
}
 80041fe:	4618      	mov	r0, r3
 8004200:	3720      	adds	r7, #32
 8004202:	46bd      	mov	sp, r7
 8004204:	bd80      	pop	{r7, pc}
	...

08004208 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8004208:	b580      	push	{r7, lr}
 800420a:	b086      	sub	sp, #24
 800420c:	af00      	add	r7, sp, #0
 800420e:	6078      	str	r0, [r7, #4]
 8004210:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004218:	697b      	ldr	r3, [r7, #20]
 800421a:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800421c:	697b      	ldr	r3, [r7, #20]
 800421e:	333c      	adds	r3, #60	; 0x3c
 8004220:	3304      	adds	r3, #4
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8004226:	683b      	ldr	r3, [r7, #0]
 8004228:	015a      	lsls	r2, r3, #5
 800422a:	693b      	ldr	r3, [r7, #16]
 800422c:	4413      	add	r3, r2
 800422e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004232:	689b      	ldr	r3, [r3, #8]
 8004234:	60bb      	str	r3, [r7, #8]

  if (hpcd->Init.dma_enable == 1U)
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	691b      	ldr	r3, [r3, #16]
 800423a:	2b01      	cmp	r3, #1
 800423c:	f040 80a0 	bne.w	8004380 <PCD_EP_OutXfrComplete_int+0x178>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8004240:	68bb      	ldr	r3, [r7, #8]
 8004242:	f003 0308 	and.w	r3, r3, #8
 8004246:	2b00      	cmp	r3, #0
 8004248:	d015      	beq.n	8004276 <PCD_EP_OutXfrComplete_int+0x6e>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800424a:	68fb      	ldr	r3, [r7, #12]
 800424c:	4a72      	ldr	r2, [pc, #456]	; (8004418 <PCD_EP_OutXfrComplete_int+0x210>)
 800424e:	4293      	cmp	r3, r2
 8004250:	f240 80dd 	bls.w	800440e <PCD_EP_OutXfrComplete_int+0x206>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8004254:	68bb      	ldr	r3, [r7, #8]
 8004256:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800425a:	2b00      	cmp	r3, #0
 800425c:	f000 80d7 	beq.w	800440e <PCD_EP_OutXfrComplete_int+0x206>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004260:	683b      	ldr	r3, [r7, #0]
 8004262:	015a      	lsls	r2, r3, #5
 8004264:	693b      	ldr	r3, [r7, #16]
 8004266:	4413      	add	r3, r2
 8004268:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800426c:	461a      	mov	r2, r3
 800426e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004272:	6093      	str	r3, [r2, #8]
 8004274:	e0cb      	b.n	800440e <PCD_EP_OutXfrComplete_int+0x206>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8004276:	68bb      	ldr	r3, [r7, #8]
 8004278:	f003 0320 	and.w	r3, r3, #32
 800427c:	2b00      	cmp	r3, #0
 800427e:	d009      	beq.n	8004294 <PCD_EP_OutXfrComplete_int+0x8c>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8004280:	683b      	ldr	r3, [r7, #0]
 8004282:	015a      	lsls	r2, r3, #5
 8004284:	693b      	ldr	r3, [r7, #16]
 8004286:	4413      	add	r3, r2
 8004288:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800428c:	461a      	mov	r2, r3
 800428e:	2320      	movs	r3, #32
 8004290:	6093      	str	r3, [r2, #8]
 8004292:	e0bc      	b.n	800440e <PCD_EP_OutXfrComplete_int+0x206>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8004294:	68bb      	ldr	r3, [r7, #8]
 8004296:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800429a:	2b00      	cmp	r3, #0
 800429c:	f040 80b7 	bne.w	800440e <PCD_EP_OutXfrComplete_int+0x206>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80042a0:	68fb      	ldr	r3, [r7, #12]
 80042a2:	4a5d      	ldr	r2, [pc, #372]	; (8004418 <PCD_EP_OutXfrComplete_int+0x210>)
 80042a4:	4293      	cmp	r3, r2
 80042a6:	d90f      	bls.n	80042c8 <PCD_EP_OutXfrComplete_int+0xc0>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80042a8:	68bb      	ldr	r3, [r7, #8]
 80042aa:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80042ae:	2b00      	cmp	r3, #0
 80042b0:	d00a      	beq.n	80042c8 <PCD_EP_OutXfrComplete_int+0xc0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80042b2:	683b      	ldr	r3, [r7, #0]
 80042b4:	015a      	lsls	r2, r3, #5
 80042b6:	693b      	ldr	r3, [r7, #16]
 80042b8:	4413      	add	r3, r2
 80042ba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80042be:	461a      	mov	r2, r3
 80042c0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80042c4:	6093      	str	r3, [r2, #8]
 80042c6:	e0a2      	b.n	800440e <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        /* out data packet received over EP0 */
        hpcd->OUT_ep[epnum].xfer_count =
          hpcd->OUT_ep[epnum].maxpacket -
 80042c8:	6879      	ldr	r1, [r7, #4]
 80042ca:	683a      	ldr	r2, [r7, #0]
 80042cc:	4613      	mov	r3, r2
 80042ce:	00db      	lsls	r3, r3, #3
 80042d0:	1a9b      	subs	r3, r3, r2
 80042d2:	009b      	lsls	r3, r3, #2
 80042d4:	440b      	add	r3, r1
 80042d6:	f503 7301 	add.w	r3, r3, #516	; 0x204
 80042da:	681a      	ldr	r2, [r3, #0]
          (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 80042dc:	683b      	ldr	r3, [r7, #0]
 80042de:	0159      	lsls	r1, r3, #5
 80042e0:	693b      	ldr	r3, [r7, #16]
 80042e2:	440b      	add	r3, r1
 80042e4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80042e8:	691b      	ldr	r3, [r3, #16]
 80042ea:	f3c3 0312 	ubfx	r3, r3, #0, #19
          hpcd->OUT_ep[epnum].maxpacket -
 80042ee:	1ad1      	subs	r1, r2, r3
        hpcd->OUT_ep[epnum].xfer_count =
 80042f0:	6878      	ldr	r0, [r7, #4]
 80042f2:	683a      	ldr	r2, [r7, #0]
 80042f4:	4613      	mov	r3, r2
 80042f6:	00db      	lsls	r3, r3, #3
 80042f8:	1a9b      	subs	r3, r3, r2
 80042fa:	009b      	lsls	r3, r3, #2
 80042fc:	4403      	add	r3, r0
 80042fe:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8004302:	6019      	str	r1, [r3, #0]

        hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;
 8004304:	6879      	ldr	r1, [r7, #4]
 8004306:	683a      	ldr	r2, [r7, #0]
 8004308:	4613      	mov	r3, r2
 800430a:	00db      	lsls	r3, r3, #3
 800430c:	1a9b      	subs	r3, r3, r2
 800430e:	009b      	lsls	r3, r3, #2
 8004310:	440b      	add	r3, r1
 8004312:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8004316:	6819      	ldr	r1, [r3, #0]
 8004318:	6878      	ldr	r0, [r7, #4]
 800431a:	683a      	ldr	r2, [r7, #0]
 800431c:	4613      	mov	r3, r2
 800431e:	00db      	lsls	r3, r3, #3
 8004320:	1a9b      	subs	r3, r3, r2
 8004322:	009b      	lsls	r3, r3, #2
 8004324:	4403      	add	r3, r0
 8004326:	f503 7301 	add.w	r3, r3, #516	; 0x204
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	4419      	add	r1, r3
 800432e:	6878      	ldr	r0, [r7, #4]
 8004330:	683a      	ldr	r2, [r7, #0]
 8004332:	4613      	mov	r3, r2
 8004334:	00db      	lsls	r3, r3, #3
 8004336:	1a9b      	subs	r3, r3, r2
 8004338:	009b      	lsls	r3, r3, #2
 800433a:	4403      	add	r3, r0
 800433c:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8004340:	6019      	str	r1, [r3, #0]

        if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8004342:	683b      	ldr	r3, [r7, #0]
 8004344:	2b00      	cmp	r3, #0
 8004346:	d114      	bne.n	8004372 <PCD_EP_OutXfrComplete_int+0x16a>
 8004348:	6879      	ldr	r1, [r7, #4]
 800434a:	683a      	ldr	r2, [r7, #0]
 800434c:	4613      	mov	r3, r2
 800434e:	00db      	lsls	r3, r3, #3
 8004350:	1a9b      	subs	r3, r3, r2
 8004352:	009b      	lsls	r3, r3, #2
 8004354:	440b      	add	r3, r1
 8004356:	f503 7304 	add.w	r3, r3, #528	; 0x210
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	2b00      	cmp	r3, #0
 800435e:	d108      	bne.n	8004372 <PCD_EP_OutXfrComplete_int+0x16a>
        {
          /* this is ZLP, so prepare EP0 for next setup */
          (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	6818      	ldr	r0, [r3, #0]
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800436a:	461a      	mov	r2, r3
 800436c:	2101      	movs	r1, #1
 800436e:	f008 fb9f 	bl	800cab0 <USB_EP0_OutStart>
        }
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8004372:	683b      	ldr	r3, [r7, #0]
 8004374:	b2db      	uxtb	r3, r3
 8004376:	4619      	mov	r1, r3
 8004378:	6878      	ldr	r0, [r7, #4]
 800437a:	f00d fd21 	bl	8011dc0 <HAL_PCD_DataOutStageCallback>
 800437e:	e046      	b.n	800440e <PCD_EP_OutXfrComplete_int+0x206>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8004380:	68fb      	ldr	r3, [r7, #12]
 8004382:	4a26      	ldr	r2, [pc, #152]	; (800441c <PCD_EP_OutXfrComplete_int+0x214>)
 8004384:	4293      	cmp	r3, r2
 8004386:	d124      	bne.n	80043d2 <PCD_EP_OutXfrComplete_int+0x1ca>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8004388:	68bb      	ldr	r3, [r7, #8]
 800438a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800438e:	2b00      	cmp	r3, #0
 8004390:	d00a      	beq.n	80043a8 <PCD_EP_OutXfrComplete_int+0x1a0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004392:	683b      	ldr	r3, [r7, #0]
 8004394:	015a      	lsls	r2, r3, #5
 8004396:	693b      	ldr	r3, [r7, #16]
 8004398:	4413      	add	r3, r2
 800439a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800439e:	461a      	mov	r2, r3
 80043a0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80043a4:	6093      	str	r3, [r2, #8]
 80043a6:	e032      	b.n	800440e <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80043a8:	68bb      	ldr	r3, [r7, #8]
 80043aa:	f003 0320 	and.w	r3, r3, #32
 80043ae:	2b00      	cmp	r3, #0
 80043b0:	d008      	beq.n	80043c4 <PCD_EP_OutXfrComplete_int+0x1bc>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80043b2:	683b      	ldr	r3, [r7, #0]
 80043b4:	015a      	lsls	r2, r3, #5
 80043b6:	693b      	ldr	r3, [r7, #16]
 80043b8:	4413      	add	r3, r2
 80043ba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80043be:	461a      	mov	r2, r3
 80043c0:	2320      	movs	r3, #32
 80043c2:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80043c4:	683b      	ldr	r3, [r7, #0]
 80043c6:	b2db      	uxtb	r3, r3
 80043c8:	4619      	mov	r1, r3
 80043ca:	6878      	ldr	r0, [r7, #4]
 80043cc:	f00d fcf8 	bl	8011dc0 <HAL_PCD_DataOutStageCallback>
 80043d0:	e01d      	b.n	800440e <PCD_EP_OutXfrComplete_int+0x206>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 80043d2:	683b      	ldr	r3, [r7, #0]
 80043d4:	2b00      	cmp	r3, #0
 80043d6:	d114      	bne.n	8004402 <PCD_EP_OutXfrComplete_int+0x1fa>
 80043d8:	6879      	ldr	r1, [r7, #4]
 80043da:	683a      	ldr	r2, [r7, #0]
 80043dc:	4613      	mov	r3, r2
 80043de:	00db      	lsls	r3, r3, #3
 80043e0:	1a9b      	subs	r3, r3, r2
 80043e2:	009b      	lsls	r3, r3, #2
 80043e4:	440b      	add	r3, r1
 80043e6:	f503 7304 	add.w	r3, r3, #528	; 0x210
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	2b00      	cmp	r3, #0
 80043ee:	d108      	bne.n	8004402 <PCD_EP_OutXfrComplete_int+0x1fa>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	6818      	ldr	r0, [r3, #0]
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80043fa:	461a      	mov	r2, r3
 80043fc:	2100      	movs	r1, #0
 80043fe:	f008 fb57 	bl	800cab0 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8004402:	683b      	ldr	r3, [r7, #0]
 8004404:	b2db      	uxtb	r3, r3
 8004406:	4619      	mov	r1, r3
 8004408:	6878      	ldr	r0, [r7, #4]
 800440a:	f00d fcd9 	bl	8011dc0 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 800440e:	2300      	movs	r3, #0
}
 8004410:	4618      	mov	r0, r3
 8004412:	3718      	adds	r7, #24
 8004414:	46bd      	mov	sp, r7
 8004416:	bd80      	pop	{r7, pc}
 8004418:	4f54300a 	.word	0x4f54300a
 800441c:	4f54310a 	.word	0x4f54310a

08004420 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8004420:	b580      	push	{r7, lr}
 8004422:	b086      	sub	sp, #24
 8004424:	af00      	add	r7, sp, #0
 8004426:	6078      	str	r0, [r7, #4]
 8004428:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004430:	697b      	ldr	r3, [r7, #20]
 8004432:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8004434:	697b      	ldr	r3, [r7, #20]
 8004436:	333c      	adds	r3, #60	; 0x3c
 8004438:	3304      	adds	r3, #4
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800443e:	683b      	ldr	r3, [r7, #0]
 8004440:	015a      	lsls	r2, r3, #5
 8004442:	693b      	ldr	r3, [r7, #16]
 8004444:	4413      	add	r3, r2
 8004446:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800444a:	689b      	ldr	r3, [r3, #8]
 800444c:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800444e:	68fb      	ldr	r3, [r7, #12]
 8004450:	4a15      	ldr	r2, [pc, #84]	; (80044a8 <PCD_EP_OutSetupPacket_int+0x88>)
 8004452:	4293      	cmp	r3, r2
 8004454:	d90e      	bls.n	8004474 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8004456:	68bb      	ldr	r3, [r7, #8]
 8004458:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800445c:	2b00      	cmp	r3, #0
 800445e:	d009      	beq.n	8004474 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004460:	683b      	ldr	r3, [r7, #0]
 8004462:	015a      	lsls	r2, r3, #5
 8004464:	693b      	ldr	r3, [r7, #16]
 8004466:	4413      	add	r3, r2
 8004468:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800446c:	461a      	mov	r2, r3
 800446e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004472:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8004474:	6878      	ldr	r0, [r7, #4]
 8004476:	f00d fc91 	bl	8011d9c <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 800447a:	68fb      	ldr	r3, [r7, #12]
 800447c:	4a0a      	ldr	r2, [pc, #40]	; (80044a8 <PCD_EP_OutSetupPacket_int+0x88>)
 800447e:	4293      	cmp	r3, r2
 8004480:	d90c      	bls.n	800449c <PCD_EP_OutSetupPacket_int+0x7c>
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	691b      	ldr	r3, [r3, #16]
 8004486:	2b01      	cmp	r3, #1
 8004488:	d108      	bne.n	800449c <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	6818      	ldr	r0, [r3, #0]
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8004494:	461a      	mov	r2, r3
 8004496:	2101      	movs	r1, #1
 8004498:	f008 fb0a 	bl	800cab0 <USB_EP0_OutStart>
  }

  return HAL_OK;
 800449c:	2300      	movs	r3, #0
}
 800449e:	4618      	mov	r0, r3
 80044a0:	3718      	adds	r7, #24
 80044a2:	46bd      	mov	sp, r7
 80044a4:	bd80      	pop	{r7, pc}
 80044a6:	bf00      	nop
 80044a8:	4f54300a 	.word	0x4f54300a

080044ac <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 80044ac:	b480      	push	{r7}
 80044ae:	b085      	sub	sp, #20
 80044b0:	af00      	add	r7, sp, #0
 80044b2:	6078      	str	r0, [r7, #4]
 80044b4:	460b      	mov	r3, r1
 80044b6:	70fb      	strb	r3, [r7, #3]
 80044b8:	4613      	mov	r3, r2
 80044ba:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044c2:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 80044c4:	78fb      	ldrb	r3, [r7, #3]
 80044c6:	2b00      	cmp	r3, #0
 80044c8:	d107      	bne.n	80044da <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 80044ca:	883b      	ldrh	r3, [r7, #0]
 80044cc:	0419      	lsls	r1, r3, #16
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	68ba      	ldr	r2, [r7, #8]
 80044d4:	430a      	orrs	r2, r1
 80044d6:	629a      	str	r2, [r3, #40]	; 0x28
 80044d8:	e028      	b.n	800452c <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80044e0:	0c1b      	lsrs	r3, r3, #16
 80044e2:	68ba      	ldr	r2, [r7, #8]
 80044e4:	4413      	add	r3, r2
 80044e6:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80044e8:	2300      	movs	r3, #0
 80044ea:	73fb      	strb	r3, [r7, #15]
 80044ec:	e00d      	b.n	800450a <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	681a      	ldr	r2, [r3, #0]
 80044f2:	7bfb      	ldrb	r3, [r7, #15]
 80044f4:	3340      	adds	r3, #64	; 0x40
 80044f6:	009b      	lsls	r3, r3, #2
 80044f8:	4413      	add	r3, r2
 80044fa:	685b      	ldr	r3, [r3, #4]
 80044fc:	0c1b      	lsrs	r3, r3, #16
 80044fe:	68ba      	ldr	r2, [r7, #8]
 8004500:	4413      	add	r3, r2
 8004502:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8004504:	7bfb      	ldrb	r3, [r7, #15]
 8004506:	3301      	adds	r3, #1
 8004508:	73fb      	strb	r3, [r7, #15]
 800450a:	7bfa      	ldrb	r2, [r7, #15]
 800450c:	78fb      	ldrb	r3, [r7, #3]
 800450e:	3b01      	subs	r3, #1
 8004510:	429a      	cmp	r2, r3
 8004512:	d3ec      	bcc.n	80044ee <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8004514:	883b      	ldrh	r3, [r7, #0]
 8004516:	0418      	lsls	r0, r3, #16
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	6819      	ldr	r1, [r3, #0]
 800451c:	78fb      	ldrb	r3, [r7, #3]
 800451e:	3b01      	subs	r3, #1
 8004520:	68ba      	ldr	r2, [r7, #8]
 8004522:	4302      	orrs	r2, r0
 8004524:	3340      	adds	r3, #64	; 0x40
 8004526:	009b      	lsls	r3, r3, #2
 8004528:	440b      	add	r3, r1
 800452a:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 800452c:	2300      	movs	r3, #0
}
 800452e:	4618      	mov	r0, r3
 8004530:	3714      	adds	r7, #20
 8004532:	46bd      	mov	sp, r7
 8004534:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004538:	4770      	bx	lr

0800453a <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 800453a:	b480      	push	{r7}
 800453c:	b083      	sub	sp, #12
 800453e:	af00      	add	r7, sp, #0
 8004540:	6078      	str	r0, [r7, #4]
 8004542:	460b      	mov	r3, r1
 8004544:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	887a      	ldrh	r2, [r7, #2]
 800454c:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 800454e:	2300      	movs	r3, #0
}
 8004550:	4618      	mov	r0, r3
 8004552:	370c      	adds	r7, #12
 8004554:	46bd      	mov	sp, r7
 8004556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800455a:	4770      	bx	lr

0800455c <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 800455c:	b480      	push	{r7}
 800455e:	b085      	sub	sp, #20
 8004560:	af00      	add	r7, sp, #0
 8004562:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	2201      	movs	r2, #1
 800456e:	f8c3 23fc 	str.w	r2, [r3, #1020]	; 0x3fc
  hpcd->LPM_State = LPM_L0;
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	2200      	movs	r2, #0
 8004576:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 800457a:	68fb      	ldr	r3, [r7, #12]
 800457c:	699b      	ldr	r3, [r3, #24]
 800457e:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8004582:	68fb      	ldr	r3, [r7, #12]
 8004584:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8004586:	68fb      	ldr	r3, [r7, #12]
 8004588:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800458a:	4b05      	ldr	r3, [pc, #20]	; (80045a0 <HAL_PCDEx_ActivateLPM+0x44>)
 800458c:	4313      	orrs	r3, r2
 800458e:	68fa      	ldr	r2, [r7, #12]
 8004590:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8004592:	2300      	movs	r3, #0
}
 8004594:	4618      	mov	r0, r3
 8004596:	3714      	adds	r7, #20
 8004598:	46bd      	mov	sp, r7
 800459a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800459e:	4770      	bx	lr
 80045a0:	10000003 	.word	0x10000003

080045a4 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 80045a4:	b480      	push	{r7}
 80045a6:	b083      	sub	sp, #12
 80045a8:	af00      	add	r7, sp, #0
 80045aa:	6078      	str	r0, [r7, #4]
 80045ac:	460b      	mov	r3, r1
 80045ae:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 80045b0:	bf00      	nop
 80045b2:	370c      	adds	r7, #12
 80045b4:	46bd      	mov	sp, r7
 80045b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045ba:	4770      	bx	lr

080045bc <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 80045bc:	b580      	push	{r7, lr}
 80045be:	b084      	sub	sp, #16
 80045c0:	af00      	add	r7, sp, #0
 80045c2:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 80045c4:	4b29      	ldr	r3, [pc, #164]	; (800466c <HAL_PWREx_ConfigSupply+0xb0>)
 80045c6:	68db      	ldr	r3, [r3, #12]
 80045c8:	f003 0307 	and.w	r3, r3, #7
 80045cc:	2b06      	cmp	r3, #6
 80045ce:	d00a      	beq.n	80045e6 <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 80045d0:	4b26      	ldr	r3, [pc, #152]	; (800466c <HAL_PWREx_ConfigSupply+0xb0>)
 80045d2:	68db      	ldr	r3, [r3, #12]
 80045d4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80045d8:	687a      	ldr	r2, [r7, #4]
 80045da:	429a      	cmp	r2, r3
 80045dc:	d001      	beq.n	80045e2 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 80045de:	2301      	movs	r3, #1
 80045e0:	e03f      	b.n	8004662 <HAL_PWREx_ConfigSupply+0xa6>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 80045e2:	2300      	movs	r3, #0
 80045e4:	e03d      	b.n	8004662 <HAL_PWREx_ConfigSupply+0xa6>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 80045e6:	4b21      	ldr	r3, [pc, #132]	; (800466c <HAL_PWREx_ConfigSupply+0xb0>)
 80045e8:	68db      	ldr	r3, [r3, #12]
 80045ea:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
 80045ee:	491f      	ldr	r1, [pc, #124]	; (800466c <HAL_PWREx_ConfigSupply+0xb0>)
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	4313      	orrs	r3, r2
 80045f4:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 80045f6:	f7fd f89b 	bl	8001730 <HAL_GetTick>
 80045fa:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80045fc:	e009      	b.n	8004612 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80045fe:	f7fd f897 	bl	8001730 <HAL_GetTick>
 8004602:	4602      	mov	r2, r0
 8004604:	68fb      	ldr	r3, [r7, #12]
 8004606:	1ad3      	subs	r3, r2, r3
 8004608:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800460c:	d901      	bls.n	8004612 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 800460e:	2301      	movs	r3, #1
 8004610:	e027      	b.n	8004662 <HAL_PWREx_ConfigSupply+0xa6>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8004612:	4b16      	ldr	r3, [pc, #88]	; (800466c <HAL_PWREx_ConfigSupply+0xb0>)
 8004614:	685b      	ldr	r3, [r3, #4]
 8004616:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800461a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800461e:	d1ee      	bne.n	80045fe <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	2b1e      	cmp	r3, #30
 8004624:	d008      	beq.n	8004638 <HAL_PWREx_ConfigSupply+0x7c>
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	2b2e      	cmp	r3, #46	; 0x2e
 800462a:	d005      	beq.n	8004638 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	2b1d      	cmp	r3, #29
 8004630:	d002      	beq.n	8004638 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	2b2d      	cmp	r3, #45	; 0x2d
 8004636:	d113      	bne.n	8004660 <HAL_PWREx_ConfigSupply+0xa4>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 8004638:	f7fd f87a 	bl	8001730 <HAL_GetTick>
 800463c:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 800463e:	e009      	b.n	8004654 <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8004640:	f7fd f876 	bl	8001730 <HAL_GetTick>
 8004644:	4602      	mov	r2, r0
 8004646:	68fb      	ldr	r3, [r7, #12]
 8004648:	1ad3      	subs	r3, r2, r3
 800464a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800464e:	d901      	bls.n	8004654 <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 8004650:	2301      	movs	r3, #1
 8004652:	e006      	b.n	8004662 <HAL_PWREx_ConfigSupply+0xa6>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8004654:	4b05      	ldr	r3, [pc, #20]	; (800466c <HAL_PWREx_ConfigSupply+0xb0>)
 8004656:	68db      	ldr	r3, [r3, #12]
 8004658:	f003 0311 	and.w	r3, r3, #17
 800465c:	2b11      	cmp	r3, #17
 800465e:	d1ef      	bne.n	8004640 <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8004660:	2300      	movs	r3, #0
}
 8004662:	4618      	mov	r0, r3
 8004664:	3710      	adds	r7, #16
 8004666:	46bd      	mov	sp, r7
 8004668:	bd80      	pop	{r7, pc}
 800466a:	bf00      	nop
 800466c:	58024800 	.word	0x58024800

08004670 <HAL_PWREx_EnableUSBVoltageDetector>:
/**
  * @brief Enable the USB voltage level detector.
  * @retval None.
  */
void HAL_PWREx_EnableUSBVoltageDetector (void)
{
 8004670:	b480      	push	{r7}
 8004672:	af00      	add	r7, sp, #0
  /* Enable the USB voltage detector */
  SET_BIT (PWR->CR3, PWR_CR3_USB33DEN);
 8004674:	4b05      	ldr	r3, [pc, #20]	; (800468c <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 8004676:	68db      	ldr	r3, [r3, #12]
 8004678:	4a04      	ldr	r2, [pc, #16]	; (800468c <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 800467a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800467e:	60d3      	str	r3, [r2, #12]
}
 8004680:	bf00      	nop
 8004682:	46bd      	mov	sp, r7
 8004684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004688:	4770      	bx	lr
 800468a:	bf00      	nop
 800468c:	58024800 	.word	0x58024800

08004690 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004690:	b580      	push	{r7, lr}
 8004692:	b08c      	sub	sp, #48	; 0x30
 8004694:	af00      	add	r7, sp, #0
 8004696:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	2b00      	cmp	r3, #0
 800469c:	d101      	bne.n	80046a2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800469e:	2301      	movs	r3, #1
 80046a0:	e37a      	b.n	8004d98 <HAL_RCC_OscConfig+0x708>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	f003 0301 	and.w	r3, r3, #1
 80046aa:	2b00      	cmp	r3, #0
 80046ac:	f000 8087 	beq.w	80047be <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80046b0:	4ba0      	ldr	r3, [pc, #640]	; (8004934 <HAL_RCC_OscConfig+0x2a4>)
 80046b2:	691b      	ldr	r3, [r3, #16]
 80046b4:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80046b8:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80046ba:	4b9e      	ldr	r3, [pc, #632]	; (8004934 <HAL_RCC_OscConfig+0x2a4>)
 80046bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80046be:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 80046c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80046c2:	2b10      	cmp	r3, #16
 80046c4:	d007      	beq.n	80046d6 <HAL_RCC_OscConfig+0x46>
 80046c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80046c8:	2b18      	cmp	r3, #24
 80046ca:	d110      	bne.n	80046ee <HAL_RCC_OscConfig+0x5e>
 80046cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80046ce:	f003 0303 	and.w	r3, r3, #3
 80046d2:	2b02      	cmp	r3, #2
 80046d4:	d10b      	bne.n	80046ee <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80046d6:	4b97      	ldr	r3, [pc, #604]	; (8004934 <HAL_RCC_OscConfig+0x2a4>)
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80046de:	2b00      	cmp	r3, #0
 80046e0:	d06c      	beq.n	80047bc <HAL_RCC_OscConfig+0x12c>
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	685b      	ldr	r3, [r3, #4]
 80046e6:	2b00      	cmp	r3, #0
 80046e8:	d168      	bne.n	80047bc <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80046ea:	2301      	movs	r3, #1
 80046ec:	e354      	b.n	8004d98 <HAL_RCC_OscConfig+0x708>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	685b      	ldr	r3, [r3, #4]
 80046f2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80046f6:	d106      	bne.n	8004706 <HAL_RCC_OscConfig+0x76>
 80046f8:	4b8e      	ldr	r3, [pc, #568]	; (8004934 <HAL_RCC_OscConfig+0x2a4>)
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	4a8d      	ldr	r2, [pc, #564]	; (8004934 <HAL_RCC_OscConfig+0x2a4>)
 80046fe:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004702:	6013      	str	r3, [r2, #0]
 8004704:	e02e      	b.n	8004764 <HAL_RCC_OscConfig+0xd4>
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	685b      	ldr	r3, [r3, #4]
 800470a:	2b00      	cmp	r3, #0
 800470c:	d10c      	bne.n	8004728 <HAL_RCC_OscConfig+0x98>
 800470e:	4b89      	ldr	r3, [pc, #548]	; (8004934 <HAL_RCC_OscConfig+0x2a4>)
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	4a88      	ldr	r2, [pc, #544]	; (8004934 <HAL_RCC_OscConfig+0x2a4>)
 8004714:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004718:	6013      	str	r3, [r2, #0]
 800471a:	4b86      	ldr	r3, [pc, #536]	; (8004934 <HAL_RCC_OscConfig+0x2a4>)
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	4a85      	ldr	r2, [pc, #532]	; (8004934 <HAL_RCC_OscConfig+0x2a4>)
 8004720:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004724:	6013      	str	r3, [r2, #0]
 8004726:	e01d      	b.n	8004764 <HAL_RCC_OscConfig+0xd4>
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	685b      	ldr	r3, [r3, #4]
 800472c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004730:	d10c      	bne.n	800474c <HAL_RCC_OscConfig+0xbc>
 8004732:	4b80      	ldr	r3, [pc, #512]	; (8004934 <HAL_RCC_OscConfig+0x2a4>)
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	4a7f      	ldr	r2, [pc, #508]	; (8004934 <HAL_RCC_OscConfig+0x2a4>)
 8004738:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800473c:	6013      	str	r3, [r2, #0]
 800473e:	4b7d      	ldr	r3, [pc, #500]	; (8004934 <HAL_RCC_OscConfig+0x2a4>)
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	4a7c      	ldr	r2, [pc, #496]	; (8004934 <HAL_RCC_OscConfig+0x2a4>)
 8004744:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004748:	6013      	str	r3, [r2, #0]
 800474a:	e00b      	b.n	8004764 <HAL_RCC_OscConfig+0xd4>
 800474c:	4b79      	ldr	r3, [pc, #484]	; (8004934 <HAL_RCC_OscConfig+0x2a4>)
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	4a78      	ldr	r2, [pc, #480]	; (8004934 <HAL_RCC_OscConfig+0x2a4>)
 8004752:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004756:	6013      	str	r3, [r2, #0]
 8004758:	4b76      	ldr	r3, [pc, #472]	; (8004934 <HAL_RCC_OscConfig+0x2a4>)
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	4a75      	ldr	r2, [pc, #468]	; (8004934 <HAL_RCC_OscConfig+0x2a4>)
 800475e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004762:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	685b      	ldr	r3, [r3, #4]
 8004768:	2b00      	cmp	r3, #0
 800476a:	d013      	beq.n	8004794 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800476c:	f7fc ffe0 	bl	8001730 <HAL_GetTick>
 8004770:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004772:	e008      	b.n	8004786 <HAL_RCC_OscConfig+0xf6>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004774:	f7fc ffdc 	bl	8001730 <HAL_GetTick>
 8004778:	4602      	mov	r2, r0
 800477a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800477c:	1ad3      	subs	r3, r2, r3
 800477e:	2b64      	cmp	r3, #100	; 0x64
 8004780:	d901      	bls.n	8004786 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8004782:	2303      	movs	r3, #3
 8004784:	e308      	b.n	8004d98 <HAL_RCC_OscConfig+0x708>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004786:	4b6b      	ldr	r3, [pc, #428]	; (8004934 <HAL_RCC_OscConfig+0x2a4>)
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800478e:	2b00      	cmp	r3, #0
 8004790:	d0f0      	beq.n	8004774 <HAL_RCC_OscConfig+0xe4>
 8004792:	e014      	b.n	80047be <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004794:	f7fc ffcc 	bl	8001730 <HAL_GetTick>
 8004798:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800479a:	e008      	b.n	80047ae <HAL_RCC_OscConfig+0x11e>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800479c:	f7fc ffc8 	bl	8001730 <HAL_GetTick>
 80047a0:	4602      	mov	r2, r0
 80047a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047a4:	1ad3      	subs	r3, r2, r3
 80047a6:	2b64      	cmp	r3, #100	; 0x64
 80047a8:	d901      	bls.n	80047ae <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80047aa:	2303      	movs	r3, #3
 80047ac:	e2f4      	b.n	8004d98 <HAL_RCC_OscConfig+0x708>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80047ae:	4b61      	ldr	r3, [pc, #388]	; (8004934 <HAL_RCC_OscConfig+0x2a4>)
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80047b6:	2b00      	cmp	r3, #0
 80047b8:	d1f0      	bne.n	800479c <HAL_RCC_OscConfig+0x10c>
 80047ba:	e000      	b.n	80047be <HAL_RCC_OscConfig+0x12e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80047bc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	f003 0302 	and.w	r3, r3, #2
 80047c6:	2b00      	cmp	r3, #0
 80047c8:	d06d      	beq.n	80048a6 <HAL_RCC_OscConfig+0x216>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80047ca:	4b5a      	ldr	r3, [pc, #360]	; (8004934 <HAL_RCC_OscConfig+0x2a4>)
 80047cc:	691b      	ldr	r3, [r3, #16]
 80047ce:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80047d2:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80047d4:	4b57      	ldr	r3, [pc, #348]	; (8004934 <HAL_RCC_OscConfig+0x2a4>)
 80047d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80047d8:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 80047da:	6a3b      	ldr	r3, [r7, #32]
 80047dc:	2b00      	cmp	r3, #0
 80047de:	d007      	beq.n	80047f0 <HAL_RCC_OscConfig+0x160>
 80047e0:	6a3b      	ldr	r3, [r7, #32]
 80047e2:	2b18      	cmp	r3, #24
 80047e4:	d11b      	bne.n	800481e <HAL_RCC_OscConfig+0x18e>
 80047e6:	69fb      	ldr	r3, [r7, #28]
 80047e8:	f003 0303 	and.w	r3, r3, #3
 80047ec:	2b00      	cmp	r3, #0
 80047ee:	d116      	bne.n	800481e <HAL_RCC_OscConfig+0x18e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80047f0:	4b50      	ldr	r3, [pc, #320]	; (8004934 <HAL_RCC_OscConfig+0x2a4>)
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	f003 0304 	and.w	r3, r3, #4
 80047f8:	2b00      	cmp	r3, #0
 80047fa:	d005      	beq.n	8004808 <HAL_RCC_OscConfig+0x178>
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	68db      	ldr	r3, [r3, #12]
 8004800:	2b00      	cmp	r3, #0
 8004802:	d101      	bne.n	8004808 <HAL_RCC_OscConfig+0x178>
      {
        return HAL_ERROR;
 8004804:	2301      	movs	r3, #1
 8004806:	e2c7      	b.n	8004d98 <HAL_RCC_OscConfig+0x708>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004808:	4b4a      	ldr	r3, [pc, #296]	; (8004934 <HAL_RCC_OscConfig+0x2a4>)
 800480a:	685b      	ldr	r3, [r3, #4]
 800480c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	691b      	ldr	r3, [r3, #16]
 8004814:	061b      	lsls	r3, r3, #24
 8004816:	4947      	ldr	r1, [pc, #284]	; (8004934 <HAL_RCC_OscConfig+0x2a4>)
 8004818:	4313      	orrs	r3, r2
 800481a:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800481c:	e043      	b.n	80048a6 <HAL_RCC_OscConfig+0x216>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	68db      	ldr	r3, [r3, #12]
 8004822:	2b00      	cmp	r3, #0
 8004824:	d026      	beq.n	8004874 <HAL_RCC_OscConfig+0x1e4>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8004826:	4b43      	ldr	r3, [pc, #268]	; (8004934 <HAL_RCC_OscConfig+0x2a4>)
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	f023 0219 	bic.w	r2, r3, #25
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	68db      	ldr	r3, [r3, #12]
 8004832:	4940      	ldr	r1, [pc, #256]	; (8004934 <HAL_RCC_OscConfig+0x2a4>)
 8004834:	4313      	orrs	r3, r2
 8004836:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004838:	f7fc ff7a 	bl	8001730 <HAL_GetTick>
 800483c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800483e:	e008      	b.n	8004852 <HAL_RCC_OscConfig+0x1c2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004840:	f7fc ff76 	bl	8001730 <HAL_GetTick>
 8004844:	4602      	mov	r2, r0
 8004846:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004848:	1ad3      	subs	r3, r2, r3
 800484a:	2b02      	cmp	r3, #2
 800484c:	d901      	bls.n	8004852 <HAL_RCC_OscConfig+0x1c2>
          {
            return HAL_TIMEOUT;
 800484e:	2303      	movs	r3, #3
 8004850:	e2a2      	b.n	8004d98 <HAL_RCC_OscConfig+0x708>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004852:	4b38      	ldr	r3, [pc, #224]	; (8004934 <HAL_RCC_OscConfig+0x2a4>)
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	f003 0304 	and.w	r3, r3, #4
 800485a:	2b00      	cmp	r3, #0
 800485c:	d0f0      	beq.n	8004840 <HAL_RCC_OscConfig+0x1b0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800485e:	4b35      	ldr	r3, [pc, #212]	; (8004934 <HAL_RCC_OscConfig+0x2a4>)
 8004860:	685b      	ldr	r3, [r3, #4]
 8004862:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	691b      	ldr	r3, [r3, #16]
 800486a:	061b      	lsls	r3, r3, #24
 800486c:	4931      	ldr	r1, [pc, #196]	; (8004934 <HAL_RCC_OscConfig+0x2a4>)
 800486e:	4313      	orrs	r3, r2
 8004870:	604b      	str	r3, [r1, #4]
 8004872:	e018      	b.n	80048a6 <HAL_RCC_OscConfig+0x216>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004874:	4b2f      	ldr	r3, [pc, #188]	; (8004934 <HAL_RCC_OscConfig+0x2a4>)
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	4a2e      	ldr	r2, [pc, #184]	; (8004934 <HAL_RCC_OscConfig+0x2a4>)
 800487a:	f023 0301 	bic.w	r3, r3, #1
 800487e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004880:	f7fc ff56 	bl	8001730 <HAL_GetTick>
 8004884:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8004886:	e008      	b.n	800489a <HAL_RCC_OscConfig+0x20a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004888:	f7fc ff52 	bl	8001730 <HAL_GetTick>
 800488c:	4602      	mov	r2, r0
 800488e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004890:	1ad3      	subs	r3, r2, r3
 8004892:	2b02      	cmp	r3, #2
 8004894:	d901      	bls.n	800489a <HAL_RCC_OscConfig+0x20a>
          {
            return HAL_TIMEOUT;
 8004896:	2303      	movs	r3, #3
 8004898:	e27e      	b.n	8004d98 <HAL_RCC_OscConfig+0x708>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800489a:	4b26      	ldr	r3, [pc, #152]	; (8004934 <HAL_RCC_OscConfig+0x2a4>)
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	f003 0304 	and.w	r3, r3, #4
 80048a2:	2b00      	cmp	r3, #0
 80048a4:	d1f0      	bne.n	8004888 <HAL_RCC_OscConfig+0x1f8>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	f003 0310 	and.w	r3, r3, #16
 80048ae:	2b00      	cmp	r3, #0
 80048b0:	d06c      	beq.n	800498c <HAL_RCC_OscConfig+0x2fc>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80048b2:	4b20      	ldr	r3, [pc, #128]	; (8004934 <HAL_RCC_OscConfig+0x2a4>)
 80048b4:	691b      	ldr	r3, [r3, #16]
 80048b6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80048ba:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80048bc:	4b1d      	ldr	r3, [pc, #116]	; (8004934 <HAL_RCC_OscConfig+0x2a4>)
 80048be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80048c0:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 80048c2:	69bb      	ldr	r3, [r7, #24]
 80048c4:	2b08      	cmp	r3, #8
 80048c6:	d007      	beq.n	80048d8 <HAL_RCC_OscConfig+0x248>
 80048c8:	69bb      	ldr	r3, [r7, #24]
 80048ca:	2b18      	cmp	r3, #24
 80048cc:	d11b      	bne.n	8004906 <HAL_RCC_OscConfig+0x276>
 80048ce:	697b      	ldr	r3, [r7, #20]
 80048d0:	f003 0303 	and.w	r3, r3, #3
 80048d4:	2b01      	cmp	r3, #1
 80048d6:	d116      	bne.n	8004906 <HAL_RCC_OscConfig+0x276>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80048d8:	4b16      	ldr	r3, [pc, #88]	; (8004934 <HAL_RCC_OscConfig+0x2a4>)
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80048e0:	2b00      	cmp	r3, #0
 80048e2:	d005      	beq.n	80048f0 <HAL_RCC_OscConfig+0x260>
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	69db      	ldr	r3, [r3, #28]
 80048e8:	2b80      	cmp	r3, #128	; 0x80
 80048ea:	d001      	beq.n	80048f0 <HAL_RCC_OscConfig+0x260>
      {
        return HAL_ERROR;
 80048ec:	2301      	movs	r3, #1
 80048ee:	e253      	b.n	8004d98 <HAL_RCC_OscConfig+0x708>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80048f0:	4b10      	ldr	r3, [pc, #64]	; (8004934 <HAL_RCC_OscConfig+0x2a4>)
 80048f2:	68db      	ldr	r3, [r3, #12]
 80048f4:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	6a1b      	ldr	r3, [r3, #32]
 80048fc:	061b      	lsls	r3, r3, #24
 80048fe:	490d      	ldr	r1, [pc, #52]	; (8004934 <HAL_RCC_OscConfig+0x2a4>)
 8004900:	4313      	orrs	r3, r2
 8004902:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8004904:	e042      	b.n	800498c <HAL_RCC_OscConfig+0x2fc>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	69db      	ldr	r3, [r3, #28]
 800490a:	2b00      	cmp	r3, #0
 800490c:	d025      	beq.n	800495a <HAL_RCC_OscConfig+0x2ca>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 800490e:	4b09      	ldr	r3, [pc, #36]	; (8004934 <HAL_RCC_OscConfig+0x2a4>)
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	4a08      	ldr	r2, [pc, #32]	; (8004934 <HAL_RCC_OscConfig+0x2a4>)
 8004914:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004918:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800491a:	f7fc ff09 	bl	8001730 <HAL_GetTick>
 800491e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8004920:	e00a      	b.n	8004938 <HAL_RCC_OscConfig+0x2a8>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8004922:	f7fc ff05 	bl	8001730 <HAL_GetTick>
 8004926:	4602      	mov	r2, r0
 8004928:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800492a:	1ad3      	subs	r3, r2, r3
 800492c:	2b02      	cmp	r3, #2
 800492e:	d903      	bls.n	8004938 <HAL_RCC_OscConfig+0x2a8>
          {
            return HAL_TIMEOUT;
 8004930:	2303      	movs	r3, #3
 8004932:	e231      	b.n	8004d98 <HAL_RCC_OscConfig+0x708>
 8004934:	58024400 	.word	0x58024400
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8004938:	4ba3      	ldr	r3, [pc, #652]	; (8004bc8 <HAL_RCC_OscConfig+0x538>)
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004940:	2b00      	cmp	r3, #0
 8004942:	d0ee      	beq.n	8004922 <HAL_RCC_OscConfig+0x292>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8004944:	4ba0      	ldr	r3, [pc, #640]	; (8004bc8 <HAL_RCC_OscConfig+0x538>)
 8004946:	68db      	ldr	r3, [r3, #12]
 8004948:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	6a1b      	ldr	r3, [r3, #32]
 8004950:	061b      	lsls	r3, r3, #24
 8004952:	499d      	ldr	r1, [pc, #628]	; (8004bc8 <HAL_RCC_OscConfig+0x538>)
 8004954:	4313      	orrs	r3, r2
 8004956:	60cb      	str	r3, [r1, #12]
 8004958:	e018      	b.n	800498c <HAL_RCC_OscConfig+0x2fc>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 800495a:	4b9b      	ldr	r3, [pc, #620]	; (8004bc8 <HAL_RCC_OscConfig+0x538>)
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	4a9a      	ldr	r2, [pc, #616]	; (8004bc8 <HAL_RCC_OscConfig+0x538>)
 8004960:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004964:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004966:	f7fc fee3 	bl	8001730 <HAL_GetTick>
 800496a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800496c:	e008      	b.n	8004980 <HAL_RCC_OscConfig+0x2f0>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 800496e:	f7fc fedf 	bl	8001730 <HAL_GetTick>
 8004972:	4602      	mov	r2, r0
 8004974:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004976:	1ad3      	subs	r3, r2, r3
 8004978:	2b02      	cmp	r3, #2
 800497a:	d901      	bls.n	8004980 <HAL_RCC_OscConfig+0x2f0>
          {
            return HAL_TIMEOUT;
 800497c:	2303      	movs	r3, #3
 800497e:	e20b      	b.n	8004d98 <HAL_RCC_OscConfig+0x708>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8004980:	4b91      	ldr	r3, [pc, #580]	; (8004bc8 <HAL_RCC_OscConfig+0x538>)
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004988:	2b00      	cmp	r3, #0
 800498a:	d1f0      	bne.n	800496e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	f003 0308 	and.w	r3, r3, #8
 8004994:	2b00      	cmp	r3, #0
 8004996:	d036      	beq.n	8004a06 <HAL_RCC_OscConfig+0x376>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	695b      	ldr	r3, [r3, #20]
 800499c:	2b00      	cmp	r3, #0
 800499e:	d019      	beq.n	80049d4 <HAL_RCC_OscConfig+0x344>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80049a0:	4b89      	ldr	r3, [pc, #548]	; (8004bc8 <HAL_RCC_OscConfig+0x538>)
 80049a2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80049a4:	4a88      	ldr	r2, [pc, #544]	; (8004bc8 <HAL_RCC_OscConfig+0x538>)
 80049a6:	f043 0301 	orr.w	r3, r3, #1
 80049aa:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80049ac:	f7fc fec0 	bl	8001730 <HAL_GetTick>
 80049b0:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80049b2:	e008      	b.n	80049c6 <HAL_RCC_OscConfig+0x336>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80049b4:	f7fc febc 	bl	8001730 <HAL_GetTick>
 80049b8:	4602      	mov	r2, r0
 80049ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049bc:	1ad3      	subs	r3, r2, r3
 80049be:	2b02      	cmp	r3, #2
 80049c0:	d901      	bls.n	80049c6 <HAL_RCC_OscConfig+0x336>
        {
          return HAL_TIMEOUT;
 80049c2:	2303      	movs	r3, #3
 80049c4:	e1e8      	b.n	8004d98 <HAL_RCC_OscConfig+0x708>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80049c6:	4b80      	ldr	r3, [pc, #512]	; (8004bc8 <HAL_RCC_OscConfig+0x538>)
 80049c8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80049ca:	f003 0302 	and.w	r3, r3, #2
 80049ce:	2b00      	cmp	r3, #0
 80049d0:	d0f0      	beq.n	80049b4 <HAL_RCC_OscConfig+0x324>
 80049d2:	e018      	b.n	8004a06 <HAL_RCC_OscConfig+0x376>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80049d4:	4b7c      	ldr	r3, [pc, #496]	; (8004bc8 <HAL_RCC_OscConfig+0x538>)
 80049d6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80049d8:	4a7b      	ldr	r2, [pc, #492]	; (8004bc8 <HAL_RCC_OscConfig+0x538>)
 80049da:	f023 0301 	bic.w	r3, r3, #1
 80049de:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80049e0:	f7fc fea6 	bl	8001730 <HAL_GetTick>
 80049e4:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80049e6:	e008      	b.n	80049fa <HAL_RCC_OscConfig+0x36a>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80049e8:	f7fc fea2 	bl	8001730 <HAL_GetTick>
 80049ec:	4602      	mov	r2, r0
 80049ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049f0:	1ad3      	subs	r3, r2, r3
 80049f2:	2b02      	cmp	r3, #2
 80049f4:	d901      	bls.n	80049fa <HAL_RCC_OscConfig+0x36a>
        {
          return HAL_TIMEOUT;
 80049f6:	2303      	movs	r3, #3
 80049f8:	e1ce      	b.n	8004d98 <HAL_RCC_OscConfig+0x708>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80049fa:	4b73      	ldr	r3, [pc, #460]	; (8004bc8 <HAL_RCC_OscConfig+0x538>)
 80049fc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80049fe:	f003 0302 	and.w	r3, r3, #2
 8004a02:	2b00      	cmp	r3, #0
 8004a04:	d1f0      	bne.n	80049e8 <HAL_RCC_OscConfig+0x358>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	f003 0320 	and.w	r3, r3, #32
 8004a0e:	2b00      	cmp	r3, #0
 8004a10:	d036      	beq.n	8004a80 <HAL_RCC_OscConfig+0x3f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	699b      	ldr	r3, [r3, #24]
 8004a16:	2b00      	cmp	r3, #0
 8004a18:	d019      	beq.n	8004a4e <HAL_RCC_OscConfig+0x3be>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8004a1a:	4b6b      	ldr	r3, [pc, #428]	; (8004bc8 <HAL_RCC_OscConfig+0x538>)
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	4a6a      	ldr	r2, [pc, #424]	; (8004bc8 <HAL_RCC_OscConfig+0x538>)
 8004a20:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8004a24:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8004a26:	f7fc fe83 	bl	8001730 <HAL_GetTick>
 8004a2a:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8004a2c:	e008      	b.n	8004a40 <HAL_RCC_OscConfig+0x3b0>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8004a2e:	f7fc fe7f 	bl	8001730 <HAL_GetTick>
 8004a32:	4602      	mov	r2, r0
 8004a34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a36:	1ad3      	subs	r3, r2, r3
 8004a38:	2b02      	cmp	r3, #2
 8004a3a:	d901      	bls.n	8004a40 <HAL_RCC_OscConfig+0x3b0>
        {
          return HAL_TIMEOUT;
 8004a3c:	2303      	movs	r3, #3
 8004a3e:	e1ab      	b.n	8004d98 <HAL_RCC_OscConfig+0x708>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8004a40:	4b61      	ldr	r3, [pc, #388]	; (8004bc8 <HAL_RCC_OscConfig+0x538>)
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004a48:	2b00      	cmp	r3, #0
 8004a4a:	d0f0      	beq.n	8004a2e <HAL_RCC_OscConfig+0x39e>
 8004a4c:	e018      	b.n	8004a80 <HAL_RCC_OscConfig+0x3f0>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8004a4e:	4b5e      	ldr	r3, [pc, #376]	; (8004bc8 <HAL_RCC_OscConfig+0x538>)
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	4a5d      	ldr	r2, [pc, #372]	; (8004bc8 <HAL_RCC_OscConfig+0x538>)
 8004a54:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004a58:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8004a5a:	f7fc fe69 	bl	8001730 <HAL_GetTick>
 8004a5e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8004a60:	e008      	b.n	8004a74 <HAL_RCC_OscConfig+0x3e4>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8004a62:	f7fc fe65 	bl	8001730 <HAL_GetTick>
 8004a66:	4602      	mov	r2, r0
 8004a68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a6a:	1ad3      	subs	r3, r2, r3
 8004a6c:	2b02      	cmp	r3, #2
 8004a6e:	d901      	bls.n	8004a74 <HAL_RCC_OscConfig+0x3e4>
        {
          return HAL_TIMEOUT;
 8004a70:	2303      	movs	r3, #3
 8004a72:	e191      	b.n	8004d98 <HAL_RCC_OscConfig+0x708>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8004a74:	4b54      	ldr	r3, [pc, #336]	; (8004bc8 <HAL_RCC_OscConfig+0x538>)
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004a7c:	2b00      	cmp	r3, #0
 8004a7e:	d1f0      	bne.n	8004a62 <HAL_RCC_OscConfig+0x3d2>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	f003 0304 	and.w	r3, r3, #4
 8004a88:	2b00      	cmp	r3, #0
 8004a8a:	f000 8081 	beq.w	8004b90 <HAL_RCC_OscConfig+0x500>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8004a8e:	4b4f      	ldr	r3, [pc, #316]	; (8004bcc <HAL_RCC_OscConfig+0x53c>)
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	4a4e      	ldr	r2, [pc, #312]	; (8004bcc <HAL_RCC_OscConfig+0x53c>)
 8004a94:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004a98:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004a9a:	f7fc fe49 	bl	8001730 <HAL_GetTick>
 8004a9e:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004aa0:	e008      	b.n	8004ab4 <HAL_RCC_OscConfig+0x424>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8004aa2:	f7fc fe45 	bl	8001730 <HAL_GetTick>
 8004aa6:	4602      	mov	r2, r0
 8004aa8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004aaa:	1ad3      	subs	r3, r2, r3
 8004aac:	2b64      	cmp	r3, #100	; 0x64
 8004aae:	d901      	bls.n	8004ab4 <HAL_RCC_OscConfig+0x424>
      {
        return HAL_TIMEOUT;
 8004ab0:	2303      	movs	r3, #3
 8004ab2:	e171      	b.n	8004d98 <HAL_RCC_OscConfig+0x708>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004ab4:	4b45      	ldr	r3, [pc, #276]	; (8004bcc <HAL_RCC_OscConfig+0x53c>)
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004abc:	2b00      	cmp	r3, #0
 8004abe:	d0f0      	beq.n	8004aa2 <HAL_RCC_OscConfig+0x412>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	689b      	ldr	r3, [r3, #8]
 8004ac4:	2b01      	cmp	r3, #1
 8004ac6:	d106      	bne.n	8004ad6 <HAL_RCC_OscConfig+0x446>
 8004ac8:	4b3f      	ldr	r3, [pc, #252]	; (8004bc8 <HAL_RCC_OscConfig+0x538>)
 8004aca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004acc:	4a3e      	ldr	r2, [pc, #248]	; (8004bc8 <HAL_RCC_OscConfig+0x538>)
 8004ace:	f043 0301 	orr.w	r3, r3, #1
 8004ad2:	6713      	str	r3, [r2, #112]	; 0x70
 8004ad4:	e02d      	b.n	8004b32 <HAL_RCC_OscConfig+0x4a2>
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	689b      	ldr	r3, [r3, #8]
 8004ada:	2b00      	cmp	r3, #0
 8004adc:	d10c      	bne.n	8004af8 <HAL_RCC_OscConfig+0x468>
 8004ade:	4b3a      	ldr	r3, [pc, #232]	; (8004bc8 <HAL_RCC_OscConfig+0x538>)
 8004ae0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004ae2:	4a39      	ldr	r2, [pc, #228]	; (8004bc8 <HAL_RCC_OscConfig+0x538>)
 8004ae4:	f023 0301 	bic.w	r3, r3, #1
 8004ae8:	6713      	str	r3, [r2, #112]	; 0x70
 8004aea:	4b37      	ldr	r3, [pc, #220]	; (8004bc8 <HAL_RCC_OscConfig+0x538>)
 8004aec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004aee:	4a36      	ldr	r2, [pc, #216]	; (8004bc8 <HAL_RCC_OscConfig+0x538>)
 8004af0:	f023 0304 	bic.w	r3, r3, #4
 8004af4:	6713      	str	r3, [r2, #112]	; 0x70
 8004af6:	e01c      	b.n	8004b32 <HAL_RCC_OscConfig+0x4a2>
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	689b      	ldr	r3, [r3, #8]
 8004afc:	2b05      	cmp	r3, #5
 8004afe:	d10c      	bne.n	8004b1a <HAL_RCC_OscConfig+0x48a>
 8004b00:	4b31      	ldr	r3, [pc, #196]	; (8004bc8 <HAL_RCC_OscConfig+0x538>)
 8004b02:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004b04:	4a30      	ldr	r2, [pc, #192]	; (8004bc8 <HAL_RCC_OscConfig+0x538>)
 8004b06:	f043 0304 	orr.w	r3, r3, #4
 8004b0a:	6713      	str	r3, [r2, #112]	; 0x70
 8004b0c:	4b2e      	ldr	r3, [pc, #184]	; (8004bc8 <HAL_RCC_OscConfig+0x538>)
 8004b0e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004b10:	4a2d      	ldr	r2, [pc, #180]	; (8004bc8 <HAL_RCC_OscConfig+0x538>)
 8004b12:	f043 0301 	orr.w	r3, r3, #1
 8004b16:	6713      	str	r3, [r2, #112]	; 0x70
 8004b18:	e00b      	b.n	8004b32 <HAL_RCC_OscConfig+0x4a2>
 8004b1a:	4b2b      	ldr	r3, [pc, #172]	; (8004bc8 <HAL_RCC_OscConfig+0x538>)
 8004b1c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004b1e:	4a2a      	ldr	r2, [pc, #168]	; (8004bc8 <HAL_RCC_OscConfig+0x538>)
 8004b20:	f023 0301 	bic.w	r3, r3, #1
 8004b24:	6713      	str	r3, [r2, #112]	; 0x70
 8004b26:	4b28      	ldr	r3, [pc, #160]	; (8004bc8 <HAL_RCC_OscConfig+0x538>)
 8004b28:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004b2a:	4a27      	ldr	r2, [pc, #156]	; (8004bc8 <HAL_RCC_OscConfig+0x538>)
 8004b2c:	f023 0304 	bic.w	r3, r3, #4
 8004b30:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	689b      	ldr	r3, [r3, #8]
 8004b36:	2b00      	cmp	r3, #0
 8004b38:	d015      	beq.n	8004b66 <HAL_RCC_OscConfig+0x4d6>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004b3a:	f7fc fdf9 	bl	8001730 <HAL_GetTick>
 8004b3e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004b40:	e00a      	b.n	8004b58 <HAL_RCC_OscConfig+0x4c8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004b42:	f7fc fdf5 	bl	8001730 <HAL_GetTick>
 8004b46:	4602      	mov	r2, r0
 8004b48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b4a:	1ad3      	subs	r3, r2, r3
 8004b4c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004b50:	4293      	cmp	r3, r2
 8004b52:	d901      	bls.n	8004b58 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_TIMEOUT;
 8004b54:	2303      	movs	r3, #3
 8004b56:	e11f      	b.n	8004d98 <HAL_RCC_OscConfig+0x708>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004b58:	4b1b      	ldr	r3, [pc, #108]	; (8004bc8 <HAL_RCC_OscConfig+0x538>)
 8004b5a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004b5c:	f003 0302 	and.w	r3, r3, #2
 8004b60:	2b00      	cmp	r3, #0
 8004b62:	d0ee      	beq.n	8004b42 <HAL_RCC_OscConfig+0x4b2>
 8004b64:	e014      	b.n	8004b90 <HAL_RCC_OscConfig+0x500>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004b66:	f7fc fde3 	bl	8001730 <HAL_GetTick>
 8004b6a:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8004b6c:	e00a      	b.n	8004b84 <HAL_RCC_OscConfig+0x4f4>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004b6e:	f7fc fddf 	bl	8001730 <HAL_GetTick>
 8004b72:	4602      	mov	r2, r0
 8004b74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b76:	1ad3      	subs	r3, r2, r3
 8004b78:	f241 3288 	movw	r2, #5000	; 0x1388
 8004b7c:	4293      	cmp	r3, r2
 8004b7e:	d901      	bls.n	8004b84 <HAL_RCC_OscConfig+0x4f4>
        {
          return HAL_TIMEOUT;
 8004b80:	2303      	movs	r3, #3
 8004b82:	e109      	b.n	8004d98 <HAL_RCC_OscConfig+0x708>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8004b84:	4b10      	ldr	r3, [pc, #64]	; (8004bc8 <HAL_RCC_OscConfig+0x538>)
 8004b86:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004b88:	f003 0302 	and.w	r3, r3, #2
 8004b8c:	2b00      	cmp	r3, #0
 8004b8e:	d1ee      	bne.n	8004b6e <HAL_RCC_OscConfig+0x4de>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b94:	2b00      	cmp	r3, #0
 8004b96:	f000 80fe 	beq.w	8004d96 <HAL_RCC_OscConfig+0x706>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8004b9a:	4b0b      	ldr	r3, [pc, #44]	; (8004bc8 <HAL_RCC_OscConfig+0x538>)
 8004b9c:	691b      	ldr	r3, [r3, #16]
 8004b9e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004ba2:	2b18      	cmp	r3, #24
 8004ba4:	f000 80b9 	beq.w	8004d1a <HAL_RCC_OscConfig+0x68a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bac:	2b02      	cmp	r3, #2
 8004bae:	f040 809a 	bne.w	8004ce6 <HAL_RCC_OscConfig+0x656>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004bb2:	4b05      	ldr	r3, [pc, #20]	; (8004bc8 <HAL_RCC_OscConfig+0x538>)
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	4a04      	ldr	r2, [pc, #16]	; (8004bc8 <HAL_RCC_OscConfig+0x538>)
 8004bb8:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004bbc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004bbe:	f7fc fdb7 	bl	8001730 <HAL_GetTick>
 8004bc2:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004bc4:	e00d      	b.n	8004be2 <HAL_RCC_OscConfig+0x552>
 8004bc6:	bf00      	nop
 8004bc8:	58024400 	.word	0x58024400
 8004bcc:	58024800 	.word	0x58024800
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004bd0:	f7fc fdae 	bl	8001730 <HAL_GetTick>
 8004bd4:	4602      	mov	r2, r0
 8004bd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bd8:	1ad3      	subs	r3, r2, r3
 8004bda:	2b02      	cmp	r3, #2
 8004bdc:	d901      	bls.n	8004be2 <HAL_RCC_OscConfig+0x552>
          {
            return HAL_TIMEOUT;
 8004bde:	2303      	movs	r3, #3
 8004be0:	e0da      	b.n	8004d98 <HAL_RCC_OscConfig+0x708>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004be2:	4b6f      	ldr	r3, [pc, #444]	; (8004da0 <HAL_RCC_OscConfig+0x710>)
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004bea:	2b00      	cmp	r3, #0
 8004bec:	d1f0      	bne.n	8004bd0 <HAL_RCC_OscConfig+0x540>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004bee:	4b6c      	ldr	r3, [pc, #432]	; (8004da0 <HAL_RCC_OscConfig+0x710>)
 8004bf0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004bf2:	4b6c      	ldr	r3, [pc, #432]	; (8004da4 <HAL_RCC_OscConfig+0x714>)
 8004bf4:	4013      	ands	r3, r2
 8004bf6:	687a      	ldr	r2, [r7, #4]
 8004bf8:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8004bfa:	687a      	ldr	r2, [r7, #4]
 8004bfc:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8004bfe:	0112      	lsls	r2, r2, #4
 8004c00:	430a      	orrs	r2, r1
 8004c02:	4967      	ldr	r1, [pc, #412]	; (8004da0 <HAL_RCC_OscConfig+0x710>)
 8004c04:	4313      	orrs	r3, r2
 8004c06:	628b      	str	r3, [r1, #40]	; 0x28
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c0c:	3b01      	subs	r3, #1
 8004c0e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004c16:	3b01      	subs	r3, #1
 8004c18:	025b      	lsls	r3, r3, #9
 8004c1a:	b29b      	uxth	r3, r3
 8004c1c:	431a      	orrs	r2, r3
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c22:	3b01      	subs	r3, #1
 8004c24:	041b      	lsls	r3, r3, #16
 8004c26:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8004c2a:	431a      	orrs	r2, r3
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004c30:	3b01      	subs	r3, #1
 8004c32:	061b      	lsls	r3, r3, #24
 8004c34:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8004c38:	4959      	ldr	r1, [pc, #356]	; (8004da0 <HAL_RCC_OscConfig+0x710>)
 8004c3a:	4313      	orrs	r3, r2
 8004c3c:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 8004c3e:	4b58      	ldr	r3, [pc, #352]	; (8004da0 <HAL_RCC_OscConfig+0x710>)
 8004c40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c42:	4a57      	ldr	r2, [pc, #348]	; (8004da0 <HAL_RCC_OscConfig+0x710>)
 8004c44:	f023 0301 	bic.w	r3, r3, #1
 8004c48:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8004c4a:	4b55      	ldr	r3, [pc, #340]	; (8004da0 <HAL_RCC_OscConfig+0x710>)
 8004c4c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004c4e:	4b56      	ldr	r3, [pc, #344]	; (8004da8 <HAL_RCC_OscConfig+0x718>)
 8004c50:	4013      	ands	r3, r2
 8004c52:	687a      	ldr	r2, [r7, #4]
 8004c54:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8004c56:	00d2      	lsls	r2, r2, #3
 8004c58:	4951      	ldr	r1, [pc, #324]	; (8004da0 <HAL_RCC_OscConfig+0x710>)
 8004c5a:	4313      	orrs	r3, r2
 8004c5c:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8004c5e:	4b50      	ldr	r3, [pc, #320]	; (8004da0 <HAL_RCC_OscConfig+0x710>)
 8004c60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c62:	f023 020c 	bic.w	r2, r3, #12
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c6a:	494d      	ldr	r1, [pc, #308]	; (8004da0 <HAL_RCC_OscConfig+0x710>)
 8004c6c:	4313      	orrs	r3, r2
 8004c6e:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8004c70:	4b4b      	ldr	r3, [pc, #300]	; (8004da0 <HAL_RCC_OscConfig+0x710>)
 8004c72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c74:	f023 0202 	bic.w	r2, r3, #2
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004c7c:	4948      	ldr	r1, [pc, #288]	; (8004da0 <HAL_RCC_OscConfig+0x710>)
 8004c7e:	4313      	orrs	r3, r2
 8004c80:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8004c82:	4b47      	ldr	r3, [pc, #284]	; (8004da0 <HAL_RCC_OscConfig+0x710>)
 8004c84:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c86:	4a46      	ldr	r2, [pc, #280]	; (8004da0 <HAL_RCC_OscConfig+0x710>)
 8004c88:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004c8c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004c8e:	4b44      	ldr	r3, [pc, #272]	; (8004da0 <HAL_RCC_OscConfig+0x710>)
 8004c90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c92:	4a43      	ldr	r2, [pc, #268]	; (8004da0 <HAL_RCC_OscConfig+0x710>)
 8004c94:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004c98:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8004c9a:	4b41      	ldr	r3, [pc, #260]	; (8004da0 <HAL_RCC_OscConfig+0x710>)
 8004c9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c9e:	4a40      	ldr	r2, [pc, #256]	; (8004da0 <HAL_RCC_OscConfig+0x710>)
 8004ca0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004ca4:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 8004ca6:	4b3e      	ldr	r3, [pc, #248]	; (8004da0 <HAL_RCC_OscConfig+0x710>)
 8004ca8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004caa:	4a3d      	ldr	r2, [pc, #244]	; (8004da0 <HAL_RCC_OscConfig+0x710>)
 8004cac:	f043 0301 	orr.w	r3, r3, #1
 8004cb0:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004cb2:	4b3b      	ldr	r3, [pc, #236]	; (8004da0 <HAL_RCC_OscConfig+0x710>)
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	4a3a      	ldr	r2, [pc, #232]	; (8004da0 <HAL_RCC_OscConfig+0x710>)
 8004cb8:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004cbc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004cbe:	f7fc fd37 	bl	8001730 <HAL_GetTick>
 8004cc2:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8004cc4:	e008      	b.n	8004cd8 <HAL_RCC_OscConfig+0x648>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004cc6:	f7fc fd33 	bl	8001730 <HAL_GetTick>
 8004cca:	4602      	mov	r2, r0
 8004ccc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cce:	1ad3      	subs	r3, r2, r3
 8004cd0:	2b02      	cmp	r3, #2
 8004cd2:	d901      	bls.n	8004cd8 <HAL_RCC_OscConfig+0x648>
          {
            return HAL_TIMEOUT;
 8004cd4:	2303      	movs	r3, #3
 8004cd6:	e05f      	b.n	8004d98 <HAL_RCC_OscConfig+0x708>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8004cd8:	4b31      	ldr	r3, [pc, #196]	; (8004da0 <HAL_RCC_OscConfig+0x710>)
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004ce0:	2b00      	cmp	r3, #0
 8004ce2:	d0f0      	beq.n	8004cc6 <HAL_RCC_OscConfig+0x636>
 8004ce4:	e057      	b.n	8004d96 <HAL_RCC_OscConfig+0x706>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004ce6:	4b2e      	ldr	r3, [pc, #184]	; (8004da0 <HAL_RCC_OscConfig+0x710>)
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	4a2d      	ldr	r2, [pc, #180]	; (8004da0 <HAL_RCC_OscConfig+0x710>)
 8004cec:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004cf0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004cf2:	f7fc fd1d 	bl	8001730 <HAL_GetTick>
 8004cf6:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004cf8:	e008      	b.n	8004d0c <HAL_RCC_OscConfig+0x67c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004cfa:	f7fc fd19 	bl	8001730 <HAL_GetTick>
 8004cfe:	4602      	mov	r2, r0
 8004d00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d02:	1ad3      	subs	r3, r2, r3
 8004d04:	2b02      	cmp	r3, #2
 8004d06:	d901      	bls.n	8004d0c <HAL_RCC_OscConfig+0x67c>
          {
            return HAL_TIMEOUT;
 8004d08:	2303      	movs	r3, #3
 8004d0a:	e045      	b.n	8004d98 <HAL_RCC_OscConfig+0x708>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004d0c:	4b24      	ldr	r3, [pc, #144]	; (8004da0 <HAL_RCC_OscConfig+0x710>)
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004d14:	2b00      	cmp	r3, #0
 8004d16:	d1f0      	bne.n	8004cfa <HAL_RCC_OscConfig+0x66a>
 8004d18:	e03d      	b.n	8004d96 <HAL_RCC_OscConfig+0x706>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8004d1a:	4b21      	ldr	r3, [pc, #132]	; (8004da0 <HAL_RCC_OscConfig+0x710>)
 8004d1c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d1e:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8004d20:	4b1f      	ldr	r3, [pc, #124]	; (8004da0 <HAL_RCC_OscConfig+0x710>)
 8004d22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d24:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d2a:	2b01      	cmp	r3, #1
 8004d2c:	d031      	beq.n	8004d92 <HAL_RCC_OscConfig+0x702>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004d2e:	693b      	ldr	r3, [r7, #16]
 8004d30:	f003 0203 	and.w	r2, r3, #3
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004d38:	429a      	cmp	r2, r3
 8004d3a:	d12a      	bne.n	8004d92 <HAL_RCC_OscConfig+0x702>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8004d3c:	693b      	ldr	r3, [r7, #16]
 8004d3e:	091b      	lsrs	r3, r3, #4
 8004d40:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004d48:	429a      	cmp	r2, r3
 8004d4a:	d122      	bne.n	8004d92 <HAL_RCC_OscConfig+0x702>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8004d4c:	68fb      	ldr	r3, [r7, #12]
 8004d4e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d56:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8004d58:	429a      	cmp	r2, r3
 8004d5a:	d11a      	bne.n	8004d92 <HAL_RCC_OscConfig+0x702>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8004d5c:	68fb      	ldr	r3, [r7, #12]
 8004d5e:	0a5b      	lsrs	r3, r3, #9
 8004d60:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004d68:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8004d6a:	429a      	cmp	r2, r3
 8004d6c:	d111      	bne.n	8004d92 <HAL_RCC_OscConfig+0x702>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8004d6e:	68fb      	ldr	r3, [r7, #12]
 8004d70:	0c1b      	lsrs	r3, r3, #16
 8004d72:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d7a:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8004d7c:	429a      	cmp	r2, r3
 8004d7e:	d108      	bne.n	8004d92 <HAL_RCC_OscConfig+0x702>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8004d80:	68fb      	ldr	r3, [r7, #12]
 8004d82:	0e1b      	lsrs	r3, r3, #24
 8004d84:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004d8c:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8004d8e:	429a      	cmp	r2, r3
 8004d90:	d001      	beq.n	8004d96 <HAL_RCC_OscConfig+0x706>
      {
        return HAL_ERROR;
 8004d92:	2301      	movs	r3, #1
 8004d94:	e000      	b.n	8004d98 <HAL_RCC_OscConfig+0x708>
      }
    }
  }
  return HAL_OK;
 8004d96:	2300      	movs	r3, #0
}
 8004d98:	4618      	mov	r0, r3
 8004d9a:	3730      	adds	r7, #48	; 0x30
 8004d9c:	46bd      	mov	sp, r7
 8004d9e:	bd80      	pop	{r7, pc}
 8004da0:	58024400 	.word	0x58024400
 8004da4:	fffffc0c 	.word	0xfffffc0c
 8004da8:	ffff0007 	.word	0xffff0007

08004dac <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004dac:	b580      	push	{r7, lr}
 8004dae:	b086      	sub	sp, #24
 8004db0:	af00      	add	r7, sp, #0
 8004db2:	6078      	str	r0, [r7, #4]
 8004db4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	2b00      	cmp	r3, #0
 8004dba:	d101      	bne.n	8004dc0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004dbc:	2301      	movs	r3, #1
 8004dbe:	e19c      	b.n	80050fa <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004dc0:	4b8a      	ldr	r3, [pc, #552]	; (8004fec <HAL_RCC_ClockConfig+0x240>)
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	f003 030f 	and.w	r3, r3, #15
 8004dc8:	683a      	ldr	r2, [r7, #0]
 8004dca:	429a      	cmp	r2, r3
 8004dcc:	d910      	bls.n	8004df0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004dce:	4b87      	ldr	r3, [pc, #540]	; (8004fec <HAL_RCC_ClockConfig+0x240>)
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	f023 020f 	bic.w	r2, r3, #15
 8004dd6:	4985      	ldr	r1, [pc, #532]	; (8004fec <HAL_RCC_ClockConfig+0x240>)
 8004dd8:	683b      	ldr	r3, [r7, #0]
 8004dda:	4313      	orrs	r3, r2
 8004ddc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004dde:	4b83      	ldr	r3, [pc, #524]	; (8004fec <HAL_RCC_ClockConfig+0x240>)
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	f003 030f 	and.w	r3, r3, #15
 8004de6:	683a      	ldr	r2, [r7, #0]
 8004de8:	429a      	cmp	r2, r3
 8004dea:	d001      	beq.n	8004df0 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8004dec:	2301      	movs	r3, #1
 8004dee:	e184      	b.n	80050fa <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	f003 0304 	and.w	r3, r3, #4
 8004df8:	2b00      	cmp	r3, #0
 8004dfa:	d010      	beq.n	8004e1e <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	691a      	ldr	r2, [r3, #16]
 8004e00:	4b7b      	ldr	r3, [pc, #492]	; (8004ff0 <HAL_RCC_ClockConfig+0x244>)
 8004e02:	699b      	ldr	r3, [r3, #24]
 8004e04:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004e08:	429a      	cmp	r2, r3
 8004e0a:	d908      	bls.n	8004e1e <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8004e0c:	4b78      	ldr	r3, [pc, #480]	; (8004ff0 <HAL_RCC_ClockConfig+0x244>)
 8004e0e:	699b      	ldr	r3, [r3, #24]
 8004e10:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	691b      	ldr	r3, [r3, #16]
 8004e18:	4975      	ldr	r1, [pc, #468]	; (8004ff0 <HAL_RCC_ClockConfig+0x244>)
 8004e1a:	4313      	orrs	r3, r2
 8004e1c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	f003 0308 	and.w	r3, r3, #8
 8004e26:	2b00      	cmp	r3, #0
 8004e28:	d010      	beq.n	8004e4c <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	695a      	ldr	r2, [r3, #20]
 8004e2e:	4b70      	ldr	r3, [pc, #448]	; (8004ff0 <HAL_RCC_ClockConfig+0x244>)
 8004e30:	69db      	ldr	r3, [r3, #28]
 8004e32:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004e36:	429a      	cmp	r2, r3
 8004e38:	d908      	bls.n	8004e4c <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8004e3a:	4b6d      	ldr	r3, [pc, #436]	; (8004ff0 <HAL_RCC_ClockConfig+0x244>)
 8004e3c:	69db      	ldr	r3, [r3, #28]
 8004e3e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	695b      	ldr	r3, [r3, #20]
 8004e46:	496a      	ldr	r1, [pc, #424]	; (8004ff0 <HAL_RCC_ClockConfig+0x244>)
 8004e48:	4313      	orrs	r3, r2
 8004e4a:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	f003 0310 	and.w	r3, r3, #16
 8004e54:	2b00      	cmp	r3, #0
 8004e56:	d010      	beq.n	8004e7a <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	699a      	ldr	r2, [r3, #24]
 8004e5c:	4b64      	ldr	r3, [pc, #400]	; (8004ff0 <HAL_RCC_ClockConfig+0x244>)
 8004e5e:	69db      	ldr	r3, [r3, #28]
 8004e60:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004e64:	429a      	cmp	r2, r3
 8004e66:	d908      	bls.n	8004e7a <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8004e68:	4b61      	ldr	r3, [pc, #388]	; (8004ff0 <HAL_RCC_ClockConfig+0x244>)
 8004e6a:	69db      	ldr	r3, [r3, #28]
 8004e6c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	699b      	ldr	r3, [r3, #24]
 8004e74:	495e      	ldr	r1, [pc, #376]	; (8004ff0 <HAL_RCC_ClockConfig+0x244>)
 8004e76:	4313      	orrs	r3, r2
 8004e78:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	f003 0320 	and.w	r3, r3, #32
 8004e82:	2b00      	cmp	r3, #0
 8004e84:	d010      	beq.n	8004ea8 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	69da      	ldr	r2, [r3, #28]
 8004e8a:	4b59      	ldr	r3, [pc, #356]	; (8004ff0 <HAL_RCC_ClockConfig+0x244>)
 8004e8c:	6a1b      	ldr	r3, [r3, #32]
 8004e8e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004e92:	429a      	cmp	r2, r3
 8004e94:	d908      	bls.n	8004ea8 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8004e96:	4b56      	ldr	r3, [pc, #344]	; (8004ff0 <HAL_RCC_ClockConfig+0x244>)
 8004e98:	6a1b      	ldr	r3, [r3, #32]
 8004e9a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	69db      	ldr	r3, [r3, #28]
 8004ea2:	4953      	ldr	r1, [pc, #332]	; (8004ff0 <HAL_RCC_ClockConfig+0x244>)
 8004ea4:	4313      	orrs	r3, r2
 8004ea6:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	f003 0302 	and.w	r3, r3, #2
 8004eb0:	2b00      	cmp	r3, #0
 8004eb2:	d010      	beq.n	8004ed6 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	68da      	ldr	r2, [r3, #12]
 8004eb8:	4b4d      	ldr	r3, [pc, #308]	; (8004ff0 <HAL_RCC_ClockConfig+0x244>)
 8004eba:	699b      	ldr	r3, [r3, #24]
 8004ebc:	f003 030f 	and.w	r3, r3, #15
 8004ec0:	429a      	cmp	r2, r3
 8004ec2:	d908      	bls.n	8004ed6 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004ec4:	4b4a      	ldr	r3, [pc, #296]	; (8004ff0 <HAL_RCC_ClockConfig+0x244>)
 8004ec6:	699b      	ldr	r3, [r3, #24]
 8004ec8:	f023 020f 	bic.w	r2, r3, #15
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	68db      	ldr	r3, [r3, #12]
 8004ed0:	4947      	ldr	r1, [pc, #284]	; (8004ff0 <HAL_RCC_ClockConfig+0x244>)
 8004ed2:	4313      	orrs	r3, r2
 8004ed4:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	f003 0301 	and.w	r3, r3, #1
 8004ede:	2b00      	cmp	r3, #0
 8004ee0:	d055      	beq.n	8004f8e <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8004ee2:	4b43      	ldr	r3, [pc, #268]	; (8004ff0 <HAL_RCC_ClockConfig+0x244>)
 8004ee4:	699b      	ldr	r3, [r3, #24]
 8004ee6:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	689b      	ldr	r3, [r3, #8]
 8004eee:	4940      	ldr	r1, [pc, #256]	; (8004ff0 <HAL_RCC_ClockConfig+0x244>)
 8004ef0:	4313      	orrs	r3, r2
 8004ef2:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	685b      	ldr	r3, [r3, #4]
 8004ef8:	2b02      	cmp	r3, #2
 8004efa:	d107      	bne.n	8004f0c <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004efc:	4b3c      	ldr	r3, [pc, #240]	; (8004ff0 <HAL_RCC_ClockConfig+0x244>)
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004f04:	2b00      	cmp	r3, #0
 8004f06:	d121      	bne.n	8004f4c <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8004f08:	2301      	movs	r3, #1
 8004f0a:	e0f6      	b.n	80050fa <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	685b      	ldr	r3, [r3, #4]
 8004f10:	2b03      	cmp	r3, #3
 8004f12:	d107      	bne.n	8004f24 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8004f14:	4b36      	ldr	r3, [pc, #216]	; (8004ff0 <HAL_RCC_ClockConfig+0x244>)
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004f1c:	2b00      	cmp	r3, #0
 8004f1e:	d115      	bne.n	8004f4c <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8004f20:	2301      	movs	r3, #1
 8004f22:	e0ea      	b.n	80050fa <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	685b      	ldr	r3, [r3, #4]
 8004f28:	2b01      	cmp	r3, #1
 8004f2a:	d107      	bne.n	8004f3c <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8004f2c:	4b30      	ldr	r3, [pc, #192]	; (8004ff0 <HAL_RCC_ClockConfig+0x244>)
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004f34:	2b00      	cmp	r3, #0
 8004f36:	d109      	bne.n	8004f4c <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8004f38:	2301      	movs	r3, #1
 8004f3a:	e0de      	b.n	80050fa <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004f3c:	4b2c      	ldr	r3, [pc, #176]	; (8004ff0 <HAL_RCC_ClockConfig+0x244>)
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	f003 0304 	and.w	r3, r3, #4
 8004f44:	2b00      	cmp	r3, #0
 8004f46:	d101      	bne.n	8004f4c <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8004f48:	2301      	movs	r3, #1
 8004f4a:	e0d6      	b.n	80050fa <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004f4c:	4b28      	ldr	r3, [pc, #160]	; (8004ff0 <HAL_RCC_ClockConfig+0x244>)
 8004f4e:	691b      	ldr	r3, [r3, #16]
 8004f50:	f023 0207 	bic.w	r2, r3, #7
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	685b      	ldr	r3, [r3, #4]
 8004f58:	4925      	ldr	r1, [pc, #148]	; (8004ff0 <HAL_RCC_ClockConfig+0x244>)
 8004f5a:	4313      	orrs	r3, r2
 8004f5c:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004f5e:	f7fc fbe7 	bl	8001730 <HAL_GetTick>
 8004f62:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004f64:	e00a      	b.n	8004f7c <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004f66:	f7fc fbe3 	bl	8001730 <HAL_GetTick>
 8004f6a:	4602      	mov	r2, r0
 8004f6c:	697b      	ldr	r3, [r7, #20]
 8004f6e:	1ad3      	subs	r3, r2, r3
 8004f70:	f241 3288 	movw	r2, #5000	; 0x1388
 8004f74:	4293      	cmp	r3, r2
 8004f76:	d901      	bls.n	8004f7c <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8004f78:	2303      	movs	r3, #3
 8004f7a:	e0be      	b.n	80050fa <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004f7c:	4b1c      	ldr	r3, [pc, #112]	; (8004ff0 <HAL_RCC_ClockConfig+0x244>)
 8004f7e:	691b      	ldr	r3, [r3, #16]
 8004f80:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	685b      	ldr	r3, [r3, #4]
 8004f88:	00db      	lsls	r3, r3, #3
 8004f8a:	429a      	cmp	r2, r3
 8004f8c:	d1eb      	bne.n	8004f66 <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	f003 0302 	and.w	r3, r3, #2
 8004f96:	2b00      	cmp	r3, #0
 8004f98:	d010      	beq.n	8004fbc <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	68da      	ldr	r2, [r3, #12]
 8004f9e:	4b14      	ldr	r3, [pc, #80]	; (8004ff0 <HAL_RCC_ClockConfig+0x244>)
 8004fa0:	699b      	ldr	r3, [r3, #24]
 8004fa2:	f003 030f 	and.w	r3, r3, #15
 8004fa6:	429a      	cmp	r2, r3
 8004fa8:	d208      	bcs.n	8004fbc <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004faa:	4b11      	ldr	r3, [pc, #68]	; (8004ff0 <HAL_RCC_ClockConfig+0x244>)
 8004fac:	699b      	ldr	r3, [r3, #24]
 8004fae:	f023 020f 	bic.w	r2, r3, #15
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	68db      	ldr	r3, [r3, #12]
 8004fb6:	490e      	ldr	r1, [pc, #56]	; (8004ff0 <HAL_RCC_ClockConfig+0x244>)
 8004fb8:	4313      	orrs	r3, r2
 8004fba:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004fbc:	4b0b      	ldr	r3, [pc, #44]	; (8004fec <HAL_RCC_ClockConfig+0x240>)
 8004fbe:	681b      	ldr	r3, [r3, #0]
 8004fc0:	f003 030f 	and.w	r3, r3, #15
 8004fc4:	683a      	ldr	r2, [r7, #0]
 8004fc6:	429a      	cmp	r2, r3
 8004fc8:	d214      	bcs.n	8004ff4 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004fca:	4b08      	ldr	r3, [pc, #32]	; (8004fec <HAL_RCC_ClockConfig+0x240>)
 8004fcc:	681b      	ldr	r3, [r3, #0]
 8004fce:	f023 020f 	bic.w	r2, r3, #15
 8004fd2:	4906      	ldr	r1, [pc, #24]	; (8004fec <HAL_RCC_ClockConfig+0x240>)
 8004fd4:	683b      	ldr	r3, [r7, #0]
 8004fd6:	4313      	orrs	r3, r2
 8004fd8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004fda:	4b04      	ldr	r3, [pc, #16]	; (8004fec <HAL_RCC_ClockConfig+0x240>)
 8004fdc:	681b      	ldr	r3, [r3, #0]
 8004fde:	f003 030f 	and.w	r3, r3, #15
 8004fe2:	683a      	ldr	r2, [r7, #0]
 8004fe4:	429a      	cmp	r2, r3
 8004fe6:	d005      	beq.n	8004ff4 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8004fe8:	2301      	movs	r3, #1
 8004fea:	e086      	b.n	80050fa <HAL_RCC_ClockConfig+0x34e>
 8004fec:	52002000 	.word	0x52002000
 8004ff0:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	f003 0304 	and.w	r3, r3, #4
 8004ffc:	2b00      	cmp	r3, #0
 8004ffe:	d010      	beq.n	8005022 <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	691a      	ldr	r2, [r3, #16]
 8005004:	4b3f      	ldr	r3, [pc, #252]	; (8005104 <HAL_RCC_ClockConfig+0x358>)
 8005006:	699b      	ldr	r3, [r3, #24]
 8005008:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800500c:	429a      	cmp	r2, r3
 800500e:	d208      	bcs.n	8005022 <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8005010:	4b3c      	ldr	r3, [pc, #240]	; (8005104 <HAL_RCC_ClockConfig+0x358>)
 8005012:	699b      	ldr	r3, [r3, #24]
 8005014:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	691b      	ldr	r3, [r3, #16]
 800501c:	4939      	ldr	r1, [pc, #228]	; (8005104 <HAL_RCC_ClockConfig+0x358>)
 800501e:	4313      	orrs	r3, r2
 8005020:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	681b      	ldr	r3, [r3, #0]
 8005026:	f003 0308 	and.w	r3, r3, #8
 800502a:	2b00      	cmp	r3, #0
 800502c:	d010      	beq.n	8005050 <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	695a      	ldr	r2, [r3, #20]
 8005032:	4b34      	ldr	r3, [pc, #208]	; (8005104 <HAL_RCC_ClockConfig+0x358>)
 8005034:	69db      	ldr	r3, [r3, #28]
 8005036:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800503a:	429a      	cmp	r2, r3
 800503c:	d208      	bcs.n	8005050 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800503e:	4b31      	ldr	r3, [pc, #196]	; (8005104 <HAL_RCC_ClockConfig+0x358>)
 8005040:	69db      	ldr	r3, [r3, #28]
 8005042:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	695b      	ldr	r3, [r3, #20]
 800504a:	492e      	ldr	r1, [pc, #184]	; (8005104 <HAL_RCC_ClockConfig+0x358>)
 800504c:	4313      	orrs	r3, r2
 800504e:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	f003 0310 	and.w	r3, r3, #16
 8005058:	2b00      	cmp	r3, #0
 800505a:	d010      	beq.n	800507e <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	699a      	ldr	r2, [r3, #24]
 8005060:	4b28      	ldr	r3, [pc, #160]	; (8005104 <HAL_RCC_ClockConfig+0x358>)
 8005062:	69db      	ldr	r3, [r3, #28]
 8005064:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8005068:	429a      	cmp	r2, r3
 800506a:	d208      	bcs.n	800507e <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800506c:	4b25      	ldr	r3, [pc, #148]	; (8005104 <HAL_RCC_ClockConfig+0x358>)
 800506e:	69db      	ldr	r3, [r3, #28]
 8005070:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	699b      	ldr	r3, [r3, #24]
 8005078:	4922      	ldr	r1, [pc, #136]	; (8005104 <HAL_RCC_ClockConfig+0x358>)
 800507a:	4313      	orrs	r3, r2
 800507c:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	f003 0320 	and.w	r3, r3, #32
 8005086:	2b00      	cmp	r3, #0
 8005088:	d010      	beq.n	80050ac <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	69da      	ldr	r2, [r3, #28]
 800508e:	4b1d      	ldr	r3, [pc, #116]	; (8005104 <HAL_RCC_ClockConfig+0x358>)
 8005090:	6a1b      	ldr	r3, [r3, #32]
 8005092:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8005096:	429a      	cmp	r2, r3
 8005098:	d208      	bcs.n	80050ac <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 800509a:	4b1a      	ldr	r3, [pc, #104]	; (8005104 <HAL_RCC_ClockConfig+0x358>)
 800509c:	6a1b      	ldr	r3, [r3, #32]
 800509e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	69db      	ldr	r3, [r3, #28]
 80050a6:	4917      	ldr	r1, [pc, #92]	; (8005104 <HAL_RCC_ClockConfig+0x358>)
 80050a8:	4313      	orrs	r3, r2
 80050aa:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80050ac:	f000 f834 	bl	8005118 <HAL_RCC_GetSysClockFreq>
 80050b0:	4602      	mov	r2, r0
 80050b2:	4b14      	ldr	r3, [pc, #80]	; (8005104 <HAL_RCC_ClockConfig+0x358>)
 80050b4:	699b      	ldr	r3, [r3, #24]
 80050b6:	0a1b      	lsrs	r3, r3, #8
 80050b8:	f003 030f 	and.w	r3, r3, #15
 80050bc:	4912      	ldr	r1, [pc, #72]	; (8005108 <HAL_RCC_ClockConfig+0x35c>)
 80050be:	5ccb      	ldrb	r3, [r1, r3]
 80050c0:	f003 031f 	and.w	r3, r3, #31
 80050c4:	fa22 f303 	lsr.w	r3, r2, r3
 80050c8:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80050ca:	4b0e      	ldr	r3, [pc, #56]	; (8005104 <HAL_RCC_ClockConfig+0x358>)
 80050cc:	699b      	ldr	r3, [r3, #24]
 80050ce:	f003 030f 	and.w	r3, r3, #15
 80050d2:	4a0d      	ldr	r2, [pc, #52]	; (8005108 <HAL_RCC_ClockConfig+0x35c>)
 80050d4:	5cd3      	ldrb	r3, [r2, r3]
 80050d6:	f003 031f 	and.w	r3, r3, #31
 80050da:	693a      	ldr	r2, [r7, #16]
 80050dc:	fa22 f303 	lsr.w	r3, r2, r3
 80050e0:	4a0a      	ldr	r2, [pc, #40]	; (800510c <HAL_RCC_ClockConfig+0x360>)
 80050e2:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80050e4:	4a0a      	ldr	r2, [pc, #40]	; (8005110 <HAL_RCC_ClockConfig+0x364>)
 80050e6:	693b      	ldr	r3, [r7, #16]
 80050e8:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 80050ea:	4b0a      	ldr	r3, [pc, #40]	; (8005114 <HAL_RCC_ClockConfig+0x368>)
 80050ec:	681b      	ldr	r3, [r3, #0]
 80050ee:	4618      	mov	r0, r3
 80050f0:	f7fc f99c 	bl	800142c <HAL_InitTick>
 80050f4:	4603      	mov	r3, r0
 80050f6:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 80050f8:	7bfb      	ldrb	r3, [r7, #15]
}
 80050fa:	4618      	mov	r0, r3
 80050fc:	3718      	adds	r7, #24
 80050fe:	46bd      	mov	sp, r7
 8005100:	bd80      	pop	{r7, pc}
 8005102:	bf00      	nop
 8005104:	58024400 	.word	0x58024400
 8005108:	08012490 	.word	0x08012490
 800510c:	20000004 	.word	0x20000004
 8005110:	20000000 	.word	0x20000000
 8005114:	20000008 	.word	0x20000008

08005118 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005118:	b480      	push	{r7}
 800511a:	b089      	sub	sp, #36	; 0x24
 800511c:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 800511e:	4bb3      	ldr	r3, [pc, #716]	; (80053ec <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005120:	691b      	ldr	r3, [r3, #16]
 8005122:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005126:	2b18      	cmp	r3, #24
 8005128:	f200 8155 	bhi.w	80053d6 <HAL_RCC_GetSysClockFreq+0x2be>
 800512c:	a201      	add	r2, pc, #4	; (adr r2, 8005134 <HAL_RCC_GetSysClockFreq+0x1c>)
 800512e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005132:	bf00      	nop
 8005134:	08005199 	.word	0x08005199
 8005138:	080053d7 	.word	0x080053d7
 800513c:	080053d7 	.word	0x080053d7
 8005140:	080053d7 	.word	0x080053d7
 8005144:	080053d7 	.word	0x080053d7
 8005148:	080053d7 	.word	0x080053d7
 800514c:	080053d7 	.word	0x080053d7
 8005150:	080053d7 	.word	0x080053d7
 8005154:	080051bf 	.word	0x080051bf
 8005158:	080053d7 	.word	0x080053d7
 800515c:	080053d7 	.word	0x080053d7
 8005160:	080053d7 	.word	0x080053d7
 8005164:	080053d7 	.word	0x080053d7
 8005168:	080053d7 	.word	0x080053d7
 800516c:	080053d7 	.word	0x080053d7
 8005170:	080053d7 	.word	0x080053d7
 8005174:	080051c5 	.word	0x080051c5
 8005178:	080053d7 	.word	0x080053d7
 800517c:	080053d7 	.word	0x080053d7
 8005180:	080053d7 	.word	0x080053d7
 8005184:	080053d7 	.word	0x080053d7
 8005188:	080053d7 	.word	0x080053d7
 800518c:	080053d7 	.word	0x080053d7
 8005190:	080053d7 	.word	0x080053d7
 8005194:	080051cb 	.word	0x080051cb
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005198:	4b94      	ldr	r3, [pc, #592]	; (80053ec <HAL_RCC_GetSysClockFreq+0x2d4>)
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	f003 0320 	and.w	r3, r3, #32
 80051a0:	2b00      	cmp	r3, #0
 80051a2:	d009      	beq.n	80051b8 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80051a4:	4b91      	ldr	r3, [pc, #580]	; (80053ec <HAL_RCC_GetSysClockFreq+0x2d4>)
 80051a6:	681b      	ldr	r3, [r3, #0]
 80051a8:	08db      	lsrs	r3, r3, #3
 80051aa:	f003 0303 	and.w	r3, r3, #3
 80051ae:	4a90      	ldr	r2, [pc, #576]	; (80053f0 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80051b0:	fa22 f303 	lsr.w	r3, r2, r3
 80051b4:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 80051b6:	e111      	b.n	80053dc <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 80051b8:	4b8d      	ldr	r3, [pc, #564]	; (80053f0 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80051ba:	61bb      	str	r3, [r7, #24]
    break;
 80051bc:	e10e      	b.n	80053dc <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 80051be:	4b8d      	ldr	r3, [pc, #564]	; (80053f4 <HAL_RCC_GetSysClockFreq+0x2dc>)
 80051c0:	61bb      	str	r3, [r7, #24]
    break;
 80051c2:	e10b      	b.n	80053dc <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 80051c4:	4b8c      	ldr	r3, [pc, #560]	; (80053f8 <HAL_RCC_GetSysClockFreq+0x2e0>)
 80051c6:	61bb      	str	r3, [r7, #24]
    break;
 80051c8:	e108      	b.n	80053dc <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80051ca:	4b88      	ldr	r3, [pc, #544]	; (80053ec <HAL_RCC_GetSysClockFreq+0x2d4>)
 80051cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80051ce:	f003 0303 	and.w	r3, r3, #3
 80051d2:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 80051d4:	4b85      	ldr	r3, [pc, #532]	; (80053ec <HAL_RCC_GetSysClockFreq+0x2d4>)
 80051d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80051d8:	091b      	lsrs	r3, r3, #4
 80051da:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80051de:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 80051e0:	4b82      	ldr	r3, [pc, #520]	; (80053ec <HAL_RCC_GetSysClockFreq+0x2d4>)
 80051e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80051e4:	f003 0301 	and.w	r3, r3, #1
 80051e8:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 80051ea:	4b80      	ldr	r3, [pc, #512]	; (80053ec <HAL_RCC_GetSysClockFreq+0x2d4>)
 80051ec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80051ee:	08db      	lsrs	r3, r3, #3
 80051f0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80051f4:	68fa      	ldr	r2, [r7, #12]
 80051f6:	fb02 f303 	mul.w	r3, r2, r3
 80051fa:	ee07 3a90 	vmov	s15, r3
 80051fe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005202:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 8005206:	693b      	ldr	r3, [r7, #16]
 8005208:	2b00      	cmp	r3, #0
 800520a:	f000 80e1 	beq.w	80053d0 <HAL_RCC_GetSysClockFreq+0x2b8>
 800520e:	697b      	ldr	r3, [r7, #20]
 8005210:	2b02      	cmp	r3, #2
 8005212:	f000 8083 	beq.w	800531c <HAL_RCC_GetSysClockFreq+0x204>
 8005216:	697b      	ldr	r3, [r7, #20]
 8005218:	2b02      	cmp	r3, #2
 800521a:	f200 80a1 	bhi.w	8005360 <HAL_RCC_GetSysClockFreq+0x248>
 800521e:	697b      	ldr	r3, [r7, #20]
 8005220:	2b00      	cmp	r3, #0
 8005222:	d003      	beq.n	800522c <HAL_RCC_GetSysClockFreq+0x114>
 8005224:	697b      	ldr	r3, [r7, #20]
 8005226:	2b01      	cmp	r3, #1
 8005228:	d056      	beq.n	80052d8 <HAL_RCC_GetSysClockFreq+0x1c0>
 800522a:	e099      	b.n	8005360 <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800522c:	4b6f      	ldr	r3, [pc, #444]	; (80053ec <HAL_RCC_GetSysClockFreq+0x2d4>)
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	f003 0320 	and.w	r3, r3, #32
 8005234:	2b00      	cmp	r3, #0
 8005236:	d02d      	beq.n	8005294 <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8005238:	4b6c      	ldr	r3, [pc, #432]	; (80053ec <HAL_RCC_GetSysClockFreq+0x2d4>)
 800523a:	681b      	ldr	r3, [r3, #0]
 800523c:	08db      	lsrs	r3, r3, #3
 800523e:	f003 0303 	and.w	r3, r3, #3
 8005242:	4a6b      	ldr	r2, [pc, #428]	; (80053f0 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8005244:	fa22 f303 	lsr.w	r3, r2, r3
 8005248:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	ee07 3a90 	vmov	s15, r3
 8005250:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005254:	693b      	ldr	r3, [r7, #16]
 8005256:	ee07 3a90 	vmov	s15, r3
 800525a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800525e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005262:	4b62      	ldr	r3, [pc, #392]	; (80053ec <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005264:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005266:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800526a:	ee07 3a90 	vmov	s15, r3
 800526e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005272:	ed97 6a02 	vldr	s12, [r7, #8]
 8005276:	eddf 5a61 	vldr	s11, [pc, #388]	; 80053fc <HAL_RCC_GetSysClockFreq+0x2e4>
 800527a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800527e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005282:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005286:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800528a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800528e:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 8005292:	e087      	b.n	80053a4 <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8005294:	693b      	ldr	r3, [r7, #16]
 8005296:	ee07 3a90 	vmov	s15, r3
 800529a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800529e:	eddf 6a58 	vldr	s13, [pc, #352]	; 8005400 <HAL_RCC_GetSysClockFreq+0x2e8>
 80052a2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80052a6:	4b51      	ldr	r3, [pc, #324]	; (80053ec <HAL_RCC_GetSysClockFreq+0x2d4>)
 80052a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80052aa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80052ae:	ee07 3a90 	vmov	s15, r3
 80052b2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80052b6:	ed97 6a02 	vldr	s12, [r7, #8]
 80052ba:	eddf 5a50 	vldr	s11, [pc, #320]	; 80053fc <HAL_RCC_GetSysClockFreq+0x2e4>
 80052be:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80052c2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80052c6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80052ca:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80052ce:	ee67 7a27 	vmul.f32	s15, s14, s15
 80052d2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80052d6:	e065      	b.n	80053a4 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80052d8:	693b      	ldr	r3, [r7, #16]
 80052da:	ee07 3a90 	vmov	s15, r3
 80052de:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80052e2:	eddf 6a48 	vldr	s13, [pc, #288]	; 8005404 <HAL_RCC_GetSysClockFreq+0x2ec>
 80052e6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80052ea:	4b40      	ldr	r3, [pc, #256]	; (80053ec <HAL_RCC_GetSysClockFreq+0x2d4>)
 80052ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80052ee:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80052f2:	ee07 3a90 	vmov	s15, r3
 80052f6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80052fa:	ed97 6a02 	vldr	s12, [r7, #8]
 80052fe:	eddf 5a3f 	vldr	s11, [pc, #252]	; 80053fc <HAL_RCC_GetSysClockFreq+0x2e4>
 8005302:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005306:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800530a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800530e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005312:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005316:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800531a:	e043      	b.n	80053a4 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800531c:	693b      	ldr	r3, [r7, #16]
 800531e:	ee07 3a90 	vmov	s15, r3
 8005322:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005326:	eddf 6a38 	vldr	s13, [pc, #224]	; 8005408 <HAL_RCC_GetSysClockFreq+0x2f0>
 800532a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800532e:	4b2f      	ldr	r3, [pc, #188]	; (80053ec <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005330:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005332:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005336:	ee07 3a90 	vmov	s15, r3
 800533a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800533e:	ed97 6a02 	vldr	s12, [r7, #8]
 8005342:	eddf 5a2e 	vldr	s11, [pc, #184]	; 80053fc <HAL_RCC_GetSysClockFreq+0x2e4>
 8005346:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800534a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800534e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005352:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005356:	ee67 7a27 	vmul.f32	s15, s14, s15
 800535a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800535e:	e021      	b.n	80053a4 <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8005360:	693b      	ldr	r3, [r7, #16]
 8005362:	ee07 3a90 	vmov	s15, r3
 8005366:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800536a:	eddf 6a26 	vldr	s13, [pc, #152]	; 8005404 <HAL_RCC_GetSysClockFreq+0x2ec>
 800536e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005372:	4b1e      	ldr	r3, [pc, #120]	; (80053ec <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005374:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005376:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800537a:	ee07 3a90 	vmov	s15, r3
 800537e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005382:	ed97 6a02 	vldr	s12, [r7, #8]
 8005386:	eddf 5a1d 	vldr	s11, [pc, #116]	; 80053fc <HAL_RCC_GetSysClockFreq+0x2e4>
 800538a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800538e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005392:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005396:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800539a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800539e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80053a2:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 80053a4:	4b11      	ldr	r3, [pc, #68]	; (80053ec <HAL_RCC_GetSysClockFreq+0x2d4>)
 80053a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80053a8:	0a5b      	lsrs	r3, r3, #9
 80053aa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80053ae:	3301      	adds	r3, #1
 80053b0:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 80053b2:	683b      	ldr	r3, [r7, #0]
 80053b4:	ee07 3a90 	vmov	s15, r3
 80053b8:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80053bc:	edd7 6a07 	vldr	s13, [r7, #28]
 80053c0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80053c4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80053c8:	ee17 3a90 	vmov	r3, s15
 80053cc:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 80053ce:	e005      	b.n	80053dc <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 80053d0:	2300      	movs	r3, #0
 80053d2:	61bb      	str	r3, [r7, #24]
    break;
 80053d4:	e002      	b.n	80053dc <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 80053d6:	4b07      	ldr	r3, [pc, #28]	; (80053f4 <HAL_RCC_GetSysClockFreq+0x2dc>)
 80053d8:	61bb      	str	r3, [r7, #24]
    break;
 80053da:	bf00      	nop
  }

  return sysclockfreq;
 80053dc:	69bb      	ldr	r3, [r7, #24]
}
 80053de:	4618      	mov	r0, r3
 80053e0:	3724      	adds	r7, #36	; 0x24
 80053e2:	46bd      	mov	sp, r7
 80053e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053e8:	4770      	bx	lr
 80053ea:	bf00      	nop
 80053ec:	58024400 	.word	0x58024400
 80053f0:	03d09000 	.word	0x03d09000
 80053f4:	003d0900 	.word	0x003d0900
 80053f8:	007a1200 	.word	0x007a1200
 80053fc:	46000000 	.word	0x46000000
 8005400:	4c742400 	.word	0x4c742400
 8005404:	4a742400 	.word	0x4a742400
 8005408:	4af42400 	.word	0x4af42400

0800540c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800540c:	b580      	push	{r7, lr}
 800540e:	b082      	sub	sp, #8
 8005410:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8005412:	f7ff fe81 	bl	8005118 <HAL_RCC_GetSysClockFreq>
 8005416:	4602      	mov	r2, r0
 8005418:	4b10      	ldr	r3, [pc, #64]	; (800545c <HAL_RCC_GetHCLKFreq+0x50>)
 800541a:	699b      	ldr	r3, [r3, #24]
 800541c:	0a1b      	lsrs	r3, r3, #8
 800541e:	f003 030f 	and.w	r3, r3, #15
 8005422:	490f      	ldr	r1, [pc, #60]	; (8005460 <HAL_RCC_GetHCLKFreq+0x54>)
 8005424:	5ccb      	ldrb	r3, [r1, r3]
 8005426:	f003 031f 	and.w	r3, r3, #31
 800542a:	fa22 f303 	lsr.w	r3, r2, r3
 800542e:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8005430:	4b0a      	ldr	r3, [pc, #40]	; (800545c <HAL_RCC_GetHCLKFreq+0x50>)
 8005432:	699b      	ldr	r3, [r3, #24]
 8005434:	f003 030f 	and.w	r3, r3, #15
 8005438:	4a09      	ldr	r2, [pc, #36]	; (8005460 <HAL_RCC_GetHCLKFreq+0x54>)
 800543a:	5cd3      	ldrb	r3, [r2, r3]
 800543c:	f003 031f 	and.w	r3, r3, #31
 8005440:	687a      	ldr	r2, [r7, #4]
 8005442:	fa22 f303 	lsr.w	r3, r2, r3
 8005446:	4a07      	ldr	r2, [pc, #28]	; (8005464 <HAL_RCC_GetHCLKFreq+0x58>)
 8005448:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800544a:	4a07      	ldr	r2, [pc, #28]	; (8005468 <HAL_RCC_GetHCLKFreq+0x5c>)
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8005450:	4b04      	ldr	r3, [pc, #16]	; (8005464 <HAL_RCC_GetHCLKFreq+0x58>)
 8005452:	681b      	ldr	r3, [r3, #0]
}
 8005454:	4618      	mov	r0, r3
 8005456:	3708      	adds	r7, #8
 8005458:	46bd      	mov	sp, r7
 800545a:	bd80      	pop	{r7, pc}
 800545c:	58024400 	.word	0x58024400
 8005460:	08012490 	.word	0x08012490
 8005464:	20000004 	.word	0x20000004
 8005468:	20000000 	.word	0x20000000

0800546c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800546c:	b580      	push	{r7, lr}
 800546e:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8005470:	f7ff ffcc 	bl	800540c <HAL_RCC_GetHCLKFreq>
 8005474:	4602      	mov	r2, r0
 8005476:	4b06      	ldr	r3, [pc, #24]	; (8005490 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005478:	69db      	ldr	r3, [r3, #28]
 800547a:	091b      	lsrs	r3, r3, #4
 800547c:	f003 0307 	and.w	r3, r3, #7
 8005480:	4904      	ldr	r1, [pc, #16]	; (8005494 <HAL_RCC_GetPCLK1Freq+0x28>)
 8005482:	5ccb      	ldrb	r3, [r1, r3]
 8005484:	f003 031f 	and.w	r3, r3, #31
 8005488:	fa22 f303 	lsr.w	r3, r2, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 800548c:	4618      	mov	r0, r3
 800548e:	bd80      	pop	{r7, pc}
 8005490:	58024400 	.word	0x58024400
 8005494:	08012490 	.word	0x08012490

08005498 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005498:	b580      	push	{r7, lr}
 800549a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 800549c:	f7ff ffb6 	bl	800540c <HAL_RCC_GetHCLKFreq>
 80054a0:	4602      	mov	r2, r0
 80054a2:	4b06      	ldr	r3, [pc, #24]	; (80054bc <HAL_RCC_GetPCLK2Freq+0x24>)
 80054a4:	69db      	ldr	r3, [r3, #28]
 80054a6:	0a1b      	lsrs	r3, r3, #8
 80054a8:	f003 0307 	and.w	r3, r3, #7
 80054ac:	4904      	ldr	r1, [pc, #16]	; (80054c0 <HAL_RCC_GetPCLK2Freq+0x28>)
 80054ae:	5ccb      	ldrb	r3, [r1, r3]
 80054b0:	f003 031f 	and.w	r3, r3, #31
 80054b4:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 80054b8:	4618      	mov	r0, r3
 80054ba:	bd80      	pop	{r7, pc}
 80054bc:	58024400 	.word	0x58024400
 80054c0:	08012490 	.word	0x08012490

080054c4 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency: Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80054c4:	b480      	push	{r7}
 80054c6:	b083      	sub	sp, #12
 80054c8:	af00      	add	r7, sp, #0
 80054ca:	6078      	str	r0, [r7, #4]
 80054cc:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 | RCC_CLOCKTYPE_PCLK1 |
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	223f      	movs	r2, #63	; 0x3f
 80054d2:	601a      	str	r2, [r3, #0]
                                 RCC_CLOCKTYPE_PCLK2 |  RCC_CLOCKTYPE_D3PCLK1  ;

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80054d4:	4b1a      	ldr	r3, [pc, #104]	; (8005540 <HAL_RCC_GetClockConfig+0x7c>)
 80054d6:	691b      	ldr	r3, [r3, #16]
 80054d8:	f003 0207 	and.w	r2, r3, #7
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	605a      	str	r2, [r3, #4]

#if defined(RCC_D1CFGR_D1CPRE)
  /* Get the SYSCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1CPRE);
 80054e0:	4b17      	ldr	r3, [pc, #92]	; (8005540 <HAL_RCC_GetClockConfig+0x7c>)
 80054e2:	699b      	ldr	r3, [r3, #24]
 80054e4:	f403 6270 	and.w	r2, r3, #3840	; 0xf00
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	609a      	str	r2, [r3, #8]

  /* Get the D1HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_HPRE);
 80054ec:	4b14      	ldr	r3, [pc, #80]	; (8005540 <HAL_RCC_GetClockConfig+0x7c>)
 80054ee:	699b      	ldr	r3, [r3, #24]
 80054f0:	f003 020f 	and.w	r2, r3, #15
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	60da      	str	r2, [r3, #12]

  /* Get the APB3 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB3CLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1PPRE);
 80054f8:	4b11      	ldr	r3, [pc, #68]	; (8005540 <HAL_RCC_GetClockConfig+0x7c>)
 80054fa:	699b      	ldr	r3, [r3, #24]
 80054fc:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	611a      	str	r2, [r3, #16]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1);
 8005504:	4b0e      	ldr	r3, [pc, #56]	; (8005540 <HAL_RCC_GetClockConfig+0x7c>)
 8005506:	69db      	ldr	r3, [r3, #28]
 8005508:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	615a      	str	r2, [r3, #20]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2);
 8005510:	4b0b      	ldr	r3, [pc, #44]	; (8005540 <HAL_RCC_GetClockConfig+0x7c>)
 8005512:	69db      	ldr	r3, [r3, #28]
 8005514:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	619a      	str	r2, [r3, #24]

  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->D3CFGR & RCC_D3CFGR_D3PPRE);
 800551c:	4b08      	ldr	r3, [pc, #32]	; (8005540 <HAL_RCC_GetClockConfig+0x7c>)
 800551e:	6a1b      	ldr	r3, [r3, #32]
 8005520:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	61da      	str	r2, [r3, #28]
  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE);
#endif

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8005528:	4b06      	ldr	r3, [pc, #24]	; (8005544 <HAL_RCC_GetClockConfig+0x80>)
 800552a:	681b      	ldr	r3, [r3, #0]
 800552c:	f003 020f 	and.w	r2, r3, #15
 8005530:	683b      	ldr	r3, [r7, #0]
 8005532:	601a      	str	r2, [r3, #0]
}
 8005534:	bf00      	nop
 8005536:	370c      	adds	r7, #12
 8005538:	46bd      	mov	sp, r7
 800553a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800553e:	4770      	bx	lr
 8005540:	58024400 	.word	0x58024400
 8005544:	52002000 	.word	0x52002000

08005548 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005548:	b580      	push	{r7, lr}
 800554a:	b086      	sub	sp, #24
 800554c:	af00      	add	r7, sp, #0
 800554e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8005550:	2300      	movs	r3, #0
 8005552:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8005554:	2300      	movs	r3, #0
 8005556:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	681b      	ldr	r3, [r3, #0]
 800555c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005560:	2b00      	cmp	r3, #0
 8005562:	d03f      	beq.n	80055e4 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005568:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800556c:	d02a      	beq.n	80055c4 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 800556e:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8005572:	d824      	bhi.n	80055be <HAL_RCCEx_PeriphCLKConfig+0x76>
 8005574:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005578:	d018      	beq.n	80055ac <HAL_RCCEx_PeriphCLKConfig+0x64>
 800557a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800557e:	d81e      	bhi.n	80055be <HAL_RCCEx_PeriphCLKConfig+0x76>
 8005580:	2b00      	cmp	r3, #0
 8005582:	d003      	beq.n	800558c <HAL_RCCEx_PeriphCLKConfig+0x44>
 8005584:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005588:	d007      	beq.n	800559a <HAL_RCCEx_PeriphCLKConfig+0x52>
 800558a:	e018      	b.n	80055be <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800558c:	4bab      	ldr	r3, [pc, #684]	; (800583c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800558e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005590:	4aaa      	ldr	r2, [pc, #680]	; (800583c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8005592:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005596:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8005598:	e015      	b.n	80055c6 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	3304      	adds	r3, #4
 800559e:	2102      	movs	r1, #2
 80055a0:	4618      	mov	r0, r3
 80055a2:	f001 feff 	bl	80073a4 <RCCEx_PLL2_Config>
 80055a6:	4603      	mov	r3, r0
 80055a8:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 80055aa:	e00c      	b.n	80055c6 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	3324      	adds	r3, #36	; 0x24
 80055b0:	2102      	movs	r1, #2
 80055b2:	4618      	mov	r0, r3
 80055b4:	f001 ffa8 	bl	8007508 <RCCEx_PLL3_Config>
 80055b8:	4603      	mov	r3, r0
 80055ba:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 80055bc:	e003      	b.n	80055c6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80055be:	2301      	movs	r3, #1
 80055c0:	75fb      	strb	r3, [r7, #23]
      break;
 80055c2:	e000      	b.n	80055c6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 80055c4:	bf00      	nop
    }

    if(ret == HAL_OK)
 80055c6:	7dfb      	ldrb	r3, [r7, #23]
 80055c8:	2b00      	cmp	r3, #0
 80055ca:	d109      	bne.n	80055e0 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 80055cc:	4b9b      	ldr	r3, [pc, #620]	; (800583c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80055ce:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80055d0:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80055d8:	4998      	ldr	r1, [pc, #608]	; (800583c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80055da:	4313      	orrs	r3, r2
 80055dc:	650b      	str	r3, [r1, #80]	; 0x50
 80055de:	e001      	b.n	80055e4 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80055e0:	7dfb      	ldrb	r3, [r7, #23]
 80055e2:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	681b      	ldr	r3, [r3, #0]
 80055e8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80055ec:	2b00      	cmp	r3, #0
 80055ee:	d03d      	beq.n	800566c <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80055f4:	2b04      	cmp	r3, #4
 80055f6:	d826      	bhi.n	8005646 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 80055f8:	a201      	add	r2, pc, #4	; (adr r2, 8005600 <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 80055fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80055fe:	bf00      	nop
 8005600:	08005615 	.word	0x08005615
 8005604:	08005623 	.word	0x08005623
 8005608:	08005635 	.word	0x08005635
 800560c:	0800564d 	.word	0x0800564d
 8005610:	0800564d 	.word	0x0800564d
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005614:	4b89      	ldr	r3, [pc, #548]	; (800583c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8005616:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005618:	4a88      	ldr	r2, [pc, #544]	; (800583c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800561a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800561e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8005620:	e015      	b.n	800564e <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	3304      	adds	r3, #4
 8005626:	2100      	movs	r1, #0
 8005628:	4618      	mov	r0, r3
 800562a:	f001 febb 	bl	80073a4 <RCCEx_PLL2_Config>
 800562e:	4603      	mov	r3, r0
 8005630:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8005632:	e00c      	b.n	800564e <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	3324      	adds	r3, #36	; 0x24
 8005638:	2100      	movs	r1, #0
 800563a:	4618      	mov	r0, r3
 800563c:	f001 ff64 	bl	8007508 <RCCEx_PLL3_Config>
 8005640:	4603      	mov	r3, r0
 8005642:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8005644:	e003      	b.n	800564e <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005646:	2301      	movs	r3, #1
 8005648:	75fb      	strb	r3, [r7, #23]
      break;
 800564a:	e000      	b.n	800564e <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 800564c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800564e:	7dfb      	ldrb	r3, [r7, #23]
 8005650:	2b00      	cmp	r3, #0
 8005652:	d109      	bne.n	8005668 <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005654:	4b79      	ldr	r3, [pc, #484]	; (800583c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8005656:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005658:	f023 0207 	bic.w	r2, r3, #7
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005660:	4976      	ldr	r1, [pc, #472]	; (800583c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8005662:	4313      	orrs	r3, r2
 8005664:	650b      	str	r3, [r1, #80]	; 0x50
 8005666:	e001      	b.n	800566c <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005668:	7dfb      	ldrb	r3, [r7, #23]
 800566a:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	681b      	ldr	r3, [r3, #0]
 8005670:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005674:	2b00      	cmp	r3, #0
 8005676:	d051      	beq.n	800571c <HAL_RCCEx_PeriphCLKConfig+0x1d4>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800567e:	f5b3 0f20 	cmp.w	r3, #10485760	; 0xa00000
 8005682:	d036      	beq.n	80056f2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8005684:	f5b3 0f20 	cmp.w	r3, #10485760	; 0xa00000
 8005688:	d830      	bhi.n	80056ec <HAL_RCCEx_PeriphCLKConfig+0x1a4>
 800568a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800568e:	d032      	beq.n	80056f6 <HAL_RCCEx_PeriphCLKConfig+0x1ae>
 8005690:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8005694:	d82a      	bhi.n	80056ec <HAL_RCCEx_PeriphCLKConfig+0x1a4>
 8005696:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800569a:	d02e      	beq.n	80056fa <HAL_RCCEx_PeriphCLKConfig+0x1b2>
 800569c:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80056a0:	d824      	bhi.n	80056ec <HAL_RCCEx_PeriphCLKConfig+0x1a4>
 80056a2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80056a6:	d018      	beq.n	80056da <HAL_RCCEx_PeriphCLKConfig+0x192>
 80056a8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80056ac:	d81e      	bhi.n	80056ec <HAL_RCCEx_PeriphCLKConfig+0x1a4>
 80056ae:	2b00      	cmp	r3, #0
 80056b0:	d003      	beq.n	80056ba <HAL_RCCEx_PeriphCLKConfig+0x172>
 80056b2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80056b6:	d007      	beq.n	80056c8 <HAL_RCCEx_PeriphCLKConfig+0x180>
 80056b8:	e018      	b.n	80056ec <HAL_RCCEx_PeriphCLKConfig+0x1a4>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80056ba:	4b60      	ldr	r3, [pc, #384]	; (800583c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80056bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80056be:	4a5f      	ldr	r2, [pc, #380]	; (800583c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80056c0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80056c4:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80056c6:	e019      	b.n	80056fc <HAL_RCCEx_PeriphCLKConfig+0x1b4>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	3304      	adds	r3, #4
 80056cc:	2100      	movs	r1, #0
 80056ce:	4618      	mov	r0, r3
 80056d0:	f001 fe68 	bl	80073a4 <RCCEx_PLL2_Config>
 80056d4:	4603      	mov	r3, r0
 80056d6:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 80056d8:	e010      	b.n	80056fc <HAL_RCCEx_PeriphCLKConfig+0x1b4>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	3324      	adds	r3, #36	; 0x24
 80056de:	2100      	movs	r1, #0
 80056e0:	4618      	mov	r0, r3
 80056e2:	f001 ff11 	bl	8007508 <RCCEx_PLL3_Config>
 80056e6:	4603      	mov	r3, r0
 80056e8:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80056ea:	e007      	b.n	80056fc <HAL_RCCEx_PeriphCLKConfig+0x1b4>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 80056ec:	2301      	movs	r3, #1
 80056ee:	75fb      	strb	r3, [r7, #23]
      break;
 80056f0:	e004      	b.n	80056fc <HAL_RCCEx_PeriphCLKConfig+0x1b4>
      break;
 80056f2:	bf00      	nop
 80056f4:	e002      	b.n	80056fc <HAL_RCCEx_PeriphCLKConfig+0x1b4>
      break;
 80056f6:	bf00      	nop
 80056f8:	e000      	b.n	80056fc <HAL_RCCEx_PeriphCLKConfig+0x1b4>
      break;
 80056fa:	bf00      	nop
    }

    if(ret == HAL_OK)
 80056fc:	7dfb      	ldrb	r3, [r7, #23]
 80056fe:	2b00      	cmp	r3, #0
 8005700:	d10a      	bne.n	8005718 <HAL_RCCEx_PeriphCLKConfig+0x1d0>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8005702:	4b4e      	ldr	r3, [pc, #312]	; (800583c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8005704:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005706:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8005710:	494a      	ldr	r1, [pc, #296]	; (800583c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8005712:	4313      	orrs	r3, r2
 8005714:	658b      	str	r3, [r1, #88]	; 0x58
 8005716:	e001      	b.n	800571c <HAL_RCCEx_PeriphCLKConfig+0x1d4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005718:	7dfb      	ldrb	r3, [r7, #23]
 800571a:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	681b      	ldr	r3, [r3, #0]
 8005720:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005724:	2b00      	cmp	r3, #0
 8005726:	d051      	beq.n	80057cc <HAL_RCCEx_PeriphCLKConfig+0x284>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800572e:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 8005732:	d036      	beq.n	80057a2 <HAL_RCCEx_PeriphCLKConfig+0x25a>
 8005734:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 8005738:	d830      	bhi.n	800579c <HAL_RCCEx_PeriphCLKConfig+0x254>
 800573a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800573e:	d032      	beq.n	80057a6 <HAL_RCCEx_PeriphCLKConfig+0x25e>
 8005740:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005744:	d82a      	bhi.n	800579c <HAL_RCCEx_PeriphCLKConfig+0x254>
 8005746:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800574a:	d02e      	beq.n	80057aa <HAL_RCCEx_PeriphCLKConfig+0x262>
 800574c:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8005750:	d824      	bhi.n	800579c <HAL_RCCEx_PeriphCLKConfig+0x254>
 8005752:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005756:	d018      	beq.n	800578a <HAL_RCCEx_PeriphCLKConfig+0x242>
 8005758:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800575c:	d81e      	bhi.n	800579c <HAL_RCCEx_PeriphCLKConfig+0x254>
 800575e:	2b00      	cmp	r3, #0
 8005760:	d003      	beq.n	800576a <HAL_RCCEx_PeriphCLKConfig+0x222>
 8005762:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005766:	d007      	beq.n	8005778 <HAL_RCCEx_PeriphCLKConfig+0x230>
 8005768:	e018      	b.n	800579c <HAL_RCCEx_PeriphCLKConfig+0x254>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800576a:	4b34      	ldr	r3, [pc, #208]	; (800583c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800576c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800576e:	4a33      	ldr	r2, [pc, #204]	; (800583c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8005770:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005774:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8005776:	e019      	b.n	80057ac <HAL_RCCEx_PeriphCLKConfig+0x264>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	3304      	adds	r3, #4
 800577c:	2100      	movs	r1, #0
 800577e:	4618      	mov	r0, r3
 8005780:	f001 fe10 	bl	80073a4 <RCCEx_PLL2_Config>
 8005784:	4603      	mov	r3, r0
 8005786:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8005788:	e010      	b.n	80057ac <HAL_RCCEx_PeriphCLKConfig+0x264>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	3324      	adds	r3, #36	; 0x24
 800578e:	2100      	movs	r1, #0
 8005790:	4618      	mov	r0, r3
 8005792:	f001 feb9 	bl	8007508 <RCCEx_PLL3_Config>
 8005796:	4603      	mov	r3, r0
 8005798:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800579a:	e007      	b.n	80057ac <HAL_RCCEx_PeriphCLKConfig+0x264>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 800579c:	2301      	movs	r3, #1
 800579e:	75fb      	strb	r3, [r7, #23]
      break;
 80057a0:	e004      	b.n	80057ac <HAL_RCCEx_PeriphCLKConfig+0x264>
      break;
 80057a2:	bf00      	nop
 80057a4:	e002      	b.n	80057ac <HAL_RCCEx_PeriphCLKConfig+0x264>
      break;
 80057a6:	bf00      	nop
 80057a8:	e000      	b.n	80057ac <HAL_RCCEx_PeriphCLKConfig+0x264>
      break;
 80057aa:	bf00      	nop
    }

    if(ret == HAL_OK)
 80057ac:	7dfb      	ldrb	r3, [r7, #23]
 80057ae:	2b00      	cmp	r3, #0
 80057b0:	d10a      	bne.n	80057c8 <HAL_RCCEx_PeriphCLKConfig+0x280>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 80057b2:	4b22      	ldr	r3, [pc, #136]	; (800583c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80057b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80057b6:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80057c0:	491e      	ldr	r1, [pc, #120]	; (800583c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80057c2:	4313      	orrs	r3, r2
 80057c4:	658b      	str	r3, [r1, #88]	; 0x58
 80057c6:	e001      	b.n	80057cc <HAL_RCCEx_PeriphCLKConfig+0x284>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80057c8:	7dfb      	ldrb	r3, [r7, #23]
 80057ca:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	681b      	ldr	r3, [r3, #0]
 80057d0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80057d4:	2b00      	cmp	r3, #0
 80057d6:	d035      	beq.n	8005844 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    switch(PeriphClkInit->OspiClockSelection)
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80057dc:	2b30      	cmp	r3, #48	; 0x30
 80057de:	d01c      	beq.n	800581a <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 80057e0:	2b30      	cmp	r3, #48	; 0x30
 80057e2:	d817      	bhi.n	8005814 <HAL_RCCEx_PeriphCLKConfig+0x2cc>
 80057e4:	2b20      	cmp	r3, #32
 80057e6:	d00c      	beq.n	8005802 <HAL_RCCEx_PeriphCLKConfig+0x2ba>
 80057e8:	2b20      	cmp	r3, #32
 80057ea:	d813      	bhi.n	8005814 <HAL_RCCEx_PeriphCLKConfig+0x2cc>
 80057ec:	2b00      	cmp	r3, #0
 80057ee:	d016      	beq.n	800581e <HAL_RCCEx_PeriphCLKConfig+0x2d6>
 80057f0:	2b10      	cmp	r3, #16
 80057f2:	d10f      	bne.n	8005814 <HAL_RCCEx_PeriphCLKConfig+0x2cc>
    {
    case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
      /* Enable OSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80057f4:	4b11      	ldr	r3, [pc, #68]	; (800583c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80057f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80057f8:	4a10      	ldr	r2, [pc, #64]	; (800583c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80057fa:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80057fe:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* OSPI clock source configuration done later after clock selection check */
      break;
 8005800:	e00e      	b.n	8005820 <HAL_RCCEx_PeriphCLKConfig+0x2d8>

    case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	3304      	adds	r3, #4
 8005806:	2102      	movs	r1, #2
 8005808:	4618      	mov	r0, r3
 800580a:	f001 fdcb 	bl	80073a4 <RCCEx_PLL2_Config>
 800580e:	4603      	mov	r3, r0
 8005810:	75fb      	strb	r3, [r7, #23]

      /* OSPI clock source configuration done later after clock selection check */
      break;
 8005812:	e005      	b.n	8005820 <HAL_RCCEx_PeriphCLKConfig+0x2d8>
    case RCC_OSPICLKSOURCE_HCLK:
      /* HCLK clock selected as OSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8005814:	2301      	movs	r3, #1
 8005816:	75fb      	strb	r3, [r7, #23]
      break;
 8005818:	e002      	b.n	8005820 <HAL_RCCEx_PeriphCLKConfig+0x2d8>
      break;
 800581a:	bf00      	nop
 800581c:	e000      	b.n	8005820 <HAL_RCCEx_PeriphCLKConfig+0x2d8>
      break;
 800581e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005820:	7dfb      	ldrb	r3, [r7, #23]
 8005822:	2b00      	cmp	r3, #0
 8005824:	d10c      	bne.n	8005840 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8005826:	4b05      	ldr	r3, [pc, #20]	; (800583c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8005828:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800582a:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005832:	4902      	ldr	r1, [pc, #8]	; (800583c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8005834:	4313      	orrs	r3, r2
 8005836:	64cb      	str	r3, [r1, #76]	; 0x4c
 8005838:	e004      	b.n	8005844 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
 800583a:	bf00      	nop
 800583c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005840:	7dfb      	ldrb	r3, [r7, #23]
 8005842:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	681b      	ldr	r3, [r3, #0]
 8005848:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800584c:	2b00      	cmp	r3, #0
 800584e:	d047      	beq.n	80058e0 <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005854:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005858:	d030      	beq.n	80058bc <HAL_RCCEx_PeriphCLKConfig+0x374>
 800585a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800585e:	d82a      	bhi.n	80058b6 <HAL_RCCEx_PeriphCLKConfig+0x36e>
 8005860:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8005864:	d02c      	beq.n	80058c0 <HAL_RCCEx_PeriphCLKConfig+0x378>
 8005866:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800586a:	d824      	bhi.n	80058b6 <HAL_RCCEx_PeriphCLKConfig+0x36e>
 800586c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005870:	d018      	beq.n	80058a4 <HAL_RCCEx_PeriphCLKConfig+0x35c>
 8005872:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005876:	d81e      	bhi.n	80058b6 <HAL_RCCEx_PeriphCLKConfig+0x36e>
 8005878:	2b00      	cmp	r3, #0
 800587a:	d003      	beq.n	8005884 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 800587c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005880:	d007      	beq.n	8005892 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8005882:	e018      	b.n	80058b6 <HAL_RCCEx_PeriphCLKConfig+0x36e>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005884:	4bac      	ldr	r3, [pc, #688]	; (8005b38 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 8005886:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005888:	4aab      	ldr	r2, [pc, #684]	; (8005b38 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 800588a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800588e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8005890:	e017      	b.n	80058c2 <HAL_RCCEx_PeriphCLKConfig+0x37a>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	3304      	adds	r3, #4
 8005896:	2100      	movs	r1, #0
 8005898:	4618      	mov	r0, r3
 800589a:	f001 fd83 	bl	80073a4 <RCCEx_PLL2_Config>
 800589e:	4603      	mov	r3, r0
 80058a0:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 80058a2:	e00e      	b.n	80058c2 <HAL_RCCEx_PeriphCLKConfig+0x37a>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	3324      	adds	r3, #36	; 0x24
 80058a8:	2100      	movs	r1, #0
 80058aa:	4618      	mov	r0, r3
 80058ac:	f001 fe2c 	bl	8007508 <RCCEx_PLL3_Config>
 80058b0:	4603      	mov	r3, r0
 80058b2:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 80058b4:	e005      	b.n	80058c2 <HAL_RCCEx_PeriphCLKConfig+0x37a>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80058b6:	2301      	movs	r3, #1
 80058b8:	75fb      	strb	r3, [r7, #23]
      break;
 80058ba:	e002      	b.n	80058c2 <HAL_RCCEx_PeriphCLKConfig+0x37a>
      break;
 80058bc:	bf00      	nop
 80058be:	e000      	b.n	80058c2 <HAL_RCCEx_PeriphCLKConfig+0x37a>
      break;
 80058c0:	bf00      	nop
    }

    if(ret == HAL_OK)
 80058c2:	7dfb      	ldrb	r3, [r7, #23]
 80058c4:	2b00      	cmp	r3, #0
 80058c6:	d109      	bne.n	80058dc <HAL_RCCEx_PeriphCLKConfig+0x394>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 80058c8:	4b9b      	ldr	r3, [pc, #620]	; (8005b38 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 80058ca:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80058cc:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80058d4:	4998      	ldr	r1, [pc, #608]	; (8005b38 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 80058d6:	4313      	orrs	r3, r2
 80058d8:	650b      	str	r3, [r1, #80]	; 0x50
 80058da:	e001      	b.n	80058e0 <HAL_RCCEx_PeriphCLKConfig+0x398>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80058dc:	7dfb      	ldrb	r3, [r7, #23]
 80058de:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	681b      	ldr	r3, [r3, #0]
 80058e4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80058e8:	2b00      	cmp	r3, #0
 80058ea:	d049      	beq.n	8005980 <HAL_RCCEx_PeriphCLKConfig+0x438>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80058f0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80058f4:	d02e      	beq.n	8005954 <HAL_RCCEx_PeriphCLKConfig+0x40c>
 80058f6:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80058fa:	d828      	bhi.n	800594e <HAL_RCCEx_PeriphCLKConfig+0x406>
 80058fc:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8005900:	d02a      	beq.n	8005958 <HAL_RCCEx_PeriphCLKConfig+0x410>
 8005902:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8005906:	d822      	bhi.n	800594e <HAL_RCCEx_PeriphCLKConfig+0x406>
 8005908:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800590c:	d026      	beq.n	800595c <HAL_RCCEx_PeriphCLKConfig+0x414>
 800590e:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8005912:	d81c      	bhi.n	800594e <HAL_RCCEx_PeriphCLKConfig+0x406>
 8005914:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005918:	d010      	beq.n	800593c <HAL_RCCEx_PeriphCLKConfig+0x3f4>
 800591a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800591e:	d816      	bhi.n	800594e <HAL_RCCEx_PeriphCLKConfig+0x406>
 8005920:	2b00      	cmp	r3, #0
 8005922:	d01d      	beq.n	8005960 <HAL_RCCEx_PeriphCLKConfig+0x418>
 8005924:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005928:	d111      	bne.n	800594e <HAL_RCCEx_PeriphCLKConfig+0x406>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	3304      	adds	r3, #4
 800592e:	2101      	movs	r1, #1
 8005930:	4618      	mov	r0, r3
 8005932:	f001 fd37 	bl	80073a4 <RCCEx_PLL2_Config>
 8005936:	4603      	mov	r3, r0
 8005938:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 800593a:	e012      	b.n	8005962 <HAL_RCCEx_PeriphCLKConfig+0x41a>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	3324      	adds	r3, #36	; 0x24
 8005940:	2101      	movs	r1, #1
 8005942:	4618      	mov	r0, r3
 8005944:	f001 fde0 	bl	8007508 <RCCEx_PLL3_Config>
 8005948:	4603      	mov	r3, r0
 800594a:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 800594c:	e009      	b.n	8005962 <HAL_RCCEx_PeriphCLKConfig+0x41a>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800594e:	2301      	movs	r3, #1
 8005950:	75fb      	strb	r3, [r7, #23]
      break;
 8005952:	e006      	b.n	8005962 <HAL_RCCEx_PeriphCLKConfig+0x41a>
      break;
 8005954:	bf00      	nop
 8005956:	e004      	b.n	8005962 <HAL_RCCEx_PeriphCLKConfig+0x41a>
      break;
 8005958:	bf00      	nop
 800595a:	e002      	b.n	8005962 <HAL_RCCEx_PeriphCLKConfig+0x41a>
      break;
 800595c:	bf00      	nop
 800595e:	e000      	b.n	8005962 <HAL_RCCEx_PeriphCLKConfig+0x41a>
      break;
 8005960:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005962:	7dfb      	ldrb	r3, [r7, #23]
 8005964:	2b00      	cmp	r3, #0
 8005966:	d109      	bne.n	800597c <HAL_RCCEx_PeriphCLKConfig+0x434>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8005968:	4b73      	ldr	r3, [pc, #460]	; (8005b38 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 800596a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800596c:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005974:	4970      	ldr	r1, [pc, #448]	; (8005b38 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 8005976:	4313      	orrs	r3, r2
 8005978:	650b      	str	r3, [r1, #80]	; 0x50
 800597a:	e001      	b.n	8005980 <HAL_RCCEx_PeriphCLKConfig+0x438>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800597c:	7dfb      	ldrb	r3, [r7, #23]
 800597e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	681b      	ldr	r3, [r3, #0]
 8005984:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005988:	2b00      	cmp	r3, #0
 800598a:	d04b      	beq.n	8005a24 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8005992:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005996:	d02e      	beq.n	80059f6 <HAL_RCCEx_PeriphCLKConfig+0x4ae>
 8005998:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800599c:	d828      	bhi.n	80059f0 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 800599e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80059a2:	d02a      	beq.n	80059fa <HAL_RCCEx_PeriphCLKConfig+0x4b2>
 80059a4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80059a8:	d822      	bhi.n	80059f0 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 80059aa:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80059ae:	d026      	beq.n	80059fe <HAL_RCCEx_PeriphCLKConfig+0x4b6>
 80059b0:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80059b4:	d81c      	bhi.n	80059f0 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 80059b6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80059ba:	d010      	beq.n	80059de <HAL_RCCEx_PeriphCLKConfig+0x496>
 80059bc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80059c0:	d816      	bhi.n	80059f0 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 80059c2:	2b00      	cmp	r3, #0
 80059c4:	d01d      	beq.n	8005a02 <HAL_RCCEx_PeriphCLKConfig+0x4ba>
 80059c6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80059ca:	d111      	bne.n	80059f0 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	3304      	adds	r3, #4
 80059d0:	2101      	movs	r1, #1
 80059d2:	4618      	mov	r0, r3
 80059d4:	f001 fce6 	bl	80073a4 <RCCEx_PLL2_Config>
 80059d8:	4603      	mov	r3, r0
 80059da:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 80059dc:	e012      	b.n	8005a04 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	3324      	adds	r3, #36	; 0x24
 80059e2:	2101      	movs	r1, #1
 80059e4:	4618      	mov	r0, r3
 80059e6:	f001 fd8f 	bl	8007508 <RCCEx_PLL3_Config>
 80059ea:	4603      	mov	r3, r0
 80059ec:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 80059ee:	e009      	b.n	8005a04 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 80059f0:	2301      	movs	r3, #1
 80059f2:	75fb      	strb	r3, [r7, #23]
      break;
 80059f4:	e006      	b.n	8005a04 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      break;
 80059f6:	bf00      	nop
 80059f8:	e004      	b.n	8005a04 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      break;
 80059fa:	bf00      	nop
 80059fc:	e002      	b.n	8005a04 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      break;
 80059fe:	bf00      	nop
 8005a00:	e000      	b.n	8005a04 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      break;
 8005a02:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005a04:	7dfb      	ldrb	r3, [r7, #23]
 8005a06:	2b00      	cmp	r3, #0
 8005a08:	d10a      	bne.n	8005a20 <HAL_RCCEx_PeriphCLKConfig+0x4d8>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8005a0a:	4b4b      	ldr	r3, [pc, #300]	; (8005b38 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 8005a0c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005a0e:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8005a18:	4947      	ldr	r1, [pc, #284]	; (8005b38 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 8005a1a:	4313      	orrs	r3, r2
 8005a1c:	658b      	str	r3, [r1, #88]	; 0x58
 8005a1e:	e001      	b.n	8005a24 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005a20:	7dfb      	ldrb	r3, [r7, #23]
 8005a22:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	681b      	ldr	r3, [r3, #0]
 8005a28:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005a2c:	2b00      	cmp	r3, #0
 8005a2e:	d02f      	beq.n	8005a90 <HAL_RCCEx_PeriphCLKConfig+0x548>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005a34:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005a38:	d00e      	beq.n	8005a58 <HAL_RCCEx_PeriphCLKConfig+0x510>
 8005a3a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005a3e:	d814      	bhi.n	8005a6a <HAL_RCCEx_PeriphCLKConfig+0x522>
 8005a40:	2b00      	cmp	r3, #0
 8005a42:	d015      	beq.n	8005a70 <HAL_RCCEx_PeriphCLKConfig+0x528>
 8005a44:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005a48:	d10f      	bne.n	8005a6a <HAL_RCCEx_PeriphCLKConfig+0x522>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005a4a:	4b3b      	ldr	r3, [pc, #236]	; (8005b38 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 8005a4c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a4e:	4a3a      	ldr	r2, [pc, #232]	; (8005b38 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 8005a50:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005a54:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8005a56:	e00c      	b.n	8005a72 <HAL_RCCEx_PeriphCLKConfig+0x52a>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	3304      	adds	r3, #4
 8005a5c:	2101      	movs	r1, #1
 8005a5e:	4618      	mov	r0, r3
 8005a60:	f001 fca0 	bl	80073a4 <RCCEx_PLL2_Config>
 8005a64:	4603      	mov	r3, r0
 8005a66:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8005a68:	e003      	b.n	8005a72 <HAL_RCCEx_PeriphCLKConfig+0x52a>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005a6a:	2301      	movs	r3, #1
 8005a6c:	75fb      	strb	r3, [r7, #23]
      break;
 8005a6e:	e000      	b.n	8005a72 <HAL_RCCEx_PeriphCLKConfig+0x52a>
      break;
 8005a70:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005a72:	7dfb      	ldrb	r3, [r7, #23]
 8005a74:	2b00      	cmp	r3, #0
 8005a76:	d109      	bne.n	8005a8c <HAL_RCCEx_PeriphCLKConfig+0x544>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8005a78:	4b2f      	ldr	r3, [pc, #188]	; (8005b38 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 8005a7a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005a7c:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005a84:	492c      	ldr	r1, [pc, #176]	; (8005b38 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 8005a86:	4313      	orrs	r3, r2
 8005a88:	650b      	str	r3, [r1, #80]	; 0x50
 8005a8a:	e001      	b.n	8005a90 <HAL_RCCEx_PeriphCLKConfig+0x548>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005a8c:	7dfb      	ldrb	r3, [r7, #23]
 8005a8e:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	681b      	ldr	r3, [r3, #0]
 8005a94:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005a98:	2b00      	cmp	r3, #0
 8005a9a:	d032      	beq.n	8005b02 <HAL_RCCEx_PeriphCLKConfig+0x5ba>
  {
    switch(PeriphClkInit->FmcClockSelection)
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005aa0:	2b03      	cmp	r3, #3
 8005aa2:	d81b      	bhi.n	8005adc <HAL_RCCEx_PeriphCLKConfig+0x594>
 8005aa4:	a201      	add	r2, pc, #4	; (adr r2, 8005aac <HAL_RCCEx_PeriphCLKConfig+0x564>)
 8005aa6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005aaa:	bf00      	nop
 8005aac:	08005ae3 	.word	0x08005ae3
 8005ab0:	08005abd 	.word	0x08005abd
 8005ab4:	08005acb 	.word	0x08005acb
 8005ab8:	08005ae3 	.word	0x08005ae3
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005abc:	4b1e      	ldr	r3, [pc, #120]	; (8005b38 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 8005abe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ac0:	4a1d      	ldr	r2, [pc, #116]	; (8005b38 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 8005ac2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005ac6:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 8005ac8:	e00c      	b.n	8005ae4 <HAL_RCCEx_PeriphCLKConfig+0x59c>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	3304      	adds	r3, #4
 8005ace:	2102      	movs	r1, #2
 8005ad0:	4618      	mov	r0, r3
 8005ad2:	f001 fc67 	bl	80073a4 <RCCEx_PLL2_Config>
 8005ad6:	4603      	mov	r3, r0
 8005ad8:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 8005ada:	e003      	b.n	8005ae4 <HAL_RCCEx_PeriphCLKConfig+0x59c>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8005adc:	2301      	movs	r3, #1
 8005ade:	75fb      	strb	r3, [r7, #23]
      break;
 8005ae0:	e000      	b.n	8005ae4 <HAL_RCCEx_PeriphCLKConfig+0x59c>
      break;
 8005ae2:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005ae4:	7dfb      	ldrb	r3, [r7, #23]
 8005ae6:	2b00      	cmp	r3, #0
 8005ae8:	d109      	bne.n	8005afe <HAL_RCCEx_PeriphCLKConfig+0x5b6>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8005aea:	4b13      	ldr	r3, [pc, #76]	; (8005b38 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 8005aec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005aee:	f023 0203 	bic.w	r2, r3, #3
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005af6:	4910      	ldr	r1, [pc, #64]	; (8005b38 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 8005af8:	4313      	orrs	r3, r2
 8005afa:	64cb      	str	r3, [r1, #76]	; 0x4c
 8005afc:	e001      	b.n	8005b02 <HAL_RCCEx_PeriphCLKConfig+0x5ba>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005afe:	7dfb      	ldrb	r3, [r7, #23]
 8005b00:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	681b      	ldr	r3, [r3, #0]
 8005b06:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005b0a:	2b00      	cmp	r3, #0
 8005b0c:	f000 808a 	beq.w	8005c24 <HAL_RCCEx_PeriphCLKConfig+0x6dc>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005b10:	4b0a      	ldr	r3, [pc, #40]	; (8005b3c <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 8005b12:	681b      	ldr	r3, [r3, #0]
 8005b14:	4a09      	ldr	r2, [pc, #36]	; (8005b3c <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 8005b16:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005b1a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005b1c:	f7fb fe08 	bl	8001730 <HAL_GetTick>
 8005b20:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005b22:	e00d      	b.n	8005b40 <HAL_RCCEx_PeriphCLKConfig+0x5f8>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005b24:	f7fb fe04 	bl	8001730 <HAL_GetTick>
 8005b28:	4602      	mov	r2, r0
 8005b2a:	693b      	ldr	r3, [r7, #16]
 8005b2c:	1ad3      	subs	r3, r2, r3
 8005b2e:	2b64      	cmp	r3, #100	; 0x64
 8005b30:	d906      	bls.n	8005b40 <HAL_RCCEx_PeriphCLKConfig+0x5f8>
      {
        ret = HAL_TIMEOUT;
 8005b32:	2303      	movs	r3, #3
 8005b34:	75fb      	strb	r3, [r7, #23]
        break;
 8005b36:	e009      	b.n	8005b4c <HAL_RCCEx_PeriphCLKConfig+0x604>
 8005b38:	58024400 	.word	0x58024400
 8005b3c:	58024800 	.word	0x58024800
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005b40:	4bb9      	ldr	r3, [pc, #740]	; (8005e28 <HAL_RCCEx_PeriphCLKConfig+0x8e0>)
 8005b42:	681b      	ldr	r3, [r3, #0]
 8005b44:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005b48:	2b00      	cmp	r3, #0
 8005b4a:	d0eb      	beq.n	8005b24 <HAL_RCCEx_PeriphCLKConfig+0x5dc>
      }
    }

    if(ret == HAL_OK)
 8005b4c:	7dfb      	ldrb	r3, [r7, #23]
 8005b4e:	2b00      	cmp	r3, #0
 8005b50:	d166      	bne.n	8005c20 <HAL_RCCEx_PeriphCLKConfig+0x6d8>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8005b52:	4bb6      	ldr	r3, [pc, #728]	; (8005e2c <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8005b54:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8005b5c:	4053      	eors	r3, r2
 8005b5e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005b62:	2b00      	cmp	r3, #0
 8005b64:	d013      	beq.n	8005b8e <HAL_RCCEx_PeriphCLKConfig+0x646>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005b66:	4bb1      	ldr	r3, [pc, #708]	; (8005e2c <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8005b68:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005b6a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005b6e:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8005b70:	4bae      	ldr	r3, [pc, #696]	; (8005e2c <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8005b72:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005b74:	4aad      	ldr	r2, [pc, #692]	; (8005e2c <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8005b76:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005b7a:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8005b7c:	4bab      	ldr	r3, [pc, #684]	; (8005e2c <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8005b7e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005b80:	4aaa      	ldr	r2, [pc, #680]	; (8005e2c <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8005b82:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005b86:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8005b88:	4aa8      	ldr	r2, [pc, #672]	; (8005e2c <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8005b8a:	68fb      	ldr	r3, [r7, #12]
 8005b8c:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8005b94:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005b98:	d115      	bne.n	8005bc6 <HAL_RCCEx_PeriphCLKConfig+0x67e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005b9a:	f7fb fdc9 	bl	8001730 <HAL_GetTick>
 8005b9e:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005ba0:	e00b      	b.n	8005bba <HAL_RCCEx_PeriphCLKConfig+0x672>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005ba2:	f7fb fdc5 	bl	8001730 <HAL_GetTick>
 8005ba6:	4602      	mov	r2, r0
 8005ba8:	693b      	ldr	r3, [r7, #16]
 8005baa:	1ad3      	subs	r3, r2, r3
 8005bac:	f241 3288 	movw	r2, #5000	; 0x1388
 8005bb0:	4293      	cmp	r3, r2
 8005bb2:	d902      	bls.n	8005bba <HAL_RCCEx_PeriphCLKConfig+0x672>
          {
            ret = HAL_TIMEOUT;
 8005bb4:	2303      	movs	r3, #3
 8005bb6:	75fb      	strb	r3, [r7, #23]
            break;
 8005bb8:	e005      	b.n	8005bc6 <HAL_RCCEx_PeriphCLKConfig+0x67e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005bba:	4b9c      	ldr	r3, [pc, #624]	; (8005e2c <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8005bbc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005bbe:	f003 0302 	and.w	r3, r3, #2
 8005bc2:	2b00      	cmp	r3, #0
 8005bc4:	d0ed      	beq.n	8005ba2 <HAL_RCCEx_PeriphCLKConfig+0x65a>
          }
        }
      }

      if(ret == HAL_OK)
 8005bc6:	7dfb      	ldrb	r3, [r7, #23]
 8005bc8:	2b00      	cmp	r3, #0
 8005bca:	d126      	bne.n	8005c1a <HAL_RCCEx_PeriphCLKConfig+0x6d2>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8005bd2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005bd6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005bda:	d10d      	bne.n	8005bf8 <HAL_RCCEx_PeriphCLKConfig+0x6b0>
 8005bdc:	4b93      	ldr	r3, [pc, #588]	; (8005e2c <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8005bde:	691b      	ldr	r3, [r3, #16]
 8005be0:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8005bea:	0919      	lsrs	r1, r3, #4
 8005bec:	4b90      	ldr	r3, [pc, #576]	; (8005e30 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 8005bee:	400b      	ands	r3, r1
 8005bf0:	498e      	ldr	r1, [pc, #568]	; (8005e2c <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8005bf2:	4313      	orrs	r3, r2
 8005bf4:	610b      	str	r3, [r1, #16]
 8005bf6:	e005      	b.n	8005c04 <HAL_RCCEx_PeriphCLKConfig+0x6bc>
 8005bf8:	4b8c      	ldr	r3, [pc, #560]	; (8005e2c <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8005bfa:	691b      	ldr	r3, [r3, #16]
 8005bfc:	4a8b      	ldr	r2, [pc, #556]	; (8005e2c <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8005bfe:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8005c02:	6113      	str	r3, [r2, #16]
 8005c04:	4b89      	ldr	r3, [pc, #548]	; (8005e2c <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8005c06:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8005c0e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005c12:	4986      	ldr	r1, [pc, #536]	; (8005e2c <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8005c14:	4313      	orrs	r3, r2
 8005c16:	670b      	str	r3, [r1, #112]	; 0x70
 8005c18:	e004      	b.n	8005c24 <HAL_RCCEx_PeriphCLKConfig+0x6dc>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8005c1a:	7dfb      	ldrb	r3, [r7, #23]
 8005c1c:	75bb      	strb	r3, [r7, #22]
 8005c1e:	e001      	b.n	8005c24 <HAL_RCCEx_PeriphCLKConfig+0x6dc>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005c20:	7dfb      	ldrb	r3, [r7, #23]
 8005c22:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	681b      	ldr	r3, [r3, #0]
 8005c28:	f003 0301 	and.w	r3, r3, #1
 8005c2c:	2b00      	cmp	r3, #0
 8005c2e:	d07e      	beq.n	8005d2e <HAL_RCCEx_PeriphCLKConfig+0x7e6>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005c34:	2b28      	cmp	r3, #40	; 0x28
 8005c36:	d867      	bhi.n	8005d08 <HAL_RCCEx_PeriphCLKConfig+0x7c0>
 8005c38:	a201      	add	r2, pc, #4	; (adr r2, 8005c40 <HAL_RCCEx_PeriphCLKConfig+0x6f8>)
 8005c3a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005c3e:	bf00      	nop
 8005c40:	08005d0f 	.word	0x08005d0f
 8005c44:	08005d09 	.word	0x08005d09
 8005c48:	08005d09 	.word	0x08005d09
 8005c4c:	08005d09 	.word	0x08005d09
 8005c50:	08005d09 	.word	0x08005d09
 8005c54:	08005d09 	.word	0x08005d09
 8005c58:	08005d09 	.word	0x08005d09
 8005c5c:	08005d09 	.word	0x08005d09
 8005c60:	08005ce5 	.word	0x08005ce5
 8005c64:	08005d09 	.word	0x08005d09
 8005c68:	08005d09 	.word	0x08005d09
 8005c6c:	08005d09 	.word	0x08005d09
 8005c70:	08005d09 	.word	0x08005d09
 8005c74:	08005d09 	.word	0x08005d09
 8005c78:	08005d09 	.word	0x08005d09
 8005c7c:	08005d09 	.word	0x08005d09
 8005c80:	08005cf7 	.word	0x08005cf7
 8005c84:	08005d09 	.word	0x08005d09
 8005c88:	08005d09 	.word	0x08005d09
 8005c8c:	08005d09 	.word	0x08005d09
 8005c90:	08005d09 	.word	0x08005d09
 8005c94:	08005d09 	.word	0x08005d09
 8005c98:	08005d09 	.word	0x08005d09
 8005c9c:	08005d09 	.word	0x08005d09
 8005ca0:	08005d0f 	.word	0x08005d0f
 8005ca4:	08005d09 	.word	0x08005d09
 8005ca8:	08005d09 	.word	0x08005d09
 8005cac:	08005d09 	.word	0x08005d09
 8005cb0:	08005d09 	.word	0x08005d09
 8005cb4:	08005d09 	.word	0x08005d09
 8005cb8:	08005d09 	.word	0x08005d09
 8005cbc:	08005d09 	.word	0x08005d09
 8005cc0:	08005d0f 	.word	0x08005d0f
 8005cc4:	08005d09 	.word	0x08005d09
 8005cc8:	08005d09 	.word	0x08005d09
 8005ccc:	08005d09 	.word	0x08005d09
 8005cd0:	08005d09 	.word	0x08005d09
 8005cd4:	08005d09 	.word	0x08005d09
 8005cd8:	08005d09 	.word	0x08005d09
 8005cdc:	08005d09 	.word	0x08005d09
 8005ce0:	08005d0f 	.word	0x08005d0f
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	3304      	adds	r3, #4
 8005ce8:	2101      	movs	r1, #1
 8005cea:	4618      	mov	r0, r3
 8005cec:	f001 fb5a 	bl	80073a4 <RCCEx_PLL2_Config>
 8005cf0:	4603      	mov	r3, r0
 8005cf2:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8005cf4:	e00c      	b.n	8005d10 <HAL_RCCEx_PeriphCLKConfig+0x7c8>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	3324      	adds	r3, #36	; 0x24
 8005cfa:	2101      	movs	r1, #1
 8005cfc:	4618      	mov	r0, r3
 8005cfe:	f001 fc03 	bl	8007508 <RCCEx_PLL3_Config>
 8005d02:	4603      	mov	r3, r0
 8005d04:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8005d06:	e003      	b.n	8005d10 <HAL_RCCEx_PeriphCLKConfig+0x7c8>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005d08:	2301      	movs	r3, #1
 8005d0a:	75fb      	strb	r3, [r7, #23]
      break;
 8005d0c:	e000      	b.n	8005d10 <HAL_RCCEx_PeriphCLKConfig+0x7c8>
      break;
 8005d0e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005d10:	7dfb      	ldrb	r3, [r7, #23]
 8005d12:	2b00      	cmp	r3, #0
 8005d14:	d109      	bne.n	8005d2a <HAL_RCCEx_PeriphCLKConfig+0x7e2>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8005d16:	4b45      	ldr	r3, [pc, #276]	; (8005e2c <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8005d18:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005d1a:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005d22:	4942      	ldr	r1, [pc, #264]	; (8005e2c <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8005d24:	4313      	orrs	r3, r2
 8005d26:	654b      	str	r3, [r1, #84]	; 0x54
 8005d28:	e001      	b.n	8005d2e <HAL_RCCEx_PeriphCLKConfig+0x7e6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005d2a:	7dfb      	ldrb	r3, [r7, #23]
 8005d2c:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	681b      	ldr	r3, [r3, #0]
 8005d32:	f003 0302 	and.w	r3, r3, #2
 8005d36:	2b00      	cmp	r3, #0
 8005d38:	d037      	beq.n	8005daa <HAL_RCCEx_PeriphCLKConfig+0x862>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005d3e:	2b05      	cmp	r3, #5
 8005d40:	d820      	bhi.n	8005d84 <HAL_RCCEx_PeriphCLKConfig+0x83c>
 8005d42:	a201      	add	r2, pc, #4	; (adr r2, 8005d48 <HAL_RCCEx_PeriphCLKConfig+0x800>)
 8005d44:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005d48:	08005d8b 	.word	0x08005d8b
 8005d4c:	08005d61 	.word	0x08005d61
 8005d50:	08005d73 	.word	0x08005d73
 8005d54:	08005d8b 	.word	0x08005d8b
 8005d58:	08005d8b 	.word	0x08005d8b
 8005d5c:	08005d8b 	.word	0x08005d8b
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	3304      	adds	r3, #4
 8005d64:	2101      	movs	r1, #1
 8005d66:	4618      	mov	r0, r3
 8005d68:	f001 fb1c 	bl	80073a4 <RCCEx_PLL2_Config>
 8005d6c:	4603      	mov	r3, r0
 8005d6e:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8005d70:	e00c      	b.n	8005d8c <HAL_RCCEx_PeriphCLKConfig+0x844>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	3324      	adds	r3, #36	; 0x24
 8005d76:	2101      	movs	r1, #1
 8005d78:	4618      	mov	r0, r3
 8005d7a:	f001 fbc5 	bl	8007508 <RCCEx_PLL3_Config>
 8005d7e:	4603      	mov	r3, r0
 8005d80:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8005d82:	e003      	b.n	8005d8c <HAL_RCCEx_PeriphCLKConfig+0x844>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005d84:	2301      	movs	r3, #1
 8005d86:	75fb      	strb	r3, [r7, #23]
      break;
 8005d88:	e000      	b.n	8005d8c <HAL_RCCEx_PeriphCLKConfig+0x844>
      break;
 8005d8a:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005d8c:	7dfb      	ldrb	r3, [r7, #23]
 8005d8e:	2b00      	cmp	r3, #0
 8005d90:	d109      	bne.n	8005da6 <HAL_RCCEx_PeriphCLKConfig+0x85e>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8005d92:	4b26      	ldr	r3, [pc, #152]	; (8005e2c <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8005d94:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005d96:	f023 0207 	bic.w	r2, r3, #7
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005d9e:	4923      	ldr	r1, [pc, #140]	; (8005e2c <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8005da0:	4313      	orrs	r3, r2
 8005da2:	654b      	str	r3, [r1, #84]	; 0x54
 8005da4:	e001      	b.n	8005daa <HAL_RCCEx_PeriphCLKConfig+0x862>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005da6:	7dfb      	ldrb	r3, [r7, #23]
 8005da8:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	681b      	ldr	r3, [r3, #0]
 8005dae:	f003 0304 	and.w	r3, r3, #4
 8005db2:	2b00      	cmp	r3, #0
 8005db4:	d040      	beq.n	8005e38 <HAL_RCCEx_PeriphCLKConfig+0x8f0>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005dbc:	2b05      	cmp	r3, #5
 8005dbe:	d821      	bhi.n	8005e04 <HAL_RCCEx_PeriphCLKConfig+0x8bc>
 8005dc0:	a201      	add	r2, pc, #4	; (adr r2, 8005dc8 <HAL_RCCEx_PeriphCLKConfig+0x880>)
 8005dc2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005dc6:	bf00      	nop
 8005dc8:	08005e0b 	.word	0x08005e0b
 8005dcc:	08005de1 	.word	0x08005de1
 8005dd0:	08005df3 	.word	0x08005df3
 8005dd4:	08005e0b 	.word	0x08005e0b
 8005dd8:	08005e0b 	.word	0x08005e0b
 8005ddc:	08005e0b 	.word	0x08005e0b
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	3304      	adds	r3, #4
 8005de4:	2101      	movs	r1, #1
 8005de6:	4618      	mov	r0, r3
 8005de8:	f001 fadc 	bl	80073a4 <RCCEx_PLL2_Config>
 8005dec:	4603      	mov	r3, r0
 8005dee:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8005df0:	e00c      	b.n	8005e0c <HAL_RCCEx_PeriphCLKConfig+0x8c4>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	3324      	adds	r3, #36	; 0x24
 8005df6:	2101      	movs	r1, #1
 8005df8:	4618      	mov	r0, r3
 8005dfa:	f001 fb85 	bl	8007508 <RCCEx_PLL3_Config>
 8005dfe:	4603      	mov	r3, r0
 8005e00:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8005e02:	e003      	b.n	8005e0c <HAL_RCCEx_PeriphCLKConfig+0x8c4>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005e04:	2301      	movs	r3, #1
 8005e06:	75fb      	strb	r3, [r7, #23]
      break;
 8005e08:	e000      	b.n	8005e0c <HAL_RCCEx_PeriphCLKConfig+0x8c4>
      break;
 8005e0a:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005e0c:	7dfb      	ldrb	r3, [r7, #23]
 8005e0e:	2b00      	cmp	r3, #0
 8005e10:	d110      	bne.n	8005e34 <HAL_RCCEx_PeriphCLKConfig+0x8ec>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8005e12:	4b06      	ldr	r3, [pc, #24]	; (8005e2c <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8005e14:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005e16:	f023 0207 	bic.w	r2, r3, #7
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005e20:	4902      	ldr	r1, [pc, #8]	; (8005e2c <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8005e22:	4313      	orrs	r3, r2
 8005e24:	658b      	str	r3, [r1, #88]	; 0x58
 8005e26:	e007      	b.n	8005e38 <HAL_RCCEx_PeriphCLKConfig+0x8f0>
 8005e28:	58024800 	.word	0x58024800
 8005e2c:	58024400 	.word	0x58024400
 8005e30:	00ffffcf 	.word	0x00ffffcf
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005e34:	7dfb      	ldrb	r3, [r7, #23]
 8005e36:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	681b      	ldr	r3, [r3, #0]
 8005e3c:	f003 0320 	and.w	r3, r3, #32
 8005e40:	2b00      	cmp	r3, #0
 8005e42:	d04b      	beq.n	8005edc <HAL_RCCEx_PeriphCLKConfig+0x994>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005e4a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005e4e:	d02e      	beq.n	8005eae <HAL_RCCEx_PeriphCLKConfig+0x966>
 8005e50:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005e54:	d828      	bhi.n	8005ea8 <HAL_RCCEx_PeriphCLKConfig+0x960>
 8005e56:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005e5a:	d02a      	beq.n	8005eb2 <HAL_RCCEx_PeriphCLKConfig+0x96a>
 8005e5c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005e60:	d822      	bhi.n	8005ea8 <HAL_RCCEx_PeriphCLKConfig+0x960>
 8005e62:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8005e66:	d026      	beq.n	8005eb6 <HAL_RCCEx_PeriphCLKConfig+0x96e>
 8005e68:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8005e6c:	d81c      	bhi.n	8005ea8 <HAL_RCCEx_PeriphCLKConfig+0x960>
 8005e6e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005e72:	d010      	beq.n	8005e96 <HAL_RCCEx_PeriphCLKConfig+0x94e>
 8005e74:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005e78:	d816      	bhi.n	8005ea8 <HAL_RCCEx_PeriphCLKConfig+0x960>
 8005e7a:	2b00      	cmp	r3, #0
 8005e7c:	d01d      	beq.n	8005eba <HAL_RCCEx_PeriphCLKConfig+0x972>
 8005e7e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005e82:	d111      	bne.n	8005ea8 <HAL_RCCEx_PeriphCLKConfig+0x960>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	3304      	adds	r3, #4
 8005e88:	2100      	movs	r1, #0
 8005e8a:	4618      	mov	r0, r3
 8005e8c:	f001 fa8a 	bl	80073a4 <RCCEx_PLL2_Config>
 8005e90:	4603      	mov	r3, r0
 8005e92:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8005e94:	e012      	b.n	8005ebc <HAL_RCCEx_PeriphCLKConfig+0x974>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	3324      	adds	r3, #36	; 0x24
 8005e9a:	2102      	movs	r1, #2
 8005e9c:	4618      	mov	r0, r3
 8005e9e:	f001 fb33 	bl	8007508 <RCCEx_PLL3_Config>
 8005ea2:	4603      	mov	r3, r0
 8005ea4:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8005ea6:	e009      	b.n	8005ebc <HAL_RCCEx_PeriphCLKConfig+0x974>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005ea8:	2301      	movs	r3, #1
 8005eaa:	75fb      	strb	r3, [r7, #23]
      break;
 8005eac:	e006      	b.n	8005ebc <HAL_RCCEx_PeriphCLKConfig+0x974>
      break;
 8005eae:	bf00      	nop
 8005eb0:	e004      	b.n	8005ebc <HAL_RCCEx_PeriphCLKConfig+0x974>
      break;
 8005eb2:	bf00      	nop
 8005eb4:	e002      	b.n	8005ebc <HAL_RCCEx_PeriphCLKConfig+0x974>
      break;
 8005eb6:	bf00      	nop
 8005eb8:	e000      	b.n	8005ebc <HAL_RCCEx_PeriphCLKConfig+0x974>
      break;
 8005eba:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005ebc:	7dfb      	ldrb	r3, [r7, #23]
 8005ebe:	2b00      	cmp	r3, #0
 8005ec0:	d10a      	bne.n	8005ed8 <HAL_RCCEx_PeriphCLKConfig+0x990>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8005ec2:	4bb2      	ldr	r3, [pc, #712]	; (800618c <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8005ec4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005ec6:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005ed0:	49ae      	ldr	r1, [pc, #696]	; (800618c <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8005ed2:	4313      	orrs	r3, r2
 8005ed4:	654b      	str	r3, [r1, #84]	; 0x54
 8005ed6:	e001      	b.n	8005edc <HAL_RCCEx_PeriphCLKConfig+0x994>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005ed8:	7dfb      	ldrb	r3, [r7, #23]
 8005eda:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	681b      	ldr	r3, [r3, #0]
 8005ee0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005ee4:	2b00      	cmp	r3, #0
 8005ee6:	d04b      	beq.n	8005f80 <HAL_RCCEx_PeriphCLKConfig+0xa38>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005eee:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8005ef2:	d02e      	beq.n	8005f52 <HAL_RCCEx_PeriphCLKConfig+0xa0a>
 8005ef4:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8005ef8:	d828      	bhi.n	8005f4c <HAL_RCCEx_PeriphCLKConfig+0xa04>
 8005efa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005efe:	d02a      	beq.n	8005f56 <HAL_RCCEx_PeriphCLKConfig+0xa0e>
 8005f00:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005f04:	d822      	bhi.n	8005f4c <HAL_RCCEx_PeriphCLKConfig+0xa04>
 8005f06:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005f0a:	d026      	beq.n	8005f5a <HAL_RCCEx_PeriphCLKConfig+0xa12>
 8005f0c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005f10:	d81c      	bhi.n	8005f4c <HAL_RCCEx_PeriphCLKConfig+0xa04>
 8005f12:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005f16:	d010      	beq.n	8005f3a <HAL_RCCEx_PeriphCLKConfig+0x9f2>
 8005f18:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005f1c:	d816      	bhi.n	8005f4c <HAL_RCCEx_PeriphCLKConfig+0xa04>
 8005f1e:	2b00      	cmp	r3, #0
 8005f20:	d01d      	beq.n	8005f5e <HAL_RCCEx_PeriphCLKConfig+0xa16>
 8005f22:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005f26:	d111      	bne.n	8005f4c <HAL_RCCEx_PeriphCLKConfig+0xa04>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	3304      	adds	r3, #4
 8005f2c:	2100      	movs	r1, #0
 8005f2e:	4618      	mov	r0, r3
 8005f30:	f001 fa38 	bl	80073a4 <RCCEx_PLL2_Config>
 8005f34:	4603      	mov	r3, r0
 8005f36:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8005f38:	e012      	b.n	8005f60 <HAL_RCCEx_PeriphCLKConfig+0xa18>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	3324      	adds	r3, #36	; 0x24
 8005f3e:	2102      	movs	r1, #2
 8005f40:	4618      	mov	r0, r3
 8005f42:	f001 fae1 	bl	8007508 <RCCEx_PLL3_Config>
 8005f46:	4603      	mov	r3, r0
 8005f48:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8005f4a:	e009      	b.n	8005f60 <HAL_RCCEx_PeriphCLKConfig+0xa18>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005f4c:	2301      	movs	r3, #1
 8005f4e:	75fb      	strb	r3, [r7, #23]
      break;
 8005f50:	e006      	b.n	8005f60 <HAL_RCCEx_PeriphCLKConfig+0xa18>
      break;
 8005f52:	bf00      	nop
 8005f54:	e004      	b.n	8005f60 <HAL_RCCEx_PeriphCLKConfig+0xa18>
      break;
 8005f56:	bf00      	nop
 8005f58:	e002      	b.n	8005f60 <HAL_RCCEx_PeriphCLKConfig+0xa18>
      break;
 8005f5a:	bf00      	nop
 8005f5c:	e000      	b.n	8005f60 <HAL_RCCEx_PeriphCLKConfig+0xa18>
      break;
 8005f5e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005f60:	7dfb      	ldrb	r3, [r7, #23]
 8005f62:	2b00      	cmp	r3, #0
 8005f64:	d10a      	bne.n	8005f7c <HAL_RCCEx_PeriphCLKConfig+0xa34>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8005f66:	4b89      	ldr	r3, [pc, #548]	; (800618c <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8005f68:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005f6a:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005f74:	4985      	ldr	r1, [pc, #532]	; (800618c <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8005f76:	4313      	orrs	r3, r2
 8005f78:	658b      	str	r3, [r1, #88]	; 0x58
 8005f7a:	e001      	b.n	8005f80 <HAL_RCCEx_PeriphCLKConfig+0xa38>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005f7c:	7dfb      	ldrb	r3, [r7, #23]
 8005f7e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	681b      	ldr	r3, [r3, #0]
 8005f84:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005f88:	2b00      	cmp	r3, #0
 8005f8a:	d04b      	beq.n	8006024 <HAL_RCCEx_PeriphCLKConfig+0xadc>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005f92:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8005f96:	d02e      	beq.n	8005ff6 <HAL_RCCEx_PeriphCLKConfig+0xaae>
 8005f98:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8005f9c:	d828      	bhi.n	8005ff0 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
 8005f9e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005fa2:	d02a      	beq.n	8005ffa <HAL_RCCEx_PeriphCLKConfig+0xab2>
 8005fa4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005fa8:	d822      	bhi.n	8005ff0 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
 8005faa:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8005fae:	d026      	beq.n	8005ffe <HAL_RCCEx_PeriphCLKConfig+0xab6>
 8005fb0:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8005fb4:	d81c      	bhi.n	8005ff0 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
 8005fb6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005fba:	d010      	beq.n	8005fde <HAL_RCCEx_PeriphCLKConfig+0xa96>
 8005fbc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005fc0:	d816      	bhi.n	8005ff0 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
 8005fc2:	2b00      	cmp	r3, #0
 8005fc4:	d01d      	beq.n	8006002 <HAL_RCCEx_PeriphCLKConfig+0xaba>
 8005fc6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005fca:	d111      	bne.n	8005ff0 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	3304      	adds	r3, #4
 8005fd0:	2100      	movs	r1, #0
 8005fd2:	4618      	mov	r0, r3
 8005fd4:	f001 f9e6 	bl	80073a4 <RCCEx_PLL2_Config>
 8005fd8:	4603      	mov	r3, r0
 8005fda:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8005fdc:	e012      	b.n	8006004 <HAL_RCCEx_PeriphCLKConfig+0xabc>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	3324      	adds	r3, #36	; 0x24
 8005fe2:	2102      	movs	r1, #2
 8005fe4:	4618      	mov	r0, r3
 8005fe6:	f001 fa8f 	bl	8007508 <RCCEx_PLL3_Config>
 8005fea:	4603      	mov	r3, r0
 8005fec:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8005fee:	e009      	b.n	8006004 <HAL_RCCEx_PeriphCLKConfig+0xabc>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005ff0:	2301      	movs	r3, #1
 8005ff2:	75fb      	strb	r3, [r7, #23]
      break;
 8005ff4:	e006      	b.n	8006004 <HAL_RCCEx_PeriphCLKConfig+0xabc>
      break;
 8005ff6:	bf00      	nop
 8005ff8:	e004      	b.n	8006004 <HAL_RCCEx_PeriphCLKConfig+0xabc>
      break;
 8005ffa:	bf00      	nop
 8005ffc:	e002      	b.n	8006004 <HAL_RCCEx_PeriphCLKConfig+0xabc>
      break;
 8005ffe:	bf00      	nop
 8006000:	e000      	b.n	8006004 <HAL_RCCEx_PeriphCLKConfig+0xabc>
      break;
 8006002:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006004:	7dfb      	ldrb	r3, [r7, #23]
 8006006:	2b00      	cmp	r3, #0
 8006008:	d10a      	bne.n	8006020 <HAL_RCCEx_PeriphCLKConfig+0xad8>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 800600a:	4b60      	ldr	r3, [pc, #384]	; (800618c <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 800600c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800600e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8006018:	495c      	ldr	r1, [pc, #368]	; (800618c <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 800601a:	4313      	orrs	r3, r2
 800601c:	658b      	str	r3, [r1, #88]	; 0x58
 800601e:	e001      	b.n	8006024 <HAL_RCCEx_PeriphCLKConfig+0xadc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006020:	7dfb      	ldrb	r3, [r7, #23]
 8006022:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ I2C1/2/3/5* Configuration ------------------------*/
#if defined(I2C5)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1235) == RCC_PERIPHCLK_I2C1235)
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	681b      	ldr	r3, [r3, #0]
 8006028:	f003 0308 	and.w	r3, r3, #8
 800602c:	2b00      	cmp	r3, #0
 800602e:	d018      	beq.n	8006062 <HAL_RCCEx_PeriphCLKConfig+0xb1a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1235CLKSOURCE(PeriphClkInit->I2c1235ClockSelection));

    if ((PeriphClkInit->I2c1235ClockSelection )== RCC_I2C1235CLKSOURCE_PLL3 )
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006034:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006038:	d10a      	bne.n	8006050 <HAL_RCCEx_PeriphCLKConfig+0xb08>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	3324      	adds	r3, #36	; 0x24
 800603e:	2102      	movs	r1, #2
 8006040:	4618      	mov	r0, r3
 8006042:	f001 fa61 	bl	8007508 <RCCEx_PLL3_Config>
 8006046:	4603      	mov	r3, r0
 8006048:	2b00      	cmp	r3, #0
 800604a:	d001      	beq.n	8006050 <HAL_RCCEx_PeriphCLKConfig+0xb08>
        {
          status = HAL_ERROR;
 800604c:	2301      	movs	r3, #1
 800604e:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);
 8006050:	4b4e      	ldr	r3, [pc, #312]	; (800618c <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8006052:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006054:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800605c:	494b      	ldr	r1, [pc, #300]	; (800618c <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 800605e:	4313      	orrs	r3, r2
 8006060:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	681b      	ldr	r3, [r3, #0]
 8006066:	f003 0310 	and.w	r3, r3, #16
 800606a:	2b00      	cmp	r3, #0
 800606c:	d01a      	beq.n	80060a4 <HAL_RCCEx_PeriphCLKConfig+0xb5c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006074:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006078:	d10a      	bne.n	8006090 <HAL_RCCEx_PeriphCLKConfig+0xb48>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	3324      	adds	r3, #36	; 0x24
 800607e:	2102      	movs	r1, #2
 8006080:	4618      	mov	r0, r3
 8006082:	f001 fa41 	bl	8007508 <RCCEx_PLL3_Config>
 8006086:	4603      	mov	r3, r0
 8006088:	2b00      	cmp	r3, #0
 800608a:	d001      	beq.n	8006090 <HAL_RCCEx_PeriphCLKConfig+0xb48>
      {
        status = HAL_ERROR;
 800608c:	2301      	movs	r3, #1
 800608e:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8006090:	4b3e      	ldr	r3, [pc, #248]	; (800618c <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8006092:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006094:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800609e:	493b      	ldr	r1, [pc, #236]	; (800618c <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 80060a0:	4313      	orrs	r3, r2
 80060a2:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	681b      	ldr	r3, [r3, #0]
 80060a8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80060ac:	2b00      	cmp	r3, #0
 80060ae:	d034      	beq.n	800611a <HAL_RCCEx_PeriphCLKConfig+0xbd2>
  {
    switch(PeriphClkInit->AdcClockSelection)
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80060b6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80060ba:	d01d      	beq.n	80060f8 <HAL_RCCEx_PeriphCLKConfig+0xbb0>
 80060bc:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80060c0:	d817      	bhi.n	80060f2 <HAL_RCCEx_PeriphCLKConfig+0xbaa>
 80060c2:	2b00      	cmp	r3, #0
 80060c4:	d003      	beq.n	80060ce <HAL_RCCEx_PeriphCLKConfig+0xb86>
 80060c6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80060ca:	d009      	beq.n	80060e0 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 80060cc:	e011      	b.n	80060f2 <HAL_RCCEx_PeriphCLKConfig+0xbaa>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	3304      	adds	r3, #4
 80060d2:	2100      	movs	r1, #0
 80060d4:	4618      	mov	r0, r3
 80060d6:	f001 f965 	bl	80073a4 <RCCEx_PLL2_Config>
 80060da:	4603      	mov	r3, r0
 80060dc:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 80060de:	e00c      	b.n	80060fa <HAL_RCCEx_PeriphCLKConfig+0xbb2>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	3324      	adds	r3, #36	; 0x24
 80060e4:	2102      	movs	r1, #2
 80060e6:	4618      	mov	r0, r3
 80060e8:	f001 fa0e 	bl	8007508 <RCCEx_PLL3_Config>
 80060ec:	4603      	mov	r3, r0
 80060ee:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 80060f0:	e003      	b.n	80060fa <HAL_RCCEx_PeriphCLKConfig+0xbb2>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80060f2:	2301      	movs	r3, #1
 80060f4:	75fb      	strb	r3, [r7, #23]
      break;
 80060f6:	e000      	b.n	80060fa <HAL_RCCEx_PeriphCLKConfig+0xbb2>
      break;
 80060f8:	bf00      	nop
    }

    if(ret == HAL_OK)
 80060fa:	7dfb      	ldrb	r3, [r7, #23]
 80060fc:	2b00      	cmp	r3, #0
 80060fe:	d10a      	bne.n	8006116 <HAL_RCCEx_PeriphCLKConfig+0xbce>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8006100:	4b22      	ldr	r3, [pc, #136]	; (800618c <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8006102:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006104:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800610e:	491f      	ldr	r1, [pc, #124]	; (800618c <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8006110:	4313      	orrs	r3, r2
 8006112:	658b      	str	r3, [r1, #88]	; 0x58
 8006114:	e001      	b.n	800611a <HAL_RCCEx_PeriphCLKConfig+0xbd2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006116:	7dfb      	ldrb	r3, [r7, #23]
 8006118:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	681b      	ldr	r3, [r3, #0]
 800611e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006122:	2b00      	cmp	r3, #0
 8006124:	d036      	beq.n	8006194 <HAL_RCCEx_PeriphCLKConfig+0xc4c>
  {

    switch(PeriphClkInit->UsbClockSelection)
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800612c:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8006130:	d01c      	beq.n	800616c <HAL_RCCEx_PeriphCLKConfig+0xc24>
 8006132:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8006136:	d816      	bhi.n	8006166 <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 8006138:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800613c:	d003      	beq.n	8006146 <HAL_RCCEx_PeriphCLKConfig+0xbfe>
 800613e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006142:	d007      	beq.n	8006154 <HAL_RCCEx_PeriphCLKConfig+0xc0c>
 8006144:	e00f      	b.n	8006166 <HAL_RCCEx_PeriphCLKConfig+0xc1e>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006146:	4b11      	ldr	r3, [pc, #68]	; (800618c <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8006148:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800614a:	4a10      	ldr	r2, [pc, #64]	; (800618c <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 800614c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006150:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 8006152:	e00c      	b.n	800616e <HAL_RCCEx_PeriphCLKConfig+0xc26>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	3324      	adds	r3, #36	; 0x24
 8006158:	2101      	movs	r1, #1
 800615a:	4618      	mov	r0, r3
 800615c:	f001 f9d4 	bl	8007508 <RCCEx_PLL3_Config>
 8006160:	4603      	mov	r3, r0
 8006162:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 8006164:	e003      	b.n	800616e <HAL_RCCEx_PeriphCLKConfig+0xc26>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006166:	2301      	movs	r3, #1
 8006168:	75fb      	strb	r3, [r7, #23]
      break;
 800616a:	e000      	b.n	800616e <HAL_RCCEx_PeriphCLKConfig+0xc26>
      break;
 800616c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800616e:	7dfb      	ldrb	r3, [r7, #23]
 8006170:	2b00      	cmp	r3, #0
 8006172:	d10d      	bne.n	8006190 <HAL_RCCEx_PeriphCLKConfig+0xc48>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8006174:	4b05      	ldr	r3, [pc, #20]	; (800618c <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8006176:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006178:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006182:	4902      	ldr	r1, [pc, #8]	; (800618c <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8006184:	4313      	orrs	r3, r2
 8006186:	654b      	str	r3, [r1, #84]	; 0x54
 8006188:	e004      	b.n	8006194 <HAL_RCCEx_PeriphCLKConfig+0xc4c>
 800618a:	bf00      	nop
 800618c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006190:	7dfb      	ldrb	r3, [r7, #23]
 8006192:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	681b      	ldr	r3, [r3, #0]
 8006198:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800619c:	2b00      	cmp	r3, #0
 800619e:	d029      	beq.n	80061f4 <HAL_RCCEx_PeriphCLKConfig+0xcac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80061a4:	2b00      	cmp	r3, #0
 80061a6:	d003      	beq.n	80061b0 <HAL_RCCEx_PeriphCLKConfig+0xc68>
 80061a8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80061ac:	d007      	beq.n	80061be <HAL_RCCEx_PeriphCLKConfig+0xc76>
 80061ae:	e00f      	b.n	80061d0 <HAL_RCCEx_PeriphCLKConfig+0xc88>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80061b0:	4b61      	ldr	r3, [pc, #388]	; (8006338 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 80061b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80061b4:	4a60      	ldr	r2, [pc, #384]	; (8006338 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 80061b6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80061ba:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 80061bc:	e00b      	b.n	80061d6 <HAL_RCCEx_PeriphCLKConfig+0xc8e>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	3304      	adds	r3, #4
 80061c2:	2102      	movs	r1, #2
 80061c4:	4618      	mov	r0, r3
 80061c6:	f001 f8ed 	bl	80073a4 <RCCEx_PLL2_Config>
 80061ca:	4603      	mov	r3, r0
 80061cc:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 80061ce:	e002      	b.n	80061d6 <HAL_RCCEx_PeriphCLKConfig+0xc8e>

    default:
      ret = HAL_ERROR;
 80061d0:	2301      	movs	r3, #1
 80061d2:	75fb      	strb	r3, [r7, #23]
      break;
 80061d4:	bf00      	nop
    }

    if(ret == HAL_OK)
 80061d6:	7dfb      	ldrb	r3, [r7, #23]
 80061d8:	2b00      	cmp	r3, #0
 80061da:	d109      	bne.n	80061f0 <HAL_RCCEx_PeriphCLKConfig+0xca8>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 80061dc:	4b56      	ldr	r3, [pc, #344]	; (8006338 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 80061de:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80061e0:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80061e8:	4953      	ldr	r1, [pc, #332]	; (8006338 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 80061ea:	4313      	orrs	r3, r2
 80061ec:	64cb      	str	r3, [r1, #76]	; 0x4c
 80061ee:	e001      	b.n	80061f4 <HAL_RCCEx_PeriphCLKConfig+0xcac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80061f0:	7dfb      	ldrb	r3, [r7, #23]
 80061f2:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	681b      	ldr	r3, [r3, #0]
 80061f8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80061fc:	2b00      	cmp	r3, #0
 80061fe:	d00a      	beq.n	8006216 <HAL_RCCEx_PeriphCLKConfig+0xcce>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	3324      	adds	r3, #36	; 0x24
 8006204:	2102      	movs	r1, #2
 8006206:	4618      	mov	r0, r3
 8006208:	f001 f97e 	bl	8007508 <RCCEx_PLL3_Config>
 800620c:	4603      	mov	r3, r0
 800620e:	2b00      	cmp	r3, #0
 8006210:	d001      	beq.n	8006216 <HAL_RCCEx_PeriphCLKConfig+0xcce>
    {
      status=HAL_ERROR;
 8006212:	2301      	movs	r3, #1
 8006214:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	681b      	ldr	r3, [r3, #0]
 800621a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800621e:	2b00      	cmp	r3, #0
 8006220:	d030      	beq.n	8006284 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
  {

    switch(PeriphClkInit->RngClockSelection)
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006226:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800622a:	d017      	beq.n	800625c <HAL_RCCEx_PeriphCLKConfig+0xd14>
 800622c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006230:	d811      	bhi.n	8006256 <HAL_RCCEx_PeriphCLKConfig+0xd0e>
 8006232:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006236:	d013      	beq.n	8006260 <HAL_RCCEx_PeriphCLKConfig+0xd18>
 8006238:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800623c:	d80b      	bhi.n	8006256 <HAL_RCCEx_PeriphCLKConfig+0xd0e>
 800623e:	2b00      	cmp	r3, #0
 8006240:	d010      	beq.n	8006264 <HAL_RCCEx_PeriphCLKConfig+0xd1c>
 8006242:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006246:	d106      	bne.n	8006256 <HAL_RCCEx_PeriphCLKConfig+0xd0e>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006248:	4b3b      	ldr	r3, [pc, #236]	; (8006338 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800624a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800624c:	4a3a      	ldr	r2, [pc, #232]	; (8006338 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800624e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006252:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 8006254:	e007      	b.n	8006266 <HAL_RCCEx_PeriphCLKConfig+0xd1e>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006256:	2301      	movs	r3, #1
 8006258:	75fb      	strb	r3, [r7, #23]
      break;
 800625a:	e004      	b.n	8006266 <HAL_RCCEx_PeriphCLKConfig+0xd1e>
      break;
 800625c:	bf00      	nop
 800625e:	e002      	b.n	8006266 <HAL_RCCEx_PeriphCLKConfig+0xd1e>
      break;
 8006260:	bf00      	nop
 8006262:	e000      	b.n	8006266 <HAL_RCCEx_PeriphCLKConfig+0xd1e>
      break;
 8006264:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006266:	7dfb      	ldrb	r3, [r7, #23]
 8006268:	2b00      	cmp	r3, #0
 800626a:	d109      	bne.n	8006280 <HAL_RCCEx_PeriphCLKConfig+0xd38>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800626c:	4b32      	ldr	r3, [pc, #200]	; (8006338 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800626e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006270:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006278:	492f      	ldr	r1, [pc, #188]	; (8006338 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800627a:	4313      	orrs	r3, r2
 800627c:	654b      	str	r3, [r1, #84]	; 0x54
 800627e:	e001      	b.n	8006284 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006280:	7dfb      	ldrb	r3, [r7, #23]
 8006282:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	681b      	ldr	r3, [r3, #0]
 8006288:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800628c:	2b00      	cmp	r3, #0
 800628e:	d008      	beq.n	80062a2 <HAL_RCCEx_PeriphCLKConfig+0xd5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8006290:	4b29      	ldr	r3, [pc, #164]	; (8006338 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8006292:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006294:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800629c:	4926      	ldr	r1, [pc, #152]	; (8006338 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800629e:	4313      	orrs	r3, r2
 80062a0:	650b      	str	r3, [r1, #80]	; 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	681b      	ldr	r3, [r3, #0]
 80062a6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80062aa:	2b00      	cmp	r3, #0
 80062ac:	d008      	beq.n	80062c0 <HAL_RCCEx_PeriphCLKConfig+0xd78>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80062ae:	4b22      	ldr	r3, [pc, #136]	; (8006338 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 80062b0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80062b2:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80062ba:	491f      	ldr	r1, [pc, #124]	; (8006338 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 80062bc:	4313      	orrs	r3, r2
 80062be:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	681b      	ldr	r3, [r3, #0]
 80062c4:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80062c8:	2b00      	cmp	r3, #0
 80062ca:	d00d      	beq.n	80062e8 <HAL_RCCEx_PeriphCLKConfig+0xda0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80062cc:	4b1a      	ldr	r3, [pc, #104]	; (8006338 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 80062ce:	691b      	ldr	r3, [r3, #16]
 80062d0:	4a19      	ldr	r2, [pc, #100]	; (8006338 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 80062d2:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80062d6:	6113      	str	r3, [r2, #16]
 80062d8:	4b17      	ldr	r3, [pc, #92]	; (8006338 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 80062da:	691a      	ldr	r2, [r3, #16]
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80062e2:	4915      	ldr	r1, [pc, #84]	; (8006338 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 80062e4:	4313      	orrs	r3, r2
 80062e6:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	681b      	ldr	r3, [r3, #0]
 80062ec:	2b00      	cmp	r3, #0
 80062ee:	da08      	bge.n	8006302 <HAL_RCCEx_PeriphCLKConfig+0xdba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 80062f0:	4b11      	ldr	r3, [pc, #68]	; (8006338 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 80062f2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80062f4:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80062fc:	490e      	ldr	r1, [pc, #56]	; (8006338 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 80062fe:	4313      	orrs	r3, r2
 8006300:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	681b      	ldr	r3, [r3, #0]
 8006306:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800630a:	2b00      	cmp	r3, #0
 800630c:	d009      	beq.n	8006322 <HAL_RCCEx_PeriphCLKConfig+0xdda>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800630e:	4b0a      	ldr	r3, [pc, #40]	; (8006338 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8006310:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006312:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800631c:	4906      	ldr	r1, [pc, #24]	; (8006338 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800631e:	4313      	orrs	r3, r2
 8006320:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 8006322:	7dbb      	ldrb	r3, [r7, #22]
 8006324:	2b00      	cmp	r3, #0
 8006326:	d101      	bne.n	800632c <HAL_RCCEx_PeriphCLKConfig+0xde4>
  {
    return HAL_OK;
 8006328:	2300      	movs	r3, #0
 800632a:	e000      	b.n	800632e <HAL_RCCEx_PeriphCLKConfig+0xde6>
  }
  return HAL_ERROR;
 800632c:	2301      	movs	r3, #1
}
 800632e:	4618      	mov	r0, r3
 8006330:	3718      	adds	r7, #24
 8006332:	46bd      	mov	sp, r7
 8006334:	bd80      	pop	{r7, pc}
 8006336:	bf00      	nop
 8006338:	58024400 	.word	0x58024400

0800633c <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 800633c:	b580      	push	{r7, lr}
 800633e:	b090      	sub	sp, #64	; 0x40
 8006340:	af00      	add	r7, sp, #0
 8006342:	6078      	str	r0, [r7, #4]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800634a:	f040 8089 	bne.w	8006460 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
    {

      saiclocksource= __HAL_RCC_GET_SAI1_SOURCE();
 800634e:	4b95      	ldr	r3, [pc, #596]	; (80065a4 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 8006350:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006352:	f003 0307 	and.w	r3, r3, #7
 8006356:	633b      	str	r3, [r7, #48]	; 0x30
 8006358:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800635a:	2b04      	cmp	r3, #4
 800635c:	d87d      	bhi.n	800645a <HAL_RCCEx_GetPeriphCLKFreq+0x11e>
 800635e:	a201      	add	r2, pc, #4	; (adr r2, 8006364 <HAL_RCCEx_GetPeriphCLKFreq+0x28>)
 8006360:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006364:	08006379 	.word	0x08006379
 8006368:	0800639d 	.word	0x0800639d
 800636c:	080063c1 	.word	0x080063c1
 8006370:	08006455 	.word	0x08006455
 8006374:	080063e5 	.word	0x080063e5

      switch (saiclocksource)
      {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8006378:	4b8a      	ldr	r3, [pc, #552]	; (80065a4 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 800637a:	681b      	ldr	r3, [r3, #0]
 800637c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006380:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006384:	d107      	bne.n	8006396 <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
         {
           HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8006386:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800638a:	4618      	mov	r0, r3
 800638c:	f000 feb8 	bl	8007100 <HAL_RCCEx_GetPLL1ClockFreq>
           frequency = pll1_clocks.PLL1_Q_Frequency;
 8006390:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006392:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8006394:	e3ed      	b.n	8006b72 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 8006396:	2300      	movs	r3, #0
 8006398:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800639a:	e3ea      	b.n	8006b72 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800639c:	4b81      	ldr	r3, [pc, #516]	; (80065a4 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 800639e:	681b      	ldr	r3, [r3, #0]
 80063a0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80063a4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80063a8:	d107      	bne.n	80063ba <HAL_RCCEx_GetPeriphCLKFreq+0x7e>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80063aa:	f107 0318 	add.w	r3, r7, #24
 80063ae:	4618      	mov	r0, r3
 80063b0:	f000 fbfe 	bl	8006bb0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80063b4:	69bb      	ldr	r3, [r7, #24]
 80063b6:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 80063b8:	e3db      	b.n	8006b72 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 80063ba:	2300      	movs	r3, #0
 80063bc:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80063be:	e3d8      	b.n	8006b72 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80063c0:	4b78      	ldr	r3, [pc, #480]	; (80065a4 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 80063c2:	681b      	ldr	r3, [r3, #0]
 80063c4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80063c8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80063cc:	d107      	bne.n	80063de <HAL_RCCEx_GetPeriphCLKFreq+0xa2>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80063ce:	f107 030c 	add.w	r3, r7, #12
 80063d2:	4618      	mov	r0, r3
 80063d4:	f000 fd40 	bl	8006e58 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 80063d8:	68fb      	ldr	r3, [r7, #12]
 80063da:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 80063dc:	e3c9      	b.n	8006b72 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 80063de:	2300      	movs	r3, #0
 80063e0:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80063e2:	e3c6      	b.n	8006b72 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 80063e4:	4b6f      	ldr	r3, [pc, #444]	; (80065a4 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 80063e6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80063e8:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80063ec:	637b      	str	r3, [r7, #52]	; 0x34

          if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80063ee:	4b6d      	ldr	r3, [pc, #436]	; (80065a4 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 80063f0:	681b      	ldr	r3, [r3, #0]
 80063f2:	f003 0304 	and.w	r3, r3, #4
 80063f6:	2b04      	cmp	r3, #4
 80063f8:	d10c      	bne.n	8006414 <HAL_RCCEx_GetPeriphCLKFreq+0xd8>
 80063fa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80063fc:	2b00      	cmp	r3, #0
 80063fe:	d109      	bne.n	8006414 <HAL_RCCEx_GetPeriphCLKFreq+0xd8>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8006400:	4b68      	ldr	r3, [pc, #416]	; (80065a4 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 8006402:	681b      	ldr	r3, [r3, #0]
 8006404:	08db      	lsrs	r3, r3, #3
 8006406:	f003 0303 	and.w	r3, r3, #3
 800640a:	4a67      	ldr	r2, [pc, #412]	; (80065a8 <HAL_RCCEx_GetPeriphCLKFreq+0x26c>)
 800640c:	fa22 f303 	lsr.w	r3, r2, r3
 8006410:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006412:	e01e      	b.n	8006452 <HAL_RCCEx_GetPeriphCLKFreq+0x116>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8006414:	4b63      	ldr	r3, [pc, #396]	; (80065a4 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 8006416:	681b      	ldr	r3, [r3, #0]
 8006418:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800641c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006420:	d106      	bne.n	8006430 <HAL_RCCEx_GetPeriphCLKFreq+0xf4>
 8006422:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006424:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006428:	d102      	bne.n	8006430 <HAL_RCCEx_GetPeriphCLKFreq+0xf4>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 800642a:	4b60      	ldr	r3, [pc, #384]	; (80065ac <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800642c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800642e:	e010      	b.n	8006452 <HAL_RCCEx_GetPeriphCLKFreq+0x116>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8006430:	4b5c      	ldr	r3, [pc, #368]	; (80065a4 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 8006432:	681b      	ldr	r3, [r3, #0]
 8006434:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006438:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800643c:	d106      	bne.n	800644c <HAL_RCCEx_GetPeriphCLKFreq+0x110>
 800643e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006440:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006444:	d102      	bne.n	800644c <HAL_RCCEx_GetPeriphCLKFreq+0x110>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 8006446:	4b5a      	ldr	r3, [pc, #360]	; (80065b0 <HAL_RCCEx_GetPeriphCLKFreq+0x274>)
 8006448:	63fb      	str	r3, [r7, #60]	; 0x3c
 800644a:	e002      	b.n	8006452 <HAL_RCCEx_GetPeriphCLKFreq+0x116>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 800644c:	2300      	movs	r3, #0
 800644e:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 8006450:	e38f      	b.n	8006b72 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
 8006452:	e38e      	b.n	8006b72 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8006454:	4b57      	ldr	r3, [pc, #348]	; (80065b4 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8006456:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006458:	e38b      	b.n	8006b72 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      default :
        {
          frequency = 0;
 800645a:	2300      	movs	r3, #0
 800645c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800645e:	e388      	b.n	8006b72 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
      }
    }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006466:	f040 80a7 	bne.w	80065b8 <HAL_RCCEx_GetPeriphCLKFreq+0x27c>
    {

      saiclocksource= __HAL_RCC_GET_SAI4A_SOURCE();
 800646a:	4b4e      	ldr	r3, [pc, #312]	; (80065a4 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 800646c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800646e:	f403 0360 	and.w	r3, r3, #14680064	; 0xe00000
 8006472:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 8006474:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006476:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800647a:	d054      	beq.n	8006526 <HAL_RCCEx_GetPeriphCLKFreq+0x1ea>
 800647c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800647e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8006482:	f200 808b 	bhi.w	800659c <HAL_RCCEx_GetPeriphCLKFreq+0x260>
 8006486:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006488:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800648c:	f000 8083 	beq.w	8006596 <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
 8006490:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006492:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8006496:	f200 8081 	bhi.w	800659c <HAL_RCCEx_GetPeriphCLKFreq+0x260>
 800649a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800649c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80064a0:	d02f      	beq.n	8006502 <HAL_RCCEx_GetPeriphCLKFreq+0x1c6>
 80064a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80064a4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80064a8:	d878      	bhi.n	800659c <HAL_RCCEx_GetPeriphCLKFreq+0x260>
 80064aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80064ac:	2b00      	cmp	r3, #0
 80064ae:	d004      	beq.n	80064ba <HAL_RCCEx_GetPeriphCLKFreq+0x17e>
 80064b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80064b2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80064b6:	d012      	beq.n	80064de <HAL_RCCEx_GetPeriphCLKFreq+0x1a2>
 80064b8:	e070      	b.n	800659c <HAL_RCCEx_GetPeriphCLKFreq+0x260>
      {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80064ba:	4b3a      	ldr	r3, [pc, #232]	; (80065a4 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 80064bc:	681b      	ldr	r3, [r3, #0]
 80064be:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80064c2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80064c6:	d107      	bne.n	80064d8 <HAL_RCCEx_GetPeriphCLKFreq+0x19c>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80064c8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80064cc:	4618      	mov	r0, r3
 80064ce:	f000 fe17 	bl	8007100 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80064d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80064d4:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 80064d6:	e34c      	b.n	8006b72 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 80064d8:	2300      	movs	r3, #0
 80064da:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80064dc:	e349      	b.n	8006b72 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80064de:	4b31      	ldr	r3, [pc, #196]	; (80065a4 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 80064e0:	681b      	ldr	r3, [r3, #0]
 80064e2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80064e6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80064ea:	d107      	bne.n	80064fc <HAL_RCCEx_GetPeriphCLKFreq+0x1c0>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80064ec:	f107 0318 	add.w	r3, r7, #24
 80064f0:	4618      	mov	r0, r3
 80064f2:	f000 fb5d 	bl	8006bb0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80064f6:	69bb      	ldr	r3, [r7, #24]
 80064f8:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 80064fa:	e33a      	b.n	8006b72 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 80064fc:	2300      	movs	r3, #0
 80064fe:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006500:	e337      	b.n	8006b72 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8006502:	4b28      	ldr	r3, [pc, #160]	; (80065a4 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 8006504:	681b      	ldr	r3, [r3, #0]
 8006506:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800650a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800650e:	d107      	bne.n	8006520 <HAL_RCCEx_GetPeriphCLKFreq+0x1e4>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006510:	f107 030c 	add.w	r3, r7, #12
 8006514:	4618      	mov	r0, r3
 8006516:	f000 fc9f 	bl	8006e58 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800651a:	68fb      	ldr	r3, [r7, #12]
 800651c:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800651e:	e328      	b.n	8006b72 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 8006520:	2300      	movs	r3, #0
 8006522:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006524:	e325      	b.n	8006b72 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8006526:	4b1f      	ldr	r3, [pc, #124]	; (80065a4 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 8006528:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800652a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800652e:	637b      	str	r3, [r7, #52]	; 0x34

          if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8006530:	4b1c      	ldr	r3, [pc, #112]	; (80065a4 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 8006532:	681b      	ldr	r3, [r3, #0]
 8006534:	f003 0304 	and.w	r3, r3, #4
 8006538:	2b04      	cmp	r3, #4
 800653a:	d10c      	bne.n	8006556 <HAL_RCCEx_GetPeriphCLKFreq+0x21a>
 800653c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800653e:	2b00      	cmp	r3, #0
 8006540:	d109      	bne.n	8006556 <HAL_RCCEx_GetPeriphCLKFreq+0x21a>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8006542:	4b18      	ldr	r3, [pc, #96]	; (80065a4 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 8006544:	681b      	ldr	r3, [r3, #0]
 8006546:	08db      	lsrs	r3, r3, #3
 8006548:	f003 0303 	and.w	r3, r3, #3
 800654c:	4a16      	ldr	r2, [pc, #88]	; (80065a8 <HAL_RCCEx_GetPeriphCLKFreq+0x26c>)
 800654e:	fa22 f303 	lsr.w	r3, r2, r3
 8006552:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006554:	e01e      	b.n	8006594 <HAL_RCCEx_GetPeriphCLKFreq+0x258>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8006556:	4b13      	ldr	r3, [pc, #76]	; (80065a4 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 8006558:	681b      	ldr	r3, [r3, #0]
 800655a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800655e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006562:	d106      	bne.n	8006572 <HAL_RCCEx_GetPeriphCLKFreq+0x236>
 8006564:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006566:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800656a:	d102      	bne.n	8006572 <HAL_RCCEx_GetPeriphCLKFreq+0x236>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 800656c:	4b0f      	ldr	r3, [pc, #60]	; (80065ac <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800656e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006570:	e010      	b.n	8006594 <HAL_RCCEx_GetPeriphCLKFreq+0x258>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8006572:	4b0c      	ldr	r3, [pc, #48]	; (80065a4 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 8006574:	681b      	ldr	r3, [r3, #0]
 8006576:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800657a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800657e:	d106      	bne.n	800658e <HAL_RCCEx_GetPeriphCLKFreq+0x252>
 8006580:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006582:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006586:	d102      	bne.n	800658e <HAL_RCCEx_GetPeriphCLKFreq+0x252>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 8006588:	4b09      	ldr	r3, [pc, #36]	; (80065b0 <HAL_RCCEx_GetPeriphCLKFreq+0x274>)
 800658a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800658c:	e002      	b.n	8006594 <HAL_RCCEx_GetPeriphCLKFreq+0x258>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 800658e:	2300      	movs	r3, #0
 8006590:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 8006592:	e2ee      	b.n	8006b72 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
 8006594:	e2ed      	b.n	8006b72 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8006596:	4b07      	ldr	r3, [pc, #28]	; (80065b4 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8006598:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800659a:	e2ea      	b.n	8006b72 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      default :
        {
          frequency = 0;
 800659c:	2300      	movs	r3, #0
 800659e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80065a0:	e2e7      	b.n	8006b72 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
 80065a2:	bf00      	nop
 80065a4:	58024400 	.word	0x58024400
 80065a8:	03d09000 	.word	0x03d09000
 80065ac:	003d0900 	.word	0x003d0900
 80065b0:	007a1200 	.word	0x007a1200
 80065b4:	00bb8000 	.word	0x00bb8000
        }
      }
    }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80065be:	f040 809c 	bne.w	80066fa <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
    {

      saiclocksource= __HAL_RCC_GET_SAI4B_SOURCE();
 80065c2:	4b9e      	ldr	r3, [pc, #632]	; (800683c <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 80065c4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80065c6:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 80065ca:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 80065cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80065ce:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80065d2:	d054      	beq.n	800667e <HAL_RCCEx_GetPeriphCLKFreq+0x342>
 80065d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80065d6:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80065da:	f200 808b 	bhi.w	80066f4 <HAL_RCCEx_GetPeriphCLKFreq+0x3b8>
 80065de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80065e0:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80065e4:	f000 8083 	beq.w	80066ee <HAL_RCCEx_GetPeriphCLKFreq+0x3b2>
 80065e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80065ea:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80065ee:	f200 8081 	bhi.w	80066f4 <HAL_RCCEx_GetPeriphCLKFreq+0x3b8>
 80065f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80065f4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80065f8:	d02f      	beq.n	800665a <HAL_RCCEx_GetPeriphCLKFreq+0x31e>
 80065fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80065fc:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006600:	d878      	bhi.n	80066f4 <HAL_RCCEx_GetPeriphCLKFreq+0x3b8>
 8006602:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006604:	2b00      	cmp	r3, #0
 8006606:	d004      	beq.n	8006612 <HAL_RCCEx_GetPeriphCLKFreq+0x2d6>
 8006608:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800660a:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800660e:	d012      	beq.n	8006636 <HAL_RCCEx_GetPeriphCLKFreq+0x2fa>
 8006610:	e070      	b.n	80066f4 <HAL_RCCEx_GetPeriphCLKFreq+0x3b8>
      {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8006612:	4b8a      	ldr	r3, [pc, #552]	; (800683c <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 8006614:	681b      	ldr	r3, [r3, #0]
 8006616:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800661a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800661e:	d107      	bne.n	8006630 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8006620:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006624:	4618      	mov	r0, r3
 8006626:	f000 fd6b 	bl	8007100 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800662a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800662c:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800662e:	e2a0      	b.n	8006b72 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 8006630:	2300      	movs	r3, #0
 8006632:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006634:	e29d      	b.n	8006b72 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8006636:	4b81      	ldr	r3, [pc, #516]	; (800683c <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 8006638:	681b      	ldr	r3, [r3, #0]
 800663a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800663e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006642:	d107      	bne.n	8006654 <HAL_RCCEx_GetPeriphCLKFreq+0x318>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006644:	f107 0318 	add.w	r3, r7, #24
 8006648:	4618      	mov	r0, r3
 800664a:	f000 fab1 	bl	8006bb0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800664e:	69bb      	ldr	r3, [r7, #24]
 8006650:	63fb      	str	r3, [r7, #60]	; 0x3c
          }
         else
         {
           frequency = 0;
         }
          break;
 8006652:	e28e      	b.n	8006b72 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 8006654:	2300      	movs	r3, #0
 8006656:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006658:	e28b      	b.n	8006b72 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800665a:	4b78      	ldr	r3, [pc, #480]	; (800683c <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 800665c:	681b      	ldr	r3, [r3, #0]
 800665e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006662:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006666:	d107      	bne.n	8006678 <HAL_RCCEx_GetPeriphCLKFreq+0x33c>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006668:	f107 030c 	add.w	r3, r7, #12
 800666c:	4618      	mov	r0, r3
 800666e:	f000 fbf3 	bl	8006e58 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8006672:	68fb      	ldr	r3, [r7, #12]
 8006674:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8006676:	e27c      	b.n	8006b72 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 8006678:	2300      	movs	r3, #0
 800667a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800667c:	e279      	b.n	8006b72 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 800667e:	4b6f      	ldr	r3, [pc, #444]	; (800683c <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 8006680:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006682:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8006686:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8006688:	4b6c      	ldr	r3, [pc, #432]	; (800683c <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 800668a:	681b      	ldr	r3, [r3, #0]
 800668c:	f003 0304 	and.w	r3, r3, #4
 8006690:	2b04      	cmp	r3, #4
 8006692:	d10c      	bne.n	80066ae <HAL_RCCEx_GetPeriphCLKFreq+0x372>
 8006694:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006696:	2b00      	cmp	r3, #0
 8006698:	d109      	bne.n	80066ae <HAL_RCCEx_GetPeriphCLKFreq+0x372>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800669a:	4b68      	ldr	r3, [pc, #416]	; (800683c <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 800669c:	681b      	ldr	r3, [r3, #0]
 800669e:	08db      	lsrs	r3, r3, #3
 80066a0:	f003 0303 	and.w	r3, r3, #3
 80066a4:	4a66      	ldr	r2, [pc, #408]	; (8006840 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 80066a6:	fa22 f303 	lsr.w	r3, r2, r3
 80066aa:	63fb      	str	r3, [r7, #60]	; 0x3c
 80066ac:	e01e      	b.n	80066ec <HAL_RCCEx_GetPeriphCLKFreq+0x3b0>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80066ae:	4b63      	ldr	r3, [pc, #396]	; (800683c <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 80066b0:	681b      	ldr	r3, [r3, #0]
 80066b2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80066b6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80066ba:	d106      	bne.n	80066ca <HAL_RCCEx_GetPeriphCLKFreq+0x38e>
 80066bc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80066be:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80066c2:	d102      	bne.n	80066ca <HAL_RCCEx_GetPeriphCLKFreq+0x38e>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 80066c4:	4b5f      	ldr	r3, [pc, #380]	; (8006844 <HAL_RCCEx_GetPeriphCLKFreq+0x508>)
 80066c6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80066c8:	e010      	b.n	80066ec <HAL_RCCEx_GetPeriphCLKFreq+0x3b0>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80066ca:	4b5c      	ldr	r3, [pc, #368]	; (800683c <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 80066cc:	681b      	ldr	r3, [r3, #0]
 80066ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80066d2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80066d6:	d106      	bne.n	80066e6 <HAL_RCCEx_GetPeriphCLKFreq+0x3aa>
 80066d8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80066da:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80066de:	d102      	bne.n	80066e6 <HAL_RCCEx_GetPeriphCLKFreq+0x3aa>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 80066e0:	4b59      	ldr	r3, [pc, #356]	; (8006848 <HAL_RCCEx_GetPeriphCLKFreq+0x50c>)
 80066e2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80066e4:	e002      	b.n	80066ec <HAL_RCCEx_GetPeriphCLKFreq+0x3b0>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 80066e6:	2300      	movs	r3, #0
 80066e8:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 80066ea:	e242      	b.n	8006b72 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
 80066ec:	e241      	b.n	8006b72 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 80066ee:	4b57      	ldr	r3, [pc, #348]	; (800684c <HAL_RCCEx_GetPeriphCLKFreq+0x510>)
 80066f0:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80066f2:	e23e      	b.n	8006b72 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      default :
        {
          frequency = 0;
 80066f4:	2300      	movs	r3, #0
 80066f6:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80066f8:	e23b      	b.n	8006b72 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      }
    }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006700:	f040 80a6 	bne.w	8006850 <HAL_RCCEx_GetPeriphCLKFreq+0x514>
    {
      /* Get SPI1/2/3 clock source */
      srcclk= __HAL_RCC_GET_SPI123_SOURCE();
 8006704:	4b4d      	ldr	r3, [pc, #308]	; (800683c <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 8006706:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006708:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 800670c:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 800670e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006710:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006714:	d054      	beq.n	80067c0 <HAL_RCCEx_GetPeriphCLKFreq+0x484>
 8006716:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006718:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800671c:	f200 808b 	bhi.w	8006836 <HAL_RCCEx_GetPeriphCLKFreq+0x4fa>
 8006720:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006722:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8006726:	f000 8083 	beq.w	8006830 <HAL_RCCEx_GetPeriphCLKFreq+0x4f4>
 800672a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800672c:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8006730:	f200 8081 	bhi.w	8006836 <HAL_RCCEx_GetPeriphCLKFreq+0x4fa>
 8006734:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006736:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800673a:	d02f      	beq.n	800679c <HAL_RCCEx_GetPeriphCLKFreq+0x460>
 800673c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800673e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006742:	d878      	bhi.n	8006836 <HAL_RCCEx_GetPeriphCLKFreq+0x4fa>
 8006744:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006746:	2b00      	cmp	r3, #0
 8006748:	d004      	beq.n	8006754 <HAL_RCCEx_GetPeriphCLKFreq+0x418>
 800674a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800674c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006750:	d012      	beq.n	8006778 <HAL_RCCEx_GetPeriphCLKFreq+0x43c>
 8006752:	e070      	b.n	8006836 <HAL_RCCEx_GetPeriphCLKFreq+0x4fa>
      {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8006754:	4b39      	ldr	r3, [pc, #228]	; (800683c <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 8006756:	681b      	ldr	r3, [r3, #0]
 8006758:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800675c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006760:	d107      	bne.n	8006772 <HAL_RCCEx_GetPeriphCLKFreq+0x436>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8006762:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006766:	4618      	mov	r0, r3
 8006768:	f000 fcca 	bl	8007100 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800676c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800676e:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8006770:	e1ff      	b.n	8006b72 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 8006772:	2300      	movs	r3, #0
 8006774:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006776:	e1fc      	b.n	8006b72 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8006778:	4b30      	ldr	r3, [pc, #192]	; (800683c <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 800677a:	681b      	ldr	r3, [r3, #0]
 800677c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006780:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006784:	d107      	bne.n	8006796 <HAL_RCCEx_GetPeriphCLKFreq+0x45a>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006786:	f107 0318 	add.w	r3, r7, #24
 800678a:	4618      	mov	r0, r3
 800678c:	f000 fa10 	bl	8006bb0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8006790:	69bb      	ldr	r3, [r7, #24]
 8006792:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8006794:	e1ed      	b.n	8006b72 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 8006796:	2300      	movs	r3, #0
 8006798:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800679a:	e1ea      	b.n	8006b72 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800679c:	4b27      	ldr	r3, [pc, #156]	; (800683c <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 800679e:	681b      	ldr	r3, [r3, #0]
 80067a0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80067a4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80067a8:	d107      	bne.n	80067ba <HAL_RCCEx_GetPeriphCLKFreq+0x47e>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80067aa:	f107 030c 	add.w	r3, r7, #12
 80067ae:	4618      	mov	r0, r3
 80067b0:	f000 fb52 	bl	8006e58 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 80067b4:	68fb      	ldr	r3, [r7, #12]
 80067b6:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 80067b8:	e1db      	b.n	8006b72 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 80067ba:	2300      	movs	r3, #0
 80067bc:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80067be:	e1d8      	b.n	8006b72 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 80067c0:	4b1e      	ldr	r3, [pc, #120]	; (800683c <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 80067c2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80067c4:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80067c8:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80067ca:	4b1c      	ldr	r3, [pc, #112]	; (800683c <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 80067cc:	681b      	ldr	r3, [r3, #0]
 80067ce:	f003 0304 	and.w	r3, r3, #4
 80067d2:	2b04      	cmp	r3, #4
 80067d4:	d10c      	bne.n	80067f0 <HAL_RCCEx_GetPeriphCLKFreq+0x4b4>
 80067d6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80067d8:	2b00      	cmp	r3, #0
 80067da:	d109      	bne.n	80067f0 <HAL_RCCEx_GetPeriphCLKFreq+0x4b4>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80067dc:	4b17      	ldr	r3, [pc, #92]	; (800683c <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 80067de:	681b      	ldr	r3, [r3, #0]
 80067e0:	08db      	lsrs	r3, r3, #3
 80067e2:	f003 0303 	and.w	r3, r3, #3
 80067e6:	4a16      	ldr	r2, [pc, #88]	; (8006840 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 80067e8:	fa22 f303 	lsr.w	r3, r2, r3
 80067ec:	63fb      	str	r3, [r7, #60]	; 0x3c
 80067ee:	e01e      	b.n	800682e <HAL_RCCEx_GetPeriphCLKFreq+0x4f2>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80067f0:	4b12      	ldr	r3, [pc, #72]	; (800683c <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 80067f2:	681b      	ldr	r3, [r3, #0]
 80067f4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80067f8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80067fc:	d106      	bne.n	800680c <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
 80067fe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006800:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006804:	d102      	bne.n	800680c <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 8006806:	4b0f      	ldr	r3, [pc, #60]	; (8006844 <HAL_RCCEx_GetPeriphCLKFreq+0x508>)
 8006808:	63fb      	str	r3, [r7, #60]	; 0x3c
 800680a:	e010      	b.n	800682e <HAL_RCCEx_GetPeriphCLKFreq+0x4f2>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800680c:	4b0b      	ldr	r3, [pc, #44]	; (800683c <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 800680e:	681b      	ldr	r3, [r3, #0]
 8006810:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006814:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006818:	d106      	bne.n	8006828 <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>
 800681a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800681c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006820:	d102      	bne.n	8006828 <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 8006822:	4b09      	ldr	r3, [pc, #36]	; (8006848 <HAL_RCCEx_GetPeriphCLKFreq+0x50c>)
 8006824:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006826:	e002      	b.n	800682e <HAL_RCCEx_GetPeriphCLKFreq+0x4f2>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 8006828:	2300      	movs	r3, #0
 800682a:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 800682c:	e1a1      	b.n	8006b72 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
 800682e:	e1a0      	b.n	8006b72 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8006830:	4b06      	ldr	r3, [pc, #24]	; (800684c <HAL_RCCEx_GetPeriphCLKFreq+0x510>)
 8006832:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006834:	e19d      	b.n	8006b72 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      default :
        {
          frequency = 0;
 8006836:	2300      	movs	r3, #0
 8006838:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800683a:	e19a      	b.n	8006b72 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
 800683c:	58024400 	.word	0x58024400
 8006840:	03d09000 	.word	0x03d09000
 8006844:	003d0900 	.word	0x003d0900
 8006848:	007a1200 	.word	0x007a1200
 800684c:	00bb8000 	.word	0x00bb8000
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8006856:	d173      	bne.n	8006940 <HAL_RCCEx_GetPeriphCLKFreq+0x604>
    {
      /* Get ADC clock source */
      srcclk= __HAL_RCC_GET_ADC_SOURCE();
 8006858:	4b9a      	ldr	r3, [pc, #616]	; (8006ac4 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 800685a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800685c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8006860:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8006862:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006864:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006868:	d02f      	beq.n	80068ca <HAL_RCCEx_GetPeriphCLKFreq+0x58e>
 800686a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800686c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006870:	d863      	bhi.n	800693a <HAL_RCCEx_GetPeriphCLKFreq+0x5fe>
 8006872:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006874:	2b00      	cmp	r3, #0
 8006876:	d004      	beq.n	8006882 <HAL_RCCEx_GetPeriphCLKFreq+0x546>
 8006878:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800687a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800687e:	d012      	beq.n	80068a6 <HAL_RCCEx_GetPeriphCLKFreq+0x56a>
 8006880:	e05b      	b.n	800693a <HAL_RCCEx_GetPeriphCLKFreq+0x5fe>
      {
      case RCC_ADCCLKSOURCE_PLL2:
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8006882:	4b90      	ldr	r3, [pc, #576]	; (8006ac4 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 8006884:	681b      	ldr	r3, [r3, #0]
 8006886:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800688a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800688e:	d107      	bne.n	80068a0 <HAL_RCCEx_GetPeriphCLKFreq+0x564>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006890:	f107 0318 	add.w	r3, r7, #24
 8006894:	4618      	mov	r0, r3
 8006896:	f000 f98b 	bl	8006bb0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800689a:	69bb      	ldr	r3, [r7, #24]
 800689c:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800689e:	e168      	b.n	8006b72 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 80068a0:	2300      	movs	r3, #0
 80068a2:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80068a4:	e165      	b.n	8006b72 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      case RCC_ADCCLKSOURCE_PLL3:
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80068a6:	4b87      	ldr	r3, [pc, #540]	; (8006ac4 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 80068a8:	681b      	ldr	r3, [r3, #0]
 80068aa:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80068ae:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80068b2:	d107      	bne.n	80068c4 <HAL_RCCEx_GetPeriphCLKFreq+0x588>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80068b4:	f107 030c 	add.w	r3, r7, #12
 80068b8:	4618      	mov	r0, r3
 80068ba:	f000 facd 	bl	8006e58 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 80068be:	697b      	ldr	r3, [r7, #20]
 80068c0:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 80068c2:	e156      	b.n	8006b72 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 80068c4:	2300      	movs	r3, #0
 80068c6:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80068c8:	e153      	b.n	8006b72 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      case RCC_ADCCLKSOURCE_CLKP:
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 80068ca:	4b7e      	ldr	r3, [pc, #504]	; (8006ac4 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 80068cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80068ce:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80068d2:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80068d4:	4b7b      	ldr	r3, [pc, #492]	; (8006ac4 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 80068d6:	681b      	ldr	r3, [r3, #0]
 80068d8:	f003 0304 	and.w	r3, r3, #4
 80068dc:	2b04      	cmp	r3, #4
 80068de:	d10c      	bne.n	80068fa <HAL_RCCEx_GetPeriphCLKFreq+0x5be>
 80068e0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80068e2:	2b00      	cmp	r3, #0
 80068e4:	d109      	bne.n	80068fa <HAL_RCCEx_GetPeriphCLKFreq+0x5be>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80068e6:	4b77      	ldr	r3, [pc, #476]	; (8006ac4 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 80068e8:	681b      	ldr	r3, [r3, #0]
 80068ea:	08db      	lsrs	r3, r3, #3
 80068ec:	f003 0303 	and.w	r3, r3, #3
 80068f0:	4a75      	ldr	r2, [pc, #468]	; (8006ac8 <HAL_RCCEx_GetPeriphCLKFreq+0x78c>)
 80068f2:	fa22 f303 	lsr.w	r3, r2, r3
 80068f6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80068f8:	e01e      	b.n	8006938 <HAL_RCCEx_GetPeriphCLKFreq+0x5fc>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80068fa:	4b72      	ldr	r3, [pc, #456]	; (8006ac4 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 80068fc:	681b      	ldr	r3, [r3, #0]
 80068fe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006902:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006906:	d106      	bne.n	8006916 <HAL_RCCEx_GetPeriphCLKFreq+0x5da>
 8006908:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800690a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800690e:	d102      	bne.n	8006916 <HAL_RCCEx_GetPeriphCLKFreq+0x5da>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 8006910:	4b6e      	ldr	r3, [pc, #440]	; (8006acc <HAL_RCCEx_GetPeriphCLKFreq+0x790>)
 8006912:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006914:	e010      	b.n	8006938 <HAL_RCCEx_GetPeriphCLKFreq+0x5fc>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8006916:	4b6b      	ldr	r3, [pc, #428]	; (8006ac4 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 8006918:	681b      	ldr	r3, [r3, #0]
 800691a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800691e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006922:	d106      	bne.n	8006932 <HAL_RCCEx_GetPeriphCLKFreq+0x5f6>
 8006924:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006926:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800692a:	d102      	bne.n	8006932 <HAL_RCCEx_GetPeriphCLKFreq+0x5f6>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 800692c:	4b68      	ldr	r3, [pc, #416]	; (8006ad0 <HAL_RCCEx_GetPeriphCLKFreq+0x794>)
 800692e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006930:	e002      	b.n	8006938 <HAL_RCCEx_GetPeriphCLKFreq+0x5fc>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 8006932:	2300      	movs	r3, #0
 8006934:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 8006936:	e11c      	b.n	8006b72 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
 8006938:	e11b      	b.n	8006b72 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      default :
        {
          frequency = 0;
 800693a:	2300      	movs	r3, #0
 800693c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800693e:	e118      	b.n	8006b72 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006946:	d133      	bne.n	80069b0 <HAL_RCCEx_GetPeriphCLKFreq+0x674>
    {
      /* Get SDMMC clock source */
      srcclk= __HAL_RCC_GET_SDMMC_SOURCE();
 8006948:	4b5e      	ldr	r3, [pc, #376]	; (8006ac4 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 800694a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800694c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006950:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8006952:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006954:	2b00      	cmp	r3, #0
 8006956:	d004      	beq.n	8006962 <HAL_RCCEx_GetPeriphCLKFreq+0x626>
 8006958:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800695a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800695e:	d012      	beq.n	8006986 <HAL_RCCEx_GetPeriphCLKFreq+0x64a>
 8006960:	e023      	b.n	80069aa <HAL_RCCEx_GetPeriphCLKFreq+0x66e>
      {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8006962:	4b58      	ldr	r3, [pc, #352]	; (8006ac4 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 8006964:	681b      	ldr	r3, [r3, #0]
 8006966:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800696a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800696e:	d107      	bne.n	8006980 <HAL_RCCEx_GetPeriphCLKFreq+0x644>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8006970:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006974:	4618      	mov	r0, r3
 8006976:	f000 fbc3 	bl	8007100 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800697a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800697c:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 800697e:	e0f8      	b.n	8006b72 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
          frequency = 0;
 8006980:	2300      	movs	r3, #0
 8006982:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006984:	e0f5      	b.n	8006b72 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8006986:	4b4f      	ldr	r3, [pc, #316]	; (8006ac4 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 8006988:	681b      	ldr	r3, [r3, #0]
 800698a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800698e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006992:	d107      	bne.n	80069a4 <HAL_RCCEx_GetPeriphCLKFreq+0x668>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006994:	f107 0318 	add.w	r3, r7, #24
 8006998:	4618      	mov	r0, r3
 800699a:	f000 f909 	bl	8006bb0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 800699e:	6a3b      	ldr	r3, [r7, #32]
 80069a0:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 80069a2:	e0e6      	b.n	8006b72 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
          frequency = 0;
 80069a4:	2300      	movs	r3, #0
 80069a6:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80069a8:	e0e3      	b.n	8006b72 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      default :
        {
          frequency = 0;
 80069aa:	2300      	movs	r3, #0
 80069ac:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80069ae:	e0e0      	b.n	8006b72 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80069b6:	f040 808d 	bne.w	8006ad4 <HAL_RCCEx_GetPeriphCLKFreq+0x798>
    {
      /* Get SPI6 clock source */
      srcclk= __HAL_RCC_GET_SPI6_SOURCE();
 80069ba:	4b42      	ldr	r3, [pc, #264]	; (8006ac4 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 80069bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80069be:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
 80069c2:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 80069c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80069c6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80069ca:	d06b      	beq.n	8006aa4 <HAL_RCCEx_GetPeriphCLKFreq+0x768>
 80069cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80069ce:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80069d2:	d874      	bhi.n	8006abe <HAL_RCCEx_GetPeriphCLKFreq+0x782>
 80069d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80069d6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80069da:	d056      	beq.n	8006a8a <HAL_RCCEx_GetPeriphCLKFreq+0x74e>
 80069dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80069de:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80069e2:	d86c      	bhi.n	8006abe <HAL_RCCEx_GetPeriphCLKFreq+0x782>
 80069e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80069e6:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80069ea:	d03b      	beq.n	8006a64 <HAL_RCCEx_GetPeriphCLKFreq+0x728>
 80069ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80069ee:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80069f2:	d864      	bhi.n	8006abe <HAL_RCCEx_GetPeriphCLKFreq+0x782>
 80069f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80069f6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80069fa:	d021      	beq.n	8006a40 <HAL_RCCEx_GetPeriphCLKFreq+0x704>
 80069fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80069fe:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006a02:	d85c      	bhi.n	8006abe <HAL_RCCEx_GetPeriphCLKFreq+0x782>
 8006a04:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a06:	2b00      	cmp	r3, #0
 8006a08:	d004      	beq.n	8006a14 <HAL_RCCEx_GetPeriphCLKFreq+0x6d8>
 8006a0a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a0c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006a10:	d004      	beq.n	8006a1c <HAL_RCCEx_GetPeriphCLKFreq+0x6e0>
 8006a12:	e054      	b.n	8006abe <HAL_RCCEx_GetPeriphCLKFreq+0x782>
      {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
        {
          frequency = HAL_RCCEx_GetD3PCLK1Freq();
 8006a14:	f000 f8b6 	bl	8006b84 <HAL_RCCEx_GetD3PCLK1Freq>
 8006a18:	63f8      	str	r0, [r7, #60]	; 0x3c
          break;
 8006a1a:	e0aa      	b.n	8006b72 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8006a1c:	4b29      	ldr	r3, [pc, #164]	; (8006ac4 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 8006a1e:	681b      	ldr	r3, [r3, #0]
 8006a20:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006a24:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006a28:	d107      	bne.n	8006a3a <HAL_RCCEx_GetPeriphCLKFreq+0x6fe>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006a2a:	f107 0318 	add.w	r3, r7, #24
 8006a2e:	4618      	mov	r0, r3
 8006a30:	f000 f8be 	bl	8006bb0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8006a34:	69fb      	ldr	r3, [r7, #28]
 8006a36:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8006a38:	e09b      	b.n	8006b72 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
          frequency = 0;
 8006a3a:	2300      	movs	r3, #0
 8006a3c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006a3e:	e098      	b.n	8006b72 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8006a40:	4b20      	ldr	r3, [pc, #128]	; (8006ac4 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 8006a42:	681b      	ldr	r3, [r3, #0]
 8006a44:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006a48:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006a4c:	d107      	bne.n	8006a5e <HAL_RCCEx_GetPeriphCLKFreq+0x722>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006a4e:	f107 030c 	add.w	r3, r7, #12
 8006a52:	4618      	mov	r0, r3
 8006a54:	f000 fa00 	bl	8006e58 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8006a58:	693b      	ldr	r3, [r7, #16]
 8006a5a:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8006a5c:	e089      	b.n	8006b72 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
          frequency = 0;
 8006a5e:	2300      	movs	r3, #0
 8006a60:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006a62:	e086      	b.n	8006b72 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8006a64:	4b17      	ldr	r3, [pc, #92]	; (8006ac4 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 8006a66:	681b      	ldr	r3, [r3, #0]
 8006a68:	f003 0304 	and.w	r3, r3, #4
 8006a6c:	2b04      	cmp	r3, #4
 8006a6e:	d109      	bne.n	8006a84 <HAL_RCCEx_GetPeriphCLKFreq+0x748>
         {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8006a70:	4b14      	ldr	r3, [pc, #80]	; (8006ac4 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 8006a72:	681b      	ldr	r3, [r3, #0]
 8006a74:	08db      	lsrs	r3, r3, #3
 8006a76:	f003 0303 	and.w	r3, r3, #3
 8006a7a:	4a13      	ldr	r2, [pc, #76]	; (8006ac8 <HAL_RCCEx_GetPeriphCLKFreq+0x78c>)
 8006a7c:	fa22 f303 	lsr.w	r3, r2, r3
 8006a80:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8006a82:	e076      	b.n	8006b72 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
          frequency = 0;
 8006a84:	2300      	movs	r3, #0
 8006a86:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006a88:	e073      	b.n	8006b72 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 8006a8a:	4b0e      	ldr	r3, [pc, #56]	; (8006ac4 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 8006a8c:	681b      	ldr	r3, [r3, #0]
 8006a8e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006a92:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006a96:	d102      	bne.n	8006a9e <HAL_RCCEx_GetPeriphCLKFreq+0x762>
         {
          frequency = CSI_VALUE;
 8006a98:	4b0c      	ldr	r3, [pc, #48]	; (8006acc <HAL_RCCEx_GetPeriphCLKFreq+0x790>)
 8006a9a:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8006a9c:	e069      	b.n	8006b72 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 8006a9e:	2300      	movs	r3, #0
 8006aa0:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006aa2:	e066      	b.n	8006b72 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8006aa4:	4b07      	ldr	r3, [pc, #28]	; (8006ac4 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 8006aa6:	681b      	ldr	r3, [r3, #0]
 8006aa8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006aac:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006ab0:	d102      	bne.n	8006ab8 <HAL_RCCEx_GetPeriphCLKFreq+0x77c>
         {
          frequency = HSE_VALUE;
 8006ab2:	4b07      	ldr	r3, [pc, #28]	; (8006ad0 <HAL_RCCEx_GetPeriphCLKFreq+0x794>)
 8006ab4:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8006ab6:	e05c      	b.n	8006b72 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
          frequency = 0;
 8006ab8:	2300      	movs	r3, #0
 8006aba:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006abc:	e059      	b.n	8006b72 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
          break;
        }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
        {
          frequency = 0;
 8006abe:	2300      	movs	r3, #0
 8006ac0:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006ac2:	e056      	b.n	8006b72 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
 8006ac4:	58024400 	.word	0x58024400
 8006ac8:	03d09000 	.word	0x03d09000
 8006acc:	003d0900 	.word	0x003d0900
 8006ad0:	007a1200 	.word	0x007a1200
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006ada:	d148      	bne.n	8006b6e <HAL_RCCEx_GetPeriphCLKFreq+0x832>
    {
      /* Get FDCAN clock source */
      srcclk= __HAL_RCC_GET_FDCAN_SOURCE();
 8006adc:	4b27      	ldr	r3, [pc, #156]	; (8006b7c <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8006ade:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006ae0:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8006ae4:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8006ae6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ae8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006aec:	d02a      	beq.n	8006b44 <HAL_RCCEx_GetPeriphCLKFreq+0x808>
 8006aee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006af0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006af4:	d838      	bhi.n	8006b68 <HAL_RCCEx_GetPeriphCLKFreq+0x82c>
 8006af6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006af8:	2b00      	cmp	r3, #0
 8006afa:	d004      	beq.n	8006b06 <HAL_RCCEx_GetPeriphCLKFreq+0x7ca>
 8006afc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006afe:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006b02:	d00d      	beq.n	8006b20 <HAL_RCCEx_GetPeriphCLKFreq+0x7e4>
 8006b04:	e030      	b.n	8006b68 <HAL_RCCEx_GetPeriphCLKFreq+0x82c>
      {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8006b06:	4b1d      	ldr	r3, [pc, #116]	; (8006b7c <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8006b08:	681b      	ldr	r3, [r3, #0]
 8006b0a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006b0e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006b12:	d102      	bne.n	8006b1a <HAL_RCCEx_GetPeriphCLKFreq+0x7de>
         {
          frequency = HSE_VALUE;
 8006b14:	4b1a      	ldr	r3, [pc, #104]	; (8006b80 <HAL_RCCEx_GetPeriphCLKFreq+0x844>)
 8006b16:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8006b18:	e02b      	b.n	8006b72 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
          frequency = 0;
 8006b1a:	2300      	movs	r3, #0
 8006b1c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006b1e:	e028      	b.n	8006b72 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8006b20:	4b16      	ldr	r3, [pc, #88]	; (8006b7c <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8006b22:	681b      	ldr	r3, [r3, #0]
 8006b24:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006b28:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006b2c:	d107      	bne.n	8006b3e <HAL_RCCEx_GetPeriphCLKFreq+0x802>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8006b2e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006b32:	4618      	mov	r0, r3
 8006b34:	f000 fae4 	bl	8007100 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8006b38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b3a:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8006b3c:	e019      	b.n	8006b72 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
          frequency = 0;
 8006b3e:	2300      	movs	r3, #0
 8006b40:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006b42:	e016      	b.n	8006b72 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8006b44:	4b0d      	ldr	r3, [pc, #52]	; (8006b7c <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8006b46:	681b      	ldr	r3, [r3, #0]
 8006b48:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006b4c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006b50:	d107      	bne.n	8006b62 <HAL_RCCEx_GetPeriphCLKFreq+0x826>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006b52:	f107 0318 	add.w	r3, r7, #24
 8006b56:	4618      	mov	r0, r3
 8006b58:	f000 f82a 	bl	8006bb0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8006b5c:	69fb      	ldr	r3, [r7, #28]
 8006b5e:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8006b60:	e007      	b.n	8006b72 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
          frequency = 0;
 8006b62:	2300      	movs	r3, #0
 8006b64:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006b66:	e004      	b.n	8006b72 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      default :
        {
          frequency = 0;
 8006b68:	2300      	movs	r3, #0
 8006b6a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006b6c:	e001      	b.n	8006b72 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      }
    }
  else
    {
      frequency = 0;
 8006b6e:	2300      	movs	r3, #0
 8006b70:	63fb      	str	r3, [r7, #60]	; 0x3c
    }

  return frequency;
 8006b72:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8006b74:	4618      	mov	r0, r3
 8006b76:	3740      	adds	r7, #64	; 0x40
 8006b78:	46bd      	mov	sp, r7
 8006b7a:	bd80      	pop	{r7, pc}
 8006b7c:	58024400 	.word	0x58024400
 8006b80:	007a1200 	.word	0x007a1200

08006b84 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8006b84:	b580      	push	{r7, lr}
 8006b86:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8006b88:	f7fe fc40 	bl	800540c <HAL_RCC_GetHCLKFreq>
 8006b8c:	4602      	mov	r2, r0
 8006b8e:	4b06      	ldr	r3, [pc, #24]	; (8006ba8 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8006b90:	6a1b      	ldr	r3, [r3, #32]
 8006b92:	091b      	lsrs	r3, r3, #4
 8006b94:	f003 0307 	and.w	r3, r3, #7
 8006b98:	4904      	ldr	r1, [pc, #16]	; (8006bac <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8006b9a:	5ccb      	ldrb	r3, [r1, r3]
 8006b9c:	f003 031f 	and.w	r3, r3, #31
 8006ba0:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8006ba4:	4618      	mov	r0, r3
 8006ba6:	bd80      	pop	{r7, pc}
 8006ba8:	58024400 	.word	0x58024400
 8006bac:	08012490 	.word	0x08012490

08006bb0 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 8006bb0:	b480      	push	{r7}
 8006bb2:	b089      	sub	sp, #36	; 0x24
 8006bb4:	af00      	add	r7, sp, #0
 8006bb6:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8006bb8:	4ba1      	ldr	r3, [pc, #644]	; (8006e40 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006bba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006bbc:	f003 0303 	and.w	r3, r3, #3
 8006bc0:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 8006bc2:	4b9f      	ldr	r3, [pc, #636]	; (8006e40 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006bc4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006bc6:	0b1b      	lsrs	r3, r3, #12
 8006bc8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006bcc:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8006bce:	4b9c      	ldr	r3, [pc, #624]	; (8006e40 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006bd0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006bd2:	091b      	lsrs	r3, r3, #4
 8006bd4:	f003 0301 	and.w	r3, r3, #1
 8006bd8:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 8006bda:	4b99      	ldr	r3, [pc, #612]	; (8006e40 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006bdc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006bde:	08db      	lsrs	r3, r3, #3
 8006be0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8006be4:	693a      	ldr	r2, [r7, #16]
 8006be6:	fb02 f303 	mul.w	r3, r2, r3
 8006bea:	ee07 3a90 	vmov	s15, r3
 8006bee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006bf2:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8006bf6:	697b      	ldr	r3, [r7, #20]
 8006bf8:	2b00      	cmp	r3, #0
 8006bfa:	f000 8111 	beq.w	8006e20 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8006bfe:	69bb      	ldr	r3, [r7, #24]
 8006c00:	2b02      	cmp	r3, #2
 8006c02:	f000 8083 	beq.w	8006d0c <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8006c06:	69bb      	ldr	r3, [r7, #24]
 8006c08:	2b02      	cmp	r3, #2
 8006c0a:	f200 80a1 	bhi.w	8006d50 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8006c0e:	69bb      	ldr	r3, [r7, #24]
 8006c10:	2b00      	cmp	r3, #0
 8006c12:	d003      	beq.n	8006c1c <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8006c14:	69bb      	ldr	r3, [r7, #24]
 8006c16:	2b01      	cmp	r3, #1
 8006c18:	d056      	beq.n	8006cc8 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8006c1a:	e099      	b.n	8006d50 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006c1c:	4b88      	ldr	r3, [pc, #544]	; (8006e40 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006c1e:	681b      	ldr	r3, [r3, #0]
 8006c20:	f003 0320 	and.w	r3, r3, #32
 8006c24:	2b00      	cmp	r3, #0
 8006c26:	d02d      	beq.n	8006c84 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8006c28:	4b85      	ldr	r3, [pc, #532]	; (8006e40 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006c2a:	681b      	ldr	r3, [r3, #0]
 8006c2c:	08db      	lsrs	r3, r3, #3
 8006c2e:	f003 0303 	and.w	r3, r3, #3
 8006c32:	4a84      	ldr	r2, [pc, #528]	; (8006e44 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8006c34:	fa22 f303 	lsr.w	r3, r2, r3
 8006c38:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8006c3a:	68bb      	ldr	r3, [r7, #8]
 8006c3c:	ee07 3a90 	vmov	s15, r3
 8006c40:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006c44:	697b      	ldr	r3, [r7, #20]
 8006c46:	ee07 3a90 	vmov	s15, r3
 8006c4a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006c4e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006c52:	4b7b      	ldr	r3, [pc, #492]	; (8006e40 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006c54:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c56:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006c5a:	ee07 3a90 	vmov	s15, r3
 8006c5e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006c62:	ed97 6a03 	vldr	s12, [r7, #12]
 8006c66:	eddf 5a78 	vldr	s11, [pc, #480]	; 8006e48 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8006c6a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006c6e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006c72:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006c76:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006c7a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006c7e:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8006c82:	e087      	b.n	8006d94 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8006c84:	697b      	ldr	r3, [r7, #20]
 8006c86:	ee07 3a90 	vmov	s15, r3
 8006c8a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006c8e:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8006e4c <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8006c92:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006c96:	4b6a      	ldr	r3, [pc, #424]	; (8006e40 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006c98:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c9a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006c9e:	ee07 3a90 	vmov	s15, r3
 8006ca2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006ca6:	ed97 6a03 	vldr	s12, [r7, #12]
 8006caa:	eddf 5a67 	vldr	s11, [pc, #412]	; 8006e48 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8006cae:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006cb2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006cb6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006cba:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006cbe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006cc2:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8006cc6:	e065      	b.n	8006d94 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8006cc8:	697b      	ldr	r3, [r7, #20]
 8006cca:	ee07 3a90 	vmov	s15, r3
 8006cce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006cd2:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8006e50 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8006cd6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006cda:	4b59      	ldr	r3, [pc, #356]	; (8006e40 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006cdc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006cde:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006ce2:	ee07 3a90 	vmov	s15, r3
 8006ce6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006cea:	ed97 6a03 	vldr	s12, [r7, #12]
 8006cee:	eddf 5a56 	vldr	s11, [pc, #344]	; 8006e48 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8006cf2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006cf6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006cfa:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006cfe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006d02:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006d06:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8006d0a:	e043      	b.n	8006d94 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8006d0c:	697b      	ldr	r3, [r7, #20]
 8006d0e:	ee07 3a90 	vmov	s15, r3
 8006d12:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006d16:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8006e54 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8006d1a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006d1e:	4b48      	ldr	r3, [pc, #288]	; (8006e40 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006d20:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006d22:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006d26:	ee07 3a90 	vmov	s15, r3
 8006d2a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006d2e:	ed97 6a03 	vldr	s12, [r7, #12]
 8006d32:	eddf 5a45 	vldr	s11, [pc, #276]	; 8006e48 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8006d36:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006d3a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006d3e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006d42:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006d46:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006d4a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8006d4e:	e021      	b.n	8006d94 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8006d50:	697b      	ldr	r3, [r7, #20]
 8006d52:	ee07 3a90 	vmov	s15, r3
 8006d56:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006d5a:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8006e50 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8006d5e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006d62:	4b37      	ldr	r3, [pc, #220]	; (8006e40 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006d64:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006d66:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006d6a:	ee07 3a90 	vmov	s15, r3
 8006d6e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006d72:	ed97 6a03 	vldr	s12, [r7, #12]
 8006d76:	eddf 5a34 	vldr	s11, [pc, #208]	; 8006e48 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8006d7a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006d7e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006d82:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006d86:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006d8a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006d8e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8006d92:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 8006d94:	4b2a      	ldr	r3, [pc, #168]	; (8006e40 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006d96:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006d98:	0a5b      	lsrs	r3, r3, #9
 8006d9a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006d9e:	ee07 3a90 	vmov	s15, r3
 8006da2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006da6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006daa:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006dae:	edd7 6a07 	vldr	s13, [r7, #28]
 8006db2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006db6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006dba:	ee17 2a90 	vmov	r2, s15
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 8006dc2:	4b1f      	ldr	r3, [pc, #124]	; (8006e40 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006dc4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006dc6:	0c1b      	lsrs	r3, r3, #16
 8006dc8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006dcc:	ee07 3a90 	vmov	s15, r3
 8006dd0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006dd4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006dd8:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006ddc:	edd7 6a07 	vldr	s13, [r7, #28]
 8006de0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006de4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006de8:	ee17 2a90 	vmov	r2, s15
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 8006df0:	4b13      	ldr	r3, [pc, #76]	; (8006e40 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006df2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006df4:	0e1b      	lsrs	r3, r3, #24
 8006df6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006dfa:	ee07 3a90 	vmov	s15, r3
 8006dfe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006e02:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006e06:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006e0a:	edd7 6a07 	vldr	s13, [r7, #28]
 8006e0e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006e12:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006e16:	ee17 2a90 	vmov	r2, s15
 8006e1a:	687b      	ldr	r3, [r7, #4]
 8006e1c:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8006e1e:	e008      	b.n	8006e32 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	2200      	movs	r2, #0
 8006e24:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	2200      	movs	r2, #0
 8006e2a:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	2200      	movs	r2, #0
 8006e30:	609a      	str	r2, [r3, #8]
}
 8006e32:	bf00      	nop
 8006e34:	3724      	adds	r7, #36	; 0x24
 8006e36:	46bd      	mov	sp, r7
 8006e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e3c:	4770      	bx	lr
 8006e3e:	bf00      	nop
 8006e40:	58024400 	.word	0x58024400
 8006e44:	03d09000 	.word	0x03d09000
 8006e48:	46000000 	.word	0x46000000
 8006e4c:	4c742400 	.word	0x4c742400
 8006e50:	4a742400 	.word	0x4a742400
 8006e54:	4af42400 	.word	0x4af42400

08006e58 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 8006e58:	b480      	push	{r7}
 8006e5a:	b089      	sub	sp, #36	; 0x24
 8006e5c:	af00      	add	r7, sp, #0
 8006e5e:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8006e60:	4ba1      	ldr	r3, [pc, #644]	; (80070e8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006e62:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006e64:	f003 0303 	and.w	r3, r3, #3
 8006e68:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 8006e6a:	4b9f      	ldr	r3, [pc, #636]	; (80070e8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006e6c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006e6e:	0d1b      	lsrs	r3, r3, #20
 8006e70:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006e74:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8006e76:	4b9c      	ldr	r3, [pc, #624]	; (80070e8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006e78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e7a:	0a1b      	lsrs	r3, r3, #8
 8006e7c:	f003 0301 	and.w	r3, r3, #1
 8006e80:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 8006e82:	4b99      	ldr	r3, [pc, #612]	; (80070e8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006e84:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006e86:	08db      	lsrs	r3, r3, #3
 8006e88:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8006e8c:	693a      	ldr	r2, [r7, #16]
 8006e8e:	fb02 f303 	mul.w	r3, r2, r3
 8006e92:	ee07 3a90 	vmov	s15, r3
 8006e96:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006e9a:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8006e9e:	697b      	ldr	r3, [r7, #20]
 8006ea0:	2b00      	cmp	r3, #0
 8006ea2:	f000 8111 	beq.w	80070c8 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8006ea6:	69bb      	ldr	r3, [r7, #24]
 8006ea8:	2b02      	cmp	r3, #2
 8006eaa:	f000 8083 	beq.w	8006fb4 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8006eae:	69bb      	ldr	r3, [r7, #24]
 8006eb0:	2b02      	cmp	r3, #2
 8006eb2:	f200 80a1 	bhi.w	8006ff8 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8006eb6:	69bb      	ldr	r3, [r7, #24]
 8006eb8:	2b00      	cmp	r3, #0
 8006eba:	d003      	beq.n	8006ec4 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8006ebc:	69bb      	ldr	r3, [r7, #24]
 8006ebe:	2b01      	cmp	r3, #1
 8006ec0:	d056      	beq.n	8006f70 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8006ec2:	e099      	b.n	8006ff8 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006ec4:	4b88      	ldr	r3, [pc, #544]	; (80070e8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006ec6:	681b      	ldr	r3, [r3, #0]
 8006ec8:	f003 0320 	and.w	r3, r3, #32
 8006ecc:	2b00      	cmp	r3, #0
 8006ece:	d02d      	beq.n	8006f2c <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8006ed0:	4b85      	ldr	r3, [pc, #532]	; (80070e8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006ed2:	681b      	ldr	r3, [r3, #0]
 8006ed4:	08db      	lsrs	r3, r3, #3
 8006ed6:	f003 0303 	and.w	r3, r3, #3
 8006eda:	4a84      	ldr	r2, [pc, #528]	; (80070ec <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8006edc:	fa22 f303 	lsr.w	r3, r2, r3
 8006ee0:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8006ee2:	68bb      	ldr	r3, [r7, #8]
 8006ee4:	ee07 3a90 	vmov	s15, r3
 8006ee8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006eec:	697b      	ldr	r3, [r7, #20]
 8006eee:	ee07 3a90 	vmov	s15, r3
 8006ef2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006ef6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006efa:	4b7b      	ldr	r3, [pc, #492]	; (80070e8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006efc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006efe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006f02:	ee07 3a90 	vmov	s15, r3
 8006f06:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006f0a:	ed97 6a03 	vldr	s12, [r7, #12]
 8006f0e:	eddf 5a78 	vldr	s11, [pc, #480]	; 80070f0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8006f12:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006f16:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006f1a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006f1e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006f22:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006f26:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8006f2a:	e087      	b.n	800703c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8006f2c:	697b      	ldr	r3, [r7, #20]
 8006f2e:	ee07 3a90 	vmov	s15, r3
 8006f32:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006f36:	eddf 6a6f 	vldr	s13, [pc, #444]	; 80070f4 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8006f3a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006f3e:	4b6a      	ldr	r3, [pc, #424]	; (80070e8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006f40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f42:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006f46:	ee07 3a90 	vmov	s15, r3
 8006f4a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006f4e:	ed97 6a03 	vldr	s12, [r7, #12]
 8006f52:	eddf 5a67 	vldr	s11, [pc, #412]	; 80070f0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8006f56:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006f5a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006f5e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006f62:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006f66:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006f6a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8006f6e:	e065      	b.n	800703c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8006f70:	697b      	ldr	r3, [r7, #20]
 8006f72:	ee07 3a90 	vmov	s15, r3
 8006f76:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006f7a:	eddf 6a5f 	vldr	s13, [pc, #380]	; 80070f8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8006f7e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006f82:	4b59      	ldr	r3, [pc, #356]	; (80070e8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006f84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f86:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006f8a:	ee07 3a90 	vmov	s15, r3
 8006f8e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006f92:	ed97 6a03 	vldr	s12, [r7, #12]
 8006f96:	eddf 5a56 	vldr	s11, [pc, #344]	; 80070f0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8006f9a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006f9e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006fa2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006fa6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006faa:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006fae:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8006fb2:	e043      	b.n	800703c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8006fb4:	697b      	ldr	r3, [r7, #20]
 8006fb6:	ee07 3a90 	vmov	s15, r3
 8006fba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006fbe:	eddf 6a4f 	vldr	s13, [pc, #316]	; 80070fc <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8006fc2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006fc6:	4b48      	ldr	r3, [pc, #288]	; (80070e8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006fc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006fca:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006fce:	ee07 3a90 	vmov	s15, r3
 8006fd2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006fd6:	ed97 6a03 	vldr	s12, [r7, #12]
 8006fda:	eddf 5a45 	vldr	s11, [pc, #276]	; 80070f0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8006fde:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006fe2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006fe6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006fea:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006fee:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006ff2:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8006ff6:	e021      	b.n	800703c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8006ff8:	697b      	ldr	r3, [r7, #20]
 8006ffa:	ee07 3a90 	vmov	s15, r3
 8006ffe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007002:	eddf 6a3d 	vldr	s13, [pc, #244]	; 80070f8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8007006:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800700a:	4b37      	ldr	r3, [pc, #220]	; (80070e8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800700c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800700e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007012:	ee07 3a90 	vmov	s15, r3
 8007016:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800701a:	ed97 6a03 	vldr	s12, [r7, #12]
 800701e:	eddf 5a34 	vldr	s11, [pc, #208]	; 80070f0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8007022:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007026:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800702a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800702e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007032:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007036:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800703a:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 800703c:	4b2a      	ldr	r3, [pc, #168]	; (80070e8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800703e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007040:	0a5b      	lsrs	r3, r3, #9
 8007042:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007046:	ee07 3a90 	vmov	s15, r3
 800704a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800704e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007052:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007056:	edd7 6a07 	vldr	s13, [r7, #28]
 800705a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800705e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007062:	ee17 2a90 	vmov	r2, s15
 8007066:	687b      	ldr	r3, [r7, #4]
 8007068:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 800706a:	4b1f      	ldr	r3, [pc, #124]	; (80070e8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800706c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800706e:	0c1b      	lsrs	r3, r3, #16
 8007070:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007074:	ee07 3a90 	vmov	s15, r3
 8007078:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800707c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007080:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007084:	edd7 6a07 	vldr	s13, [r7, #28]
 8007088:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800708c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007090:	ee17 2a90 	vmov	r2, s15
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 8007098:	4b13      	ldr	r3, [pc, #76]	; (80070e8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800709a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800709c:	0e1b      	lsrs	r3, r3, #24
 800709e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80070a2:	ee07 3a90 	vmov	s15, r3
 80070a6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80070aa:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80070ae:	ee37 7a87 	vadd.f32	s14, s15, s14
 80070b2:	edd7 6a07 	vldr	s13, [r7, #28]
 80070b6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80070ba:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80070be:	ee17 2a90 	vmov	r2, s15
 80070c2:	687b      	ldr	r3, [r7, #4]
 80070c4:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 80070c6:	e008      	b.n	80070da <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	2200      	movs	r2, #0
 80070cc:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 80070ce:	687b      	ldr	r3, [r7, #4]
 80070d0:	2200      	movs	r2, #0
 80070d2:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	2200      	movs	r2, #0
 80070d8:	609a      	str	r2, [r3, #8]
}
 80070da:	bf00      	nop
 80070dc:	3724      	adds	r7, #36	; 0x24
 80070de:	46bd      	mov	sp, r7
 80070e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070e4:	4770      	bx	lr
 80070e6:	bf00      	nop
 80070e8:	58024400 	.word	0x58024400
 80070ec:	03d09000 	.word	0x03d09000
 80070f0:	46000000 	.word	0x46000000
 80070f4:	4c742400 	.word	0x4c742400
 80070f8:	4a742400 	.word	0x4a742400
 80070fc:	4af42400 	.word	0x4af42400

08007100 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef* PLL1_Clocks)
{
 8007100:	b480      	push	{r7}
 8007102:	b089      	sub	sp, #36	; 0x24
 8007104:	af00      	add	r7, sp, #0
 8007106:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8007108:	4ba0      	ldr	r3, [pc, #640]	; (800738c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800710a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800710c:	f003 0303 	and.w	r3, r3, #3
 8007110:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4);
 8007112:	4b9e      	ldr	r3, [pc, #632]	; (800738c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007114:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007116:	091b      	lsrs	r3, r3, #4
 8007118:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800711c:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 800711e:	4b9b      	ldr	r3, [pc, #620]	; (800738c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007120:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007122:	f003 0301 	and.w	r3, r3, #1
 8007126:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8007128:	4b98      	ldr	r3, [pc, #608]	; (800738c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800712a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800712c:	08db      	lsrs	r3, r3, #3
 800712e:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8007132:	693a      	ldr	r2, [r7, #16]
 8007134:	fb02 f303 	mul.w	r3, r2, r3
 8007138:	ee07 3a90 	vmov	s15, r3
 800713c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007140:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 8007144:	697b      	ldr	r3, [r7, #20]
 8007146:	2b00      	cmp	r3, #0
 8007148:	f000 8111 	beq.w	800736e <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 800714c:	69bb      	ldr	r3, [r7, #24]
 800714e:	2b02      	cmp	r3, #2
 8007150:	f000 8083 	beq.w	800725a <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 8007154:	69bb      	ldr	r3, [r7, #24]
 8007156:	2b02      	cmp	r3, #2
 8007158:	f200 80a1 	bhi.w	800729e <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 800715c:	69bb      	ldr	r3, [r7, #24]
 800715e:	2b00      	cmp	r3, #0
 8007160:	d003      	beq.n	800716a <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 8007162:	69bb      	ldr	r3, [r7, #24]
 8007164:	2b01      	cmp	r3, #1
 8007166:	d056      	beq.n	8007216 <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 8007168:	e099      	b.n	800729e <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800716a:	4b88      	ldr	r3, [pc, #544]	; (800738c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800716c:	681b      	ldr	r3, [r3, #0]
 800716e:	f003 0320 	and.w	r3, r3, #32
 8007172:	2b00      	cmp	r3, #0
 8007174:	d02d      	beq.n	80071d2 <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8007176:	4b85      	ldr	r3, [pc, #532]	; (800738c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007178:	681b      	ldr	r3, [r3, #0]
 800717a:	08db      	lsrs	r3, r3, #3
 800717c:	f003 0303 	and.w	r3, r3, #3
 8007180:	4a83      	ldr	r2, [pc, #524]	; (8007390 <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 8007182:	fa22 f303 	lsr.w	r3, r2, r3
 8007186:	60bb      	str	r3, [r7, #8]
        pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8007188:	68bb      	ldr	r3, [r7, #8]
 800718a:	ee07 3a90 	vmov	s15, r3
 800718e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007192:	697b      	ldr	r3, [r7, #20]
 8007194:	ee07 3a90 	vmov	s15, r3
 8007198:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800719c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80071a0:	4b7a      	ldr	r3, [pc, #488]	; (800738c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80071a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80071a4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80071a8:	ee07 3a90 	vmov	s15, r3
 80071ac:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80071b0:	ed97 6a03 	vldr	s12, [r7, #12]
 80071b4:	eddf 5a77 	vldr	s11, [pc, #476]	; 8007394 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 80071b8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80071bc:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80071c0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80071c4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80071c8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80071cc:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
      }
      break;
 80071d0:	e087      	b.n	80072e2 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80071d2:	697b      	ldr	r3, [r7, #20]
 80071d4:	ee07 3a90 	vmov	s15, r3
 80071d8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80071dc:	eddf 6a6e 	vldr	s13, [pc, #440]	; 8007398 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 80071e0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80071e4:	4b69      	ldr	r3, [pc, #420]	; (800738c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80071e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80071e8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80071ec:	ee07 3a90 	vmov	s15, r3
 80071f0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80071f4:	ed97 6a03 	vldr	s12, [r7, #12]
 80071f8:	eddf 5a66 	vldr	s11, [pc, #408]	; 8007394 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 80071fc:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007200:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007204:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007208:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800720c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007210:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8007214:	e065      	b.n	80072e2 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8007216:	697b      	ldr	r3, [r7, #20]
 8007218:	ee07 3a90 	vmov	s15, r3
 800721c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007220:	eddf 6a5e 	vldr	s13, [pc, #376]	; 800739c <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 8007224:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007228:	4b58      	ldr	r3, [pc, #352]	; (800738c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800722a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800722c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007230:	ee07 3a90 	vmov	s15, r3
 8007234:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007238:	ed97 6a03 	vldr	s12, [r7, #12]
 800723c:	eddf 5a55 	vldr	s11, [pc, #340]	; 8007394 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8007240:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007244:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007248:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800724c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007250:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007254:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8007258:	e043      	b.n	80072e2 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800725a:	697b      	ldr	r3, [r7, #20]
 800725c:	ee07 3a90 	vmov	s15, r3
 8007260:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007264:	eddf 6a4e 	vldr	s13, [pc, #312]	; 80073a0 <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 8007268:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800726c:	4b47      	ldr	r3, [pc, #284]	; (800738c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800726e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007270:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007274:	ee07 3a90 	vmov	s15, r3
 8007278:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800727c:	ed97 6a03 	vldr	s12, [r7, #12]
 8007280:	eddf 5a44 	vldr	s11, [pc, #272]	; 8007394 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8007284:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007288:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800728c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007290:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007294:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007298:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800729c:	e021      	b.n	80072e2 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

    default:
      pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800729e:	697b      	ldr	r3, [r7, #20]
 80072a0:	ee07 3a90 	vmov	s15, r3
 80072a4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80072a8:	eddf 6a3b 	vldr	s13, [pc, #236]	; 8007398 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 80072ac:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80072b0:	4b36      	ldr	r3, [pc, #216]	; (800738c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80072b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80072b4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80072b8:	ee07 3a90 	vmov	s15, r3
 80072bc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80072c0:	ed97 6a03 	vldr	s12, [r7, #12]
 80072c4:	eddf 5a33 	vldr	s11, [pc, #204]	; 8007394 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 80072c8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80072cc:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80072d0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80072d4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80072d8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80072dc:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80072e0:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9)  + (float_t)1 )) ;
 80072e2:	4b2a      	ldr	r3, [pc, #168]	; (800738c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80072e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80072e6:	0a5b      	lsrs	r3, r3, #9
 80072e8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80072ec:	ee07 3a90 	vmov	s15, r3
 80072f0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80072f4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80072f8:	ee37 7a87 	vadd.f32	s14, s15, s14
 80072fc:	edd7 6a07 	vldr	s13, [r7, #28]
 8007300:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007304:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007308:	ee17 2a90 	vmov	r2, s15
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >>16) + (float_t)1 )) ;
 8007310:	4b1e      	ldr	r3, [pc, #120]	; (800738c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007312:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007314:	0c1b      	lsrs	r3, r3, #16
 8007316:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800731a:	ee07 3a90 	vmov	s15, r3
 800731e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007322:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007326:	ee37 7a87 	vadd.f32	s14, s15, s14
 800732a:	edd7 6a07 	vldr	s13, [r7, #28]
 800732e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007332:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007336:	ee17 2a90 	vmov	r2, s15
 800733a:	687b      	ldr	r3, [r7, #4]
 800733c:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >>24) + (float_t)1 )) ;
 800733e:	4b13      	ldr	r3, [pc, #76]	; (800738c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007340:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007342:	0e1b      	lsrs	r3, r3, #24
 8007344:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007348:	ee07 3a90 	vmov	s15, r3
 800734c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007350:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007354:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007358:	edd7 6a07 	vldr	s13, [r7, #28]
 800735c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007360:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007364:	ee17 2a90 	vmov	r2, s15
 8007368:	687b      	ldr	r3, [r7, #4]
 800736a:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 800736c:	e008      	b.n	8007380 <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 800736e:	687b      	ldr	r3, [r7, #4]
 8007370:	2200      	movs	r2, #0
 8007372:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 8007374:	687b      	ldr	r3, [r7, #4]
 8007376:	2200      	movs	r2, #0
 8007378:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 800737a:	687b      	ldr	r3, [r7, #4]
 800737c:	2200      	movs	r2, #0
 800737e:	609a      	str	r2, [r3, #8]
}
 8007380:	bf00      	nop
 8007382:	3724      	adds	r7, #36	; 0x24
 8007384:	46bd      	mov	sp, r7
 8007386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800738a:	4770      	bx	lr
 800738c:	58024400 	.word	0x58024400
 8007390:	03d09000 	.word	0x03d09000
 8007394:	46000000 	.word	0x46000000
 8007398:	4c742400 	.word	0x4c742400
 800739c:	4a742400 	.word	0x4a742400
 80073a0:	4af42400 	.word	0x4af42400

080073a4 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 80073a4:	b580      	push	{r7, lr}
 80073a6:	b084      	sub	sp, #16
 80073a8:	af00      	add	r7, sp, #0
 80073aa:	6078      	str	r0, [r7, #4]
 80073ac:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80073ae:	2300      	movs	r3, #0
 80073b0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80073b2:	4b53      	ldr	r3, [pc, #332]	; (8007500 <RCCEx_PLL2_Config+0x15c>)
 80073b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80073b6:	f003 0303 	and.w	r3, r3, #3
 80073ba:	2b03      	cmp	r3, #3
 80073bc:	d101      	bne.n	80073c2 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 80073be:	2301      	movs	r3, #1
 80073c0:	e099      	b.n	80074f6 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 80073c2:	4b4f      	ldr	r3, [pc, #316]	; (8007500 <RCCEx_PLL2_Config+0x15c>)
 80073c4:	681b      	ldr	r3, [r3, #0]
 80073c6:	4a4e      	ldr	r2, [pc, #312]	; (8007500 <RCCEx_PLL2_Config+0x15c>)
 80073c8:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80073cc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80073ce:	f7fa f9af 	bl	8001730 <HAL_GetTick>
 80073d2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80073d4:	e008      	b.n	80073e8 <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 80073d6:	f7fa f9ab 	bl	8001730 <HAL_GetTick>
 80073da:	4602      	mov	r2, r0
 80073dc:	68bb      	ldr	r3, [r7, #8]
 80073de:	1ad3      	subs	r3, r2, r3
 80073e0:	2b02      	cmp	r3, #2
 80073e2:	d901      	bls.n	80073e8 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 80073e4:	2303      	movs	r3, #3
 80073e6:	e086      	b.n	80074f6 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80073e8:	4b45      	ldr	r3, [pc, #276]	; (8007500 <RCCEx_PLL2_Config+0x15c>)
 80073ea:	681b      	ldr	r3, [r3, #0]
 80073ec:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80073f0:	2b00      	cmp	r3, #0
 80073f2:	d1f0      	bne.n	80073d6 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 80073f4:	4b42      	ldr	r3, [pc, #264]	; (8007500 <RCCEx_PLL2_Config+0x15c>)
 80073f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80073f8:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 80073fc:	687b      	ldr	r3, [r7, #4]
 80073fe:	681b      	ldr	r3, [r3, #0]
 8007400:	031b      	lsls	r3, r3, #12
 8007402:	493f      	ldr	r1, [pc, #252]	; (8007500 <RCCEx_PLL2_Config+0x15c>)
 8007404:	4313      	orrs	r3, r2
 8007406:	628b      	str	r3, [r1, #40]	; 0x28
 8007408:	687b      	ldr	r3, [r7, #4]
 800740a:	685b      	ldr	r3, [r3, #4]
 800740c:	3b01      	subs	r3, #1
 800740e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8007412:	687b      	ldr	r3, [r7, #4]
 8007414:	689b      	ldr	r3, [r3, #8]
 8007416:	3b01      	subs	r3, #1
 8007418:	025b      	lsls	r3, r3, #9
 800741a:	b29b      	uxth	r3, r3
 800741c:	431a      	orrs	r2, r3
 800741e:	687b      	ldr	r3, [r7, #4]
 8007420:	68db      	ldr	r3, [r3, #12]
 8007422:	3b01      	subs	r3, #1
 8007424:	041b      	lsls	r3, r3, #16
 8007426:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800742a:	431a      	orrs	r2, r3
 800742c:	687b      	ldr	r3, [r7, #4]
 800742e:	691b      	ldr	r3, [r3, #16]
 8007430:	3b01      	subs	r3, #1
 8007432:	061b      	lsls	r3, r3, #24
 8007434:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8007438:	4931      	ldr	r1, [pc, #196]	; (8007500 <RCCEx_PLL2_Config+0x15c>)
 800743a:	4313      	orrs	r3, r2
 800743c:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800743e:	4b30      	ldr	r3, [pc, #192]	; (8007500 <RCCEx_PLL2_Config+0x15c>)
 8007440:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007442:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8007446:	687b      	ldr	r3, [r7, #4]
 8007448:	695b      	ldr	r3, [r3, #20]
 800744a:	492d      	ldr	r1, [pc, #180]	; (8007500 <RCCEx_PLL2_Config+0x15c>)
 800744c:	4313      	orrs	r3, r2
 800744e:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8007450:	4b2b      	ldr	r3, [pc, #172]	; (8007500 <RCCEx_PLL2_Config+0x15c>)
 8007452:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007454:	f023 0220 	bic.w	r2, r3, #32
 8007458:	687b      	ldr	r3, [r7, #4]
 800745a:	699b      	ldr	r3, [r3, #24]
 800745c:	4928      	ldr	r1, [pc, #160]	; (8007500 <RCCEx_PLL2_Config+0x15c>)
 800745e:	4313      	orrs	r3, r2
 8007460:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8007462:	4b27      	ldr	r3, [pc, #156]	; (8007500 <RCCEx_PLL2_Config+0x15c>)
 8007464:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007466:	4a26      	ldr	r2, [pc, #152]	; (8007500 <RCCEx_PLL2_Config+0x15c>)
 8007468:	f023 0310 	bic.w	r3, r3, #16
 800746c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800746e:	4b24      	ldr	r3, [pc, #144]	; (8007500 <RCCEx_PLL2_Config+0x15c>)
 8007470:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007472:	4b24      	ldr	r3, [pc, #144]	; (8007504 <RCCEx_PLL2_Config+0x160>)
 8007474:	4013      	ands	r3, r2
 8007476:	687a      	ldr	r2, [r7, #4]
 8007478:	69d2      	ldr	r2, [r2, #28]
 800747a:	00d2      	lsls	r2, r2, #3
 800747c:	4920      	ldr	r1, [pc, #128]	; (8007500 <RCCEx_PLL2_Config+0x15c>)
 800747e:	4313      	orrs	r3, r2
 8007480:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8007482:	4b1f      	ldr	r3, [pc, #124]	; (8007500 <RCCEx_PLL2_Config+0x15c>)
 8007484:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007486:	4a1e      	ldr	r2, [pc, #120]	; (8007500 <RCCEx_PLL2_Config+0x15c>)
 8007488:	f043 0310 	orr.w	r3, r3, #16
 800748c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 800748e:	683b      	ldr	r3, [r7, #0]
 8007490:	2b00      	cmp	r3, #0
 8007492:	d106      	bne.n	80074a2 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8007494:	4b1a      	ldr	r3, [pc, #104]	; (8007500 <RCCEx_PLL2_Config+0x15c>)
 8007496:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007498:	4a19      	ldr	r2, [pc, #100]	; (8007500 <RCCEx_PLL2_Config+0x15c>)
 800749a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800749e:	62d3      	str	r3, [r2, #44]	; 0x2c
 80074a0:	e00f      	b.n	80074c2 <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 80074a2:	683b      	ldr	r3, [r7, #0]
 80074a4:	2b01      	cmp	r3, #1
 80074a6:	d106      	bne.n	80074b6 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 80074a8:	4b15      	ldr	r3, [pc, #84]	; (8007500 <RCCEx_PLL2_Config+0x15c>)
 80074aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80074ac:	4a14      	ldr	r2, [pc, #80]	; (8007500 <RCCEx_PLL2_Config+0x15c>)
 80074ae:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80074b2:	62d3      	str	r3, [r2, #44]	; 0x2c
 80074b4:	e005      	b.n	80074c2 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 80074b6:	4b12      	ldr	r3, [pc, #72]	; (8007500 <RCCEx_PLL2_Config+0x15c>)
 80074b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80074ba:	4a11      	ldr	r2, [pc, #68]	; (8007500 <RCCEx_PLL2_Config+0x15c>)
 80074bc:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80074c0:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 80074c2:	4b0f      	ldr	r3, [pc, #60]	; (8007500 <RCCEx_PLL2_Config+0x15c>)
 80074c4:	681b      	ldr	r3, [r3, #0]
 80074c6:	4a0e      	ldr	r2, [pc, #56]	; (8007500 <RCCEx_PLL2_Config+0x15c>)
 80074c8:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80074cc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80074ce:	f7fa f92f 	bl	8001730 <HAL_GetTick>
 80074d2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80074d4:	e008      	b.n	80074e8 <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 80074d6:	f7fa f92b 	bl	8001730 <HAL_GetTick>
 80074da:	4602      	mov	r2, r0
 80074dc:	68bb      	ldr	r3, [r7, #8]
 80074de:	1ad3      	subs	r3, r2, r3
 80074e0:	2b02      	cmp	r3, #2
 80074e2:	d901      	bls.n	80074e8 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 80074e4:	2303      	movs	r3, #3
 80074e6:	e006      	b.n	80074f6 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80074e8:	4b05      	ldr	r3, [pc, #20]	; (8007500 <RCCEx_PLL2_Config+0x15c>)
 80074ea:	681b      	ldr	r3, [r3, #0]
 80074ec:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80074f0:	2b00      	cmp	r3, #0
 80074f2:	d0f0      	beq.n	80074d6 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 80074f4:	7bfb      	ldrb	r3, [r7, #15]
}
 80074f6:	4618      	mov	r0, r3
 80074f8:	3710      	adds	r7, #16
 80074fa:	46bd      	mov	sp, r7
 80074fc:	bd80      	pop	{r7, pc}
 80074fe:	bf00      	nop
 8007500:	58024400 	.word	0x58024400
 8007504:	ffff0007 	.word	0xffff0007

08007508 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8007508:	b580      	push	{r7, lr}
 800750a:	b084      	sub	sp, #16
 800750c:	af00      	add	r7, sp, #0
 800750e:	6078      	str	r0, [r7, #4]
 8007510:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8007512:	2300      	movs	r3, #0
 8007514:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8007516:	4b53      	ldr	r3, [pc, #332]	; (8007664 <RCCEx_PLL3_Config+0x15c>)
 8007518:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800751a:	f003 0303 	and.w	r3, r3, #3
 800751e:	2b03      	cmp	r3, #3
 8007520:	d101      	bne.n	8007526 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8007522:	2301      	movs	r3, #1
 8007524:	e099      	b.n	800765a <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8007526:	4b4f      	ldr	r3, [pc, #316]	; (8007664 <RCCEx_PLL3_Config+0x15c>)
 8007528:	681b      	ldr	r3, [r3, #0]
 800752a:	4a4e      	ldr	r2, [pc, #312]	; (8007664 <RCCEx_PLL3_Config+0x15c>)
 800752c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007530:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007532:	f7fa f8fd 	bl	8001730 <HAL_GetTick>
 8007536:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8007538:	e008      	b.n	800754c <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 800753a:	f7fa f8f9 	bl	8001730 <HAL_GetTick>
 800753e:	4602      	mov	r2, r0
 8007540:	68bb      	ldr	r3, [r7, #8]
 8007542:	1ad3      	subs	r3, r2, r3
 8007544:	2b02      	cmp	r3, #2
 8007546:	d901      	bls.n	800754c <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8007548:	2303      	movs	r3, #3
 800754a:	e086      	b.n	800765a <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800754c:	4b45      	ldr	r3, [pc, #276]	; (8007664 <RCCEx_PLL3_Config+0x15c>)
 800754e:	681b      	ldr	r3, [r3, #0]
 8007550:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007554:	2b00      	cmp	r3, #0
 8007556:	d1f0      	bne.n	800753a <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8007558:	4b42      	ldr	r3, [pc, #264]	; (8007664 <RCCEx_PLL3_Config+0x15c>)
 800755a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800755c:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8007560:	687b      	ldr	r3, [r7, #4]
 8007562:	681b      	ldr	r3, [r3, #0]
 8007564:	051b      	lsls	r3, r3, #20
 8007566:	493f      	ldr	r1, [pc, #252]	; (8007664 <RCCEx_PLL3_Config+0x15c>)
 8007568:	4313      	orrs	r3, r2
 800756a:	628b      	str	r3, [r1, #40]	; 0x28
 800756c:	687b      	ldr	r3, [r7, #4]
 800756e:	685b      	ldr	r3, [r3, #4]
 8007570:	3b01      	subs	r3, #1
 8007572:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8007576:	687b      	ldr	r3, [r7, #4]
 8007578:	689b      	ldr	r3, [r3, #8]
 800757a:	3b01      	subs	r3, #1
 800757c:	025b      	lsls	r3, r3, #9
 800757e:	b29b      	uxth	r3, r3
 8007580:	431a      	orrs	r2, r3
 8007582:	687b      	ldr	r3, [r7, #4]
 8007584:	68db      	ldr	r3, [r3, #12]
 8007586:	3b01      	subs	r3, #1
 8007588:	041b      	lsls	r3, r3, #16
 800758a:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800758e:	431a      	orrs	r2, r3
 8007590:	687b      	ldr	r3, [r7, #4]
 8007592:	691b      	ldr	r3, [r3, #16]
 8007594:	3b01      	subs	r3, #1
 8007596:	061b      	lsls	r3, r3, #24
 8007598:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800759c:	4931      	ldr	r1, [pc, #196]	; (8007664 <RCCEx_PLL3_Config+0x15c>)
 800759e:	4313      	orrs	r3, r2
 80075a0:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 80075a2:	4b30      	ldr	r3, [pc, #192]	; (8007664 <RCCEx_PLL3_Config+0x15c>)
 80075a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80075a6:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80075aa:	687b      	ldr	r3, [r7, #4]
 80075ac:	695b      	ldr	r3, [r3, #20]
 80075ae:	492d      	ldr	r1, [pc, #180]	; (8007664 <RCCEx_PLL3_Config+0x15c>)
 80075b0:	4313      	orrs	r3, r2
 80075b2:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 80075b4:	4b2b      	ldr	r3, [pc, #172]	; (8007664 <RCCEx_PLL3_Config+0x15c>)
 80075b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80075b8:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 80075bc:	687b      	ldr	r3, [r7, #4]
 80075be:	699b      	ldr	r3, [r3, #24]
 80075c0:	4928      	ldr	r1, [pc, #160]	; (8007664 <RCCEx_PLL3_Config+0x15c>)
 80075c2:	4313      	orrs	r3, r2
 80075c4:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 80075c6:	4b27      	ldr	r3, [pc, #156]	; (8007664 <RCCEx_PLL3_Config+0x15c>)
 80075c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80075ca:	4a26      	ldr	r2, [pc, #152]	; (8007664 <RCCEx_PLL3_Config+0x15c>)
 80075cc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80075d0:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 80075d2:	4b24      	ldr	r3, [pc, #144]	; (8007664 <RCCEx_PLL3_Config+0x15c>)
 80075d4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80075d6:	4b24      	ldr	r3, [pc, #144]	; (8007668 <RCCEx_PLL3_Config+0x160>)
 80075d8:	4013      	ands	r3, r2
 80075da:	687a      	ldr	r2, [r7, #4]
 80075dc:	69d2      	ldr	r2, [r2, #28]
 80075de:	00d2      	lsls	r2, r2, #3
 80075e0:	4920      	ldr	r1, [pc, #128]	; (8007664 <RCCEx_PLL3_Config+0x15c>)
 80075e2:	4313      	orrs	r3, r2
 80075e4:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 80075e6:	4b1f      	ldr	r3, [pc, #124]	; (8007664 <RCCEx_PLL3_Config+0x15c>)
 80075e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80075ea:	4a1e      	ldr	r2, [pc, #120]	; (8007664 <RCCEx_PLL3_Config+0x15c>)
 80075ec:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80075f0:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 80075f2:	683b      	ldr	r3, [r7, #0]
 80075f4:	2b00      	cmp	r3, #0
 80075f6:	d106      	bne.n	8007606 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 80075f8:	4b1a      	ldr	r3, [pc, #104]	; (8007664 <RCCEx_PLL3_Config+0x15c>)
 80075fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80075fc:	4a19      	ldr	r2, [pc, #100]	; (8007664 <RCCEx_PLL3_Config+0x15c>)
 80075fe:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8007602:	62d3      	str	r3, [r2, #44]	; 0x2c
 8007604:	e00f      	b.n	8007626 <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8007606:	683b      	ldr	r3, [r7, #0]
 8007608:	2b01      	cmp	r3, #1
 800760a:	d106      	bne.n	800761a <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 800760c:	4b15      	ldr	r3, [pc, #84]	; (8007664 <RCCEx_PLL3_Config+0x15c>)
 800760e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007610:	4a14      	ldr	r2, [pc, #80]	; (8007664 <RCCEx_PLL3_Config+0x15c>)
 8007612:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8007616:	62d3      	str	r3, [r2, #44]	; 0x2c
 8007618:	e005      	b.n	8007626 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800761a:	4b12      	ldr	r3, [pc, #72]	; (8007664 <RCCEx_PLL3_Config+0x15c>)
 800761c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800761e:	4a11      	ldr	r2, [pc, #68]	; (8007664 <RCCEx_PLL3_Config+0x15c>)
 8007620:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8007624:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8007626:	4b0f      	ldr	r3, [pc, #60]	; (8007664 <RCCEx_PLL3_Config+0x15c>)
 8007628:	681b      	ldr	r3, [r3, #0]
 800762a:	4a0e      	ldr	r2, [pc, #56]	; (8007664 <RCCEx_PLL3_Config+0x15c>)
 800762c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007630:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007632:	f7fa f87d 	bl	8001730 <HAL_GetTick>
 8007636:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8007638:	e008      	b.n	800764c <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 800763a:	f7fa f879 	bl	8001730 <HAL_GetTick>
 800763e:	4602      	mov	r2, r0
 8007640:	68bb      	ldr	r3, [r7, #8]
 8007642:	1ad3      	subs	r3, r2, r3
 8007644:	2b02      	cmp	r3, #2
 8007646:	d901      	bls.n	800764c <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8007648:	2303      	movs	r3, #3
 800764a:	e006      	b.n	800765a <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800764c:	4b05      	ldr	r3, [pc, #20]	; (8007664 <RCCEx_PLL3_Config+0x15c>)
 800764e:	681b      	ldr	r3, [r3, #0]
 8007650:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007654:	2b00      	cmp	r3, #0
 8007656:	d0f0      	beq.n	800763a <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8007658:	7bfb      	ldrb	r3, [r7, #15]
}
 800765a:	4618      	mov	r0, r3
 800765c:	3710      	adds	r7, #16
 800765e:	46bd      	mov	sp, r7
 8007660:	bd80      	pop	{r7, pc}
 8007662:	bf00      	nop
 8007664:	58024400 	.word	0x58024400
 8007668:	ffff0007 	.word	0xffff0007

0800766c <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 800766c:	b580      	push	{r7, lr}
 800766e:	b084      	sub	sp, #16
 8007670:	af00      	add	r7, sp, #0
 8007672:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8007674:	2301      	movs	r3, #1
 8007676:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler */
  if(hrtc != NULL)
 8007678:	687b      	ldr	r3, [r7, #4]
 800767a:	2b00      	cmp	r3, #0
 800767c:	d067      	beq.n	800774e <HAL_RTC_Init+0xe2>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else /*  (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */
    if(hrtc->State == HAL_RTC_STATE_RESET)
 800767e:	687b      	ldr	r3, [r7, #4]
 8007680:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8007684:	b2db      	uxtb	r3, r3
 8007686:	2b00      	cmp	r3, #0
 8007688:	d106      	bne.n	8007698 <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 800768a:	687b      	ldr	r3, [r7, #4]
 800768c:	2200      	movs	r2, #0
 800768e:	f883 2020 	strb.w	r2, [r3, #32]

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 8007692:	6878      	ldr	r0, [r7, #4]
 8007694:	f7f9 fd88 	bl	80011a8 <HAL_RTC_MspInit>
    }
#endif /*  (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 8007698:	687b      	ldr	r3, [r7, #4]
 800769a:	2202      	movs	r2, #2
 800769c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80076a0:	687b      	ldr	r3, [r7, #4]
 80076a2:	681b      	ldr	r3, [r3, #0]
 80076a4:	22ca      	movs	r2, #202	; 0xca
 80076a6:	625a      	str	r2, [r3, #36]	; 0x24
 80076a8:	687b      	ldr	r3, [r7, #4]
 80076aa:	681b      	ldr	r3, [r3, #0]
 80076ac:	2253      	movs	r2, #83	; 0x53
 80076ae:	625a      	str	r2, [r3, #36]	; 0x24

   /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 80076b0:	6878      	ldr	r0, [r7, #4]
 80076b2:	f000 f879 	bl	80077a8 <RTC_EnterInitMode>
 80076b6:	4603      	mov	r3, r0
 80076b8:	73fb      	strb	r3, [r7, #15]
    if (status == HAL_OK)
 80076ba:	7bfb      	ldrb	r3, [r7, #15]
 80076bc:	2b00      	cmp	r3, #0
 80076be:	d13b      	bne.n	8007738 <HAL_RTC_Init+0xcc>
#if defined(RTC_CR_TAMPOE)
      /* Clear RTC_CR FMT, OSEL, POL and TAMPOE Bits */
      hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE);
#else  /* RTC_CR_TAMPOE */
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL);
 80076c0:	687b      	ldr	r3, [r7, #4]
 80076c2:	681b      	ldr	r3, [r3, #0]
 80076c4:	6899      	ldr	r1, [r3, #8]
 80076c6:	687b      	ldr	r3, [r7, #4]
 80076c8:	681a      	ldr	r2, [r3, #0]
 80076ca:	4b23      	ldr	r3, [pc, #140]	; (8007758 <HAL_RTC_Init+0xec>)
 80076cc:	400b      	ands	r3, r1
 80076ce:	6093      	str	r3, [r2, #8]
#endif /* RTC_CR_TAMPOE */

      /* Set RTC_CR register */
      hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 80076d0:	687b      	ldr	r3, [r7, #4]
 80076d2:	681b      	ldr	r3, [r3, #0]
 80076d4:	6899      	ldr	r1, [r3, #8]
 80076d6:	687b      	ldr	r3, [r7, #4]
 80076d8:	685a      	ldr	r2, [r3, #4]
 80076da:	687b      	ldr	r3, [r7, #4]
 80076dc:	691b      	ldr	r3, [r3, #16]
 80076de:	431a      	orrs	r2, r3
 80076e0:	687b      	ldr	r3, [r7, #4]
 80076e2:	699b      	ldr	r3, [r3, #24]
 80076e4:	431a      	orrs	r2, r3
 80076e6:	687b      	ldr	r3, [r7, #4]
 80076e8:	681b      	ldr	r3, [r3, #0]
 80076ea:	430a      	orrs	r2, r1
 80076ec:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos) | (hrtc->Init.SynchPrediv << RTC_PRER_PREDIV_S_Pos);
 80076ee:	687b      	ldr	r3, [r7, #4]
 80076f0:	689b      	ldr	r3, [r3, #8]
 80076f2:	0419      	lsls	r1, r3, #16
 80076f4:	687b      	ldr	r3, [r7, #4]
 80076f6:	68da      	ldr	r2, [r3, #12]
 80076f8:	687b      	ldr	r3, [r7, #4]
 80076fa:	681b      	ldr	r3, [r3, #0]
 80076fc:	430a      	orrs	r2, r1
 80076fe:	611a      	str	r2, [r3, #16]

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 8007700:	6878      	ldr	r0, [r7, #4]
 8007702:	f000 f881 	bl	8007808 <RTC_ExitInitMode>
 8007706:	4603      	mov	r3, r0
 8007708:	73fb      	strb	r3, [r7, #15]

      if(status == HAL_OK)
 800770a:	7bfb      	ldrb	r3, [r7, #15]
 800770c:	2b00      	cmp	r3, #0
 800770e:	d113      	bne.n	8007738 <HAL_RTC_Init+0xcc>
        hrtc->Instance->CR &= ~(RTC_CR_TAMPALRM_PU | RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN);
        hrtc->Instance->CR |= (hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
#endif /* RTC_CR_TAMPALRM_TYPE && RTC_CR_OUT2EN && RTC_CR_TAMPALRM_PU */

#if defined(RTC_OR_ALARMOUTTYPE) && defined(RTC_OR_OUT_RMP)
        hrtc->Instance->OR &= ~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 8007710:	687b      	ldr	r3, [r7, #4]
 8007712:	681b      	ldr	r3, [r3, #0]
 8007714:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8007716:	687b      	ldr	r3, [r7, #4]
 8007718:	681b      	ldr	r3, [r3, #0]
 800771a:	f022 0203 	bic.w	r2, r2, #3
 800771e:	64da      	str	r2, [r3, #76]	; 0x4c
        hrtc->Instance->OR |= (hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 8007720:	687b      	ldr	r3, [r7, #4]
 8007722:	681b      	ldr	r3, [r3, #0]
 8007724:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 8007726:	687b      	ldr	r3, [r7, #4]
 8007728:	69da      	ldr	r2, [r3, #28]
 800772a:	687b      	ldr	r3, [r7, #4]
 800772c:	695b      	ldr	r3, [r3, #20]
 800772e:	431a      	orrs	r2, r3
 8007730:	687b      	ldr	r3, [r7, #4]
 8007732:	681b      	ldr	r3, [r3, #0]
 8007734:	430a      	orrs	r2, r1
 8007736:	64da      	str	r2, [r3, #76]	; 0x4c
#endif /* ALARMOUTTYPE && RTC_OR_OUT_RMP */
      }
    }
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007738:	687b      	ldr	r3, [r7, #4]
 800773a:	681b      	ldr	r3, [r3, #0]
 800773c:	22ff      	movs	r2, #255	; 0xff
 800773e:	625a      	str	r2, [r3, #36]	; 0x24
    if (status == HAL_OK)
 8007740:	7bfb      	ldrb	r3, [r7, #15]
 8007742:	2b00      	cmp	r3, #0
 8007744:	d103      	bne.n	800774e <HAL_RTC_Init+0xe2>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_READY;
 8007746:	687b      	ldr	r3, [r7, #4]
 8007748:	2201      	movs	r2, #1
 800774a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
  }

  /* return status */
  return status;
 800774e:	7bfb      	ldrb	r3, [r7, #15]
}
 8007750:	4618      	mov	r0, r3
 8007752:	3710      	adds	r7, #16
 8007754:	46bd      	mov	sp, r7
 8007756:	bd80      	pop	{r7, pc}
 8007758:	ff8fffbf 	.word	0xff8fffbf

0800775c <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 800775c:	b580      	push	{r7, lr}
 800775e:	b084      	sub	sp, #16
 8007760:	af00      	add	r7, sp, #0
 8007762:	6078      	str	r0, [r7, #4]
  /* Clear RSF flag */
#if defined(RTC_ICSR_RSF)
  hrtc->Instance->ICSR &= (uint32_t)RTC_RSF_MASK;
#endif /* RTC_ICSR_RSF */
#if defined(RTC_ISR_RSF)
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8007764:	687b      	ldr	r3, [r7, #4]
 8007766:	681b      	ldr	r3, [r3, #0]
 8007768:	68da      	ldr	r2, [r3, #12]
 800776a:	687b      	ldr	r3, [r7, #4]
 800776c:	681b      	ldr	r3, [r3, #0]
 800776e:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8007772:	60da      	str	r2, [r3, #12]
#endif /* RTC_ISR_RSF */

  tickstart = HAL_GetTick();
 8007774:	f7f9 ffdc 	bl	8001730 <HAL_GetTick>
 8007778:	60f8      	str	r0, [r7, #12]
  /* Wait the registers to be synchronised */
#if defined(RTC_ICSR_RSF)
  while ((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
#endif /* RTC_ICSR_RSF */
#if defined(RTC_ISR_RSF)
    while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800777a:	e009      	b.n	8007790 <HAL_RTC_WaitForSynchro+0x34>
#endif /* RTC_ISR_RSF */
    {
      if((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800777c:	f7f9 ffd8 	bl	8001730 <HAL_GetTick>
 8007780:	4602      	mov	r2, r0
 8007782:	68fb      	ldr	r3, [r7, #12]
 8007784:	1ad3      	subs	r3, r2, r3
 8007786:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800778a:	d901      	bls.n	8007790 <HAL_RTC_WaitForSynchro+0x34>
      {
        return HAL_TIMEOUT;
 800778c:	2303      	movs	r3, #3
 800778e:	e007      	b.n	80077a0 <HAL_RTC_WaitForSynchro+0x44>
    while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8007790:	687b      	ldr	r3, [r7, #4]
 8007792:	681b      	ldr	r3, [r3, #0]
 8007794:	68db      	ldr	r3, [r3, #12]
 8007796:	f003 0320 	and.w	r3, r3, #32
 800779a:	2b00      	cmp	r3, #0
 800779c:	d0ee      	beq.n	800777c <HAL_RTC_WaitForSynchro+0x20>
      }
    }

  return HAL_OK;
 800779e:	2300      	movs	r3, #0
}
 80077a0:	4618      	mov	r0, r3
 80077a2:	3710      	adds	r7, #16
 80077a4:	46bd      	mov	sp, r7
 80077a6:	bd80      	pop	{r7, pc}

080077a8 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 80077a8:	b580      	push	{r7, lr}
 80077aa:	b084      	sub	sp, #16
 80077ac:	af00      	add	r7, sp, #0
 80077ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80077b0:	2300      	movs	r3, #0
 80077b2:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#endif /* RTC_ICSR_INITF */
#if defined(RTC_ISR_INITF)
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 80077b4:	687b      	ldr	r3, [r7, #4]
 80077b6:	681b      	ldr	r3, [r3, #0]
 80077b8:	68db      	ldr	r3, [r3, #12]
 80077ba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80077be:	2b00      	cmp	r3, #0
 80077c0:	d11d      	bne.n	80077fe <RTC_EnterInitMode+0x56>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 80077c2:	687b      	ldr	r3, [r7, #4]
 80077c4:	681b      	ldr	r3, [r3, #0]
 80077c6:	f04f 32ff 	mov.w	r2, #4294967295
 80077ca:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 80077cc:	f7f9 ffb0 	bl	8001730 <HAL_GetTick>
 80077d0:	60b8      	str	r0, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 80077d2:	e00d      	b.n	80077f0 <RTC_EnterInitMode+0x48>
    {
      if((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 80077d4:	f7f9 ffac 	bl	8001730 <HAL_GetTick>
 80077d8:	4602      	mov	r2, r0
 80077da:	68bb      	ldr	r3, [r7, #8]
 80077dc:	1ad3      	subs	r3, r2, r3
 80077de:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80077e2:	d905      	bls.n	80077f0 <RTC_EnterInitMode+0x48>
      {
        status = HAL_TIMEOUT;
 80077e4:	2303      	movs	r3, #3
 80077e6:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80077e8:	687b      	ldr	r3, [r7, #4]
 80077ea:	2203      	movs	r2, #3
 80077ec:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 80077f0:	687b      	ldr	r3, [r7, #4]
 80077f2:	681b      	ldr	r3, [r3, #0]
 80077f4:	68db      	ldr	r3, [r3, #12]
 80077f6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80077fa:	2b00      	cmp	r3, #0
 80077fc:	d0ea      	beq.n	80077d4 <RTC_EnterInitMode+0x2c>
      }
    }
  }
#endif /* RTC_ISR_INITF */

  return status;
 80077fe:	7bfb      	ldrb	r3, [r7, #15]
}
 8007800:	4618      	mov	r0, r3
 8007802:	3710      	adds	r7, #16
 8007804:	46bd      	mov	sp, r7
 8007806:	bd80      	pop	{r7, pc}

08007808 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8007808:	b580      	push	{r7, lr}
 800780a:	b084      	sub	sp, #16
 800780c:	af00      	add	r7, sp, #0
 800780e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007810:	2300      	movs	r3, #0
 8007812:	73fb      	strb	r3, [r7, #15]
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);

#elif defined(RTC_ISR_INITF)

  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ISR, RTC_ISR_INITF);
 8007814:	4b1a      	ldr	r3, [pc, #104]	; (8007880 <RTC_ExitInitMode+0x78>)
 8007816:	68db      	ldr	r3, [r3, #12]
 8007818:	4a19      	ldr	r2, [pc, #100]	; (8007880 <RTC_ExitInitMode+0x78>)
 800781a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800781e:	60d3      	str	r3, [r2, #12]

#endif /* RTC_ISR_INITF */
  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 8007820:	4b17      	ldr	r3, [pc, #92]	; (8007880 <RTC_ExitInitMode+0x78>)
 8007822:	689b      	ldr	r3, [r3, #8]
 8007824:	f003 0320 	and.w	r3, r3, #32
 8007828:	2b00      	cmp	r3, #0
 800782a:	d10c      	bne.n	8007846 <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800782c:	6878      	ldr	r0, [r7, #4]
 800782e:	f7ff ff95 	bl	800775c <HAL_RTC_WaitForSynchro>
 8007832:	4603      	mov	r3, r0
 8007834:	2b00      	cmp	r3, #0
 8007836:	d01e      	beq.n	8007876 <RTC_ExitInitMode+0x6e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8007838:	687b      	ldr	r3, [r7, #4]
 800783a:	2203      	movs	r2, #3
 800783c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 8007840:	2303      	movs	r3, #3
 8007842:	73fb      	strb	r3, [r7, #15]
 8007844:	e017      	b.n	8007876 <RTC_ExitInitMode+0x6e>
    }
  }
  else
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8007846:	4b0e      	ldr	r3, [pc, #56]	; (8007880 <RTC_ExitInitMode+0x78>)
 8007848:	689b      	ldr	r3, [r3, #8]
 800784a:	4a0d      	ldr	r2, [pc, #52]	; (8007880 <RTC_ExitInitMode+0x78>)
 800784c:	f023 0320 	bic.w	r3, r3, #32
 8007850:	6093      	str	r3, [r2, #8]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8007852:	6878      	ldr	r0, [r7, #4]
 8007854:	f7ff ff82 	bl	800775c <HAL_RTC_WaitForSynchro>
 8007858:	4603      	mov	r3, r0
 800785a:	2b00      	cmp	r3, #0
 800785c:	d005      	beq.n	800786a <RTC_ExitInitMode+0x62>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800785e:	687b      	ldr	r3, [r7, #4]
 8007860:	2203      	movs	r2, #3
 8007862:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 8007866:	2303      	movs	r3, #3
 8007868:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 800786a:	4b05      	ldr	r3, [pc, #20]	; (8007880 <RTC_ExitInitMode+0x78>)
 800786c:	689b      	ldr	r3, [r3, #8]
 800786e:	4a04      	ldr	r2, [pc, #16]	; (8007880 <RTC_ExitInitMode+0x78>)
 8007870:	f043 0320 	orr.w	r3, r3, #32
 8007874:	6093      	str	r3, [r2, #8]
  }

  return status;
 8007876:	7bfb      	ldrb	r3, [r7, #15]
}
 8007878:	4618      	mov	r0, r3
 800787a:	3710      	adds	r7, #16
 800787c:	46bd      	mov	sp, r7
 800787e:	bd80      	pop	{r7, pc}
 8007880:	58004000 	.word	0x58004000

08007884 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 8007884:	b580      	push	{r7, lr}
 8007886:	b08a      	sub	sp, #40	; 0x28
 8007888:	af00      	add	r7, sp, #0
 800788a:	6078      	str	r0, [r7, #4]
  uint32_t speedgrade;
  uint32_t unitsize;
  uint32_t tickstart;

  /* Check the SD handle allocation */
  if (hsd == NULL)
 800788c:	687b      	ldr	r3, [r7, #4]
 800788e:	2b00      	cmp	r3, #0
 8007890:	d101      	bne.n	8007896 <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 8007892:	2301      	movs	r3, #1
 8007894:	e07c      	b.n	8007990 <HAL_SD_Init+0x10c>
  assert_param(IS_SDMMC_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDMMC_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(hsd->Init.ClockDiv));

  if (hsd->State == HAL_SD_STATE_RESET)
 8007896:	687b      	ldr	r3, [r7, #4]
 8007898:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800789c:	b2db      	uxtb	r3, r3
 800789e:	2b00      	cmp	r3, #0
 80078a0:	d10c      	bne.n	80078bc <HAL_SD_Init+0x38>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 80078a2:	687b      	ldr	r3, [r7, #4]
 80078a4:	2200      	movs	r2, #0
 80078a6:	771a      	strb	r2, [r3, #28]

#if (USE_SD_TRANSCEIVER != 0U)
    /* Force  SDMMC_TRANSCEIVER_PRESENT for Legacy usage */
    if (hsd->Init.TranceiverPresent == SDMMC_TRANSCEIVER_UNKNOWN)
 80078a8:	687b      	ldr	r3, [r7, #4]
 80078aa:	699b      	ldr	r3, [r3, #24]
 80078ac:	2b00      	cmp	r3, #0
 80078ae:	d102      	bne.n	80078b6 <HAL_SD_Init+0x32>
    {
      hsd->Init.TranceiverPresent = SDMMC_TRANSCEIVER_PRESENT;
 80078b0:	687b      	ldr	r3, [r7, #4]
 80078b2:	2202      	movs	r2, #2
 80078b4:	619a      	str	r2, [r3, #24]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 80078b6:	6878      	ldr	r0, [r7, #4]
 80078b8:	f7f9 fca6 	bl	8001208 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 80078bc:	687b      	ldr	r3, [r7, #4]
 80078be:	2203      	movs	r2, #3
 80078c0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 80078c4:	6878      	ldr	r0, [r7, #4]
 80078c6:	f000 f867 	bl	8007998 <HAL_SD_InitCard>
 80078ca:	4603      	mov	r3, r0
 80078cc:	2b00      	cmp	r3, #0
 80078ce:	d001      	beq.n	80078d4 <HAL_SD_Init+0x50>
  {
    return HAL_ERROR;
 80078d0:	2301      	movs	r3, #1
 80078d2:	e05d      	b.n	8007990 <HAL_SD_Init+0x10c>
  }

  if (HAL_SD_GetCardStatus(hsd, &CardStatus) != HAL_OK)
 80078d4:	f107 0308 	add.w	r3, r7, #8
 80078d8:	4619      	mov	r1, r3
 80078da:	6878      	ldr	r0, [r7, #4]
 80078dc:	f000 fbfe 	bl	80080dc <HAL_SD_GetCardStatus>
 80078e0:	4603      	mov	r3, r0
 80078e2:	2b00      	cmp	r3, #0
 80078e4:	d001      	beq.n	80078ea <HAL_SD_Init+0x66>
  {
    return HAL_ERROR;
 80078e6:	2301      	movs	r3, #1
 80078e8:	e052      	b.n	8007990 <HAL_SD_Init+0x10c>
  }
  /* Get Initial Card Speed from Card Status*/
  speedgrade = CardStatus.UhsSpeedGrade;
 80078ea:	7e3b      	ldrb	r3, [r7, #24]
 80078ec:	b2db      	uxtb	r3, r3
 80078ee:	627b      	str	r3, [r7, #36]	; 0x24
  unitsize = CardStatus.UhsAllocationUnitSize;
 80078f0:	7e7b      	ldrb	r3, [r7, #25]
 80078f2:	b2db      	uxtb	r3, r3
 80078f4:	623b      	str	r3, [r7, #32]
  if ((hsd->SdCard.CardType == CARD_SDHC_SDXC) && ((speedgrade != 0U) || (unitsize != 0U)))
 80078f6:	687b      	ldr	r3, [r7, #4]
 80078f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80078fa:	2b01      	cmp	r3, #1
 80078fc:	d10a      	bne.n	8007914 <HAL_SD_Init+0x90>
 80078fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007900:	2b00      	cmp	r3, #0
 8007902:	d102      	bne.n	800790a <HAL_SD_Init+0x86>
 8007904:	6a3b      	ldr	r3, [r7, #32]
 8007906:	2b00      	cmp	r3, #0
 8007908:	d004      	beq.n	8007914 <HAL_SD_Init+0x90>
  {
    hsd->SdCard.CardSpeed = CARD_ULTRA_HIGH_SPEED;
 800790a:	687b      	ldr	r3, [r7, #4]
 800790c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007910:	65da      	str	r2, [r3, #92]	; 0x5c
 8007912:	e00b      	b.n	800792c <HAL_SD_Init+0xa8>
  }
  else
  {
    if (hsd->SdCard.CardType == CARD_SDHC_SDXC)
 8007914:	687b      	ldr	r3, [r7, #4]
 8007916:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007918:	2b01      	cmp	r3, #1
 800791a:	d104      	bne.n	8007926 <HAL_SD_Init+0xa2>
    {
      hsd->SdCard.CardSpeed  = CARD_HIGH_SPEED;
 800791c:	687b      	ldr	r3, [r7, #4]
 800791e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8007922:	65da      	str	r2, [r3, #92]	; 0x5c
 8007924:	e002      	b.n	800792c <HAL_SD_Init+0xa8>
    }
    else
    {
      hsd->SdCard.CardSpeed  = CARD_NORMAL_SPEED;
 8007926:	687b      	ldr	r3, [r7, #4]
 8007928:	2200      	movs	r2, #0
 800792a:	65da      	str	r2, [r3, #92]	; 0x5c
    }

  }
  /* Configure the bus wide */
  if (HAL_SD_ConfigWideBusOperation(hsd, hsd->Init.BusWide) != HAL_OK)
 800792c:	687b      	ldr	r3, [r7, #4]
 800792e:	68db      	ldr	r3, [r3, #12]
 8007930:	4619      	mov	r1, r3
 8007932:	6878      	ldr	r0, [r7, #4]
 8007934:	f000 fcb4 	bl	80082a0 <HAL_SD_ConfigWideBusOperation>
 8007938:	4603      	mov	r3, r0
 800793a:	2b00      	cmp	r3, #0
 800793c:	d001      	beq.n	8007942 <HAL_SD_Init+0xbe>
  {
    return HAL_ERROR;
 800793e:	2301      	movs	r3, #1
 8007940:	e026      	b.n	8007990 <HAL_SD_Init+0x10c>
  }

  /* Verify that SD card is ready to use after Initialization */
  tickstart = HAL_GetTick();
 8007942:	f7f9 fef5 	bl	8001730 <HAL_GetTick>
 8007946:	61f8      	str	r0, [r7, #28]
  while ((HAL_SD_GetCardState(hsd) != HAL_SD_CARD_TRANSFER))
 8007948:	e011      	b.n	800796e <HAL_SD_Init+0xea>
  {
    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800794a:	f7f9 fef1 	bl	8001730 <HAL_GetTick>
 800794e:	4602      	mov	r2, r0
 8007950:	69fb      	ldr	r3, [r7, #28]
 8007952:	1ad3      	subs	r3, r2, r3
 8007954:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007958:	d109      	bne.n	800796e <HAL_SD_Init+0xea>
    {
      hsd->ErrorCode = HAL_SD_ERROR_TIMEOUT;
 800795a:	687b      	ldr	r3, [r7, #4]
 800795c:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8007960:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8007962:	687b      	ldr	r3, [r7, #4]
 8007964:	2201      	movs	r2, #1
 8007966:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_TIMEOUT;
 800796a:	2303      	movs	r3, #3
 800796c:	e010      	b.n	8007990 <HAL_SD_Init+0x10c>
  while ((HAL_SD_GetCardState(hsd) != HAL_SD_CARD_TRANSFER))
 800796e:	6878      	ldr	r0, [r7, #4]
 8007970:	f000 fdaa 	bl	80084c8 <HAL_SD_GetCardState>
 8007974:	4603      	mov	r3, r0
 8007976:	2b04      	cmp	r3, #4
 8007978:	d1e7      	bne.n	800794a <HAL_SD_Init+0xc6>
    }
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800797a:	687b      	ldr	r3, [r7, #4]
 800797c:	2200      	movs	r2, #0
 800797e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 8007980:	687b      	ldr	r3, [r7, #4]
 8007982:	2200      	movs	r2, #0
 8007984:	631a      	str	r2, [r3, #48]	; 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 8007986:	687b      	ldr	r3, [r7, #4]
 8007988:	2201      	movs	r2, #1
 800798a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 800798e:	2300      	movs	r3, #0
}
 8007990:	4618      	mov	r0, r3
 8007992:	3728      	adds	r7, #40	; 0x28
 8007994:	46bd      	mov	sp, r7
 8007996:	bd80      	pop	{r7, pc}

08007998 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 8007998:	b5b0      	push	{r4, r5, r7, lr}
 800799a:	b08e      	sub	sp, #56	; 0x38
 800799c:	af04      	add	r7, sp, #16
 800799e:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  SD_InitTypeDef Init;
  uint32_t sdmmc_clk;

  /* Default SDMMC peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 80079a0:	2300      	movs	r3, #0
 80079a2:	60bb      	str	r3, [r7, #8]
  Init.ClockPowerSave      = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 80079a4:	2300      	movs	r3, #0
 80079a6:	60fb      	str	r3, [r7, #12]
  Init.BusWide             = SDMMC_BUS_WIDE_1B;
 80079a8:	2300      	movs	r3, #0
 80079aa:	613b      	str	r3, [r7, #16]
  Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 80079ac:	2300      	movs	r3, #0
 80079ae:	617b      	str	r3, [r7, #20]

  /* Init Clock should be less or equal to 400Khz*/
  sdmmc_clk     = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC);
 80079b0:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 80079b4:	f7fe fcc2 	bl	800633c <HAL_RCCEx_GetPeriphCLKFreq>
 80079b8:	6278      	str	r0, [r7, #36]	; 0x24
  if (sdmmc_clk == 0U)
 80079ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80079bc:	2b00      	cmp	r3, #0
 80079be:	d109      	bne.n	80079d4 <HAL_SD_InitCard+0x3c>
  {
    hsd->State = HAL_SD_STATE_READY;
 80079c0:	687b      	ldr	r3, [r7, #4]
 80079c2:	2201      	movs	r2, #1
 80079c4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode = SDMMC_ERROR_INVALID_PARAMETER;
 80079c8:	687b      	ldr	r3, [r7, #4]
 80079ca:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80079ce:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 80079d0:	2301      	movs	r3, #1
 80079d2:	e079      	b.n	8007ac8 <HAL_SD_InitCard+0x130>
  }
  Init.ClockDiv = sdmmc_clk / (2U * SD_INIT_FREQ);
 80079d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80079d6:	0a1b      	lsrs	r3, r3, #8
 80079d8:	4a3d      	ldr	r2, [pc, #244]	; (8007ad0 <HAL_SD_InitCard+0x138>)
 80079da:	fba2 2303 	umull	r2, r3, r2, r3
 80079de:	091b      	lsrs	r3, r3, #4
 80079e0:	61bb      	str	r3, [r7, #24]

#if (USE_SD_TRANSCEIVER != 0U)
  Init.TranceiverPresent = hsd->Init.TranceiverPresent;
 80079e2:	687b      	ldr	r3, [r7, #4]
 80079e4:	699b      	ldr	r3, [r3, #24]
 80079e6:	61fb      	str	r3, [r7, #28]

  if (hsd->Init.TranceiverPresent == SDMMC_TRANSCEIVER_PRESENT)
 80079e8:	687b      	ldr	r3, [r7, #4]
 80079ea:	699b      	ldr	r3, [r3, #24]
 80079ec:	2b02      	cmp	r3, #2
 80079ee:	d107      	bne.n	8007a00 <HAL_SD_InitCard+0x68>
  {
    /* Set Transceiver polarity */
    hsd->Instance->POWER |= SDMMC_POWER_DIRPOL;
 80079f0:	687b      	ldr	r3, [r7, #4]
 80079f2:	681b      	ldr	r3, [r3, #0]
 80079f4:	681a      	ldr	r2, [r3, #0]
 80079f6:	687b      	ldr	r3, [r7, #4]
 80079f8:	681b      	ldr	r3, [r3, #0]
 80079fa:	f042 0210 	orr.w	r2, r2, #16
 80079fe:	601a      	str	r2, [r3, #0]
  /* Set Transceiver polarity */
  hsd->Instance->POWER |= SDMMC_POWER_DIRPOL;
#endif /* USE_SD_TRANSCEIVER  */

  /* Initialize SDMMC peripheral interface with default configuration */
  (void)SDMMC_Init(hsd->Instance, Init);
 8007a00:	687b      	ldr	r3, [r7, #4]
 8007a02:	681d      	ldr	r5, [r3, #0]
 8007a04:	466c      	mov	r4, sp
 8007a06:	f107 0314 	add.w	r3, r7, #20
 8007a0a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8007a0e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8007a12:	f107 0308 	add.w	r3, r7, #8
 8007a16:	cb0e      	ldmia	r3, {r1, r2, r3}
 8007a18:	4628      	mov	r0, r5
 8007a1a:	f002 ffcd 	bl	800a9b8 <SDMMC_Init>

  /* Set Power State to ON */
  (void)SDMMC_PowerState_ON(hsd->Instance);
 8007a1e:	687b      	ldr	r3, [r7, #4]
 8007a20:	681b      	ldr	r3, [r3, #0]
 8007a22:	4618      	mov	r0, r3
 8007a24:	f002 ffff 	bl	800aa26 <SDMMC_PowerState_ON>

  /* wait 74 Cycles: required power up waiting time before starting
     the SD initialization sequence */
  sdmmc_clk = sdmmc_clk / (2U * Init.ClockDiv);
 8007a28:	69bb      	ldr	r3, [r7, #24]
 8007a2a:	005b      	lsls	r3, r3, #1
 8007a2c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007a2e:	fbb2 f3f3 	udiv	r3, r2, r3
 8007a32:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_Delay(1U + (74U * 1000U / (sdmmc_clk)));
 8007a34:	4a27      	ldr	r2, [pc, #156]	; (8007ad4 <HAL_SD_InitCard+0x13c>)
 8007a36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a38:	fbb2 f3f3 	udiv	r3, r2, r3
 8007a3c:	3301      	adds	r3, #1
 8007a3e:	4618      	mov	r0, r3
 8007a40:	f7f9 fe82 	bl	8001748 <HAL_Delay>

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 8007a44:	6878      	ldr	r0, [r7, #4]
 8007a46:	f000 fe1b 	bl	8008680 <SD_PowerON>
 8007a4a:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 8007a4c:	6a3b      	ldr	r3, [r7, #32]
 8007a4e:	2b00      	cmp	r3, #0
 8007a50:	d00b      	beq.n	8007a6a <HAL_SD_InitCard+0xd2>
  {
    hsd->State = HAL_SD_STATE_READY;
 8007a52:	687b      	ldr	r3, [r7, #4]
 8007a54:	2201      	movs	r2, #1
 8007a56:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8007a5a:	687b      	ldr	r3, [r7, #4]
 8007a5c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007a5e:	6a3b      	ldr	r3, [r7, #32]
 8007a60:	431a      	orrs	r2, r3
 8007a62:	687b      	ldr	r3, [r7, #4]
 8007a64:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8007a66:	2301      	movs	r3, #1
 8007a68:	e02e      	b.n	8007ac8 <HAL_SD_InitCard+0x130>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 8007a6a:	6878      	ldr	r0, [r7, #4]
 8007a6c:	f000 fd4c 	bl	8008508 <SD_InitCard>
 8007a70:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 8007a72:	6a3b      	ldr	r3, [r7, #32]
 8007a74:	2b00      	cmp	r3, #0
 8007a76:	d00b      	beq.n	8007a90 <HAL_SD_InitCard+0xf8>
  {
    hsd->State = HAL_SD_STATE_READY;
 8007a78:	687b      	ldr	r3, [r7, #4]
 8007a7a:	2201      	movs	r2, #1
 8007a7c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8007a80:	687b      	ldr	r3, [r7, #4]
 8007a82:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007a84:	6a3b      	ldr	r3, [r7, #32]
 8007a86:	431a      	orrs	r2, r3
 8007a88:	687b      	ldr	r3, [r7, #4]
 8007a8a:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8007a8c:	2301      	movs	r3, #1
 8007a8e:	e01b      	b.n	8007ac8 <HAL_SD_InitCard+0x130>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8007a90:	687b      	ldr	r3, [r7, #4]
 8007a92:	681b      	ldr	r3, [r3, #0]
 8007a94:	f44f 7100 	mov.w	r1, #512	; 0x200
 8007a98:	4618      	mov	r0, r3
 8007a9a:	f003 f859 	bl	800ab50 <SDMMC_CmdBlockLength>
 8007a9e:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 8007aa0:	6a3b      	ldr	r3, [r7, #32]
 8007aa2:	2b00      	cmp	r3, #0
 8007aa4:	d00f      	beq.n	8007ac6 <HAL_SD_InitCard+0x12e>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8007aa6:	687b      	ldr	r3, [r7, #4]
 8007aa8:	681b      	ldr	r3, [r3, #0]
 8007aaa:	4a0b      	ldr	r2, [pc, #44]	; (8007ad8 <HAL_SD_InitCard+0x140>)
 8007aac:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 8007aae:	687b      	ldr	r3, [r7, #4]
 8007ab0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007ab2:	6a3b      	ldr	r3, [r7, #32]
 8007ab4:	431a      	orrs	r2, r3
 8007ab6:	687b      	ldr	r3, [r7, #4]
 8007ab8:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8007aba:	687b      	ldr	r3, [r7, #4]
 8007abc:	2201      	movs	r2, #1
 8007abe:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8007ac2:	2301      	movs	r3, #1
 8007ac4:	e000      	b.n	8007ac8 <HAL_SD_InitCard+0x130>
  }

  return HAL_OK;
 8007ac6:	2300      	movs	r3, #0
}
 8007ac8:	4618      	mov	r0, r3
 8007aca:	3728      	adds	r7, #40	; 0x28
 8007acc:	46bd      	mov	sp, r7
 8007ace:	bdb0      	pop	{r4, r5, r7, pc}
 8007ad0:	014f8b59 	.word	0x014f8b59
 8007ad4:	00012110 	.word	0x00012110
 8007ad8:	1fe00fff 	.word	0x1fe00fff

08007adc <HAL_SD_ReadBlocks_DMA>:
  * @param  NumberOfBlocks: Number of blocks to read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd,
                                        uint32_t NumberOfBlocks)
{
 8007adc:	b580      	push	{r7, lr}
 8007ade:	b08c      	sub	sp, #48	; 0x30
 8007ae0:	af00      	add	r7, sp, #0
 8007ae2:	60f8      	str	r0, [r7, #12]
 8007ae4:	60b9      	str	r1, [r7, #8]
 8007ae6:	607a      	str	r2, [r7, #4]
 8007ae8:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 8007aea:	687b      	ldr	r3, [r7, #4]
 8007aec:	62bb      	str	r3, [r7, #40]	; 0x28

  if (NULL == pData)
 8007aee:	68bb      	ldr	r3, [r7, #8]
 8007af0:	2b00      	cmp	r3, #0
 8007af2:	d107      	bne.n	8007b04 <HAL_SD_ReadBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8007af4:	68fb      	ldr	r3, [r7, #12]
 8007af6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007af8:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8007afc:	68fb      	ldr	r3, [r7, #12]
 8007afe:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8007b00:	2301      	movs	r3, #1
 8007b02:	e08d      	b.n	8007c20 <HAL_SD_ReadBlocks_DMA+0x144>
  }

  if (hsd->State == HAL_SD_STATE_READY)
 8007b04:	68fb      	ldr	r3, [r7, #12]
 8007b06:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8007b0a:	b2db      	uxtb	r3, r3
 8007b0c:	2b01      	cmp	r3, #1
 8007b0e:	f040 8086 	bne.w	8007c1e <HAL_SD_ReadBlocks_DMA+0x142>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8007b12:	68fb      	ldr	r3, [r7, #12]
 8007b14:	2200      	movs	r2, #0
 8007b16:	639a      	str	r2, [r3, #56]	; 0x38

    if ((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8007b18:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007b1a:	683b      	ldr	r3, [r7, #0]
 8007b1c:	441a      	add	r2, r3
 8007b1e:	68fb      	ldr	r3, [r7, #12]
 8007b20:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007b22:	429a      	cmp	r2, r3
 8007b24:	d907      	bls.n	8007b36 <HAL_SD_ReadBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8007b26:	68fb      	ldr	r3, [r7, #12]
 8007b28:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007b2a:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8007b2e:	68fb      	ldr	r3, [r7, #12]
 8007b30:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 8007b32:	2301      	movs	r3, #1
 8007b34:	e074      	b.n	8007c20 <HAL_SD_ReadBlocks_DMA+0x144>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8007b36:	68fb      	ldr	r3, [r7, #12]
 8007b38:	2203      	movs	r2, #3
 8007b3a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8007b3e:	68fb      	ldr	r3, [r7, #12]
 8007b40:	681b      	ldr	r3, [r3, #0]
 8007b42:	2200      	movs	r2, #0
 8007b44:	62da      	str	r2, [r3, #44]	; 0x2c

    hsd->pRxBuffPtr = pData;
 8007b46:	68fb      	ldr	r3, [r7, #12]
 8007b48:	68ba      	ldr	r2, [r7, #8]
 8007b4a:	629a      	str	r2, [r3, #40]	; 0x28
    hsd->RxXferSize = BLOCKSIZE * NumberOfBlocks;
 8007b4c:	683b      	ldr	r3, [r7, #0]
 8007b4e:	025a      	lsls	r2, r3, #9
 8007b50:	68fb      	ldr	r3, [r7, #12]
 8007b52:	62da      	str	r2, [r3, #44]	; 0x2c

    if (hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8007b54:	68fb      	ldr	r3, [r7, #12]
 8007b56:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007b58:	2b01      	cmp	r3, #1
 8007b5a:	d002      	beq.n	8007b62 <HAL_SD_ReadBlocks_DMA+0x86>
    {
      add *= 512U;
 8007b5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007b5e:	025b      	lsls	r3, r3, #9
 8007b60:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8007b62:	f04f 33ff 	mov.w	r3, #4294967295
 8007b66:	613b      	str	r3, [r7, #16]
    config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 8007b68:	683b      	ldr	r3, [r7, #0]
 8007b6a:	025b      	lsls	r3, r3, #9
 8007b6c:	617b      	str	r3, [r7, #20]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 8007b6e:	2390      	movs	r3, #144	; 0x90
 8007b70:	61bb      	str	r3, [r7, #24]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 8007b72:	2302      	movs	r3, #2
 8007b74:	61fb      	str	r3, [r7, #28]
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8007b76:	2300      	movs	r3, #0
 8007b78:	623b      	str	r3, [r7, #32]
    config.DPSM          = SDMMC_DPSM_DISABLE;
 8007b7a:	2300      	movs	r3, #0
 8007b7c:	627b      	str	r3, [r7, #36]	; 0x24
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 8007b7e:	68fb      	ldr	r3, [r7, #12]
 8007b80:	681b      	ldr	r3, [r3, #0]
 8007b82:	f107 0210 	add.w	r2, r7, #16
 8007b86:	4611      	mov	r1, r2
 8007b88:	4618      	mov	r0, r3
 8007b8a:	f002 ffb5 	bl	800aaf8 <SDMMC_ConfigData>

    __SDMMC_CMDTRANS_ENABLE(hsd->Instance);
 8007b8e:	68fb      	ldr	r3, [r7, #12]
 8007b90:	681b      	ldr	r3, [r3, #0]
 8007b92:	68da      	ldr	r2, [r3, #12]
 8007b94:	68fb      	ldr	r3, [r7, #12]
 8007b96:	681b      	ldr	r3, [r3, #0]
 8007b98:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007b9c:	60da      	str	r2, [r3, #12]
    hsd->Instance->IDMABASE0 = (uint32_t) pData ;
 8007b9e:	68fb      	ldr	r3, [r7, #12]
 8007ba0:	681b      	ldr	r3, [r3, #0]
 8007ba2:	68ba      	ldr	r2, [r7, #8]
 8007ba4:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->Instance->IDMACTRL  = SDMMC_ENABLE_IDMA_SINGLE_BUFF;
 8007ba6:	68fb      	ldr	r3, [r7, #12]
 8007ba8:	681b      	ldr	r3, [r3, #0]
 8007baa:	2201      	movs	r2, #1
 8007bac:	651a      	str	r2, [r3, #80]	; 0x50

    /* Read Blocks in DMA mode */
    if (NumberOfBlocks > 1U)
 8007bae:	683b      	ldr	r3, [r7, #0]
 8007bb0:	2b01      	cmp	r3, #1
 8007bb2:	d90a      	bls.n	8007bca <HAL_SD_ReadBlocks_DMA+0xee>
    {
      hsd->Context = (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 8007bb4:	68fb      	ldr	r3, [r7, #12]
 8007bb6:	2282      	movs	r2, #130	; 0x82
 8007bb8:	631a      	str	r2, [r3, #48]	; 0x30

      /* Read Multi Block command */
      errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 8007bba:	68fb      	ldr	r3, [r7, #12]
 8007bbc:	681b      	ldr	r3, [r3, #0]
 8007bbe:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007bc0:	4618      	mov	r0, r3
 8007bc2:	f003 f80b 	bl	800abdc <SDMMC_CmdReadMultiBlock>
 8007bc6:	62f8      	str	r0, [r7, #44]	; 0x2c
 8007bc8:	e009      	b.n	8007bde <HAL_SD_ReadBlocks_DMA+0x102>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_READ_SINGLE_BLOCK | SD_CONTEXT_DMA);
 8007bca:	68fb      	ldr	r3, [r7, #12]
 8007bcc:	2281      	movs	r2, #129	; 0x81
 8007bce:	631a      	str	r2, [r3, #48]	; 0x30

      /* Read Single Block command */
      errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 8007bd0:	68fb      	ldr	r3, [r7, #12]
 8007bd2:	681b      	ldr	r3, [r3, #0]
 8007bd4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007bd6:	4618      	mov	r0, r3
 8007bd8:	f002 ffdd 	bl	800ab96 <SDMMC_CmdReadSingleBlock>
 8007bdc:	62f8      	str	r0, [r7, #44]	; 0x2c
    }
    if (errorstate != HAL_SD_ERROR_NONE)
 8007bde:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007be0:	2b00      	cmp	r3, #0
 8007be2:	d012      	beq.n	8007c0a <HAL_SD_ReadBlocks_DMA+0x12e>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8007be4:	68fb      	ldr	r3, [r7, #12]
 8007be6:	681b      	ldr	r3, [r3, #0]
 8007be8:	4a0f      	ldr	r2, [pc, #60]	; (8007c28 <HAL_SD_ReadBlocks_DMA+0x14c>)
 8007bea:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8007bec:	68fb      	ldr	r3, [r7, #12]
 8007bee:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007bf0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007bf2:	431a      	orrs	r2, r3
 8007bf4:	68fb      	ldr	r3, [r7, #12]
 8007bf6:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8007bf8:	68fb      	ldr	r3, [r7, #12]
 8007bfa:	2201      	movs	r2, #1
 8007bfc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8007c00:	68fb      	ldr	r3, [r7, #12]
 8007c02:	2200      	movs	r2, #0
 8007c04:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8007c06:	2301      	movs	r3, #1
 8007c08:	e00a      	b.n	8007c20 <HAL_SD_ReadBlocks_DMA+0x144>
    }

    /* Enable transfer interrupts */
    __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_RXOVERR | SDMMC_IT_DATAEND));
 8007c0a:	68fb      	ldr	r3, [r7, #12]
 8007c0c:	681b      	ldr	r3, [r3, #0]
 8007c0e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007c10:	68fb      	ldr	r3, [r7, #12]
 8007c12:	681b      	ldr	r3, [r3, #0]
 8007c14:	f442 7295 	orr.w	r2, r2, #298	; 0x12a
 8007c18:	63da      	str	r2, [r3, #60]	; 0x3c


    return HAL_OK;
 8007c1a:	2300      	movs	r3, #0
 8007c1c:	e000      	b.n	8007c20 <HAL_SD_ReadBlocks_DMA+0x144>
  }
  else
  {
    return HAL_BUSY;
 8007c1e:	2302      	movs	r3, #2
  }
}
 8007c20:	4618      	mov	r0, r3
 8007c22:	3730      	adds	r7, #48	; 0x30
 8007c24:	46bd      	mov	sp, r7
 8007c26:	bd80      	pop	{r7, pc}
 8007c28:	1fe00fff 	.word	0x1fe00fff

08007c2c <HAL_SD_WriteBlocks_DMA>:
  * @param  NumberOfBlocks: Number of blocks to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd,
                                         uint32_t NumberOfBlocks)
{
 8007c2c:	b580      	push	{r7, lr}
 8007c2e:	b08c      	sub	sp, #48	; 0x30
 8007c30:	af00      	add	r7, sp, #0
 8007c32:	60f8      	str	r0, [r7, #12]
 8007c34:	60b9      	str	r1, [r7, #8]
 8007c36:	607a      	str	r2, [r7, #4]
 8007c38:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 8007c3a:	687b      	ldr	r3, [r7, #4]
 8007c3c:	62bb      	str	r3, [r7, #40]	; 0x28

  if (NULL == pData)
 8007c3e:	68bb      	ldr	r3, [r7, #8]
 8007c40:	2b00      	cmp	r3, #0
 8007c42:	d107      	bne.n	8007c54 <HAL_SD_WriteBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8007c44:	68fb      	ldr	r3, [r7, #12]
 8007c46:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007c48:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8007c4c:	68fb      	ldr	r3, [r7, #12]
 8007c4e:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8007c50:	2301      	movs	r3, #1
 8007c52:	e08d      	b.n	8007d70 <HAL_SD_WriteBlocks_DMA+0x144>
  }

  if (hsd->State == HAL_SD_STATE_READY)
 8007c54:	68fb      	ldr	r3, [r7, #12]
 8007c56:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8007c5a:	b2db      	uxtb	r3, r3
 8007c5c:	2b01      	cmp	r3, #1
 8007c5e:	f040 8086 	bne.w	8007d6e <HAL_SD_WriteBlocks_DMA+0x142>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8007c62:	68fb      	ldr	r3, [r7, #12]
 8007c64:	2200      	movs	r2, #0
 8007c66:	639a      	str	r2, [r3, #56]	; 0x38

    if ((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8007c68:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007c6a:	683b      	ldr	r3, [r7, #0]
 8007c6c:	441a      	add	r2, r3
 8007c6e:	68fb      	ldr	r3, [r7, #12]
 8007c70:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007c72:	429a      	cmp	r2, r3
 8007c74:	d907      	bls.n	8007c86 <HAL_SD_WriteBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8007c76:	68fb      	ldr	r3, [r7, #12]
 8007c78:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007c7a:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8007c7e:	68fb      	ldr	r3, [r7, #12]
 8007c80:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 8007c82:	2301      	movs	r3, #1
 8007c84:	e074      	b.n	8007d70 <HAL_SD_WriteBlocks_DMA+0x144>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8007c86:	68fb      	ldr	r3, [r7, #12]
 8007c88:	2203      	movs	r2, #3
 8007c8a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8007c8e:	68fb      	ldr	r3, [r7, #12]
 8007c90:	681b      	ldr	r3, [r3, #0]
 8007c92:	2200      	movs	r2, #0
 8007c94:	62da      	str	r2, [r3, #44]	; 0x2c

    hsd->pTxBuffPtr = pData;
 8007c96:	68fb      	ldr	r3, [r7, #12]
 8007c98:	68ba      	ldr	r2, [r7, #8]
 8007c9a:	621a      	str	r2, [r3, #32]
    hsd->TxXferSize = BLOCKSIZE * NumberOfBlocks;
 8007c9c:	683b      	ldr	r3, [r7, #0]
 8007c9e:	025a      	lsls	r2, r3, #9
 8007ca0:	68fb      	ldr	r3, [r7, #12]
 8007ca2:	625a      	str	r2, [r3, #36]	; 0x24

    if (hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8007ca4:	68fb      	ldr	r3, [r7, #12]
 8007ca6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007ca8:	2b01      	cmp	r3, #1
 8007caa:	d002      	beq.n	8007cb2 <HAL_SD_WriteBlocks_DMA+0x86>
    {
      add *= 512U;
 8007cac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007cae:	025b      	lsls	r3, r3, #9
 8007cb0:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8007cb2:	f04f 33ff 	mov.w	r3, #4294967295
 8007cb6:	613b      	str	r3, [r7, #16]
    config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 8007cb8:	683b      	ldr	r3, [r7, #0]
 8007cba:	025b      	lsls	r3, r3, #9
 8007cbc:	617b      	str	r3, [r7, #20]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 8007cbe:	2390      	movs	r3, #144	; 0x90
 8007cc0:	61bb      	str	r3, [r7, #24]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_CARD;
 8007cc2:	2300      	movs	r3, #0
 8007cc4:	61fb      	str	r3, [r7, #28]
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8007cc6:	2300      	movs	r3, #0
 8007cc8:	623b      	str	r3, [r7, #32]
    config.DPSM          = SDMMC_DPSM_DISABLE;
 8007cca:	2300      	movs	r3, #0
 8007ccc:	627b      	str	r3, [r7, #36]	; 0x24
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 8007cce:	68fb      	ldr	r3, [r7, #12]
 8007cd0:	681b      	ldr	r3, [r3, #0]
 8007cd2:	f107 0210 	add.w	r2, r7, #16
 8007cd6:	4611      	mov	r1, r2
 8007cd8:	4618      	mov	r0, r3
 8007cda:	f002 ff0d 	bl	800aaf8 <SDMMC_ConfigData>


    __SDMMC_CMDTRANS_ENABLE(hsd->Instance);
 8007cde:	68fb      	ldr	r3, [r7, #12]
 8007ce0:	681b      	ldr	r3, [r3, #0]
 8007ce2:	68da      	ldr	r2, [r3, #12]
 8007ce4:	68fb      	ldr	r3, [r7, #12]
 8007ce6:	681b      	ldr	r3, [r3, #0]
 8007ce8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007cec:	60da      	str	r2, [r3, #12]

    hsd->Instance->IDMABASE0 = (uint32_t) pData ;
 8007cee:	68fb      	ldr	r3, [r7, #12]
 8007cf0:	681b      	ldr	r3, [r3, #0]
 8007cf2:	68ba      	ldr	r2, [r7, #8]
 8007cf4:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->Instance->IDMACTRL  = SDMMC_ENABLE_IDMA_SINGLE_BUFF;
 8007cf6:	68fb      	ldr	r3, [r7, #12]
 8007cf8:	681b      	ldr	r3, [r3, #0]
 8007cfa:	2201      	movs	r2, #1
 8007cfc:	651a      	str	r2, [r3, #80]	; 0x50

    /* Write Blocks in Polling mode */
    if (NumberOfBlocks > 1U)
 8007cfe:	683b      	ldr	r3, [r7, #0]
 8007d00:	2b01      	cmp	r3, #1
 8007d02:	d90a      	bls.n	8007d1a <HAL_SD_WriteBlocks_DMA+0xee>
    {
      hsd->Context = (SD_CONTEXT_WRITE_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 8007d04:	68fb      	ldr	r3, [r7, #12]
 8007d06:	22a0      	movs	r2, #160	; 0xa0
 8007d08:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 8007d0a:	68fb      	ldr	r3, [r7, #12]
 8007d0c:	681b      	ldr	r3, [r3, #0]
 8007d0e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007d10:	4618      	mov	r0, r3
 8007d12:	f002 ffa9 	bl	800ac68 <SDMMC_CmdWriteMultiBlock>
 8007d16:	62f8      	str	r0, [r7, #44]	; 0x2c
 8007d18:	e009      	b.n	8007d2e <HAL_SD_WriteBlocks_DMA+0x102>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_WRITE_SINGLE_BLOCK | SD_CONTEXT_DMA);
 8007d1a:	68fb      	ldr	r3, [r7, #12]
 8007d1c:	2290      	movs	r2, #144	; 0x90
 8007d1e:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 8007d20:	68fb      	ldr	r3, [r7, #12]
 8007d22:	681b      	ldr	r3, [r3, #0]
 8007d24:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007d26:	4618      	mov	r0, r3
 8007d28:	f002 ff7b 	bl	800ac22 <SDMMC_CmdWriteSingleBlock>
 8007d2c:	62f8      	str	r0, [r7, #44]	; 0x2c
    }
    if (errorstate != HAL_SD_ERROR_NONE)
 8007d2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007d30:	2b00      	cmp	r3, #0
 8007d32:	d012      	beq.n	8007d5a <HAL_SD_WriteBlocks_DMA+0x12e>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8007d34:	68fb      	ldr	r3, [r7, #12]
 8007d36:	681b      	ldr	r3, [r3, #0]
 8007d38:	4a0f      	ldr	r2, [pc, #60]	; (8007d78 <HAL_SD_WriteBlocks_DMA+0x14c>)
 8007d3a:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8007d3c:	68fb      	ldr	r3, [r7, #12]
 8007d3e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007d40:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007d42:	431a      	orrs	r2, r3
 8007d44:	68fb      	ldr	r3, [r7, #12]
 8007d46:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8007d48:	68fb      	ldr	r3, [r7, #12]
 8007d4a:	2201      	movs	r2, #1
 8007d4c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8007d50:	68fb      	ldr	r3, [r7, #12]
 8007d52:	2200      	movs	r2, #0
 8007d54:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8007d56:	2301      	movs	r3, #1
 8007d58:	e00a      	b.n	8007d70 <HAL_SD_WriteBlocks_DMA+0x144>
    }

    /* Enable transfer interrupts */
    __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_TXUNDERR | SDMMC_IT_DATAEND));
 8007d5a:	68fb      	ldr	r3, [r7, #12]
 8007d5c:	681b      	ldr	r3, [r3, #0]
 8007d5e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007d60:	68fb      	ldr	r3, [r7, #12]
 8007d62:	681b      	ldr	r3, [r3, #0]
 8007d64:	f442 728d 	orr.w	r2, r2, #282	; 0x11a
 8007d68:	63da      	str	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8007d6a:	2300      	movs	r3, #0
 8007d6c:	e000      	b.n	8007d70 <HAL_SD_WriteBlocks_DMA+0x144>
  }
  else
  {
    return HAL_BUSY;
 8007d6e:	2302      	movs	r3, #2
  }
}
 8007d70:	4618      	mov	r0, r3
 8007d72:	3730      	adds	r7, #48	; 0x30
 8007d74:	46bd      	mov	sp, r7
 8007d76:	bd80      	pop	{r7, pc}
 8007d78:	1fe00fff 	.word	0x1fe00fff

08007d7c <HAL_SD_DriveTransceiver_1_8V_Callback>:
  * @brief  Enable/Disable the SD Transceiver 1.8V Mode Callback.
  * @param  status: Voltage Switch State
  * @retval None
  */
__weak  void HAL_SD_DriveTransceiver_1_8V_Callback(FlagStatus status)
{
 8007d7c:	b480      	push	{r7}
 8007d7e:	b083      	sub	sp, #12
 8007d80:	af00      	add	r7, sp, #0
 8007d82:	4603      	mov	r3, r0
 8007d84:	71fb      	strb	r3, [r7, #7]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(status);
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_EnableTransceiver could be implemented in the user file
   */
}
 8007d86:	bf00      	nop
 8007d88:	370c      	adds	r7, #12
 8007d8a:	46bd      	mov	sp, r7
 8007d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d90:	4770      	bx	lr
	...

08007d94 <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 8007d94:	b480      	push	{r7}
 8007d96:	b083      	sub	sp, #12
 8007d98:	af00      	add	r7, sp, #0
 8007d9a:	6078      	str	r0, [r7, #4]
 8007d9c:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 8007d9e:	687b      	ldr	r3, [r7, #4]
 8007da0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007da2:	0f9b      	lsrs	r3, r3, #30
 8007da4:	b2da      	uxtb	r2, r3
 8007da6:	683b      	ldr	r3, [r7, #0]
 8007da8:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 8007daa:	687b      	ldr	r3, [r7, #4]
 8007dac:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007dae:	0e9b      	lsrs	r3, r3, #26
 8007db0:	b2db      	uxtb	r3, r3
 8007db2:	f003 030f 	and.w	r3, r3, #15
 8007db6:	b2da      	uxtb	r2, r3
 8007db8:	683b      	ldr	r3, [r7, #0]
 8007dba:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 8007dbc:	687b      	ldr	r3, [r7, #4]
 8007dbe:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007dc0:	0e1b      	lsrs	r3, r3, #24
 8007dc2:	b2db      	uxtb	r3, r3
 8007dc4:	f003 0303 	and.w	r3, r3, #3
 8007dc8:	b2da      	uxtb	r2, r3
 8007dca:	683b      	ldr	r3, [r7, #0]
 8007dcc:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 8007dce:	687b      	ldr	r3, [r7, #4]
 8007dd0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007dd2:	0c1b      	lsrs	r3, r3, #16
 8007dd4:	b2da      	uxtb	r2, r3
 8007dd6:	683b      	ldr	r3, [r7, #0]
 8007dd8:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 8007dda:	687b      	ldr	r3, [r7, #4]
 8007ddc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007dde:	0a1b      	lsrs	r3, r3, #8
 8007de0:	b2da      	uxtb	r2, r3
 8007de2:	683b      	ldr	r3, [r7, #0]
 8007de4:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 8007de6:	687b      	ldr	r3, [r7, #4]
 8007de8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007dea:	b2da      	uxtb	r2, r3
 8007dec:	683b      	ldr	r3, [r7, #0]
 8007dee:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 8007df0:	687b      	ldr	r3, [r7, #4]
 8007df2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007df4:	0d1b      	lsrs	r3, r3, #20
 8007df6:	b29a      	uxth	r2, r3
 8007df8:	683b      	ldr	r3, [r7, #0]
 8007dfa:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 8007dfc:	687b      	ldr	r3, [r7, #4]
 8007dfe:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007e00:	0c1b      	lsrs	r3, r3, #16
 8007e02:	b2db      	uxtb	r3, r3
 8007e04:	f003 030f 	and.w	r3, r3, #15
 8007e08:	b2da      	uxtb	r2, r3
 8007e0a:	683b      	ldr	r3, [r7, #0]
 8007e0c:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 8007e0e:	687b      	ldr	r3, [r7, #4]
 8007e10:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007e12:	0bdb      	lsrs	r3, r3, #15
 8007e14:	b2db      	uxtb	r3, r3
 8007e16:	f003 0301 	and.w	r3, r3, #1
 8007e1a:	b2da      	uxtb	r2, r3
 8007e1c:	683b      	ldr	r3, [r7, #0]
 8007e1e:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 8007e20:	687b      	ldr	r3, [r7, #4]
 8007e22:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007e24:	0b9b      	lsrs	r3, r3, #14
 8007e26:	b2db      	uxtb	r3, r3
 8007e28:	f003 0301 	and.w	r3, r3, #1
 8007e2c:	b2da      	uxtb	r2, r3
 8007e2e:	683b      	ldr	r3, [r7, #0]
 8007e30:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 8007e32:	687b      	ldr	r3, [r7, #4]
 8007e34:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007e36:	0b5b      	lsrs	r3, r3, #13
 8007e38:	b2db      	uxtb	r3, r3
 8007e3a:	f003 0301 	and.w	r3, r3, #1
 8007e3e:	b2da      	uxtb	r2, r3
 8007e40:	683b      	ldr	r3, [r7, #0]
 8007e42:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 8007e44:	687b      	ldr	r3, [r7, #4]
 8007e46:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007e48:	0b1b      	lsrs	r3, r3, #12
 8007e4a:	b2db      	uxtb	r3, r3
 8007e4c:	f003 0301 	and.w	r3, r3, #1
 8007e50:	b2da      	uxtb	r2, r3
 8007e52:	683b      	ldr	r3, [r7, #0]
 8007e54:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 8007e56:	683b      	ldr	r3, [r7, #0]
 8007e58:	2200      	movs	r2, #0
 8007e5a:	735a      	strb	r2, [r3, #13]

  if (hsd->SdCard.CardType == CARD_SDSC)
 8007e5c:	687b      	ldr	r3, [r7, #4]
 8007e5e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007e60:	2b00      	cmp	r3, #0
 8007e62:	d163      	bne.n	8007f2c <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 8007e64:	687b      	ldr	r3, [r7, #4]
 8007e66:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007e68:	009a      	lsls	r2, r3, #2
 8007e6a:	f640 73fc 	movw	r3, #4092	; 0xffc
 8007e6e:	4013      	ands	r3, r2
 8007e70:	687a      	ldr	r2, [r7, #4]
 8007e72:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8007e74:	0f92      	lsrs	r2, r2, #30
 8007e76:	431a      	orrs	r2, r3
 8007e78:	683b      	ldr	r3, [r7, #0]
 8007e7a:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 8007e7c:	687b      	ldr	r3, [r7, #4]
 8007e7e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007e80:	0edb      	lsrs	r3, r3, #27
 8007e82:	b2db      	uxtb	r3, r3
 8007e84:	f003 0307 	and.w	r3, r3, #7
 8007e88:	b2da      	uxtb	r2, r3
 8007e8a:	683b      	ldr	r3, [r7, #0]
 8007e8c:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 8007e8e:	687b      	ldr	r3, [r7, #4]
 8007e90:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007e92:	0e1b      	lsrs	r3, r3, #24
 8007e94:	b2db      	uxtb	r3, r3
 8007e96:	f003 0307 	and.w	r3, r3, #7
 8007e9a:	b2da      	uxtb	r2, r3
 8007e9c:	683b      	ldr	r3, [r7, #0]
 8007e9e:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 8007ea0:	687b      	ldr	r3, [r7, #4]
 8007ea2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007ea4:	0d5b      	lsrs	r3, r3, #21
 8007ea6:	b2db      	uxtb	r3, r3
 8007ea8:	f003 0307 	and.w	r3, r3, #7
 8007eac:	b2da      	uxtb	r2, r3
 8007eae:	683b      	ldr	r3, [r7, #0]
 8007eb0:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 8007eb2:	687b      	ldr	r3, [r7, #4]
 8007eb4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007eb6:	0c9b      	lsrs	r3, r3, #18
 8007eb8:	b2db      	uxtb	r3, r3
 8007eba:	f003 0307 	and.w	r3, r3, #7
 8007ebe:	b2da      	uxtb	r2, r3
 8007ec0:	683b      	ldr	r3, [r7, #0]
 8007ec2:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 8007ec4:	687b      	ldr	r3, [r7, #4]
 8007ec6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007ec8:	0bdb      	lsrs	r3, r3, #15
 8007eca:	b2db      	uxtb	r3, r3
 8007ecc:	f003 0307 	and.w	r3, r3, #7
 8007ed0:	b2da      	uxtb	r2, r3
 8007ed2:	683b      	ldr	r3, [r7, #0]
 8007ed4:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 8007ed6:	683b      	ldr	r3, [r7, #0]
 8007ed8:	691b      	ldr	r3, [r3, #16]
 8007eda:	1c5a      	adds	r2, r3, #1
 8007edc:	687b      	ldr	r3, [r7, #4]
 8007ede:	64da      	str	r2, [r3, #76]	; 0x4c
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 8007ee0:	683b      	ldr	r3, [r7, #0]
 8007ee2:	7e1b      	ldrb	r3, [r3, #24]
 8007ee4:	b2db      	uxtb	r3, r3
 8007ee6:	f003 0307 	and.w	r3, r3, #7
 8007eea:	3302      	adds	r3, #2
 8007eec:	2201      	movs	r2, #1
 8007eee:	fa02 f303 	lsl.w	r3, r2, r3
 8007ef2:	687a      	ldr	r2, [r7, #4]
 8007ef4:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8007ef6:	fb02 f203 	mul.w	r2, r2, r3
 8007efa:	687b      	ldr	r3, [r7, #4]
 8007efc:	64da      	str	r2, [r3, #76]	; 0x4c
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 8007efe:	683b      	ldr	r3, [r7, #0]
 8007f00:	7a1b      	ldrb	r3, [r3, #8]
 8007f02:	b2db      	uxtb	r3, r3
 8007f04:	f003 030f 	and.w	r3, r3, #15
 8007f08:	2201      	movs	r2, #1
 8007f0a:	409a      	lsls	r2, r3
 8007f0c:	687b      	ldr	r3, [r7, #4]
 8007f0e:	651a      	str	r2, [r3, #80]	; 0x50

    hsd->SdCard.LogBlockNbr = (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 8007f10:	687b      	ldr	r3, [r7, #4]
 8007f12:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007f14:	687a      	ldr	r2, [r7, #4]
 8007f16:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8007f18:	0a52      	lsrs	r2, r2, #9
 8007f1a:	fb02 f203 	mul.w	r2, r2, r3
 8007f1e:	687b      	ldr	r3, [r7, #4]
 8007f20:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.LogBlockSize = 512U;
 8007f22:	687b      	ldr	r3, [r7, #4]
 8007f24:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007f28:	659a      	str	r2, [r3, #88]	; 0x58
 8007f2a:	e031      	b.n	8007f90 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if (hsd->SdCard.CardType == CARD_SDHC_SDXC)
 8007f2c:	687b      	ldr	r3, [r7, #4]
 8007f2e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007f30:	2b01      	cmp	r3, #1
 8007f32:	d11d      	bne.n	8007f70 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 8007f34:	687b      	ldr	r3, [r7, #4]
 8007f36:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007f38:	041b      	lsls	r3, r3, #16
 8007f3a:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 8007f3e:	687b      	ldr	r3, [r7, #4]
 8007f40:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007f42:	0c1b      	lsrs	r3, r3, #16
 8007f44:	431a      	orrs	r2, r3
 8007f46:	683b      	ldr	r3, [r7, #0]
 8007f48:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 8007f4a:	683b      	ldr	r3, [r7, #0]
 8007f4c:	691b      	ldr	r3, [r3, #16]
 8007f4e:	3301      	adds	r3, #1
 8007f50:	029a      	lsls	r2, r3, #10
 8007f52:	687b      	ldr	r3, [r7, #4]
 8007f54:	64da      	str	r2, [r3, #76]	; 0x4c
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 8007f56:	687b      	ldr	r3, [r7, #4]
 8007f58:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8007f5a:	687b      	ldr	r3, [r7, #4]
 8007f5c:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockSize = 512U;
 8007f5e:	687b      	ldr	r3, [r7, #4]
 8007f60:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007f64:	651a      	str	r2, [r3, #80]	; 0x50
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 8007f66:	687b      	ldr	r3, [r7, #4]
 8007f68:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8007f6a:	687b      	ldr	r3, [r7, #4]
 8007f6c:	659a      	str	r2, [r3, #88]	; 0x58
 8007f6e:	e00f      	b.n	8007f90 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8007f70:	687b      	ldr	r3, [r7, #4]
 8007f72:	681b      	ldr	r3, [r3, #0]
 8007f74:	4a58      	ldr	r2, [pc, #352]	; (80080d8 <HAL_SD_GetCardCSD+0x344>)
 8007f76:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8007f78:	687b      	ldr	r3, [r7, #4]
 8007f7a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007f7c:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8007f80:	687b      	ldr	r3, [r7, #4]
 8007f82:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8007f84:	687b      	ldr	r3, [r7, #4]
 8007f86:	2201      	movs	r2, #1
 8007f88:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8007f8c:	2301      	movs	r3, #1
 8007f8e:	e09d      	b.n	80080cc <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 8007f90:	687b      	ldr	r3, [r7, #4]
 8007f92:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007f94:	0b9b      	lsrs	r3, r3, #14
 8007f96:	b2db      	uxtb	r3, r3
 8007f98:	f003 0301 	and.w	r3, r3, #1
 8007f9c:	b2da      	uxtb	r2, r3
 8007f9e:	683b      	ldr	r3, [r7, #0]
 8007fa0:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 8007fa2:	687b      	ldr	r3, [r7, #4]
 8007fa4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007fa6:	09db      	lsrs	r3, r3, #7
 8007fa8:	b2db      	uxtb	r3, r3
 8007faa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007fae:	b2da      	uxtb	r2, r3
 8007fb0:	683b      	ldr	r3, [r7, #0]
 8007fb2:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 8007fb4:	687b      	ldr	r3, [r7, #4]
 8007fb6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007fb8:	b2db      	uxtb	r3, r3
 8007fba:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007fbe:	b2da      	uxtb	r2, r3
 8007fc0:	683b      	ldr	r3, [r7, #0]
 8007fc2:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 8007fc4:	687b      	ldr	r3, [r7, #4]
 8007fc6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007fc8:	0fdb      	lsrs	r3, r3, #31
 8007fca:	b2da      	uxtb	r2, r3
 8007fcc:	683b      	ldr	r3, [r7, #0]
 8007fce:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 8007fd0:	687b      	ldr	r3, [r7, #4]
 8007fd2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007fd4:	0f5b      	lsrs	r3, r3, #29
 8007fd6:	b2db      	uxtb	r3, r3
 8007fd8:	f003 0303 	and.w	r3, r3, #3
 8007fdc:	b2da      	uxtb	r2, r3
 8007fde:	683b      	ldr	r3, [r7, #0]
 8007fe0:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 8007fe2:	687b      	ldr	r3, [r7, #4]
 8007fe4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007fe6:	0e9b      	lsrs	r3, r3, #26
 8007fe8:	b2db      	uxtb	r3, r3
 8007fea:	f003 0307 	and.w	r3, r3, #7
 8007fee:	b2da      	uxtb	r2, r3
 8007ff0:	683b      	ldr	r3, [r7, #0]
 8007ff2:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen = (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 8007ff4:	687b      	ldr	r3, [r7, #4]
 8007ff6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007ff8:	0d9b      	lsrs	r3, r3, #22
 8007ffa:	b2db      	uxtb	r3, r3
 8007ffc:	f003 030f 	and.w	r3, r3, #15
 8008000:	b2da      	uxtb	r2, r3
 8008002:	683b      	ldr	r3, [r7, #0]
 8008004:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 8008006:	687b      	ldr	r3, [r7, #4]
 8008008:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800800a:	0d5b      	lsrs	r3, r3, #21
 800800c:	b2db      	uxtb	r3, r3
 800800e:	f003 0301 	and.w	r3, r3, #1
 8008012:	b2da      	uxtb	r2, r3
 8008014:	683b      	ldr	r3, [r7, #0]
 8008016:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 800801a:	683b      	ldr	r3, [r7, #0]
 800801c:	2200      	movs	r2, #0
 800801e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 8008022:	687b      	ldr	r3, [r7, #4]
 8008024:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008026:	0c1b      	lsrs	r3, r3, #16
 8008028:	b2db      	uxtb	r3, r3
 800802a:	f003 0301 	and.w	r3, r3, #1
 800802e:	b2da      	uxtb	r2, r3
 8008030:	683b      	ldr	r3, [r7, #0]
 8008032:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 8008036:	687b      	ldr	r3, [r7, #4]
 8008038:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800803a:	0bdb      	lsrs	r3, r3, #15
 800803c:	b2db      	uxtb	r3, r3
 800803e:	f003 0301 	and.w	r3, r3, #1
 8008042:	b2da      	uxtb	r2, r3
 8008044:	683b      	ldr	r3, [r7, #0]
 8008046:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 800804a:	687b      	ldr	r3, [r7, #4]
 800804c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800804e:	0b9b      	lsrs	r3, r3, #14
 8008050:	b2db      	uxtb	r3, r3
 8008052:	f003 0301 	and.w	r3, r3, #1
 8008056:	b2da      	uxtb	r2, r3
 8008058:	683b      	ldr	r3, [r7, #0]
 800805a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 800805e:	687b      	ldr	r3, [r7, #4]
 8008060:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008062:	0b5b      	lsrs	r3, r3, #13
 8008064:	b2db      	uxtb	r3, r3
 8008066:	f003 0301 	and.w	r3, r3, #1
 800806a:	b2da      	uxtb	r2, r3
 800806c:	683b      	ldr	r3, [r7, #0]
 800806e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 8008072:	687b      	ldr	r3, [r7, #4]
 8008074:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008076:	0b1b      	lsrs	r3, r3, #12
 8008078:	b2db      	uxtb	r3, r3
 800807a:	f003 0301 	and.w	r3, r3, #1
 800807e:	b2da      	uxtb	r2, r3
 8008080:	683b      	ldr	r3, [r7, #0]
 8008082:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 8008086:	687b      	ldr	r3, [r7, #4]
 8008088:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800808a:	0a9b      	lsrs	r3, r3, #10
 800808c:	b2db      	uxtb	r3, r3
 800808e:	f003 0303 	and.w	r3, r3, #3
 8008092:	b2da      	uxtb	r2, r3
 8008094:	683b      	ldr	r3, [r7, #0]
 8008096:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC = (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 800809a:	687b      	ldr	r3, [r7, #4]
 800809c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800809e:	0a1b      	lsrs	r3, r3, #8
 80080a0:	b2db      	uxtb	r3, r3
 80080a2:	f003 0303 	and.w	r3, r3, #3
 80080a6:	b2da      	uxtb	r2, r3
 80080a8:	683b      	ldr	r3, [r7, #0]
 80080aa:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 80080ae:	687b      	ldr	r3, [r7, #4]
 80080b0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80080b2:	085b      	lsrs	r3, r3, #1
 80080b4:	b2db      	uxtb	r3, r3
 80080b6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80080ba:	b2da      	uxtb	r2, r3
 80080bc:	683b      	ldr	r3, [r7, #0]
 80080be:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 80080c2:	683b      	ldr	r3, [r7, #0]
 80080c4:	2201      	movs	r2, #1
 80080c6:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 80080ca:	2300      	movs	r3, #0
}
 80080cc:	4618      	mov	r0, r3
 80080ce:	370c      	adds	r7, #12
 80080d0:	46bd      	mov	sp, r7
 80080d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080d6:	4770      	bx	lr
 80080d8:	1fe00fff 	.word	0x1fe00fff

080080dc <HAL_SD_GetCardStatus>:
  * @param  pStatus: Pointer to the HAL_SD_CardStatusTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardStatus(SD_HandleTypeDef *hsd, HAL_SD_CardStatusTypeDef *pStatus)
{
 80080dc:	b580      	push	{r7, lr}
 80080de:	b094      	sub	sp, #80	; 0x50
 80080e0:	af00      	add	r7, sp, #0
 80080e2:	6078      	str	r0, [r7, #4]
 80080e4:	6039      	str	r1, [r7, #0]
  uint32_t sd_status[16];
  uint32_t errorstate;
  HAL_StatusTypeDef status = HAL_OK;
 80080e6:	2300      	movs	r3, #0
 80080e8:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f

  errorstate = SD_SendSDStatus(hsd, sd_status);
 80080ec:	f107 0308 	add.w	r3, r7, #8
 80080f0:	4619      	mov	r1, r3
 80080f2:	6878      	ldr	r0, [r7, #4]
 80080f4:	f000 fbcc 	bl	8008890 <SD_SendSDStatus>
 80080f8:	64b8      	str	r0, [r7, #72]	; 0x48
  if (errorstate != HAL_SD_ERROR_NONE)
 80080fa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80080fc:	2b00      	cmp	r3, #0
 80080fe:	d011      	beq.n	8008124 <HAL_SD_GetCardStatus+0x48>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8008100:	687b      	ldr	r3, [r7, #4]
 8008102:	681b      	ldr	r3, [r3, #0]
 8008104:	4a4f      	ldr	r2, [pc, #316]	; (8008244 <HAL_SD_GetCardStatus+0x168>)
 8008106:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 8008108:	687b      	ldr	r3, [r7, #4]
 800810a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800810c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800810e:	431a      	orrs	r2, r3
 8008110:	687b      	ldr	r3, [r7, #4]
 8008112:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8008114:	687b      	ldr	r3, [r7, #4]
 8008116:	2201      	movs	r2, #1
 8008118:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    status = HAL_ERROR;
 800811c:	2301      	movs	r3, #1
 800811e:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 8008122:	e070      	b.n	8008206 <HAL_SD_GetCardStatus+0x12a>
  }
  else
  {
    pStatus->DataBusWidth = (uint8_t)((sd_status[0] & 0xC0U) >> 6U);
 8008124:	68bb      	ldr	r3, [r7, #8]
 8008126:	099b      	lsrs	r3, r3, #6
 8008128:	b2db      	uxtb	r3, r3
 800812a:	f003 0303 	and.w	r3, r3, #3
 800812e:	b2da      	uxtb	r2, r3
 8008130:	683b      	ldr	r3, [r7, #0]
 8008132:	701a      	strb	r2, [r3, #0]

    pStatus->SecuredMode = (uint8_t)((sd_status[0] & 0x20U) >> 5U);
 8008134:	68bb      	ldr	r3, [r7, #8]
 8008136:	095b      	lsrs	r3, r3, #5
 8008138:	b2db      	uxtb	r3, r3
 800813a:	f003 0301 	and.w	r3, r3, #1
 800813e:	b2da      	uxtb	r2, r3
 8008140:	683b      	ldr	r3, [r7, #0]
 8008142:	705a      	strb	r2, [r3, #1]

    pStatus->CardType = (uint16_t)(((sd_status[0] & 0x00FF0000U) >> 8U) | ((sd_status[0] & 0xFF000000U) >> 24U));
 8008144:	68bb      	ldr	r3, [r7, #8]
 8008146:	0a1b      	lsrs	r3, r3, #8
 8008148:	b29b      	uxth	r3, r3
 800814a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800814e:	b29a      	uxth	r2, r3
 8008150:	68bb      	ldr	r3, [r7, #8]
 8008152:	0e1b      	lsrs	r3, r3, #24
 8008154:	b29b      	uxth	r3, r3
 8008156:	4313      	orrs	r3, r2
 8008158:	b29a      	uxth	r2, r3
 800815a:	683b      	ldr	r3, [r7, #0]
 800815c:	805a      	strh	r2, [r3, #2]

    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 800815e:	68fb      	ldr	r3, [r7, #12]
 8008160:	061a      	lsls	r2, r3, #24
 8008162:	68fb      	ldr	r3, [r7, #12]
 8008164:	021b      	lsls	r3, r3, #8
 8008166:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800816a:	431a      	orrs	r2, r3
                                  ((sd_status[1] & 0xFF0000U) >> 8U) | ((sd_status[1] & 0xFF000000U) >> 24U));
 800816c:	68fb      	ldr	r3, [r7, #12]
 800816e:	0a1b      	lsrs	r3, r3, #8
 8008170:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 8008174:	431a      	orrs	r2, r3
                                  ((sd_status[1] & 0xFF0000U) >> 8U) | ((sd_status[1] & 0xFF000000U) >> 24U));
 8008176:	68fb      	ldr	r3, [r7, #12]
 8008178:	0e1b      	lsrs	r3, r3, #24
 800817a:	431a      	orrs	r2, r3
    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 800817c:	683b      	ldr	r3, [r7, #0]
 800817e:	605a      	str	r2, [r3, #4]

    pStatus->SpeedClass = (uint8_t)(sd_status[2] & 0xFFU);
 8008180:	693b      	ldr	r3, [r7, #16]
 8008182:	b2da      	uxtb	r2, r3
 8008184:	683b      	ldr	r3, [r7, #0]
 8008186:	721a      	strb	r2, [r3, #8]

    pStatus->PerformanceMove = (uint8_t)((sd_status[2] & 0xFF00U) >> 8U);
 8008188:	693b      	ldr	r3, [r7, #16]
 800818a:	0a1b      	lsrs	r3, r3, #8
 800818c:	b2da      	uxtb	r2, r3
 800818e:	683b      	ldr	r3, [r7, #0]
 8008190:	725a      	strb	r2, [r3, #9]

    pStatus->AllocationUnitSize = (uint8_t)((sd_status[2] & 0xF00000U) >> 20U);
 8008192:	693b      	ldr	r3, [r7, #16]
 8008194:	0d1b      	lsrs	r3, r3, #20
 8008196:	b2db      	uxtb	r3, r3
 8008198:	f003 030f 	and.w	r3, r3, #15
 800819c:	b2da      	uxtb	r2, r3
 800819e:	683b      	ldr	r3, [r7, #0]
 80081a0:	729a      	strb	r2, [r3, #10]

    pStatus->EraseSize = (uint16_t)(((sd_status[2] & 0xFF000000U) >> 16U) | (sd_status[3] & 0xFFU));
 80081a2:	693b      	ldr	r3, [r7, #16]
 80081a4:	0c1b      	lsrs	r3, r3, #16
 80081a6:	b29b      	uxth	r3, r3
 80081a8:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80081ac:	b29a      	uxth	r2, r3
 80081ae:	697b      	ldr	r3, [r7, #20]
 80081b0:	b29b      	uxth	r3, r3
 80081b2:	b2db      	uxtb	r3, r3
 80081b4:	b29b      	uxth	r3, r3
 80081b6:	4313      	orrs	r3, r2
 80081b8:	b29a      	uxth	r2, r3
 80081ba:	683b      	ldr	r3, [r7, #0]
 80081bc:	819a      	strh	r2, [r3, #12]

    pStatus->EraseTimeout = (uint8_t)((sd_status[3] & 0xFC00U) >> 10U);
 80081be:	697b      	ldr	r3, [r7, #20]
 80081c0:	0a9b      	lsrs	r3, r3, #10
 80081c2:	b2db      	uxtb	r3, r3
 80081c4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80081c8:	b2da      	uxtb	r2, r3
 80081ca:	683b      	ldr	r3, [r7, #0]
 80081cc:	739a      	strb	r2, [r3, #14]

    pStatus->EraseOffset = (uint8_t)((sd_status[3] & 0x0300U) >> 8U);
 80081ce:	697b      	ldr	r3, [r7, #20]
 80081d0:	0a1b      	lsrs	r3, r3, #8
 80081d2:	b2db      	uxtb	r3, r3
 80081d4:	f003 0303 	and.w	r3, r3, #3
 80081d8:	b2da      	uxtb	r2, r3
 80081da:	683b      	ldr	r3, [r7, #0]
 80081dc:	73da      	strb	r2, [r3, #15]

    pStatus->UhsSpeedGrade = (uint8_t)((sd_status[3] & 0x00F0U) >> 4U);
 80081de:	697b      	ldr	r3, [r7, #20]
 80081e0:	091b      	lsrs	r3, r3, #4
 80081e2:	b2db      	uxtb	r3, r3
 80081e4:	f003 030f 	and.w	r3, r3, #15
 80081e8:	b2da      	uxtb	r2, r3
 80081ea:	683b      	ldr	r3, [r7, #0]
 80081ec:	741a      	strb	r2, [r3, #16]
    pStatus->UhsAllocationUnitSize = (uint8_t)(sd_status[3] & 0x000FU) ;
 80081ee:	697b      	ldr	r3, [r7, #20]
 80081f0:	b2db      	uxtb	r3, r3
 80081f2:	f003 030f 	and.w	r3, r3, #15
 80081f6:	b2da      	uxtb	r2, r3
 80081f8:	683b      	ldr	r3, [r7, #0]
 80081fa:	745a      	strb	r2, [r3, #17]
    pStatus->VideoSpeedClass = (uint8_t)((sd_status[4] & 0xFF000000U) >> 24U);
 80081fc:	69bb      	ldr	r3, [r7, #24]
 80081fe:	0e1b      	lsrs	r3, r3, #24
 8008200:	b2da      	uxtb	r2, r3
 8008202:	683b      	ldr	r3, [r7, #0]
 8008204:	749a      	strb	r2, [r3, #18]
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8008206:	687b      	ldr	r3, [r7, #4]
 8008208:	681b      	ldr	r3, [r3, #0]
 800820a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800820e:	4618      	mov	r0, r3
 8008210:	f002 fc9e 	bl	800ab50 <SDMMC_CmdBlockLength>
 8008214:	64b8      	str	r0, [r7, #72]	; 0x48
  if (errorstate != HAL_SD_ERROR_NONE)
 8008216:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008218:	2b00      	cmp	r3, #0
 800821a:	d00d      	beq.n	8008238 <HAL_SD_GetCardStatus+0x15c>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800821c:	687b      	ldr	r3, [r7, #4]
 800821e:	681b      	ldr	r3, [r3, #0]
 8008220:	4a08      	ldr	r2, [pc, #32]	; (8008244 <HAL_SD_GetCardStatus+0x168>)
 8008222:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode = errorstate;
 8008224:	687b      	ldr	r3, [r7, #4]
 8008226:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008228:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 800822a:	687b      	ldr	r3, [r7, #4]
 800822c:	2201      	movs	r2, #1
 800822e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    status = HAL_ERROR;
 8008232:	2301      	movs	r3, #1
 8008234:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
  }

  return status;
 8008238:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
}
 800823c:	4618      	mov	r0, r3
 800823e:	3750      	adds	r7, #80	; 0x50
 8008240:	46bd      	mov	sp, r7
 8008242:	bd80      	pop	{r7, pc}
 8008244:	1fe00fff 	.word	0x1fe00fff

08008248 <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 8008248:	b480      	push	{r7}
 800824a:	b083      	sub	sp, #12
 800824c:	af00      	add	r7, sp, #0
 800824e:	6078      	str	r0, [r7, #4]
 8008250:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 8008252:	687b      	ldr	r3, [r7, #4]
 8008254:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008256:	683b      	ldr	r3, [r7, #0]
 8008258:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 800825a:	687b      	ldr	r3, [r7, #4]
 800825c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800825e:	683b      	ldr	r3, [r7, #0]
 8008260:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 8008262:	687b      	ldr	r3, [r7, #4]
 8008264:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008266:	683b      	ldr	r3, [r7, #0]
 8008268:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 800826a:	687b      	ldr	r3, [r7, #4]
 800826c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800826e:	683b      	ldr	r3, [r7, #0]
 8008270:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 8008272:	687b      	ldr	r3, [r7, #4]
 8008274:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8008276:	683b      	ldr	r3, [r7, #0]
 8008278:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 800827a:	687b      	ldr	r3, [r7, #4]
 800827c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800827e:	683b      	ldr	r3, [r7, #0]
 8008280:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 8008282:	687b      	ldr	r3, [r7, #4]
 8008284:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8008286:	683b      	ldr	r3, [r7, #0]
 8008288:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 800828a:	687b      	ldr	r3, [r7, #4]
 800828c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800828e:	683b      	ldr	r3, [r7, #0]
 8008290:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 8008292:	2300      	movs	r3, #0
}
 8008294:	4618      	mov	r0, r3
 8008296:	370c      	adds	r7, #12
 8008298:	46bd      	mov	sp, r7
 800829a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800829e:	4770      	bx	lr

080082a0 <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDMMC_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDMMC_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 80082a0:	b5b0      	push	{r4, r5, r7, lr}
 80082a2:	b090      	sub	sp, #64	; 0x40
 80082a4:	af04      	add	r7, sp, #16
 80082a6:	6078      	str	r0, [r7, #4]
 80082a8:	6039      	str	r1, [r7, #0]
  SDMMC_InitTypeDef Init;
  uint32_t errorstate;
  uint32_t sdmmc_clk;
  HAL_StatusTypeDef status = HAL_OK;
 80082aa:	2300      	movs	r3, #0
 80082ac:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

  /* Check the parameters */
  assert_param(IS_SDMMC_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 80082b0:	687b      	ldr	r3, [r7, #4]
 80082b2:	2203      	movs	r2, #3
 80082b4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if (hsd->SdCard.CardType != CARD_SECURED)
 80082b8:	687b      	ldr	r3, [r7, #4]
 80082ba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80082bc:	2b03      	cmp	r3, #3
 80082be:	d02e      	beq.n	800831e <HAL_SD_ConfigWideBusOperation+0x7e>
  {
    if (WideMode == SDMMC_BUS_WIDE_8B)
 80082c0:	683b      	ldr	r3, [r7, #0]
 80082c2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80082c6:	d106      	bne.n	80082d6 <HAL_SD_ConfigWideBusOperation+0x36>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80082c8:	687b      	ldr	r3, [r7, #4]
 80082ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80082cc:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80082d0:	687b      	ldr	r3, [r7, #4]
 80082d2:	639a      	str	r2, [r3, #56]	; 0x38
 80082d4:	e029      	b.n	800832a <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if (WideMode == SDMMC_BUS_WIDE_4B)
 80082d6:	683b      	ldr	r3, [r7, #0]
 80082d8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80082dc:	d10a      	bne.n	80082f4 <HAL_SD_ConfigWideBusOperation+0x54>
    {
      errorstate = SD_WideBus_Enable(hsd);
 80082de:	6878      	ldr	r0, [r7, #4]
 80082e0:	f000 fbce 	bl	8008a80 <SD_WideBus_Enable>
 80082e4:	62b8      	str	r0, [r7, #40]	; 0x28

      hsd->ErrorCode |= errorstate;
 80082e6:	687b      	ldr	r3, [r7, #4]
 80082e8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80082ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80082ec:	431a      	orrs	r2, r3
 80082ee:	687b      	ldr	r3, [r7, #4]
 80082f0:	639a      	str	r2, [r3, #56]	; 0x38
 80082f2:	e01a      	b.n	800832a <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if (WideMode == SDMMC_BUS_WIDE_1B)
 80082f4:	683b      	ldr	r3, [r7, #0]
 80082f6:	2b00      	cmp	r3, #0
 80082f8:	d10a      	bne.n	8008310 <HAL_SD_ConfigWideBusOperation+0x70>
    {
      errorstate = SD_WideBus_Disable(hsd);
 80082fa:	6878      	ldr	r0, [r7, #4]
 80082fc:	f000 fc0b 	bl	8008b16 <SD_WideBus_Disable>
 8008300:	62b8      	str	r0, [r7, #40]	; 0x28

      hsd->ErrorCode |= errorstate;
 8008302:	687b      	ldr	r3, [r7, #4]
 8008304:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008306:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008308:	431a      	orrs	r2, r3
 800830a:	687b      	ldr	r3, [r7, #4]
 800830c:	639a      	str	r2, [r3, #56]	; 0x38
 800830e:	e00c      	b.n	800832a <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8008310:	687b      	ldr	r3, [r7, #4]
 8008312:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008314:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8008318:	687b      	ldr	r3, [r7, #4]
 800831a:	639a      	str	r2, [r3, #56]	; 0x38
 800831c:	e005      	b.n	800832a <HAL_SD_ConfigWideBusOperation+0x8a>
    }
  }
  else
  {
    /* MMC Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800831e:	687b      	ldr	r3, [r7, #4]
 8008320:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008322:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8008326:	687b      	ldr	r3, [r7, #4]
 8008328:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if (hsd->ErrorCode != HAL_SD_ERROR_NONE)
 800832a:	687b      	ldr	r3, [r7, #4]
 800832c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800832e:	2b00      	cmp	r3, #0
 8008330:	d007      	beq.n	8008342 <HAL_SD_ConfigWideBusOperation+0xa2>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8008332:	687b      	ldr	r3, [r7, #4]
 8008334:	681b      	ldr	r3, [r3, #0]
 8008336:	4a60      	ldr	r2, [pc, #384]	; (80084b8 <HAL_SD_ConfigWideBusOperation+0x218>)
 8008338:	639a      	str	r2, [r3, #56]	; 0x38
    status = HAL_ERROR;
 800833a:	2301      	movs	r3, #1
 800833c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8008340:	e097      	b.n	8008472 <HAL_SD_ConfigWideBusOperation+0x1d2>
  }
  else
  {
    sdmmc_clk     = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC);
 8008342:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 8008346:	f7fd fff9 	bl	800633c <HAL_RCCEx_GetPeriphCLKFreq>
 800834a:	6278      	str	r0, [r7, #36]	; 0x24
    if (sdmmc_clk != 0U)
 800834c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800834e:	2b00      	cmp	r3, #0
 8008350:	f000 8086 	beq.w	8008460 <HAL_SD_ConfigWideBusOperation+0x1c0>
    {
      /* Configure the SDMMC peripheral */
      Init.ClockEdge           = hsd->Init.ClockEdge;
 8008354:	687b      	ldr	r3, [r7, #4]
 8008356:	685b      	ldr	r3, [r3, #4]
 8008358:	60fb      	str	r3, [r7, #12]
      Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 800835a:	687b      	ldr	r3, [r7, #4]
 800835c:	689b      	ldr	r3, [r3, #8]
 800835e:	613b      	str	r3, [r7, #16]
      Init.BusWide             = WideMode;
 8008360:	683b      	ldr	r3, [r7, #0]
 8008362:	617b      	str	r3, [r7, #20]
      Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 8008364:	687b      	ldr	r3, [r7, #4]
 8008366:	691b      	ldr	r3, [r3, #16]
 8008368:	61bb      	str	r3, [r7, #24]

      /* Check if user Clock div < Normal speed 25Mhz, no change in Clockdiv */
      if (hsd->Init.ClockDiv >= (sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ)))
 800836a:	687b      	ldr	r3, [r7, #4]
 800836c:	695a      	ldr	r2, [r3, #20]
 800836e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008370:	4952      	ldr	r1, [pc, #328]	; (80084bc <HAL_SD_ConfigWideBusOperation+0x21c>)
 8008372:	fba1 1303 	umull	r1, r3, r1, r3
 8008376:	0e1b      	lsrs	r3, r3, #24
 8008378:	429a      	cmp	r2, r3
 800837a:	d303      	bcc.n	8008384 <HAL_SD_ConfigWideBusOperation+0xe4>
      {
        Init.ClockDiv = hsd->Init.ClockDiv;
 800837c:	687b      	ldr	r3, [r7, #4]
 800837e:	695b      	ldr	r3, [r3, #20]
 8008380:	61fb      	str	r3, [r7, #28]
 8008382:	e05a      	b.n	800843a <HAL_SD_ConfigWideBusOperation+0x19a>
      }
      else if (hsd->SdCard.CardSpeed == CARD_ULTRA_HIGH_SPEED)
 8008384:	687b      	ldr	r3, [r7, #4]
 8008386:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008388:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800838c:	d103      	bne.n	8008396 <HAL_SD_ConfigWideBusOperation+0xf6>
      {
        /* UltraHigh speed SD card,user Clock div */
        Init.ClockDiv = hsd->Init.ClockDiv;
 800838e:	687b      	ldr	r3, [r7, #4]
 8008390:	695b      	ldr	r3, [r3, #20]
 8008392:	61fb      	str	r3, [r7, #28]
 8008394:	e051      	b.n	800843a <HAL_SD_ConfigWideBusOperation+0x19a>
      }
      else if (hsd->SdCard.CardSpeed == CARD_HIGH_SPEED)
 8008396:	687b      	ldr	r3, [r7, #4]
 8008398:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800839a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800839e:	d126      	bne.n	80083ee <HAL_SD_ConfigWideBusOperation+0x14e>
      {
        /* High speed SD card, Max Frequency = 50Mhz */
        if (hsd->Init.ClockDiv == 0U)
 80083a0:	687b      	ldr	r3, [r7, #4]
 80083a2:	695b      	ldr	r3, [r3, #20]
 80083a4:	2b00      	cmp	r3, #0
 80083a6:	d10e      	bne.n	80083c6 <HAL_SD_ConfigWideBusOperation+0x126>
        {
          if (sdmmc_clk > SD_HIGH_SPEED_FREQ)
 80083a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80083aa:	4a45      	ldr	r2, [pc, #276]	; (80084c0 <HAL_SD_ConfigWideBusOperation+0x220>)
 80083ac:	4293      	cmp	r3, r2
 80083ae:	d906      	bls.n	80083be <HAL_SD_ConfigWideBusOperation+0x11e>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_HIGH_SPEED_FREQ);
 80083b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80083b2:	4a42      	ldr	r2, [pc, #264]	; (80084bc <HAL_SD_ConfigWideBusOperation+0x21c>)
 80083b4:	fba2 2303 	umull	r2, r3, r2, r3
 80083b8:	0e5b      	lsrs	r3, r3, #25
 80083ba:	61fb      	str	r3, [r7, #28]
 80083bc:	e03d      	b.n	800843a <HAL_SD_ConfigWideBusOperation+0x19a>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 80083be:	687b      	ldr	r3, [r7, #4]
 80083c0:	695b      	ldr	r3, [r3, #20]
 80083c2:	61fb      	str	r3, [r7, #28]
 80083c4:	e039      	b.n	800843a <HAL_SD_ConfigWideBusOperation+0x19a>
          }
        }
        else
        {
          if ((sdmmc_clk/(2U * hsd->Init.ClockDiv)) > SD_HIGH_SPEED_FREQ)
 80083c6:	687b      	ldr	r3, [r7, #4]
 80083c8:	695b      	ldr	r3, [r3, #20]
 80083ca:	005b      	lsls	r3, r3, #1
 80083cc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80083ce:	fbb2 f3f3 	udiv	r3, r2, r3
 80083d2:	4a3b      	ldr	r2, [pc, #236]	; (80084c0 <HAL_SD_ConfigWideBusOperation+0x220>)
 80083d4:	4293      	cmp	r3, r2
 80083d6:	d906      	bls.n	80083e6 <HAL_SD_ConfigWideBusOperation+0x146>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_HIGH_SPEED_FREQ);
 80083d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80083da:	4a38      	ldr	r2, [pc, #224]	; (80084bc <HAL_SD_ConfigWideBusOperation+0x21c>)
 80083dc:	fba2 2303 	umull	r2, r3, r2, r3
 80083e0:	0e5b      	lsrs	r3, r3, #25
 80083e2:	61fb      	str	r3, [r7, #28]
 80083e4:	e029      	b.n	800843a <HAL_SD_ConfigWideBusOperation+0x19a>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 80083e6:	687b      	ldr	r3, [r7, #4]
 80083e8:	695b      	ldr	r3, [r3, #20]
 80083ea:	61fb      	str	r3, [r7, #28]
 80083ec:	e025      	b.n	800843a <HAL_SD_ConfigWideBusOperation+0x19a>
        }
      }
      else
      {
        /* No High speed SD card, Max Frequency = 25Mhz */
        if (hsd->Init.ClockDiv == 0U)
 80083ee:	687b      	ldr	r3, [r7, #4]
 80083f0:	695b      	ldr	r3, [r3, #20]
 80083f2:	2b00      	cmp	r3, #0
 80083f4:	d10e      	bne.n	8008414 <HAL_SD_ConfigWideBusOperation+0x174>
        {
          if (sdmmc_clk > SD_NORMAL_SPEED_FREQ)
 80083f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80083f8:	4a32      	ldr	r2, [pc, #200]	; (80084c4 <HAL_SD_ConfigWideBusOperation+0x224>)
 80083fa:	4293      	cmp	r3, r2
 80083fc:	d906      	bls.n	800840c <HAL_SD_ConfigWideBusOperation+0x16c>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ);
 80083fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008400:	4a2e      	ldr	r2, [pc, #184]	; (80084bc <HAL_SD_ConfigWideBusOperation+0x21c>)
 8008402:	fba2 2303 	umull	r2, r3, r2, r3
 8008406:	0e1b      	lsrs	r3, r3, #24
 8008408:	61fb      	str	r3, [r7, #28]
 800840a:	e016      	b.n	800843a <HAL_SD_ConfigWideBusOperation+0x19a>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 800840c:	687b      	ldr	r3, [r7, #4]
 800840e:	695b      	ldr	r3, [r3, #20]
 8008410:	61fb      	str	r3, [r7, #28]
 8008412:	e012      	b.n	800843a <HAL_SD_ConfigWideBusOperation+0x19a>
          }
        }
        else
        {
          if ((sdmmc_clk/(2U * hsd->Init.ClockDiv)) > SD_NORMAL_SPEED_FREQ)
 8008414:	687b      	ldr	r3, [r7, #4]
 8008416:	695b      	ldr	r3, [r3, #20]
 8008418:	005b      	lsls	r3, r3, #1
 800841a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800841c:	fbb2 f3f3 	udiv	r3, r2, r3
 8008420:	4a28      	ldr	r2, [pc, #160]	; (80084c4 <HAL_SD_ConfigWideBusOperation+0x224>)
 8008422:	4293      	cmp	r3, r2
 8008424:	d906      	bls.n	8008434 <HAL_SD_ConfigWideBusOperation+0x194>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ);
 8008426:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008428:	4a24      	ldr	r2, [pc, #144]	; (80084bc <HAL_SD_ConfigWideBusOperation+0x21c>)
 800842a:	fba2 2303 	umull	r2, r3, r2, r3
 800842e:	0e1b      	lsrs	r3, r3, #24
 8008430:	61fb      	str	r3, [r7, #28]
 8008432:	e002      	b.n	800843a <HAL_SD_ConfigWideBusOperation+0x19a>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 8008434:	687b      	ldr	r3, [r7, #4]
 8008436:	695b      	ldr	r3, [r3, #20]
 8008438:	61fb      	str	r3, [r7, #28]
          }
        }
      }

#if (USE_SD_TRANSCEIVER != 0U)
      Init.TranceiverPresent = hsd->Init.TranceiverPresent;
 800843a:	687b      	ldr	r3, [r7, #4]
 800843c:	699b      	ldr	r3, [r3, #24]
 800843e:	623b      	str	r3, [r7, #32]
#endif /* USE_SD_TRANSCEIVER */

      (void)SDMMC_Init(hsd->Instance, Init);
 8008440:	687b      	ldr	r3, [r7, #4]
 8008442:	681d      	ldr	r5, [r3, #0]
 8008444:	466c      	mov	r4, sp
 8008446:	f107 0318 	add.w	r3, r7, #24
 800844a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800844e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8008452:	f107 030c 	add.w	r3, r7, #12
 8008456:	cb0e      	ldmia	r3, {r1, r2, r3}
 8008458:	4628      	mov	r0, r5
 800845a:	f002 faad 	bl	800a9b8 <SDMMC_Init>
 800845e:	e008      	b.n	8008472 <HAL_SD_ConfigWideBusOperation+0x1d2>
    }
    else
    {
      hsd->ErrorCode |= SDMMC_ERROR_INVALID_PARAMETER;
 8008460:	687b      	ldr	r3, [r7, #4]
 8008462:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008464:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8008468:	687b      	ldr	r3, [r7, #4]
 800846a:	639a      	str	r2, [r3, #56]	; 0x38
      status = HAL_ERROR;
 800846c:	2301      	movs	r3, #1
 800846e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    }
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8008472:	687b      	ldr	r3, [r7, #4]
 8008474:	681b      	ldr	r3, [r3, #0]
 8008476:	f44f 7100 	mov.w	r1, #512	; 0x200
 800847a:	4618      	mov	r0, r3
 800847c:	f002 fb68 	bl	800ab50 <SDMMC_CmdBlockLength>
 8008480:	62b8      	str	r0, [r7, #40]	; 0x28
  if (errorstate != HAL_SD_ERROR_NONE)
 8008482:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008484:	2b00      	cmp	r3, #0
 8008486:	d00c      	beq.n	80084a2 <HAL_SD_ConfigWideBusOperation+0x202>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8008488:	687b      	ldr	r3, [r7, #4]
 800848a:	681b      	ldr	r3, [r3, #0]
 800848c:	4a0a      	ldr	r2, [pc, #40]	; (80084b8 <HAL_SD_ConfigWideBusOperation+0x218>)
 800848e:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 8008490:	687b      	ldr	r3, [r7, #4]
 8008492:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008494:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008496:	431a      	orrs	r2, r3
 8008498:	687b      	ldr	r3, [r7, #4]
 800849a:	639a      	str	r2, [r3, #56]	; 0x38
    status = HAL_ERROR;
 800849c:	2301      	movs	r3, #1
 800849e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 80084a2:	687b      	ldr	r3, [r7, #4]
 80084a4:	2201      	movs	r2, #1
 80084a6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return status;
 80084aa:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 80084ae:	4618      	mov	r0, r3
 80084b0:	3730      	adds	r7, #48	; 0x30
 80084b2:	46bd      	mov	sp, r7
 80084b4:	bdb0      	pop	{r4, r5, r7, pc}
 80084b6:	bf00      	nop
 80084b8:	1fe00fff 	.word	0x1fe00fff
 80084bc:	55e63b89 	.word	0x55e63b89
 80084c0:	02faf080 	.word	0x02faf080
 80084c4:	017d7840 	.word	0x017d7840

080084c8 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 80084c8:	b580      	push	{r7, lr}
 80084ca:	b086      	sub	sp, #24
 80084cc:	af00      	add	r7, sp, #0
 80084ce:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 80084d0:	2300      	movs	r3, #0
 80084d2:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 80084d4:	f107 030c 	add.w	r3, r7, #12
 80084d8:	4619      	mov	r1, r3
 80084da:	6878      	ldr	r0, [r7, #4]
 80084dc:	f000 faa8 	bl	8008a30 <SD_SendStatus>
 80084e0:	6178      	str	r0, [r7, #20]
  if (errorstate != HAL_SD_ERROR_NONE)
 80084e2:	697b      	ldr	r3, [r7, #20]
 80084e4:	2b00      	cmp	r3, #0
 80084e6:	d005      	beq.n	80084f4 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 80084e8:	687b      	ldr	r3, [r7, #4]
 80084ea:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80084ec:	697b      	ldr	r3, [r7, #20]
 80084ee:	431a      	orrs	r2, r3
 80084f0:	687b      	ldr	r3, [r7, #4]
 80084f2:	639a      	str	r2, [r3, #56]	; 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 80084f4:	68fb      	ldr	r3, [r7, #12]
 80084f6:	0a5b      	lsrs	r3, r3, #9
 80084f8:	f003 030f 	and.w	r3, r3, #15
 80084fc:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 80084fe:	693b      	ldr	r3, [r7, #16]
}
 8008500:	4618      	mov	r0, r3
 8008502:	3718      	adds	r7, #24
 8008504:	46bd      	mov	sp, r7
 8008506:	bd80      	pop	{r7, pc}

08008508 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 8008508:	b580      	push	{r7, lr}
 800850a:	b090      	sub	sp, #64	; 0x40
 800850c:	af00      	add	r7, sp, #0
 800850e:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 8008510:	2301      	movs	r3, #1
 8008512:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if (SDMMC_GetPowerState(hsd->Instance) == 0U)
 8008514:	687b      	ldr	r3, [r7, #4]
 8008516:	681b      	ldr	r3, [r3, #0]
 8008518:	4618      	mov	r0, r3
 800851a:	f002 fa95 	bl	800aa48 <SDMMC_GetPowerState>
 800851e:	4603      	mov	r3, r0
 8008520:	2b00      	cmp	r3, #0
 8008522:	d102      	bne.n	800852a <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8008524:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8008528:	e0a5      	b.n	8008676 <SD_InitCard+0x16e>
  }

  if (hsd->SdCard.CardType != CARD_SECURED)
 800852a:	687b      	ldr	r3, [r7, #4]
 800852c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800852e:	2b03      	cmp	r3, #3
 8008530:	d02e      	beq.n	8008590 <SD_InitCard+0x88>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 8008532:	687b      	ldr	r3, [r7, #4]
 8008534:	681b      	ldr	r3, [r3, #0]
 8008536:	4618      	mov	r0, r3
 8008538:	f002 fca2 	bl	800ae80 <SDMMC_CmdSendCID>
 800853c:	63f8      	str	r0, [r7, #60]	; 0x3c
    if (errorstate != HAL_SD_ERROR_NONE)
 800853e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008540:	2b00      	cmp	r3, #0
 8008542:	d001      	beq.n	8008548 <SD_InitCard+0x40>
    {
      return errorstate;
 8008544:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008546:	e096      	b.n	8008676 <SD_InitCard+0x16e>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8008548:	687b      	ldr	r3, [r7, #4]
 800854a:	681b      	ldr	r3, [r3, #0]
 800854c:	2100      	movs	r1, #0
 800854e:	4618      	mov	r0, r3
 8008550:	f002 fabf 	bl	800aad2 <SDMMC_GetResponse>
 8008554:	4602      	mov	r2, r0
 8008556:	687b      	ldr	r3, [r7, #4]
 8008558:	671a      	str	r2, [r3, #112]	; 0x70
      hsd->CID[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 800855a:	687b      	ldr	r3, [r7, #4]
 800855c:	681b      	ldr	r3, [r3, #0]
 800855e:	2104      	movs	r1, #4
 8008560:	4618      	mov	r0, r3
 8008562:	f002 fab6 	bl	800aad2 <SDMMC_GetResponse>
 8008566:	4602      	mov	r2, r0
 8008568:	687b      	ldr	r3, [r7, #4]
 800856a:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 800856c:	687b      	ldr	r3, [r7, #4]
 800856e:	681b      	ldr	r3, [r3, #0]
 8008570:	2108      	movs	r1, #8
 8008572:	4618      	mov	r0, r3
 8008574:	f002 faad 	bl	800aad2 <SDMMC_GetResponse>
 8008578:	4602      	mov	r2, r0
 800857a:	687b      	ldr	r3, [r7, #4]
 800857c:	679a      	str	r2, [r3, #120]	; 0x78
      hsd->CID[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 800857e:	687b      	ldr	r3, [r7, #4]
 8008580:	681b      	ldr	r3, [r3, #0]
 8008582:	210c      	movs	r1, #12
 8008584:	4618      	mov	r0, r3
 8008586:	f002 faa4 	bl	800aad2 <SDMMC_GetResponse>
 800858a:	4602      	mov	r2, r0
 800858c:	687b      	ldr	r3, [r7, #4]
 800858e:	67da      	str	r2, [r3, #124]	; 0x7c
    }
  }

  if (hsd->SdCard.CardType != CARD_SECURED)
 8008590:	687b      	ldr	r3, [r7, #4]
 8008592:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008594:	2b03      	cmp	r3, #3
 8008596:	d00d      	beq.n	80085b4 <SD_InitCard+0xac>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 8008598:	687b      	ldr	r3, [r7, #4]
 800859a:	681b      	ldr	r3, [r3, #0]
 800859c:	f107 020e 	add.w	r2, r7, #14
 80085a0:	4611      	mov	r1, r2
 80085a2:	4618      	mov	r0, r3
 80085a4:	f002 fcab 	bl	800aefe <SDMMC_CmdSetRelAdd>
 80085a8:	63f8      	str	r0, [r7, #60]	; 0x3c
    if (errorstate != HAL_SD_ERROR_NONE)
 80085aa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80085ac:	2b00      	cmp	r3, #0
 80085ae:	d001      	beq.n	80085b4 <SD_InitCard+0xac>
    {
      return errorstate;
 80085b0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80085b2:	e060      	b.n	8008676 <SD_InitCard+0x16e>
    }
  }
  if (hsd->SdCard.CardType != CARD_SECURED)
 80085b4:	687b      	ldr	r3, [r7, #4]
 80085b6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80085b8:	2b03      	cmp	r3, #3
 80085ba:	d036      	beq.n	800862a <SD_InitCard+0x122>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 80085bc:	89fb      	ldrh	r3, [r7, #14]
 80085be:	461a      	mov	r2, r3
 80085c0:	687b      	ldr	r3, [r7, #4]
 80085c2:	649a      	str	r2, [r3, #72]	; 0x48

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 80085c4:	687b      	ldr	r3, [r7, #4]
 80085c6:	681a      	ldr	r2, [r3, #0]
 80085c8:	687b      	ldr	r3, [r7, #4]
 80085ca:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80085cc:	041b      	lsls	r3, r3, #16
 80085ce:	4619      	mov	r1, r3
 80085d0:	4610      	mov	r0, r2
 80085d2:	f002 fc74 	bl	800aebe <SDMMC_CmdSendCSD>
 80085d6:	63f8      	str	r0, [r7, #60]	; 0x3c
    if (errorstate != HAL_SD_ERROR_NONE)
 80085d8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80085da:	2b00      	cmp	r3, #0
 80085dc:	d001      	beq.n	80085e2 <SD_InitCard+0xda>
    {
      return errorstate;
 80085de:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80085e0:	e049      	b.n	8008676 <SD_InitCard+0x16e>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 80085e2:	687b      	ldr	r3, [r7, #4]
 80085e4:	681b      	ldr	r3, [r3, #0]
 80085e6:	2100      	movs	r1, #0
 80085e8:	4618      	mov	r0, r3
 80085ea:	f002 fa72 	bl	800aad2 <SDMMC_GetResponse>
 80085ee:	4602      	mov	r2, r0
 80085f0:	687b      	ldr	r3, [r7, #4]
 80085f2:	661a      	str	r2, [r3, #96]	; 0x60
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 80085f4:	687b      	ldr	r3, [r7, #4]
 80085f6:	681b      	ldr	r3, [r3, #0]
 80085f8:	2104      	movs	r1, #4
 80085fa:	4618      	mov	r0, r3
 80085fc:	f002 fa69 	bl	800aad2 <SDMMC_GetResponse>
 8008600:	4602      	mov	r2, r0
 8008602:	687b      	ldr	r3, [r7, #4]
 8008604:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 8008606:	687b      	ldr	r3, [r7, #4]
 8008608:	681b      	ldr	r3, [r3, #0]
 800860a:	2108      	movs	r1, #8
 800860c:	4618      	mov	r0, r3
 800860e:	f002 fa60 	bl	800aad2 <SDMMC_GetResponse>
 8008612:	4602      	mov	r2, r0
 8008614:	687b      	ldr	r3, [r7, #4]
 8008616:	669a      	str	r2, [r3, #104]	; 0x68
      hsd->CSD[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 8008618:	687b      	ldr	r3, [r7, #4]
 800861a:	681b      	ldr	r3, [r3, #0]
 800861c:	210c      	movs	r1, #12
 800861e:	4618      	mov	r0, r3
 8008620:	f002 fa57 	bl	800aad2 <SDMMC_GetResponse>
 8008624:	4602      	mov	r2, r0
 8008626:	687b      	ldr	r3, [r7, #4]
 8008628:	66da      	str	r2, [r3, #108]	; 0x6c
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2) >> 20U);
 800862a:	687b      	ldr	r3, [r7, #4]
 800862c:	681b      	ldr	r3, [r3, #0]
 800862e:	2104      	movs	r1, #4
 8008630:	4618      	mov	r0, r3
 8008632:	f002 fa4e 	bl	800aad2 <SDMMC_GetResponse>
 8008636:	4603      	mov	r3, r0
 8008638:	0d1a      	lsrs	r2, r3, #20
 800863a:	687b      	ldr	r3, [r7, #4]
 800863c:	645a      	str	r2, [r3, #68]	; 0x44

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 800863e:	f107 0310 	add.w	r3, r7, #16
 8008642:	4619      	mov	r1, r3
 8008644:	6878      	ldr	r0, [r7, #4]
 8008646:	f7ff fba5 	bl	8007d94 <HAL_SD_GetCardCSD>
 800864a:	4603      	mov	r3, r0
 800864c:	2b00      	cmp	r3, #0
 800864e:	d002      	beq.n	8008656 <SD_InitCard+0x14e>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8008650:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8008654:	e00f      	b.n	8008676 <SD_InitCard+0x16e>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 8008656:	687b      	ldr	r3, [r7, #4]
 8008658:	681a      	ldr	r2, [r3, #0]
 800865a:	687b      	ldr	r3, [r7, #4]
 800865c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800865e:	041b      	lsls	r3, r3, #16
 8008660:	4619      	mov	r1, r3
 8008662:	4610      	mov	r0, r2
 8008664:	f002 fb23 	bl	800acae <SDMMC_CmdSelDesel>
 8008668:	63f8      	str	r0, [r7, #60]	; 0x3c
  if (errorstate != HAL_SD_ERROR_NONE)
 800866a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800866c:	2b00      	cmp	r3, #0
 800866e:	d001      	beq.n	8008674 <SD_InitCard+0x16c>
  {
    return errorstate;
 8008670:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008672:	e000      	b.n	8008676 <SD_InitCard+0x16e>
  }

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 8008674:	2300      	movs	r3, #0
}
 8008676:	4618      	mov	r0, r3
 8008678:	3740      	adds	r7, #64	; 0x40
 800867a:	46bd      	mov	sp, r7
 800867c:	bd80      	pop	{r7, pc}
	...

08008680 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 8008680:	b580      	push	{r7, lr}
 8008682:	b088      	sub	sp, #32
 8008684:	af00      	add	r7, sp, #0
 8008686:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8008688:	2300      	movs	r3, #0
 800868a:	60fb      	str	r3, [r7, #12]
  uint32_t response = 0U;
 800868c:	2300      	movs	r3, #0
 800868e:	61fb      	str	r3, [r7, #28]
  uint32_t validvoltage = 0U;
 8008690:	2300      	movs	r3, #0
 8008692:	61bb      	str	r3, [r7, #24]
  uint32_t errorstate;
#if (USE_SD_TRANSCEIVER != 0U)
  uint32_t tickstart = HAL_GetTick();
 8008694:	f7f9 f84c 	bl	8001730 <HAL_GetTick>
 8008698:	6178      	str	r0, [r7, #20]
#endif /* USE_SD_TRANSCEIVER  */

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800869a:	687b      	ldr	r3, [r7, #4]
 800869c:	681b      	ldr	r3, [r3, #0]
 800869e:	4618      	mov	r0, r3
 80086a0:	f002 fb28 	bl	800acf4 <SDMMC_CmdGoIdleState>
 80086a4:	6138      	str	r0, [r7, #16]
  if (errorstate != HAL_SD_ERROR_NONE)
 80086a6:	693b      	ldr	r3, [r7, #16]
 80086a8:	2b00      	cmp	r3, #0
 80086aa:	d001      	beq.n	80086b0 <SD_PowerON+0x30>
  {
    return errorstate;
 80086ac:	693b      	ldr	r3, [r7, #16]
 80086ae:	e0e9      	b.n	8008884 <SD_PowerON+0x204>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 80086b0:	687b      	ldr	r3, [r7, #4]
 80086b2:	681b      	ldr	r3, [r3, #0]
 80086b4:	4618      	mov	r0, r3
 80086b6:	f002 fb3b 	bl	800ad30 <SDMMC_CmdOperCond>
 80086ba:	6138      	str	r0, [r7, #16]
  if (errorstate != HAL_SD_ERROR_NONE)
 80086bc:	693b      	ldr	r3, [r7, #16]
 80086be:	2b00      	cmp	r3, #0
 80086c0:	d00d      	beq.n	80086de <SD_PowerON+0x5e>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 80086c2:	687b      	ldr	r3, [r7, #4]
 80086c4:	2200      	movs	r2, #0
 80086c6:	641a      	str	r2, [r3, #64]	; 0x40
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 80086c8:	687b      	ldr	r3, [r7, #4]
 80086ca:	681b      	ldr	r3, [r3, #0]
 80086cc:	4618      	mov	r0, r3
 80086ce:	f002 fb11 	bl	800acf4 <SDMMC_CmdGoIdleState>
 80086d2:	6138      	str	r0, [r7, #16]
    if (errorstate != HAL_SD_ERROR_NONE)
 80086d4:	693b      	ldr	r3, [r7, #16]
 80086d6:	2b00      	cmp	r3, #0
 80086d8:	d004      	beq.n	80086e4 <SD_PowerON+0x64>
    {
      return errorstate;
 80086da:	693b      	ldr	r3, [r7, #16]
 80086dc:	e0d2      	b.n	8008884 <SD_PowerON+0x204>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 80086de:	687b      	ldr	r3, [r7, #4]
 80086e0:	2201      	movs	r2, #1
 80086e2:	641a      	str	r2, [r3, #64]	; 0x40
  }

  if (hsd->SdCard.CardVersion == CARD_V2_X)
 80086e4:	687b      	ldr	r3, [r7, #4]
 80086e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80086e8:	2b01      	cmp	r3, #1
 80086ea:	d137      	bne.n	800875c <SD_PowerON+0xdc>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 80086ec:	687b      	ldr	r3, [r7, #4]
 80086ee:	681b      	ldr	r3, [r3, #0]
 80086f0:	2100      	movs	r1, #0
 80086f2:	4618      	mov	r0, r3
 80086f4:	f002 fb3c 	bl	800ad70 <SDMMC_CmdAppCommand>
 80086f8:	6138      	str	r0, [r7, #16]
    if (errorstate != HAL_SD_ERROR_NONE)
 80086fa:	693b      	ldr	r3, [r7, #16]
 80086fc:	2b00      	cmp	r3, #0
 80086fe:	d02d      	beq.n	800875c <SD_PowerON+0xdc>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8008700:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8008704:	e0be      	b.n	8008884 <SD_PowerON+0x204>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while ((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8008706:	687b      	ldr	r3, [r7, #4]
 8008708:	681b      	ldr	r3, [r3, #0]
 800870a:	2100      	movs	r1, #0
 800870c:	4618      	mov	r0, r3
 800870e:	f002 fb2f 	bl	800ad70 <SDMMC_CmdAppCommand>
 8008712:	6138      	str	r0, [r7, #16]
    if (errorstate != HAL_SD_ERROR_NONE)
 8008714:	693b      	ldr	r3, [r7, #16]
 8008716:	2b00      	cmp	r3, #0
 8008718:	d001      	beq.n	800871e <SD_PowerON+0x9e>
    {
      return errorstate;
 800871a:	693b      	ldr	r3, [r7, #16]
 800871c:	e0b2      	b.n	8008884 <SD_PowerON+0x204>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY |
 800871e:	687b      	ldr	r3, [r7, #4]
 8008720:	681b      	ldr	r3, [r3, #0]
 8008722:	495a      	ldr	r1, [pc, #360]	; (800888c <SD_PowerON+0x20c>)
 8008724:	4618      	mov	r0, r3
 8008726:	f002 fb46 	bl	800adb6 <SDMMC_CmdAppOperCommand>
 800872a:	6138      	str	r0, [r7, #16]
                                         SD_SWITCH_1_8V_CAPACITY);
    if (errorstate != HAL_SD_ERROR_NONE)
 800872c:	693b      	ldr	r3, [r7, #16]
 800872e:	2b00      	cmp	r3, #0
 8008730:	d002      	beq.n	8008738 <SD_PowerON+0xb8>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8008732:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8008736:	e0a5      	b.n	8008884 <SD_PowerON+0x204>
    }

    /* Get command response */
    response = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8008738:	687b      	ldr	r3, [r7, #4]
 800873a:	681b      	ldr	r3, [r3, #0]
 800873c:	2100      	movs	r1, #0
 800873e:	4618      	mov	r0, r3
 8008740:	f002 f9c7 	bl	800aad2 <SDMMC_GetResponse>
 8008744:	61f8      	str	r0, [r7, #28]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 8008746:	69fb      	ldr	r3, [r7, #28]
 8008748:	0fdb      	lsrs	r3, r3, #31
 800874a:	2b01      	cmp	r3, #1
 800874c:	d101      	bne.n	8008752 <SD_PowerON+0xd2>
 800874e:	2301      	movs	r3, #1
 8008750:	e000      	b.n	8008754 <SD_PowerON+0xd4>
 8008752:	2300      	movs	r3, #0
 8008754:	61bb      	str	r3, [r7, #24]

    count++;
 8008756:	68fb      	ldr	r3, [r7, #12]
 8008758:	3301      	adds	r3, #1
 800875a:	60fb      	str	r3, [r7, #12]
  while ((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 800875c:	68fb      	ldr	r3, [r7, #12]
 800875e:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8008762:	4293      	cmp	r3, r2
 8008764:	d802      	bhi.n	800876c <SD_PowerON+0xec>
 8008766:	69bb      	ldr	r3, [r7, #24]
 8008768:	2b00      	cmp	r3, #0
 800876a:	d0cc      	beq.n	8008706 <SD_PowerON+0x86>
  }

  if (count >= SDMMC_MAX_VOLT_TRIAL)
 800876c:	68fb      	ldr	r3, [r7, #12]
 800876e:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8008772:	4293      	cmp	r3, r2
 8008774:	d902      	bls.n	800877c <SD_PowerON+0xfc>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 8008776:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800877a:	e083      	b.n	8008884 <SD_PowerON+0x204>
  }

  if ((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 800877c:	69fb      	ldr	r3, [r7, #28]
 800877e:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8008782:	2b00      	cmp	r3, #0
 8008784:	d07d      	beq.n	8008882 <SD_PowerON+0x202>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 8008786:	687b      	ldr	r3, [r7, #4]
 8008788:	2201      	movs	r2, #1
 800878a:	63da      	str	r2, [r3, #60]	; 0x3c
#if (USE_SD_TRANSCEIVER != 0U)
    if (hsd->Init.TranceiverPresent == SDMMC_TRANSCEIVER_PRESENT)
 800878c:	687b      	ldr	r3, [r7, #4]
 800878e:	699b      	ldr	r3, [r3, #24]
 8008790:	2b02      	cmp	r3, #2
 8008792:	d176      	bne.n	8008882 <SD_PowerON+0x202>
    {
      if ((response & SD_SWITCH_1_8V_CAPACITY) == SD_SWITCH_1_8V_CAPACITY)
 8008794:	69fb      	ldr	r3, [r7, #28]
 8008796:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800879a:	2b00      	cmp	r3, #0
 800879c:	d071      	beq.n	8008882 <SD_PowerON+0x202>
      {
        hsd->SdCard.CardSpeed = CARD_ULTRA_HIGH_SPEED;
 800879e:	687b      	ldr	r3, [r7, #4]
 80087a0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80087a4:	65da      	str	r2, [r3, #92]	; 0x5c

        /* Start switching procedue */
        hsd->Instance->POWER |= SDMMC_POWER_VSWITCHEN;
 80087a6:	687b      	ldr	r3, [r7, #4]
 80087a8:	681b      	ldr	r3, [r3, #0]
 80087aa:	681a      	ldr	r2, [r3, #0]
 80087ac:	687b      	ldr	r3, [r7, #4]
 80087ae:	681b      	ldr	r3, [r3, #0]
 80087b0:	f042 0208 	orr.w	r2, r2, #8
 80087b4:	601a      	str	r2, [r3, #0]

        /* Send CMD11 to switch 1.8V mode */
        errorstate = SDMMC_CmdVoltageSwitch(hsd->Instance);
 80087b6:	687b      	ldr	r3, [r7, #4]
 80087b8:	681b      	ldr	r3, [r3, #0]
 80087ba:	4618      	mov	r0, r3
 80087bc:	f002 fc06 	bl	800afcc <SDMMC_CmdVoltageSwitch>
 80087c0:	6138      	str	r0, [r7, #16]
        if (errorstate != HAL_SD_ERROR_NONE)
 80087c2:	693b      	ldr	r3, [r7, #16]
 80087c4:	2b00      	cmp	r3, #0
 80087c6:	d00c      	beq.n	80087e2 <SD_PowerON+0x162>
        {
          return errorstate;
 80087c8:	693b      	ldr	r3, [r7, #16]
 80087ca:	e05b      	b.n	8008884 <SD_PowerON+0x204>
        }

        /* Check to CKSTOP */
        while ((hsd->Instance->STA & SDMMC_FLAG_CKSTOP) != SDMMC_FLAG_CKSTOP)
        {
          if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 80087cc:	f7f8 ffb0 	bl	8001730 <HAL_GetTick>
 80087d0:	4602      	mov	r2, r0
 80087d2:	697b      	ldr	r3, [r7, #20]
 80087d4:	1ad3      	subs	r3, r2, r3
 80087d6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80087da:	d102      	bne.n	80087e2 <SD_PowerON+0x162>
          {
            return HAL_SD_ERROR_TIMEOUT;
 80087dc:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80087e0:	e050      	b.n	8008884 <SD_PowerON+0x204>
        while ((hsd->Instance->STA & SDMMC_FLAG_CKSTOP) != SDMMC_FLAG_CKSTOP)
 80087e2:	687b      	ldr	r3, [r7, #4]
 80087e4:	681b      	ldr	r3, [r3, #0]
 80087e6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80087e8:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80087ec:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80087f0:	d1ec      	bne.n	80087cc <SD_PowerON+0x14c>
          }
        }

        /* Clear CKSTOP Flag */
        hsd->Instance->ICR = SDMMC_FLAG_CKSTOP;
 80087f2:	687b      	ldr	r3, [r7, #4]
 80087f4:	681b      	ldr	r3, [r3, #0]
 80087f6:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 80087fa:	639a      	str	r2, [r3, #56]	; 0x38

        /* Check to BusyD0 */
        if ((hsd->Instance->STA & SDMMC_FLAG_BUSYD0) != SDMMC_FLAG_BUSYD0)
 80087fc:	687b      	ldr	r3, [r7, #4]
 80087fe:	681b      	ldr	r3, [r3, #0]
 8008800:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008802:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8008806:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800880a:	d002      	beq.n	8008812 <SD_PowerON+0x192>
        {
          /* Error when activate Voltage Switch in SDMMC Peripheral */
          return SDMMC_ERROR_UNSUPPORTED_FEATURE;
 800880c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8008810:	e038      	b.n	8008884 <SD_PowerON+0x204>
        {
          /* Enable Transceiver Switch PIN */
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
          hsd->DriveTransceiver_1_8V_Callback(SET);
#else
          HAL_SD_DriveTransceiver_1_8V_Callback(SET);
 8008812:	2001      	movs	r0, #1
 8008814:	f7ff fab2 	bl	8007d7c <HAL_SD_DriveTransceiver_1_8V_Callback>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */

          /* Switch ready */
          hsd->Instance->POWER |= SDMMC_POWER_VSWITCH;
 8008818:	687b      	ldr	r3, [r7, #4]
 800881a:	681b      	ldr	r3, [r3, #0]
 800881c:	681a      	ldr	r2, [r3, #0]
 800881e:	687b      	ldr	r3, [r7, #4]
 8008820:	681b      	ldr	r3, [r3, #0]
 8008822:	f042 0204 	orr.w	r2, r2, #4
 8008826:	601a      	str	r2, [r3, #0]

          /* Check VSWEND Flag */
          while ((hsd->Instance->STA & SDMMC_FLAG_VSWEND) != SDMMC_FLAG_VSWEND)
 8008828:	e00a      	b.n	8008840 <SD_PowerON+0x1c0>
          {
            if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800882a:	f7f8 ff81 	bl	8001730 <HAL_GetTick>
 800882e:	4602      	mov	r2, r0
 8008830:	697b      	ldr	r3, [r7, #20]
 8008832:	1ad3      	subs	r3, r2, r3
 8008834:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008838:	d102      	bne.n	8008840 <SD_PowerON+0x1c0>
            {
              return HAL_SD_ERROR_TIMEOUT;
 800883a:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800883e:	e021      	b.n	8008884 <SD_PowerON+0x204>
          while ((hsd->Instance->STA & SDMMC_FLAG_VSWEND) != SDMMC_FLAG_VSWEND)
 8008840:	687b      	ldr	r3, [r7, #4]
 8008842:	681b      	ldr	r3, [r3, #0]
 8008844:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008846:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800884a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800884e:	d1ec      	bne.n	800882a <SD_PowerON+0x1aa>
            }
          }

          /* Clear VSWEND Flag */
          hsd->Instance->ICR = SDMMC_FLAG_VSWEND;
 8008850:	687b      	ldr	r3, [r7, #4]
 8008852:	681b      	ldr	r3, [r3, #0]
 8008854:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8008858:	639a      	str	r2, [r3, #56]	; 0x38

          /* Check BusyD0 status */
          if ((hsd->Instance->STA & SDMMC_FLAG_BUSYD0) == SDMMC_FLAG_BUSYD0)
 800885a:	687b      	ldr	r3, [r7, #4]
 800885c:	681b      	ldr	r3, [r3, #0]
 800885e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008860:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8008864:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008868:	d102      	bne.n	8008870 <SD_PowerON+0x1f0>
          {
            /* Error when enabling 1.8V mode */
            return HAL_SD_ERROR_INVALID_VOLTRANGE;
 800886a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800886e:	e009      	b.n	8008884 <SD_PowerON+0x204>
          }
          /* Switch to 1.8V OK */

          /* Disable VSWITCH FLAG from SDMMC Peripheral */
          hsd->Instance->POWER = 0x13U;
 8008870:	687b      	ldr	r3, [r7, #4]
 8008872:	681b      	ldr	r3, [r3, #0]
 8008874:	2213      	movs	r2, #19
 8008876:	601a      	str	r2, [r3, #0]

          /* Clean Status flags */
          hsd->Instance->ICR = 0xFFFFFFFFU;
 8008878:	687b      	ldr	r3, [r7, #4]
 800887a:	681b      	ldr	r3, [r3, #0]
 800887c:	f04f 32ff 	mov.w	r2, #4294967295
 8008880:	639a      	str	r2, [r3, #56]	; 0x38
      }
    }
#endif /* USE_SD_TRANSCEIVER  */
  }

  return HAL_SD_ERROR_NONE;
 8008882:	2300      	movs	r3, #0
}
 8008884:	4618      	mov	r0, r3
 8008886:	3720      	adds	r7, #32
 8008888:	46bd      	mov	sp, r7
 800888a:	bd80      	pop	{r7, pc}
 800888c:	c1100000 	.word	0xc1100000

08008890 <SD_SendSDStatus>:
  * @param  pSDstatus: Pointer to the buffer that will contain the SD card status
  *         SD Status register)
  * @retval error state
  */
static uint32_t SD_SendSDStatus(SD_HandleTypeDef *hsd, uint32_t *pSDstatus)
{
 8008890:	b580      	push	{r7, lr}
 8008892:	b08c      	sub	sp, #48	; 0x30
 8008894:	af00      	add	r7, sp, #0
 8008896:	6078      	str	r0, [r7, #4]
 8008898:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800889a:	f7f8 ff49 	bl	8001730 <HAL_GetTick>
 800889e:	6278      	str	r0, [r7, #36]	; 0x24
  uint32_t count;
  uint32_t *pData = pSDstatus;
 80088a0:	683b      	ldr	r3, [r7, #0]
 80088a2:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check SD response */
  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 80088a4:	687b      	ldr	r3, [r7, #4]
 80088a6:	681b      	ldr	r3, [r3, #0]
 80088a8:	2100      	movs	r1, #0
 80088aa:	4618      	mov	r0, r3
 80088ac:	f002 f911 	bl	800aad2 <SDMMC_GetResponse>
 80088b0:	4603      	mov	r3, r0
 80088b2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80088b6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80088ba:	d102      	bne.n	80088c2 <SD_SendSDStatus+0x32>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 80088bc:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80088c0:	e0b0      	b.n	8008a24 <SD_SendSDStatus+0x194>
  }

  /* Set block size for card if it is not equal to current block size for card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 64U);
 80088c2:	687b      	ldr	r3, [r7, #4]
 80088c4:	681b      	ldr	r3, [r3, #0]
 80088c6:	2140      	movs	r1, #64	; 0x40
 80088c8:	4618      	mov	r0, r3
 80088ca:	f002 f941 	bl	800ab50 <SDMMC_CmdBlockLength>
 80088ce:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 80088d0:	6a3b      	ldr	r3, [r7, #32]
 80088d2:	2b00      	cmp	r3, #0
 80088d4:	d005      	beq.n	80088e2 <SD_SendSDStatus+0x52>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 80088d6:	687b      	ldr	r3, [r7, #4]
 80088d8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80088da:	687b      	ldr	r3, [r7, #4]
 80088dc:	639a      	str	r2, [r3, #56]	; 0x38
    return errorstate;
 80088de:	6a3b      	ldr	r3, [r7, #32]
 80088e0:	e0a0      	b.n	8008a24 <SD_SendSDStatus+0x194>
  }

  /* Send CMD55 */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 80088e2:	687b      	ldr	r3, [r7, #4]
 80088e4:	681a      	ldr	r2, [r3, #0]
 80088e6:	687b      	ldr	r3, [r7, #4]
 80088e8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80088ea:	041b      	lsls	r3, r3, #16
 80088ec:	4619      	mov	r1, r3
 80088ee:	4610      	mov	r0, r2
 80088f0:	f002 fa3e 	bl	800ad70 <SDMMC_CmdAppCommand>
 80088f4:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 80088f6:	6a3b      	ldr	r3, [r7, #32]
 80088f8:	2b00      	cmp	r3, #0
 80088fa:	d005      	beq.n	8008908 <SD_SendSDStatus+0x78>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 80088fc:	687b      	ldr	r3, [r7, #4]
 80088fe:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008900:	687b      	ldr	r3, [r7, #4]
 8008902:	639a      	str	r2, [r3, #56]	; 0x38
    return errorstate;
 8008904:	6a3b      	ldr	r3, [r7, #32]
 8008906:	e08d      	b.n	8008a24 <SD_SendSDStatus+0x194>
  }

  /* Configure the SD DPSM (Data Path State Machine) */
  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8008908:	f04f 33ff 	mov.w	r3, #4294967295
 800890c:	60bb      	str	r3, [r7, #8]
  config.DataLength    = 64U;
 800890e:	2340      	movs	r3, #64	; 0x40
 8008910:	60fb      	str	r3, [r7, #12]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_64B;
 8008912:	2360      	movs	r3, #96	; 0x60
 8008914:	613b      	str	r3, [r7, #16]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 8008916:	2302      	movs	r3, #2
 8008918:	617b      	str	r3, [r7, #20]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800891a:	2300      	movs	r3, #0
 800891c:	61bb      	str	r3, [r7, #24]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 800891e:	2301      	movs	r3, #1
 8008920:	61fb      	str	r3, [r7, #28]
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 8008922:	687b      	ldr	r3, [r7, #4]
 8008924:	681b      	ldr	r3, [r3, #0]
 8008926:	f107 0208 	add.w	r2, r7, #8
 800892a:	4611      	mov	r1, r2
 800892c:	4618      	mov	r0, r3
 800892e:	f002 f8e3 	bl	800aaf8 <SDMMC_ConfigData>

  /* Send ACMD13 (SD_APP_STAUS)  with argument as card's RCA */
  errorstate = SDMMC_CmdStatusRegister(hsd->Instance);
 8008932:	687b      	ldr	r3, [r7, #4]
 8008934:	681b      	ldr	r3, [r3, #0]
 8008936:	4618      	mov	r0, r3
 8008938:	f002 fb26 	bl	800af88 <SDMMC_CmdStatusRegister>
 800893c:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 800893e:	6a3b      	ldr	r3, [r7, #32]
 8008940:	2b00      	cmp	r3, #0
 8008942:	d02b      	beq.n	800899c <SD_SendSDStatus+0x10c>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 8008944:	687b      	ldr	r3, [r7, #4]
 8008946:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008948:	687b      	ldr	r3, [r7, #4]
 800894a:	639a      	str	r2, [r3, #56]	; 0x38
    return errorstate;
 800894c:	6a3b      	ldr	r3, [r7, #32]
 800894e:	e069      	b.n	8008a24 <SD_SendSDStatus+0x194>
  }

  /* Get status data */
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
  {
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF))
 8008950:	687b      	ldr	r3, [r7, #4]
 8008952:	681b      	ldr	r3, [r3, #0]
 8008954:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008956:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800895a:	2b00      	cmp	r3, #0
 800895c:	d013      	beq.n	8008986 <SD_SendSDStatus+0xf6>
    {
      for (count = 0U; count < 8U; count++)
 800895e:	2300      	movs	r3, #0
 8008960:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008962:	e00d      	b.n	8008980 <SD_SendSDStatus+0xf0>
      {
        *pData = SDMMC_ReadFIFO(hsd->Instance);
 8008964:	687b      	ldr	r3, [r7, #4]
 8008966:	681b      	ldr	r3, [r3, #0]
 8008968:	4618      	mov	r0, r3
 800896a:	f002 f84f 	bl	800aa0c <SDMMC_ReadFIFO>
 800896e:	4602      	mov	r2, r0
 8008970:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008972:	601a      	str	r2, [r3, #0]
        pData++;
 8008974:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008976:	3304      	adds	r3, #4
 8008978:	62bb      	str	r3, [r7, #40]	; 0x28
      for (count = 0U; count < 8U; count++)
 800897a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800897c:	3301      	adds	r3, #1
 800897e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008980:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008982:	2b07      	cmp	r3, #7
 8008984:	d9ee      	bls.n	8008964 <SD_SendSDStatus+0xd4>
      }
    }

    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8008986:	f7f8 fed3 	bl	8001730 <HAL_GetTick>
 800898a:	4602      	mov	r2, r0
 800898c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800898e:	1ad3      	subs	r3, r2, r3
 8008990:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008994:	d102      	bne.n	800899c <SD_SendSDStatus+0x10c>
    {
      return HAL_SD_ERROR_TIMEOUT;
 8008996:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800899a:	e043      	b.n	8008a24 <SD_SendSDStatus+0x194>
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 800899c:	687b      	ldr	r3, [r7, #4]
 800899e:	681b      	ldr	r3, [r3, #0]
 80089a0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80089a2:	f403 7395 	and.w	r3, r3, #298	; 0x12a
 80089a6:	2b00      	cmp	r3, #0
 80089a8:	d0d2      	beq.n	8008950 <SD_SendSDStatus+0xc0>
    }
  }

  if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 80089aa:	687b      	ldr	r3, [r7, #4]
 80089ac:	681b      	ldr	r3, [r3, #0]
 80089ae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80089b0:	f003 0308 	and.w	r3, r3, #8
 80089b4:	2b00      	cmp	r3, #0
 80089b6:	d001      	beq.n	80089bc <SD_SendSDStatus+0x12c>
  {
    return HAL_SD_ERROR_DATA_TIMEOUT;
 80089b8:	2308      	movs	r3, #8
 80089ba:	e033      	b.n	8008a24 <SD_SendSDStatus+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 80089bc:	687b      	ldr	r3, [r7, #4]
 80089be:	681b      	ldr	r3, [r3, #0]
 80089c0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80089c2:	f003 0302 	and.w	r3, r3, #2
 80089c6:	2b00      	cmp	r3, #0
 80089c8:	d001      	beq.n	80089ce <SD_SendSDStatus+0x13e>
  {
    return HAL_SD_ERROR_DATA_CRC_FAIL;
 80089ca:	2302      	movs	r3, #2
 80089cc:	e02a      	b.n	8008a24 <SD_SendSDStatus+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 80089ce:	687b      	ldr	r3, [r7, #4]
 80089d0:	681b      	ldr	r3, [r3, #0]
 80089d2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80089d4:	f003 0320 	and.w	r3, r3, #32
 80089d8:	2b00      	cmp	r3, #0
 80089da:	d017      	beq.n	8008a0c <SD_SendSDStatus+0x17c>
  {
    return HAL_SD_ERROR_RX_OVERRUN;
 80089dc:	2320      	movs	r3, #32
 80089de:	e021      	b.n	8008a24 <SD_SendSDStatus+0x194>
    /* Nothing to do */
  }

  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DPSMACT)))
  {
    *pData = SDMMC_ReadFIFO(hsd->Instance);
 80089e0:	687b      	ldr	r3, [r7, #4]
 80089e2:	681b      	ldr	r3, [r3, #0]
 80089e4:	4618      	mov	r0, r3
 80089e6:	f002 f811 	bl	800aa0c <SDMMC_ReadFIFO>
 80089ea:	4602      	mov	r2, r0
 80089ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80089ee:	601a      	str	r2, [r3, #0]
    pData++;
 80089f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80089f2:	3304      	adds	r3, #4
 80089f4:	62bb      	str	r3, [r7, #40]	; 0x28

    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 80089f6:	f7f8 fe9b 	bl	8001730 <HAL_GetTick>
 80089fa:	4602      	mov	r2, r0
 80089fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80089fe:	1ad3      	subs	r3, r2, r3
 8008a00:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008a04:	d102      	bne.n	8008a0c <SD_SendSDStatus+0x17c>
    {
      return HAL_SD_ERROR_TIMEOUT;
 8008a06:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8008a0a:	e00b      	b.n	8008a24 <SD_SendSDStatus+0x194>
  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DPSMACT)))
 8008a0c:	687b      	ldr	r3, [r7, #4]
 8008a0e:	681b      	ldr	r3, [r3, #0]
 8008a10:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008a12:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8008a16:	2b00      	cmp	r3, #0
 8008a18:	d1e2      	bne.n	80089e0 <SD_SendSDStatus+0x150>
    }
  }

  /* Clear all the static status flags*/
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8008a1a:	687b      	ldr	r3, [r7, #4]
 8008a1c:	681b      	ldr	r3, [r3, #0]
 8008a1e:	4a03      	ldr	r2, [pc, #12]	; (8008a2c <SD_SendSDStatus+0x19c>)
 8008a20:	639a      	str	r2, [r3, #56]	; 0x38

  return HAL_SD_ERROR_NONE;
 8008a22:	2300      	movs	r3, #0
}
 8008a24:	4618      	mov	r0, r3
 8008a26:	3730      	adds	r7, #48	; 0x30
 8008a28:	46bd      	mov	sp, r7
 8008a2a:	bd80      	pop	{r7, pc}
 8008a2c:	18000f3a 	.word	0x18000f3a

08008a30 <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 8008a30:	b580      	push	{r7, lr}
 8008a32:	b084      	sub	sp, #16
 8008a34:	af00      	add	r7, sp, #0
 8008a36:	6078      	str	r0, [r7, #4]
 8008a38:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if (pCardStatus == NULL)
 8008a3a:	683b      	ldr	r3, [r7, #0]
 8008a3c:	2b00      	cmp	r3, #0
 8008a3e:	d102      	bne.n	8008a46 <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 8008a40:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8008a44:	e018      	b.n	8008a78 <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8008a46:	687b      	ldr	r3, [r7, #4]
 8008a48:	681a      	ldr	r2, [r3, #0]
 8008a4a:	687b      	ldr	r3, [r7, #4]
 8008a4c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008a4e:	041b      	lsls	r3, r3, #16
 8008a50:	4619      	mov	r1, r3
 8008a52:	4610      	mov	r0, r2
 8008a54:	f002 fa75 	bl	800af42 <SDMMC_CmdSendStatus>
 8008a58:	60f8      	str	r0, [r7, #12]
  if (errorstate != HAL_SD_ERROR_NONE)
 8008a5a:	68fb      	ldr	r3, [r7, #12]
 8008a5c:	2b00      	cmp	r3, #0
 8008a5e:	d001      	beq.n	8008a64 <SD_SendStatus+0x34>
  {
    return errorstate;
 8008a60:	68fb      	ldr	r3, [r7, #12]
 8008a62:	e009      	b.n	8008a78 <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8008a64:	687b      	ldr	r3, [r7, #4]
 8008a66:	681b      	ldr	r3, [r3, #0]
 8008a68:	2100      	movs	r1, #0
 8008a6a:	4618      	mov	r0, r3
 8008a6c:	f002 f831 	bl	800aad2 <SDMMC_GetResponse>
 8008a70:	4602      	mov	r2, r0
 8008a72:	683b      	ldr	r3, [r7, #0]
 8008a74:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 8008a76:	2300      	movs	r3, #0
}
 8008a78:	4618      	mov	r0, r3
 8008a7a:	3710      	adds	r7, #16
 8008a7c:	46bd      	mov	sp, r7
 8008a7e:	bd80      	pop	{r7, pc}

08008a80 <SD_WideBus_Enable>:
  * @brief  Enables the SDMMC wide bus mode.
  * @param  hsd: pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 8008a80:	b580      	push	{r7, lr}
 8008a82:	b086      	sub	sp, #24
 8008a84:	af00      	add	r7, sp, #0
 8008a86:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0UL, 0UL};
 8008a88:	2300      	movs	r3, #0
 8008a8a:	60fb      	str	r3, [r7, #12]
 8008a8c:	2300      	movs	r3, #0
 8008a8e:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8008a90:	687b      	ldr	r3, [r7, #4]
 8008a92:	681b      	ldr	r3, [r3, #0]
 8008a94:	2100      	movs	r1, #0
 8008a96:	4618      	mov	r0, r3
 8008a98:	f002 f81b 	bl	800aad2 <SDMMC_GetResponse>
 8008a9c:	4603      	mov	r3, r0
 8008a9e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008aa2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008aa6:	d102      	bne.n	8008aae <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8008aa8:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8008aac:	e02f      	b.n	8008b0e <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 8008aae:	f107 030c 	add.w	r3, r7, #12
 8008ab2:	4619      	mov	r1, r3
 8008ab4:	6878      	ldr	r0, [r7, #4]
 8008ab6:	f000 f879 	bl	8008bac <SD_FindSCR>
 8008aba:	6178      	str	r0, [r7, #20]
  if (errorstate != HAL_SD_ERROR_NONE)
 8008abc:	697b      	ldr	r3, [r7, #20]
 8008abe:	2b00      	cmp	r3, #0
 8008ac0:	d001      	beq.n	8008ac6 <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 8008ac2:	697b      	ldr	r3, [r7, #20]
 8008ac4:	e023      	b.n	8008b0e <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if ((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8008ac6:	693b      	ldr	r3, [r7, #16]
 8008ac8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8008acc:	2b00      	cmp	r3, #0
 8008ace:	d01c      	beq.n	8008b0a <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8008ad0:	687b      	ldr	r3, [r7, #4]
 8008ad2:	681a      	ldr	r2, [r3, #0]
 8008ad4:	687b      	ldr	r3, [r7, #4]
 8008ad6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008ad8:	041b      	lsls	r3, r3, #16
 8008ada:	4619      	mov	r1, r3
 8008adc:	4610      	mov	r0, r2
 8008ade:	f002 f947 	bl	800ad70 <SDMMC_CmdAppCommand>
 8008ae2:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 8008ae4:	697b      	ldr	r3, [r7, #20]
 8008ae6:	2b00      	cmp	r3, #0
 8008ae8:	d001      	beq.n	8008aee <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 8008aea:	697b      	ldr	r3, [r7, #20]
 8008aec:	e00f      	b.n	8008b0e <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 8008aee:	687b      	ldr	r3, [r7, #4]
 8008af0:	681b      	ldr	r3, [r3, #0]
 8008af2:	2102      	movs	r1, #2
 8008af4:	4618      	mov	r0, r3
 8008af6:	f002 f97e 	bl	800adf6 <SDMMC_CmdBusWidth>
 8008afa:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 8008afc:	697b      	ldr	r3, [r7, #20]
 8008afe:	2b00      	cmp	r3, #0
 8008b00:	d001      	beq.n	8008b06 <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 8008b02:	697b      	ldr	r3, [r7, #20]
 8008b04:	e003      	b.n	8008b0e <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 8008b06:	2300      	movs	r3, #0
 8008b08:	e001      	b.n	8008b0e <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8008b0a:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 8008b0e:	4618      	mov	r0, r3
 8008b10:	3718      	adds	r7, #24
 8008b12:	46bd      	mov	sp, r7
 8008b14:	bd80      	pop	{r7, pc}

08008b16 <SD_WideBus_Disable>:
  * @brief  Disables the SDMMC wide bus mode.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 8008b16:	b580      	push	{r7, lr}
 8008b18:	b086      	sub	sp, #24
 8008b1a:	af00      	add	r7, sp, #0
 8008b1c:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0UL, 0UL};
 8008b1e:	2300      	movs	r3, #0
 8008b20:	60fb      	str	r3, [r7, #12]
 8008b22:	2300      	movs	r3, #0
 8008b24:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8008b26:	687b      	ldr	r3, [r7, #4]
 8008b28:	681b      	ldr	r3, [r3, #0]
 8008b2a:	2100      	movs	r1, #0
 8008b2c:	4618      	mov	r0, r3
 8008b2e:	f001 ffd0 	bl	800aad2 <SDMMC_GetResponse>
 8008b32:	4603      	mov	r3, r0
 8008b34:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008b38:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008b3c:	d102      	bne.n	8008b44 <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8008b3e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8008b42:	e02f      	b.n	8008ba4 <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 8008b44:	f107 030c 	add.w	r3, r7, #12
 8008b48:	4619      	mov	r1, r3
 8008b4a:	6878      	ldr	r0, [r7, #4]
 8008b4c:	f000 f82e 	bl	8008bac <SD_FindSCR>
 8008b50:	6178      	str	r0, [r7, #20]
  if (errorstate != HAL_SD_ERROR_NONE)
 8008b52:	697b      	ldr	r3, [r7, #20]
 8008b54:	2b00      	cmp	r3, #0
 8008b56:	d001      	beq.n	8008b5c <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 8008b58:	697b      	ldr	r3, [r7, #20]
 8008b5a:	e023      	b.n	8008ba4 <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if ((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8008b5c:	693b      	ldr	r3, [r7, #16]
 8008b5e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008b62:	2b00      	cmp	r3, #0
 8008b64:	d01c      	beq.n	8008ba0 <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8008b66:	687b      	ldr	r3, [r7, #4]
 8008b68:	681a      	ldr	r2, [r3, #0]
 8008b6a:	687b      	ldr	r3, [r7, #4]
 8008b6c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008b6e:	041b      	lsls	r3, r3, #16
 8008b70:	4619      	mov	r1, r3
 8008b72:	4610      	mov	r0, r2
 8008b74:	f002 f8fc 	bl	800ad70 <SDMMC_CmdAppCommand>
 8008b78:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 8008b7a:	697b      	ldr	r3, [r7, #20]
 8008b7c:	2b00      	cmp	r3, #0
 8008b7e:	d001      	beq.n	8008b84 <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 8008b80:	697b      	ldr	r3, [r7, #20]
 8008b82:	e00f      	b.n	8008ba4 <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 8008b84:	687b      	ldr	r3, [r7, #4]
 8008b86:	681b      	ldr	r3, [r3, #0]
 8008b88:	2100      	movs	r1, #0
 8008b8a:	4618      	mov	r0, r3
 8008b8c:	f002 f933 	bl	800adf6 <SDMMC_CmdBusWidth>
 8008b90:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 8008b92:	697b      	ldr	r3, [r7, #20]
 8008b94:	2b00      	cmp	r3, #0
 8008b96:	d001      	beq.n	8008b9c <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 8008b98:	697b      	ldr	r3, [r7, #20]
 8008b9a:	e003      	b.n	8008ba4 <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 8008b9c:	2300      	movs	r3, #0
 8008b9e:	e001      	b.n	8008ba4 <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8008ba0:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 8008ba4:	4618      	mov	r0, r3
 8008ba6:	3718      	adds	r7, #24
 8008ba8:	46bd      	mov	sp, r7
 8008baa:	bd80      	pop	{r7, pc}

08008bac <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 8008bac:	b580      	push	{r7, lr}
 8008bae:	b08e      	sub	sp, #56	; 0x38
 8008bb0:	af00      	add	r7, sp, #0
 8008bb2:	6078      	str	r0, [r7, #4]
 8008bb4:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8008bb6:	f7f8 fdbb 	bl	8001730 <HAL_GetTick>
 8008bba:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t index = 0U;
 8008bbc:	2300      	movs	r3, #0
 8008bbe:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tempscr[2U] = {0UL, 0UL};
 8008bc0:	2300      	movs	r3, #0
 8008bc2:	60bb      	str	r3, [r7, #8]
 8008bc4:	2300      	movs	r3, #0
 8008bc6:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 8008bc8:	683b      	ldr	r3, [r7, #0]
 8008bca:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 8008bcc:	687b      	ldr	r3, [r7, #4]
 8008bce:	681b      	ldr	r3, [r3, #0]
 8008bd0:	2108      	movs	r1, #8
 8008bd2:	4618      	mov	r0, r3
 8008bd4:	f001 ffbc 	bl	800ab50 <SDMMC_CmdBlockLength>
 8008bd8:	62b8      	str	r0, [r7, #40]	; 0x28
  if (errorstate != HAL_SD_ERROR_NONE)
 8008bda:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008bdc:	2b00      	cmp	r3, #0
 8008bde:	d001      	beq.n	8008be4 <SD_FindSCR+0x38>
  {
    return errorstate;
 8008be0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008be2:	e0ad      	b.n	8008d40 <SD_FindSCR+0x194>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 8008be4:	687b      	ldr	r3, [r7, #4]
 8008be6:	681a      	ldr	r2, [r3, #0]
 8008be8:	687b      	ldr	r3, [r7, #4]
 8008bea:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008bec:	041b      	lsls	r3, r3, #16
 8008bee:	4619      	mov	r1, r3
 8008bf0:	4610      	mov	r0, r2
 8008bf2:	f002 f8bd 	bl	800ad70 <SDMMC_CmdAppCommand>
 8008bf6:	62b8      	str	r0, [r7, #40]	; 0x28
  if (errorstate != HAL_SD_ERROR_NONE)
 8008bf8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008bfa:	2b00      	cmp	r3, #0
 8008bfc:	d001      	beq.n	8008c02 <SD_FindSCR+0x56>
  {
    return errorstate;
 8008bfe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008c00:	e09e      	b.n	8008d40 <SD_FindSCR+0x194>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8008c02:	f04f 33ff 	mov.w	r3, #4294967295
 8008c06:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 8008c08:	2308      	movs	r3, #8
 8008c0a:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_8B;
 8008c0c:	2330      	movs	r3, #48	; 0x30
 8008c0e:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 8008c10:	2302      	movs	r3, #2
 8008c12:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8008c14:	2300      	movs	r3, #0
 8008c16:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 8008c18:	2301      	movs	r3, #1
 8008c1a:	627b      	str	r3, [r7, #36]	; 0x24
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 8008c1c:	687b      	ldr	r3, [r7, #4]
 8008c1e:	681b      	ldr	r3, [r3, #0]
 8008c20:	f107 0210 	add.w	r2, r7, #16
 8008c24:	4611      	mov	r1, r2
 8008c26:	4618      	mov	r0, r3
 8008c28:	f001 ff66 	bl	800aaf8 <SDMMC_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 8008c2c:	687b      	ldr	r3, [r7, #4]
 8008c2e:	681b      	ldr	r3, [r3, #0]
 8008c30:	4618      	mov	r0, r3
 8008c32:	f002 f903 	bl	800ae3c <SDMMC_CmdSendSCR>
 8008c36:	62b8      	str	r0, [r7, #40]	; 0x28
  if (errorstate != HAL_SD_ERROR_NONE)
 8008c38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008c3a:	2b00      	cmp	r3, #0
 8008c3c:	d027      	beq.n	8008c8e <SD_FindSCR+0xe2>
  {
    return errorstate;
 8008c3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008c40:	e07e      	b.n	8008d40 <SD_FindSCR+0x194>
  }

  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND |
                            SDMMC_FLAG_DATAEND))
  {
    if ((!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOE)) && (index == 0U))
 8008c42:	687b      	ldr	r3, [r7, #4]
 8008c44:	681b      	ldr	r3, [r3, #0]
 8008c46:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008c48:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8008c4c:	2b00      	cmp	r3, #0
 8008c4e:	d113      	bne.n	8008c78 <SD_FindSCR+0xcc>
 8008c50:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008c52:	2b00      	cmp	r3, #0
 8008c54:	d110      	bne.n	8008c78 <SD_FindSCR+0xcc>
    {
      tempscr[0] = SDMMC_ReadFIFO(hsd->Instance);
 8008c56:	687b      	ldr	r3, [r7, #4]
 8008c58:	681b      	ldr	r3, [r3, #0]
 8008c5a:	4618      	mov	r0, r3
 8008c5c:	f001 fed6 	bl	800aa0c <SDMMC_ReadFIFO>
 8008c60:	4603      	mov	r3, r0
 8008c62:	60bb      	str	r3, [r7, #8]
      tempscr[1] = SDMMC_ReadFIFO(hsd->Instance);
 8008c64:	687b      	ldr	r3, [r7, #4]
 8008c66:	681b      	ldr	r3, [r3, #0]
 8008c68:	4618      	mov	r0, r3
 8008c6a:	f001 fecf 	bl	800aa0c <SDMMC_ReadFIFO>
 8008c6e:	4603      	mov	r3, r0
 8008c70:	60fb      	str	r3, [r7, #12]
      index++;
 8008c72:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008c74:	3301      	adds	r3, #1
 8008c76:	637b      	str	r3, [r7, #52]	; 0x34
    }


    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8008c78:	f7f8 fd5a 	bl	8001730 <HAL_GetTick>
 8008c7c:	4602      	mov	r2, r0
 8008c7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008c80:	1ad3      	subs	r3, r2, r3
 8008c82:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008c86:	d102      	bne.n	8008c8e <SD_FindSCR+0xe2>
    {
      return HAL_SD_ERROR_TIMEOUT;
 8008c88:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8008c8c:	e058      	b.n	8008d40 <SD_FindSCR+0x194>
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND |
 8008c8e:	687b      	ldr	r3, [r7, #4]
 8008c90:	681b      	ldr	r3, [r3, #0]
 8008c92:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008c94:	f240 532a 	movw	r3, #1322	; 0x52a
 8008c98:	4013      	ands	r3, r2
 8008c9a:	2b00      	cmp	r3, #0
 8008c9c:	d0d1      	beq.n	8008c42 <SD_FindSCR+0x96>
    }
  }

  if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 8008c9e:	687b      	ldr	r3, [r7, #4]
 8008ca0:	681b      	ldr	r3, [r3, #0]
 8008ca2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008ca4:	f003 0308 	and.w	r3, r3, #8
 8008ca8:	2b00      	cmp	r3, #0
 8008caa:	d005      	beq.n	8008cb8 <SD_FindSCR+0x10c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DTIMEOUT);
 8008cac:	687b      	ldr	r3, [r7, #4]
 8008cae:	681b      	ldr	r3, [r3, #0]
 8008cb0:	2208      	movs	r2, #8
 8008cb2:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 8008cb4:	2308      	movs	r3, #8
 8008cb6:	e043      	b.n	8008d40 <SD_FindSCR+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 8008cb8:	687b      	ldr	r3, [r7, #4]
 8008cba:	681b      	ldr	r3, [r3, #0]
 8008cbc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008cbe:	f003 0302 	and.w	r3, r3, #2
 8008cc2:	2b00      	cmp	r3, #0
 8008cc4:	d005      	beq.n	8008cd2 <SD_FindSCR+0x126>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DCRCFAIL);
 8008cc6:	687b      	ldr	r3, [r7, #4]
 8008cc8:	681b      	ldr	r3, [r3, #0]
 8008cca:	2202      	movs	r2, #2
 8008ccc:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 8008cce:	2302      	movs	r3, #2
 8008cd0:	e036      	b.n	8008d40 <SD_FindSCR+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 8008cd2:	687b      	ldr	r3, [r7, #4]
 8008cd4:	681b      	ldr	r3, [r3, #0]
 8008cd6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008cd8:	f003 0320 	and.w	r3, r3, #32
 8008cdc:	2b00      	cmp	r3, #0
 8008cde:	d005      	beq.n	8008cec <SD_FindSCR+0x140>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_RXOVERR);
 8008ce0:	687b      	ldr	r3, [r7, #4]
 8008ce2:	681b      	ldr	r3, [r3, #0]
 8008ce4:	2220      	movs	r2, #32
 8008ce6:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 8008ce8:	2320      	movs	r3, #32
 8008cea:	e029      	b.n	8008d40 <SD_FindSCR+0x194>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8008cec:	687b      	ldr	r3, [r7, #4]
 8008cee:	681b      	ldr	r3, [r3, #0]
 8008cf0:	4a15      	ldr	r2, [pc, #84]	; (8008d48 <SD_FindSCR+0x19c>)
 8008cf2:	639a      	str	r2, [r3, #56]	; 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) | \
 8008cf4:	68fb      	ldr	r3, [r7, #12]
 8008cf6:	061a      	lsls	r2, r3, #24
 8008cf8:	68fb      	ldr	r3, [r7, #12]
 8008cfa:	021b      	lsls	r3, r3, #8
 8008cfc:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8008d00:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 8008d02:	68fb      	ldr	r3, [r7, #12]
 8008d04:	0a1b      	lsrs	r3, r3, #8
 8008d06:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) | \
 8008d0a:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 8008d0c:	68fb      	ldr	r3, [r7, #12]
 8008d0e:	0e1b      	lsrs	r3, r3, #24
 8008d10:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) | \
 8008d12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008d14:	601a      	str	r2, [r3, #0]
    scr++;
 8008d16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008d18:	3304      	adds	r3, #4
 8008d1a:	62fb      	str	r3, [r7, #44]	; 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) | \
 8008d1c:	68bb      	ldr	r3, [r7, #8]
 8008d1e:	061a      	lsls	r2, r3, #24
 8008d20:	68bb      	ldr	r3, [r7, #8]
 8008d22:	021b      	lsls	r3, r3, #8
 8008d24:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8008d28:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 8008d2a:	68bb      	ldr	r3, [r7, #8]
 8008d2c:	0a1b      	lsrs	r3, r3, #8
 8008d2e:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) | \
 8008d32:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 8008d34:	68bb      	ldr	r3, [r7, #8]
 8008d36:	0e1b      	lsrs	r3, r3, #24
 8008d38:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) | \
 8008d3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008d3c:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 8008d3e:	2300      	movs	r3, #0
}
 8008d40:	4618      	mov	r0, r3
 8008d42:	3738      	adds	r7, #56	; 0x38
 8008d44:	46bd      	mov	sp, r7
 8008d46:	bd80      	pop	{r7, pc}
 8008d48:	18000f3a 	.word	0x18000f3a

08008d4c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8008d4c:	b580      	push	{r7, lr}
 8008d4e:	b082      	sub	sp, #8
 8008d50:	af00      	add	r7, sp, #0
 8008d52:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008d54:	687b      	ldr	r3, [r7, #4]
 8008d56:	2b00      	cmp	r3, #0
 8008d58:	d101      	bne.n	8008d5e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8008d5a:	2301      	movs	r3, #1
 8008d5c:	e049      	b.n	8008df2 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008d5e:	687b      	ldr	r3, [r7, #4]
 8008d60:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008d64:	b2db      	uxtb	r3, r3
 8008d66:	2b00      	cmp	r3, #0
 8008d68:	d106      	bne.n	8008d78 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008d6a:	687b      	ldr	r3, [r7, #4]
 8008d6c:	2200      	movs	r2, #0
 8008d6e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8008d72:	6878      	ldr	r0, [r7, #4]
 8008d74:	f7f8 fad4 	bl	8001320 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008d78:	687b      	ldr	r3, [r7, #4]
 8008d7a:	2202      	movs	r2, #2
 8008d7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008d80:	687b      	ldr	r3, [r7, #4]
 8008d82:	681a      	ldr	r2, [r3, #0]
 8008d84:	687b      	ldr	r3, [r7, #4]
 8008d86:	3304      	adds	r3, #4
 8008d88:	4619      	mov	r1, r3
 8008d8a:	4610      	mov	r0, r2
 8008d8c:	f000 faf8 	bl	8009380 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008d90:	687b      	ldr	r3, [r7, #4]
 8008d92:	2201      	movs	r2, #1
 8008d94:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008d98:	687b      	ldr	r3, [r7, #4]
 8008d9a:	2201      	movs	r2, #1
 8008d9c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008da0:	687b      	ldr	r3, [r7, #4]
 8008da2:	2201      	movs	r2, #1
 8008da4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008da8:	687b      	ldr	r3, [r7, #4]
 8008daa:	2201      	movs	r2, #1
 8008dac:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008db0:	687b      	ldr	r3, [r7, #4]
 8008db2:	2201      	movs	r2, #1
 8008db4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8008db8:	687b      	ldr	r3, [r7, #4]
 8008dba:	2201      	movs	r2, #1
 8008dbc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8008dc0:	687b      	ldr	r3, [r7, #4]
 8008dc2:	2201      	movs	r2, #1
 8008dc4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008dc8:	687b      	ldr	r3, [r7, #4]
 8008dca:	2201      	movs	r2, #1
 8008dcc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008dd0:	687b      	ldr	r3, [r7, #4]
 8008dd2:	2201      	movs	r2, #1
 8008dd4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008dd8:	687b      	ldr	r3, [r7, #4]
 8008dda:	2201      	movs	r2, #1
 8008ddc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8008de0:	687b      	ldr	r3, [r7, #4]
 8008de2:	2201      	movs	r2, #1
 8008de4:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008de8:	687b      	ldr	r3, [r7, #4]
 8008dea:	2201      	movs	r2, #1
 8008dec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8008df0:	2300      	movs	r3, #0
}
 8008df2:	4618      	mov	r0, r3
 8008df4:	3708      	adds	r7, #8
 8008df6:	46bd      	mov	sp, r7
 8008df8:	bd80      	pop	{r7, pc}
	...

08008dfc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8008dfc:	b480      	push	{r7}
 8008dfe:	b085      	sub	sp, #20
 8008e00:	af00      	add	r7, sp, #0
 8008e02:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8008e04:	687b      	ldr	r3, [r7, #4]
 8008e06:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008e0a:	b2db      	uxtb	r3, r3
 8008e0c:	2b01      	cmp	r3, #1
 8008e0e:	d001      	beq.n	8008e14 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8008e10:	2301      	movs	r3, #1
 8008e12:	e05e      	b.n	8008ed2 <HAL_TIM_Base_Start_IT+0xd6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008e14:	687b      	ldr	r3, [r7, #4]
 8008e16:	2202      	movs	r2, #2
 8008e18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8008e1c:	687b      	ldr	r3, [r7, #4]
 8008e1e:	681b      	ldr	r3, [r3, #0]
 8008e20:	68da      	ldr	r2, [r3, #12]
 8008e22:	687b      	ldr	r3, [r7, #4]
 8008e24:	681b      	ldr	r3, [r3, #0]
 8008e26:	f042 0201 	orr.w	r2, r2, #1
 8008e2a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008e2c:	687b      	ldr	r3, [r7, #4]
 8008e2e:	681b      	ldr	r3, [r3, #0]
 8008e30:	4a2b      	ldr	r2, [pc, #172]	; (8008ee0 <HAL_TIM_Base_Start_IT+0xe4>)
 8008e32:	4293      	cmp	r3, r2
 8008e34:	d02c      	beq.n	8008e90 <HAL_TIM_Base_Start_IT+0x94>
 8008e36:	687b      	ldr	r3, [r7, #4]
 8008e38:	681b      	ldr	r3, [r3, #0]
 8008e3a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008e3e:	d027      	beq.n	8008e90 <HAL_TIM_Base_Start_IT+0x94>
 8008e40:	687b      	ldr	r3, [r7, #4]
 8008e42:	681b      	ldr	r3, [r3, #0]
 8008e44:	4a27      	ldr	r2, [pc, #156]	; (8008ee4 <HAL_TIM_Base_Start_IT+0xe8>)
 8008e46:	4293      	cmp	r3, r2
 8008e48:	d022      	beq.n	8008e90 <HAL_TIM_Base_Start_IT+0x94>
 8008e4a:	687b      	ldr	r3, [r7, #4]
 8008e4c:	681b      	ldr	r3, [r3, #0]
 8008e4e:	4a26      	ldr	r2, [pc, #152]	; (8008ee8 <HAL_TIM_Base_Start_IT+0xec>)
 8008e50:	4293      	cmp	r3, r2
 8008e52:	d01d      	beq.n	8008e90 <HAL_TIM_Base_Start_IT+0x94>
 8008e54:	687b      	ldr	r3, [r7, #4]
 8008e56:	681b      	ldr	r3, [r3, #0]
 8008e58:	4a24      	ldr	r2, [pc, #144]	; (8008eec <HAL_TIM_Base_Start_IT+0xf0>)
 8008e5a:	4293      	cmp	r3, r2
 8008e5c:	d018      	beq.n	8008e90 <HAL_TIM_Base_Start_IT+0x94>
 8008e5e:	687b      	ldr	r3, [r7, #4]
 8008e60:	681b      	ldr	r3, [r3, #0]
 8008e62:	4a23      	ldr	r2, [pc, #140]	; (8008ef0 <HAL_TIM_Base_Start_IT+0xf4>)
 8008e64:	4293      	cmp	r3, r2
 8008e66:	d013      	beq.n	8008e90 <HAL_TIM_Base_Start_IT+0x94>
 8008e68:	687b      	ldr	r3, [r7, #4]
 8008e6a:	681b      	ldr	r3, [r3, #0]
 8008e6c:	4a21      	ldr	r2, [pc, #132]	; (8008ef4 <HAL_TIM_Base_Start_IT+0xf8>)
 8008e6e:	4293      	cmp	r3, r2
 8008e70:	d00e      	beq.n	8008e90 <HAL_TIM_Base_Start_IT+0x94>
 8008e72:	687b      	ldr	r3, [r7, #4]
 8008e74:	681b      	ldr	r3, [r3, #0]
 8008e76:	4a20      	ldr	r2, [pc, #128]	; (8008ef8 <HAL_TIM_Base_Start_IT+0xfc>)
 8008e78:	4293      	cmp	r3, r2
 8008e7a:	d009      	beq.n	8008e90 <HAL_TIM_Base_Start_IT+0x94>
 8008e7c:	687b      	ldr	r3, [r7, #4]
 8008e7e:	681b      	ldr	r3, [r3, #0]
 8008e80:	4a1e      	ldr	r2, [pc, #120]	; (8008efc <HAL_TIM_Base_Start_IT+0x100>)
 8008e82:	4293      	cmp	r3, r2
 8008e84:	d004      	beq.n	8008e90 <HAL_TIM_Base_Start_IT+0x94>
 8008e86:	687b      	ldr	r3, [r7, #4]
 8008e88:	681b      	ldr	r3, [r3, #0]
 8008e8a:	4a1d      	ldr	r2, [pc, #116]	; (8008f00 <HAL_TIM_Base_Start_IT+0x104>)
 8008e8c:	4293      	cmp	r3, r2
 8008e8e:	d115      	bne.n	8008ebc <HAL_TIM_Base_Start_IT+0xc0>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008e90:	687b      	ldr	r3, [r7, #4]
 8008e92:	681b      	ldr	r3, [r3, #0]
 8008e94:	689a      	ldr	r2, [r3, #8]
 8008e96:	4b1b      	ldr	r3, [pc, #108]	; (8008f04 <HAL_TIM_Base_Start_IT+0x108>)
 8008e98:	4013      	ands	r3, r2
 8008e9a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008e9c:	68fb      	ldr	r3, [r7, #12]
 8008e9e:	2b06      	cmp	r3, #6
 8008ea0:	d015      	beq.n	8008ece <HAL_TIM_Base_Start_IT+0xd2>
 8008ea2:	68fb      	ldr	r3, [r7, #12]
 8008ea4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008ea8:	d011      	beq.n	8008ece <HAL_TIM_Base_Start_IT+0xd2>
    {
      __HAL_TIM_ENABLE(htim);
 8008eaa:	687b      	ldr	r3, [r7, #4]
 8008eac:	681b      	ldr	r3, [r3, #0]
 8008eae:	681a      	ldr	r2, [r3, #0]
 8008eb0:	687b      	ldr	r3, [r7, #4]
 8008eb2:	681b      	ldr	r3, [r3, #0]
 8008eb4:	f042 0201 	orr.w	r2, r2, #1
 8008eb8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008eba:	e008      	b.n	8008ece <HAL_TIM_Base_Start_IT+0xd2>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8008ebc:	687b      	ldr	r3, [r7, #4]
 8008ebe:	681b      	ldr	r3, [r3, #0]
 8008ec0:	681a      	ldr	r2, [r3, #0]
 8008ec2:	687b      	ldr	r3, [r7, #4]
 8008ec4:	681b      	ldr	r3, [r3, #0]
 8008ec6:	f042 0201 	orr.w	r2, r2, #1
 8008eca:	601a      	str	r2, [r3, #0]
 8008ecc:	e000      	b.n	8008ed0 <HAL_TIM_Base_Start_IT+0xd4>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008ece:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8008ed0:	2300      	movs	r3, #0
}
 8008ed2:	4618      	mov	r0, r3
 8008ed4:	3714      	adds	r7, #20
 8008ed6:	46bd      	mov	sp, r7
 8008ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008edc:	4770      	bx	lr
 8008ede:	bf00      	nop
 8008ee0:	40010000 	.word	0x40010000
 8008ee4:	40000400 	.word	0x40000400
 8008ee8:	40000800 	.word	0x40000800
 8008eec:	40000c00 	.word	0x40000c00
 8008ef0:	40010400 	.word	0x40010400
 8008ef4:	40001800 	.word	0x40001800
 8008ef8:	40014000 	.word	0x40014000
 8008efc:	4000e000 	.word	0x4000e000
 8008f00:	4000e400 	.word	0x4000e400
 8008f04:	00010007 	.word	0x00010007

08008f08 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8008f08:	b580      	push	{r7, lr}
 8008f0a:	b082      	sub	sp, #8
 8008f0c:	af00      	add	r7, sp, #0
 8008f0e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8008f10:	687b      	ldr	r3, [r7, #4]
 8008f12:	681b      	ldr	r3, [r3, #0]
 8008f14:	691b      	ldr	r3, [r3, #16]
 8008f16:	f003 0302 	and.w	r3, r3, #2
 8008f1a:	2b02      	cmp	r3, #2
 8008f1c:	d122      	bne.n	8008f64 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8008f1e:	687b      	ldr	r3, [r7, #4]
 8008f20:	681b      	ldr	r3, [r3, #0]
 8008f22:	68db      	ldr	r3, [r3, #12]
 8008f24:	f003 0302 	and.w	r3, r3, #2
 8008f28:	2b02      	cmp	r3, #2
 8008f2a:	d11b      	bne.n	8008f64 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8008f2c:	687b      	ldr	r3, [r7, #4]
 8008f2e:	681b      	ldr	r3, [r3, #0]
 8008f30:	f06f 0202 	mvn.w	r2, #2
 8008f34:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8008f36:	687b      	ldr	r3, [r7, #4]
 8008f38:	2201      	movs	r2, #1
 8008f3a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8008f3c:	687b      	ldr	r3, [r7, #4]
 8008f3e:	681b      	ldr	r3, [r3, #0]
 8008f40:	699b      	ldr	r3, [r3, #24]
 8008f42:	f003 0303 	and.w	r3, r3, #3
 8008f46:	2b00      	cmp	r3, #0
 8008f48:	d003      	beq.n	8008f52 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8008f4a:	6878      	ldr	r0, [r7, #4]
 8008f4c:	f000 f9fa 	bl	8009344 <HAL_TIM_IC_CaptureCallback>
 8008f50:	e005      	b.n	8008f5e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8008f52:	6878      	ldr	r0, [r7, #4]
 8008f54:	f000 f9ec 	bl	8009330 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008f58:	6878      	ldr	r0, [r7, #4]
 8008f5a:	f000 f9fd 	bl	8009358 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008f5e:	687b      	ldr	r3, [r7, #4]
 8008f60:	2200      	movs	r2, #0
 8008f62:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8008f64:	687b      	ldr	r3, [r7, #4]
 8008f66:	681b      	ldr	r3, [r3, #0]
 8008f68:	691b      	ldr	r3, [r3, #16]
 8008f6a:	f003 0304 	and.w	r3, r3, #4
 8008f6e:	2b04      	cmp	r3, #4
 8008f70:	d122      	bne.n	8008fb8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8008f72:	687b      	ldr	r3, [r7, #4]
 8008f74:	681b      	ldr	r3, [r3, #0]
 8008f76:	68db      	ldr	r3, [r3, #12]
 8008f78:	f003 0304 	and.w	r3, r3, #4
 8008f7c:	2b04      	cmp	r3, #4
 8008f7e:	d11b      	bne.n	8008fb8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8008f80:	687b      	ldr	r3, [r7, #4]
 8008f82:	681b      	ldr	r3, [r3, #0]
 8008f84:	f06f 0204 	mvn.w	r2, #4
 8008f88:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8008f8a:	687b      	ldr	r3, [r7, #4]
 8008f8c:	2202      	movs	r2, #2
 8008f8e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8008f90:	687b      	ldr	r3, [r7, #4]
 8008f92:	681b      	ldr	r3, [r3, #0]
 8008f94:	699b      	ldr	r3, [r3, #24]
 8008f96:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008f9a:	2b00      	cmp	r3, #0
 8008f9c:	d003      	beq.n	8008fa6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008f9e:	6878      	ldr	r0, [r7, #4]
 8008fa0:	f000 f9d0 	bl	8009344 <HAL_TIM_IC_CaptureCallback>
 8008fa4:	e005      	b.n	8008fb2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008fa6:	6878      	ldr	r0, [r7, #4]
 8008fa8:	f000 f9c2 	bl	8009330 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008fac:	6878      	ldr	r0, [r7, #4]
 8008fae:	f000 f9d3 	bl	8009358 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008fb2:	687b      	ldr	r3, [r7, #4]
 8008fb4:	2200      	movs	r2, #0
 8008fb6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8008fb8:	687b      	ldr	r3, [r7, #4]
 8008fba:	681b      	ldr	r3, [r3, #0]
 8008fbc:	691b      	ldr	r3, [r3, #16]
 8008fbe:	f003 0308 	and.w	r3, r3, #8
 8008fc2:	2b08      	cmp	r3, #8
 8008fc4:	d122      	bne.n	800900c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8008fc6:	687b      	ldr	r3, [r7, #4]
 8008fc8:	681b      	ldr	r3, [r3, #0]
 8008fca:	68db      	ldr	r3, [r3, #12]
 8008fcc:	f003 0308 	and.w	r3, r3, #8
 8008fd0:	2b08      	cmp	r3, #8
 8008fd2:	d11b      	bne.n	800900c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8008fd4:	687b      	ldr	r3, [r7, #4]
 8008fd6:	681b      	ldr	r3, [r3, #0]
 8008fd8:	f06f 0208 	mvn.w	r2, #8
 8008fdc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8008fde:	687b      	ldr	r3, [r7, #4]
 8008fe0:	2204      	movs	r2, #4
 8008fe2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8008fe4:	687b      	ldr	r3, [r7, #4]
 8008fe6:	681b      	ldr	r3, [r3, #0]
 8008fe8:	69db      	ldr	r3, [r3, #28]
 8008fea:	f003 0303 	and.w	r3, r3, #3
 8008fee:	2b00      	cmp	r3, #0
 8008ff0:	d003      	beq.n	8008ffa <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008ff2:	6878      	ldr	r0, [r7, #4]
 8008ff4:	f000 f9a6 	bl	8009344 <HAL_TIM_IC_CaptureCallback>
 8008ff8:	e005      	b.n	8009006 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008ffa:	6878      	ldr	r0, [r7, #4]
 8008ffc:	f000 f998 	bl	8009330 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009000:	6878      	ldr	r0, [r7, #4]
 8009002:	f000 f9a9 	bl	8009358 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009006:	687b      	ldr	r3, [r7, #4]
 8009008:	2200      	movs	r2, #0
 800900a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800900c:	687b      	ldr	r3, [r7, #4]
 800900e:	681b      	ldr	r3, [r3, #0]
 8009010:	691b      	ldr	r3, [r3, #16]
 8009012:	f003 0310 	and.w	r3, r3, #16
 8009016:	2b10      	cmp	r3, #16
 8009018:	d122      	bne.n	8009060 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800901a:	687b      	ldr	r3, [r7, #4]
 800901c:	681b      	ldr	r3, [r3, #0]
 800901e:	68db      	ldr	r3, [r3, #12]
 8009020:	f003 0310 	and.w	r3, r3, #16
 8009024:	2b10      	cmp	r3, #16
 8009026:	d11b      	bne.n	8009060 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8009028:	687b      	ldr	r3, [r7, #4]
 800902a:	681b      	ldr	r3, [r3, #0]
 800902c:	f06f 0210 	mvn.w	r2, #16
 8009030:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8009032:	687b      	ldr	r3, [r7, #4]
 8009034:	2208      	movs	r2, #8
 8009036:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8009038:	687b      	ldr	r3, [r7, #4]
 800903a:	681b      	ldr	r3, [r3, #0]
 800903c:	69db      	ldr	r3, [r3, #28]
 800903e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009042:	2b00      	cmp	r3, #0
 8009044:	d003      	beq.n	800904e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009046:	6878      	ldr	r0, [r7, #4]
 8009048:	f000 f97c 	bl	8009344 <HAL_TIM_IC_CaptureCallback>
 800904c:	e005      	b.n	800905a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800904e:	6878      	ldr	r0, [r7, #4]
 8009050:	f000 f96e 	bl	8009330 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009054:	6878      	ldr	r0, [r7, #4]
 8009056:	f000 f97f 	bl	8009358 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800905a:	687b      	ldr	r3, [r7, #4]
 800905c:	2200      	movs	r2, #0
 800905e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8009060:	687b      	ldr	r3, [r7, #4]
 8009062:	681b      	ldr	r3, [r3, #0]
 8009064:	691b      	ldr	r3, [r3, #16]
 8009066:	f003 0301 	and.w	r3, r3, #1
 800906a:	2b01      	cmp	r3, #1
 800906c:	d10e      	bne.n	800908c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800906e:	687b      	ldr	r3, [r7, #4]
 8009070:	681b      	ldr	r3, [r3, #0]
 8009072:	68db      	ldr	r3, [r3, #12]
 8009074:	f003 0301 	and.w	r3, r3, #1
 8009078:	2b01      	cmp	r3, #1
 800907a:	d107      	bne.n	800908c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800907c:	687b      	ldr	r3, [r7, #4]
 800907e:	681b      	ldr	r3, [r3, #0]
 8009080:	f06f 0201 	mvn.w	r2, #1
 8009084:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8009086:	6878      	ldr	r0, [r7, #4]
 8009088:	f7f7 fe58 	bl	8000d3c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800908c:	687b      	ldr	r3, [r7, #4]
 800908e:	681b      	ldr	r3, [r3, #0]
 8009090:	691b      	ldr	r3, [r3, #16]
 8009092:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009096:	2b80      	cmp	r3, #128	; 0x80
 8009098:	d10e      	bne.n	80090b8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800909a:	687b      	ldr	r3, [r7, #4]
 800909c:	681b      	ldr	r3, [r3, #0]
 800909e:	68db      	ldr	r3, [r3, #12]
 80090a0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80090a4:	2b80      	cmp	r3, #128	; 0x80
 80090a6:	d107      	bne.n	80090b8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80090a8:	687b      	ldr	r3, [r7, #4]
 80090aa:	681b      	ldr	r3, [r3, #0]
 80090ac:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80090b0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80090b2:	6878      	ldr	r0, [r7, #4]
 80090b4:	f000 fb4e 	bl	8009754 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80090b8:	687b      	ldr	r3, [r7, #4]
 80090ba:	681b      	ldr	r3, [r3, #0]
 80090bc:	691b      	ldr	r3, [r3, #16]
 80090be:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80090c2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80090c6:	d10e      	bne.n	80090e6 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80090c8:	687b      	ldr	r3, [r7, #4]
 80090ca:	681b      	ldr	r3, [r3, #0]
 80090cc:	68db      	ldr	r3, [r3, #12]
 80090ce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80090d2:	2b80      	cmp	r3, #128	; 0x80
 80090d4:	d107      	bne.n	80090e6 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80090d6:	687b      	ldr	r3, [r7, #4]
 80090d8:	681b      	ldr	r3, [r3, #0]
 80090da:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80090de:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80090e0:	6878      	ldr	r0, [r7, #4]
 80090e2:	f000 fb41 	bl	8009768 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80090e6:	687b      	ldr	r3, [r7, #4]
 80090e8:	681b      	ldr	r3, [r3, #0]
 80090ea:	691b      	ldr	r3, [r3, #16]
 80090ec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80090f0:	2b40      	cmp	r3, #64	; 0x40
 80090f2:	d10e      	bne.n	8009112 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80090f4:	687b      	ldr	r3, [r7, #4]
 80090f6:	681b      	ldr	r3, [r3, #0]
 80090f8:	68db      	ldr	r3, [r3, #12]
 80090fa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80090fe:	2b40      	cmp	r3, #64	; 0x40
 8009100:	d107      	bne.n	8009112 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8009102:	687b      	ldr	r3, [r7, #4]
 8009104:	681b      	ldr	r3, [r3, #0]
 8009106:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800910a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800910c:	6878      	ldr	r0, [r7, #4]
 800910e:	f000 f92d 	bl	800936c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8009112:	687b      	ldr	r3, [r7, #4]
 8009114:	681b      	ldr	r3, [r3, #0]
 8009116:	691b      	ldr	r3, [r3, #16]
 8009118:	f003 0320 	and.w	r3, r3, #32
 800911c:	2b20      	cmp	r3, #32
 800911e:	d10e      	bne.n	800913e <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8009120:	687b      	ldr	r3, [r7, #4]
 8009122:	681b      	ldr	r3, [r3, #0]
 8009124:	68db      	ldr	r3, [r3, #12]
 8009126:	f003 0320 	and.w	r3, r3, #32
 800912a:	2b20      	cmp	r3, #32
 800912c:	d107      	bne.n	800913e <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800912e:	687b      	ldr	r3, [r7, #4]
 8009130:	681b      	ldr	r3, [r3, #0]
 8009132:	f06f 0220 	mvn.w	r2, #32
 8009136:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8009138:	6878      	ldr	r0, [r7, #4]
 800913a:	f000 fb01 	bl	8009740 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800913e:	bf00      	nop
 8009140:	3708      	adds	r7, #8
 8009142:	46bd      	mov	sp, r7
 8009144:	bd80      	pop	{r7, pc}
	...

08009148 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8009148:	b580      	push	{r7, lr}
 800914a:	b084      	sub	sp, #16
 800914c:	af00      	add	r7, sp, #0
 800914e:	6078      	str	r0, [r7, #4]
 8009150:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8009152:	687b      	ldr	r3, [r7, #4]
 8009154:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009158:	2b01      	cmp	r3, #1
 800915a:	d101      	bne.n	8009160 <HAL_TIM_ConfigClockSource+0x18>
 800915c:	2302      	movs	r3, #2
 800915e:	e0db      	b.n	8009318 <HAL_TIM_ConfigClockSource+0x1d0>
 8009160:	687b      	ldr	r3, [r7, #4]
 8009162:	2201      	movs	r2, #1
 8009164:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8009168:	687b      	ldr	r3, [r7, #4]
 800916a:	2202      	movs	r2, #2
 800916c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8009170:	687b      	ldr	r3, [r7, #4]
 8009172:	681b      	ldr	r3, [r3, #0]
 8009174:	689b      	ldr	r3, [r3, #8]
 8009176:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8009178:	68fa      	ldr	r2, [r7, #12]
 800917a:	4b69      	ldr	r3, [pc, #420]	; (8009320 <HAL_TIM_ConfigClockSource+0x1d8>)
 800917c:	4013      	ands	r3, r2
 800917e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8009180:	68fb      	ldr	r3, [r7, #12]
 8009182:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8009186:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8009188:	687b      	ldr	r3, [r7, #4]
 800918a:	681b      	ldr	r3, [r3, #0]
 800918c:	68fa      	ldr	r2, [r7, #12]
 800918e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8009190:	683b      	ldr	r3, [r7, #0]
 8009192:	681b      	ldr	r3, [r3, #0]
 8009194:	4a63      	ldr	r2, [pc, #396]	; (8009324 <HAL_TIM_ConfigClockSource+0x1dc>)
 8009196:	4293      	cmp	r3, r2
 8009198:	f000 80a9 	beq.w	80092ee <HAL_TIM_ConfigClockSource+0x1a6>
 800919c:	4a61      	ldr	r2, [pc, #388]	; (8009324 <HAL_TIM_ConfigClockSource+0x1dc>)
 800919e:	4293      	cmp	r3, r2
 80091a0:	f200 80ae 	bhi.w	8009300 <HAL_TIM_ConfigClockSource+0x1b8>
 80091a4:	4a60      	ldr	r2, [pc, #384]	; (8009328 <HAL_TIM_ConfigClockSource+0x1e0>)
 80091a6:	4293      	cmp	r3, r2
 80091a8:	f000 80a1 	beq.w	80092ee <HAL_TIM_ConfigClockSource+0x1a6>
 80091ac:	4a5e      	ldr	r2, [pc, #376]	; (8009328 <HAL_TIM_ConfigClockSource+0x1e0>)
 80091ae:	4293      	cmp	r3, r2
 80091b0:	f200 80a6 	bhi.w	8009300 <HAL_TIM_ConfigClockSource+0x1b8>
 80091b4:	4a5d      	ldr	r2, [pc, #372]	; (800932c <HAL_TIM_ConfigClockSource+0x1e4>)
 80091b6:	4293      	cmp	r3, r2
 80091b8:	f000 8099 	beq.w	80092ee <HAL_TIM_ConfigClockSource+0x1a6>
 80091bc:	4a5b      	ldr	r2, [pc, #364]	; (800932c <HAL_TIM_ConfigClockSource+0x1e4>)
 80091be:	4293      	cmp	r3, r2
 80091c0:	f200 809e 	bhi.w	8009300 <HAL_TIM_ConfigClockSource+0x1b8>
 80091c4:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 80091c8:	f000 8091 	beq.w	80092ee <HAL_TIM_ConfigClockSource+0x1a6>
 80091cc:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 80091d0:	f200 8096 	bhi.w	8009300 <HAL_TIM_ConfigClockSource+0x1b8>
 80091d4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80091d8:	f000 8089 	beq.w	80092ee <HAL_TIM_ConfigClockSource+0x1a6>
 80091dc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80091e0:	f200 808e 	bhi.w	8009300 <HAL_TIM_ConfigClockSource+0x1b8>
 80091e4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80091e8:	d03e      	beq.n	8009268 <HAL_TIM_ConfigClockSource+0x120>
 80091ea:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80091ee:	f200 8087 	bhi.w	8009300 <HAL_TIM_ConfigClockSource+0x1b8>
 80091f2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80091f6:	f000 8085 	beq.w	8009304 <HAL_TIM_ConfigClockSource+0x1bc>
 80091fa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80091fe:	d87f      	bhi.n	8009300 <HAL_TIM_ConfigClockSource+0x1b8>
 8009200:	2b70      	cmp	r3, #112	; 0x70
 8009202:	d01a      	beq.n	800923a <HAL_TIM_ConfigClockSource+0xf2>
 8009204:	2b70      	cmp	r3, #112	; 0x70
 8009206:	d87b      	bhi.n	8009300 <HAL_TIM_ConfigClockSource+0x1b8>
 8009208:	2b60      	cmp	r3, #96	; 0x60
 800920a:	d050      	beq.n	80092ae <HAL_TIM_ConfigClockSource+0x166>
 800920c:	2b60      	cmp	r3, #96	; 0x60
 800920e:	d877      	bhi.n	8009300 <HAL_TIM_ConfigClockSource+0x1b8>
 8009210:	2b50      	cmp	r3, #80	; 0x50
 8009212:	d03c      	beq.n	800928e <HAL_TIM_ConfigClockSource+0x146>
 8009214:	2b50      	cmp	r3, #80	; 0x50
 8009216:	d873      	bhi.n	8009300 <HAL_TIM_ConfigClockSource+0x1b8>
 8009218:	2b40      	cmp	r3, #64	; 0x40
 800921a:	d058      	beq.n	80092ce <HAL_TIM_ConfigClockSource+0x186>
 800921c:	2b40      	cmp	r3, #64	; 0x40
 800921e:	d86f      	bhi.n	8009300 <HAL_TIM_ConfigClockSource+0x1b8>
 8009220:	2b30      	cmp	r3, #48	; 0x30
 8009222:	d064      	beq.n	80092ee <HAL_TIM_ConfigClockSource+0x1a6>
 8009224:	2b30      	cmp	r3, #48	; 0x30
 8009226:	d86b      	bhi.n	8009300 <HAL_TIM_ConfigClockSource+0x1b8>
 8009228:	2b20      	cmp	r3, #32
 800922a:	d060      	beq.n	80092ee <HAL_TIM_ConfigClockSource+0x1a6>
 800922c:	2b20      	cmp	r3, #32
 800922e:	d867      	bhi.n	8009300 <HAL_TIM_ConfigClockSource+0x1b8>
 8009230:	2b00      	cmp	r3, #0
 8009232:	d05c      	beq.n	80092ee <HAL_TIM_ConfigClockSource+0x1a6>
 8009234:	2b10      	cmp	r3, #16
 8009236:	d05a      	beq.n	80092ee <HAL_TIM_ConfigClockSource+0x1a6>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8009238:	e062      	b.n	8009300 <HAL_TIM_ConfigClockSource+0x1b8>
      TIM_ETR_SetConfig(htim->Instance,
 800923a:	687b      	ldr	r3, [r7, #4]
 800923c:	6818      	ldr	r0, [r3, #0]
 800923e:	683b      	ldr	r3, [r7, #0]
 8009240:	6899      	ldr	r1, [r3, #8]
 8009242:	683b      	ldr	r3, [r7, #0]
 8009244:	685a      	ldr	r2, [r3, #4]
 8009246:	683b      	ldr	r3, [r7, #0]
 8009248:	68db      	ldr	r3, [r3, #12]
 800924a:	f000 f9bd 	bl	80095c8 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800924e:	687b      	ldr	r3, [r7, #4]
 8009250:	681b      	ldr	r3, [r3, #0]
 8009252:	689b      	ldr	r3, [r3, #8]
 8009254:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8009256:	68fb      	ldr	r3, [r7, #12]
 8009258:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800925c:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 800925e:	687b      	ldr	r3, [r7, #4]
 8009260:	681b      	ldr	r3, [r3, #0]
 8009262:	68fa      	ldr	r2, [r7, #12]
 8009264:	609a      	str	r2, [r3, #8]
      break;
 8009266:	e04e      	b.n	8009306 <HAL_TIM_ConfigClockSource+0x1be>
      TIM_ETR_SetConfig(htim->Instance,
 8009268:	687b      	ldr	r3, [r7, #4]
 800926a:	6818      	ldr	r0, [r3, #0]
 800926c:	683b      	ldr	r3, [r7, #0]
 800926e:	6899      	ldr	r1, [r3, #8]
 8009270:	683b      	ldr	r3, [r7, #0]
 8009272:	685a      	ldr	r2, [r3, #4]
 8009274:	683b      	ldr	r3, [r7, #0]
 8009276:	68db      	ldr	r3, [r3, #12]
 8009278:	f000 f9a6 	bl	80095c8 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800927c:	687b      	ldr	r3, [r7, #4]
 800927e:	681b      	ldr	r3, [r3, #0]
 8009280:	689a      	ldr	r2, [r3, #8]
 8009282:	687b      	ldr	r3, [r7, #4]
 8009284:	681b      	ldr	r3, [r3, #0]
 8009286:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800928a:	609a      	str	r2, [r3, #8]
      break;
 800928c:	e03b      	b.n	8009306 <HAL_TIM_ConfigClockSource+0x1be>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800928e:	687b      	ldr	r3, [r7, #4]
 8009290:	6818      	ldr	r0, [r3, #0]
 8009292:	683b      	ldr	r3, [r7, #0]
 8009294:	6859      	ldr	r1, [r3, #4]
 8009296:	683b      	ldr	r3, [r7, #0]
 8009298:	68db      	ldr	r3, [r3, #12]
 800929a:	461a      	mov	r2, r3
 800929c:	f000 f916 	bl	80094cc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80092a0:	687b      	ldr	r3, [r7, #4]
 80092a2:	681b      	ldr	r3, [r3, #0]
 80092a4:	2150      	movs	r1, #80	; 0x50
 80092a6:	4618      	mov	r0, r3
 80092a8:	f000 f970 	bl	800958c <TIM_ITRx_SetConfig>
      break;
 80092ac:	e02b      	b.n	8009306 <HAL_TIM_ConfigClockSource+0x1be>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80092ae:	687b      	ldr	r3, [r7, #4]
 80092b0:	6818      	ldr	r0, [r3, #0]
 80092b2:	683b      	ldr	r3, [r7, #0]
 80092b4:	6859      	ldr	r1, [r3, #4]
 80092b6:	683b      	ldr	r3, [r7, #0]
 80092b8:	68db      	ldr	r3, [r3, #12]
 80092ba:	461a      	mov	r2, r3
 80092bc:	f000 f935 	bl	800952a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80092c0:	687b      	ldr	r3, [r7, #4]
 80092c2:	681b      	ldr	r3, [r3, #0]
 80092c4:	2160      	movs	r1, #96	; 0x60
 80092c6:	4618      	mov	r0, r3
 80092c8:	f000 f960 	bl	800958c <TIM_ITRx_SetConfig>
      break;
 80092cc:	e01b      	b.n	8009306 <HAL_TIM_ConfigClockSource+0x1be>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80092ce:	687b      	ldr	r3, [r7, #4]
 80092d0:	6818      	ldr	r0, [r3, #0]
 80092d2:	683b      	ldr	r3, [r7, #0]
 80092d4:	6859      	ldr	r1, [r3, #4]
 80092d6:	683b      	ldr	r3, [r7, #0]
 80092d8:	68db      	ldr	r3, [r3, #12]
 80092da:	461a      	mov	r2, r3
 80092dc:	f000 f8f6 	bl	80094cc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80092e0:	687b      	ldr	r3, [r7, #4]
 80092e2:	681b      	ldr	r3, [r3, #0]
 80092e4:	2140      	movs	r1, #64	; 0x40
 80092e6:	4618      	mov	r0, r3
 80092e8:	f000 f950 	bl	800958c <TIM_ITRx_SetConfig>
      break;
 80092ec:	e00b      	b.n	8009306 <HAL_TIM_ConfigClockSource+0x1be>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80092ee:	687b      	ldr	r3, [r7, #4]
 80092f0:	681a      	ldr	r2, [r3, #0]
 80092f2:	683b      	ldr	r3, [r7, #0]
 80092f4:	681b      	ldr	r3, [r3, #0]
 80092f6:	4619      	mov	r1, r3
 80092f8:	4610      	mov	r0, r2
 80092fa:	f000 f947 	bl	800958c <TIM_ITRx_SetConfig>
        break;
 80092fe:	e002      	b.n	8009306 <HAL_TIM_ConfigClockSource+0x1be>
      break;
 8009300:	bf00      	nop
 8009302:	e000      	b.n	8009306 <HAL_TIM_ConfigClockSource+0x1be>
      break;
 8009304:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8009306:	687b      	ldr	r3, [r7, #4]
 8009308:	2201      	movs	r2, #1
 800930a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800930e:	687b      	ldr	r3, [r7, #4]
 8009310:	2200      	movs	r2, #0
 8009312:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8009316:	2300      	movs	r3, #0
}
 8009318:	4618      	mov	r0, r3
 800931a:	3710      	adds	r7, #16
 800931c:	46bd      	mov	sp, r7
 800931e:	bd80      	pop	{r7, pc}
 8009320:	ffceff88 	.word	0xffceff88
 8009324:	00100040 	.word	0x00100040
 8009328:	00100030 	.word	0x00100030
 800932c:	00100020 	.word	0x00100020

08009330 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8009330:	b480      	push	{r7}
 8009332:	b083      	sub	sp, #12
 8009334:	af00      	add	r7, sp, #0
 8009336:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8009338:	bf00      	nop
 800933a:	370c      	adds	r7, #12
 800933c:	46bd      	mov	sp, r7
 800933e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009342:	4770      	bx	lr

08009344 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8009344:	b480      	push	{r7}
 8009346:	b083      	sub	sp, #12
 8009348:	af00      	add	r7, sp, #0
 800934a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800934c:	bf00      	nop
 800934e:	370c      	adds	r7, #12
 8009350:	46bd      	mov	sp, r7
 8009352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009356:	4770      	bx	lr

08009358 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8009358:	b480      	push	{r7}
 800935a:	b083      	sub	sp, #12
 800935c:	af00      	add	r7, sp, #0
 800935e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8009360:	bf00      	nop
 8009362:	370c      	adds	r7, #12
 8009364:	46bd      	mov	sp, r7
 8009366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800936a:	4770      	bx	lr

0800936c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800936c:	b480      	push	{r7}
 800936e:	b083      	sub	sp, #12
 8009370:	af00      	add	r7, sp, #0
 8009372:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8009374:	bf00      	nop
 8009376:	370c      	adds	r7, #12
 8009378:	46bd      	mov	sp, r7
 800937a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800937e:	4770      	bx	lr

08009380 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8009380:	b480      	push	{r7}
 8009382:	b085      	sub	sp, #20
 8009384:	af00      	add	r7, sp, #0
 8009386:	6078      	str	r0, [r7, #4]
 8009388:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800938a:	687b      	ldr	r3, [r7, #4]
 800938c:	681b      	ldr	r3, [r3, #0]
 800938e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8009390:	687b      	ldr	r3, [r7, #4]
 8009392:	4a44      	ldr	r2, [pc, #272]	; (80094a4 <TIM_Base_SetConfig+0x124>)
 8009394:	4293      	cmp	r3, r2
 8009396:	d013      	beq.n	80093c0 <TIM_Base_SetConfig+0x40>
 8009398:	687b      	ldr	r3, [r7, #4]
 800939a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800939e:	d00f      	beq.n	80093c0 <TIM_Base_SetConfig+0x40>
 80093a0:	687b      	ldr	r3, [r7, #4]
 80093a2:	4a41      	ldr	r2, [pc, #260]	; (80094a8 <TIM_Base_SetConfig+0x128>)
 80093a4:	4293      	cmp	r3, r2
 80093a6:	d00b      	beq.n	80093c0 <TIM_Base_SetConfig+0x40>
 80093a8:	687b      	ldr	r3, [r7, #4]
 80093aa:	4a40      	ldr	r2, [pc, #256]	; (80094ac <TIM_Base_SetConfig+0x12c>)
 80093ac:	4293      	cmp	r3, r2
 80093ae:	d007      	beq.n	80093c0 <TIM_Base_SetConfig+0x40>
 80093b0:	687b      	ldr	r3, [r7, #4]
 80093b2:	4a3f      	ldr	r2, [pc, #252]	; (80094b0 <TIM_Base_SetConfig+0x130>)
 80093b4:	4293      	cmp	r3, r2
 80093b6:	d003      	beq.n	80093c0 <TIM_Base_SetConfig+0x40>
 80093b8:	687b      	ldr	r3, [r7, #4]
 80093ba:	4a3e      	ldr	r2, [pc, #248]	; (80094b4 <TIM_Base_SetConfig+0x134>)
 80093bc:	4293      	cmp	r3, r2
 80093be:	d108      	bne.n	80093d2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80093c0:	68fb      	ldr	r3, [r7, #12]
 80093c2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80093c6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80093c8:	683b      	ldr	r3, [r7, #0]
 80093ca:	685b      	ldr	r3, [r3, #4]
 80093cc:	68fa      	ldr	r2, [r7, #12]
 80093ce:	4313      	orrs	r3, r2
 80093d0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80093d2:	687b      	ldr	r3, [r7, #4]
 80093d4:	4a33      	ldr	r2, [pc, #204]	; (80094a4 <TIM_Base_SetConfig+0x124>)
 80093d6:	4293      	cmp	r3, r2
 80093d8:	d027      	beq.n	800942a <TIM_Base_SetConfig+0xaa>
 80093da:	687b      	ldr	r3, [r7, #4]
 80093dc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80093e0:	d023      	beq.n	800942a <TIM_Base_SetConfig+0xaa>
 80093e2:	687b      	ldr	r3, [r7, #4]
 80093e4:	4a30      	ldr	r2, [pc, #192]	; (80094a8 <TIM_Base_SetConfig+0x128>)
 80093e6:	4293      	cmp	r3, r2
 80093e8:	d01f      	beq.n	800942a <TIM_Base_SetConfig+0xaa>
 80093ea:	687b      	ldr	r3, [r7, #4]
 80093ec:	4a2f      	ldr	r2, [pc, #188]	; (80094ac <TIM_Base_SetConfig+0x12c>)
 80093ee:	4293      	cmp	r3, r2
 80093f0:	d01b      	beq.n	800942a <TIM_Base_SetConfig+0xaa>
 80093f2:	687b      	ldr	r3, [r7, #4]
 80093f4:	4a2e      	ldr	r2, [pc, #184]	; (80094b0 <TIM_Base_SetConfig+0x130>)
 80093f6:	4293      	cmp	r3, r2
 80093f8:	d017      	beq.n	800942a <TIM_Base_SetConfig+0xaa>
 80093fa:	687b      	ldr	r3, [r7, #4]
 80093fc:	4a2d      	ldr	r2, [pc, #180]	; (80094b4 <TIM_Base_SetConfig+0x134>)
 80093fe:	4293      	cmp	r3, r2
 8009400:	d013      	beq.n	800942a <TIM_Base_SetConfig+0xaa>
 8009402:	687b      	ldr	r3, [r7, #4]
 8009404:	4a2c      	ldr	r2, [pc, #176]	; (80094b8 <TIM_Base_SetConfig+0x138>)
 8009406:	4293      	cmp	r3, r2
 8009408:	d00f      	beq.n	800942a <TIM_Base_SetConfig+0xaa>
 800940a:	687b      	ldr	r3, [r7, #4]
 800940c:	4a2b      	ldr	r2, [pc, #172]	; (80094bc <TIM_Base_SetConfig+0x13c>)
 800940e:	4293      	cmp	r3, r2
 8009410:	d00b      	beq.n	800942a <TIM_Base_SetConfig+0xaa>
 8009412:	687b      	ldr	r3, [r7, #4]
 8009414:	4a2a      	ldr	r2, [pc, #168]	; (80094c0 <TIM_Base_SetConfig+0x140>)
 8009416:	4293      	cmp	r3, r2
 8009418:	d007      	beq.n	800942a <TIM_Base_SetConfig+0xaa>
 800941a:	687b      	ldr	r3, [r7, #4]
 800941c:	4a29      	ldr	r2, [pc, #164]	; (80094c4 <TIM_Base_SetConfig+0x144>)
 800941e:	4293      	cmp	r3, r2
 8009420:	d003      	beq.n	800942a <TIM_Base_SetConfig+0xaa>
 8009422:	687b      	ldr	r3, [r7, #4]
 8009424:	4a28      	ldr	r2, [pc, #160]	; (80094c8 <TIM_Base_SetConfig+0x148>)
 8009426:	4293      	cmp	r3, r2
 8009428:	d108      	bne.n	800943c <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800942a:	68fb      	ldr	r3, [r7, #12]
 800942c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009430:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8009432:	683b      	ldr	r3, [r7, #0]
 8009434:	68db      	ldr	r3, [r3, #12]
 8009436:	68fa      	ldr	r2, [r7, #12]
 8009438:	4313      	orrs	r3, r2
 800943a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800943c:	68fb      	ldr	r3, [r7, #12]
 800943e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8009442:	683b      	ldr	r3, [r7, #0]
 8009444:	695b      	ldr	r3, [r3, #20]
 8009446:	4313      	orrs	r3, r2
 8009448:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800944a:	687b      	ldr	r3, [r7, #4]
 800944c:	68fa      	ldr	r2, [r7, #12]
 800944e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8009450:	683b      	ldr	r3, [r7, #0]
 8009452:	689a      	ldr	r2, [r3, #8]
 8009454:	687b      	ldr	r3, [r7, #4]
 8009456:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8009458:	683b      	ldr	r3, [r7, #0]
 800945a:	681a      	ldr	r2, [r3, #0]
 800945c:	687b      	ldr	r3, [r7, #4]
 800945e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8009460:	687b      	ldr	r3, [r7, #4]
 8009462:	4a10      	ldr	r2, [pc, #64]	; (80094a4 <TIM_Base_SetConfig+0x124>)
 8009464:	4293      	cmp	r3, r2
 8009466:	d00f      	beq.n	8009488 <TIM_Base_SetConfig+0x108>
 8009468:	687b      	ldr	r3, [r7, #4]
 800946a:	4a12      	ldr	r2, [pc, #72]	; (80094b4 <TIM_Base_SetConfig+0x134>)
 800946c:	4293      	cmp	r3, r2
 800946e:	d00b      	beq.n	8009488 <TIM_Base_SetConfig+0x108>
 8009470:	687b      	ldr	r3, [r7, #4]
 8009472:	4a11      	ldr	r2, [pc, #68]	; (80094b8 <TIM_Base_SetConfig+0x138>)
 8009474:	4293      	cmp	r3, r2
 8009476:	d007      	beq.n	8009488 <TIM_Base_SetConfig+0x108>
 8009478:	687b      	ldr	r3, [r7, #4]
 800947a:	4a10      	ldr	r2, [pc, #64]	; (80094bc <TIM_Base_SetConfig+0x13c>)
 800947c:	4293      	cmp	r3, r2
 800947e:	d003      	beq.n	8009488 <TIM_Base_SetConfig+0x108>
 8009480:	687b      	ldr	r3, [r7, #4]
 8009482:	4a0f      	ldr	r2, [pc, #60]	; (80094c0 <TIM_Base_SetConfig+0x140>)
 8009484:	4293      	cmp	r3, r2
 8009486:	d103      	bne.n	8009490 <TIM_Base_SetConfig+0x110>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8009488:	683b      	ldr	r3, [r7, #0]
 800948a:	691a      	ldr	r2, [r3, #16]
 800948c:	687b      	ldr	r3, [r7, #4]
 800948e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8009490:	687b      	ldr	r3, [r7, #4]
 8009492:	2201      	movs	r2, #1
 8009494:	615a      	str	r2, [r3, #20]
}
 8009496:	bf00      	nop
 8009498:	3714      	adds	r7, #20
 800949a:	46bd      	mov	sp, r7
 800949c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094a0:	4770      	bx	lr
 80094a2:	bf00      	nop
 80094a4:	40010000 	.word	0x40010000
 80094a8:	40000400 	.word	0x40000400
 80094ac:	40000800 	.word	0x40000800
 80094b0:	40000c00 	.word	0x40000c00
 80094b4:	40010400 	.word	0x40010400
 80094b8:	40014000 	.word	0x40014000
 80094bc:	40014400 	.word	0x40014400
 80094c0:	40014800 	.word	0x40014800
 80094c4:	4000e000 	.word	0x4000e000
 80094c8:	4000e400 	.word	0x4000e400

080094cc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80094cc:	b480      	push	{r7}
 80094ce:	b087      	sub	sp, #28
 80094d0:	af00      	add	r7, sp, #0
 80094d2:	60f8      	str	r0, [r7, #12]
 80094d4:	60b9      	str	r1, [r7, #8]
 80094d6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80094d8:	68fb      	ldr	r3, [r7, #12]
 80094da:	6a1b      	ldr	r3, [r3, #32]
 80094dc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80094de:	68fb      	ldr	r3, [r7, #12]
 80094e0:	6a1b      	ldr	r3, [r3, #32]
 80094e2:	f023 0201 	bic.w	r2, r3, #1
 80094e6:	68fb      	ldr	r3, [r7, #12]
 80094e8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80094ea:	68fb      	ldr	r3, [r7, #12]
 80094ec:	699b      	ldr	r3, [r3, #24]
 80094ee:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80094f0:	693b      	ldr	r3, [r7, #16]
 80094f2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80094f6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80094f8:	687b      	ldr	r3, [r7, #4]
 80094fa:	011b      	lsls	r3, r3, #4
 80094fc:	693a      	ldr	r2, [r7, #16]
 80094fe:	4313      	orrs	r3, r2
 8009500:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8009502:	697b      	ldr	r3, [r7, #20]
 8009504:	f023 030a 	bic.w	r3, r3, #10
 8009508:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800950a:	697a      	ldr	r2, [r7, #20]
 800950c:	68bb      	ldr	r3, [r7, #8]
 800950e:	4313      	orrs	r3, r2
 8009510:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8009512:	68fb      	ldr	r3, [r7, #12]
 8009514:	693a      	ldr	r2, [r7, #16]
 8009516:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009518:	68fb      	ldr	r3, [r7, #12]
 800951a:	697a      	ldr	r2, [r7, #20]
 800951c:	621a      	str	r2, [r3, #32]
}
 800951e:	bf00      	nop
 8009520:	371c      	adds	r7, #28
 8009522:	46bd      	mov	sp, r7
 8009524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009528:	4770      	bx	lr

0800952a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800952a:	b480      	push	{r7}
 800952c:	b087      	sub	sp, #28
 800952e:	af00      	add	r7, sp, #0
 8009530:	60f8      	str	r0, [r7, #12]
 8009532:	60b9      	str	r1, [r7, #8]
 8009534:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8009536:	68fb      	ldr	r3, [r7, #12]
 8009538:	6a1b      	ldr	r3, [r3, #32]
 800953a:	f023 0210 	bic.w	r2, r3, #16
 800953e:	68fb      	ldr	r3, [r7, #12]
 8009540:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009542:	68fb      	ldr	r3, [r7, #12]
 8009544:	699b      	ldr	r3, [r3, #24]
 8009546:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8009548:	68fb      	ldr	r3, [r7, #12]
 800954a:	6a1b      	ldr	r3, [r3, #32]
 800954c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800954e:	697b      	ldr	r3, [r7, #20]
 8009550:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8009554:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8009556:	687b      	ldr	r3, [r7, #4]
 8009558:	031b      	lsls	r3, r3, #12
 800955a:	697a      	ldr	r2, [r7, #20]
 800955c:	4313      	orrs	r3, r2
 800955e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8009560:	693b      	ldr	r3, [r7, #16]
 8009562:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8009566:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8009568:	68bb      	ldr	r3, [r7, #8]
 800956a:	011b      	lsls	r3, r3, #4
 800956c:	693a      	ldr	r2, [r7, #16]
 800956e:	4313      	orrs	r3, r2
 8009570:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8009572:	68fb      	ldr	r3, [r7, #12]
 8009574:	697a      	ldr	r2, [r7, #20]
 8009576:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009578:	68fb      	ldr	r3, [r7, #12]
 800957a:	693a      	ldr	r2, [r7, #16]
 800957c:	621a      	str	r2, [r3, #32]
}
 800957e:	bf00      	nop
 8009580:	371c      	adds	r7, #28
 8009582:	46bd      	mov	sp, r7
 8009584:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009588:	4770      	bx	lr
	...

0800958c <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800958c:	b480      	push	{r7}
 800958e:	b085      	sub	sp, #20
 8009590:	af00      	add	r7, sp, #0
 8009592:	6078      	str	r0, [r7, #4]
 8009594:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8009596:	687b      	ldr	r3, [r7, #4]
 8009598:	689b      	ldr	r3, [r3, #8]
 800959a:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800959c:	68fa      	ldr	r2, [r7, #12]
 800959e:	4b09      	ldr	r3, [pc, #36]	; (80095c4 <TIM_ITRx_SetConfig+0x38>)
 80095a0:	4013      	ands	r3, r2
 80095a2:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80095a4:	683a      	ldr	r2, [r7, #0]
 80095a6:	68fb      	ldr	r3, [r7, #12]
 80095a8:	4313      	orrs	r3, r2
 80095aa:	f043 0307 	orr.w	r3, r3, #7
 80095ae:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80095b0:	687b      	ldr	r3, [r7, #4]
 80095b2:	68fa      	ldr	r2, [r7, #12]
 80095b4:	609a      	str	r2, [r3, #8]
}
 80095b6:	bf00      	nop
 80095b8:	3714      	adds	r7, #20
 80095ba:	46bd      	mov	sp, r7
 80095bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095c0:	4770      	bx	lr
 80095c2:	bf00      	nop
 80095c4:	ffcfff8f 	.word	0xffcfff8f

080095c8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80095c8:	b480      	push	{r7}
 80095ca:	b087      	sub	sp, #28
 80095cc:	af00      	add	r7, sp, #0
 80095ce:	60f8      	str	r0, [r7, #12]
 80095d0:	60b9      	str	r1, [r7, #8]
 80095d2:	607a      	str	r2, [r7, #4]
 80095d4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80095d6:	68fb      	ldr	r3, [r7, #12]
 80095d8:	689b      	ldr	r3, [r3, #8]
 80095da:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80095dc:	697b      	ldr	r3, [r7, #20]
 80095de:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80095e2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80095e4:	683b      	ldr	r3, [r7, #0]
 80095e6:	021a      	lsls	r2, r3, #8
 80095e8:	687b      	ldr	r3, [r7, #4]
 80095ea:	431a      	orrs	r2, r3
 80095ec:	68bb      	ldr	r3, [r7, #8]
 80095ee:	4313      	orrs	r3, r2
 80095f0:	697a      	ldr	r2, [r7, #20]
 80095f2:	4313      	orrs	r3, r2
 80095f4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80095f6:	68fb      	ldr	r3, [r7, #12]
 80095f8:	697a      	ldr	r2, [r7, #20]
 80095fa:	609a      	str	r2, [r3, #8]
}
 80095fc:	bf00      	nop
 80095fe:	371c      	adds	r7, #28
 8009600:	46bd      	mov	sp, r7
 8009602:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009606:	4770      	bx	lr

08009608 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8009608:	b480      	push	{r7}
 800960a:	b085      	sub	sp, #20
 800960c:	af00      	add	r7, sp, #0
 800960e:	6078      	str	r0, [r7, #4]
 8009610:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8009612:	687b      	ldr	r3, [r7, #4]
 8009614:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009618:	2b01      	cmp	r3, #1
 800961a:	d101      	bne.n	8009620 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800961c:	2302      	movs	r3, #2
 800961e:	e077      	b.n	8009710 <HAL_TIMEx_MasterConfigSynchronization+0x108>
 8009620:	687b      	ldr	r3, [r7, #4]
 8009622:	2201      	movs	r2, #1
 8009624:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009628:	687b      	ldr	r3, [r7, #4]
 800962a:	2202      	movs	r2, #2
 800962c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8009630:	687b      	ldr	r3, [r7, #4]
 8009632:	681b      	ldr	r3, [r3, #0]
 8009634:	685b      	ldr	r3, [r3, #4]
 8009636:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8009638:	687b      	ldr	r3, [r7, #4]
 800963a:	681b      	ldr	r3, [r3, #0]
 800963c:	689b      	ldr	r3, [r3, #8]
 800963e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8009640:	687b      	ldr	r3, [r7, #4]
 8009642:	681b      	ldr	r3, [r3, #0]
 8009644:	4a35      	ldr	r2, [pc, #212]	; (800971c <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8009646:	4293      	cmp	r3, r2
 8009648:	d004      	beq.n	8009654 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800964a:	687b      	ldr	r3, [r7, #4]
 800964c:	681b      	ldr	r3, [r3, #0]
 800964e:	4a34      	ldr	r2, [pc, #208]	; (8009720 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8009650:	4293      	cmp	r3, r2
 8009652:	d108      	bne.n	8009666 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8009654:	68fb      	ldr	r3, [r7, #12]
 8009656:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800965a:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800965c:	683b      	ldr	r3, [r7, #0]
 800965e:	685b      	ldr	r3, [r3, #4]
 8009660:	68fa      	ldr	r2, [r7, #12]
 8009662:	4313      	orrs	r3, r2
 8009664:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8009666:	68fb      	ldr	r3, [r7, #12]
 8009668:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800966c:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800966e:	683b      	ldr	r3, [r7, #0]
 8009670:	681b      	ldr	r3, [r3, #0]
 8009672:	68fa      	ldr	r2, [r7, #12]
 8009674:	4313      	orrs	r3, r2
 8009676:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8009678:	687b      	ldr	r3, [r7, #4]
 800967a:	681b      	ldr	r3, [r3, #0]
 800967c:	68fa      	ldr	r2, [r7, #12]
 800967e:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009680:	687b      	ldr	r3, [r7, #4]
 8009682:	681b      	ldr	r3, [r3, #0]
 8009684:	4a25      	ldr	r2, [pc, #148]	; (800971c <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8009686:	4293      	cmp	r3, r2
 8009688:	d02c      	beq.n	80096e4 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800968a:	687b      	ldr	r3, [r7, #4]
 800968c:	681b      	ldr	r3, [r3, #0]
 800968e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009692:	d027      	beq.n	80096e4 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8009694:	687b      	ldr	r3, [r7, #4]
 8009696:	681b      	ldr	r3, [r3, #0]
 8009698:	4a22      	ldr	r2, [pc, #136]	; (8009724 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 800969a:	4293      	cmp	r3, r2
 800969c:	d022      	beq.n	80096e4 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800969e:	687b      	ldr	r3, [r7, #4]
 80096a0:	681b      	ldr	r3, [r3, #0]
 80096a2:	4a21      	ldr	r2, [pc, #132]	; (8009728 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 80096a4:	4293      	cmp	r3, r2
 80096a6:	d01d      	beq.n	80096e4 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 80096a8:	687b      	ldr	r3, [r7, #4]
 80096aa:	681b      	ldr	r3, [r3, #0]
 80096ac:	4a1f      	ldr	r2, [pc, #124]	; (800972c <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 80096ae:	4293      	cmp	r3, r2
 80096b0:	d018      	beq.n	80096e4 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 80096b2:	687b      	ldr	r3, [r7, #4]
 80096b4:	681b      	ldr	r3, [r3, #0]
 80096b6:	4a1a      	ldr	r2, [pc, #104]	; (8009720 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 80096b8:	4293      	cmp	r3, r2
 80096ba:	d013      	beq.n	80096e4 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 80096bc:	687b      	ldr	r3, [r7, #4]
 80096be:	681b      	ldr	r3, [r3, #0]
 80096c0:	4a1b      	ldr	r2, [pc, #108]	; (8009730 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 80096c2:	4293      	cmp	r3, r2
 80096c4:	d00e      	beq.n	80096e4 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 80096c6:	687b      	ldr	r3, [r7, #4]
 80096c8:	681b      	ldr	r3, [r3, #0]
 80096ca:	4a1a      	ldr	r2, [pc, #104]	; (8009734 <HAL_TIMEx_MasterConfigSynchronization+0x12c>)
 80096cc:	4293      	cmp	r3, r2
 80096ce:	d009      	beq.n	80096e4 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 80096d0:	687b      	ldr	r3, [r7, #4]
 80096d2:	681b      	ldr	r3, [r3, #0]
 80096d4:	4a18      	ldr	r2, [pc, #96]	; (8009738 <HAL_TIMEx_MasterConfigSynchronization+0x130>)
 80096d6:	4293      	cmp	r3, r2
 80096d8:	d004      	beq.n	80096e4 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 80096da:	687b      	ldr	r3, [r7, #4]
 80096dc:	681b      	ldr	r3, [r3, #0]
 80096de:	4a17      	ldr	r2, [pc, #92]	; (800973c <HAL_TIMEx_MasterConfigSynchronization+0x134>)
 80096e0:	4293      	cmp	r3, r2
 80096e2:	d10c      	bne.n	80096fe <HAL_TIMEx_MasterConfigSynchronization+0xf6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80096e4:	68bb      	ldr	r3, [r7, #8]
 80096e6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80096ea:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80096ec:	683b      	ldr	r3, [r7, #0]
 80096ee:	689b      	ldr	r3, [r3, #8]
 80096f0:	68ba      	ldr	r2, [r7, #8]
 80096f2:	4313      	orrs	r3, r2
 80096f4:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80096f6:	687b      	ldr	r3, [r7, #4]
 80096f8:	681b      	ldr	r3, [r3, #0]
 80096fa:	68ba      	ldr	r2, [r7, #8]
 80096fc:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80096fe:	687b      	ldr	r3, [r7, #4]
 8009700:	2201      	movs	r2, #1
 8009702:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8009706:	687b      	ldr	r3, [r7, #4]
 8009708:	2200      	movs	r2, #0
 800970a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800970e:	2300      	movs	r3, #0
}
 8009710:	4618      	mov	r0, r3
 8009712:	3714      	adds	r7, #20
 8009714:	46bd      	mov	sp, r7
 8009716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800971a:	4770      	bx	lr
 800971c:	40010000 	.word	0x40010000
 8009720:	40010400 	.word	0x40010400
 8009724:	40000400 	.word	0x40000400
 8009728:	40000800 	.word	0x40000800
 800972c:	40000c00 	.word	0x40000c00
 8009730:	40001800 	.word	0x40001800
 8009734:	40014000 	.word	0x40014000
 8009738:	4000e000 	.word	0x4000e000
 800973c:	4000e400 	.word	0x4000e400

08009740 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8009740:	b480      	push	{r7}
 8009742:	b083      	sub	sp, #12
 8009744:	af00      	add	r7, sp, #0
 8009746:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8009748:	bf00      	nop
 800974a:	370c      	adds	r7, #12
 800974c:	46bd      	mov	sp, r7
 800974e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009752:	4770      	bx	lr

08009754 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8009754:	b480      	push	{r7}
 8009756:	b083      	sub	sp, #12
 8009758:	af00      	add	r7, sp, #0
 800975a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800975c:	bf00      	nop
 800975e:	370c      	adds	r7, #12
 8009760:	46bd      	mov	sp, r7
 8009762:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009766:	4770      	bx	lr

08009768 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8009768:	b480      	push	{r7}
 800976a:	b083      	sub	sp, #12
 800976c:	af00      	add	r7, sp, #0
 800976e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8009770:	bf00      	nop
 8009772:	370c      	adds	r7, #12
 8009774:	46bd      	mov	sp, r7
 8009776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800977a:	4770      	bx	lr

0800977c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800977c:	b580      	push	{r7, lr}
 800977e:	b082      	sub	sp, #8
 8009780:	af00      	add	r7, sp, #0
 8009782:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8009784:	687b      	ldr	r3, [r7, #4]
 8009786:	2b00      	cmp	r3, #0
 8009788:	d101      	bne.n	800978e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800978a:	2301      	movs	r3, #1
 800978c:	e042      	b.n	8009814 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800978e:	687b      	ldr	r3, [r7, #4]
 8009790:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009794:	2b00      	cmp	r3, #0
 8009796:	d106      	bne.n	80097a6 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8009798:	687b      	ldr	r3, [r7, #4]
 800979a:	2200      	movs	r2, #0
 800979c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80097a0:	6878      	ldr	r0, [r7, #4]
 80097a2:	f7f7 fddd 	bl	8001360 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80097a6:	687b      	ldr	r3, [r7, #4]
 80097a8:	2224      	movs	r2, #36	; 0x24
 80097aa:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 80097ae:	687b      	ldr	r3, [r7, #4]
 80097b0:	681b      	ldr	r3, [r3, #0]
 80097b2:	681a      	ldr	r2, [r3, #0]
 80097b4:	687b      	ldr	r3, [r7, #4]
 80097b6:	681b      	ldr	r3, [r3, #0]
 80097b8:	f022 0201 	bic.w	r2, r2, #1
 80097bc:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80097be:	6878      	ldr	r0, [r7, #4]
 80097c0:	f000 f82c 	bl	800981c <UART_SetConfig>
 80097c4:	4603      	mov	r3, r0
 80097c6:	2b01      	cmp	r3, #1
 80097c8:	d101      	bne.n	80097ce <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 80097ca:	2301      	movs	r3, #1
 80097cc:	e022      	b.n	8009814 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80097ce:	687b      	ldr	r3, [r7, #4]
 80097d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80097d2:	2b00      	cmp	r3, #0
 80097d4:	d002      	beq.n	80097dc <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 80097d6:	6878      	ldr	r0, [r7, #4]
 80097d8:	f000 fe7e 	bl	800a4d8 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80097dc:	687b      	ldr	r3, [r7, #4]
 80097de:	681b      	ldr	r3, [r3, #0]
 80097e0:	685a      	ldr	r2, [r3, #4]
 80097e2:	687b      	ldr	r3, [r7, #4]
 80097e4:	681b      	ldr	r3, [r3, #0]
 80097e6:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80097ea:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80097ec:	687b      	ldr	r3, [r7, #4]
 80097ee:	681b      	ldr	r3, [r3, #0]
 80097f0:	689a      	ldr	r2, [r3, #8]
 80097f2:	687b      	ldr	r3, [r7, #4]
 80097f4:	681b      	ldr	r3, [r3, #0]
 80097f6:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80097fa:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80097fc:	687b      	ldr	r3, [r7, #4]
 80097fe:	681b      	ldr	r3, [r3, #0]
 8009800:	681a      	ldr	r2, [r3, #0]
 8009802:	687b      	ldr	r3, [r7, #4]
 8009804:	681b      	ldr	r3, [r3, #0]
 8009806:	f042 0201 	orr.w	r2, r2, #1
 800980a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800980c:	6878      	ldr	r0, [r7, #4]
 800980e:	f000 ff05 	bl	800a61c <UART_CheckIdleState>
 8009812:	4603      	mov	r3, r0
}
 8009814:	4618      	mov	r0, r3
 8009816:	3708      	adds	r7, #8
 8009818:	46bd      	mov	sp, r7
 800981a:	bd80      	pop	{r7, pc}

0800981c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800981c:	b5b0      	push	{r4, r5, r7, lr}
 800981e:	b08e      	sub	sp, #56	; 0x38
 8009820:	af00      	add	r7, sp, #0
 8009822:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8009824:	2300      	movs	r3, #0
 8009826:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800982a:	687b      	ldr	r3, [r7, #4]
 800982c:	689a      	ldr	r2, [r3, #8]
 800982e:	687b      	ldr	r3, [r7, #4]
 8009830:	691b      	ldr	r3, [r3, #16]
 8009832:	431a      	orrs	r2, r3
 8009834:	687b      	ldr	r3, [r7, #4]
 8009836:	695b      	ldr	r3, [r3, #20]
 8009838:	431a      	orrs	r2, r3
 800983a:	687b      	ldr	r3, [r7, #4]
 800983c:	69db      	ldr	r3, [r3, #28]
 800983e:	4313      	orrs	r3, r2
 8009840:	637b      	str	r3, [r7, #52]	; 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8009842:	687b      	ldr	r3, [r7, #4]
 8009844:	681b      	ldr	r3, [r3, #0]
 8009846:	681a      	ldr	r2, [r3, #0]
 8009848:	4bbf      	ldr	r3, [pc, #764]	; (8009b48 <UART_SetConfig+0x32c>)
 800984a:	4013      	ands	r3, r2
 800984c:	687a      	ldr	r2, [r7, #4]
 800984e:	6812      	ldr	r2, [r2, #0]
 8009850:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8009852:	430b      	orrs	r3, r1
 8009854:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8009856:	687b      	ldr	r3, [r7, #4]
 8009858:	681b      	ldr	r3, [r3, #0]
 800985a:	685b      	ldr	r3, [r3, #4]
 800985c:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8009860:	687b      	ldr	r3, [r7, #4]
 8009862:	68da      	ldr	r2, [r3, #12]
 8009864:	687b      	ldr	r3, [r7, #4]
 8009866:	681b      	ldr	r3, [r3, #0]
 8009868:	430a      	orrs	r2, r1
 800986a:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800986c:	687b      	ldr	r3, [r7, #4]
 800986e:	699b      	ldr	r3, [r3, #24]
 8009870:	637b      	str	r3, [r7, #52]	; 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8009872:	687b      	ldr	r3, [r7, #4]
 8009874:	681b      	ldr	r3, [r3, #0]
 8009876:	4ab5      	ldr	r2, [pc, #724]	; (8009b4c <UART_SetConfig+0x330>)
 8009878:	4293      	cmp	r3, r2
 800987a:	d004      	beq.n	8009886 <UART_SetConfig+0x6a>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800987c:	687b      	ldr	r3, [r7, #4]
 800987e:	6a1b      	ldr	r3, [r3, #32]
 8009880:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009882:	4313      	orrs	r3, r2
 8009884:	637b      	str	r3, [r7, #52]	; 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8009886:	687b      	ldr	r3, [r7, #4]
 8009888:	681b      	ldr	r3, [r3, #0]
 800988a:	689a      	ldr	r2, [r3, #8]
 800988c:	4bb0      	ldr	r3, [pc, #704]	; (8009b50 <UART_SetConfig+0x334>)
 800988e:	4013      	ands	r3, r2
 8009890:	687a      	ldr	r2, [r7, #4]
 8009892:	6812      	ldr	r2, [r2, #0]
 8009894:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8009896:	430b      	orrs	r3, r1
 8009898:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800989a:	687b      	ldr	r3, [r7, #4]
 800989c:	681b      	ldr	r3, [r3, #0]
 800989e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80098a0:	f023 010f 	bic.w	r1, r3, #15
 80098a4:	687b      	ldr	r3, [r7, #4]
 80098a6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80098a8:	687b      	ldr	r3, [r7, #4]
 80098aa:	681b      	ldr	r3, [r3, #0]
 80098ac:	430a      	orrs	r2, r1
 80098ae:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80098b0:	687b      	ldr	r3, [r7, #4]
 80098b2:	681b      	ldr	r3, [r3, #0]
 80098b4:	4aa7      	ldr	r2, [pc, #668]	; (8009b54 <UART_SetConfig+0x338>)
 80098b6:	4293      	cmp	r3, r2
 80098b8:	d176      	bne.n	80099a8 <UART_SetConfig+0x18c>
 80098ba:	4ba7      	ldr	r3, [pc, #668]	; (8009b58 <UART_SetConfig+0x33c>)
 80098bc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80098be:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80098c2:	2b28      	cmp	r3, #40	; 0x28
 80098c4:	d86c      	bhi.n	80099a0 <UART_SetConfig+0x184>
 80098c6:	a201      	add	r2, pc, #4	; (adr r2, 80098cc <UART_SetConfig+0xb0>)
 80098c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80098cc:	08009971 	.word	0x08009971
 80098d0:	080099a1 	.word	0x080099a1
 80098d4:	080099a1 	.word	0x080099a1
 80098d8:	080099a1 	.word	0x080099a1
 80098dc:	080099a1 	.word	0x080099a1
 80098e0:	080099a1 	.word	0x080099a1
 80098e4:	080099a1 	.word	0x080099a1
 80098e8:	080099a1 	.word	0x080099a1
 80098ec:	08009979 	.word	0x08009979
 80098f0:	080099a1 	.word	0x080099a1
 80098f4:	080099a1 	.word	0x080099a1
 80098f8:	080099a1 	.word	0x080099a1
 80098fc:	080099a1 	.word	0x080099a1
 8009900:	080099a1 	.word	0x080099a1
 8009904:	080099a1 	.word	0x080099a1
 8009908:	080099a1 	.word	0x080099a1
 800990c:	08009981 	.word	0x08009981
 8009910:	080099a1 	.word	0x080099a1
 8009914:	080099a1 	.word	0x080099a1
 8009918:	080099a1 	.word	0x080099a1
 800991c:	080099a1 	.word	0x080099a1
 8009920:	080099a1 	.word	0x080099a1
 8009924:	080099a1 	.word	0x080099a1
 8009928:	080099a1 	.word	0x080099a1
 800992c:	08009989 	.word	0x08009989
 8009930:	080099a1 	.word	0x080099a1
 8009934:	080099a1 	.word	0x080099a1
 8009938:	080099a1 	.word	0x080099a1
 800993c:	080099a1 	.word	0x080099a1
 8009940:	080099a1 	.word	0x080099a1
 8009944:	080099a1 	.word	0x080099a1
 8009948:	080099a1 	.word	0x080099a1
 800994c:	08009991 	.word	0x08009991
 8009950:	080099a1 	.word	0x080099a1
 8009954:	080099a1 	.word	0x080099a1
 8009958:	080099a1 	.word	0x080099a1
 800995c:	080099a1 	.word	0x080099a1
 8009960:	080099a1 	.word	0x080099a1
 8009964:	080099a1 	.word	0x080099a1
 8009968:	080099a1 	.word	0x080099a1
 800996c:	08009999 	.word	0x08009999
 8009970:	2301      	movs	r3, #1
 8009972:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009976:	e326      	b.n	8009fc6 <UART_SetConfig+0x7aa>
 8009978:	2304      	movs	r3, #4
 800997a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800997e:	e322      	b.n	8009fc6 <UART_SetConfig+0x7aa>
 8009980:	2308      	movs	r3, #8
 8009982:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009986:	e31e      	b.n	8009fc6 <UART_SetConfig+0x7aa>
 8009988:	2310      	movs	r3, #16
 800998a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800998e:	e31a      	b.n	8009fc6 <UART_SetConfig+0x7aa>
 8009990:	2320      	movs	r3, #32
 8009992:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009996:	e316      	b.n	8009fc6 <UART_SetConfig+0x7aa>
 8009998:	2340      	movs	r3, #64	; 0x40
 800999a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800999e:	e312      	b.n	8009fc6 <UART_SetConfig+0x7aa>
 80099a0:	2380      	movs	r3, #128	; 0x80
 80099a2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80099a6:	e30e      	b.n	8009fc6 <UART_SetConfig+0x7aa>
 80099a8:	687b      	ldr	r3, [r7, #4]
 80099aa:	681b      	ldr	r3, [r3, #0]
 80099ac:	4a6b      	ldr	r2, [pc, #428]	; (8009b5c <UART_SetConfig+0x340>)
 80099ae:	4293      	cmp	r3, r2
 80099b0:	d130      	bne.n	8009a14 <UART_SetConfig+0x1f8>
 80099b2:	4b69      	ldr	r3, [pc, #420]	; (8009b58 <UART_SetConfig+0x33c>)
 80099b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80099b6:	f003 0307 	and.w	r3, r3, #7
 80099ba:	2b05      	cmp	r3, #5
 80099bc:	d826      	bhi.n	8009a0c <UART_SetConfig+0x1f0>
 80099be:	a201      	add	r2, pc, #4	; (adr r2, 80099c4 <UART_SetConfig+0x1a8>)
 80099c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80099c4:	080099dd 	.word	0x080099dd
 80099c8:	080099e5 	.word	0x080099e5
 80099cc:	080099ed 	.word	0x080099ed
 80099d0:	080099f5 	.word	0x080099f5
 80099d4:	080099fd 	.word	0x080099fd
 80099d8:	08009a05 	.word	0x08009a05
 80099dc:	2300      	movs	r3, #0
 80099de:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80099e2:	e2f0      	b.n	8009fc6 <UART_SetConfig+0x7aa>
 80099e4:	2304      	movs	r3, #4
 80099e6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80099ea:	e2ec      	b.n	8009fc6 <UART_SetConfig+0x7aa>
 80099ec:	2308      	movs	r3, #8
 80099ee:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80099f2:	e2e8      	b.n	8009fc6 <UART_SetConfig+0x7aa>
 80099f4:	2310      	movs	r3, #16
 80099f6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80099fa:	e2e4      	b.n	8009fc6 <UART_SetConfig+0x7aa>
 80099fc:	2320      	movs	r3, #32
 80099fe:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009a02:	e2e0      	b.n	8009fc6 <UART_SetConfig+0x7aa>
 8009a04:	2340      	movs	r3, #64	; 0x40
 8009a06:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009a0a:	e2dc      	b.n	8009fc6 <UART_SetConfig+0x7aa>
 8009a0c:	2380      	movs	r3, #128	; 0x80
 8009a0e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009a12:	e2d8      	b.n	8009fc6 <UART_SetConfig+0x7aa>
 8009a14:	687b      	ldr	r3, [r7, #4]
 8009a16:	681b      	ldr	r3, [r3, #0]
 8009a18:	4a51      	ldr	r2, [pc, #324]	; (8009b60 <UART_SetConfig+0x344>)
 8009a1a:	4293      	cmp	r3, r2
 8009a1c:	d130      	bne.n	8009a80 <UART_SetConfig+0x264>
 8009a1e:	4b4e      	ldr	r3, [pc, #312]	; (8009b58 <UART_SetConfig+0x33c>)
 8009a20:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009a22:	f003 0307 	and.w	r3, r3, #7
 8009a26:	2b05      	cmp	r3, #5
 8009a28:	d826      	bhi.n	8009a78 <UART_SetConfig+0x25c>
 8009a2a:	a201      	add	r2, pc, #4	; (adr r2, 8009a30 <UART_SetConfig+0x214>)
 8009a2c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009a30:	08009a49 	.word	0x08009a49
 8009a34:	08009a51 	.word	0x08009a51
 8009a38:	08009a59 	.word	0x08009a59
 8009a3c:	08009a61 	.word	0x08009a61
 8009a40:	08009a69 	.word	0x08009a69
 8009a44:	08009a71 	.word	0x08009a71
 8009a48:	2300      	movs	r3, #0
 8009a4a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009a4e:	e2ba      	b.n	8009fc6 <UART_SetConfig+0x7aa>
 8009a50:	2304      	movs	r3, #4
 8009a52:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009a56:	e2b6      	b.n	8009fc6 <UART_SetConfig+0x7aa>
 8009a58:	2308      	movs	r3, #8
 8009a5a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009a5e:	e2b2      	b.n	8009fc6 <UART_SetConfig+0x7aa>
 8009a60:	2310      	movs	r3, #16
 8009a62:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009a66:	e2ae      	b.n	8009fc6 <UART_SetConfig+0x7aa>
 8009a68:	2320      	movs	r3, #32
 8009a6a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009a6e:	e2aa      	b.n	8009fc6 <UART_SetConfig+0x7aa>
 8009a70:	2340      	movs	r3, #64	; 0x40
 8009a72:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009a76:	e2a6      	b.n	8009fc6 <UART_SetConfig+0x7aa>
 8009a78:	2380      	movs	r3, #128	; 0x80
 8009a7a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009a7e:	e2a2      	b.n	8009fc6 <UART_SetConfig+0x7aa>
 8009a80:	687b      	ldr	r3, [r7, #4]
 8009a82:	681b      	ldr	r3, [r3, #0]
 8009a84:	4a37      	ldr	r2, [pc, #220]	; (8009b64 <UART_SetConfig+0x348>)
 8009a86:	4293      	cmp	r3, r2
 8009a88:	d130      	bne.n	8009aec <UART_SetConfig+0x2d0>
 8009a8a:	4b33      	ldr	r3, [pc, #204]	; (8009b58 <UART_SetConfig+0x33c>)
 8009a8c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009a8e:	f003 0307 	and.w	r3, r3, #7
 8009a92:	2b05      	cmp	r3, #5
 8009a94:	d826      	bhi.n	8009ae4 <UART_SetConfig+0x2c8>
 8009a96:	a201      	add	r2, pc, #4	; (adr r2, 8009a9c <UART_SetConfig+0x280>)
 8009a98:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009a9c:	08009ab5 	.word	0x08009ab5
 8009aa0:	08009abd 	.word	0x08009abd
 8009aa4:	08009ac5 	.word	0x08009ac5
 8009aa8:	08009acd 	.word	0x08009acd
 8009aac:	08009ad5 	.word	0x08009ad5
 8009ab0:	08009add 	.word	0x08009add
 8009ab4:	2300      	movs	r3, #0
 8009ab6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009aba:	e284      	b.n	8009fc6 <UART_SetConfig+0x7aa>
 8009abc:	2304      	movs	r3, #4
 8009abe:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009ac2:	e280      	b.n	8009fc6 <UART_SetConfig+0x7aa>
 8009ac4:	2308      	movs	r3, #8
 8009ac6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009aca:	e27c      	b.n	8009fc6 <UART_SetConfig+0x7aa>
 8009acc:	2310      	movs	r3, #16
 8009ace:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009ad2:	e278      	b.n	8009fc6 <UART_SetConfig+0x7aa>
 8009ad4:	2320      	movs	r3, #32
 8009ad6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009ada:	e274      	b.n	8009fc6 <UART_SetConfig+0x7aa>
 8009adc:	2340      	movs	r3, #64	; 0x40
 8009ade:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009ae2:	e270      	b.n	8009fc6 <UART_SetConfig+0x7aa>
 8009ae4:	2380      	movs	r3, #128	; 0x80
 8009ae6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009aea:	e26c      	b.n	8009fc6 <UART_SetConfig+0x7aa>
 8009aec:	687b      	ldr	r3, [r7, #4]
 8009aee:	681b      	ldr	r3, [r3, #0]
 8009af0:	4a1d      	ldr	r2, [pc, #116]	; (8009b68 <UART_SetConfig+0x34c>)
 8009af2:	4293      	cmp	r3, r2
 8009af4:	d142      	bne.n	8009b7c <UART_SetConfig+0x360>
 8009af6:	4b18      	ldr	r3, [pc, #96]	; (8009b58 <UART_SetConfig+0x33c>)
 8009af8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009afa:	f003 0307 	and.w	r3, r3, #7
 8009afe:	2b05      	cmp	r3, #5
 8009b00:	d838      	bhi.n	8009b74 <UART_SetConfig+0x358>
 8009b02:	a201      	add	r2, pc, #4	; (adr r2, 8009b08 <UART_SetConfig+0x2ec>)
 8009b04:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009b08:	08009b21 	.word	0x08009b21
 8009b0c:	08009b29 	.word	0x08009b29
 8009b10:	08009b31 	.word	0x08009b31
 8009b14:	08009b39 	.word	0x08009b39
 8009b18:	08009b41 	.word	0x08009b41
 8009b1c:	08009b6d 	.word	0x08009b6d
 8009b20:	2300      	movs	r3, #0
 8009b22:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009b26:	e24e      	b.n	8009fc6 <UART_SetConfig+0x7aa>
 8009b28:	2304      	movs	r3, #4
 8009b2a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009b2e:	e24a      	b.n	8009fc6 <UART_SetConfig+0x7aa>
 8009b30:	2308      	movs	r3, #8
 8009b32:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009b36:	e246      	b.n	8009fc6 <UART_SetConfig+0x7aa>
 8009b38:	2310      	movs	r3, #16
 8009b3a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009b3e:	e242      	b.n	8009fc6 <UART_SetConfig+0x7aa>
 8009b40:	2320      	movs	r3, #32
 8009b42:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009b46:	e23e      	b.n	8009fc6 <UART_SetConfig+0x7aa>
 8009b48:	cfff69f3 	.word	0xcfff69f3
 8009b4c:	58000c00 	.word	0x58000c00
 8009b50:	11fff4ff 	.word	0x11fff4ff
 8009b54:	40011000 	.word	0x40011000
 8009b58:	58024400 	.word	0x58024400
 8009b5c:	40004400 	.word	0x40004400
 8009b60:	40004800 	.word	0x40004800
 8009b64:	40004c00 	.word	0x40004c00
 8009b68:	40005000 	.word	0x40005000
 8009b6c:	2340      	movs	r3, #64	; 0x40
 8009b6e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009b72:	e228      	b.n	8009fc6 <UART_SetConfig+0x7aa>
 8009b74:	2380      	movs	r3, #128	; 0x80
 8009b76:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009b7a:	e224      	b.n	8009fc6 <UART_SetConfig+0x7aa>
 8009b7c:	687b      	ldr	r3, [r7, #4]
 8009b7e:	681b      	ldr	r3, [r3, #0]
 8009b80:	4ab1      	ldr	r2, [pc, #708]	; (8009e48 <UART_SetConfig+0x62c>)
 8009b82:	4293      	cmp	r3, r2
 8009b84:	d176      	bne.n	8009c74 <UART_SetConfig+0x458>
 8009b86:	4bb1      	ldr	r3, [pc, #708]	; (8009e4c <UART_SetConfig+0x630>)
 8009b88:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009b8a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8009b8e:	2b28      	cmp	r3, #40	; 0x28
 8009b90:	d86c      	bhi.n	8009c6c <UART_SetConfig+0x450>
 8009b92:	a201      	add	r2, pc, #4	; (adr r2, 8009b98 <UART_SetConfig+0x37c>)
 8009b94:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009b98:	08009c3d 	.word	0x08009c3d
 8009b9c:	08009c6d 	.word	0x08009c6d
 8009ba0:	08009c6d 	.word	0x08009c6d
 8009ba4:	08009c6d 	.word	0x08009c6d
 8009ba8:	08009c6d 	.word	0x08009c6d
 8009bac:	08009c6d 	.word	0x08009c6d
 8009bb0:	08009c6d 	.word	0x08009c6d
 8009bb4:	08009c6d 	.word	0x08009c6d
 8009bb8:	08009c45 	.word	0x08009c45
 8009bbc:	08009c6d 	.word	0x08009c6d
 8009bc0:	08009c6d 	.word	0x08009c6d
 8009bc4:	08009c6d 	.word	0x08009c6d
 8009bc8:	08009c6d 	.word	0x08009c6d
 8009bcc:	08009c6d 	.word	0x08009c6d
 8009bd0:	08009c6d 	.word	0x08009c6d
 8009bd4:	08009c6d 	.word	0x08009c6d
 8009bd8:	08009c4d 	.word	0x08009c4d
 8009bdc:	08009c6d 	.word	0x08009c6d
 8009be0:	08009c6d 	.word	0x08009c6d
 8009be4:	08009c6d 	.word	0x08009c6d
 8009be8:	08009c6d 	.word	0x08009c6d
 8009bec:	08009c6d 	.word	0x08009c6d
 8009bf0:	08009c6d 	.word	0x08009c6d
 8009bf4:	08009c6d 	.word	0x08009c6d
 8009bf8:	08009c55 	.word	0x08009c55
 8009bfc:	08009c6d 	.word	0x08009c6d
 8009c00:	08009c6d 	.word	0x08009c6d
 8009c04:	08009c6d 	.word	0x08009c6d
 8009c08:	08009c6d 	.word	0x08009c6d
 8009c0c:	08009c6d 	.word	0x08009c6d
 8009c10:	08009c6d 	.word	0x08009c6d
 8009c14:	08009c6d 	.word	0x08009c6d
 8009c18:	08009c5d 	.word	0x08009c5d
 8009c1c:	08009c6d 	.word	0x08009c6d
 8009c20:	08009c6d 	.word	0x08009c6d
 8009c24:	08009c6d 	.word	0x08009c6d
 8009c28:	08009c6d 	.word	0x08009c6d
 8009c2c:	08009c6d 	.word	0x08009c6d
 8009c30:	08009c6d 	.word	0x08009c6d
 8009c34:	08009c6d 	.word	0x08009c6d
 8009c38:	08009c65 	.word	0x08009c65
 8009c3c:	2301      	movs	r3, #1
 8009c3e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009c42:	e1c0      	b.n	8009fc6 <UART_SetConfig+0x7aa>
 8009c44:	2304      	movs	r3, #4
 8009c46:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009c4a:	e1bc      	b.n	8009fc6 <UART_SetConfig+0x7aa>
 8009c4c:	2308      	movs	r3, #8
 8009c4e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009c52:	e1b8      	b.n	8009fc6 <UART_SetConfig+0x7aa>
 8009c54:	2310      	movs	r3, #16
 8009c56:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009c5a:	e1b4      	b.n	8009fc6 <UART_SetConfig+0x7aa>
 8009c5c:	2320      	movs	r3, #32
 8009c5e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009c62:	e1b0      	b.n	8009fc6 <UART_SetConfig+0x7aa>
 8009c64:	2340      	movs	r3, #64	; 0x40
 8009c66:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009c6a:	e1ac      	b.n	8009fc6 <UART_SetConfig+0x7aa>
 8009c6c:	2380      	movs	r3, #128	; 0x80
 8009c6e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009c72:	e1a8      	b.n	8009fc6 <UART_SetConfig+0x7aa>
 8009c74:	687b      	ldr	r3, [r7, #4]
 8009c76:	681b      	ldr	r3, [r3, #0]
 8009c78:	4a75      	ldr	r2, [pc, #468]	; (8009e50 <UART_SetConfig+0x634>)
 8009c7a:	4293      	cmp	r3, r2
 8009c7c:	d130      	bne.n	8009ce0 <UART_SetConfig+0x4c4>
 8009c7e:	4b73      	ldr	r3, [pc, #460]	; (8009e4c <UART_SetConfig+0x630>)
 8009c80:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009c82:	f003 0307 	and.w	r3, r3, #7
 8009c86:	2b05      	cmp	r3, #5
 8009c88:	d826      	bhi.n	8009cd8 <UART_SetConfig+0x4bc>
 8009c8a:	a201      	add	r2, pc, #4	; (adr r2, 8009c90 <UART_SetConfig+0x474>)
 8009c8c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009c90:	08009ca9 	.word	0x08009ca9
 8009c94:	08009cb1 	.word	0x08009cb1
 8009c98:	08009cb9 	.word	0x08009cb9
 8009c9c:	08009cc1 	.word	0x08009cc1
 8009ca0:	08009cc9 	.word	0x08009cc9
 8009ca4:	08009cd1 	.word	0x08009cd1
 8009ca8:	2300      	movs	r3, #0
 8009caa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009cae:	e18a      	b.n	8009fc6 <UART_SetConfig+0x7aa>
 8009cb0:	2304      	movs	r3, #4
 8009cb2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009cb6:	e186      	b.n	8009fc6 <UART_SetConfig+0x7aa>
 8009cb8:	2308      	movs	r3, #8
 8009cba:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009cbe:	e182      	b.n	8009fc6 <UART_SetConfig+0x7aa>
 8009cc0:	2310      	movs	r3, #16
 8009cc2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009cc6:	e17e      	b.n	8009fc6 <UART_SetConfig+0x7aa>
 8009cc8:	2320      	movs	r3, #32
 8009cca:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009cce:	e17a      	b.n	8009fc6 <UART_SetConfig+0x7aa>
 8009cd0:	2340      	movs	r3, #64	; 0x40
 8009cd2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009cd6:	e176      	b.n	8009fc6 <UART_SetConfig+0x7aa>
 8009cd8:	2380      	movs	r3, #128	; 0x80
 8009cda:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009cde:	e172      	b.n	8009fc6 <UART_SetConfig+0x7aa>
 8009ce0:	687b      	ldr	r3, [r7, #4]
 8009ce2:	681b      	ldr	r3, [r3, #0]
 8009ce4:	4a5b      	ldr	r2, [pc, #364]	; (8009e54 <UART_SetConfig+0x638>)
 8009ce6:	4293      	cmp	r3, r2
 8009ce8:	d130      	bne.n	8009d4c <UART_SetConfig+0x530>
 8009cea:	4b58      	ldr	r3, [pc, #352]	; (8009e4c <UART_SetConfig+0x630>)
 8009cec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009cee:	f003 0307 	and.w	r3, r3, #7
 8009cf2:	2b05      	cmp	r3, #5
 8009cf4:	d826      	bhi.n	8009d44 <UART_SetConfig+0x528>
 8009cf6:	a201      	add	r2, pc, #4	; (adr r2, 8009cfc <UART_SetConfig+0x4e0>)
 8009cf8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009cfc:	08009d15 	.word	0x08009d15
 8009d00:	08009d1d 	.word	0x08009d1d
 8009d04:	08009d25 	.word	0x08009d25
 8009d08:	08009d2d 	.word	0x08009d2d
 8009d0c:	08009d35 	.word	0x08009d35
 8009d10:	08009d3d 	.word	0x08009d3d
 8009d14:	2300      	movs	r3, #0
 8009d16:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009d1a:	e154      	b.n	8009fc6 <UART_SetConfig+0x7aa>
 8009d1c:	2304      	movs	r3, #4
 8009d1e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009d22:	e150      	b.n	8009fc6 <UART_SetConfig+0x7aa>
 8009d24:	2308      	movs	r3, #8
 8009d26:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009d2a:	e14c      	b.n	8009fc6 <UART_SetConfig+0x7aa>
 8009d2c:	2310      	movs	r3, #16
 8009d2e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009d32:	e148      	b.n	8009fc6 <UART_SetConfig+0x7aa>
 8009d34:	2320      	movs	r3, #32
 8009d36:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009d3a:	e144      	b.n	8009fc6 <UART_SetConfig+0x7aa>
 8009d3c:	2340      	movs	r3, #64	; 0x40
 8009d3e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009d42:	e140      	b.n	8009fc6 <UART_SetConfig+0x7aa>
 8009d44:	2380      	movs	r3, #128	; 0x80
 8009d46:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009d4a:	e13c      	b.n	8009fc6 <UART_SetConfig+0x7aa>
 8009d4c:	687b      	ldr	r3, [r7, #4]
 8009d4e:	681b      	ldr	r3, [r3, #0]
 8009d50:	4a41      	ldr	r2, [pc, #260]	; (8009e58 <UART_SetConfig+0x63c>)
 8009d52:	4293      	cmp	r3, r2
 8009d54:	f040 8082 	bne.w	8009e5c <UART_SetConfig+0x640>
 8009d58:	4b3c      	ldr	r3, [pc, #240]	; (8009e4c <UART_SetConfig+0x630>)
 8009d5a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009d5c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8009d60:	2b28      	cmp	r3, #40	; 0x28
 8009d62:	d86d      	bhi.n	8009e40 <UART_SetConfig+0x624>
 8009d64:	a201      	add	r2, pc, #4	; (adr r2, 8009d6c <UART_SetConfig+0x550>)
 8009d66:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009d6a:	bf00      	nop
 8009d6c:	08009e11 	.word	0x08009e11
 8009d70:	08009e41 	.word	0x08009e41
 8009d74:	08009e41 	.word	0x08009e41
 8009d78:	08009e41 	.word	0x08009e41
 8009d7c:	08009e41 	.word	0x08009e41
 8009d80:	08009e41 	.word	0x08009e41
 8009d84:	08009e41 	.word	0x08009e41
 8009d88:	08009e41 	.word	0x08009e41
 8009d8c:	08009e19 	.word	0x08009e19
 8009d90:	08009e41 	.word	0x08009e41
 8009d94:	08009e41 	.word	0x08009e41
 8009d98:	08009e41 	.word	0x08009e41
 8009d9c:	08009e41 	.word	0x08009e41
 8009da0:	08009e41 	.word	0x08009e41
 8009da4:	08009e41 	.word	0x08009e41
 8009da8:	08009e41 	.word	0x08009e41
 8009dac:	08009e21 	.word	0x08009e21
 8009db0:	08009e41 	.word	0x08009e41
 8009db4:	08009e41 	.word	0x08009e41
 8009db8:	08009e41 	.word	0x08009e41
 8009dbc:	08009e41 	.word	0x08009e41
 8009dc0:	08009e41 	.word	0x08009e41
 8009dc4:	08009e41 	.word	0x08009e41
 8009dc8:	08009e41 	.word	0x08009e41
 8009dcc:	08009e29 	.word	0x08009e29
 8009dd0:	08009e41 	.word	0x08009e41
 8009dd4:	08009e41 	.word	0x08009e41
 8009dd8:	08009e41 	.word	0x08009e41
 8009ddc:	08009e41 	.word	0x08009e41
 8009de0:	08009e41 	.word	0x08009e41
 8009de4:	08009e41 	.word	0x08009e41
 8009de8:	08009e41 	.word	0x08009e41
 8009dec:	08009e31 	.word	0x08009e31
 8009df0:	08009e41 	.word	0x08009e41
 8009df4:	08009e41 	.word	0x08009e41
 8009df8:	08009e41 	.word	0x08009e41
 8009dfc:	08009e41 	.word	0x08009e41
 8009e00:	08009e41 	.word	0x08009e41
 8009e04:	08009e41 	.word	0x08009e41
 8009e08:	08009e41 	.word	0x08009e41
 8009e0c:	08009e39 	.word	0x08009e39
 8009e10:	2301      	movs	r3, #1
 8009e12:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009e16:	e0d6      	b.n	8009fc6 <UART_SetConfig+0x7aa>
 8009e18:	2304      	movs	r3, #4
 8009e1a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009e1e:	e0d2      	b.n	8009fc6 <UART_SetConfig+0x7aa>
 8009e20:	2308      	movs	r3, #8
 8009e22:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009e26:	e0ce      	b.n	8009fc6 <UART_SetConfig+0x7aa>
 8009e28:	2310      	movs	r3, #16
 8009e2a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009e2e:	e0ca      	b.n	8009fc6 <UART_SetConfig+0x7aa>
 8009e30:	2320      	movs	r3, #32
 8009e32:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009e36:	e0c6      	b.n	8009fc6 <UART_SetConfig+0x7aa>
 8009e38:	2340      	movs	r3, #64	; 0x40
 8009e3a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009e3e:	e0c2      	b.n	8009fc6 <UART_SetConfig+0x7aa>
 8009e40:	2380      	movs	r3, #128	; 0x80
 8009e42:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009e46:	e0be      	b.n	8009fc6 <UART_SetConfig+0x7aa>
 8009e48:	40011400 	.word	0x40011400
 8009e4c:	58024400 	.word	0x58024400
 8009e50:	40007800 	.word	0x40007800
 8009e54:	40007c00 	.word	0x40007c00
 8009e58:	40011800 	.word	0x40011800
 8009e5c:	687b      	ldr	r3, [r7, #4]
 8009e5e:	681b      	ldr	r3, [r3, #0]
 8009e60:	4aad      	ldr	r2, [pc, #692]	; (800a118 <UART_SetConfig+0x8fc>)
 8009e62:	4293      	cmp	r3, r2
 8009e64:	d176      	bne.n	8009f54 <UART_SetConfig+0x738>
 8009e66:	4bad      	ldr	r3, [pc, #692]	; (800a11c <UART_SetConfig+0x900>)
 8009e68:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009e6a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8009e6e:	2b28      	cmp	r3, #40	; 0x28
 8009e70:	d86c      	bhi.n	8009f4c <UART_SetConfig+0x730>
 8009e72:	a201      	add	r2, pc, #4	; (adr r2, 8009e78 <UART_SetConfig+0x65c>)
 8009e74:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009e78:	08009f1d 	.word	0x08009f1d
 8009e7c:	08009f4d 	.word	0x08009f4d
 8009e80:	08009f4d 	.word	0x08009f4d
 8009e84:	08009f4d 	.word	0x08009f4d
 8009e88:	08009f4d 	.word	0x08009f4d
 8009e8c:	08009f4d 	.word	0x08009f4d
 8009e90:	08009f4d 	.word	0x08009f4d
 8009e94:	08009f4d 	.word	0x08009f4d
 8009e98:	08009f25 	.word	0x08009f25
 8009e9c:	08009f4d 	.word	0x08009f4d
 8009ea0:	08009f4d 	.word	0x08009f4d
 8009ea4:	08009f4d 	.word	0x08009f4d
 8009ea8:	08009f4d 	.word	0x08009f4d
 8009eac:	08009f4d 	.word	0x08009f4d
 8009eb0:	08009f4d 	.word	0x08009f4d
 8009eb4:	08009f4d 	.word	0x08009f4d
 8009eb8:	08009f2d 	.word	0x08009f2d
 8009ebc:	08009f4d 	.word	0x08009f4d
 8009ec0:	08009f4d 	.word	0x08009f4d
 8009ec4:	08009f4d 	.word	0x08009f4d
 8009ec8:	08009f4d 	.word	0x08009f4d
 8009ecc:	08009f4d 	.word	0x08009f4d
 8009ed0:	08009f4d 	.word	0x08009f4d
 8009ed4:	08009f4d 	.word	0x08009f4d
 8009ed8:	08009f35 	.word	0x08009f35
 8009edc:	08009f4d 	.word	0x08009f4d
 8009ee0:	08009f4d 	.word	0x08009f4d
 8009ee4:	08009f4d 	.word	0x08009f4d
 8009ee8:	08009f4d 	.word	0x08009f4d
 8009eec:	08009f4d 	.word	0x08009f4d
 8009ef0:	08009f4d 	.word	0x08009f4d
 8009ef4:	08009f4d 	.word	0x08009f4d
 8009ef8:	08009f3d 	.word	0x08009f3d
 8009efc:	08009f4d 	.word	0x08009f4d
 8009f00:	08009f4d 	.word	0x08009f4d
 8009f04:	08009f4d 	.word	0x08009f4d
 8009f08:	08009f4d 	.word	0x08009f4d
 8009f0c:	08009f4d 	.word	0x08009f4d
 8009f10:	08009f4d 	.word	0x08009f4d
 8009f14:	08009f4d 	.word	0x08009f4d
 8009f18:	08009f45 	.word	0x08009f45
 8009f1c:	2301      	movs	r3, #1
 8009f1e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009f22:	e050      	b.n	8009fc6 <UART_SetConfig+0x7aa>
 8009f24:	2304      	movs	r3, #4
 8009f26:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009f2a:	e04c      	b.n	8009fc6 <UART_SetConfig+0x7aa>
 8009f2c:	2308      	movs	r3, #8
 8009f2e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009f32:	e048      	b.n	8009fc6 <UART_SetConfig+0x7aa>
 8009f34:	2310      	movs	r3, #16
 8009f36:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009f3a:	e044      	b.n	8009fc6 <UART_SetConfig+0x7aa>
 8009f3c:	2320      	movs	r3, #32
 8009f3e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009f42:	e040      	b.n	8009fc6 <UART_SetConfig+0x7aa>
 8009f44:	2340      	movs	r3, #64	; 0x40
 8009f46:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009f4a:	e03c      	b.n	8009fc6 <UART_SetConfig+0x7aa>
 8009f4c:	2380      	movs	r3, #128	; 0x80
 8009f4e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009f52:	e038      	b.n	8009fc6 <UART_SetConfig+0x7aa>
 8009f54:	687b      	ldr	r3, [r7, #4]
 8009f56:	681b      	ldr	r3, [r3, #0]
 8009f58:	4a71      	ldr	r2, [pc, #452]	; (800a120 <UART_SetConfig+0x904>)
 8009f5a:	4293      	cmp	r3, r2
 8009f5c:	d130      	bne.n	8009fc0 <UART_SetConfig+0x7a4>
 8009f5e:	4b6f      	ldr	r3, [pc, #444]	; (800a11c <UART_SetConfig+0x900>)
 8009f60:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009f62:	f003 0307 	and.w	r3, r3, #7
 8009f66:	2b05      	cmp	r3, #5
 8009f68:	d826      	bhi.n	8009fb8 <UART_SetConfig+0x79c>
 8009f6a:	a201      	add	r2, pc, #4	; (adr r2, 8009f70 <UART_SetConfig+0x754>)
 8009f6c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009f70:	08009f89 	.word	0x08009f89
 8009f74:	08009f91 	.word	0x08009f91
 8009f78:	08009f99 	.word	0x08009f99
 8009f7c:	08009fa1 	.word	0x08009fa1
 8009f80:	08009fa9 	.word	0x08009fa9
 8009f84:	08009fb1 	.word	0x08009fb1
 8009f88:	2302      	movs	r3, #2
 8009f8a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009f8e:	e01a      	b.n	8009fc6 <UART_SetConfig+0x7aa>
 8009f90:	2304      	movs	r3, #4
 8009f92:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009f96:	e016      	b.n	8009fc6 <UART_SetConfig+0x7aa>
 8009f98:	2308      	movs	r3, #8
 8009f9a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009f9e:	e012      	b.n	8009fc6 <UART_SetConfig+0x7aa>
 8009fa0:	2310      	movs	r3, #16
 8009fa2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009fa6:	e00e      	b.n	8009fc6 <UART_SetConfig+0x7aa>
 8009fa8:	2320      	movs	r3, #32
 8009faa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009fae:	e00a      	b.n	8009fc6 <UART_SetConfig+0x7aa>
 8009fb0:	2340      	movs	r3, #64	; 0x40
 8009fb2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009fb6:	e006      	b.n	8009fc6 <UART_SetConfig+0x7aa>
 8009fb8:	2380      	movs	r3, #128	; 0x80
 8009fba:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009fbe:	e002      	b.n	8009fc6 <UART_SetConfig+0x7aa>
 8009fc0:	2380      	movs	r3, #128	; 0x80
 8009fc2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8009fc6:	687b      	ldr	r3, [r7, #4]
 8009fc8:	681b      	ldr	r3, [r3, #0]
 8009fca:	4a55      	ldr	r2, [pc, #340]	; (800a120 <UART_SetConfig+0x904>)
 8009fcc:	4293      	cmp	r3, r2
 8009fce:	f040 80f0 	bne.w	800a1b2 <UART_SetConfig+0x996>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8009fd2:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8009fd6:	2b20      	cmp	r3, #32
 8009fd8:	dc46      	bgt.n	800a068 <UART_SetConfig+0x84c>
 8009fda:	2b02      	cmp	r3, #2
 8009fdc:	db75      	blt.n	800a0ca <UART_SetConfig+0x8ae>
 8009fde:	3b02      	subs	r3, #2
 8009fe0:	2b1e      	cmp	r3, #30
 8009fe2:	d872      	bhi.n	800a0ca <UART_SetConfig+0x8ae>
 8009fe4:	a201      	add	r2, pc, #4	; (adr r2, 8009fec <UART_SetConfig+0x7d0>)
 8009fe6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009fea:	bf00      	nop
 8009fec:	0800a06f 	.word	0x0800a06f
 8009ff0:	0800a0cb 	.word	0x0800a0cb
 8009ff4:	0800a077 	.word	0x0800a077
 8009ff8:	0800a0cb 	.word	0x0800a0cb
 8009ffc:	0800a0cb 	.word	0x0800a0cb
 800a000:	0800a0cb 	.word	0x0800a0cb
 800a004:	0800a087 	.word	0x0800a087
 800a008:	0800a0cb 	.word	0x0800a0cb
 800a00c:	0800a0cb 	.word	0x0800a0cb
 800a010:	0800a0cb 	.word	0x0800a0cb
 800a014:	0800a0cb 	.word	0x0800a0cb
 800a018:	0800a0cb 	.word	0x0800a0cb
 800a01c:	0800a0cb 	.word	0x0800a0cb
 800a020:	0800a0cb 	.word	0x0800a0cb
 800a024:	0800a097 	.word	0x0800a097
 800a028:	0800a0cb 	.word	0x0800a0cb
 800a02c:	0800a0cb 	.word	0x0800a0cb
 800a030:	0800a0cb 	.word	0x0800a0cb
 800a034:	0800a0cb 	.word	0x0800a0cb
 800a038:	0800a0cb 	.word	0x0800a0cb
 800a03c:	0800a0cb 	.word	0x0800a0cb
 800a040:	0800a0cb 	.word	0x0800a0cb
 800a044:	0800a0cb 	.word	0x0800a0cb
 800a048:	0800a0cb 	.word	0x0800a0cb
 800a04c:	0800a0cb 	.word	0x0800a0cb
 800a050:	0800a0cb 	.word	0x0800a0cb
 800a054:	0800a0cb 	.word	0x0800a0cb
 800a058:	0800a0cb 	.word	0x0800a0cb
 800a05c:	0800a0cb 	.word	0x0800a0cb
 800a060:	0800a0cb 	.word	0x0800a0cb
 800a064:	0800a0bd 	.word	0x0800a0bd
 800a068:	2b40      	cmp	r3, #64	; 0x40
 800a06a:	d02a      	beq.n	800a0c2 <UART_SetConfig+0x8a6>
 800a06c:	e02d      	b.n	800a0ca <UART_SetConfig+0x8ae>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800a06e:	f7fc fd89 	bl	8006b84 <HAL_RCCEx_GetD3PCLK1Freq>
 800a072:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800a074:	e02f      	b.n	800a0d6 <UART_SetConfig+0x8ba>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a076:	f107 0314 	add.w	r3, r7, #20
 800a07a:	4618      	mov	r0, r3
 800a07c:	f7fc fd98 	bl	8006bb0 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800a080:	69bb      	ldr	r3, [r7, #24]
 800a082:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800a084:	e027      	b.n	800a0d6 <UART_SetConfig+0x8ba>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a086:	f107 0308 	add.w	r3, r7, #8
 800a08a:	4618      	mov	r0, r3
 800a08c:	f7fc fee4 	bl	8006e58 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800a090:	68fb      	ldr	r3, [r7, #12]
 800a092:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800a094:	e01f      	b.n	800a0d6 <UART_SetConfig+0x8ba>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a096:	4b21      	ldr	r3, [pc, #132]	; (800a11c <UART_SetConfig+0x900>)
 800a098:	681b      	ldr	r3, [r3, #0]
 800a09a:	f003 0320 	and.w	r3, r3, #32
 800a09e:	2b00      	cmp	r3, #0
 800a0a0:	d009      	beq.n	800a0b6 <UART_SetConfig+0x89a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800a0a2:	4b1e      	ldr	r3, [pc, #120]	; (800a11c <UART_SetConfig+0x900>)
 800a0a4:	681b      	ldr	r3, [r3, #0]
 800a0a6:	08db      	lsrs	r3, r3, #3
 800a0a8:	f003 0303 	and.w	r3, r3, #3
 800a0ac:	4a1d      	ldr	r2, [pc, #116]	; (800a124 <UART_SetConfig+0x908>)
 800a0ae:	fa22 f303 	lsr.w	r3, r2, r3
 800a0b2:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800a0b4:	e00f      	b.n	800a0d6 <UART_SetConfig+0x8ba>
          pclk = (uint32_t) HSI_VALUE;
 800a0b6:	4b1b      	ldr	r3, [pc, #108]	; (800a124 <UART_SetConfig+0x908>)
 800a0b8:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800a0ba:	e00c      	b.n	800a0d6 <UART_SetConfig+0x8ba>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800a0bc:	4b1a      	ldr	r3, [pc, #104]	; (800a128 <UART_SetConfig+0x90c>)
 800a0be:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800a0c0:	e009      	b.n	800a0d6 <UART_SetConfig+0x8ba>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a0c2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a0c6:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800a0c8:	e005      	b.n	800a0d6 <UART_SetConfig+0x8ba>
      default:
        pclk = 0U;
 800a0ca:	2300      	movs	r3, #0
 800a0cc:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 800a0ce:	2301      	movs	r3, #1
 800a0d0:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 800a0d4:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800a0d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a0d8:	2b00      	cmp	r3, #0
 800a0da:	f000 81e6 	beq.w	800a4aa <UART_SetConfig+0xc8e>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800a0de:	687b      	ldr	r3, [r7, #4]
 800a0e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a0e2:	4a12      	ldr	r2, [pc, #72]	; (800a12c <UART_SetConfig+0x910>)
 800a0e4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a0e8:	461a      	mov	r2, r3
 800a0ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a0ec:	fbb3 f3f2 	udiv	r3, r3, r2
 800a0f0:	623b      	str	r3, [r7, #32]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800a0f2:	687b      	ldr	r3, [r7, #4]
 800a0f4:	685a      	ldr	r2, [r3, #4]
 800a0f6:	4613      	mov	r3, r2
 800a0f8:	005b      	lsls	r3, r3, #1
 800a0fa:	4413      	add	r3, r2
 800a0fc:	6a3a      	ldr	r2, [r7, #32]
 800a0fe:	429a      	cmp	r2, r3
 800a100:	d305      	bcc.n	800a10e <UART_SetConfig+0x8f2>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800a102:	687b      	ldr	r3, [r7, #4]
 800a104:	685b      	ldr	r3, [r3, #4]
 800a106:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800a108:	6a3a      	ldr	r2, [r7, #32]
 800a10a:	429a      	cmp	r2, r3
 800a10c:	d910      	bls.n	800a130 <UART_SetConfig+0x914>
      {
        ret = HAL_ERROR;
 800a10e:	2301      	movs	r3, #1
 800a110:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 800a114:	e1c9      	b.n	800a4aa <UART_SetConfig+0xc8e>
 800a116:	bf00      	nop
 800a118:	40011c00 	.word	0x40011c00
 800a11c:	58024400 	.word	0x58024400
 800a120:	58000c00 	.word	0x58000c00
 800a124:	03d09000 	.word	0x03d09000
 800a128:	003d0900 	.word	0x003d0900
 800a12c:	080124a0 	.word	0x080124a0
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a130:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a132:	4618      	mov	r0, r3
 800a134:	f04f 0100 	mov.w	r1, #0
 800a138:	687b      	ldr	r3, [r7, #4]
 800a13a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a13c:	4ac1      	ldr	r2, [pc, #772]	; (800a444 <UART_SetConfig+0xc28>)
 800a13e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a142:	b29a      	uxth	r2, r3
 800a144:	f04f 0300 	mov.w	r3, #0
 800a148:	f7f6 f8e2 	bl	8000310 <__aeabi_uldivmod>
 800a14c:	4602      	mov	r2, r0
 800a14e:	460b      	mov	r3, r1
 800a150:	4610      	mov	r0, r2
 800a152:	4619      	mov	r1, r3
 800a154:	f04f 0200 	mov.w	r2, #0
 800a158:	f04f 0300 	mov.w	r3, #0
 800a15c:	020b      	lsls	r3, r1, #8
 800a15e:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800a162:	0202      	lsls	r2, r0, #8
 800a164:	6879      	ldr	r1, [r7, #4]
 800a166:	6849      	ldr	r1, [r1, #4]
 800a168:	0849      	lsrs	r1, r1, #1
 800a16a:	4608      	mov	r0, r1
 800a16c:	f04f 0100 	mov.w	r1, #0
 800a170:	1814      	adds	r4, r2, r0
 800a172:	eb43 0501 	adc.w	r5, r3, r1
 800a176:	687b      	ldr	r3, [r7, #4]
 800a178:	685b      	ldr	r3, [r3, #4]
 800a17a:	461a      	mov	r2, r3
 800a17c:	f04f 0300 	mov.w	r3, #0
 800a180:	4620      	mov	r0, r4
 800a182:	4629      	mov	r1, r5
 800a184:	f7f6 f8c4 	bl	8000310 <__aeabi_uldivmod>
 800a188:	4602      	mov	r2, r0
 800a18a:	460b      	mov	r3, r1
 800a18c:	4613      	mov	r3, r2
 800a18e:	62bb      	str	r3, [r7, #40]	; 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800a190:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a192:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800a196:	d308      	bcc.n	800a1aa <UART_SetConfig+0x98e>
 800a198:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a19a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a19e:	d204      	bcs.n	800a1aa <UART_SetConfig+0x98e>
        {
          huart->Instance->BRR = usartdiv;
 800a1a0:	687b      	ldr	r3, [r7, #4]
 800a1a2:	681b      	ldr	r3, [r3, #0]
 800a1a4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a1a6:	60da      	str	r2, [r3, #12]
 800a1a8:	e17f      	b.n	800a4aa <UART_SetConfig+0xc8e>
        }
        else
        {
          ret = HAL_ERROR;
 800a1aa:	2301      	movs	r3, #1
 800a1ac:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 800a1b0:	e17b      	b.n	800a4aa <UART_SetConfig+0xc8e>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800a1b2:	687b      	ldr	r3, [r7, #4]
 800a1b4:	69db      	ldr	r3, [r3, #28]
 800a1b6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a1ba:	f040 80be 	bne.w	800a33a <UART_SetConfig+0xb1e>
  {
    switch (clocksource)
 800a1be:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800a1c2:	2b20      	cmp	r3, #32
 800a1c4:	dc48      	bgt.n	800a258 <UART_SetConfig+0xa3c>
 800a1c6:	2b00      	cmp	r3, #0
 800a1c8:	db7b      	blt.n	800a2c2 <UART_SetConfig+0xaa6>
 800a1ca:	2b20      	cmp	r3, #32
 800a1cc:	d879      	bhi.n	800a2c2 <UART_SetConfig+0xaa6>
 800a1ce:	a201      	add	r2, pc, #4	; (adr r2, 800a1d4 <UART_SetConfig+0x9b8>)
 800a1d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a1d4:	0800a25f 	.word	0x0800a25f
 800a1d8:	0800a267 	.word	0x0800a267
 800a1dc:	0800a2c3 	.word	0x0800a2c3
 800a1e0:	0800a2c3 	.word	0x0800a2c3
 800a1e4:	0800a26f 	.word	0x0800a26f
 800a1e8:	0800a2c3 	.word	0x0800a2c3
 800a1ec:	0800a2c3 	.word	0x0800a2c3
 800a1f0:	0800a2c3 	.word	0x0800a2c3
 800a1f4:	0800a27f 	.word	0x0800a27f
 800a1f8:	0800a2c3 	.word	0x0800a2c3
 800a1fc:	0800a2c3 	.word	0x0800a2c3
 800a200:	0800a2c3 	.word	0x0800a2c3
 800a204:	0800a2c3 	.word	0x0800a2c3
 800a208:	0800a2c3 	.word	0x0800a2c3
 800a20c:	0800a2c3 	.word	0x0800a2c3
 800a210:	0800a2c3 	.word	0x0800a2c3
 800a214:	0800a28f 	.word	0x0800a28f
 800a218:	0800a2c3 	.word	0x0800a2c3
 800a21c:	0800a2c3 	.word	0x0800a2c3
 800a220:	0800a2c3 	.word	0x0800a2c3
 800a224:	0800a2c3 	.word	0x0800a2c3
 800a228:	0800a2c3 	.word	0x0800a2c3
 800a22c:	0800a2c3 	.word	0x0800a2c3
 800a230:	0800a2c3 	.word	0x0800a2c3
 800a234:	0800a2c3 	.word	0x0800a2c3
 800a238:	0800a2c3 	.word	0x0800a2c3
 800a23c:	0800a2c3 	.word	0x0800a2c3
 800a240:	0800a2c3 	.word	0x0800a2c3
 800a244:	0800a2c3 	.word	0x0800a2c3
 800a248:	0800a2c3 	.word	0x0800a2c3
 800a24c:	0800a2c3 	.word	0x0800a2c3
 800a250:	0800a2c3 	.word	0x0800a2c3
 800a254:	0800a2b5 	.word	0x0800a2b5
 800a258:	2b40      	cmp	r3, #64	; 0x40
 800a25a:	d02e      	beq.n	800a2ba <UART_SetConfig+0xa9e>
 800a25c:	e031      	b.n	800a2c2 <UART_SetConfig+0xaa6>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800a25e:	f7fb f905 	bl	800546c <HAL_RCC_GetPCLK1Freq>
 800a262:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800a264:	e033      	b.n	800a2ce <UART_SetConfig+0xab2>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800a266:	f7fb f917 	bl	8005498 <HAL_RCC_GetPCLK2Freq>
 800a26a:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800a26c:	e02f      	b.n	800a2ce <UART_SetConfig+0xab2>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a26e:	f107 0314 	add.w	r3, r7, #20
 800a272:	4618      	mov	r0, r3
 800a274:	f7fc fc9c 	bl	8006bb0 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800a278:	69bb      	ldr	r3, [r7, #24]
 800a27a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800a27c:	e027      	b.n	800a2ce <UART_SetConfig+0xab2>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a27e:	f107 0308 	add.w	r3, r7, #8
 800a282:	4618      	mov	r0, r3
 800a284:	f7fc fde8 	bl	8006e58 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800a288:	68fb      	ldr	r3, [r7, #12]
 800a28a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800a28c:	e01f      	b.n	800a2ce <UART_SetConfig+0xab2>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a28e:	4b6e      	ldr	r3, [pc, #440]	; (800a448 <UART_SetConfig+0xc2c>)
 800a290:	681b      	ldr	r3, [r3, #0]
 800a292:	f003 0320 	and.w	r3, r3, #32
 800a296:	2b00      	cmp	r3, #0
 800a298:	d009      	beq.n	800a2ae <UART_SetConfig+0xa92>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800a29a:	4b6b      	ldr	r3, [pc, #428]	; (800a448 <UART_SetConfig+0xc2c>)
 800a29c:	681b      	ldr	r3, [r3, #0]
 800a29e:	08db      	lsrs	r3, r3, #3
 800a2a0:	f003 0303 	and.w	r3, r3, #3
 800a2a4:	4a69      	ldr	r2, [pc, #420]	; (800a44c <UART_SetConfig+0xc30>)
 800a2a6:	fa22 f303 	lsr.w	r3, r2, r3
 800a2aa:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800a2ac:	e00f      	b.n	800a2ce <UART_SetConfig+0xab2>
          pclk = (uint32_t) HSI_VALUE;
 800a2ae:	4b67      	ldr	r3, [pc, #412]	; (800a44c <UART_SetConfig+0xc30>)
 800a2b0:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800a2b2:	e00c      	b.n	800a2ce <UART_SetConfig+0xab2>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800a2b4:	4b66      	ldr	r3, [pc, #408]	; (800a450 <UART_SetConfig+0xc34>)
 800a2b6:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800a2b8:	e009      	b.n	800a2ce <UART_SetConfig+0xab2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a2ba:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a2be:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800a2c0:	e005      	b.n	800a2ce <UART_SetConfig+0xab2>
      default:
        pclk = 0U;
 800a2c2:	2300      	movs	r3, #0
 800a2c4:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 800a2c6:	2301      	movs	r3, #1
 800a2c8:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 800a2cc:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800a2ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a2d0:	2b00      	cmp	r3, #0
 800a2d2:	f000 80ea 	beq.w	800a4aa <UART_SetConfig+0xc8e>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a2d6:	687b      	ldr	r3, [r7, #4]
 800a2d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a2da:	4a5a      	ldr	r2, [pc, #360]	; (800a444 <UART_SetConfig+0xc28>)
 800a2dc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a2e0:	461a      	mov	r2, r3
 800a2e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a2e4:	fbb3 f3f2 	udiv	r3, r3, r2
 800a2e8:	005a      	lsls	r2, r3, #1
 800a2ea:	687b      	ldr	r3, [r7, #4]
 800a2ec:	685b      	ldr	r3, [r3, #4]
 800a2ee:	085b      	lsrs	r3, r3, #1
 800a2f0:	441a      	add	r2, r3
 800a2f2:	687b      	ldr	r3, [r7, #4]
 800a2f4:	685b      	ldr	r3, [r3, #4]
 800a2f6:	fbb2 f3f3 	udiv	r3, r2, r3
 800a2fa:	b29b      	uxth	r3, r3
 800a2fc:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800a2fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a300:	2b0f      	cmp	r3, #15
 800a302:	d916      	bls.n	800a332 <UART_SetConfig+0xb16>
 800a304:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a306:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a30a:	d212      	bcs.n	800a332 <UART_SetConfig+0xb16>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800a30c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a30e:	b29b      	uxth	r3, r3
 800a310:	f023 030f 	bic.w	r3, r3, #15
 800a314:	84fb      	strh	r3, [r7, #38]	; 0x26
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800a316:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a318:	085b      	lsrs	r3, r3, #1
 800a31a:	b29b      	uxth	r3, r3
 800a31c:	f003 0307 	and.w	r3, r3, #7
 800a320:	b29a      	uxth	r2, r3
 800a322:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800a324:	4313      	orrs	r3, r2
 800a326:	84fb      	strh	r3, [r7, #38]	; 0x26
        huart->Instance->BRR = brrtemp;
 800a328:	687b      	ldr	r3, [r7, #4]
 800a32a:	681b      	ldr	r3, [r3, #0]
 800a32c:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800a32e:	60da      	str	r2, [r3, #12]
 800a330:	e0bb      	b.n	800a4aa <UART_SetConfig+0xc8e>
      }
      else
      {
        ret = HAL_ERROR;
 800a332:	2301      	movs	r3, #1
 800a334:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 800a338:	e0b7      	b.n	800a4aa <UART_SetConfig+0xc8e>
      }
    }
  }
  else
  {
    switch (clocksource)
 800a33a:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800a33e:	2b20      	cmp	r3, #32
 800a340:	dc4a      	bgt.n	800a3d8 <UART_SetConfig+0xbbc>
 800a342:	2b00      	cmp	r3, #0
 800a344:	f2c0 8086 	blt.w	800a454 <UART_SetConfig+0xc38>
 800a348:	2b20      	cmp	r3, #32
 800a34a:	f200 8083 	bhi.w	800a454 <UART_SetConfig+0xc38>
 800a34e:	a201      	add	r2, pc, #4	; (adr r2, 800a354 <UART_SetConfig+0xb38>)
 800a350:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a354:	0800a3df 	.word	0x0800a3df
 800a358:	0800a3e7 	.word	0x0800a3e7
 800a35c:	0800a455 	.word	0x0800a455
 800a360:	0800a455 	.word	0x0800a455
 800a364:	0800a3ef 	.word	0x0800a3ef
 800a368:	0800a455 	.word	0x0800a455
 800a36c:	0800a455 	.word	0x0800a455
 800a370:	0800a455 	.word	0x0800a455
 800a374:	0800a3ff 	.word	0x0800a3ff
 800a378:	0800a455 	.word	0x0800a455
 800a37c:	0800a455 	.word	0x0800a455
 800a380:	0800a455 	.word	0x0800a455
 800a384:	0800a455 	.word	0x0800a455
 800a388:	0800a455 	.word	0x0800a455
 800a38c:	0800a455 	.word	0x0800a455
 800a390:	0800a455 	.word	0x0800a455
 800a394:	0800a40f 	.word	0x0800a40f
 800a398:	0800a455 	.word	0x0800a455
 800a39c:	0800a455 	.word	0x0800a455
 800a3a0:	0800a455 	.word	0x0800a455
 800a3a4:	0800a455 	.word	0x0800a455
 800a3a8:	0800a455 	.word	0x0800a455
 800a3ac:	0800a455 	.word	0x0800a455
 800a3b0:	0800a455 	.word	0x0800a455
 800a3b4:	0800a455 	.word	0x0800a455
 800a3b8:	0800a455 	.word	0x0800a455
 800a3bc:	0800a455 	.word	0x0800a455
 800a3c0:	0800a455 	.word	0x0800a455
 800a3c4:	0800a455 	.word	0x0800a455
 800a3c8:	0800a455 	.word	0x0800a455
 800a3cc:	0800a455 	.word	0x0800a455
 800a3d0:	0800a455 	.word	0x0800a455
 800a3d4:	0800a435 	.word	0x0800a435
 800a3d8:	2b40      	cmp	r3, #64	; 0x40
 800a3da:	d02e      	beq.n	800a43a <UART_SetConfig+0xc1e>
 800a3dc:	e03a      	b.n	800a454 <UART_SetConfig+0xc38>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800a3de:	f7fb f845 	bl	800546c <HAL_RCC_GetPCLK1Freq>
 800a3e2:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800a3e4:	e03c      	b.n	800a460 <UART_SetConfig+0xc44>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800a3e6:	f7fb f857 	bl	8005498 <HAL_RCC_GetPCLK2Freq>
 800a3ea:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800a3ec:	e038      	b.n	800a460 <UART_SetConfig+0xc44>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a3ee:	f107 0314 	add.w	r3, r7, #20
 800a3f2:	4618      	mov	r0, r3
 800a3f4:	f7fc fbdc 	bl	8006bb0 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800a3f8:	69bb      	ldr	r3, [r7, #24]
 800a3fa:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800a3fc:	e030      	b.n	800a460 <UART_SetConfig+0xc44>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a3fe:	f107 0308 	add.w	r3, r7, #8
 800a402:	4618      	mov	r0, r3
 800a404:	f7fc fd28 	bl	8006e58 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800a408:	68fb      	ldr	r3, [r7, #12]
 800a40a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800a40c:	e028      	b.n	800a460 <UART_SetConfig+0xc44>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a40e:	4b0e      	ldr	r3, [pc, #56]	; (800a448 <UART_SetConfig+0xc2c>)
 800a410:	681b      	ldr	r3, [r3, #0]
 800a412:	f003 0320 	and.w	r3, r3, #32
 800a416:	2b00      	cmp	r3, #0
 800a418:	d009      	beq.n	800a42e <UART_SetConfig+0xc12>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800a41a:	4b0b      	ldr	r3, [pc, #44]	; (800a448 <UART_SetConfig+0xc2c>)
 800a41c:	681b      	ldr	r3, [r3, #0]
 800a41e:	08db      	lsrs	r3, r3, #3
 800a420:	f003 0303 	and.w	r3, r3, #3
 800a424:	4a09      	ldr	r2, [pc, #36]	; (800a44c <UART_SetConfig+0xc30>)
 800a426:	fa22 f303 	lsr.w	r3, r2, r3
 800a42a:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800a42c:	e018      	b.n	800a460 <UART_SetConfig+0xc44>
          pclk = (uint32_t) HSI_VALUE;
 800a42e:	4b07      	ldr	r3, [pc, #28]	; (800a44c <UART_SetConfig+0xc30>)
 800a430:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800a432:	e015      	b.n	800a460 <UART_SetConfig+0xc44>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800a434:	4b06      	ldr	r3, [pc, #24]	; (800a450 <UART_SetConfig+0xc34>)
 800a436:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800a438:	e012      	b.n	800a460 <UART_SetConfig+0xc44>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a43a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a43e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800a440:	e00e      	b.n	800a460 <UART_SetConfig+0xc44>
 800a442:	bf00      	nop
 800a444:	080124a0 	.word	0x080124a0
 800a448:	58024400 	.word	0x58024400
 800a44c:	03d09000 	.word	0x03d09000
 800a450:	003d0900 	.word	0x003d0900
      default:
        pclk = 0U;
 800a454:	2300      	movs	r3, #0
 800a456:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 800a458:	2301      	movs	r3, #1
 800a45a:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 800a45e:	bf00      	nop
    }

    if (pclk != 0U)
 800a460:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a462:	2b00      	cmp	r3, #0
 800a464:	d021      	beq.n	800a4aa <UART_SetConfig+0xc8e>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a466:	687b      	ldr	r3, [r7, #4]
 800a468:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a46a:	4a1a      	ldr	r2, [pc, #104]	; (800a4d4 <UART_SetConfig+0xcb8>)
 800a46c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a470:	461a      	mov	r2, r3
 800a472:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a474:	fbb3 f2f2 	udiv	r2, r3, r2
 800a478:	687b      	ldr	r3, [r7, #4]
 800a47a:	685b      	ldr	r3, [r3, #4]
 800a47c:	085b      	lsrs	r3, r3, #1
 800a47e:	441a      	add	r2, r3
 800a480:	687b      	ldr	r3, [r7, #4]
 800a482:	685b      	ldr	r3, [r3, #4]
 800a484:	fbb2 f3f3 	udiv	r3, r2, r3
 800a488:	b29b      	uxth	r3, r3
 800a48a:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800a48c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a48e:	2b0f      	cmp	r3, #15
 800a490:	d908      	bls.n	800a4a4 <UART_SetConfig+0xc88>
 800a492:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a494:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a498:	d204      	bcs.n	800a4a4 <UART_SetConfig+0xc88>
      {
        huart->Instance->BRR = usartdiv;
 800a49a:	687b      	ldr	r3, [r7, #4]
 800a49c:	681b      	ldr	r3, [r3, #0]
 800a49e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a4a0:	60da      	str	r2, [r3, #12]
 800a4a2:	e002      	b.n	800a4aa <UART_SetConfig+0xc8e>
      }
      else
      {
        ret = HAL_ERROR;
 800a4a4:	2301      	movs	r3, #1
 800a4a6:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800a4aa:	687b      	ldr	r3, [r7, #4]
 800a4ac:	2201      	movs	r2, #1
 800a4ae:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800a4b2:	687b      	ldr	r3, [r7, #4]
 800a4b4:	2201      	movs	r2, #1
 800a4b6:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800a4ba:	687b      	ldr	r3, [r7, #4]
 800a4bc:	2200      	movs	r2, #0
 800a4be:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 800a4c0:	687b      	ldr	r3, [r7, #4]
 800a4c2:	2200      	movs	r2, #0
 800a4c4:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 800a4c6:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
}
 800a4ca:	4618      	mov	r0, r3
 800a4cc:	3738      	adds	r7, #56	; 0x38
 800a4ce:	46bd      	mov	sp, r7
 800a4d0:	bdb0      	pop	{r4, r5, r7, pc}
 800a4d2:	bf00      	nop
 800a4d4:	080124a0 	.word	0x080124a0

0800a4d8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800a4d8:	b480      	push	{r7}
 800a4da:	b083      	sub	sp, #12
 800a4dc:	af00      	add	r7, sp, #0
 800a4de:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800a4e0:	687b      	ldr	r3, [r7, #4]
 800a4e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a4e4:	f003 0301 	and.w	r3, r3, #1
 800a4e8:	2b00      	cmp	r3, #0
 800a4ea:	d00a      	beq.n	800a502 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800a4ec:	687b      	ldr	r3, [r7, #4]
 800a4ee:	681b      	ldr	r3, [r3, #0]
 800a4f0:	685b      	ldr	r3, [r3, #4]
 800a4f2:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800a4f6:	687b      	ldr	r3, [r7, #4]
 800a4f8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a4fa:	687b      	ldr	r3, [r7, #4]
 800a4fc:	681b      	ldr	r3, [r3, #0]
 800a4fe:	430a      	orrs	r2, r1
 800a500:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800a502:	687b      	ldr	r3, [r7, #4]
 800a504:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a506:	f003 0302 	and.w	r3, r3, #2
 800a50a:	2b00      	cmp	r3, #0
 800a50c:	d00a      	beq.n	800a524 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800a50e:	687b      	ldr	r3, [r7, #4]
 800a510:	681b      	ldr	r3, [r3, #0]
 800a512:	685b      	ldr	r3, [r3, #4]
 800a514:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800a518:	687b      	ldr	r3, [r7, #4]
 800a51a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800a51c:	687b      	ldr	r3, [r7, #4]
 800a51e:	681b      	ldr	r3, [r3, #0]
 800a520:	430a      	orrs	r2, r1
 800a522:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800a524:	687b      	ldr	r3, [r7, #4]
 800a526:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a528:	f003 0304 	and.w	r3, r3, #4
 800a52c:	2b00      	cmp	r3, #0
 800a52e:	d00a      	beq.n	800a546 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800a530:	687b      	ldr	r3, [r7, #4]
 800a532:	681b      	ldr	r3, [r3, #0]
 800a534:	685b      	ldr	r3, [r3, #4]
 800a536:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800a53a:	687b      	ldr	r3, [r7, #4]
 800a53c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a53e:	687b      	ldr	r3, [r7, #4]
 800a540:	681b      	ldr	r3, [r3, #0]
 800a542:	430a      	orrs	r2, r1
 800a544:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800a546:	687b      	ldr	r3, [r7, #4]
 800a548:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a54a:	f003 0308 	and.w	r3, r3, #8
 800a54e:	2b00      	cmp	r3, #0
 800a550:	d00a      	beq.n	800a568 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800a552:	687b      	ldr	r3, [r7, #4]
 800a554:	681b      	ldr	r3, [r3, #0]
 800a556:	685b      	ldr	r3, [r3, #4]
 800a558:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800a55c:	687b      	ldr	r3, [r7, #4]
 800a55e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a560:	687b      	ldr	r3, [r7, #4]
 800a562:	681b      	ldr	r3, [r3, #0]
 800a564:	430a      	orrs	r2, r1
 800a566:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800a568:	687b      	ldr	r3, [r7, #4]
 800a56a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a56c:	f003 0310 	and.w	r3, r3, #16
 800a570:	2b00      	cmp	r3, #0
 800a572:	d00a      	beq.n	800a58a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800a574:	687b      	ldr	r3, [r7, #4]
 800a576:	681b      	ldr	r3, [r3, #0]
 800a578:	689b      	ldr	r3, [r3, #8]
 800a57a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800a57e:	687b      	ldr	r3, [r7, #4]
 800a580:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800a582:	687b      	ldr	r3, [r7, #4]
 800a584:	681b      	ldr	r3, [r3, #0]
 800a586:	430a      	orrs	r2, r1
 800a588:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800a58a:	687b      	ldr	r3, [r7, #4]
 800a58c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a58e:	f003 0320 	and.w	r3, r3, #32
 800a592:	2b00      	cmp	r3, #0
 800a594:	d00a      	beq.n	800a5ac <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800a596:	687b      	ldr	r3, [r7, #4]
 800a598:	681b      	ldr	r3, [r3, #0]
 800a59a:	689b      	ldr	r3, [r3, #8]
 800a59c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800a5a0:	687b      	ldr	r3, [r7, #4]
 800a5a2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800a5a4:	687b      	ldr	r3, [r7, #4]
 800a5a6:	681b      	ldr	r3, [r3, #0]
 800a5a8:	430a      	orrs	r2, r1
 800a5aa:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800a5ac:	687b      	ldr	r3, [r7, #4]
 800a5ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a5b0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a5b4:	2b00      	cmp	r3, #0
 800a5b6:	d01a      	beq.n	800a5ee <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800a5b8:	687b      	ldr	r3, [r7, #4]
 800a5ba:	681b      	ldr	r3, [r3, #0]
 800a5bc:	685b      	ldr	r3, [r3, #4]
 800a5be:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800a5c2:	687b      	ldr	r3, [r7, #4]
 800a5c4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800a5c6:	687b      	ldr	r3, [r7, #4]
 800a5c8:	681b      	ldr	r3, [r3, #0]
 800a5ca:	430a      	orrs	r2, r1
 800a5cc:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800a5ce:	687b      	ldr	r3, [r7, #4]
 800a5d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a5d2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a5d6:	d10a      	bne.n	800a5ee <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800a5d8:	687b      	ldr	r3, [r7, #4]
 800a5da:	681b      	ldr	r3, [r3, #0]
 800a5dc:	685b      	ldr	r3, [r3, #4]
 800a5de:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800a5e2:	687b      	ldr	r3, [r7, #4]
 800a5e4:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800a5e6:	687b      	ldr	r3, [r7, #4]
 800a5e8:	681b      	ldr	r3, [r3, #0]
 800a5ea:	430a      	orrs	r2, r1
 800a5ec:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800a5ee:	687b      	ldr	r3, [r7, #4]
 800a5f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a5f2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a5f6:	2b00      	cmp	r3, #0
 800a5f8:	d00a      	beq.n	800a610 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800a5fa:	687b      	ldr	r3, [r7, #4]
 800a5fc:	681b      	ldr	r3, [r3, #0]
 800a5fe:	685b      	ldr	r3, [r3, #4]
 800a600:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800a604:	687b      	ldr	r3, [r7, #4]
 800a606:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800a608:	687b      	ldr	r3, [r7, #4]
 800a60a:	681b      	ldr	r3, [r3, #0]
 800a60c:	430a      	orrs	r2, r1
 800a60e:	605a      	str	r2, [r3, #4]
  }
}
 800a610:	bf00      	nop
 800a612:	370c      	adds	r7, #12
 800a614:	46bd      	mov	sp, r7
 800a616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a61a:	4770      	bx	lr

0800a61c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800a61c:	b580      	push	{r7, lr}
 800a61e:	b086      	sub	sp, #24
 800a620:	af02      	add	r7, sp, #8
 800a622:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a624:	687b      	ldr	r3, [r7, #4]
 800a626:	2200      	movs	r2, #0
 800a628:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800a62c:	f7f7 f880 	bl	8001730 <HAL_GetTick>
 800a630:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800a632:	687b      	ldr	r3, [r7, #4]
 800a634:	681b      	ldr	r3, [r3, #0]
 800a636:	681b      	ldr	r3, [r3, #0]
 800a638:	f003 0308 	and.w	r3, r3, #8
 800a63c:	2b08      	cmp	r3, #8
 800a63e:	d10e      	bne.n	800a65e <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800a640:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800a644:	9300      	str	r3, [sp, #0]
 800a646:	68fb      	ldr	r3, [r7, #12]
 800a648:	2200      	movs	r2, #0
 800a64a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800a64e:	6878      	ldr	r0, [r7, #4]
 800a650:	f000 f82f 	bl	800a6b2 <UART_WaitOnFlagUntilTimeout>
 800a654:	4603      	mov	r3, r0
 800a656:	2b00      	cmp	r3, #0
 800a658:	d001      	beq.n	800a65e <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800a65a:	2303      	movs	r3, #3
 800a65c:	e025      	b.n	800a6aa <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800a65e:	687b      	ldr	r3, [r7, #4]
 800a660:	681b      	ldr	r3, [r3, #0]
 800a662:	681b      	ldr	r3, [r3, #0]
 800a664:	f003 0304 	and.w	r3, r3, #4
 800a668:	2b04      	cmp	r3, #4
 800a66a:	d10e      	bne.n	800a68a <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800a66c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800a670:	9300      	str	r3, [sp, #0]
 800a672:	68fb      	ldr	r3, [r7, #12]
 800a674:	2200      	movs	r2, #0
 800a676:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800a67a:	6878      	ldr	r0, [r7, #4]
 800a67c:	f000 f819 	bl	800a6b2 <UART_WaitOnFlagUntilTimeout>
 800a680:	4603      	mov	r3, r0
 800a682:	2b00      	cmp	r3, #0
 800a684:	d001      	beq.n	800a68a <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800a686:	2303      	movs	r3, #3
 800a688:	e00f      	b.n	800a6aa <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800a68a:	687b      	ldr	r3, [r7, #4]
 800a68c:	2220      	movs	r2, #32
 800a68e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 800a692:	687b      	ldr	r3, [r7, #4]
 800a694:	2220      	movs	r2, #32
 800a696:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a69a:	687b      	ldr	r3, [r7, #4]
 800a69c:	2200      	movs	r2, #0
 800a69e:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 800a6a0:	687b      	ldr	r3, [r7, #4]
 800a6a2:	2200      	movs	r2, #0
 800a6a4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800a6a8:	2300      	movs	r3, #0
}
 800a6aa:	4618      	mov	r0, r3
 800a6ac:	3710      	adds	r7, #16
 800a6ae:	46bd      	mov	sp, r7
 800a6b0:	bd80      	pop	{r7, pc}

0800a6b2 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800a6b2:	b580      	push	{r7, lr}
 800a6b4:	b084      	sub	sp, #16
 800a6b6:	af00      	add	r7, sp, #0
 800a6b8:	60f8      	str	r0, [r7, #12]
 800a6ba:	60b9      	str	r1, [r7, #8]
 800a6bc:	603b      	str	r3, [r7, #0]
 800a6be:	4613      	mov	r3, r2
 800a6c0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a6c2:	e062      	b.n	800a78a <UART_WaitOnFlagUntilTimeout+0xd8>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a6c4:	69bb      	ldr	r3, [r7, #24]
 800a6c6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a6ca:	d05e      	beq.n	800a78a <UART_WaitOnFlagUntilTimeout+0xd8>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a6cc:	f7f7 f830 	bl	8001730 <HAL_GetTick>
 800a6d0:	4602      	mov	r2, r0
 800a6d2:	683b      	ldr	r3, [r7, #0]
 800a6d4:	1ad3      	subs	r3, r2, r3
 800a6d6:	69ba      	ldr	r2, [r7, #24]
 800a6d8:	429a      	cmp	r2, r3
 800a6da:	d302      	bcc.n	800a6e2 <UART_WaitOnFlagUntilTimeout+0x30>
 800a6dc:	69bb      	ldr	r3, [r7, #24]
 800a6de:	2b00      	cmp	r3, #0
 800a6e0:	d11d      	bne.n	800a71e <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 800a6e2:	68fb      	ldr	r3, [r7, #12]
 800a6e4:	681b      	ldr	r3, [r3, #0]
 800a6e6:	681a      	ldr	r2, [r3, #0]
 800a6e8:	68fb      	ldr	r3, [r7, #12]
 800a6ea:	681b      	ldr	r3, [r3, #0]
 800a6ec:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800a6f0:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a6f2:	68fb      	ldr	r3, [r7, #12]
 800a6f4:	681b      	ldr	r3, [r3, #0]
 800a6f6:	689a      	ldr	r2, [r3, #8]
 800a6f8:	68fb      	ldr	r3, [r7, #12]
 800a6fa:	681b      	ldr	r3, [r3, #0]
 800a6fc:	f022 0201 	bic.w	r2, r2, #1
 800a700:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 800a702:	68fb      	ldr	r3, [r7, #12]
 800a704:	2220      	movs	r2, #32
 800a706:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 800a70a:	68fb      	ldr	r3, [r7, #12]
 800a70c:	2220      	movs	r2, #32
 800a70e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 800a712:	68fb      	ldr	r3, [r7, #12]
 800a714:	2200      	movs	r2, #0
 800a716:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 800a71a:	2303      	movs	r3, #3
 800a71c:	e045      	b.n	800a7aa <UART_WaitOnFlagUntilTimeout+0xf8>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800a71e:	68fb      	ldr	r3, [r7, #12]
 800a720:	681b      	ldr	r3, [r3, #0]
 800a722:	681b      	ldr	r3, [r3, #0]
 800a724:	f003 0304 	and.w	r3, r3, #4
 800a728:	2b00      	cmp	r3, #0
 800a72a:	d02e      	beq.n	800a78a <UART_WaitOnFlagUntilTimeout+0xd8>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800a72c:	68fb      	ldr	r3, [r7, #12]
 800a72e:	681b      	ldr	r3, [r3, #0]
 800a730:	69db      	ldr	r3, [r3, #28]
 800a732:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800a736:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a73a:	d126      	bne.n	800a78a <UART_WaitOnFlagUntilTimeout+0xd8>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800a73c:	68fb      	ldr	r3, [r7, #12]
 800a73e:	681b      	ldr	r3, [r3, #0]
 800a740:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800a744:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 800a746:	68fb      	ldr	r3, [r7, #12]
 800a748:	681b      	ldr	r3, [r3, #0]
 800a74a:	681a      	ldr	r2, [r3, #0]
 800a74c:	68fb      	ldr	r3, [r7, #12]
 800a74e:	681b      	ldr	r3, [r3, #0]
 800a750:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800a754:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a756:	68fb      	ldr	r3, [r7, #12]
 800a758:	681b      	ldr	r3, [r3, #0]
 800a75a:	689a      	ldr	r2, [r3, #8]
 800a75c:	68fb      	ldr	r3, [r7, #12]
 800a75e:	681b      	ldr	r3, [r3, #0]
 800a760:	f022 0201 	bic.w	r2, r2, #1
 800a764:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 800a766:	68fb      	ldr	r3, [r7, #12]
 800a768:	2220      	movs	r2, #32
 800a76a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 800a76e:	68fb      	ldr	r3, [r7, #12]
 800a770:	2220      	movs	r2, #32
 800a772:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800a776:	68fb      	ldr	r3, [r7, #12]
 800a778:	2220      	movs	r2, #32
 800a77a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800a77e:	68fb      	ldr	r3, [r7, #12]
 800a780:	2200      	movs	r2, #0
 800a782:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 800a786:	2303      	movs	r3, #3
 800a788:	e00f      	b.n	800a7aa <UART_WaitOnFlagUntilTimeout+0xf8>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a78a:	68fb      	ldr	r3, [r7, #12]
 800a78c:	681b      	ldr	r3, [r3, #0]
 800a78e:	69da      	ldr	r2, [r3, #28]
 800a790:	68bb      	ldr	r3, [r7, #8]
 800a792:	4013      	ands	r3, r2
 800a794:	68ba      	ldr	r2, [r7, #8]
 800a796:	429a      	cmp	r2, r3
 800a798:	bf0c      	ite	eq
 800a79a:	2301      	moveq	r3, #1
 800a79c:	2300      	movne	r3, #0
 800a79e:	b2db      	uxtb	r3, r3
 800a7a0:	461a      	mov	r2, r3
 800a7a2:	79fb      	ldrb	r3, [r7, #7]
 800a7a4:	429a      	cmp	r2, r3
 800a7a6:	d08d      	beq.n	800a6c4 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800a7a8:	2300      	movs	r3, #0
}
 800a7aa:	4618      	mov	r0, r3
 800a7ac:	3710      	adds	r7, #16
 800a7ae:	46bd      	mov	sp, r7
 800a7b0:	bd80      	pop	{r7, pc}

0800a7b2 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800a7b2:	b480      	push	{r7}
 800a7b4:	b085      	sub	sp, #20
 800a7b6:	af00      	add	r7, sp, #0
 800a7b8:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800a7ba:	687b      	ldr	r3, [r7, #4]
 800a7bc:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800a7c0:	2b01      	cmp	r3, #1
 800a7c2:	d101      	bne.n	800a7c8 <HAL_UARTEx_DisableFifoMode+0x16>
 800a7c4:	2302      	movs	r3, #2
 800a7c6:	e027      	b.n	800a818 <HAL_UARTEx_DisableFifoMode+0x66>
 800a7c8:	687b      	ldr	r3, [r7, #4]
 800a7ca:	2201      	movs	r2, #1
 800a7cc:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800a7d0:	687b      	ldr	r3, [r7, #4]
 800a7d2:	2224      	movs	r2, #36	; 0x24
 800a7d4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a7d8:	687b      	ldr	r3, [r7, #4]
 800a7da:	681b      	ldr	r3, [r3, #0]
 800a7dc:	681b      	ldr	r3, [r3, #0]
 800a7de:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800a7e0:	687b      	ldr	r3, [r7, #4]
 800a7e2:	681b      	ldr	r3, [r3, #0]
 800a7e4:	681a      	ldr	r2, [r3, #0]
 800a7e6:	687b      	ldr	r3, [r7, #4]
 800a7e8:	681b      	ldr	r3, [r3, #0]
 800a7ea:	f022 0201 	bic.w	r2, r2, #1
 800a7ee:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800a7f0:	68fb      	ldr	r3, [r7, #12]
 800a7f2:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800a7f6:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800a7f8:	687b      	ldr	r3, [r7, #4]
 800a7fa:	2200      	movs	r2, #0
 800a7fc:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a7fe:	687b      	ldr	r3, [r7, #4]
 800a800:	681b      	ldr	r3, [r3, #0]
 800a802:	68fa      	ldr	r2, [r7, #12]
 800a804:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800a806:	687b      	ldr	r3, [r7, #4]
 800a808:	2220      	movs	r2, #32
 800a80a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a80e:	687b      	ldr	r3, [r7, #4]
 800a810:	2200      	movs	r2, #0
 800a812:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800a816:	2300      	movs	r3, #0
}
 800a818:	4618      	mov	r0, r3
 800a81a:	3714      	adds	r7, #20
 800a81c:	46bd      	mov	sp, r7
 800a81e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a822:	4770      	bx	lr

0800a824 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800a824:	b580      	push	{r7, lr}
 800a826:	b084      	sub	sp, #16
 800a828:	af00      	add	r7, sp, #0
 800a82a:	6078      	str	r0, [r7, #4]
 800a82c:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800a82e:	687b      	ldr	r3, [r7, #4]
 800a830:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800a834:	2b01      	cmp	r3, #1
 800a836:	d101      	bne.n	800a83c <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800a838:	2302      	movs	r3, #2
 800a83a:	e02d      	b.n	800a898 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800a83c:	687b      	ldr	r3, [r7, #4]
 800a83e:	2201      	movs	r2, #1
 800a840:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800a844:	687b      	ldr	r3, [r7, #4]
 800a846:	2224      	movs	r2, #36	; 0x24
 800a848:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a84c:	687b      	ldr	r3, [r7, #4]
 800a84e:	681b      	ldr	r3, [r3, #0]
 800a850:	681b      	ldr	r3, [r3, #0]
 800a852:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800a854:	687b      	ldr	r3, [r7, #4]
 800a856:	681b      	ldr	r3, [r3, #0]
 800a858:	681a      	ldr	r2, [r3, #0]
 800a85a:	687b      	ldr	r3, [r7, #4]
 800a85c:	681b      	ldr	r3, [r3, #0]
 800a85e:	f022 0201 	bic.w	r2, r2, #1
 800a862:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800a864:	687b      	ldr	r3, [r7, #4]
 800a866:	681b      	ldr	r3, [r3, #0]
 800a868:	689b      	ldr	r3, [r3, #8]
 800a86a:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800a86e:	687b      	ldr	r3, [r7, #4]
 800a870:	681b      	ldr	r3, [r3, #0]
 800a872:	683a      	ldr	r2, [r7, #0]
 800a874:	430a      	orrs	r2, r1
 800a876:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800a878:	6878      	ldr	r0, [r7, #4]
 800a87a:	f000 f84f 	bl	800a91c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a87e:	687b      	ldr	r3, [r7, #4]
 800a880:	681b      	ldr	r3, [r3, #0]
 800a882:	68fa      	ldr	r2, [r7, #12]
 800a884:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800a886:	687b      	ldr	r3, [r7, #4]
 800a888:	2220      	movs	r2, #32
 800a88a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a88e:	687b      	ldr	r3, [r7, #4]
 800a890:	2200      	movs	r2, #0
 800a892:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800a896:	2300      	movs	r3, #0
}
 800a898:	4618      	mov	r0, r3
 800a89a:	3710      	adds	r7, #16
 800a89c:	46bd      	mov	sp, r7
 800a89e:	bd80      	pop	{r7, pc}

0800a8a0 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800a8a0:	b580      	push	{r7, lr}
 800a8a2:	b084      	sub	sp, #16
 800a8a4:	af00      	add	r7, sp, #0
 800a8a6:	6078      	str	r0, [r7, #4]
 800a8a8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800a8aa:	687b      	ldr	r3, [r7, #4]
 800a8ac:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800a8b0:	2b01      	cmp	r3, #1
 800a8b2:	d101      	bne.n	800a8b8 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800a8b4:	2302      	movs	r3, #2
 800a8b6:	e02d      	b.n	800a914 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800a8b8:	687b      	ldr	r3, [r7, #4]
 800a8ba:	2201      	movs	r2, #1
 800a8bc:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800a8c0:	687b      	ldr	r3, [r7, #4]
 800a8c2:	2224      	movs	r2, #36	; 0x24
 800a8c4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a8c8:	687b      	ldr	r3, [r7, #4]
 800a8ca:	681b      	ldr	r3, [r3, #0]
 800a8cc:	681b      	ldr	r3, [r3, #0]
 800a8ce:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800a8d0:	687b      	ldr	r3, [r7, #4]
 800a8d2:	681b      	ldr	r3, [r3, #0]
 800a8d4:	681a      	ldr	r2, [r3, #0]
 800a8d6:	687b      	ldr	r3, [r7, #4]
 800a8d8:	681b      	ldr	r3, [r3, #0]
 800a8da:	f022 0201 	bic.w	r2, r2, #1
 800a8de:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800a8e0:	687b      	ldr	r3, [r7, #4]
 800a8e2:	681b      	ldr	r3, [r3, #0]
 800a8e4:	689b      	ldr	r3, [r3, #8]
 800a8e6:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800a8ea:	687b      	ldr	r3, [r7, #4]
 800a8ec:	681b      	ldr	r3, [r3, #0]
 800a8ee:	683a      	ldr	r2, [r7, #0]
 800a8f0:	430a      	orrs	r2, r1
 800a8f2:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800a8f4:	6878      	ldr	r0, [r7, #4]
 800a8f6:	f000 f811 	bl	800a91c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a8fa:	687b      	ldr	r3, [r7, #4]
 800a8fc:	681b      	ldr	r3, [r3, #0]
 800a8fe:	68fa      	ldr	r2, [r7, #12]
 800a900:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800a902:	687b      	ldr	r3, [r7, #4]
 800a904:	2220      	movs	r2, #32
 800a906:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a90a:	687b      	ldr	r3, [r7, #4]
 800a90c:	2200      	movs	r2, #0
 800a90e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800a912:	2300      	movs	r3, #0
}
 800a914:	4618      	mov	r0, r3
 800a916:	3710      	adds	r7, #16
 800a918:	46bd      	mov	sp, r7
 800a91a:	bd80      	pop	{r7, pc}

0800a91c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800a91c:	b480      	push	{r7}
 800a91e:	b085      	sub	sp, #20
 800a920:	af00      	add	r7, sp, #0
 800a922:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800a924:	687b      	ldr	r3, [r7, #4]
 800a926:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a928:	2b00      	cmp	r3, #0
 800a92a:	d108      	bne.n	800a93e <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800a92c:	687b      	ldr	r3, [r7, #4]
 800a92e:	2201      	movs	r2, #1
 800a930:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800a934:	687b      	ldr	r3, [r7, #4]
 800a936:	2201      	movs	r2, #1
 800a938:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800a93c:	e031      	b.n	800a9a2 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800a93e:	2310      	movs	r3, #16
 800a940:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800a942:	2310      	movs	r3, #16
 800a944:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800a946:	687b      	ldr	r3, [r7, #4]
 800a948:	681b      	ldr	r3, [r3, #0]
 800a94a:	689b      	ldr	r3, [r3, #8]
 800a94c:	0e5b      	lsrs	r3, r3, #25
 800a94e:	b2db      	uxtb	r3, r3
 800a950:	f003 0307 	and.w	r3, r3, #7
 800a954:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800a956:	687b      	ldr	r3, [r7, #4]
 800a958:	681b      	ldr	r3, [r3, #0]
 800a95a:	689b      	ldr	r3, [r3, #8]
 800a95c:	0f5b      	lsrs	r3, r3, #29
 800a95e:	b2db      	uxtb	r3, r3
 800a960:	f003 0307 	and.w	r3, r3, #7
 800a964:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800a966:	7bbb      	ldrb	r3, [r7, #14]
 800a968:	7b3a      	ldrb	r2, [r7, #12]
 800a96a:	4911      	ldr	r1, [pc, #68]	; (800a9b0 <UARTEx_SetNbDataToProcess+0x94>)
 800a96c:	5c8a      	ldrb	r2, [r1, r2]
 800a96e:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800a972:	7b3a      	ldrb	r2, [r7, #12]
 800a974:	490f      	ldr	r1, [pc, #60]	; (800a9b4 <UARTEx_SetNbDataToProcess+0x98>)
 800a976:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800a978:	fb93 f3f2 	sdiv	r3, r3, r2
 800a97c:	b29a      	uxth	r2, r3
 800a97e:	687b      	ldr	r3, [r7, #4]
 800a980:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800a984:	7bfb      	ldrb	r3, [r7, #15]
 800a986:	7b7a      	ldrb	r2, [r7, #13]
 800a988:	4909      	ldr	r1, [pc, #36]	; (800a9b0 <UARTEx_SetNbDataToProcess+0x94>)
 800a98a:	5c8a      	ldrb	r2, [r1, r2]
 800a98c:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800a990:	7b7a      	ldrb	r2, [r7, #13]
 800a992:	4908      	ldr	r1, [pc, #32]	; (800a9b4 <UARTEx_SetNbDataToProcess+0x98>)
 800a994:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800a996:	fb93 f3f2 	sdiv	r3, r3, r2
 800a99a:	b29a      	uxth	r2, r3
 800a99c:	687b      	ldr	r3, [r7, #4]
 800a99e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800a9a2:	bf00      	nop
 800a9a4:	3714      	adds	r7, #20
 800a9a6:	46bd      	mov	sp, r7
 800a9a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9ac:	4770      	bx	lr
 800a9ae:	bf00      	nop
 800a9b0:	080124b8 	.word	0x080124b8
 800a9b4:	080124c0 	.word	0x080124c0

0800a9b8 <SDMMC_Init>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_Init(SDMMC_TypeDef *SDMMCx, SDMMC_InitTypeDef Init)
{
 800a9b8:	b084      	sub	sp, #16
 800a9ba:	b480      	push	{r7}
 800a9bc:	b085      	sub	sp, #20
 800a9be:	af00      	add	r7, sp, #0
 800a9c0:	6078      	str	r0, [r7, #4]
 800a9c2:	f107 001c 	add.w	r0, r7, #28
 800a9c6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 800a9ca:	2300      	movs	r3, #0
 800a9cc:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(Init.ClockDiv));

  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           | \
 800a9ce:	69fa      	ldr	r2, [r7, #28]
             Init.ClockPowerSave      | \
 800a9d0:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           | \
 800a9d2:	431a      	orrs	r2, r3
             Init.BusWide             | \
 800a9d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockPowerSave      | \
 800a9d6:	431a      	orrs	r2, r3
             Init.HardwareFlowControl | \
 800a9d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.BusWide             | \
 800a9da:	431a      	orrs	r2, r3
             Init.ClockDiv
 800a9dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.HardwareFlowControl | \
 800a9de:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           | \
 800a9e0:	68fa      	ldr	r2, [r7, #12]
 800a9e2:	4313      	orrs	r3, r2
 800a9e4:	60fb      	str	r3, [r7, #12]
            );

  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);
 800a9e6:	687b      	ldr	r3, [r7, #4]
 800a9e8:	685a      	ldr	r2, [r3, #4]
 800a9ea:	4b07      	ldr	r3, [pc, #28]	; (800aa08 <SDMMC_Init+0x50>)
 800a9ec:	4013      	ands	r3, r2
 800a9ee:	68fa      	ldr	r2, [r7, #12]
 800a9f0:	431a      	orrs	r2, r3
 800a9f2:	687b      	ldr	r3, [r7, #4]
 800a9f4:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 800a9f6:	2300      	movs	r3, #0
}
 800a9f8:	4618      	mov	r0, r3
 800a9fa:	3714      	adds	r7, #20
 800a9fc:	46bd      	mov	sp, r7
 800a9fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa02:	b004      	add	sp, #16
 800aa04:	4770      	bx	lr
 800aa06:	bf00      	nop
 800aa08:	ffc02c00 	.word	0xffc02c00

0800aa0c <SDMMC_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling)
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_ReadFIFO(SDMMC_TypeDef *SDMMCx)
{
 800aa0c:	b480      	push	{r7}
 800aa0e:	b083      	sub	sp, #12
 800aa10:	af00      	add	r7, sp, #0
 800aa12:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */
  return (SDMMCx->FIFO);
 800aa14:	687b      	ldr	r3, [r7, #4]
 800aa16:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 800aa1a:	4618      	mov	r0, r3
 800aa1c:	370c      	adds	r7, #12
 800aa1e:	46bd      	mov	sp, r7
 800aa20:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa24:	4770      	bx	lr

0800aa26 <SDMMC_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_PowerState_ON(SDMMC_TypeDef *SDMMCx)
{
 800aa26:	b480      	push	{r7}
 800aa28:	b083      	sub	sp, #12
 800aa2a:	af00      	add	r7, sp, #0
 800aa2c:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */
  SDMMCx->POWER |= SDMMC_POWER_PWRCTRL;
 800aa2e:	687b      	ldr	r3, [r7, #4]
 800aa30:	681b      	ldr	r3, [r3, #0]
 800aa32:	f043 0203 	orr.w	r2, r3, #3
 800aa36:	687b      	ldr	r3, [r7, #4]
 800aa38:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 800aa3a:	2300      	movs	r3, #0
}
 800aa3c:	4618      	mov	r0, r3
 800aa3e:	370c      	adds	r7, #12
 800aa40:	46bd      	mov	sp, r7
 800aa42:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa46:	4770      	bx	lr

0800aa48 <SDMMC_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON
  */
uint32_t SDMMC_GetPowerState(SDMMC_TypeDef *SDMMCx)
{
 800aa48:	b480      	push	{r7}
 800aa4a:	b083      	sub	sp, #12
 800aa4c:	af00      	add	r7, sp, #0
 800aa4e:	6078      	str	r0, [r7, #4]
  return (SDMMCx->POWER & SDMMC_POWER_PWRCTRL);
 800aa50:	687b      	ldr	r3, [r7, #4]
 800aa52:	681b      	ldr	r3, [r3, #0]
 800aa54:	f003 0303 	and.w	r3, r3, #3
}
 800aa58:	4618      	mov	r0, r3
 800aa5a:	370c      	adds	r7, #12
 800aa5c:	46bd      	mov	sp, r7
 800aa5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa62:	4770      	bx	lr

0800aa64 <SDMMC_SendCommand>:
  * @param  Command: pointer to a SDMMC_CmdInitTypeDef structure that contains
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_SendCommand(SDMMC_TypeDef *SDMMCx, SDMMC_CmdInitTypeDef *Command)
{
 800aa64:	b480      	push	{r7}
 800aa66:	b085      	sub	sp, #20
 800aa68:	af00      	add	r7, sp, #0
 800aa6a:	6078      	str	r0, [r7, #4]
 800aa6c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800aa6e:	2300      	movs	r3, #0
 800aa70:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_RESPONSE(Command->Response));
  assert_param(IS_SDMMC_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDMMC_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDMMCx->ARG = Command->Argument;
 800aa72:	683b      	ldr	r3, [r7, #0]
 800aa74:	681a      	ldr	r2, [r3, #0]
 800aa76:	687b      	ldr	r3, [r7, #4]
 800aa78:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 800aa7a:	683b      	ldr	r3, [r7, #0]
 800aa7c:	685a      	ldr	r2, [r3, #4]
                       Command->Response         | \
 800aa7e:	683b      	ldr	r3, [r7, #0]
 800aa80:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 800aa82:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt | \
 800aa84:	683b      	ldr	r3, [r7, #0]
 800aa86:	68db      	ldr	r3, [r3, #12]
                       Command->Response         | \
 800aa88:	431a      	orrs	r2, r3
                       Command->CPSM);
 800aa8a:	683b      	ldr	r3, [r7, #0]
 800aa8c:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt | \
 800aa8e:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 800aa90:	68fa      	ldr	r2, [r7, #12]
 800aa92:	4313      	orrs	r3, r2
 800aa94:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC CMD register */
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800aa96:	687b      	ldr	r3, [r7, #4]
 800aa98:	68da      	ldr	r2, [r3, #12]
 800aa9a:	4b06      	ldr	r3, [pc, #24]	; (800aab4 <SDMMC_SendCommand+0x50>)
 800aa9c:	4013      	ands	r3, r2
 800aa9e:	68fa      	ldr	r2, [r7, #12]
 800aaa0:	431a      	orrs	r2, r3
 800aaa2:	687b      	ldr	r3, [r7, #4]
 800aaa4:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800aaa6:	2300      	movs	r3, #0
}
 800aaa8:	4618      	mov	r0, r3
 800aaaa:	3714      	adds	r7, #20
 800aaac:	46bd      	mov	sp, r7
 800aaae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aab2:	4770      	bx	lr
 800aab4:	fffee0c0 	.word	0xfffee0c0

0800aab8 <SDMMC_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDMMC_GetCommandResponse(SDMMC_TypeDef *SDMMCx)
{
 800aab8:	b480      	push	{r7}
 800aaba:	b083      	sub	sp, #12
 800aabc:	af00      	add	r7, sp, #0
 800aabe:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDMMCx->RESPCMD);
 800aac0:	687b      	ldr	r3, [r7, #4]
 800aac2:	691b      	ldr	r3, [r3, #16]
 800aac4:	b2db      	uxtb	r3, r3
}
 800aac6:	4618      	mov	r0, r3
 800aac8:	370c      	adds	r7, #12
 800aaca:	46bd      	mov	sp, r7
 800aacc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aad0:	4770      	bx	lr

0800aad2 <SDMMC_GetResponse>:
  *            @arg SDMMC_RESP3: Response Register 3
  *            @arg SDMMC_RESP4: Response Register 4
  * @retval The Corresponding response register value
  */
uint32_t SDMMC_GetResponse(SDMMC_TypeDef *SDMMCx, uint32_t Response)
{
 800aad2:	b480      	push	{r7}
 800aad4:	b085      	sub	sp, #20
 800aad6:	af00      	add	r7, sp, #0
 800aad8:	6078      	str	r0, [r7, #4]
 800aada:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDMMC_RESP(Response));

  /* Get the response */
  tmp = (uint32_t)(&(SDMMCx->RESP1)) + Response;
 800aadc:	687b      	ldr	r3, [r7, #4]
 800aade:	3314      	adds	r3, #20
 800aae0:	461a      	mov	r2, r3
 800aae2:	683b      	ldr	r3, [r7, #0]
 800aae4:	4413      	add	r3, r2
 800aae6:	60fb      	str	r3, [r7, #12]

  return (*(__IO uint32_t *) tmp);
 800aae8:	68fb      	ldr	r3, [r7, #12]
 800aaea:	681b      	ldr	r3, [r3, #0]
}
 800aaec:	4618      	mov	r0, r3
 800aaee:	3714      	adds	r7, #20
 800aaf0:	46bd      	mov	sp, r7
 800aaf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aaf6:	4770      	bx	lr

0800aaf8 <SDMMC_ConfigData>:
  * @param  Data : pointer to a SDMMC_DataInitTypeDef structure
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_ConfigData(SDMMC_TypeDef *SDMMCx, SDMMC_DataInitTypeDef *Data)
{
 800aaf8:	b480      	push	{r7}
 800aafa:	b085      	sub	sp, #20
 800aafc:	af00      	add	r7, sp, #0
 800aafe:	6078      	str	r0, [r7, #4]
 800ab00:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800ab02:	2300      	movs	r3, #0
 800ab04:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDMMC_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDMMC_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDMMCx->DTIMER = Data->DataTimeOut;
 800ab06:	683b      	ldr	r3, [r7, #0]
 800ab08:	681a      	ldr	r2, [r3, #0]
 800ab0a:	687b      	ldr	r3, [r7, #4]
 800ab0c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDMMCx->DLEN = Data->DataLength;
 800ab0e:	683b      	ldr	r3, [r7, #0]
 800ab10:	685a      	ldr	r2, [r3, #4]
 800ab12:	687b      	ldr	r3, [r7, #4]
 800ab14:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 800ab16:	683b      	ldr	r3, [r7, #0]
 800ab18:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   | \
 800ab1a:	683b      	ldr	r3, [r7, #0]
 800ab1c:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 800ab1e:	431a      	orrs	r2, r3
                       Data->TransferMode  | \
 800ab20:	683b      	ldr	r3, [r7, #0]
 800ab22:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   | \
 800ab24:	431a      	orrs	r2, r3
                       Data->DPSM);
 800ab26:	683b      	ldr	r3, [r7, #0]
 800ab28:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  | \
 800ab2a:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 800ab2c:	68fa      	ldr	r2, [r7, #12]
 800ab2e:	4313      	orrs	r3, r2
 800ab30:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 800ab32:	687b      	ldr	r3, [r7, #4]
 800ab34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ab36:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800ab3a:	68fb      	ldr	r3, [r7, #12]
 800ab3c:	431a      	orrs	r2, r3
 800ab3e:	687b      	ldr	r3, [r7, #4]
 800ab40:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 800ab42:	2300      	movs	r3, #0

}
 800ab44:	4618      	mov	r0, r3
 800ab46:	3714      	adds	r7, #20
 800ab48:	46bd      	mov	sp, r7
 800ab4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab4e:	4770      	bx	lr

0800ab50 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDMMC_TypeDef *SDMMCx, uint32_t BlockSize)
{
 800ab50:	b580      	push	{r7, lr}
 800ab52:	b088      	sub	sp, #32
 800ab54:	af00      	add	r7, sp, #0
 800ab56:	6078      	str	r0, [r7, #4]
 800ab58:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 800ab5a:	683b      	ldr	r3, [r7, #0]
 800ab5c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 800ab5e:	2310      	movs	r3, #16
 800ab60:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800ab62:	f44f 7380 	mov.w	r3, #256	; 0x100
 800ab66:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800ab68:	2300      	movs	r3, #0
 800ab6a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800ab6c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800ab70:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800ab72:	f107 0308 	add.w	r3, r7, #8
 800ab76:	4619      	mov	r1, r3
 800ab78:	6878      	ldr	r0, [r7, #4]
 800ab7a:	f7ff ff73 	bl	800aa64 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SET_BLOCKLEN, SDMMC_CMDTIMEOUT);
 800ab7e:	f241 3288 	movw	r2, #5000	; 0x1388
 800ab82:	2110      	movs	r1, #16
 800ab84:	6878      	ldr	r0, [r7, #4]
 800ab86:	f000 fa43 	bl	800b010 <SDMMC_GetCmdResp1>
 800ab8a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800ab8c:	69fb      	ldr	r3, [r7, #28]
}
 800ab8e:	4618      	mov	r0, r3
 800ab90:	3720      	adds	r7, #32
 800ab92:	46bd      	mov	sp, r7
 800ab94:	bd80      	pop	{r7, pc}

0800ab96 <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 800ab96:	b580      	push	{r7, lr}
 800ab98:	b088      	sub	sp, #32
 800ab9a:	af00      	add	r7, sp, #0
 800ab9c:	6078      	str	r0, [r7, #4]
 800ab9e:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800aba0:	683b      	ldr	r3, [r7, #0]
 800aba2:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 800aba4:	2311      	movs	r3, #17
 800aba6:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800aba8:	f44f 7380 	mov.w	r3, #256	; 0x100
 800abac:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800abae:	2300      	movs	r3, #0
 800abb0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800abb2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800abb6:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800abb8:	f107 0308 	add.w	r3, r7, #8
 800abbc:	4619      	mov	r1, r3
 800abbe:	6878      	ldr	r0, [r7, #4]
 800abc0:	f7ff ff50 	bl	800aa64 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 800abc4:	f241 3288 	movw	r2, #5000	; 0x1388
 800abc8:	2111      	movs	r1, #17
 800abca:	6878      	ldr	r0, [r7, #4]
 800abcc:	f000 fa20 	bl	800b010 <SDMMC_GetCmdResp1>
 800abd0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800abd2:	69fb      	ldr	r3, [r7, #28]
}
 800abd4:	4618      	mov	r0, r3
 800abd6:	3720      	adds	r7, #32
 800abd8:	46bd      	mov	sp, r7
 800abda:	bd80      	pop	{r7, pc}

0800abdc <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 800abdc:	b580      	push	{r7, lr}
 800abde:	b088      	sub	sp, #32
 800abe0:	af00      	add	r7, sp, #0
 800abe2:	6078      	str	r0, [r7, #4]
 800abe4:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800abe6:	683b      	ldr	r3, [r7, #0]
 800abe8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 800abea:	2312      	movs	r3, #18
 800abec:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800abee:	f44f 7380 	mov.w	r3, #256	; 0x100
 800abf2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800abf4:	2300      	movs	r3, #0
 800abf6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800abf8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800abfc:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800abfe:	f107 0308 	add.w	r3, r7, #8
 800ac02:	4619      	mov	r1, r3
 800ac04:	6878      	ldr	r0, [r7, #4]
 800ac06:	f7ff ff2d 	bl	800aa64 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 800ac0a:	f241 3288 	movw	r2, #5000	; 0x1388
 800ac0e:	2112      	movs	r1, #18
 800ac10:	6878      	ldr	r0, [r7, #4]
 800ac12:	f000 f9fd 	bl	800b010 <SDMMC_GetCmdResp1>
 800ac16:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800ac18:	69fb      	ldr	r3, [r7, #28]
}
 800ac1a:	4618      	mov	r0, r3
 800ac1c:	3720      	adds	r7, #32
 800ac1e:	46bd      	mov	sp, r7
 800ac20:	bd80      	pop	{r7, pc}

0800ac22 <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 800ac22:	b580      	push	{r7, lr}
 800ac24:	b088      	sub	sp, #32
 800ac26:	af00      	add	r7, sp, #0
 800ac28:	6078      	str	r0, [r7, #4]
 800ac2a:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800ac2c:	683b      	ldr	r3, [r7, #0]
 800ac2e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 800ac30:	2318      	movs	r3, #24
 800ac32:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800ac34:	f44f 7380 	mov.w	r3, #256	; 0x100
 800ac38:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800ac3a:	2300      	movs	r3, #0
 800ac3c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800ac3e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800ac42:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800ac44:	f107 0308 	add.w	r3, r7, #8
 800ac48:	4619      	mov	r1, r3
 800ac4a:	6878      	ldr	r0, [r7, #4]
 800ac4c:	f7ff ff0a 	bl	800aa64 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 800ac50:	f241 3288 	movw	r2, #5000	; 0x1388
 800ac54:	2118      	movs	r1, #24
 800ac56:	6878      	ldr	r0, [r7, #4]
 800ac58:	f000 f9da 	bl	800b010 <SDMMC_GetCmdResp1>
 800ac5c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800ac5e:	69fb      	ldr	r3, [r7, #28]
}
 800ac60:	4618      	mov	r0, r3
 800ac62:	3720      	adds	r7, #32
 800ac64:	46bd      	mov	sp, r7
 800ac66:	bd80      	pop	{r7, pc}

0800ac68 <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 800ac68:	b580      	push	{r7, lr}
 800ac6a:	b088      	sub	sp, #32
 800ac6c:	af00      	add	r7, sp, #0
 800ac6e:	6078      	str	r0, [r7, #4]
 800ac70:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800ac72:	683b      	ldr	r3, [r7, #0]
 800ac74:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 800ac76:	2319      	movs	r3, #25
 800ac78:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800ac7a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800ac7e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800ac80:	2300      	movs	r3, #0
 800ac82:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800ac84:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800ac88:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800ac8a:	f107 0308 	add.w	r3, r7, #8
 800ac8e:	4619      	mov	r1, r3
 800ac90:	6878      	ldr	r0, [r7, #4]
 800ac92:	f7ff fee7 	bl	800aa64 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 800ac96:	f241 3288 	movw	r2, #5000	; 0x1388
 800ac9a:	2119      	movs	r1, #25
 800ac9c:	6878      	ldr	r0, [r7, #4]
 800ac9e:	f000 f9b7 	bl	800b010 <SDMMC_GetCmdResp1>
 800aca2:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800aca4:	69fb      	ldr	r3, [r7, #28]
}
 800aca6:	4618      	mov	r0, r3
 800aca8:	3720      	adds	r7, #32
 800acaa:	46bd      	mov	sp, r7
 800acac:	bd80      	pop	{r7, pc}

0800acae <SDMMC_CmdSelDesel>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  addr: Address of the card to be selected
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDMMC_TypeDef *SDMMCx, uint32_t Addr)
{
 800acae:	b580      	push	{r7, lr}
 800acb0:	b088      	sub	sp, #32
 800acb2:	af00      	add	r7, sp, #0
 800acb4:	6078      	str	r0, [r7, #4]
 800acb6:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 800acb8:	683b      	ldr	r3, [r7, #0]
 800acba:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 800acbc:	2307      	movs	r3, #7
 800acbe:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800acc0:	f44f 7380 	mov.w	r3, #256	; 0x100
 800acc4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800acc6:	2300      	movs	r3, #0
 800acc8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800acca:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800acce:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800acd0:	f107 0308 	add.w	r3, r7, #8
 800acd4:	4619      	mov	r1, r3
 800acd6:	6878      	ldr	r0, [r7, #4]
 800acd8:	f7ff fec4 	bl	800aa64 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEL_DESEL_CARD, SDMMC_CMDTIMEOUT);
 800acdc:	f241 3288 	movw	r2, #5000	; 0x1388
 800ace0:	2107      	movs	r1, #7
 800ace2:	6878      	ldr	r0, [r7, #4]
 800ace4:	f000 f994 	bl	800b010 <SDMMC_GetCmdResp1>
 800ace8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800acea:	69fb      	ldr	r3, [r7, #28]
}
 800acec:	4618      	mov	r0, r3
 800acee:	3720      	adds	r7, #32
 800acf0:	46bd      	mov	sp, r7
 800acf2:	bd80      	pop	{r7, pc}

0800acf4 <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDMMC_TypeDef *SDMMCx)
{
 800acf4:	b580      	push	{r7, lr}
 800acf6:	b088      	sub	sp, #32
 800acf8:	af00      	add	r7, sp, #0
 800acfa:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0U;
 800acfc:	2300      	movs	r3, #0
 800acfe:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 800ad00:	2300      	movs	r3, #0
 800ad02:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_NO;
 800ad04:	2300      	movs	r3, #0
 800ad06:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800ad08:	2300      	movs	r3, #0
 800ad0a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800ad0c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800ad10:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800ad12:	f107 0308 	add.w	r3, r7, #8
 800ad16:	4619      	mov	r1, r3
 800ad18:	6878      	ldr	r0, [r7, #4]
 800ad1a:	f7ff fea3 	bl	800aa64 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDMMCx);
 800ad1e:	6878      	ldr	r0, [r7, #4]
 800ad20:	f000 fbb8 	bl	800b494 <SDMMC_GetCmdError>
 800ad24:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800ad26:	69fb      	ldr	r3, [r7, #28]
}
 800ad28:	4618      	mov	r0, r3
 800ad2a:	3720      	adds	r7, #32
 800ad2c:	46bd      	mov	sp, r7
 800ad2e:	bd80      	pop	{r7, pc}

0800ad30 <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDMMC_TypeDef *SDMMCx)
{
 800ad30:	b580      	push	{r7, lr}
 800ad32:	b088      	sub	sp, #32
 800ad34:	af00      	add	r7, sp, #0
 800ad36:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 800ad38:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 800ad3c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 800ad3e:	2308      	movs	r3, #8
 800ad40:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800ad42:	f44f 7380 	mov.w	r3, #256	; 0x100
 800ad46:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800ad48:	2300      	movs	r3, #0
 800ad4a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800ad4c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800ad50:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800ad52:	f107 0308 	add.w	r3, r7, #8
 800ad56:	4619      	mov	r1, r3
 800ad58:	6878      	ldr	r0, [r7, #4]
 800ad5a:	f7ff fe83 	bl	800aa64 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDMMCx);
 800ad5e:	6878      	ldr	r0, [r7, #4]
 800ad60:	f000 fb4a 	bl	800b3f8 <SDMMC_GetCmdResp7>
 800ad64:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800ad66:	69fb      	ldr	r3, [r7, #28]
}
 800ad68:	4618      	mov	r0, r3
 800ad6a:	3720      	adds	r7, #32
 800ad6c:	46bd      	mov	sp, r7
 800ad6e:	bd80      	pop	{r7, pc}

0800ad70 <SDMMC_CmdAppCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800ad70:	b580      	push	{r7, lr}
 800ad72:	b088      	sub	sp, #32
 800ad74:	af00      	add	r7, sp, #0
 800ad76:	6078      	str	r0, [r7, #4]
 800ad78:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 800ad7a:	683b      	ldr	r3, [r7, #0]
 800ad7c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 800ad7e:	2337      	movs	r3, #55	; 0x37
 800ad80:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800ad82:	f44f 7380 	mov.w	r3, #256	; 0x100
 800ad86:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800ad88:	2300      	movs	r3, #0
 800ad8a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800ad8c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800ad90:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800ad92:	f107 0308 	add.w	r3, r7, #8
 800ad96:	4619      	mov	r1, r3
 800ad98:	6878      	ldr	r0, [r7, #4]
 800ad9a:	f7ff fe63 	bl	800aa64 <SDMMC_SendCommand>

  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_CMD, SDMMC_CMDTIMEOUT);
 800ad9e:	f241 3288 	movw	r2, #5000	; 0x1388
 800ada2:	2137      	movs	r1, #55	; 0x37
 800ada4:	6878      	ldr	r0, [r7, #4]
 800ada6:	f000 f933 	bl	800b010 <SDMMC_GetCmdResp1>
 800adaa:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800adac:	69fb      	ldr	r3, [r7, #28]
}
 800adae:	4618      	mov	r0, r3
 800adb0:	3720      	adds	r7, #32
 800adb2:	46bd      	mov	sp, r7
 800adb4:	bd80      	pop	{r7, pc}

0800adb6 <SDMMC_CmdAppOperCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800adb6:	b580      	push	{r7, lr}
 800adb8:	b088      	sub	sp, #32
 800adba:	af00      	add	r7, sp, #0
 800adbc:	6078      	str	r0, [r7, #4]
 800adbe:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = Argument;
 800adc0:	683b      	ldr	r3, [r7, #0]
 800adc2:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 800adc4:	2329      	movs	r3, #41	; 0x29
 800adc6:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800adc8:	f44f 7380 	mov.w	r3, #256	; 0x100
 800adcc:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800adce:	2300      	movs	r3, #0
 800add0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800add2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800add6:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800add8:	f107 0308 	add.w	r3, r7, #8
 800addc:	4619      	mov	r1, r3
 800adde:	6878      	ldr	r0, [r7, #4]
 800ade0:	f7ff fe40 	bl	800aa64 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDMMCx);
 800ade4:	6878      	ldr	r0, [r7, #4]
 800ade6:	f000 fa4f 	bl	800b288 <SDMMC_GetCmdResp3>
 800adea:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800adec:	69fb      	ldr	r3, [r7, #28]
}
 800adee:	4618      	mov	r0, r3
 800adf0:	3720      	adds	r7, #32
 800adf2:	46bd      	mov	sp, r7
 800adf4:	bd80      	pop	{r7, pc}

0800adf6 <SDMMC_CmdBusWidth>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  BusWidth: BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDMMC_TypeDef *SDMMCx, uint32_t BusWidth)
{
 800adf6:	b580      	push	{r7, lr}
 800adf8:	b088      	sub	sp, #32
 800adfa:	af00      	add	r7, sp, #0
 800adfc:	6078      	str	r0, [r7, #4]
 800adfe:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 800ae00:	683b      	ldr	r3, [r7, #0]
 800ae02:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 800ae04:	2306      	movs	r3, #6
 800ae06:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800ae08:	f44f 7380 	mov.w	r3, #256	; 0x100
 800ae0c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800ae0e:	2300      	movs	r3, #0
 800ae10:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800ae12:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800ae16:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800ae18:	f107 0308 	add.w	r3, r7, #8
 800ae1c:	4619      	mov	r1, r3
 800ae1e:	6878      	ldr	r0, [r7, #4]
 800ae20:	f7ff fe20 	bl	800aa64 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDMMC_CMDTIMEOUT);
 800ae24:	f241 3288 	movw	r2, #5000	; 0x1388
 800ae28:	2106      	movs	r1, #6
 800ae2a:	6878      	ldr	r0, [r7, #4]
 800ae2c:	f000 f8f0 	bl	800b010 <SDMMC_GetCmdResp1>
 800ae30:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800ae32:	69fb      	ldr	r3, [r7, #28]
}
 800ae34:	4618      	mov	r0, r3
 800ae36:	3720      	adds	r7, #32
 800ae38:	46bd      	mov	sp, r7
 800ae3a:	bd80      	pop	{r7, pc}

0800ae3c <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDMMC_TypeDef *SDMMCx)
{
 800ae3c:	b580      	push	{r7, lr}
 800ae3e:	b088      	sub	sp, #32
 800ae40:	af00      	add	r7, sp, #0
 800ae42:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 800ae44:	2300      	movs	r3, #0
 800ae46:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 800ae48:	2333      	movs	r3, #51	; 0x33
 800ae4a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800ae4c:	f44f 7380 	mov.w	r3, #256	; 0x100
 800ae50:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800ae52:	2300      	movs	r3, #0
 800ae54:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800ae56:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800ae5a:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800ae5c:	f107 0308 	add.w	r3, r7, #8
 800ae60:	4619      	mov	r1, r3
 800ae62:	6878      	ldr	r0, [r7, #4]
 800ae64:	f7ff fdfe 	bl	800aa64 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_SEND_SCR, SDMMC_CMDTIMEOUT);
 800ae68:	f241 3288 	movw	r2, #5000	; 0x1388
 800ae6c:	2133      	movs	r1, #51	; 0x33
 800ae6e:	6878      	ldr	r0, [r7, #4]
 800ae70:	f000 f8ce 	bl	800b010 <SDMMC_GetCmdResp1>
 800ae74:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800ae76:	69fb      	ldr	r3, [r7, #28]
}
 800ae78:	4618      	mov	r0, r3
 800ae7a:	3720      	adds	r7, #32
 800ae7c:	46bd      	mov	sp, r7
 800ae7e:	bd80      	pop	{r7, pc}

0800ae80 <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDMMC_TypeDef *SDMMCx)
{
 800ae80:	b580      	push	{r7, lr}
 800ae82:	b088      	sub	sp, #32
 800ae84:	af00      	add	r7, sp, #0
 800ae86:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 800ae88:	2300      	movs	r3, #0
 800ae8a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 800ae8c:	2302      	movs	r3, #2
 800ae8e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 800ae90:	f44f 7340 	mov.w	r3, #768	; 0x300
 800ae94:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800ae96:	2300      	movs	r3, #0
 800ae98:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800ae9a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800ae9e:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800aea0:	f107 0308 	add.w	r3, r7, #8
 800aea4:	4619      	mov	r1, r3
 800aea6:	6878      	ldr	r0, [r7, #4]
 800aea8:	f7ff fddc 	bl	800aa64 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 800aeac:	6878      	ldr	r0, [r7, #4]
 800aeae:	f000 f9a1 	bl	800b1f4 <SDMMC_GetCmdResp2>
 800aeb2:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800aeb4:	69fb      	ldr	r3, [r7, #28]
}
 800aeb6:	4618      	mov	r0, r3
 800aeb8:	3720      	adds	r7, #32
 800aeba:	46bd      	mov	sp, r7
 800aebc:	bd80      	pop	{r7, pc}

0800aebe <SDMMC_CmdSendCSD>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800aebe:	b580      	push	{r7, lr}
 800aec0:	b088      	sub	sp, #32
 800aec2:	af00      	add	r7, sp, #0
 800aec4:	6078      	str	r0, [r7, #4]
 800aec6:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 800aec8:	683b      	ldr	r3, [r7, #0]
 800aeca:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 800aecc:	2309      	movs	r3, #9
 800aece:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 800aed0:	f44f 7340 	mov.w	r3, #768	; 0x300
 800aed4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800aed6:	2300      	movs	r3, #0
 800aed8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800aeda:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800aede:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800aee0:	f107 0308 	add.w	r3, r7, #8
 800aee4:	4619      	mov	r1, r3
 800aee6:	6878      	ldr	r0, [r7, #4]
 800aee8:	f7ff fdbc 	bl	800aa64 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 800aeec:	6878      	ldr	r0, [r7, #4]
 800aeee:	f000 f981 	bl	800b1f4 <SDMMC_GetCmdResp2>
 800aef2:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800aef4:	69fb      	ldr	r3, [r7, #28]
}
 800aef6:	4618      	mov	r0, r3
 800aef8:	3720      	adds	r7, #32
 800aefa:	46bd      	mov	sp, r7
 800aefc:	bd80      	pop	{r7, pc}

0800aefe <SDMMC_CmdSetRelAdd>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  pRCA: Card RCA
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDMMC_TypeDef *SDMMCx, uint16_t *pRCA)
{
 800aefe:	b580      	push	{r7, lr}
 800af00:	b088      	sub	sp, #32
 800af02:	af00      	add	r7, sp, #0
 800af04:	6078      	str	r0, [r7, #4]
 800af06:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 800af08:	2300      	movs	r3, #0
 800af0a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 800af0c:	2303      	movs	r3, #3
 800af0e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800af10:	f44f 7380 	mov.w	r3, #256	; 0x100
 800af14:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800af16:	2300      	movs	r3, #0
 800af18:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800af1a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800af1e:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800af20:	f107 0308 	add.w	r3, r7, #8
 800af24:	4619      	mov	r1, r3
 800af26:	6878      	ldr	r0, [r7, #4]
 800af28:	f7ff fd9c 	bl	800aa64 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDMMCx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 800af2c:	683a      	ldr	r2, [r7, #0]
 800af2e:	2103      	movs	r1, #3
 800af30:	6878      	ldr	r0, [r7, #4]
 800af32:	f000 f9e9 	bl	800b308 <SDMMC_GetCmdResp6>
 800af36:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800af38:	69fb      	ldr	r3, [r7, #28]
}
 800af3a:	4618      	mov	r0, r3
 800af3c:	3720      	adds	r7, #32
 800af3e:	46bd      	mov	sp, r7
 800af40:	bd80      	pop	{r7, pc}

0800af42 <SDMMC_CmdSendStatus>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800af42:	b580      	push	{r7, lr}
 800af44:	b088      	sub	sp, #32
 800af46:	af00      	add	r7, sp, #0
 800af48:	6078      	str	r0, [r7, #4]
 800af4a:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = Argument;
 800af4c:	683b      	ldr	r3, [r7, #0]
 800af4e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 800af50:	230d      	movs	r3, #13
 800af52:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800af54:	f44f 7380 	mov.w	r3, #256	; 0x100
 800af58:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800af5a:	2300      	movs	r3, #0
 800af5c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800af5e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800af62:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800af64:	f107 0308 	add.w	r3, r7, #8
 800af68:	4619      	mov	r1, r3
 800af6a:	6878      	ldr	r0, [r7, #4]
 800af6c:	f7ff fd7a 	bl	800aa64 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEND_STATUS, SDMMC_CMDTIMEOUT);
 800af70:	f241 3288 	movw	r2, #5000	; 0x1388
 800af74:	210d      	movs	r1, #13
 800af76:	6878      	ldr	r0, [r7, #4]
 800af78:	f000 f84a 	bl	800b010 <SDMMC_GetCmdResp1>
 800af7c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800af7e:	69fb      	ldr	r3, [r7, #28]
}
 800af80:	4618      	mov	r0, r3
 800af82:	3720      	adds	r7, #32
 800af84:	46bd      	mov	sp, r7
 800af86:	bd80      	pop	{r7, pc}

0800af88 <SDMMC_CmdStatusRegister>:
  * @brief  Send the Status register command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdStatusRegister(SDMMC_TypeDef *SDMMCx)
{
 800af88:	b580      	push	{r7, lr}
 800af8a:	b088      	sub	sp, #32
 800af8c:	af00      	add	r7, sp, #0
 800af8e:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0U;
 800af90:	2300      	movs	r3, #0
 800af92:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_STATUS;
 800af94:	230d      	movs	r3, #13
 800af96:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800af98:	f44f 7380 	mov.w	r3, #256	; 0x100
 800af9c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800af9e:	2300      	movs	r3, #0
 800afa0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800afa2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800afa6:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800afa8:	f107 0308 	add.w	r3, r7, #8
 800afac:	4619      	mov	r1, r3
 800afae:	6878      	ldr	r0, [r7, #4]
 800afb0:	f7ff fd58 	bl	800aa64 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_STATUS, SDMMC_CMDTIMEOUT);
 800afb4:	f241 3288 	movw	r2, #5000	; 0x1388
 800afb8:	210d      	movs	r1, #13
 800afba:	6878      	ldr	r0, [r7, #4]
 800afbc:	f000 f828 	bl	800b010 <SDMMC_GetCmdResp1>
 800afc0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800afc2:	69fb      	ldr	r3, [r7, #28]
}
 800afc4:	4618      	mov	r0, r3
 800afc6:	3720      	adds	r7, #32
 800afc8:	46bd      	mov	sp, r7
 800afca:	bd80      	pop	{r7, pc}

0800afcc <SDMMC_CmdVoltageSwitch>:
  *         condition register (OCR)
  * @param  None
  * @retval HAL status
  */
uint32_t SDMMC_CmdVoltageSwitch(SDMMC_TypeDef *SDMMCx)
{
 800afcc:	b580      	push	{r7, lr}
 800afce:	b088      	sub	sp, #32
 800afd0:	af00      	add	r7, sp, #0
 800afd2:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0x00000000;
 800afd4:	2300      	movs	r3, #0
 800afd6:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_VOLTAGE_SWITCH;
 800afd8:	230b      	movs	r3, #11
 800afda:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800afdc:	f44f 7380 	mov.w	r3, #256	; 0x100
 800afe0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800afe2:	2300      	movs	r3, #0
 800afe4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800afe6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800afea:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800afec:	f107 0308 	add.w	r3, r7, #8
 800aff0:	4619      	mov	r1, r3
 800aff2:	6878      	ldr	r0, [r7, #4]
 800aff4:	f7ff fd36 	bl	800aa64 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_VOLTAGE_SWITCH, SDMMC_CMDTIMEOUT);
 800aff8:	f241 3288 	movw	r2, #5000	; 0x1388
 800affc:	210b      	movs	r1, #11
 800affe:	6878      	ldr	r0, [r7, #4]
 800b000:	f000 f806 	bl	800b010 <SDMMC_GetCmdResp1>
 800b004:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b006:	69fb      	ldr	r3, [r7, #28]
}
 800b008:	4618      	mov	r0, r3
 800b00a:	3720      	adds	r7, #32
 800b00c:	46bd      	mov	sp, r7
 800b00e:	bd80      	pop	{r7, pc}

0800b010 <SDMMC_GetCmdResp1>:
  * @param  hsd: SD handle
  * @param  SD_CMD: The sent command index
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp1(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint32_t Timeout)
{
 800b010:	b580      	push	{r7, lr}
 800b012:	b088      	sub	sp, #32
 800b014:	af00      	add	r7, sp, #0
 800b016:	60f8      	str	r0, [r7, #12]
 800b018:	460b      	mov	r3, r1
 800b01a:	607a      	str	r2, [r7, #4]
 800b01c:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 800b01e:	4b70      	ldr	r3, [pc, #448]	; (800b1e0 <SDMMC_GetCmdResp1+0x1d0>)
 800b020:	681b      	ldr	r3, [r3, #0]
 800b022:	4a70      	ldr	r2, [pc, #448]	; (800b1e4 <SDMMC_GetCmdResp1+0x1d4>)
 800b024:	fba2 2303 	umull	r2, r3, r2, r3
 800b028:	0a5a      	lsrs	r2, r3, #9
 800b02a:	687b      	ldr	r3, [r7, #4]
 800b02c:	fb02 f303 	mul.w	r3, r2, r3
 800b030:	61fb      	str	r3, [r7, #28]

  do
  {
    if (count-- == 0U)
 800b032:	69fb      	ldr	r3, [r7, #28]
 800b034:	1e5a      	subs	r2, r3, #1
 800b036:	61fa      	str	r2, [r7, #28]
 800b038:	2b00      	cmp	r3, #0
 800b03a:	d102      	bne.n	800b042 <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 800b03c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800b040:	e0c9      	b.n	800b1d6 <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDMMCx->STA;
 800b042:	68fb      	ldr	r3, [r7, #12]
 800b044:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b046:	61bb      	str	r3, [r7, #24]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT |
 800b048:	69ba      	ldr	r2, [r7, #24]
 800b04a:	4b67      	ldr	r3, [pc, #412]	; (800b1e8 <SDMMC_GetCmdResp1+0x1d8>)
 800b04c:	4013      	ands	r3, r2
                        SDMMC_FLAG_BUSYD0END)) == 0U) || ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 800b04e:	2b00      	cmp	r3, #0
 800b050:	d0ef      	beq.n	800b032 <SDMMC_GetCmdResp1+0x22>
 800b052:	69bb      	ldr	r3, [r7, #24]
 800b054:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800b058:	2b00      	cmp	r3, #0
 800b05a:	d1ea      	bne.n	800b032 <SDMMC_GetCmdResp1+0x22>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800b05c:	68fb      	ldr	r3, [r7, #12]
 800b05e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b060:	f003 0304 	and.w	r3, r3, #4
 800b064:	2b00      	cmp	r3, #0
 800b066:	d004      	beq.n	800b072 <SDMMC_GetCmdResp1+0x62>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800b068:	68fb      	ldr	r3, [r7, #12]
 800b06a:	2204      	movs	r2, #4
 800b06c:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800b06e:	2304      	movs	r3, #4
 800b070:	e0b1      	b.n	800b1d6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800b072:	68fb      	ldr	r3, [r7, #12]
 800b074:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b076:	f003 0301 	and.w	r3, r3, #1
 800b07a:	2b00      	cmp	r3, #0
 800b07c:	d004      	beq.n	800b088 <SDMMC_GetCmdResp1+0x78>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800b07e:	68fb      	ldr	r3, [r7, #12]
 800b080:	2201      	movs	r2, #1
 800b082:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 800b084:	2301      	movs	r3, #1
 800b086:	e0a6      	b.n	800b1d6 <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800b088:	68fb      	ldr	r3, [r7, #12]
 800b08a:	4a58      	ldr	r2, [pc, #352]	; (800b1ec <SDMMC_GetCmdResp1+0x1dc>)
 800b08c:	639a      	str	r2, [r3, #56]	; 0x38

  /* Check response received is of desired command */
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800b08e:	68f8      	ldr	r0, [r7, #12]
 800b090:	f7ff fd12 	bl	800aab8 <SDMMC_GetCommandResponse>
 800b094:	4603      	mov	r3, r0
 800b096:	461a      	mov	r2, r3
 800b098:	7afb      	ldrb	r3, [r7, #11]
 800b09a:	4293      	cmp	r3, r2
 800b09c:	d001      	beq.n	800b0a2 <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800b09e:	2301      	movs	r3, #1
 800b0a0:	e099      	b.n	800b1d6 <SDMMC_GetCmdResp1+0x1c6>
  }

  /* We have received response, retrieve it for analysis  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 800b0a2:	2100      	movs	r1, #0
 800b0a4:	68f8      	ldr	r0, [r7, #12]
 800b0a6:	f7ff fd14 	bl	800aad2 <SDMMC_GetResponse>
 800b0aa:	6178      	str	r0, [r7, #20]

  if ((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 800b0ac:	697a      	ldr	r2, [r7, #20]
 800b0ae:	4b50      	ldr	r3, [pc, #320]	; (800b1f0 <SDMMC_GetCmdResp1+0x1e0>)
 800b0b0:	4013      	ands	r3, r2
 800b0b2:	2b00      	cmp	r3, #0
 800b0b4:	d101      	bne.n	800b0ba <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 800b0b6:	2300      	movs	r3, #0
 800b0b8:	e08d      	b.n	800b1d6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 800b0ba:	697b      	ldr	r3, [r7, #20]
 800b0bc:	2b00      	cmp	r3, #0
 800b0be:	da02      	bge.n	800b0c6 <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 800b0c0:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800b0c4:	e087      	b.n	800b1d6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 800b0c6:	697b      	ldr	r3, [r7, #20]
 800b0c8:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800b0cc:	2b00      	cmp	r3, #0
 800b0ce:	d001      	beq.n	800b0d4 <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 800b0d0:	2340      	movs	r3, #64	; 0x40
 800b0d2:	e080      	b.n	800b1d6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 800b0d4:	697b      	ldr	r3, [r7, #20]
 800b0d6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800b0da:	2b00      	cmp	r3, #0
 800b0dc:	d001      	beq.n	800b0e2 <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 800b0de:	2380      	movs	r3, #128	; 0x80
 800b0e0:	e079      	b.n	800b1d6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 800b0e2:	697b      	ldr	r3, [r7, #20]
 800b0e4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800b0e8:	2b00      	cmp	r3, #0
 800b0ea:	d002      	beq.n	800b0f2 <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 800b0ec:	f44f 7380 	mov.w	r3, #256	; 0x100
 800b0f0:	e071      	b.n	800b1d6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 800b0f2:	697b      	ldr	r3, [r7, #20]
 800b0f4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800b0f8:	2b00      	cmp	r3, #0
 800b0fa:	d002      	beq.n	800b102 <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 800b0fc:	f44f 7300 	mov.w	r3, #512	; 0x200
 800b100:	e069      	b.n	800b1d6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 800b102:	697b      	ldr	r3, [r7, #20]
 800b104:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800b108:	2b00      	cmp	r3, #0
 800b10a:	d002      	beq.n	800b112 <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 800b10c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b110:	e061      	b.n	800b1d6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 800b112:	697b      	ldr	r3, [r7, #20]
 800b114:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800b118:	2b00      	cmp	r3, #0
 800b11a:	d002      	beq.n	800b122 <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 800b11c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800b120:	e059      	b.n	800b1d6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 800b122:	697b      	ldr	r3, [r7, #20]
 800b124:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800b128:	2b00      	cmp	r3, #0
 800b12a:	d002      	beq.n	800b132 <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800b12c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800b130:	e051      	b.n	800b1d6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 800b132:	697b      	ldr	r3, [r7, #20]
 800b134:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800b138:	2b00      	cmp	r3, #0
 800b13a:	d002      	beq.n	800b142 <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800b13c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800b140:	e049      	b.n	800b1d6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 800b142:	697b      	ldr	r3, [r7, #20]
 800b144:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800b148:	2b00      	cmp	r3, #0
 800b14a:	d002      	beq.n	800b152 <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 800b14c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800b150:	e041      	b.n	800b1d6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 800b152:	697b      	ldr	r3, [r7, #20]
 800b154:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800b158:	2b00      	cmp	r3, #0
 800b15a:	d002      	beq.n	800b162 <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 800b15c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800b160:	e039      	b.n	800b1d6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 800b162:	697b      	ldr	r3, [r7, #20]
 800b164:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800b168:	2b00      	cmp	r3, #0
 800b16a:	d002      	beq.n	800b172 <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 800b16c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800b170:	e031      	b.n	800b1d6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 800b172:	697b      	ldr	r3, [r7, #20]
 800b174:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b178:	2b00      	cmp	r3, #0
 800b17a:	d002      	beq.n	800b182 <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 800b17c:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800b180:	e029      	b.n	800b1d6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 800b182:	697b      	ldr	r3, [r7, #20]
 800b184:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800b188:	2b00      	cmp	r3, #0
 800b18a:	d002      	beq.n	800b192 <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 800b18c:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800b190:	e021      	b.n	800b1d6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 800b192:	697b      	ldr	r3, [r7, #20]
 800b194:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800b198:	2b00      	cmp	r3, #0
 800b19a:	d002      	beq.n	800b1a2 <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 800b19c:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800b1a0:	e019      	b.n	800b1d6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 800b1a2:	697b      	ldr	r3, [r7, #20]
 800b1a4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800b1a8:	2b00      	cmp	r3, #0
 800b1aa:	d002      	beq.n	800b1b2 <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 800b1ac:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800b1b0:	e011      	b.n	800b1d6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 800b1b2:	697b      	ldr	r3, [r7, #20]
 800b1b4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800b1b8:	2b00      	cmp	r3, #0
 800b1ba:	d002      	beq.n	800b1c2 <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 800b1bc:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800b1c0:	e009      	b.n	800b1d6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 800b1c2:	697b      	ldr	r3, [r7, #20]
 800b1c4:	f003 0308 	and.w	r3, r3, #8
 800b1c8:	2b00      	cmp	r3, #0
 800b1ca:	d002      	beq.n	800b1d2 <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 800b1cc:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 800b1d0:	e001      	b.n	800b1d6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800b1d2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800b1d6:	4618      	mov	r0, r3
 800b1d8:	3720      	adds	r7, #32
 800b1da:	46bd      	mov	sp, r7
 800b1dc:	bd80      	pop	{r7, pc}
 800b1de:	bf00      	nop
 800b1e0:	20000000 	.word	0x20000000
 800b1e4:	10624dd3 	.word	0x10624dd3
 800b1e8:	00200045 	.word	0x00200045
 800b1ec:	002000c5 	.word	0x002000c5
 800b1f0:	fdffe008 	.word	0xfdffe008

0800b1f4 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp2(SDMMC_TypeDef *SDMMCx)
{
 800b1f4:	b480      	push	{r7}
 800b1f6:	b085      	sub	sp, #20
 800b1f8:	af00      	add	r7, sp, #0
 800b1fa:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800b1fc:	4b1f      	ldr	r3, [pc, #124]	; (800b27c <SDMMC_GetCmdResp2+0x88>)
 800b1fe:	681b      	ldr	r3, [r3, #0]
 800b200:	4a1f      	ldr	r2, [pc, #124]	; (800b280 <SDMMC_GetCmdResp2+0x8c>)
 800b202:	fba2 2303 	umull	r2, r3, r2, r3
 800b206:	0a5b      	lsrs	r3, r3, #9
 800b208:	f241 3288 	movw	r2, #5000	; 0x1388
 800b20c:	fb02 f303 	mul.w	r3, r2, r3
 800b210:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 800b212:	68fb      	ldr	r3, [r7, #12]
 800b214:	1e5a      	subs	r2, r3, #1
 800b216:	60fa      	str	r2, [r7, #12]
 800b218:	2b00      	cmp	r3, #0
 800b21a:	d102      	bne.n	800b222 <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800b21c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800b220:	e026      	b.n	800b270 <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDMMCx->STA;
 800b222:	687b      	ldr	r3, [r7, #4]
 800b224:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b226:	60bb      	str	r3, [r7, #8]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800b228:	68bb      	ldr	r3, [r7, #8]
 800b22a:	f003 0345 	and.w	r3, r3, #69	; 0x45
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 800b22e:	2b00      	cmp	r3, #0
 800b230:	d0ef      	beq.n	800b212 <SDMMC_GetCmdResp2+0x1e>
 800b232:	68bb      	ldr	r3, [r7, #8]
 800b234:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800b238:	2b00      	cmp	r3, #0
 800b23a:	d1ea      	bne.n	800b212 <SDMMC_GetCmdResp2+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800b23c:	687b      	ldr	r3, [r7, #4]
 800b23e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b240:	f003 0304 	and.w	r3, r3, #4
 800b244:	2b00      	cmp	r3, #0
 800b246:	d004      	beq.n	800b252 <SDMMC_GetCmdResp2+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800b248:	687b      	ldr	r3, [r7, #4]
 800b24a:	2204      	movs	r2, #4
 800b24c:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800b24e:	2304      	movs	r3, #4
 800b250:	e00e      	b.n	800b270 <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800b252:	687b      	ldr	r3, [r7, #4]
 800b254:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b256:	f003 0301 	and.w	r3, r3, #1
 800b25a:	2b00      	cmp	r3, #0
 800b25c:	d004      	beq.n	800b268 <SDMMC_GetCmdResp2+0x74>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800b25e:	687b      	ldr	r3, [r7, #4]
 800b260:	2201      	movs	r2, #1
 800b262:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 800b264:	2301      	movs	r3, #1
 800b266:	e003      	b.n	800b270 <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800b268:	687b      	ldr	r3, [r7, #4]
 800b26a:	4a06      	ldr	r2, [pc, #24]	; (800b284 <SDMMC_GetCmdResp2+0x90>)
 800b26c:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 800b26e:	2300      	movs	r3, #0
}
 800b270:	4618      	mov	r0, r3
 800b272:	3714      	adds	r7, #20
 800b274:	46bd      	mov	sp, r7
 800b276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b27a:	4770      	bx	lr
 800b27c:	20000000 	.word	0x20000000
 800b280:	10624dd3 	.word	0x10624dd3
 800b284:	002000c5 	.word	0x002000c5

0800b288 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp3(SDMMC_TypeDef *SDMMCx)
{
 800b288:	b480      	push	{r7}
 800b28a:	b085      	sub	sp, #20
 800b28c:	af00      	add	r7, sp, #0
 800b28e:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800b290:	4b1a      	ldr	r3, [pc, #104]	; (800b2fc <SDMMC_GetCmdResp3+0x74>)
 800b292:	681b      	ldr	r3, [r3, #0]
 800b294:	4a1a      	ldr	r2, [pc, #104]	; (800b300 <SDMMC_GetCmdResp3+0x78>)
 800b296:	fba2 2303 	umull	r2, r3, r2, r3
 800b29a:	0a5b      	lsrs	r3, r3, #9
 800b29c:	f241 3288 	movw	r2, #5000	; 0x1388
 800b2a0:	fb02 f303 	mul.w	r3, r2, r3
 800b2a4:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 800b2a6:	68fb      	ldr	r3, [r7, #12]
 800b2a8:	1e5a      	subs	r2, r3, #1
 800b2aa:	60fa      	str	r2, [r7, #12]
 800b2ac:	2b00      	cmp	r3, #0
 800b2ae:	d102      	bne.n	800b2b6 <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800b2b0:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800b2b4:	e01b      	b.n	800b2ee <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDMMCx->STA;
 800b2b6:	687b      	ldr	r3, [r7, #4]
 800b2b8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b2ba:	60bb      	str	r3, [r7, #8]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800b2bc:	68bb      	ldr	r3, [r7, #8]
 800b2be:	f003 0345 	and.w	r3, r3, #69	; 0x45
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 800b2c2:	2b00      	cmp	r3, #0
 800b2c4:	d0ef      	beq.n	800b2a6 <SDMMC_GetCmdResp3+0x1e>
 800b2c6:	68bb      	ldr	r3, [r7, #8]
 800b2c8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800b2cc:	2b00      	cmp	r3, #0
 800b2ce:	d1ea      	bne.n	800b2a6 <SDMMC_GetCmdResp3+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800b2d0:	687b      	ldr	r3, [r7, #4]
 800b2d2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b2d4:	f003 0304 	and.w	r3, r3, #4
 800b2d8:	2b00      	cmp	r3, #0
 800b2da:	d004      	beq.n	800b2e6 <SDMMC_GetCmdResp3+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800b2dc:	687b      	ldr	r3, [r7, #4]
 800b2de:	2204      	movs	r2, #4
 800b2e0:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800b2e2:	2304      	movs	r3, #4
 800b2e4:	e003      	b.n	800b2ee <SDMMC_GetCmdResp3+0x66>
  }
  else
  {
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800b2e6:	687b      	ldr	r3, [r7, #4]
 800b2e8:	4a06      	ldr	r2, [pc, #24]	; (800b304 <SDMMC_GetCmdResp3+0x7c>)
 800b2ea:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 800b2ec:	2300      	movs	r3, #0
}
 800b2ee:	4618      	mov	r0, r3
 800b2f0:	3714      	adds	r7, #20
 800b2f2:	46bd      	mov	sp, r7
 800b2f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2f8:	4770      	bx	lr
 800b2fa:	bf00      	nop
 800b2fc:	20000000 	.word	0x20000000
 800b300:	10624dd3 	.word	0x10624dd3
 800b304:	002000c5 	.word	0x002000c5

0800b308 <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative
  *         address RCA
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp6(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint16_t *pRCA)
{
 800b308:	b580      	push	{r7, lr}
 800b30a:	b088      	sub	sp, #32
 800b30c:	af00      	add	r7, sp, #0
 800b30e:	60f8      	str	r0, [r7, #12]
 800b310:	460b      	mov	r3, r1
 800b312:	607a      	str	r2, [r7, #4]
 800b314:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800b316:	4b35      	ldr	r3, [pc, #212]	; (800b3ec <SDMMC_GetCmdResp6+0xe4>)
 800b318:	681b      	ldr	r3, [r3, #0]
 800b31a:	4a35      	ldr	r2, [pc, #212]	; (800b3f0 <SDMMC_GetCmdResp6+0xe8>)
 800b31c:	fba2 2303 	umull	r2, r3, r2, r3
 800b320:	0a5b      	lsrs	r3, r3, #9
 800b322:	f241 3288 	movw	r2, #5000	; 0x1388
 800b326:	fb02 f303 	mul.w	r3, r2, r3
 800b32a:	61fb      	str	r3, [r7, #28]

  do
  {
    if (count-- == 0U)
 800b32c:	69fb      	ldr	r3, [r7, #28]
 800b32e:	1e5a      	subs	r2, r3, #1
 800b330:	61fa      	str	r2, [r7, #28]
 800b332:	2b00      	cmp	r3, #0
 800b334:	d102      	bne.n	800b33c <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 800b336:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800b33a:	e052      	b.n	800b3e2 <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDMMCx->STA;
 800b33c:	68fb      	ldr	r3, [r7, #12]
 800b33e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b340:	61bb      	str	r3, [r7, #24]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800b342:	69bb      	ldr	r3, [r7, #24]
 800b344:	f003 0345 	and.w	r3, r3, #69	; 0x45
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 800b348:	2b00      	cmp	r3, #0
 800b34a:	d0ef      	beq.n	800b32c <SDMMC_GetCmdResp6+0x24>
 800b34c:	69bb      	ldr	r3, [r7, #24]
 800b34e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800b352:	2b00      	cmp	r3, #0
 800b354:	d1ea      	bne.n	800b32c <SDMMC_GetCmdResp6+0x24>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800b356:	68fb      	ldr	r3, [r7, #12]
 800b358:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b35a:	f003 0304 	and.w	r3, r3, #4
 800b35e:	2b00      	cmp	r3, #0
 800b360:	d004      	beq.n	800b36c <SDMMC_GetCmdResp6+0x64>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800b362:	68fb      	ldr	r3, [r7, #12]
 800b364:	2204      	movs	r2, #4
 800b366:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800b368:	2304      	movs	r3, #4
 800b36a:	e03a      	b.n	800b3e2 <SDMMC_GetCmdResp6+0xda>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800b36c:	68fb      	ldr	r3, [r7, #12]
 800b36e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b370:	f003 0301 	and.w	r3, r3, #1
 800b374:	2b00      	cmp	r3, #0
 800b376:	d004      	beq.n	800b382 <SDMMC_GetCmdResp6+0x7a>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800b378:	68fb      	ldr	r3, [r7, #12]
 800b37a:	2201      	movs	r2, #1
 800b37c:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 800b37e:	2301      	movs	r3, #1
 800b380:	e02f      	b.n	800b3e2 <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }

  /* Check response received is of desired command */
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800b382:	68f8      	ldr	r0, [r7, #12]
 800b384:	f7ff fb98 	bl	800aab8 <SDMMC_GetCommandResponse>
 800b388:	4603      	mov	r3, r0
 800b38a:	461a      	mov	r2, r3
 800b38c:	7afb      	ldrb	r3, [r7, #11]
 800b38e:	4293      	cmp	r3, r2
 800b390:	d001      	beq.n	800b396 <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800b392:	2301      	movs	r3, #1
 800b394:	e025      	b.n	800b3e2 <SDMMC_GetCmdResp6+0xda>
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800b396:	68fb      	ldr	r3, [r7, #12]
 800b398:	4a16      	ldr	r2, [pc, #88]	; (800b3f4 <SDMMC_GetCmdResp6+0xec>)
 800b39a:	639a      	str	r2, [r3, #56]	; 0x38

  /* We have received response, retrieve it.  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 800b39c:	2100      	movs	r1, #0
 800b39e:	68f8      	ldr	r0, [r7, #12]
 800b3a0:	f7ff fb97 	bl	800aad2 <SDMMC_GetResponse>
 800b3a4:	6178      	str	r0, [r7, #20]

  if ((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD |
 800b3a6:	697b      	ldr	r3, [r7, #20]
 800b3a8:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 800b3ac:	2b00      	cmp	r3, #0
 800b3ae:	d106      	bne.n	800b3be <SDMMC_GetCmdResp6+0xb6>
                      SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
  {
    *pRCA = (uint16_t)(response_r1 >> 16);
 800b3b0:	697b      	ldr	r3, [r7, #20]
 800b3b2:	0c1b      	lsrs	r3, r3, #16
 800b3b4:	b29a      	uxth	r2, r3
 800b3b6:	687b      	ldr	r3, [r7, #4]
 800b3b8:	801a      	strh	r2, [r3, #0]

    return SDMMC_ERROR_NONE;
 800b3ba:	2300      	movs	r3, #0
 800b3bc:	e011      	b.n	800b3e2 <SDMMC_GetCmdResp6+0xda>
  }
  else if ((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 800b3be:	697b      	ldr	r3, [r7, #20]
 800b3c0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800b3c4:	2b00      	cmp	r3, #0
 800b3c6:	d002      	beq.n	800b3ce <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800b3c8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800b3cc:	e009      	b.n	800b3e2 <SDMMC_GetCmdResp6+0xda>
  }
  else if ((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 800b3ce:	697b      	ldr	r3, [r7, #20]
 800b3d0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800b3d4:	2b00      	cmp	r3, #0
 800b3d6:	d002      	beq.n	800b3de <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800b3d8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800b3dc:	e001      	b.n	800b3e2 <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800b3de:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800b3e2:	4618      	mov	r0, r3
 800b3e4:	3720      	adds	r7, #32
 800b3e6:	46bd      	mov	sp, r7
 800b3e8:	bd80      	pop	{r7, pc}
 800b3ea:	bf00      	nop
 800b3ec:	20000000 	.word	0x20000000
 800b3f0:	10624dd3 	.word	0x10624dd3
 800b3f4:	002000c5 	.word	0x002000c5

0800b3f8 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp7(SDMMC_TypeDef *SDMMCx)
{
 800b3f8:	b480      	push	{r7}
 800b3fa:	b085      	sub	sp, #20
 800b3fc:	af00      	add	r7, sp, #0
 800b3fe:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800b400:	4b22      	ldr	r3, [pc, #136]	; (800b48c <SDMMC_GetCmdResp7+0x94>)
 800b402:	681b      	ldr	r3, [r3, #0]
 800b404:	4a22      	ldr	r2, [pc, #136]	; (800b490 <SDMMC_GetCmdResp7+0x98>)
 800b406:	fba2 2303 	umull	r2, r3, r2, r3
 800b40a:	0a5b      	lsrs	r3, r3, #9
 800b40c:	f241 3288 	movw	r2, #5000	; 0x1388
 800b410:	fb02 f303 	mul.w	r3, r2, r3
 800b414:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 800b416:	68fb      	ldr	r3, [r7, #12]
 800b418:	1e5a      	subs	r2, r3, #1
 800b41a:	60fa      	str	r2, [r7, #12]
 800b41c:	2b00      	cmp	r3, #0
 800b41e:	d102      	bne.n	800b426 <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800b420:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800b424:	e02c      	b.n	800b480 <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDMMCx->STA;
 800b426:	687b      	ldr	r3, [r7, #4]
 800b428:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b42a:	60bb      	str	r3, [r7, #8]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800b42c:	68bb      	ldr	r3, [r7, #8]
 800b42e:	f003 0345 	and.w	r3, r3, #69	; 0x45
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 800b432:	2b00      	cmp	r3, #0
 800b434:	d0ef      	beq.n	800b416 <SDMMC_GetCmdResp7+0x1e>
 800b436:	68bb      	ldr	r3, [r7, #8]
 800b438:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800b43c:	2b00      	cmp	r3, #0
 800b43e:	d1ea      	bne.n	800b416 <SDMMC_GetCmdResp7+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800b440:	687b      	ldr	r3, [r7, #4]
 800b442:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b444:	f003 0304 	and.w	r3, r3, #4
 800b448:	2b00      	cmp	r3, #0
 800b44a:	d004      	beq.n	800b456 <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800b44c:	687b      	ldr	r3, [r7, #4]
 800b44e:	2204      	movs	r2, #4
 800b450:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800b452:	2304      	movs	r3, #4
 800b454:	e014      	b.n	800b480 <SDMMC_GetCmdResp7+0x88>
  }

  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800b456:	687b      	ldr	r3, [r7, #4]
 800b458:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b45a:	f003 0301 	and.w	r3, r3, #1
 800b45e:	2b00      	cmp	r3, #0
 800b460:	d004      	beq.n	800b46c <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800b462:	687b      	ldr	r3, [r7, #4]
 800b464:	2201      	movs	r2, #1
 800b466:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 800b468:	2301      	movs	r3, #1
 800b46a:	e009      	b.n	800b480 <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDREND))
 800b46c:	687b      	ldr	r3, [r7, #4]
 800b46e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b470:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b474:	2b00      	cmp	r3, #0
 800b476:	d002      	beq.n	800b47e <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CMDREND);
 800b478:	687b      	ldr	r3, [r7, #4]
 800b47a:	2240      	movs	r2, #64	; 0x40
 800b47c:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 800b47e:	2300      	movs	r3, #0

}
 800b480:	4618      	mov	r0, r3
 800b482:	3714      	adds	r7, #20
 800b484:	46bd      	mov	sp, r7
 800b486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b48a:	4770      	bx	lr
 800b48c:	20000000 	.word	0x20000000
 800b490:	10624dd3 	.word	0x10624dd3

0800b494 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDMMC_TypeDef *SDMMCx)
{
 800b494:	b480      	push	{r7}
 800b496:	b085      	sub	sp, #20
 800b498:	af00      	add	r7, sp, #0
 800b49a:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800b49c:	4b11      	ldr	r3, [pc, #68]	; (800b4e4 <SDMMC_GetCmdError+0x50>)
 800b49e:	681b      	ldr	r3, [r3, #0]
 800b4a0:	4a11      	ldr	r2, [pc, #68]	; (800b4e8 <SDMMC_GetCmdError+0x54>)
 800b4a2:	fba2 2303 	umull	r2, r3, r2, r3
 800b4a6:	0a5b      	lsrs	r3, r3, #9
 800b4a8:	f241 3288 	movw	r2, #5000	; 0x1388
 800b4ac:	fb02 f303 	mul.w	r3, r2, r3
 800b4b0:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 800b4b2:	68fb      	ldr	r3, [r7, #12]
 800b4b4:	1e5a      	subs	r2, r3, #1
 800b4b6:	60fa      	str	r2, [r7, #12]
 800b4b8:	2b00      	cmp	r3, #0
 800b4ba:	d102      	bne.n	800b4c2 <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800b4bc:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800b4c0:	e009      	b.n	800b4d6 <SDMMC_GetCmdError+0x42>
    }

  } while (!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDSENT));
 800b4c2:	687b      	ldr	r3, [r7, #4]
 800b4c4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b4c6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b4ca:	2b00      	cmp	r3, #0
 800b4cc:	d0f1      	beq.n	800b4b2 <SDMMC_GetCmdError+0x1e>

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800b4ce:	687b      	ldr	r3, [r7, #4]
 800b4d0:	4a06      	ldr	r2, [pc, #24]	; (800b4ec <SDMMC_GetCmdError+0x58>)
 800b4d2:	639a      	str	r2, [r3, #56]	; 0x38

  return SDMMC_ERROR_NONE;
 800b4d4:	2300      	movs	r3, #0
}
 800b4d6:	4618      	mov	r0, r3
 800b4d8:	3714      	adds	r7, #20
 800b4da:	46bd      	mov	sp, r7
 800b4dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4e0:	4770      	bx	lr
 800b4e2:	bf00      	nop
 800b4e4:	20000000 	.word	0x20000000
 800b4e8:	10624dd3 	.word	0x10624dd3
 800b4ec:	002000c5 	.word	0x002000c5

0800b4f0 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800b4f0:	b084      	sub	sp, #16
 800b4f2:	b580      	push	{r7, lr}
 800b4f4:	b084      	sub	sp, #16
 800b4f6:	af00      	add	r7, sp, #0
 800b4f8:	6078      	str	r0, [r7, #4]
 800b4fa:	f107 001c 	add.w	r0, r7, #28
 800b4fe:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800b502:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b504:	2b01      	cmp	r3, #1
 800b506:	d120      	bne.n	800b54a <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800b508:	687b      	ldr	r3, [r7, #4]
 800b50a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b50c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800b510:	687b      	ldr	r3, [r7, #4]
 800b512:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800b514:	687b      	ldr	r3, [r7, #4]
 800b516:	68da      	ldr	r2, [r3, #12]
 800b518:	4b2a      	ldr	r3, [pc, #168]	; (800b5c4 <USB_CoreInit+0xd4>)
 800b51a:	4013      	ands	r3, r2
 800b51c:	687a      	ldr	r2, [r7, #4]
 800b51e:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800b520:	687b      	ldr	r3, [r7, #4]
 800b522:	68db      	ldr	r3, [r3, #12]
 800b524:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800b528:	687b      	ldr	r3, [r7, #4]
 800b52a:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800b52c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b52e:	2b01      	cmp	r3, #1
 800b530:	d105      	bne.n	800b53e <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800b532:	687b      	ldr	r3, [r7, #4]
 800b534:	68db      	ldr	r3, [r3, #12]
 800b536:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800b53a:	687b      	ldr	r3, [r7, #4]
 800b53c:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800b53e:	6878      	ldr	r0, [r7, #4]
 800b540:	f001 fb14 	bl	800cb6c <USB_CoreReset>
 800b544:	4603      	mov	r3, r0
 800b546:	73fb      	strb	r3, [r7, #15]
 800b548:	e01a      	b.n	800b580 <USB_CoreInit+0x90>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800b54a:	687b      	ldr	r3, [r7, #4]
 800b54c:	68db      	ldr	r3, [r3, #12]
 800b54e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800b552:	687b      	ldr	r3, [r7, #4]
 800b554:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800b556:	6878      	ldr	r0, [r7, #4]
 800b558:	f001 fb08 	bl	800cb6c <USB_CoreReset>
 800b55c:	4603      	mov	r3, r0
 800b55e:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800b560:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b562:	2b00      	cmp	r3, #0
 800b564:	d106      	bne.n	800b574 <USB_CoreInit+0x84>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800b566:	687b      	ldr	r3, [r7, #4]
 800b568:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b56a:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800b56e:	687b      	ldr	r3, [r7, #4]
 800b570:	639a      	str	r2, [r3, #56]	; 0x38
 800b572:	e005      	b.n	800b580 <USB_CoreInit+0x90>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800b574:	687b      	ldr	r3, [r7, #4]
 800b576:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b578:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800b57c:	687b      	ldr	r3, [r7, #4]
 800b57e:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800b580:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b582:	2b01      	cmp	r3, #1
 800b584:	d116      	bne.n	800b5b4 <USB_CoreInit+0xc4>
  {
    /* make sure to reserve 18 fifo Locations for DMA buffers */
    USBx->GDFIFOCFG &= ~(0xFFFFU << 16);
 800b586:	687b      	ldr	r3, [r7, #4]
 800b588:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b58a:	b29a      	uxth	r2, r3
 800b58c:	687b      	ldr	r3, [r7, #4]
 800b58e:	65da      	str	r2, [r3, #92]	; 0x5c
    USBx->GDFIFOCFG |= 0x3EEU << 16;
 800b590:	687b      	ldr	r3, [r7, #4]
 800b592:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800b594:	4b0c      	ldr	r3, [pc, #48]	; (800b5c8 <USB_CoreInit+0xd8>)
 800b596:	4313      	orrs	r3, r2
 800b598:	687a      	ldr	r2, [r7, #4]
 800b59a:	65d3      	str	r3, [r2, #92]	; 0x5c

    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800b59c:	687b      	ldr	r3, [r7, #4]
 800b59e:	689b      	ldr	r3, [r3, #8]
 800b5a0:	f043 0206 	orr.w	r2, r3, #6
 800b5a4:	687b      	ldr	r3, [r7, #4]
 800b5a6:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800b5a8:	687b      	ldr	r3, [r7, #4]
 800b5aa:	689b      	ldr	r3, [r3, #8]
 800b5ac:	f043 0220 	orr.w	r2, r3, #32
 800b5b0:	687b      	ldr	r3, [r7, #4]
 800b5b2:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800b5b4:	7bfb      	ldrb	r3, [r7, #15]
}
 800b5b6:	4618      	mov	r0, r3
 800b5b8:	3710      	adds	r7, #16
 800b5ba:	46bd      	mov	sp, r7
 800b5bc:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800b5c0:	b004      	add	sp, #16
 800b5c2:	4770      	bx	lr
 800b5c4:	ffbdffbf 	.word	0xffbdffbf
 800b5c8:	03ee0000 	.word	0x03ee0000

0800b5cc <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 800b5cc:	b480      	push	{r7}
 800b5ce:	b087      	sub	sp, #28
 800b5d0:	af00      	add	r7, sp, #0
 800b5d2:	60f8      	str	r0, [r7, #12]
 800b5d4:	60b9      	str	r1, [r7, #8]
 800b5d6:	4613      	mov	r3, r2
 800b5d8:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 800b5da:	79fb      	ldrb	r3, [r7, #7]
 800b5dc:	2b02      	cmp	r3, #2
 800b5de:	d165      	bne.n	800b6ac <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 800b5e0:	68bb      	ldr	r3, [r7, #8]
 800b5e2:	4a41      	ldr	r2, [pc, #260]	; (800b6e8 <USB_SetTurnaroundTime+0x11c>)
 800b5e4:	4293      	cmp	r3, r2
 800b5e6:	d906      	bls.n	800b5f6 <USB_SetTurnaroundTime+0x2a>
 800b5e8:	68bb      	ldr	r3, [r7, #8]
 800b5ea:	4a40      	ldr	r2, [pc, #256]	; (800b6ec <USB_SetTurnaroundTime+0x120>)
 800b5ec:	4293      	cmp	r3, r2
 800b5ee:	d202      	bcs.n	800b5f6 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 800b5f0:	230f      	movs	r3, #15
 800b5f2:	617b      	str	r3, [r7, #20]
 800b5f4:	e062      	b.n	800b6bc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 800b5f6:	68bb      	ldr	r3, [r7, #8]
 800b5f8:	4a3c      	ldr	r2, [pc, #240]	; (800b6ec <USB_SetTurnaroundTime+0x120>)
 800b5fa:	4293      	cmp	r3, r2
 800b5fc:	d306      	bcc.n	800b60c <USB_SetTurnaroundTime+0x40>
 800b5fe:	68bb      	ldr	r3, [r7, #8]
 800b600:	4a3b      	ldr	r2, [pc, #236]	; (800b6f0 <USB_SetTurnaroundTime+0x124>)
 800b602:	4293      	cmp	r3, r2
 800b604:	d202      	bcs.n	800b60c <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 800b606:	230e      	movs	r3, #14
 800b608:	617b      	str	r3, [r7, #20]
 800b60a:	e057      	b.n	800b6bc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 800b60c:	68bb      	ldr	r3, [r7, #8]
 800b60e:	4a38      	ldr	r2, [pc, #224]	; (800b6f0 <USB_SetTurnaroundTime+0x124>)
 800b610:	4293      	cmp	r3, r2
 800b612:	d306      	bcc.n	800b622 <USB_SetTurnaroundTime+0x56>
 800b614:	68bb      	ldr	r3, [r7, #8]
 800b616:	4a37      	ldr	r2, [pc, #220]	; (800b6f4 <USB_SetTurnaroundTime+0x128>)
 800b618:	4293      	cmp	r3, r2
 800b61a:	d202      	bcs.n	800b622 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 800b61c:	230d      	movs	r3, #13
 800b61e:	617b      	str	r3, [r7, #20]
 800b620:	e04c      	b.n	800b6bc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 800b622:	68bb      	ldr	r3, [r7, #8]
 800b624:	4a33      	ldr	r2, [pc, #204]	; (800b6f4 <USB_SetTurnaroundTime+0x128>)
 800b626:	4293      	cmp	r3, r2
 800b628:	d306      	bcc.n	800b638 <USB_SetTurnaroundTime+0x6c>
 800b62a:	68bb      	ldr	r3, [r7, #8]
 800b62c:	4a32      	ldr	r2, [pc, #200]	; (800b6f8 <USB_SetTurnaroundTime+0x12c>)
 800b62e:	4293      	cmp	r3, r2
 800b630:	d802      	bhi.n	800b638 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 800b632:	230c      	movs	r3, #12
 800b634:	617b      	str	r3, [r7, #20]
 800b636:	e041      	b.n	800b6bc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 800b638:	68bb      	ldr	r3, [r7, #8]
 800b63a:	4a2f      	ldr	r2, [pc, #188]	; (800b6f8 <USB_SetTurnaroundTime+0x12c>)
 800b63c:	4293      	cmp	r3, r2
 800b63e:	d906      	bls.n	800b64e <USB_SetTurnaroundTime+0x82>
 800b640:	68bb      	ldr	r3, [r7, #8]
 800b642:	4a2e      	ldr	r2, [pc, #184]	; (800b6fc <USB_SetTurnaroundTime+0x130>)
 800b644:	4293      	cmp	r3, r2
 800b646:	d802      	bhi.n	800b64e <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 800b648:	230b      	movs	r3, #11
 800b64a:	617b      	str	r3, [r7, #20]
 800b64c:	e036      	b.n	800b6bc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 800b64e:	68bb      	ldr	r3, [r7, #8]
 800b650:	4a2a      	ldr	r2, [pc, #168]	; (800b6fc <USB_SetTurnaroundTime+0x130>)
 800b652:	4293      	cmp	r3, r2
 800b654:	d906      	bls.n	800b664 <USB_SetTurnaroundTime+0x98>
 800b656:	68bb      	ldr	r3, [r7, #8]
 800b658:	4a29      	ldr	r2, [pc, #164]	; (800b700 <USB_SetTurnaroundTime+0x134>)
 800b65a:	4293      	cmp	r3, r2
 800b65c:	d802      	bhi.n	800b664 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 800b65e:	230a      	movs	r3, #10
 800b660:	617b      	str	r3, [r7, #20]
 800b662:	e02b      	b.n	800b6bc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 800b664:	68bb      	ldr	r3, [r7, #8]
 800b666:	4a26      	ldr	r2, [pc, #152]	; (800b700 <USB_SetTurnaroundTime+0x134>)
 800b668:	4293      	cmp	r3, r2
 800b66a:	d906      	bls.n	800b67a <USB_SetTurnaroundTime+0xae>
 800b66c:	68bb      	ldr	r3, [r7, #8]
 800b66e:	4a25      	ldr	r2, [pc, #148]	; (800b704 <USB_SetTurnaroundTime+0x138>)
 800b670:	4293      	cmp	r3, r2
 800b672:	d202      	bcs.n	800b67a <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 800b674:	2309      	movs	r3, #9
 800b676:	617b      	str	r3, [r7, #20]
 800b678:	e020      	b.n	800b6bc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 800b67a:	68bb      	ldr	r3, [r7, #8]
 800b67c:	4a21      	ldr	r2, [pc, #132]	; (800b704 <USB_SetTurnaroundTime+0x138>)
 800b67e:	4293      	cmp	r3, r2
 800b680:	d306      	bcc.n	800b690 <USB_SetTurnaroundTime+0xc4>
 800b682:	68bb      	ldr	r3, [r7, #8]
 800b684:	4a20      	ldr	r2, [pc, #128]	; (800b708 <USB_SetTurnaroundTime+0x13c>)
 800b686:	4293      	cmp	r3, r2
 800b688:	d802      	bhi.n	800b690 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 800b68a:	2308      	movs	r3, #8
 800b68c:	617b      	str	r3, [r7, #20]
 800b68e:	e015      	b.n	800b6bc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 800b690:	68bb      	ldr	r3, [r7, #8]
 800b692:	4a1d      	ldr	r2, [pc, #116]	; (800b708 <USB_SetTurnaroundTime+0x13c>)
 800b694:	4293      	cmp	r3, r2
 800b696:	d906      	bls.n	800b6a6 <USB_SetTurnaroundTime+0xda>
 800b698:	68bb      	ldr	r3, [r7, #8]
 800b69a:	4a1c      	ldr	r2, [pc, #112]	; (800b70c <USB_SetTurnaroundTime+0x140>)
 800b69c:	4293      	cmp	r3, r2
 800b69e:	d202      	bcs.n	800b6a6 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 800b6a0:	2307      	movs	r3, #7
 800b6a2:	617b      	str	r3, [r7, #20]
 800b6a4:	e00a      	b.n	800b6bc <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 800b6a6:	2306      	movs	r3, #6
 800b6a8:	617b      	str	r3, [r7, #20]
 800b6aa:	e007      	b.n	800b6bc <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 800b6ac:	79fb      	ldrb	r3, [r7, #7]
 800b6ae:	2b00      	cmp	r3, #0
 800b6b0:	d102      	bne.n	800b6b8 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 800b6b2:	2309      	movs	r3, #9
 800b6b4:	617b      	str	r3, [r7, #20]
 800b6b6:	e001      	b.n	800b6bc <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 800b6b8:	2309      	movs	r3, #9
 800b6ba:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 800b6bc:	68fb      	ldr	r3, [r7, #12]
 800b6be:	68db      	ldr	r3, [r3, #12]
 800b6c0:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 800b6c4:	68fb      	ldr	r3, [r7, #12]
 800b6c6:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 800b6c8:	68fb      	ldr	r3, [r7, #12]
 800b6ca:	68da      	ldr	r2, [r3, #12]
 800b6cc:	697b      	ldr	r3, [r7, #20]
 800b6ce:	029b      	lsls	r3, r3, #10
 800b6d0:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 800b6d4:	431a      	orrs	r2, r3
 800b6d6:	68fb      	ldr	r3, [r7, #12]
 800b6d8:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800b6da:	2300      	movs	r3, #0
}
 800b6dc:	4618      	mov	r0, r3
 800b6de:	371c      	adds	r7, #28
 800b6e0:	46bd      	mov	sp, r7
 800b6e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6e6:	4770      	bx	lr
 800b6e8:	00d8acbf 	.word	0x00d8acbf
 800b6ec:	00e4e1c0 	.word	0x00e4e1c0
 800b6f0:	00f42400 	.word	0x00f42400
 800b6f4:	01067380 	.word	0x01067380
 800b6f8:	011a499f 	.word	0x011a499f
 800b6fc:	01312cff 	.word	0x01312cff
 800b700:	014ca43f 	.word	0x014ca43f
 800b704:	016e3600 	.word	0x016e3600
 800b708:	01a6ab1f 	.word	0x01a6ab1f
 800b70c:	01e84800 	.word	0x01e84800

0800b710 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800b710:	b480      	push	{r7}
 800b712:	b083      	sub	sp, #12
 800b714:	af00      	add	r7, sp, #0
 800b716:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800b718:	687b      	ldr	r3, [r7, #4]
 800b71a:	689b      	ldr	r3, [r3, #8]
 800b71c:	f043 0201 	orr.w	r2, r3, #1
 800b720:	687b      	ldr	r3, [r7, #4]
 800b722:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800b724:	2300      	movs	r3, #0
}
 800b726:	4618      	mov	r0, r3
 800b728:	370c      	adds	r7, #12
 800b72a:	46bd      	mov	sp, r7
 800b72c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b730:	4770      	bx	lr

0800b732 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800b732:	b480      	push	{r7}
 800b734:	b083      	sub	sp, #12
 800b736:	af00      	add	r7, sp, #0
 800b738:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800b73a:	687b      	ldr	r3, [r7, #4]
 800b73c:	689b      	ldr	r3, [r3, #8]
 800b73e:	f023 0201 	bic.w	r2, r3, #1
 800b742:	687b      	ldr	r3, [r7, #4]
 800b744:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800b746:	2300      	movs	r3, #0
}
 800b748:	4618      	mov	r0, r3
 800b74a:	370c      	adds	r7, #12
 800b74c:	46bd      	mov	sp, r7
 800b74e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b752:	4770      	bx	lr

0800b754 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800b754:	b580      	push	{r7, lr}
 800b756:	b082      	sub	sp, #8
 800b758:	af00      	add	r7, sp, #0
 800b75a:	6078      	str	r0, [r7, #4]
 800b75c:	460b      	mov	r3, r1
 800b75e:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800b760:	687b      	ldr	r3, [r7, #4]
 800b762:	68db      	ldr	r3, [r3, #12]
 800b764:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800b768:	687b      	ldr	r3, [r7, #4]
 800b76a:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800b76c:	78fb      	ldrb	r3, [r7, #3]
 800b76e:	2b01      	cmp	r3, #1
 800b770:	d106      	bne.n	800b780 <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800b772:	687b      	ldr	r3, [r7, #4]
 800b774:	68db      	ldr	r3, [r3, #12]
 800b776:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800b77a:	687b      	ldr	r3, [r7, #4]
 800b77c:	60da      	str	r2, [r3, #12]
 800b77e:	e00b      	b.n	800b798 <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 800b780:	78fb      	ldrb	r3, [r7, #3]
 800b782:	2b00      	cmp	r3, #0
 800b784:	d106      	bne.n	800b794 <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800b786:	687b      	ldr	r3, [r7, #4]
 800b788:	68db      	ldr	r3, [r3, #12]
 800b78a:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800b78e:	687b      	ldr	r3, [r7, #4]
 800b790:	60da      	str	r2, [r3, #12]
 800b792:	e001      	b.n	800b798 <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 800b794:	2301      	movs	r3, #1
 800b796:	e003      	b.n	800b7a0 <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 800b798:	2032      	movs	r0, #50	; 0x32
 800b79a:	f7f5 ffd5 	bl	8001748 <HAL_Delay>

  return HAL_OK;
 800b79e:	2300      	movs	r3, #0
}
 800b7a0:	4618      	mov	r0, r3
 800b7a2:	3708      	adds	r7, #8
 800b7a4:	46bd      	mov	sp, r7
 800b7a6:	bd80      	pop	{r7, pc}

0800b7a8 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800b7a8:	b084      	sub	sp, #16
 800b7aa:	b580      	push	{r7, lr}
 800b7ac:	b086      	sub	sp, #24
 800b7ae:	af00      	add	r7, sp, #0
 800b7b0:	6078      	str	r0, [r7, #4]
 800b7b2:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800b7b6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800b7ba:	2300      	movs	r3, #0
 800b7bc:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b7be:	687b      	ldr	r3, [r7, #4]
 800b7c0:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800b7c2:	2300      	movs	r3, #0
 800b7c4:	613b      	str	r3, [r7, #16]
 800b7c6:	e009      	b.n	800b7dc <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800b7c8:	687a      	ldr	r2, [r7, #4]
 800b7ca:	693b      	ldr	r3, [r7, #16]
 800b7cc:	3340      	adds	r3, #64	; 0x40
 800b7ce:	009b      	lsls	r3, r3, #2
 800b7d0:	4413      	add	r3, r2
 800b7d2:	2200      	movs	r2, #0
 800b7d4:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800b7d6:	693b      	ldr	r3, [r7, #16]
 800b7d8:	3301      	adds	r3, #1
 800b7da:	613b      	str	r3, [r7, #16]
 800b7dc:	693b      	ldr	r3, [r7, #16]
 800b7de:	2b0e      	cmp	r3, #14
 800b7e0:	d9f2      	bls.n	800b7c8 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800b7e2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b7e4:	2b00      	cmp	r3, #0
 800b7e6:	d11c      	bne.n	800b822 <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800b7e8:	68fb      	ldr	r3, [r7, #12]
 800b7ea:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b7ee:	685b      	ldr	r3, [r3, #4]
 800b7f0:	68fa      	ldr	r2, [r7, #12]
 800b7f2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800b7f6:	f043 0302 	orr.w	r3, r3, #2
 800b7fa:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 800b7fc:	687b      	ldr	r3, [r7, #4]
 800b7fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b800:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800b804:	687b      	ldr	r3, [r7, #4]
 800b806:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 800b808:	687b      	ldr	r3, [r7, #4]
 800b80a:	681b      	ldr	r3, [r3, #0]
 800b80c:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800b810:	687b      	ldr	r3, [r7, #4]
 800b812:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 800b814:	687b      	ldr	r3, [r7, #4]
 800b816:	681b      	ldr	r3, [r3, #0]
 800b818:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800b81c:	687b      	ldr	r3, [r7, #4]
 800b81e:	601a      	str	r2, [r3, #0]
 800b820:	e005      	b.n	800b82e <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 800b822:	687b      	ldr	r3, [r7, #4]
 800b824:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b826:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800b82a:	687b      	ldr	r3, [r7, #4]
 800b82c:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800b82e:	68fb      	ldr	r3, [r7, #12]
 800b830:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800b834:	461a      	mov	r2, r3
 800b836:	2300      	movs	r3, #0
 800b838:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800b83a:	68fb      	ldr	r3, [r7, #12]
 800b83c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b840:	4619      	mov	r1, r3
 800b842:	68fb      	ldr	r3, [r7, #12]
 800b844:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b848:	461a      	mov	r2, r3
 800b84a:	680b      	ldr	r3, [r1, #0]
 800b84c:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800b84e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b850:	2b01      	cmp	r3, #1
 800b852:	d10c      	bne.n	800b86e <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800b854:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b856:	2b00      	cmp	r3, #0
 800b858:	d104      	bne.n	800b864 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800b85a:	2100      	movs	r1, #0
 800b85c:	6878      	ldr	r0, [r7, #4]
 800b85e:	f000 f949 	bl	800baf4 <USB_SetDevSpeed>
 800b862:	e008      	b.n	800b876 <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800b864:	2101      	movs	r1, #1
 800b866:	6878      	ldr	r0, [r7, #4]
 800b868:	f000 f944 	bl	800baf4 <USB_SetDevSpeed>
 800b86c:	e003      	b.n	800b876 <USB_DevInit+0xce>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800b86e:	2103      	movs	r1, #3
 800b870:	6878      	ldr	r0, [r7, #4]
 800b872:	f000 f93f 	bl	800baf4 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800b876:	2110      	movs	r1, #16
 800b878:	6878      	ldr	r0, [r7, #4]
 800b87a:	f000 f8f3 	bl	800ba64 <USB_FlushTxFifo>
 800b87e:	4603      	mov	r3, r0
 800b880:	2b00      	cmp	r3, #0
 800b882:	d001      	beq.n	800b888 <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 800b884:	2301      	movs	r3, #1
 800b886:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800b888:	6878      	ldr	r0, [r7, #4]
 800b88a:	f000 f911 	bl	800bab0 <USB_FlushRxFifo>
 800b88e:	4603      	mov	r3, r0
 800b890:	2b00      	cmp	r3, #0
 800b892:	d001      	beq.n	800b898 <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 800b894:	2301      	movs	r3, #1
 800b896:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800b898:	68fb      	ldr	r3, [r7, #12]
 800b89a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b89e:	461a      	mov	r2, r3
 800b8a0:	2300      	movs	r3, #0
 800b8a2:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800b8a4:	68fb      	ldr	r3, [r7, #12]
 800b8a6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b8aa:	461a      	mov	r2, r3
 800b8ac:	2300      	movs	r3, #0
 800b8ae:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800b8b0:	68fb      	ldr	r3, [r7, #12]
 800b8b2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b8b6:	461a      	mov	r2, r3
 800b8b8:	2300      	movs	r3, #0
 800b8ba:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800b8bc:	2300      	movs	r3, #0
 800b8be:	613b      	str	r3, [r7, #16]
 800b8c0:	e043      	b.n	800b94a <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800b8c2:	693b      	ldr	r3, [r7, #16]
 800b8c4:	015a      	lsls	r2, r3, #5
 800b8c6:	68fb      	ldr	r3, [r7, #12]
 800b8c8:	4413      	add	r3, r2
 800b8ca:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b8ce:	681b      	ldr	r3, [r3, #0]
 800b8d0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800b8d4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800b8d8:	d118      	bne.n	800b90c <USB_DevInit+0x164>
    {
      if (i == 0U)
 800b8da:	693b      	ldr	r3, [r7, #16]
 800b8dc:	2b00      	cmp	r3, #0
 800b8de:	d10a      	bne.n	800b8f6 <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800b8e0:	693b      	ldr	r3, [r7, #16]
 800b8e2:	015a      	lsls	r2, r3, #5
 800b8e4:	68fb      	ldr	r3, [r7, #12]
 800b8e6:	4413      	add	r3, r2
 800b8e8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b8ec:	461a      	mov	r2, r3
 800b8ee:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800b8f2:	6013      	str	r3, [r2, #0]
 800b8f4:	e013      	b.n	800b91e <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800b8f6:	693b      	ldr	r3, [r7, #16]
 800b8f8:	015a      	lsls	r2, r3, #5
 800b8fa:	68fb      	ldr	r3, [r7, #12]
 800b8fc:	4413      	add	r3, r2
 800b8fe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b902:	461a      	mov	r2, r3
 800b904:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800b908:	6013      	str	r3, [r2, #0]
 800b90a:	e008      	b.n	800b91e <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800b90c:	693b      	ldr	r3, [r7, #16]
 800b90e:	015a      	lsls	r2, r3, #5
 800b910:	68fb      	ldr	r3, [r7, #12]
 800b912:	4413      	add	r3, r2
 800b914:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b918:	461a      	mov	r2, r3
 800b91a:	2300      	movs	r3, #0
 800b91c:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800b91e:	693b      	ldr	r3, [r7, #16]
 800b920:	015a      	lsls	r2, r3, #5
 800b922:	68fb      	ldr	r3, [r7, #12]
 800b924:	4413      	add	r3, r2
 800b926:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b92a:	461a      	mov	r2, r3
 800b92c:	2300      	movs	r3, #0
 800b92e:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800b930:	693b      	ldr	r3, [r7, #16]
 800b932:	015a      	lsls	r2, r3, #5
 800b934:	68fb      	ldr	r3, [r7, #12]
 800b936:	4413      	add	r3, r2
 800b938:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b93c:	461a      	mov	r2, r3
 800b93e:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800b942:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800b944:	693b      	ldr	r3, [r7, #16]
 800b946:	3301      	adds	r3, #1
 800b948:	613b      	str	r3, [r7, #16]
 800b94a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b94c:	693a      	ldr	r2, [r7, #16]
 800b94e:	429a      	cmp	r2, r3
 800b950:	d3b7      	bcc.n	800b8c2 <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800b952:	2300      	movs	r3, #0
 800b954:	613b      	str	r3, [r7, #16]
 800b956:	e043      	b.n	800b9e0 <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800b958:	693b      	ldr	r3, [r7, #16]
 800b95a:	015a      	lsls	r2, r3, #5
 800b95c:	68fb      	ldr	r3, [r7, #12]
 800b95e:	4413      	add	r3, r2
 800b960:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b964:	681b      	ldr	r3, [r3, #0]
 800b966:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800b96a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800b96e:	d118      	bne.n	800b9a2 <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 800b970:	693b      	ldr	r3, [r7, #16]
 800b972:	2b00      	cmp	r3, #0
 800b974:	d10a      	bne.n	800b98c <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800b976:	693b      	ldr	r3, [r7, #16]
 800b978:	015a      	lsls	r2, r3, #5
 800b97a:	68fb      	ldr	r3, [r7, #12]
 800b97c:	4413      	add	r3, r2
 800b97e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b982:	461a      	mov	r2, r3
 800b984:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800b988:	6013      	str	r3, [r2, #0]
 800b98a:	e013      	b.n	800b9b4 <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800b98c:	693b      	ldr	r3, [r7, #16]
 800b98e:	015a      	lsls	r2, r3, #5
 800b990:	68fb      	ldr	r3, [r7, #12]
 800b992:	4413      	add	r3, r2
 800b994:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b998:	461a      	mov	r2, r3
 800b99a:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800b99e:	6013      	str	r3, [r2, #0]
 800b9a0:	e008      	b.n	800b9b4 <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800b9a2:	693b      	ldr	r3, [r7, #16]
 800b9a4:	015a      	lsls	r2, r3, #5
 800b9a6:	68fb      	ldr	r3, [r7, #12]
 800b9a8:	4413      	add	r3, r2
 800b9aa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b9ae:	461a      	mov	r2, r3
 800b9b0:	2300      	movs	r3, #0
 800b9b2:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800b9b4:	693b      	ldr	r3, [r7, #16]
 800b9b6:	015a      	lsls	r2, r3, #5
 800b9b8:	68fb      	ldr	r3, [r7, #12]
 800b9ba:	4413      	add	r3, r2
 800b9bc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b9c0:	461a      	mov	r2, r3
 800b9c2:	2300      	movs	r3, #0
 800b9c4:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800b9c6:	693b      	ldr	r3, [r7, #16]
 800b9c8:	015a      	lsls	r2, r3, #5
 800b9ca:	68fb      	ldr	r3, [r7, #12]
 800b9cc:	4413      	add	r3, r2
 800b9ce:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b9d2:	461a      	mov	r2, r3
 800b9d4:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800b9d8:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800b9da:	693b      	ldr	r3, [r7, #16]
 800b9dc:	3301      	adds	r3, #1
 800b9de:	613b      	str	r3, [r7, #16]
 800b9e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b9e2:	693a      	ldr	r2, [r7, #16]
 800b9e4:	429a      	cmp	r2, r3
 800b9e6:	d3b7      	bcc.n	800b958 <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800b9e8:	68fb      	ldr	r3, [r7, #12]
 800b9ea:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b9ee:	691b      	ldr	r3, [r3, #16]
 800b9f0:	68fa      	ldr	r2, [r7, #12]
 800b9f2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800b9f6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800b9fa:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800b9fc:	687b      	ldr	r3, [r7, #4]
 800b9fe:	2200      	movs	r2, #0
 800ba00:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800ba02:	687b      	ldr	r3, [r7, #4]
 800ba04:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 800ba08:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800ba0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ba0c:	2b00      	cmp	r3, #0
 800ba0e:	d105      	bne.n	800ba1c <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800ba10:	687b      	ldr	r3, [r7, #4]
 800ba12:	699b      	ldr	r3, [r3, #24]
 800ba14:	f043 0210 	orr.w	r2, r3, #16
 800ba18:	687b      	ldr	r3, [r7, #4]
 800ba1a:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800ba1c:	687b      	ldr	r3, [r7, #4]
 800ba1e:	699a      	ldr	r2, [r3, #24]
 800ba20:	4b0e      	ldr	r3, [pc, #56]	; (800ba5c <USB_DevInit+0x2b4>)
 800ba22:	4313      	orrs	r3, r2
 800ba24:	687a      	ldr	r2, [r7, #4]
 800ba26:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800ba28:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ba2a:	2b00      	cmp	r3, #0
 800ba2c:	d005      	beq.n	800ba3a <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800ba2e:	687b      	ldr	r3, [r7, #4]
 800ba30:	699b      	ldr	r3, [r3, #24]
 800ba32:	f043 0208 	orr.w	r2, r3, #8
 800ba36:	687b      	ldr	r3, [r7, #4]
 800ba38:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800ba3a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ba3c:	2b01      	cmp	r3, #1
 800ba3e:	d105      	bne.n	800ba4c <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800ba40:	687b      	ldr	r3, [r7, #4]
 800ba42:	699a      	ldr	r2, [r3, #24]
 800ba44:	4b06      	ldr	r3, [pc, #24]	; (800ba60 <USB_DevInit+0x2b8>)
 800ba46:	4313      	orrs	r3, r2
 800ba48:	687a      	ldr	r2, [r7, #4]
 800ba4a:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800ba4c:	7dfb      	ldrb	r3, [r7, #23]
}
 800ba4e:	4618      	mov	r0, r3
 800ba50:	3718      	adds	r7, #24
 800ba52:	46bd      	mov	sp, r7
 800ba54:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800ba58:	b004      	add	sp, #16
 800ba5a:	4770      	bx	lr
 800ba5c:	803c3800 	.word	0x803c3800
 800ba60:	40000004 	.word	0x40000004

0800ba64 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800ba64:	b480      	push	{r7}
 800ba66:	b085      	sub	sp, #20
 800ba68:	af00      	add	r7, sp, #0
 800ba6a:	6078      	str	r0, [r7, #4]
 800ba6c:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 800ba6e:	2300      	movs	r3, #0
 800ba70:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800ba72:	683b      	ldr	r3, [r7, #0]
 800ba74:	019b      	lsls	r3, r3, #6
 800ba76:	f043 0220 	orr.w	r2, r3, #32
 800ba7a:	687b      	ldr	r3, [r7, #4]
 800ba7c:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800ba7e:	68fb      	ldr	r3, [r7, #12]
 800ba80:	3301      	adds	r3, #1
 800ba82:	60fb      	str	r3, [r7, #12]
 800ba84:	68fb      	ldr	r3, [r7, #12]
 800ba86:	4a09      	ldr	r2, [pc, #36]	; (800baac <USB_FlushTxFifo+0x48>)
 800ba88:	4293      	cmp	r3, r2
 800ba8a:	d901      	bls.n	800ba90 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 800ba8c:	2303      	movs	r3, #3
 800ba8e:	e006      	b.n	800ba9e <USB_FlushTxFifo+0x3a>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800ba90:	687b      	ldr	r3, [r7, #4]
 800ba92:	691b      	ldr	r3, [r3, #16]
 800ba94:	f003 0320 	and.w	r3, r3, #32
 800ba98:	2b20      	cmp	r3, #32
 800ba9a:	d0f0      	beq.n	800ba7e <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 800ba9c:	2300      	movs	r3, #0
}
 800ba9e:	4618      	mov	r0, r3
 800baa0:	3714      	adds	r7, #20
 800baa2:	46bd      	mov	sp, r7
 800baa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800baa8:	4770      	bx	lr
 800baaa:	bf00      	nop
 800baac:	00030d40 	.word	0x00030d40

0800bab0 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800bab0:	b480      	push	{r7}
 800bab2:	b085      	sub	sp, #20
 800bab4:	af00      	add	r7, sp, #0
 800bab6:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 800bab8:	2300      	movs	r3, #0
 800baba:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800babc:	687b      	ldr	r3, [r7, #4]
 800babe:	2210      	movs	r2, #16
 800bac0:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800bac2:	68fb      	ldr	r3, [r7, #12]
 800bac4:	3301      	adds	r3, #1
 800bac6:	60fb      	str	r3, [r7, #12]
 800bac8:	68fb      	ldr	r3, [r7, #12]
 800baca:	4a09      	ldr	r2, [pc, #36]	; (800baf0 <USB_FlushRxFifo+0x40>)
 800bacc:	4293      	cmp	r3, r2
 800bace:	d901      	bls.n	800bad4 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 800bad0:	2303      	movs	r3, #3
 800bad2:	e006      	b.n	800bae2 <USB_FlushRxFifo+0x32>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800bad4:	687b      	ldr	r3, [r7, #4]
 800bad6:	691b      	ldr	r3, [r3, #16]
 800bad8:	f003 0310 	and.w	r3, r3, #16
 800badc:	2b10      	cmp	r3, #16
 800bade:	d0f0      	beq.n	800bac2 <USB_FlushRxFifo+0x12>

  return HAL_OK;
 800bae0:	2300      	movs	r3, #0
}
 800bae2:	4618      	mov	r0, r3
 800bae4:	3714      	adds	r7, #20
 800bae6:	46bd      	mov	sp, r7
 800bae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800baec:	4770      	bx	lr
 800baee:	bf00      	nop
 800baf0:	00030d40 	.word	0x00030d40

0800baf4 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800baf4:	b480      	push	{r7}
 800baf6:	b085      	sub	sp, #20
 800baf8:	af00      	add	r7, sp, #0
 800bafa:	6078      	str	r0, [r7, #4]
 800bafc:	460b      	mov	r3, r1
 800bafe:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800bb00:	687b      	ldr	r3, [r7, #4]
 800bb02:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800bb04:	68fb      	ldr	r3, [r7, #12]
 800bb06:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800bb0a:	681a      	ldr	r2, [r3, #0]
 800bb0c:	78fb      	ldrb	r3, [r7, #3]
 800bb0e:	68f9      	ldr	r1, [r7, #12]
 800bb10:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800bb14:	4313      	orrs	r3, r2
 800bb16:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800bb18:	2300      	movs	r3, #0
}
 800bb1a:	4618      	mov	r0, r3
 800bb1c:	3714      	adds	r7, #20
 800bb1e:	46bd      	mov	sp, r7
 800bb20:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb24:	4770      	bx	lr

0800bb26 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 800bb26:	b480      	push	{r7}
 800bb28:	b087      	sub	sp, #28
 800bb2a:	af00      	add	r7, sp, #0
 800bb2c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800bb2e:	687b      	ldr	r3, [r7, #4]
 800bb30:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 800bb32:	693b      	ldr	r3, [r7, #16]
 800bb34:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800bb38:	689b      	ldr	r3, [r3, #8]
 800bb3a:	f003 0306 	and.w	r3, r3, #6
 800bb3e:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 800bb40:	68fb      	ldr	r3, [r7, #12]
 800bb42:	2b00      	cmp	r3, #0
 800bb44:	d102      	bne.n	800bb4c <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 800bb46:	2300      	movs	r3, #0
 800bb48:	75fb      	strb	r3, [r7, #23]
 800bb4a:	e00a      	b.n	800bb62 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 800bb4c:	68fb      	ldr	r3, [r7, #12]
 800bb4e:	2b02      	cmp	r3, #2
 800bb50:	d002      	beq.n	800bb58 <USB_GetDevSpeed+0x32>
 800bb52:	68fb      	ldr	r3, [r7, #12]
 800bb54:	2b06      	cmp	r3, #6
 800bb56:	d102      	bne.n	800bb5e <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 800bb58:	2302      	movs	r3, #2
 800bb5a:	75fb      	strb	r3, [r7, #23]
 800bb5c:	e001      	b.n	800bb62 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 800bb5e:	230f      	movs	r3, #15
 800bb60:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 800bb62:	7dfb      	ldrb	r3, [r7, #23]
}
 800bb64:	4618      	mov	r0, r3
 800bb66:	371c      	adds	r7, #28
 800bb68:	46bd      	mov	sp, r7
 800bb6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb6e:	4770      	bx	lr

0800bb70 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800bb70:	b480      	push	{r7}
 800bb72:	b085      	sub	sp, #20
 800bb74:	af00      	add	r7, sp, #0
 800bb76:	6078      	str	r0, [r7, #4]
 800bb78:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800bb7a:	687b      	ldr	r3, [r7, #4]
 800bb7c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800bb7e:	683b      	ldr	r3, [r7, #0]
 800bb80:	781b      	ldrb	r3, [r3, #0]
 800bb82:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800bb84:	683b      	ldr	r3, [r7, #0]
 800bb86:	785b      	ldrb	r3, [r3, #1]
 800bb88:	2b01      	cmp	r3, #1
 800bb8a:	d139      	bne.n	800bc00 <USB_ActivateEndpoint+0x90>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 800bb8c:	68fb      	ldr	r3, [r7, #12]
 800bb8e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800bb92:	69da      	ldr	r2, [r3, #28]
 800bb94:	683b      	ldr	r3, [r7, #0]
 800bb96:	781b      	ldrb	r3, [r3, #0]
 800bb98:	f003 030f 	and.w	r3, r3, #15
 800bb9c:	2101      	movs	r1, #1
 800bb9e:	fa01 f303 	lsl.w	r3, r1, r3
 800bba2:	b29b      	uxth	r3, r3
 800bba4:	68f9      	ldr	r1, [r7, #12]
 800bba6:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800bbaa:	4313      	orrs	r3, r2
 800bbac:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 800bbae:	68bb      	ldr	r3, [r7, #8]
 800bbb0:	015a      	lsls	r2, r3, #5
 800bbb2:	68fb      	ldr	r3, [r7, #12]
 800bbb4:	4413      	add	r3, r2
 800bbb6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bbba:	681b      	ldr	r3, [r3, #0]
 800bbbc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800bbc0:	2b00      	cmp	r3, #0
 800bbc2:	d153      	bne.n	800bc6c <USB_ActivateEndpoint+0xfc>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800bbc4:	68bb      	ldr	r3, [r7, #8]
 800bbc6:	015a      	lsls	r2, r3, #5
 800bbc8:	68fb      	ldr	r3, [r7, #12]
 800bbca:	4413      	add	r3, r2
 800bbcc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bbd0:	681a      	ldr	r2, [r3, #0]
 800bbd2:	683b      	ldr	r3, [r7, #0]
 800bbd4:	689b      	ldr	r3, [r3, #8]
 800bbd6:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800bbda:	683b      	ldr	r3, [r7, #0]
 800bbdc:	78db      	ldrb	r3, [r3, #3]
 800bbde:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800bbe0:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800bbe2:	68bb      	ldr	r3, [r7, #8]
 800bbe4:	059b      	lsls	r3, r3, #22
 800bbe6:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800bbe8:	431a      	orrs	r2, r3
 800bbea:	68bb      	ldr	r3, [r7, #8]
 800bbec:	0159      	lsls	r1, r3, #5
 800bbee:	68fb      	ldr	r3, [r7, #12]
 800bbf0:	440b      	add	r3, r1
 800bbf2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bbf6:	4619      	mov	r1, r3
 800bbf8:	4b20      	ldr	r3, [pc, #128]	; (800bc7c <USB_ActivateEndpoint+0x10c>)
 800bbfa:	4313      	orrs	r3, r2
 800bbfc:	600b      	str	r3, [r1, #0]
 800bbfe:	e035      	b.n	800bc6c <USB_ActivateEndpoint+0xfc>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 800bc00:	68fb      	ldr	r3, [r7, #12]
 800bc02:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800bc06:	69da      	ldr	r2, [r3, #28]
 800bc08:	683b      	ldr	r3, [r7, #0]
 800bc0a:	781b      	ldrb	r3, [r3, #0]
 800bc0c:	f003 030f 	and.w	r3, r3, #15
 800bc10:	2101      	movs	r1, #1
 800bc12:	fa01 f303 	lsl.w	r3, r1, r3
 800bc16:	041b      	lsls	r3, r3, #16
 800bc18:	68f9      	ldr	r1, [r7, #12]
 800bc1a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800bc1e:	4313      	orrs	r3, r2
 800bc20:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 800bc22:	68bb      	ldr	r3, [r7, #8]
 800bc24:	015a      	lsls	r2, r3, #5
 800bc26:	68fb      	ldr	r3, [r7, #12]
 800bc28:	4413      	add	r3, r2
 800bc2a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bc2e:	681b      	ldr	r3, [r3, #0]
 800bc30:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800bc34:	2b00      	cmp	r3, #0
 800bc36:	d119      	bne.n	800bc6c <USB_ActivateEndpoint+0xfc>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800bc38:	68bb      	ldr	r3, [r7, #8]
 800bc3a:	015a      	lsls	r2, r3, #5
 800bc3c:	68fb      	ldr	r3, [r7, #12]
 800bc3e:	4413      	add	r3, r2
 800bc40:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bc44:	681a      	ldr	r2, [r3, #0]
 800bc46:	683b      	ldr	r3, [r7, #0]
 800bc48:	689b      	ldr	r3, [r3, #8]
 800bc4a:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 800bc4e:	683b      	ldr	r3, [r7, #0]
 800bc50:	78db      	ldrb	r3, [r3, #3]
 800bc52:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800bc54:	430b      	orrs	r3, r1
 800bc56:	431a      	orrs	r2, r3
 800bc58:	68bb      	ldr	r3, [r7, #8]
 800bc5a:	0159      	lsls	r1, r3, #5
 800bc5c:	68fb      	ldr	r3, [r7, #12]
 800bc5e:	440b      	add	r3, r1
 800bc60:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bc64:	4619      	mov	r1, r3
 800bc66:	4b05      	ldr	r3, [pc, #20]	; (800bc7c <USB_ActivateEndpoint+0x10c>)
 800bc68:	4313      	orrs	r3, r2
 800bc6a:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 800bc6c:	2300      	movs	r3, #0
}
 800bc6e:	4618      	mov	r0, r3
 800bc70:	3714      	adds	r7, #20
 800bc72:	46bd      	mov	sp, r7
 800bc74:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc78:	4770      	bx	lr
 800bc7a:	bf00      	nop
 800bc7c:	10008000 	.word	0x10008000

0800bc80 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800bc80:	b480      	push	{r7}
 800bc82:	b085      	sub	sp, #20
 800bc84:	af00      	add	r7, sp, #0
 800bc86:	6078      	str	r0, [r7, #4]
 800bc88:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800bc8a:	687b      	ldr	r3, [r7, #4]
 800bc8c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800bc8e:	683b      	ldr	r3, [r7, #0]
 800bc90:	781b      	ldrb	r3, [r3, #0]
 800bc92:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 800bc94:	683b      	ldr	r3, [r7, #0]
 800bc96:	785b      	ldrb	r3, [r3, #1]
 800bc98:	2b01      	cmp	r3, #1
 800bc9a:	d161      	bne.n	800bd60 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800bc9c:	68bb      	ldr	r3, [r7, #8]
 800bc9e:	015a      	lsls	r2, r3, #5
 800bca0:	68fb      	ldr	r3, [r7, #12]
 800bca2:	4413      	add	r3, r2
 800bca4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bca8:	681b      	ldr	r3, [r3, #0]
 800bcaa:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800bcae:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800bcb2:	d11f      	bne.n	800bcf4 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 800bcb4:	68bb      	ldr	r3, [r7, #8]
 800bcb6:	015a      	lsls	r2, r3, #5
 800bcb8:	68fb      	ldr	r3, [r7, #12]
 800bcba:	4413      	add	r3, r2
 800bcbc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bcc0:	681b      	ldr	r3, [r3, #0]
 800bcc2:	68ba      	ldr	r2, [r7, #8]
 800bcc4:	0151      	lsls	r1, r2, #5
 800bcc6:	68fa      	ldr	r2, [r7, #12]
 800bcc8:	440a      	add	r2, r1
 800bcca:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800bcce:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800bcd2:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 800bcd4:	68bb      	ldr	r3, [r7, #8]
 800bcd6:	015a      	lsls	r2, r3, #5
 800bcd8:	68fb      	ldr	r3, [r7, #12]
 800bcda:	4413      	add	r3, r2
 800bcdc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bce0:	681b      	ldr	r3, [r3, #0]
 800bce2:	68ba      	ldr	r2, [r7, #8]
 800bce4:	0151      	lsls	r1, r2, #5
 800bce6:	68fa      	ldr	r2, [r7, #12]
 800bce8:	440a      	add	r2, r1
 800bcea:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800bcee:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800bcf2:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800bcf4:	68fb      	ldr	r3, [r7, #12]
 800bcf6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800bcfa:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800bcfc:	683b      	ldr	r3, [r7, #0]
 800bcfe:	781b      	ldrb	r3, [r3, #0]
 800bd00:	f003 030f 	and.w	r3, r3, #15
 800bd04:	2101      	movs	r1, #1
 800bd06:	fa01 f303 	lsl.w	r3, r1, r3
 800bd0a:	b29b      	uxth	r3, r3
 800bd0c:	43db      	mvns	r3, r3
 800bd0e:	68f9      	ldr	r1, [r7, #12]
 800bd10:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800bd14:	4013      	ands	r3, r2
 800bd16:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800bd18:	68fb      	ldr	r3, [r7, #12]
 800bd1a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800bd1e:	69da      	ldr	r2, [r3, #28]
 800bd20:	683b      	ldr	r3, [r7, #0]
 800bd22:	781b      	ldrb	r3, [r3, #0]
 800bd24:	f003 030f 	and.w	r3, r3, #15
 800bd28:	2101      	movs	r1, #1
 800bd2a:	fa01 f303 	lsl.w	r3, r1, r3
 800bd2e:	b29b      	uxth	r3, r3
 800bd30:	43db      	mvns	r3, r3
 800bd32:	68f9      	ldr	r1, [r7, #12]
 800bd34:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800bd38:	4013      	ands	r3, r2
 800bd3a:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 800bd3c:	68bb      	ldr	r3, [r7, #8]
 800bd3e:	015a      	lsls	r2, r3, #5
 800bd40:	68fb      	ldr	r3, [r7, #12]
 800bd42:	4413      	add	r3, r2
 800bd44:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bd48:	681a      	ldr	r2, [r3, #0]
 800bd4a:	68bb      	ldr	r3, [r7, #8]
 800bd4c:	0159      	lsls	r1, r3, #5
 800bd4e:	68fb      	ldr	r3, [r7, #12]
 800bd50:	440b      	add	r3, r1
 800bd52:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bd56:	4619      	mov	r1, r3
 800bd58:	4b35      	ldr	r3, [pc, #212]	; (800be30 <USB_DeactivateEndpoint+0x1b0>)
 800bd5a:	4013      	ands	r3, r2
 800bd5c:	600b      	str	r3, [r1, #0]
 800bd5e:	e060      	b.n	800be22 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800bd60:	68bb      	ldr	r3, [r7, #8]
 800bd62:	015a      	lsls	r2, r3, #5
 800bd64:	68fb      	ldr	r3, [r7, #12]
 800bd66:	4413      	add	r3, r2
 800bd68:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bd6c:	681b      	ldr	r3, [r3, #0]
 800bd6e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800bd72:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800bd76:	d11f      	bne.n	800bdb8 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800bd78:	68bb      	ldr	r3, [r7, #8]
 800bd7a:	015a      	lsls	r2, r3, #5
 800bd7c:	68fb      	ldr	r3, [r7, #12]
 800bd7e:	4413      	add	r3, r2
 800bd80:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bd84:	681b      	ldr	r3, [r3, #0]
 800bd86:	68ba      	ldr	r2, [r7, #8]
 800bd88:	0151      	lsls	r1, r2, #5
 800bd8a:	68fa      	ldr	r2, [r7, #12]
 800bd8c:	440a      	add	r2, r1
 800bd8e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800bd92:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800bd96:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 800bd98:	68bb      	ldr	r3, [r7, #8]
 800bd9a:	015a      	lsls	r2, r3, #5
 800bd9c:	68fb      	ldr	r3, [r7, #12]
 800bd9e:	4413      	add	r3, r2
 800bda0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bda4:	681b      	ldr	r3, [r3, #0]
 800bda6:	68ba      	ldr	r2, [r7, #8]
 800bda8:	0151      	lsls	r1, r2, #5
 800bdaa:	68fa      	ldr	r2, [r7, #12]
 800bdac:	440a      	add	r2, r1
 800bdae:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800bdb2:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800bdb6:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800bdb8:	68fb      	ldr	r3, [r7, #12]
 800bdba:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800bdbe:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800bdc0:	683b      	ldr	r3, [r7, #0]
 800bdc2:	781b      	ldrb	r3, [r3, #0]
 800bdc4:	f003 030f 	and.w	r3, r3, #15
 800bdc8:	2101      	movs	r1, #1
 800bdca:	fa01 f303 	lsl.w	r3, r1, r3
 800bdce:	041b      	lsls	r3, r3, #16
 800bdd0:	43db      	mvns	r3, r3
 800bdd2:	68f9      	ldr	r1, [r7, #12]
 800bdd4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800bdd8:	4013      	ands	r3, r2
 800bdda:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800bddc:	68fb      	ldr	r3, [r7, #12]
 800bdde:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800bde2:	69da      	ldr	r2, [r3, #28]
 800bde4:	683b      	ldr	r3, [r7, #0]
 800bde6:	781b      	ldrb	r3, [r3, #0]
 800bde8:	f003 030f 	and.w	r3, r3, #15
 800bdec:	2101      	movs	r1, #1
 800bdee:	fa01 f303 	lsl.w	r3, r1, r3
 800bdf2:	041b      	lsls	r3, r3, #16
 800bdf4:	43db      	mvns	r3, r3
 800bdf6:	68f9      	ldr	r1, [r7, #12]
 800bdf8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800bdfc:	4013      	ands	r3, r2
 800bdfe:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 800be00:	68bb      	ldr	r3, [r7, #8]
 800be02:	015a      	lsls	r2, r3, #5
 800be04:	68fb      	ldr	r3, [r7, #12]
 800be06:	4413      	add	r3, r2
 800be08:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800be0c:	681a      	ldr	r2, [r3, #0]
 800be0e:	68bb      	ldr	r3, [r7, #8]
 800be10:	0159      	lsls	r1, r3, #5
 800be12:	68fb      	ldr	r3, [r7, #12]
 800be14:	440b      	add	r3, r1
 800be16:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800be1a:	4619      	mov	r1, r3
 800be1c:	4b05      	ldr	r3, [pc, #20]	; (800be34 <USB_DeactivateEndpoint+0x1b4>)
 800be1e:	4013      	ands	r3, r2
 800be20:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 800be22:	2300      	movs	r3, #0
}
 800be24:	4618      	mov	r0, r3
 800be26:	3714      	adds	r7, #20
 800be28:	46bd      	mov	sp, r7
 800be2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be2e:	4770      	bx	lr
 800be30:	ec337800 	.word	0xec337800
 800be34:	eff37800 	.word	0xeff37800

0800be38 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800be38:	b580      	push	{r7, lr}
 800be3a:	b08a      	sub	sp, #40	; 0x28
 800be3c:	af02      	add	r7, sp, #8
 800be3e:	60f8      	str	r0, [r7, #12]
 800be40:	60b9      	str	r1, [r7, #8]
 800be42:	4613      	mov	r3, r2
 800be44:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800be46:	68fb      	ldr	r3, [r7, #12]
 800be48:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 800be4a:	68bb      	ldr	r3, [r7, #8]
 800be4c:	781b      	ldrb	r3, [r3, #0]
 800be4e:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 800be50:	68bb      	ldr	r3, [r7, #8]
 800be52:	785b      	ldrb	r3, [r3, #1]
 800be54:	2b01      	cmp	r3, #1
 800be56:	f040 8163 	bne.w	800c120 <USB_EPStartXfer+0x2e8>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800be5a:	68bb      	ldr	r3, [r7, #8]
 800be5c:	695b      	ldr	r3, [r3, #20]
 800be5e:	2b00      	cmp	r3, #0
 800be60:	d132      	bne.n	800bec8 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800be62:	69bb      	ldr	r3, [r7, #24]
 800be64:	015a      	lsls	r2, r3, #5
 800be66:	69fb      	ldr	r3, [r7, #28]
 800be68:	4413      	add	r3, r2
 800be6a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800be6e:	691a      	ldr	r2, [r3, #16]
 800be70:	69bb      	ldr	r3, [r7, #24]
 800be72:	0159      	lsls	r1, r3, #5
 800be74:	69fb      	ldr	r3, [r7, #28]
 800be76:	440b      	add	r3, r1
 800be78:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800be7c:	4619      	mov	r1, r3
 800be7e:	4ba5      	ldr	r3, [pc, #660]	; (800c114 <USB_EPStartXfer+0x2dc>)
 800be80:	4013      	ands	r3, r2
 800be82:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800be84:	69bb      	ldr	r3, [r7, #24]
 800be86:	015a      	lsls	r2, r3, #5
 800be88:	69fb      	ldr	r3, [r7, #28]
 800be8a:	4413      	add	r3, r2
 800be8c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800be90:	691b      	ldr	r3, [r3, #16]
 800be92:	69ba      	ldr	r2, [r7, #24]
 800be94:	0151      	lsls	r1, r2, #5
 800be96:	69fa      	ldr	r2, [r7, #28]
 800be98:	440a      	add	r2, r1
 800be9a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800be9e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800bea2:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800bea4:	69bb      	ldr	r3, [r7, #24]
 800bea6:	015a      	lsls	r2, r3, #5
 800bea8:	69fb      	ldr	r3, [r7, #28]
 800beaa:	4413      	add	r3, r2
 800beac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800beb0:	691a      	ldr	r2, [r3, #16]
 800beb2:	69bb      	ldr	r3, [r7, #24]
 800beb4:	0159      	lsls	r1, r3, #5
 800beb6:	69fb      	ldr	r3, [r7, #28]
 800beb8:	440b      	add	r3, r1
 800beba:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bebe:	4619      	mov	r1, r3
 800bec0:	4b95      	ldr	r3, [pc, #596]	; (800c118 <USB_EPStartXfer+0x2e0>)
 800bec2:	4013      	ands	r3, r2
 800bec4:	610b      	str	r3, [r1, #16]
 800bec6:	e074      	b.n	800bfb2 <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800bec8:	69bb      	ldr	r3, [r7, #24]
 800beca:	015a      	lsls	r2, r3, #5
 800becc:	69fb      	ldr	r3, [r7, #28]
 800bece:	4413      	add	r3, r2
 800bed0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bed4:	691a      	ldr	r2, [r3, #16]
 800bed6:	69bb      	ldr	r3, [r7, #24]
 800bed8:	0159      	lsls	r1, r3, #5
 800beda:	69fb      	ldr	r3, [r7, #28]
 800bedc:	440b      	add	r3, r1
 800bede:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bee2:	4619      	mov	r1, r3
 800bee4:	4b8c      	ldr	r3, [pc, #560]	; (800c118 <USB_EPStartXfer+0x2e0>)
 800bee6:	4013      	ands	r3, r2
 800bee8:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800beea:	69bb      	ldr	r3, [r7, #24]
 800beec:	015a      	lsls	r2, r3, #5
 800beee:	69fb      	ldr	r3, [r7, #28]
 800bef0:	4413      	add	r3, r2
 800bef2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bef6:	691a      	ldr	r2, [r3, #16]
 800bef8:	69bb      	ldr	r3, [r7, #24]
 800befa:	0159      	lsls	r1, r3, #5
 800befc:	69fb      	ldr	r3, [r7, #28]
 800befe:	440b      	add	r3, r1
 800bf00:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bf04:	4619      	mov	r1, r3
 800bf06:	4b83      	ldr	r3, [pc, #524]	; (800c114 <USB_EPStartXfer+0x2dc>)
 800bf08:	4013      	ands	r3, r2
 800bf0a:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 800bf0c:	69bb      	ldr	r3, [r7, #24]
 800bf0e:	015a      	lsls	r2, r3, #5
 800bf10:	69fb      	ldr	r3, [r7, #28]
 800bf12:	4413      	add	r3, r2
 800bf14:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bf18:	691a      	ldr	r2, [r3, #16]
 800bf1a:	68bb      	ldr	r3, [r7, #8]
 800bf1c:	6959      	ldr	r1, [r3, #20]
 800bf1e:	68bb      	ldr	r3, [r7, #8]
 800bf20:	689b      	ldr	r3, [r3, #8]
 800bf22:	440b      	add	r3, r1
 800bf24:	1e59      	subs	r1, r3, #1
 800bf26:	68bb      	ldr	r3, [r7, #8]
 800bf28:	689b      	ldr	r3, [r3, #8]
 800bf2a:	fbb1 f3f3 	udiv	r3, r1, r3
 800bf2e:	04d9      	lsls	r1, r3, #19
 800bf30:	4b7a      	ldr	r3, [pc, #488]	; (800c11c <USB_EPStartXfer+0x2e4>)
 800bf32:	400b      	ands	r3, r1
 800bf34:	69b9      	ldr	r1, [r7, #24]
 800bf36:	0148      	lsls	r0, r1, #5
 800bf38:	69f9      	ldr	r1, [r7, #28]
 800bf3a:	4401      	add	r1, r0
 800bf3c:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800bf40:	4313      	orrs	r3, r2
 800bf42:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800bf44:	69bb      	ldr	r3, [r7, #24]
 800bf46:	015a      	lsls	r2, r3, #5
 800bf48:	69fb      	ldr	r3, [r7, #28]
 800bf4a:	4413      	add	r3, r2
 800bf4c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bf50:	691a      	ldr	r2, [r3, #16]
 800bf52:	68bb      	ldr	r3, [r7, #8]
 800bf54:	695b      	ldr	r3, [r3, #20]
 800bf56:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800bf5a:	69b9      	ldr	r1, [r7, #24]
 800bf5c:	0148      	lsls	r0, r1, #5
 800bf5e:	69f9      	ldr	r1, [r7, #28]
 800bf60:	4401      	add	r1, r0
 800bf62:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800bf66:	4313      	orrs	r3, r2
 800bf68:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 800bf6a:	68bb      	ldr	r3, [r7, #8]
 800bf6c:	78db      	ldrb	r3, [r3, #3]
 800bf6e:	2b01      	cmp	r3, #1
 800bf70:	d11f      	bne.n	800bfb2 <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 800bf72:	69bb      	ldr	r3, [r7, #24]
 800bf74:	015a      	lsls	r2, r3, #5
 800bf76:	69fb      	ldr	r3, [r7, #28]
 800bf78:	4413      	add	r3, r2
 800bf7a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bf7e:	691b      	ldr	r3, [r3, #16]
 800bf80:	69ba      	ldr	r2, [r7, #24]
 800bf82:	0151      	lsls	r1, r2, #5
 800bf84:	69fa      	ldr	r2, [r7, #28]
 800bf86:	440a      	add	r2, r1
 800bf88:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800bf8c:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 800bf90:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 800bf92:	69bb      	ldr	r3, [r7, #24]
 800bf94:	015a      	lsls	r2, r3, #5
 800bf96:	69fb      	ldr	r3, [r7, #28]
 800bf98:	4413      	add	r3, r2
 800bf9a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bf9e:	691b      	ldr	r3, [r3, #16]
 800bfa0:	69ba      	ldr	r2, [r7, #24]
 800bfa2:	0151      	lsls	r1, r2, #5
 800bfa4:	69fa      	ldr	r2, [r7, #28]
 800bfa6:	440a      	add	r2, r1
 800bfa8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800bfac:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800bfb0:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 800bfb2:	79fb      	ldrb	r3, [r7, #7]
 800bfb4:	2b01      	cmp	r3, #1
 800bfb6:	d14b      	bne.n	800c050 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800bfb8:	68bb      	ldr	r3, [r7, #8]
 800bfba:	691b      	ldr	r3, [r3, #16]
 800bfbc:	2b00      	cmp	r3, #0
 800bfbe:	d009      	beq.n	800bfd4 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800bfc0:	69bb      	ldr	r3, [r7, #24]
 800bfc2:	015a      	lsls	r2, r3, #5
 800bfc4:	69fb      	ldr	r3, [r7, #28]
 800bfc6:	4413      	add	r3, r2
 800bfc8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bfcc:	461a      	mov	r2, r3
 800bfce:	68bb      	ldr	r3, [r7, #8]
 800bfd0:	691b      	ldr	r3, [r3, #16]
 800bfd2:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 800bfd4:	68bb      	ldr	r3, [r7, #8]
 800bfd6:	78db      	ldrb	r3, [r3, #3]
 800bfd8:	2b01      	cmp	r3, #1
 800bfda:	d128      	bne.n	800c02e <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800bfdc:	69fb      	ldr	r3, [r7, #28]
 800bfde:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800bfe2:	689b      	ldr	r3, [r3, #8]
 800bfe4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800bfe8:	2b00      	cmp	r3, #0
 800bfea:	d110      	bne.n	800c00e <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800bfec:	69bb      	ldr	r3, [r7, #24]
 800bfee:	015a      	lsls	r2, r3, #5
 800bff0:	69fb      	ldr	r3, [r7, #28]
 800bff2:	4413      	add	r3, r2
 800bff4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bff8:	681b      	ldr	r3, [r3, #0]
 800bffa:	69ba      	ldr	r2, [r7, #24]
 800bffc:	0151      	lsls	r1, r2, #5
 800bffe:	69fa      	ldr	r2, [r7, #28]
 800c000:	440a      	add	r2, r1
 800c002:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c006:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800c00a:	6013      	str	r3, [r2, #0]
 800c00c:	e00f      	b.n	800c02e <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800c00e:	69bb      	ldr	r3, [r7, #24]
 800c010:	015a      	lsls	r2, r3, #5
 800c012:	69fb      	ldr	r3, [r7, #28]
 800c014:	4413      	add	r3, r2
 800c016:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c01a:	681b      	ldr	r3, [r3, #0]
 800c01c:	69ba      	ldr	r2, [r7, #24]
 800c01e:	0151      	lsls	r1, r2, #5
 800c020:	69fa      	ldr	r2, [r7, #28]
 800c022:	440a      	add	r2, r1
 800c024:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c028:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800c02c:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800c02e:	69bb      	ldr	r3, [r7, #24]
 800c030:	015a      	lsls	r2, r3, #5
 800c032:	69fb      	ldr	r3, [r7, #28]
 800c034:	4413      	add	r3, r2
 800c036:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c03a:	681b      	ldr	r3, [r3, #0]
 800c03c:	69ba      	ldr	r2, [r7, #24]
 800c03e:	0151      	lsls	r1, r2, #5
 800c040:	69fa      	ldr	r2, [r7, #28]
 800c042:	440a      	add	r2, r1
 800c044:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c048:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800c04c:	6013      	str	r3, [r2, #0]
 800c04e:	e133      	b.n	800c2b8 <USB_EPStartXfer+0x480>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800c050:	69bb      	ldr	r3, [r7, #24]
 800c052:	015a      	lsls	r2, r3, #5
 800c054:	69fb      	ldr	r3, [r7, #28]
 800c056:	4413      	add	r3, r2
 800c058:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c05c:	681b      	ldr	r3, [r3, #0]
 800c05e:	69ba      	ldr	r2, [r7, #24]
 800c060:	0151      	lsls	r1, r2, #5
 800c062:	69fa      	ldr	r2, [r7, #28]
 800c064:	440a      	add	r2, r1
 800c066:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c06a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800c06e:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800c070:	68bb      	ldr	r3, [r7, #8]
 800c072:	78db      	ldrb	r3, [r3, #3]
 800c074:	2b01      	cmp	r3, #1
 800c076:	d015      	beq.n	800c0a4 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 800c078:	68bb      	ldr	r3, [r7, #8]
 800c07a:	695b      	ldr	r3, [r3, #20]
 800c07c:	2b00      	cmp	r3, #0
 800c07e:	f000 811b 	beq.w	800c2b8 <USB_EPStartXfer+0x480>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800c082:	69fb      	ldr	r3, [r7, #28]
 800c084:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c088:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800c08a:	68bb      	ldr	r3, [r7, #8]
 800c08c:	781b      	ldrb	r3, [r3, #0]
 800c08e:	f003 030f 	and.w	r3, r3, #15
 800c092:	2101      	movs	r1, #1
 800c094:	fa01 f303 	lsl.w	r3, r1, r3
 800c098:	69f9      	ldr	r1, [r7, #28]
 800c09a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800c09e:	4313      	orrs	r3, r2
 800c0a0:	634b      	str	r3, [r1, #52]	; 0x34
 800c0a2:	e109      	b.n	800c2b8 <USB_EPStartXfer+0x480>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800c0a4:	69fb      	ldr	r3, [r7, #28]
 800c0a6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c0aa:	689b      	ldr	r3, [r3, #8]
 800c0ac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c0b0:	2b00      	cmp	r3, #0
 800c0b2:	d110      	bne.n	800c0d6 <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800c0b4:	69bb      	ldr	r3, [r7, #24]
 800c0b6:	015a      	lsls	r2, r3, #5
 800c0b8:	69fb      	ldr	r3, [r7, #28]
 800c0ba:	4413      	add	r3, r2
 800c0bc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c0c0:	681b      	ldr	r3, [r3, #0]
 800c0c2:	69ba      	ldr	r2, [r7, #24]
 800c0c4:	0151      	lsls	r1, r2, #5
 800c0c6:	69fa      	ldr	r2, [r7, #28]
 800c0c8:	440a      	add	r2, r1
 800c0ca:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c0ce:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800c0d2:	6013      	str	r3, [r2, #0]
 800c0d4:	e00f      	b.n	800c0f6 <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800c0d6:	69bb      	ldr	r3, [r7, #24]
 800c0d8:	015a      	lsls	r2, r3, #5
 800c0da:	69fb      	ldr	r3, [r7, #28]
 800c0dc:	4413      	add	r3, r2
 800c0de:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c0e2:	681b      	ldr	r3, [r3, #0]
 800c0e4:	69ba      	ldr	r2, [r7, #24]
 800c0e6:	0151      	lsls	r1, r2, #5
 800c0e8:	69fa      	ldr	r2, [r7, #28]
 800c0ea:	440a      	add	r2, r1
 800c0ec:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c0f0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800c0f4:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 800c0f6:	68bb      	ldr	r3, [r7, #8]
 800c0f8:	68d9      	ldr	r1, [r3, #12]
 800c0fa:	68bb      	ldr	r3, [r7, #8]
 800c0fc:	781a      	ldrb	r2, [r3, #0]
 800c0fe:	68bb      	ldr	r3, [r7, #8]
 800c100:	695b      	ldr	r3, [r3, #20]
 800c102:	b298      	uxth	r0, r3
 800c104:	79fb      	ldrb	r3, [r7, #7]
 800c106:	9300      	str	r3, [sp, #0]
 800c108:	4603      	mov	r3, r0
 800c10a:	68f8      	ldr	r0, [r7, #12]
 800c10c:	f000 fa38 	bl	800c580 <USB_WritePacket>
 800c110:	e0d2      	b.n	800c2b8 <USB_EPStartXfer+0x480>
 800c112:	bf00      	nop
 800c114:	e007ffff 	.word	0xe007ffff
 800c118:	fff80000 	.word	0xfff80000
 800c11c:	1ff80000 	.word	0x1ff80000
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800c120:	69bb      	ldr	r3, [r7, #24]
 800c122:	015a      	lsls	r2, r3, #5
 800c124:	69fb      	ldr	r3, [r7, #28]
 800c126:	4413      	add	r3, r2
 800c128:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c12c:	691a      	ldr	r2, [r3, #16]
 800c12e:	69bb      	ldr	r3, [r7, #24]
 800c130:	0159      	lsls	r1, r3, #5
 800c132:	69fb      	ldr	r3, [r7, #28]
 800c134:	440b      	add	r3, r1
 800c136:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c13a:	4619      	mov	r1, r3
 800c13c:	4b61      	ldr	r3, [pc, #388]	; (800c2c4 <USB_EPStartXfer+0x48c>)
 800c13e:	4013      	ands	r3, r2
 800c140:	610b      	str	r3, [r1, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800c142:	69bb      	ldr	r3, [r7, #24]
 800c144:	015a      	lsls	r2, r3, #5
 800c146:	69fb      	ldr	r3, [r7, #28]
 800c148:	4413      	add	r3, r2
 800c14a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c14e:	691a      	ldr	r2, [r3, #16]
 800c150:	69bb      	ldr	r3, [r7, #24]
 800c152:	0159      	lsls	r1, r3, #5
 800c154:	69fb      	ldr	r3, [r7, #28]
 800c156:	440b      	add	r3, r1
 800c158:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c15c:	4619      	mov	r1, r3
 800c15e:	4b5a      	ldr	r3, [pc, #360]	; (800c2c8 <USB_EPStartXfer+0x490>)
 800c160:	4013      	ands	r3, r2
 800c162:	610b      	str	r3, [r1, #16]

    if (ep->xfer_len == 0U)
 800c164:	68bb      	ldr	r3, [r7, #8]
 800c166:	695b      	ldr	r3, [r3, #20]
 800c168:	2b00      	cmp	r3, #0
 800c16a:	d123      	bne.n	800c1b4 <USB_EPStartXfer+0x37c>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 800c16c:	69bb      	ldr	r3, [r7, #24]
 800c16e:	015a      	lsls	r2, r3, #5
 800c170:	69fb      	ldr	r3, [r7, #28]
 800c172:	4413      	add	r3, r2
 800c174:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c178:	691a      	ldr	r2, [r3, #16]
 800c17a:	68bb      	ldr	r3, [r7, #8]
 800c17c:	689b      	ldr	r3, [r3, #8]
 800c17e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800c182:	69b9      	ldr	r1, [r7, #24]
 800c184:	0148      	lsls	r0, r1, #5
 800c186:	69f9      	ldr	r1, [r7, #28]
 800c188:	4401      	add	r1, r0
 800c18a:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800c18e:	4313      	orrs	r3, r2
 800c190:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800c192:	69bb      	ldr	r3, [r7, #24]
 800c194:	015a      	lsls	r2, r3, #5
 800c196:	69fb      	ldr	r3, [r7, #28]
 800c198:	4413      	add	r3, r2
 800c19a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c19e:	691b      	ldr	r3, [r3, #16]
 800c1a0:	69ba      	ldr	r2, [r7, #24]
 800c1a2:	0151      	lsls	r1, r2, #5
 800c1a4:	69fa      	ldr	r2, [r7, #28]
 800c1a6:	440a      	add	r2, r1
 800c1a8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800c1ac:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800c1b0:	6113      	str	r3, [r2, #16]
 800c1b2:	e033      	b.n	800c21c <USB_EPStartXfer+0x3e4>
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 800c1b4:	68bb      	ldr	r3, [r7, #8]
 800c1b6:	695a      	ldr	r2, [r3, #20]
 800c1b8:	68bb      	ldr	r3, [r7, #8]
 800c1ba:	689b      	ldr	r3, [r3, #8]
 800c1bc:	4413      	add	r3, r2
 800c1be:	1e5a      	subs	r2, r3, #1
 800c1c0:	68bb      	ldr	r3, [r7, #8]
 800c1c2:	689b      	ldr	r3, [r3, #8]
 800c1c4:	fbb2 f3f3 	udiv	r3, r2, r3
 800c1c8:	82fb      	strh	r3, [r7, #22]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 800c1ca:	69bb      	ldr	r3, [r7, #24]
 800c1cc:	015a      	lsls	r2, r3, #5
 800c1ce:	69fb      	ldr	r3, [r7, #28]
 800c1d0:	4413      	add	r3, r2
 800c1d2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c1d6:	691a      	ldr	r2, [r3, #16]
 800c1d8:	8afb      	ldrh	r3, [r7, #22]
 800c1da:	04d9      	lsls	r1, r3, #19
 800c1dc:	4b3b      	ldr	r3, [pc, #236]	; (800c2cc <USB_EPStartXfer+0x494>)
 800c1de:	400b      	ands	r3, r1
 800c1e0:	69b9      	ldr	r1, [r7, #24]
 800c1e2:	0148      	lsls	r0, r1, #5
 800c1e4:	69f9      	ldr	r1, [r7, #28]
 800c1e6:	4401      	add	r1, r0
 800c1e8:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800c1ec:	4313      	orrs	r3, r2
 800c1ee:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 800c1f0:	69bb      	ldr	r3, [r7, #24]
 800c1f2:	015a      	lsls	r2, r3, #5
 800c1f4:	69fb      	ldr	r3, [r7, #28]
 800c1f6:	4413      	add	r3, r2
 800c1f8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c1fc:	691a      	ldr	r2, [r3, #16]
 800c1fe:	68bb      	ldr	r3, [r7, #8]
 800c200:	689b      	ldr	r3, [r3, #8]
 800c202:	8af9      	ldrh	r1, [r7, #22]
 800c204:	fb01 f303 	mul.w	r3, r1, r3
 800c208:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800c20c:	69b9      	ldr	r1, [r7, #24]
 800c20e:	0148      	lsls	r0, r1, #5
 800c210:	69f9      	ldr	r1, [r7, #28]
 800c212:	4401      	add	r1, r0
 800c214:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800c218:	4313      	orrs	r3, r2
 800c21a:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800c21c:	79fb      	ldrb	r3, [r7, #7]
 800c21e:	2b01      	cmp	r3, #1
 800c220:	d10d      	bne.n	800c23e <USB_EPStartXfer+0x406>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800c222:	68bb      	ldr	r3, [r7, #8]
 800c224:	68db      	ldr	r3, [r3, #12]
 800c226:	2b00      	cmp	r3, #0
 800c228:	d009      	beq.n	800c23e <USB_EPStartXfer+0x406>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800c22a:	68bb      	ldr	r3, [r7, #8]
 800c22c:	68d9      	ldr	r1, [r3, #12]
 800c22e:	69bb      	ldr	r3, [r7, #24]
 800c230:	015a      	lsls	r2, r3, #5
 800c232:	69fb      	ldr	r3, [r7, #28]
 800c234:	4413      	add	r3, r2
 800c236:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c23a:	460a      	mov	r2, r1
 800c23c:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 800c23e:	68bb      	ldr	r3, [r7, #8]
 800c240:	78db      	ldrb	r3, [r3, #3]
 800c242:	2b01      	cmp	r3, #1
 800c244:	d128      	bne.n	800c298 <USB_EPStartXfer+0x460>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800c246:	69fb      	ldr	r3, [r7, #28]
 800c248:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c24c:	689b      	ldr	r3, [r3, #8]
 800c24e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c252:	2b00      	cmp	r3, #0
 800c254:	d110      	bne.n	800c278 <USB_EPStartXfer+0x440>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 800c256:	69bb      	ldr	r3, [r7, #24]
 800c258:	015a      	lsls	r2, r3, #5
 800c25a:	69fb      	ldr	r3, [r7, #28]
 800c25c:	4413      	add	r3, r2
 800c25e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c262:	681b      	ldr	r3, [r3, #0]
 800c264:	69ba      	ldr	r2, [r7, #24]
 800c266:	0151      	lsls	r1, r2, #5
 800c268:	69fa      	ldr	r2, [r7, #28]
 800c26a:	440a      	add	r2, r1
 800c26c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800c270:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800c274:	6013      	str	r3, [r2, #0]
 800c276:	e00f      	b.n	800c298 <USB_EPStartXfer+0x460>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 800c278:	69bb      	ldr	r3, [r7, #24]
 800c27a:	015a      	lsls	r2, r3, #5
 800c27c:	69fb      	ldr	r3, [r7, #28]
 800c27e:	4413      	add	r3, r2
 800c280:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c284:	681b      	ldr	r3, [r3, #0]
 800c286:	69ba      	ldr	r2, [r7, #24]
 800c288:	0151      	lsls	r1, r2, #5
 800c28a:	69fa      	ldr	r2, [r7, #28]
 800c28c:	440a      	add	r2, r1
 800c28e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800c292:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800c296:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800c298:	69bb      	ldr	r3, [r7, #24]
 800c29a:	015a      	lsls	r2, r3, #5
 800c29c:	69fb      	ldr	r3, [r7, #28]
 800c29e:	4413      	add	r3, r2
 800c2a0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c2a4:	681b      	ldr	r3, [r3, #0]
 800c2a6:	69ba      	ldr	r2, [r7, #24]
 800c2a8:	0151      	lsls	r1, r2, #5
 800c2aa:	69fa      	ldr	r2, [r7, #28]
 800c2ac:	440a      	add	r2, r1
 800c2ae:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800c2b2:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800c2b6:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800c2b8:	2300      	movs	r3, #0
}
 800c2ba:	4618      	mov	r0, r3
 800c2bc:	3720      	adds	r7, #32
 800c2be:	46bd      	mov	sp, r7
 800c2c0:	bd80      	pop	{r7, pc}
 800c2c2:	bf00      	nop
 800c2c4:	fff80000 	.word	0xfff80000
 800c2c8:	e007ffff 	.word	0xe007ffff
 800c2cc:	1ff80000 	.word	0x1ff80000

0800c2d0 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800c2d0:	b480      	push	{r7}
 800c2d2:	b087      	sub	sp, #28
 800c2d4:	af00      	add	r7, sp, #0
 800c2d6:	60f8      	str	r0, [r7, #12]
 800c2d8:	60b9      	str	r1, [r7, #8]
 800c2da:	4613      	mov	r3, r2
 800c2dc:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c2de:	68fb      	ldr	r3, [r7, #12]
 800c2e0:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 800c2e2:	68bb      	ldr	r3, [r7, #8]
 800c2e4:	781b      	ldrb	r3, [r3, #0]
 800c2e6:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800c2e8:	68bb      	ldr	r3, [r7, #8]
 800c2ea:	785b      	ldrb	r3, [r3, #1]
 800c2ec:	2b01      	cmp	r3, #1
 800c2ee:	f040 80cd 	bne.w	800c48c <USB_EP0StartXfer+0x1bc>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800c2f2:	68bb      	ldr	r3, [r7, #8]
 800c2f4:	695b      	ldr	r3, [r3, #20]
 800c2f6:	2b00      	cmp	r3, #0
 800c2f8:	d132      	bne.n	800c360 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800c2fa:	693b      	ldr	r3, [r7, #16]
 800c2fc:	015a      	lsls	r2, r3, #5
 800c2fe:	697b      	ldr	r3, [r7, #20]
 800c300:	4413      	add	r3, r2
 800c302:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c306:	691a      	ldr	r2, [r3, #16]
 800c308:	693b      	ldr	r3, [r7, #16]
 800c30a:	0159      	lsls	r1, r3, #5
 800c30c:	697b      	ldr	r3, [r7, #20]
 800c30e:	440b      	add	r3, r1
 800c310:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c314:	4619      	mov	r1, r3
 800c316:	4b98      	ldr	r3, [pc, #608]	; (800c578 <USB_EP0StartXfer+0x2a8>)
 800c318:	4013      	ands	r3, r2
 800c31a:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800c31c:	693b      	ldr	r3, [r7, #16]
 800c31e:	015a      	lsls	r2, r3, #5
 800c320:	697b      	ldr	r3, [r7, #20]
 800c322:	4413      	add	r3, r2
 800c324:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c328:	691b      	ldr	r3, [r3, #16]
 800c32a:	693a      	ldr	r2, [r7, #16]
 800c32c:	0151      	lsls	r1, r2, #5
 800c32e:	697a      	ldr	r2, [r7, #20]
 800c330:	440a      	add	r2, r1
 800c332:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c336:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800c33a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800c33c:	693b      	ldr	r3, [r7, #16]
 800c33e:	015a      	lsls	r2, r3, #5
 800c340:	697b      	ldr	r3, [r7, #20]
 800c342:	4413      	add	r3, r2
 800c344:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c348:	691a      	ldr	r2, [r3, #16]
 800c34a:	693b      	ldr	r3, [r7, #16]
 800c34c:	0159      	lsls	r1, r3, #5
 800c34e:	697b      	ldr	r3, [r7, #20]
 800c350:	440b      	add	r3, r1
 800c352:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c356:	4619      	mov	r1, r3
 800c358:	4b88      	ldr	r3, [pc, #544]	; (800c57c <USB_EP0StartXfer+0x2ac>)
 800c35a:	4013      	ands	r3, r2
 800c35c:	610b      	str	r3, [r1, #16]
 800c35e:	e04e      	b.n	800c3fe <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800c360:	693b      	ldr	r3, [r7, #16]
 800c362:	015a      	lsls	r2, r3, #5
 800c364:	697b      	ldr	r3, [r7, #20]
 800c366:	4413      	add	r3, r2
 800c368:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c36c:	691a      	ldr	r2, [r3, #16]
 800c36e:	693b      	ldr	r3, [r7, #16]
 800c370:	0159      	lsls	r1, r3, #5
 800c372:	697b      	ldr	r3, [r7, #20]
 800c374:	440b      	add	r3, r1
 800c376:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c37a:	4619      	mov	r1, r3
 800c37c:	4b7f      	ldr	r3, [pc, #508]	; (800c57c <USB_EP0StartXfer+0x2ac>)
 800c37e:	4013      	ands	r3, r2
 800c380:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800c382:	693b      	ldr	r3, [r7, #16]
 800c384:	015a      	lsls	r2, r3, #5
 800c386:	697b      	ldr	r3, [r7, #20]
 800c388:	4413      	add	r3, r2
 800c38a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c38e:	691a      	ldr	r2, [r3, #16]
 800c390:	693b      	ldr	r3, [r7, #16]
 800c392:	0159      	lsls	r1, r3, #5
 800c394:	697b      	ldr	r3, [r7, #20]
 800c396:	440b      	add	r3, r1
 800c398:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c39c:	4619      	mov	r1, r3
 800c39e:	4b76      	ldr	r3, [pc, #472]	; (800c578 <USB_EP0StartXfer+0x2a8>)
 800c3a0:	4013      	ands	r3, r2
 800c3a2:	610b      	str	r3, [r1, #16]

      if (ep->xfer_len > ep->maxpacket)
 800c3a4:	68bb      	ldr	r3, [r7, #8]
 800c3a6:	695a      	ldr	r2, [r3, #20]
 800c3a8:	68bb      	ldr	r3, [r7, #8]
 800c3aa:	689b      	ldr	r3, [r3, #8]
 800c3ac:	429a      	cmp	r2, r3
 800c3ae:	d903      	bls.n	800c3b8 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 800c3b0:	68bb      	ldr	r3, [r7, #8]
 800c3b2:	689a      	ldr	r2, [r3, #8]
 800c3b4:	68bb      	ldr	r3, [r7, #8]
 800c3b6:	615a      	str	r2, [r3, #20]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800c3b8:	693b      	ldr	r3, [r7, #16]
 800c3ba:	015a      	lsls	r2, r3, #5
 800c3bc:	697b      	ldr	r3, [r7, #20]
 800c3be:	4413      	add	r3, r2
 800c3c0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c3c4:	691b      	ldr	r3, [r3, #16]
 800c3c6:	693a      	ldr	r2, [r7, #16]
 800c3c8:	0151      	lsls	r1, r2, #5
 800c3ca:	697a      	ldr	r2, [r7, #20]
 800c3cc:	440a      	add	r2, r1
 800c3ce:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c3d2:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800c3d6:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800c3d8:	693b      	ldr	r3, [r7, #16]
 800c3da:	015a      	lsls	r2, r3, #5
 800c3dc:	697b      	ldr	r3, [r7, #20]
 800c3de:	4413      	add	r3, r2
 800c3e0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c3e4:	691a      	ldr	r2, [r3, #16]
 800c3e6:	68bb      	ldr	r3, [r7, #8]
 800c3e8:	695b      	ldr	r3, [r3, #20]
 800c3ea:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800c3ee:	6939      	ldr	r1, [r7, #16]
 800c3f0:	0148      	lsls	r0, r1, #5
 800c3f2:	6979      	ldr	r1, [r7, #20]
 800c3f4:	4401      	add	r1, r0
 800c3f6:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800c3fa:	4313      	orrs	r3, r2
 800c3fc:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800c3fe:	79fb      	ldrb	r3, [r7, #7]
 800c400:	2b01      	cmp	r3, #1
 800c402:	d11e      	bne.n	800c442 <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800c404:	68bb      	ldr	r3, [r7, #8]
 800c406:	691b      	ldr	r3, [r3, #16]
 800c408:	2b00      	cmp	r3, #0
 800c40a:	d009      	beq.n	800c420 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800c40c:	693b      	ldr	r3, [r7, #16]
 800c40e:	015a      	lsls	r2, r3, #5
 800c410:	697b      	ldr	r3, [r7, #20]
 800c412:	4413      	add	r3, r2
 800c414:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c418:	461a      	mov	r2, r3
 800c41a:	68bb      	ldr	r3, [r7, #8]
 800c41c:	691b      	ldr	r3, [r3, #16]
 800c41e:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800c420:	693b      	ldr	r3, [r7, #16]
 800c422:	015a      	lsls	r2, r3, #5
 800c424:	697b      	ldr	r3, [r7, #20]
 800c426:	4413      	add	r3, r2
 800c428:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c42c:	681b      	ldr	r3, [r3, #0]
 800c42e:	693a      	ldr	r2, [r7, #16]
 800c430:	0151      	lsls	r1, r2, #5
 800c432:	697a      	ldr	r2, [r7, #20]
 800c434:	440a      	add	r2, r1
 800c436:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c43a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800c43e:	6013      	str	r3, [r2, #0]
 800c440:	e092      	b.n	800c568 <USB_EP0StartXfer+0x298>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800c442:	693b      	ldr	r3, [r7, #16]
 800c444:	015a      	lsls	r2, r3, #5
 800c446:	697b      	ldr	r3, [r7, #20]
 800c448:	4413      	add	r3, r2
 800c44a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c44e:	681b      	ldr	r3, [r3, #0]
 800c450:	693a      	ldr	r2, [r7, #16]
 800c452:	0151      	lsls	r1, r2, #5
 800c454:	697a      	ldr	r2, [r7, #20]
 800c456:	440a      	add	r2, r1
 800c458:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c45c:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800c460:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 800c462:	68bb      	ldr	r3, [r7, #8]
 800c464:	695b      	ldr	r3, [r3, #20]
 800c466:	2b00      	cmp	r3, #0
 800c468:	d07e      	beq.n	800c568 <USB_EP0StartXfer+0x298>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800c46a:	697b      	ldr	r3, [r7, #20]
 800c46c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c470:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800c472:	68bb      	ldr	r3, [r7, #8]
 800c474:	781b      	ldrb	r3, [r3, #0]
 800c476:	f003 030f 	and.w	r3, r3, #15
 800c47a:	2101      	movs	r1, #1
 800c47c:	fa01 f303 	lsl.w	r3, r1, r3
 800c480:	6979      	ldr	r1, [r7, #20]
 800c482:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800c486:	4313      	orrs	r3, r2
 800c488:	634b      	str	r3, [r1, #52]	; 0x34
 800c48a:	e06d      	b.n	800c568 <USB_EP0StartXfer+0x298>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800c48c:	693b      	ldr	r3, [r7, #16]
 800c48e:	015a      	lsls	r2, r3, #5
 800c490:	697b      	ldr	r3, [r7, #20]
 800c492:	4413      	add	r3, r2
 800c494:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c498:	691a      	ldr	r2, [r3, #16]
 800c49a:	693b      	ldr	r3, [r7, #16]
 800c49c:	0159      	lsls	r1, r3, #5
 800c49e:	697b      	ldr	r3, [r7, #20]
 800c4a0:	440b      	add	r3, r1
 800c4a2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c4a6:	4619      	mov	r1, r3
 800c4a8:	4b34      	ldr	r3, [pc, #208]	; (800c57c <USB_EP0StartXfer+0x2ac>)
 800c4aa:	4013      	ands	r3, r2
 800c4ac:	610b      	str	r3, [r1, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800c4ae:	693b      	ldr	r3, [r7, #16]
 800c4b0:	015a      	lsls	r2, r3, #5
 800c4b2:	697b      	ldr	r3, [r7, #20]
 800c4b4:	4413      	add	r3, r2
 800c4b6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c4ba:	691a      	ldr	r2, [r3, #16]
 800c4bc:	693b      	ldr	r3, [r7, #16]
 800c4be:	0159      	lsls	r1, r3, #5
 800c4c0:	697b      	ldr	r3, [r7, #20]
 800c4c2:	440b      	add	r3, r1
 800c4c4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c4c8:	4619      	mov	r1, r3
 800c4ca:	4b2b      	ldr	r3, [pc, #172]	; (800c578 <USB_EP0StartXfer+0x2a8>)
 800c4cc:	4013      	ands	r3, r2
 800c4ce:	610b      	str	r3, [r1, #16]

    if (ep->xfer_len > 0U)
 800c4d0:	68bb      	ldr	r3, [r7, #8]
 800c4d2:	695b      	ldr	r3, [r3, #20]
 800c4d4:	2b00      	cmp	r3, #0
 800c4d6:	d003      	beq.n	800c4e0 <USB_EP0StartXfer+0x210>
    {
      ep->xfer_len = ep->maxpacket;
 800c4d8:	68bb      	ldr	r3, [r7, #8]
 800c4da:	689a      	ldr	r2, [r3, #8]
 800c4dc:	68bb      	ldr	r3, [r7, #8]
 800c4de:	615a      	str	r2, [r3, #20]
    }

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800c4e0:	693b      	ldr	r3, [r7, #16]
 800c4e2:	015a      	lsls	r2, r3, #5
 800c4e4:	697b      	ldr	r3, [r7, #20]
 800c4e6:	4413      	add	r3, r2
 800c4e8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c4ec:	691b      	ldr	r3, [r3, #16]
 800c4ee:	693a      	ldr	r2, [r7, #16]
 800c4f0:	0151      	lsls	r1, r2, #5
 800c4f2:	697a      	ldr	r2, [r7, #20]
 800c4f4:	440a      	add	r2, r1
 800c4f6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800c4fa:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800c4fe:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 800c500:	693b      	ldr	r3, [r7, #16]
 800c502:	015a      	lsls	r2, r3, #5
 800c504:	697b      	ldr	r3, [r7, #20]
 800c506:	4413      	add	r3, r2
 800c508:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c50c:	691a      	ldr	r2, [r3, #16]
 800c50e:	68bb      	ldr	r3, [r7, #8]
 800c510:	689b      	ldr	r3, [r3, #8]
 800c512:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800c516:	6939      	ldr	r1, [r7, #16]
 800c518:	0148      	lsls	r0, r1, #5
 800c51a:	6979      	ldr	r1, [r7, #20]
 800c51c:	4401      	add	r1, r0
 800c51e:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800c522:	4313      	orrs	r3, r2
 800c524:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 800c526:	79fb      	ldrb	r3, [r7, #7]
 800c528:	2b01      	cmp	r3, #1
 800c52a:	d10d      	bne.n	800c548 <USB_EP0StartXfer+0x278>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800c52c:	68bb      	ldr	r3, [r7, #8]
 800c52e:	68db      	ldr	r3, [r3, #12]
 800c530:	2b00      	cmp	r3, #0
 800c532:	d009      	beq.n	800c548 <USB_EP0StartXfer+0x278>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800c534:	68bb      	ldr	r3, [r7, #8]
 800c536:	68d9      	ldr	r1, [r3, #12]
 800c538:	693b      	ldr	r3, [r7, #16]
 800c53a:	015a      	lsls	r2, r3, #5
 800c53c:	697b      	ldr	r3, [r7, #20]
 800c53e:	4413      	add	r3, r2
 800c540:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c544:	460a      	mov	r2, r1
 800c546:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800c548:	693b      	ldr	r3, [r7, #16]
 800c54a:	015a      	lsls	r2, r3, #5
 800c54c:	697b      	ldr	r3, [r7, #20]
 800c54e:	4413      	add	r3, r2
 800c550:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c554:	681b      	ldr	r3, [r3, #0]
 800c556:	693a      	ldr	r2, [r7, #16]
 800c558:	0151      	lsls	r1, r2, #5
 800c55a:	697a      	ldr	r2, [r7, #20]
 800c55c:	440a      	add	r2, r1
 800c55e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800c562:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800c566:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800c568:	2300      	movs	r3, #0
}
 800c56a:	4618      	mov	r0, r3
 800c56c:	371c      	adds	r7, #28
 800c56e:	46bd      	mov	sp, r7
 800c570:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c574:	4770      	bx	lr
 800c576:	bf00      	nop
 800c578:	e007ffff 	.word	0xe007ffff
 800c57c:	fff80000 	.word	0xfff80000

0800c580 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800c580:	b480      	push	{r7}
 800c582:	b089      	sub	sp, #36	; 0x24
 800c584:	af00      	add	r7, sp, #0
 800c586:	60f8      	str	r0, [r7, #12]
 800c588:	60b9      	str	r1, [r7, #8]
 800c58a:	4611      	mov	r1, r2
 800c58c:	461a      	mov	r2, r3
 800c58e:	460b      	mov	r3, r1
 800c590:	71fb      	strb	r3, [r7, #7]
 800c592:	4613      	mov	r3, r2
 800c594:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c596:	68fb      	ldr	r3, [r7, #12]
 800c598:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 800c59a:	68bb      	ldr	r3, [r7, #8]
 800c59c:	61fb      	str	r3, [r7, #28]
  uint32_t count32b, i;

  if (dma == 0U)
 800c59e:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800c5a2:	2b00      	cmp	r3, #0
 800c5a4:	d123      	bne.n	800c5ee <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800c5a6:	88bb      	ldrh	r3, [r7, #4]
 800c5a8:	3303      	adds	r3, #3
 800c5aa:	089b      	lsrs	r3, r3, #2
 800c5ac:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800c5ae:	2300      	movs	r3, #0
 800c5b0:	61bb      	str	r3, [r7, #24]
 800c5b2:	e018      	b.n	800c5e6 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800c5b4:	79fb      	ldrb	r3, [r7, #7]
 800c5b6:	031a      	lsls	r2, r3, #12
 800c5b8:	697b      	ldr	r3, [r7, #20]
 800c5ba:	4413      	add	r3, r2
 800c5bc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c5c0:	461a      	mov	r2, r3
 800c5c2:	69fb      	ldr	r3, [r7, #28]
 800c5c4:	681b      	ldr	r3, [r3, #0]
 800c5c6:	6013      	str	r3, [r2, #0]
      pSrc++;
 800c5c8:	69fb      	ldr	r3, [r7, #28]
 800c5ca:	3301      	adds	r3, #1
 800c5cc:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800c5ce:	69fb      	ldr	r3, [r7, #28]
 800c5d0:	3301      	adds	r3, #1
 800c5d2:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800c5d4:	69fb      	ldr	r3, [r7, #28]
 800c5d6:	3301      	adds	r3, #1
 800c5d8:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800c5da:	69fb      	ldr	r3, [r7, #28]
 800c5dc:	3301      	adds	r3, #1
 800c5de:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800c5e0:	69bb      	ldr	r3, [r7, #24]
 800c5e2:	3301      	adds	r3, #1
 800c5e4:	61bb      	str	r3, [r7, #24]
 800c5e6:	69ba      	ldr	r2, [r7, #24]
 800c5e8:	693b      	ldr	r3, [r7, #16]
 800c5ea:	429a      	cmp	r2, r3
 800c5ec:	d3e2      	bcc.n	800c5b4 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800c5ee:	2300      	movs	r3, #0
}
 800c5f0:	4618      	mov	r0, r3
 800c5f2:	3724      	adds	r7, #36	; 0x24
 800c5f4:	46bd      	mov	sp, r7
 800c5f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5fa:	4770      	bx	lr

0800c5fc <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800c5fc:	b480      	push	{r7}
 800c5fe:	b08b      	sub	sp, #44	; 0x2c
 800c600:	af00      	add	r7, sp, #0
 800c602:	60f8      	str	r0, [r7, #12]
 800c604:	60b9      	str	r1, [r7, #8]
 800c606:	4613      	mov	r3, r2
 800c608:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c60a:	68fb      	ldr	r3, [r7, #12]
 800c60c:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800c60e:	68bb      	ldr	r3, [r7, #8]
 800c610:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800c612:	88fb      	ldrh	r3, [r7, #6]
 800c614:	089b      	lsrs	r3, r3, #2
 800c616:	b29b      	uxth	r3, r3
 800c618:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800c61a:	88fb      	ldrh	r3, [r7, #6]
 800c61c:	f003 0303 	and.w	r3, r3, #3
 800c620:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800c622:	2300      	movs	r3, #0
 800c624:	623b      	str	r3, [r7, #32]
 800c626:	e014      	b.n	800c652 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800c628:	69bb      	ldr	r3, [r7, #24]
 800c62a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c62e:	681a      	ldr	r2, [r3, #0]
 800c630:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c632:	601a      	str	r2, [r3, #0]
    pDest++;
 800c634:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c636:	3301      	adds	r3, #1
 800c638:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800c63a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c63c:	3301      	adds	r3, #1
 800c63e:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800c640:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c642:	3301      	adds	r3, #1
 800c644:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800c646:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c648:	3301      	adds	r3, #1
 800c64a:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 800c64c:	6a3b      	ldr	r3, [r7, #32]
 800c64e:	3301      	adds	r3, #1
 800c650:	623b      	str	r3, [r7, #32]
 800c652:	6a3a      	ldr	r2, [r7, #32]
 800c654:	697b      	ldr	r3, [r7, #20]
 800c656:	429a      	cmp	r2, r3
 800c658:	d3e6      	bcc.n	800c628 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800c65a:	8bfb      	ldrh	r3, [r7, #30]
 800c65c:	2b00      	cmp	r3, #0
 800c65e:	d01e      	beq.n	800c69e <USB_ReadPacket+0xa2>
  {
    i = 0U;
 800c660:	2300      	movs	r3, #0
 800c662:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 800c664:	69bb      	ldr	r3, [r7, #24]
 800c666:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c66a:	461a      	mov	r2, r3
 800c66c:	f107 0310 	add.w	r3, r7, #16
 800c670:	6812      	ldr	r2, [r2, #0]
 800c672:	601a      	str	r2, [r3, #0]
	
    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 800c674:	693a      	ldr	r2, [r7, #16]
 800c676:	6a3b      	ldr	r3, [r7, #32]
 800c678:	b2db      	uxtb	r3, r3
 800c67a:	00db      	lsls	r3, r3, #3
 800c67c:	fa22 f303 	lsr.w	r3, r2, r3
 800c680:	b2da      	uxtb	r2, r3
 800c682:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c684:	701a      	strb	r2, [r3, #0]
      i++;
 800c686:	6a3b      	ldr	r3, [r7, #32]
 800c688:	3301      	adds	r3, #1
 800c68a:	623b      	str	r3, [r7, #32]
      pDest++;
 800c68c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c68e:	3301      	adds	r3, #1
 800c690:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 800c692:	8bfb      	ldrh	r3, [r7, #30]
 800c694:	3b01      	subs	r3, #1
 800c696:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 800c698:	8bfb      	ldrh	r3, [r7, #30]
 800c69a:	2b00      	cmp	r3, #0
 800c69c:	d1ea      	bne.n	800c674 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800c69e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800c6a0:	4618      	mov	r0, r3
 800c6a2:	372c      	adds	r7, #44	; 0x2c
 800c6a4:	46bd      	mov	sp, r7
 800c6a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6aa:	4770      	bx	lr

0800c6ac <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800c6ac:	b480      	push	{r7}
 800c6ae:	b085      	sub	sp, #20
 800c6b0:	af00      	add	r7, sp, #0
 800c6b2:	6078      	str	r0, [r7, #4]
 800c6b4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c6b6:	687b      	ldr	r3, [r7, #4]
 800c6b8:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800c6ba:	683b      	ldr	r3, [r7, #0]
 800c6bc:	781b      	ldrb	r3, [r3, #0]
 800c6be:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800c6c0:	683b      	ldr	r3, [r7, #0]
 800c6c2:	785b      	ldrb	r3, [r3, #1]
 800c6c4:	2b01      	cmp	r3, #1
 800c6c6:	d12c      	bne.n	800c722 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 800c6c8:	68bb      	ldr	r3, [r7, #8]
 800c6ca:	015a      	lsls	r2, r3, #5
 800c6cc:	68fb      	ldr	r3, [r7, #12]
 800c6ce:	4413      	add	r3, r2
 800c6d0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c6d4:	681b      	ldr	r3, [r3, #0]
 800c6d6:	2b00      	cmp	r3, #0
 800c6d8:	db12      	blt.n	800c700 <USB_EPSetStall+0x54>
 800c6da:	68bb      	ldr	r3, [r7, #8]
 800c6dc:	2b00      	cmp	r3, #0
 800c6de:	d00f      	beq.n	800c700 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 800c6e0:	68bb      	ldr	r3, [r7, #8]
 800c6e2:	015a      	lsls	r2, r3, #5
 800c6e4:	68fb      	ldr	r3, [r7, #12]
 800c6e6:	4413      	add	r3, r2
 800c6e8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c6ec:	681b      	ldr	r3, [r3, #0]
 800c6ee:	68ba      	ldr	r2, [r7, #8]
 800c6f0:	0151      	lsls	r1, r2, #5
 800c6f2:	68fa      	ldr	r2, [r7, #12]
 800c6f4:	440a      	add	r2, r1
 800c6f6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c6fa:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800c6fe:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 800c700:	68bb      	ldr	r3, [r7, #8]
 800c702:	015a      	lsls	r2, r3, #5
 800c704:	68fb      	ldr	r3, [r7, #12]
 800c706:	4413      	add	r3, r2
 800c708:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c70c:	681b      	ldr	r3, [r3, #0]
 800c70e:	68ba      	ldr	r2, [r7, #8]
 800c710:	0151      	lsls	r1, r2, #5
 800c712:	68fa      	ldr	r2, [r7, #12]
 800c714:	440a      	add	r2, r1
 800c716:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c71a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800c71e:	6013      	str	r3, [r2, #0]
 800c720:	e02b      	b.n	800c77a <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 800c722:	68bb      	ldr	r3, [r7, #8]
 800c724:	015a      	lsls	r2, r3, #5
 800c726:	68fb      	ldr	r3, [r7, #12]
 800c728:	4413      	add	r3, r2
 800c72a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c72e:	681b      	ldr	r3, [r3, #0]
 800c730:	2b00      	cmp	r3, #0
 800c732:	db12      	blt.n	800c75a <USB_EPSetStall+0xae>
 800c734:	68bb      	ldr	r3, [r7, #8]
 800c736:	2b00      	cmp	r3, #0
 800c738:	d00f      	beq.n	800c75a <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 800c73a:	68bb      	ldr	r3, [r7, #8]
 800c73c:	015a      	lsls	r2, r3, #5
 800c73e:	68fb      	ldr	r3, [r7, #12]
 800c740:	4413      	add	r3, r2
 800c742:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c746:	681b      	ldr	r3, [r3, #0]
 800c748:	68ba      	ldr	r2, [r7, #8]
 800c74a:	0151      	lsls	r1, r2, #5
 800c74c:	68fa      	ldr	r2, [r7, #12]
 800c74e:	440a      	add	r2, r1
 800c750:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800c754:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800c758:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 800c75a:	68bb      	ldr	r3, [r7, #8]
 800c75c:	015a      	lsls	r2, r3, #5
 800c75e:	68fb      	ldr	r3, [r7, #12]
 800c760:	4413      	add	r3, r2
 800c762:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c766:	681b      	ldr	r3, [r3, #0]
 800c768:	68ba      	ldr	r2, [r7, #8]
 800c76a:	0151      	lsls	r1, r2, #5
 800c76c:	68fa      	ldr	r2, [r7, #12]
 800c76e:	440a      	add	r2, r1
 800c770:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800c774:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800c778:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800c77a:	2300      	movs	r3, #0
}
 800c77c:	4618      	mov	r0, r3
 800c77e:	3714      	adds	r7, #20
 800c780:	46bd      	mov	sp, r7
 800c782:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c786:	4770      	bx	lr

0800c788 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800c788:	b480      	push	{r7}
 800c78a:	b085      	sub	sp, #20
 800c78c:	af00      	add	r7, sp, #0
 800c78e:	6078      	str	r0, [r7, #4]
 800c790:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c792:	687b      	ldr	r3, [r7, #4]
 800c794:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800c796:	683b      	ldr	r3, [r7, #0]
 800c798:	781b      	ldrb	r3, [r3, #0]
 800c79a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800c79c:	683b      	ldr	r3, [r7, #0]
 800c79e:	785b      	ldrb	r3, [r3, #1]
 800c7a0:	2b01      	cmp	r3, #1
 800c7a2:	d128      	bne.n	800c7f6 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800c7a4:	68bb      	ldr	r3, [r7, #8]
 800c7a6:	015a      	lsls	r2, r3, #5
 800c7a8:	68fb      	ldr	r3, [r7, #12]
 800c7aa:	4413      	add	r3, r2
 800c7ac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c7b0:	681b      	ldr	r3, [r3, #0]
 800c7b2:	68ba      	ldr	r2, [r7, #8]
 800c7b4:	0151      	lsls	r1, r2, #5
 800c7b6:	68fa      	ldr	r2, [r7, #12]
 800c7b8:	440a      	add	r2, r1
 800c7ba:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c7be:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800c7c2:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800c7c4:	683b      	ldr	r3, [r7, #0]
 800c7c6:	78db      	ldrb	r3, [r3, #3]
 800c7c8:	2b03      	cmp	r3, #3
 800c7ca:	d003      	beq.n	800c7d4 <USB_EPClearStall+0x4c>
 800c7cc:	683b      	ldr	r3, [r7, #0]
 800c7ce:	78db      	ldrb	r3, [r3, #3]
 800c7d0:	2b02      	cmp	r3, #2
 800c7d2:	d138      	bne.n	800c846 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800c7d4:	68bb      	ldr	r3, [r7, #8]
 800c7d6:	015a      	lsls	r2, r3, #5
 800c7d8:	68fb      	ldr	r3, [r7, #12]
 800c7da:	4413      	add	r3, r2
 800c7dc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c7e0:	681b      	ldr	r3, [r3, #0]
 800c7e2:	68ba      	ldr	r2, [r7, #8]
 800c7e4:	0151      	lsls	r1, r2, #5
 800c7e6:	68fa      	ldr	r2, [r7, #12]
 800c7e8:	440a      	add	r2, r1
 800c7ea:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c7ee:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800c7f2:	6013      	str	r3, [r2, #0]
 800c7f4:	e027      	b.n	800c846 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800c7f6:	68bb      	ldr	r3, [r7, #8]
 800c7f8:	015a      	lsls	r2, r3, #5
 800c7fa:	68fb      	ldr	r3, [r7, #12]
 800c7fc:	4413      	add	r3, r2
 800c7fe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c802:	681b      	ldr	r3, [r3, #0]
 800c804:	68ba      	ldr	r2, [r7, #8]
 800c806:	0151      	lsls	r1, r2, #5
 800c808:	68fa      	ldr	r2, [r7, #12]
 800c80a:	440a      	add	r2, r1
 800c80c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800c810:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800c814:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800c816:	683b      	ldr	r3, [r7, #0]
 800c818:	78db      	ldrb	r3, [r3, #3]
 800c81a:	2b03      	cmp	r3, #3
 800c81c:	d003      	beq.n	800c826 <USB_EPClearStall+0x9e>
 800c81e:	683b      	ldr	r3, [r7, #0]
 800c820:	78db      	ldrb	r3, [r3, #3]
 800c822:	2b02      	cmp	r3, #2
 800c824:	d10f      	bne.n	800c846 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800c826:	68bb      	ldr	r3, [r7, #8]
 800c828:	015a      	lsls	r2, r3, #5
 800c82a:	68fb      	ldr	r3, [r7, #12]
 800c82c:	4413      	add	r3, r2
 800c82e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c832:	681b      	ldr	r3, [r3, #0]
 800c834:	68ba      	ldr	r2, [r7, #8]
 800c836:	0151      	lsls	r1, r2, #5
 800c838:	68fa      	ldr	r2, [r7, #12]
 800c83a:	440a      	add	r2, r1
 800c83c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800c840:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800c844:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 800c846:	2300      	movs	r3, #0
}
 800c848:	4618      	mov	r0, r3
 800c84a:	3714      	adds	r7, #20
 800c84c:	46bd      	mov	sp, r7
 800c84e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c852:	4770      	bx	lr

0800c854 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 800c854:	b480      	push	{r7}
 800c856:	b085      	sub	sp, #20
 800c858:	af00      	add	r7, sp, #0
 800c85a:	6078      	str	r0, [r7, #4]
 800c85c:	460b      	mov	r3, r1
 800c85e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c860:	687b      	ldr	r3, [r7, #4]
 800c862:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 800c864:	68fb      	ldr	r3, [r7, #12]
 800c866:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c86a:	681b      	ldr	r3, [r3, #0]
 800c86c:	68fa      	ldr	r2, [r7, #12]
 800c86e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800c872:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800c876:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 800c878:	68fb      	ldr	r3, [r7, #12]
 800c87a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c87e:	681a      	ldr	r2, [r3, #0]
 800c880:	78fb      	ldrb	r3, [r7, #3]
 800c882:	011b      	lsls	r3, r3, #4
 800c884:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 800c888:	68f9      	ldr	r1, [r7, #12]
 800c88a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800c88e:	4313      	orrs	r3, r2
 800c890:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 800c892:	2300      	movs	r3, #0
}
 800c894:	4618      	mov	r0, r3
 800c896:	3714      	adds	r7, #20
 800c898:	46bd      	mov	sp, r7
 800c89a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c89e:	4770      	bx	lr

0800c8a0 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 800c8a0:	b480      	push	{r7}
 800c8a2:	b085      	sub	sp, #20
 800c8a4:	af00      	add	r7, sp, #0
 800c8a6:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c8a8:	687b      	ldr	r3, [r7, #4]
 800c8aa:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800c8ac:	68fb      	ldr	r3, [r7, #12]
 800c8ae:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800c8b2:	681b      	ldr	r3, [r3, #0]
 800c8b4:	68fa      	ldr	r2, [r7, #12]
 800c8b6:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800c8ba:	f023 0303 	bic.w	r3, r3, #3
 800c8be:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 800c8c0:	68fb      	ldr	r3, [r7, #12]
 800c8c2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c8c6:	685b      	ldr	r3, [r3, #4]
 800c8c8:	68fa      	ldr	r2, [r7, #12]
 800c8ca:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800c8ce:	f023 0302 	bic.w	r3, r3, #2
 800c8d2:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800c8d4:	2300      	movs	r3, #0
}
 800c8d6:	4618      	mov	r0, r3
 800c8d8:	3714      	adds	r7, #20
 800c8da:	46bd      	mov	sp, r7
 800c8dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8e0:	4770      	bx	lr

0800c8e2 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800c8e2:	b480      	push	{r7}
 800c8e4:	b085      	sub	sp, #20
 800c8e6:	af00      	add	r7, sp, #0
 800c8e8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c8ea:	687b      	ldr	r3, [r7, #4]
 800c8ec:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800c8ee:	68fb      	ldr	r3, [r7, #12]
 800c8f0:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800c8f4:	681b      	ldr	r3, [r3, #0]
 800c8f6:	68fa      	ldr	r2, [r7, #12]
 800c8f8:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800c8fc:	f023 0303 	bic.w	r3, r3, #3
 800c900:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800c902:	68fb      	ldr	r3, [r7, #12]
 800c904:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c908:	685b      	ldr	r3, [r3, #4]
 800c90a:	68fa      	ldr	r2, [r7, #12]
 800c90c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800c910:	f043 0302 	orr.w	r3, r3, #2
 800c914:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800c916:	2300      	movs	r3, #0
}
 800c918:	4618      	mov	r0, r3
 800c91a:	3714      	adds	r7, #20
 800c91c:	46bd      	mov	sp, r7
 800c91e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c922:	4770      	bx	lr

0800c924 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 800c924:	b480      	push	{r7}
 800c926:	b085      	sub	sp, #20
 800c928:	af00      	add	r7, sp, #0
 800c92a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800c92c:	687b      	ldr	r3, [r7, #4]
 800c92e:	695b      	ldr	r3, [r3, #20]
 800c930:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800c932:	687b      	ldr	r3, [r7, #4]
 800c934:	699b      	ldr	r3, [r3, #24]
 800c936:	68fa      	ldr	r2, [r7, #12]
 800c938:	4013      	ands	r3, r2
 800c93a:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800c93c:	68fb      	ldr	r3, [r7, #12]
}
 800c93e:	4618      	mov	r0, r3
 800c940:	3714      	adds	r7, #20
 800c942:	46bd      	mov	sp, r7
 800c944:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c948:	4770      	bx	lr

0800c94a <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800c94a:	b480      	push	{r7}
 800c94c:	b085      	sub	sp, #20
 800c94e:	af00      	add	r7, sp, #0
 800c950:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c952:	687b      	ldr	r3, [r7, #4]
 800c954:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800c956:	68fb      	ldr	r3, [r7, #12]
 800c958:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c95c:	699b      	ldr	r3, [r3, #24]
 800c95e:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800c960:	68fb      	ldr	r3, [r7, #12]
 800c962:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c966:	69db      	ldr	r3, [r3, #28]
 800c968:	68ba      	ldr	r2, [r7, #8]
 800c96a:	4013      	ands	r3, r2
 800c96c:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 800c96e:	68bb      	ldr	r3, [r7, #8]
 800c970:	0c1b      	lsrs	r3, r3, #16
}
 800c972:	4618      	mov	r0, r3
 800c974:	3714      	adds	r7, #20
 800c976:	46bd      	mov	sp, r7
 800c978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c97c:	4770      	bx	lr

0800c97e <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800c97e:	b480      	push	{r7}
 800c980:	b085      	sub	sp, #20
 800c982:	af00      	add	r7, sp, #0
 800c984:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c986:	687b      	ldr	r3, [r7, #4]
 800c988:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800c98a:	68fb      	ldr	r3, [r7, #12]
 800c98c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c990:	699b      	ldr	r3, [r3, #24]
 800c992:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800c994:	68fb      	ldr	r3, [r7, #12]
 800c996:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c99a:	69db      	ldr	r3, [r3, #28]
 800c99c:	68ba      	ldr	r2, [r7, #8]
 800c99e:	4013      	ands	r3, r2
 800c9a0:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 800c9a2:	68bb      	ldr	r3, [r7, #8]
 800c9a4:	b29b      	uxth	r3, r3
}
 800c9a6:	4618      	mov	r0, r3
 800c9a8:	3714      	adds	r7, #20
 800c9aa:	46bd      	mov	sp, r7
 800c9ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9b0:	4770      	bx	lr

0800c9b2 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800c9b2:	b480      	push	{r7}
 800c9b4:	b085      	sub	sp, #20
 800c9b6:	af00      	add	r7, sp, #0
 800c9b8:	6078      	str	r0, [r7, #4]
 800c9ba:	460b      	mov	r3, r1
 800c9bc:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c9be:	687b      	ldr	r3, [r7, #4]
 800c9c0:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800c9c2:	78fb      	ldrb	r3, [r7, #3]
 800c9c4:	015a      	lsls	r2, r3, #5
 800c9c6:	68fb      	ldr	r3, [r7, #12]
 800c9c8:	4413      	add	r3, r2
 800c9ca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c9ce:	689b      	ldr	r3, [r3, #8]
 800c9d0:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800c9d2:	68fb      	ldr	r3, [r7, #12]
 800c9d4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c9d8:	695b      	ldr	r3, [r3, #20]
 800c9da:	68ba      	ldr	r2, [r7, #8]
 800c9dc:	4013      	ands	r3, r2
 800c9de:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800c9e0:	68bb      	ldr	r3, [r7, #8]
}
 800c9e2:	4618      	mov	r0, r3
 800c9e4:	3714      	adds	r7, #20
 800c9e6:	46bd      	mov	sp, r7
 800c9e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9ec:	4770      	bx	lr

0800c9ee <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800c9ee:	b480      	push	{r7}
 800c9f0:	b087      	sub	sp, #28
 800c9f2:	af00      	add	r7, sp, #0
 800c9f4:	6078      	str	r0, [r7, #4]
 800c9f6:	460b      	mov	r3, r1
 800c9f8:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c9fa:	687b      	ldr	r3, [r7, #4]
 800c9fc:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg, msk, emp;

  msk = USBx_DEVICE->DIEPMSK;
 800c9fe:	697b      	ldr	r3, [r7, #20]
 800ca00:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ca04:	691b      	ldr	r3, [r3, #16]
 800ca06:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 800ca08:	697b      	ldr	r3, [r7, #20]
 800ca0a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ca0e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ca10:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800ca12:	78fb      	ldrb	r3, [r7, #3]
 800ca14:	f003 030f 	and.w	r3, r3, #15
 800ca18:	68fa      	ldr	r2, [r7, #12]
 800ca1a:	fa22 f303 	lsr.w	r3, r2, r3
 800ca1e:	01db      	lsls	r3, r3, #7
 800ca20:	b2db      	uxtb	r3, r3
 800ca22:	693a      	ldr	r2, [r7, #16]
 800ca24:	4313      	orrs	r3, r2
 800ca26:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 800ca28:	78fb      	ldrb	r3, [r7, #3]
 800ca2a:	015a      	lsls	r2, r3, #5
 800ca2c:	697b      	ldr	r3, [r7, #20]
 800ca2e:	4413      	add	r3, r2
 800ca30:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ca34:	689b      	ldr	r3, [r3, #8]
 800ca36:	693a      	ldr	r2, [r7, #16]
 800ca38:	4013      	ands	r3, r2
 800ca3a:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800ca3c:	68bb      	ldr	r3, [r7, #8]
}
 800ca3e:	4618      	mov	r0, r3
 800ca40:	371c      	adds	r7, #28
 800ca42:	46bd      	mov	sp, r7
 800ca44:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca48:	4770      	bx	lr

0800ca4a <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800ca4a:	b480      	push	{r7}
 800ca4c:	b083      	sub	sp, #12
 800ca4e:	af00      	add	r7, sp, #0
 800ca50:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800ca52:	687b      	ldr	r3, [r7, #4]
 800ca54:	695b      	ldr	r3, [r3, #20]
 800ca56:	f003 0301 	and.w	r3, r3, #1
}
 800ca5a:	4618      	mov	r0, r3
 800ca5c:	370c      	adds	r7, #12
 800ca5e:	46bd      	mov	sp, r7
 800ca60:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca64:	4770      	bx	lr
	...

0800ca68 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 800ca68:	b480      	push	{r7}
 800ca6a:	b085      	sub	sp, #20
 800ca6c:	af00      	add	r7, sp, #0
 800ca6e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ca70:	687b      	ldr	r3, [r7, #4]
 800ca72:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800ca74:	68fb      	ldr	r3, [r7, #12]
 800ca76:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ca7a:	681a      	ldr	r2, [r3, #0]
 800ca7c:	68fb      	ldr	r3, [r7, #12]
 800ca7e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ca82:	4619      	mov	r1, r3
 800ca84:	4b09      	ldr	r3, [pc, #36]	; (800caac <USB_ActivateSetup+0x44>)
 800ca86:	4013      	ands	r3, r2
 800ca88:	600b      	str	r3, [r1, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800ca8a:	68fb      	ldr	r3, [r7, #12]
 800ca8c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ca90:	685b      	ldr	r3, [r3, #4]
 800ca92:	68fa      	ldr	r2, [r7, #12]
 800ca94:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800ca98:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800ca9c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800ca9e:	2300      	movs	r3, #0
}
 800caa0:	4618      	mov	r0, r3
 800caa2:	3714      	adds	r7, #20
 800caa4:	46bd      	mov	sp, r7
 800caa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800caaa:	4770      	bx	lr
 800caac:	fffff800 	.word	0xfffff800

0800cab0 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 800cab0:	b480      	push	{r7}
 800cab2:	b087      	sub	sp, #28
 800cab4:	af00      	add	r7, sp, #0
 800cab6:	60f8      	str	r0, [r7, #12]
 800cab8:	460b      	mov	r3, r1
 800caba:	607a      	str	r2, [r7, #4]
 800cabc:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800cabe:	68fb      	ldr	r3, [r7, #12]
 800cac0:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800cac2:	68fb      	ldr	r3, [r7, #12]
 800cac4:	333c      	adds	r3, #60	; 0x3c
 800cac6:	3304      	adds	r3, #4
 800cac8:	681b      	ldr	r3, [r3, #0]
 800caca:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 800cacc:	693b      	ldr	r3, [r7, #16]
 800cace:	4a26      	ldr	r2, [pc, #152]	; (800cb68 <USB_EP0_OutStart+0xb8>)
 800cad0:	4293      	cmp	r3, r2
 800cad2:	d90a      	bls.n	800caea <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800cad4:	697b      	ldr	r3, [r7, #20]
 800cad6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800cada:	681b      	ldr	r3, [r3, #0]
 800cadc:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800cae0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800cae4:	d101      	bne.n	800caea <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 800cae6:	2300      	movs	r3, #0
 800cae8:	e037      	b.n	800cb5a <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800caea:	697b      	ldr	r3, [r7, #20]
 800caec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800caf0:	461a      	mov	r2, r3
 800caf2:	2300      	movs	r3, #0
 800caf4:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800caf6:	697b      	ldr	r3, [r7, #20]
 800caf8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800cafc:	691b      	ldr	r3, [r3, #16]
 800cafe:	697a      	ldr	r2, [r7, #20]
 800cb00:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800cb04:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800cb08:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800cb0a:	697b      	ldr	r3, [r7, #20]
 800cb0c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800cb10:	691b      	ldr	r3, [r3, #16]
 800cb12:	697a      	ldr	r2, [r7, #20]
 800cb14:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800cb18:	f043 0318 	orr.w	r3, r3, #24
 800cb1c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800cb1e:	697b      	ldr	r3, [r7, #20]
 800cb20:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800cb24:	691b      	ldr	r3, [r3, #16]
 800cb26:	697a      	ldr	r2, [r7, #20]
 800cb28:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800cb2c:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 800cb30:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 800cb32:	7afb      	ldrb	r3, [r7, #11]
 800cb34:	2b01      	cmp	r3, #1
 800cb36:	d10f      	bne.n	800cb58 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 800cb38:	697b      	ldr	r3, [r7, #20]
 800cb3a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800cb3e:	461a      	mov	r2, r3
 800cb40:	687b      	ldr	r3, [r7, #4]
 800cb42:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 800cb44:	697b      	ldr	r3, [r7, #20]
 800cb46:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800cb4a:	681b      	ldr	r3, [r3, #0]
 800cb4c:	697a      	ldr	r2, [r7, #20]
 800cb4e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800cb52:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 800cb56:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800cb58:	2300      	movs	r3, #0
}
 800cb5a:	4618      	mov	r0, r3
 800cb5c:	371c      	adds	r7, #28
 800cb5e:	46bd      	mov	sp, r7
 800cb60:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb64:	4770      	bx	lr
 800cb66:	bf00      	nop
 800cb68:	4f54300a 	.word	0x4f54300a

0800cb6c <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800cb6c:	b480      	push	{r7}
 800cb6e:	b085      	sub	sp, #20
 800cb70:	af00      	add	r7, sp, #0
 800cb72:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 800cb74:	2300      	movs	r3, #0
 800cb76:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 800cb78:	68fb      	ldr	r3, [r7, #12]
 800cb7a:	3301      	adds	r3, #1
 800cb7c:	60fb      	str	r3, [r7, #12]
 800cb7e:	68fb      	ldr	r3, [r7, #12]
 800cb80:	4a13      	ldr	r2, [pc, #76]	; (800cbd0 <USB_CoreReset+0x64>)
 800cb82:	4293      	cmp	r3, r2
 800cb84:	d901      	bls.n	800cb8a <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800cb86:	2303      	movs	r3, #3
 800cb88:	e01b      	b.n	800cbc2 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800cb8a:	687b      	ldr	r3, [r7, #4]
 800cb8c:	691b      	ldr	r3, [r3, #16]
 800cb8e:	2b00      	cmp	r3, #0
 800cb90:	daf2      	bge.n	800cb78 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800cb92:	2300      	movs	r3, #0
 800cb94:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800cb96:	687b      	ldr	r3, [r7, #4]
 800cb98:	691b      	ldr	r3, [r3, #16]
 800cb9a:	f043 0201 	orr.w	r2, r3, #1
 800cb9e:	687b      	ldr	r3, [r7, #4]
 800cba0:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800cba2:	68fb      	ldr	r3, [r7, #12]
 800cba4:	3301      	adds	r3, #1
 800cba6:	60fb      	str	r3, [r7, #12]
 800cba8:	68fb      	ldr	r3, [r7, #12]
 800cbaa:	4a09      	ldr	r2, [pc, #36]	; (800cbd0 <USB_CoreReset+0x64>)
 800cbac:	4293      	cmp	r3, r2
 800cbae:	d901      	bls.n	800cbb4 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800cbb0:	2303      	movs	r3, #3
 800cbb2:	e006      	b.n	800cbc2 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800cbb4:	687b      	ldr	r3, [r7, #4]
 800cbb6:	691b      	ldr	r3, [r3, #16]
 800cbb8:	f003 0301 	and.w	r3, r3, #1
 800cbbc:	2b01      	cmp	r3, #1
 800cbbe:	d0f0      	beq.n	800cba2 <USB_CoreReset+0x36>

  return HAL_OK;
 800cbc0:	2300      	movs	r3, #0
}
 800cbc2:	4618      	mov	r0, r3
 800cbc4:	3714      	adds	r7, #20
 800cbc6:	46bd      	mov	sp, r7
 800cbc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cbcc:	4770      	bx	lr
 800cbce:	bf00      	nop
 800cbd0:	00030d40 	.word	0x00030d40

0800cbd4 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 800cbd4:	b580      	push	{r7, lr}
 800cbd6:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 800cbd8:	4904      	ldr	r1, [pc, #16]	; (800cbec <MX_FATFS_Init+0x18>)
 800cbda:	4805      	ldr	r0, [pc, #20]	; (800cbf0 <MX_FATFS_Init+0x1c>)
 800cbdc:	f001 feb2 	bl	800e944 <FATFS_LinkDriver>
 800cbe0:	4603      	mov	r3, r0
 800cbe2:	461a      	mov	r2, r3
 800cbe4:	4b03      	ldr	r3, [pc, #12]	; (800cbf4 <MX_FATFS_Init+0x20>)
 800cbe6:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 800cbe8:	bf00      	nop
 800cbea:	bd80      	pop	{r7, pc}
 800cbec:	20005064 	.word	0x20005064
 800cbf0:	080124c8 	.word	0x080124c8
 800cbf4:	20005060 	.word	0x20005060

0800cbf8 <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 800cbf8:	b580      	push	{r7, lr}
 800cbfa:	b082      	sub	sp, #8
 800cbfc:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 800cbfe:	2300      	movs	r3, #0
 800cc00:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 800cc02:	f000 f871 	bl	800cce8 <BSP_SD_IsDetected>
 800cc06:	4603      	mov	r3, r0
 800cc08:	2b01      	cmp	r3, #1
 800cc0a:	d001      	beq.n	800cc10 <BSP_SD_Init+0x18>
  {
    return MSD_ERROR_SD_NOT_PRESENT;
 800cc0c:	2302      	movs	r3, #2
 800cc0e:	e012      	b.n	800cc36 <BSP_SD_Init+0x3e>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd1);
 800cc10:	480b      	ldr	r0, [pc, #44]	; (800cc40 <BSP_SD_Init+0x48>)
 800cc12:	f7fa fe37 	bl	8007884 <HAL_SD_Init>
 800cc16:	4603      	mov	r3, r0
 800cc18:	71fb      	strb	r3, [r7, #7]
  /* Configure SD Bus width (4 bits mode selected) */
  if (sd_state == MSD_OK)
 800cc1a:	79fb      	ldrb	r3, [r7, #7]
 800cc1c:	2b00      	cmp	r3, #0
 800cc1e:	d109      	bne.n	800cc34 <BSP_SD_Init+0x3c>
  {
    /* Enable wide operation */
    if (HAL_SD_ConfigWideBusOperation(&hsd1, SDMMC_BUS_WIDE_4B) != HAL_OK)
 800cc20:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800cc24:	4806      	ldr	r0, [pc, #24]	; (800cc40 <BSP_SD_Init+0x48>)
 800cc26:	f7fb fb3b 	bl	80082a0 <HAL_SD_ConfigWideBusOperation>
 800cc2a:	4603      	mov	r3, r0
 800cc2c:	2b00      	cmp	r3, #0
 800cc2e:	d001      	beq.n	800cc34 <BSP_SD_Init+0x3c>
    {
      sd_state = MSD_ERROR;
 800cc30:	2301      	movs	r3, #1
 800cc32:	71fb      	strb	r3, [r7, #7]
    }
  }

  return sd_state;
 800cc34:	79fb      	ldrb	r3, [r7, #7]
}
 800cc36:	4618      	mov	r0, r3
 800cc38:	3708      	adds	r7, #8
 800cc3a:	46bd      	mov	sp, r7
 800cc3c:	bd80      	pop	{r7, pc}
 800cc3e:	bf00      	nop
 800cc40:	20004d50 	.word	0x20004d50

0800cc44 <BSP_SD_ReadBlocks_DMA>:
  * @param  ReadAddr: Address from where data is to be read
  * @param  NumOfBlocks: Number of SD blocks to read
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks_DMA(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks)
{
 800cc44:	b580      	push	{r7, lr}
 800cc46:	b086      	sub	sp, #24
 800cc48:	af00      	add	r7, sp, #0
 800cc4a:	60f8      	str	r0, [r7, #12]
 800cc4c:	60b9      	str	r1, [r7, #8]
 800cc4e:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 800cc50:	2300      	movs	r3, #0
 800cc52:	75fb      	strb	r3, [r7, #23]

  /* Read block(s) in DMA transfer mode */
  if (HAL_SD_ReadBlocks_DMA(&hsd1, (uint8_t *)pData, ReadAddr, NumOfBlocks) != HAL_OK)
 800cc54:	687b      	ldr	r3, [r7, #4]
 800cc56:	68ba      	ldr	r2, [r7, #8]
 800cc58:	68f9      	ldr	r1, [r7, #12]
 800cc5a:	4806      	ldr	r0, [pc, #24]	; (800cc74 <BSP_SD_ReadBlocks_DMA+0x30>)
 800cc5c:	f7fa ff3e 	bl	8007adc <HAL_SD_ReadBlocks_DMA>
 800cc60:	4603      	mov	r3, r0
 800cc62:	2b00      	cmp	r3, #0
 800cc64:	d001      	beq.n	800cc6a <BSP_SD_ReadBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 800cc66:	2301      	movs	r3, #1
 800cc68:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 800cc6a:	7dfb      	ldrb	r3, [r7, #23]
}
 800cc6c:	4618      	mov	r0, r3
 800cc6e:	3718      	adds	r7, #24
 800cc70:	46bd      	mov	sp, r7
 800cc72:	bd80      	pop	{r7, pc}
 800cc74:	20004d50 	.word	0x20004d50

0800cc78 <BSP_SD_WriteBlocks_DMA>:
  * @param  WriteAddr: Address from where data is to be written
  * @param  NumOfBlocks: Number of SD blocks to write
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks_DMA(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks)
{
 800cc78:	b580      	push	{r7, lr}
 800cc7a:	b086      	sub	sp, #24
 800cc7c:	af00      	add	r7, sp, #0
 800cc7e:	60f8      	str	r0, [r7, #12]
 800cc80:	60b9      	str	r1, [r7, #8]
 800cc82:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 800cc84:	2300      	movs	r3, #0
 800cc86:	75fb      	strb	r3, [r7, #23]

  /* Write block(s) in DMA transfer mode */
  if (HAL_SD_WriteBlocks_DMA(&hsd1, (uint8_t *)pData, WriteAddr, NumOfBlocks) != HAL_OK)
 800cc88:	687b      	ldr	r3, [r7, #4]
 800cc8a:	68ba      	ldr	r2, [r7, #8]
 800cc8c:	68f9      	ldr	r1, [r7, #12]
 800cc8e:	4806      	ldr	r0, [pc, #24]	; (800cca8 <BSP_SD_WriteBlocks_DMA+0x30>)
 800cc90:	f7fa ffcc 	bl	8007c2c <HAL_SD_WriteBlocks_DMA>
 800cc94:	4603      	mov	r3, r0
 800cc96:	2b00      	cmp	r3, #0
 800cc98:	d001      	beq.n	800cc9e <BSP_SD_WriteBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 800cc9a:	2301      	movs	r3, #1
 800cc9c:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 800cc9e:	7dfb      	ldrb	r3, [r7, #23]
}
 800cca0:	4618      	mov	r0, r3
 800cca2:	3718      	adds	r7, #24
 800cca4:	46bd      	mov	sp, r7
 800cca6:	bd80      	pop	{r7, pc}
 800cca8:	20004d50 	.word	0x20004d50

0800ccac <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 800ccac:	b580      	push	{r7, lr}
 800ccae:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd1) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 800ccb0:	4805      	ldr	r0, [pc, #20]	; (800ccc8 <BSP_SD_GetCardState+0x1c>)
 800ccb2:	f7fb fc09 	bl	80084c8 <HAL_SD_GetCardState>
 800ccb6:	4603      	mov	r3, r0
 800ccb8:	2b04      	cmp	r3, #4
 800ccba:	bf14      	ite	ne
 800ccbc:	2301      	movne	r3, #1
 800ccbe:	2300      	moveq	r3, #0
 800ccc0:	b2db      	uxtb	r3, r3
}
 800ccc2:	4618      	mov	r0, r3
 800ccc4:	bd80      	pop	{r7, pc}
 800ccc6:	bf00      	nop
 800ccc8:	20004d50 	.word	0x20004d50

0800cccc <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 800cccc:	b580      	push	{r7, lr}
 800ccce:	b082      	sub	sp, #8
 800ccd0:	af00      	add	r7, sp, #0
 800ccd2:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd1, CardInfo);
 800ccd4:	6879      	ldr	r1, [r7, #4]
 800ccd6:	4803      	ldr	r0, [pc, #12]	; (800cce4 <BSP_SD_GetCardInfo+0x18>)
 800ccd8:	f7fb fab6 	bl	8008248 <HAL_SD_GetCardInfo>
}
 800ccdc:	bf00      	nop
 800ccde:	3708      	adds	r7, #8
 800cce0:	46bd      	mov	sp, r7
 800cce2:	bd80      	pop	{r7, pc}
 800cce4:	20004d50 	.word	0x20004d50

0800cce8 <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 800cce8:	b480      	push	{r7}
 800ccea:	b083      	sub	sp, #12
 800ccec:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 800ccee:	2301      	movs	r3, #1
 800ccf0:	71fb      	strb	r3, [r7, #7]

  /* USER CODE BEGIN IsDetectedSection */
  /* user code can be inserted here */
  /* USER CODE END IsDetectedSection */

  return status;
 800ccf2:	79fb      	ldrb	r3, [r7, #7]
 800ccf4:	b2db      	uxtb	r3, r3
}
 800ccf6:	4618      	mov	r0, r3
 800ccf8:	370c      	adds	r7, #12
 800ccfa:	46bd      	mov	sp, r7
 800ccfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd00:	4770      	bx	lr

0800cd02 <SD_CheckStatusWithTimeout>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static int SD_CheckStatusWithTimeout(uint32_t timeout)
{
 800cd02:	b580      	push	{r7, lr}
 800cd04:	b084      	sub	sp, #16
 800cd06:	af00      	add	r7, sp, #0
 800cd08:	6078      	str	r0, [r7, #4]
  /* block until SDIO peripheral is ready again or a timeout occur */
#if (osCMSIS <= 0x20000U)
  timer = osKernelSysTick();
  while( osKernelSysTick() - timer < timeout)
#else
  timer = osKernelGetTickCount();
 800cd0a:	f001 fedb 	bl	800eac4 <osKernelGetTickCount>
 800cd0e:	60f8      	str	r0, [r7, #12]
  while( osKernelGetTickCount() - timer < timeout)
 800cd10:	e006      	b.n	800cd20 <SD_CheckStatusWithTimeout+0x1e>
#endif
  {
    if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800cd12:	f7ff ffcb 	bl	800ccac <BSP_SD_GetCardState>
 800cd16:	4603      	mov	r3, r0
 800cd18:	2b00      	cmp	r3, #0
 800cd1a:	d101      	bne.n	800cd20 <SD_CheckStatusWithTimeout+0x1e>
    {
      return 0;
 800cd1c:	2300      	movs	r3, #0
 800cd1e:	e009      	b.n	800cd34 <SD_CheckStatusWithTimeout+0x32>
  while( osKernelGetTickCount() - timer < timeout)
 800cd20:	f001 fed0 	bl	800eac4 <osKernelGetTickCount>
 800cd24:	4602      	mov	r2, r0
 800cd26:	68fb      	ldr	r3, [r7, #12]
 800cd28:	1ad3      	subs	r3, r2, r3
 800cd2a:	687a      	ldr	r2, [r7, #4]
 800cd2c:	429a      	cmp	r2, r3
 800cd2e:	d8f0      	bhi.n	800cd12 <SD_CheckStatusWithTimeout+0x10>
    }
  }

  return -1;
 800cd30:	f04f 33ff 	mov.w	r3, #4294967295
}
 800cd34:	4618      	mov	r0, r3
 800cd36:	3710      	adds	r7, #16
 800cd38:	46bd      	mov	sp, r7
 800cd3a:	bd80      	pop	{r7, pc}

0800cd3c <SD_CheckStatus>:

static DSTATUS SD_CheckStatus(BYTE lun)
{
 800cd3c:	b580      	push	{r7, lr}
 800cd3e:	b082      	sub	sp, #8
 800cd40:	af00      	add	r7, sp, #0
 800cd42:	4603      	mov	r3, r0
 800cd44:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 800cd46:	4b0b      	ldr	r3, [pc, #44]	; (800cd74 <SD_CheckStatus+0x38>)
 800cd48:	2201      	movs	r2, #1
 800cd4a:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800cd4c:	f7ff ffae 	bl	800ccac <BSP_SD_GetCardState>
 800cd50:	4603      	mov	r3, r0
 800cd52:	2b00      	cmp	r3, #0
 800cd54:	d107      	bne.n	800cd66 <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 800cd56:	4b07      	ldr	r3, [pc, #28]	; (800cd74 <SD_CheckStatus+0x38>)
 800cd58:	781b      	ldrb	r3, [r3, #0]
 800cd5a:	b2db      	uxtb	r3, r3
 800cd5c:	f023 0301 	bic.w	r3, r3, #1
 800cd60:	b2da      	uxtb	r2, r3
 800cd62:	4b04      	ldr	r3, [pc, #16]	; (800cd74 <SD_CheckStatus+0x38>)
 800cd64:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 800cd66:	4b03      	ldr	r3, [pc, #12]	; (800cd74 <SD_CheckStatus+0x38>)
 800cd68:	781b      	ldrb	r3, [r3, #0]
 800cd6a:	b2db      	uxtb	r3, r3
}
 800cd6c:	4618      	mov	r0, r3
 800cd6e:	3708      	adds	r7, #8
 800cd70:	46bd      	mov	sp, r7
 800cd72:	bd80      	pop	{r7, pc}
 800cd74:	2000000d 	.word	0x2000000d

0800cd78 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 800cd78:	b580      	push	{r7, lr}
 800cd7a:	b082      	sub	sp, #8
 800cd7c:	af00      	add	r7, sp, #0
 800cd7e:	4603      	mov	r3, r0
 800cd80:	71fb      	strb	r3, [r7, #7]
Stat = STA_NOINIT;
 800cd82:	4b1c      	ldr	r3, [pc, #112]	; (800cdf4 <SD_initialize+0x7c>)
 800cd84:	2201      	movs	r2, #1
 800cd86:	701a      	strb	r2, [r3, #0]
   * as the osMessage API will fail otherwise
   */
#if (osCMSIS <= 0x20000U)
  if(osKernelRunning())
#else
  if(osKernelGetState() == osKernelRunning)
 800cd88:	f001 fe54 	bl	800ea34 <osKernelGetState>
 800cd8c:	4603      	mov	r3, r0
 800cd8e:	2b02      	cmp	r3, #2
 800cd90:	d129      	bne.n	800cde6 <SD_initialize+0x6e>
#endif
  {
#if !defined(DISABLE_SD_INIT)

    if(BSP_SD_Init() == MSD_OK)
 800cd92:	f7ff ff31 	bl	800cbf8 <BSP_SD_Init>
 800cd96:	4603      	mov	r3, r0
 800cd98:	2b00      	cmp	r3, #0
 800cd9a:	d107      	bne.n	800cdac <SD_initialize+0x34>
    {
      Stat = SD_CheckStatus(lun);
 800cd9c:	79fb      	ldrb	r3, [r7, #7]
 800cd9e:	4618      	mov	r0, r3
 800cda0:	f7ff ffcc 	bl	800cd3c <SD_CheckStatus>
 800cda4:	4603      	mov	r3, r0
 800cda6:	461a      	mov	r2, r3
 800cda8:	4b12      	ldr	r3, [pc, #72]	; (800cdf4 <SD_initialize+0x7c>)
 800cdaa:	701a      	strb	r2, [r3, #0]
    /*
    * if the SD is correctly initialized, create the operation queue
    * if not already created
    */

    if (Stat != STA_NOINIT)
 800cdac:	4b11      	ldr	r3, [pc, #68]	; (800cdf4 <SD_initialize+0x7c>)
 800cdae:	781b      	ldrb	r3, [r3, #0]
 800cdb0:	b2db      	uxtb	r3, r3
 800cdb2:	2b01      	cmp	r3, #1
 800cdb4:	d017      	beq.n	800cde6 <SD_initialize+0x6e>
    {
      if (SDQueueID == NULL)
 800cdb6:	4b10      	ldr	r3, [pc, #64]	; (800cdf8 <SD_initialize+0x80>)
 800cdb8:	681b      	ldr	r3, [r3, #0]
 800cdba:	2b00      	cmp	r3, #0
 800cdbc:	d107      	bne.n	800cdce <SD_initialize+0x56>
      {
 #if (osCMSIS <= 0x20000U)
      osMessageQDef(SD_Queue, QUEUE_SIZE, uint16_t);
      SDQueueID = osMessageCreate (osMessageQ(SD_Queue), NULL);
#else
      SDQueueID = osMessageQueueNew(QUEUE_SIZE, 2, NULL);
 800cdbe:	2200      	movs	r2, #0
 800cdc0:	2102      	movs	r1, #2
 800cdc2:	200a      	movs	r0, #10
 800cdc4:	f001 ff40 	bl	800ec48 <osMessageQueueNew>
 800cdc8:	4603      	mov	r3, r0
 800cdca:	4a0b      	ldr	r2, [pc, #44]	; (800cdf8 <SD_initialize+0x80>)
 800cdcc:	6013      	str	r3, [r2, #0]
#endif
      }

      if (SDQueueID == NULL)
 800cdce:	4b0a      	ldr	r3, [pc, #40]	; (800cdf8 <SD_initialize+0x80>)
 800cdd0:	681b      	ldr	r3, [r3, #0]
 800cdd2:	2b00      	cmp	r3, #0
 800cdd4:	d107      	bne.n	800cde6 <SD_initialize+0x6e>
      {
        Stat |= STA_NOINIT;
 800cdd6:	4b07      	ldr	r3, [pc, #28]	; (800cdf4 <SD_initialize+0x7c>)
 800cdd8:	781b      	ldrb	r3, [r3, #0]
 800cdda:	b2db      	uxtb	r3, r3
 800cddc:	f043 0301 	orr.w	r3, r3, #1
 800cde0:	b2da      	uxtb	r2, r3
 800cde2:	4b04      	ldr	r3, [pc, #16]	; (800cdf4 <SD_initialize+0x7c>)
 800cde4:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return Stat;
 800cde6:	4b03      	ldr	r3, [pc, #12]	; (800cdf4 <SD_initialize+0x7c>)
 800cde8:	781b      	ldrb	r3, [r3, #0]
 800cdea:	b2db      	uxtb	r3, r3
}
 800cdec:	4618      	mov	r0, r3
 800cdee:	3708      	adds	r7, #8
 800cdf0:	46bd      	mov	sp, r7
 800cdf2:	bd80      	pop	{r7, pc}
 800cdf4:	2000000d 	.word	0x2000000d
 800cdf8:	200001a8 	.word	0x200001a8

0800cdfc <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 800cdfc:	b580      	push	{r7, lr}
 800cdfe:	b082      	sub	sp, #8
 800ce00:	af00      	add	r7, sp, #0
 800ce02:	4603      	mov	r3, r0
 800ce04:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 800ce06:	79fb      	ldrb	r3, [r7, #7]
 800ce08:	4618      	mov	r0, r3
 800ce0a:	f7ff ff97 	bl	800cd3c <SD_CheckStatus>
 800ce0e:	4603      	mov	r3, r0
}
 800ce10:	4618      	mov	r0, r3
 800ce12:	3708      	adds	r7, #8
 800ce14:	46bd      	mov	sp, r7
 800ce16:	bd80      	pop	{r7, pc}

0800ce18 <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 800ce18:	b580      	push	{r7, lr}
 800ce1a:	b088      	sub	sp, #32
 800ce1c:	af00      	add	r7, sp, #0
 800ce1e:	60b9      	str	r1, [r7, #8]
 800ce20:	607a      	str	r2, [r7, #4]
 800ce22:	603b      	str	r3, [r7, #0]
 800ce24:	4603      	mov	r3, r0
 800ce26:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800ce28:	2301      	movs	r3, #1
 800ce2a:	77fb      	strb	r3, [r7, #31]
#endif
  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 800ce2c:	f247 5030 	movw	r0, #30000	; 0x7530
 800ce30:	f7ff ff67 	bl	800cd02 <SD_CheckStatusWithTimeout>
 800ce34:	4603      	mov	r3, r0
 800ce36:	2b00      	cmp	r3, #0
 800ce38:	da01      	bge.n	800ce3e <SD_read+0x26>
  {
    return res;
 800ce3a:	7ffb      	ldrb	r3, [r7, #31]
 800ce3c:	e02f      	b.n	800ce9e <SD_read+0x86>
#if defined(ENABLE_SCRATCH_BUFFER)
  if (!((uint32_t)buff & 0x3))
  {
#endif
    /* Fast path cause destination buffer is correctly aligned */
    uint8_t ret = BSP_SD_ReadBlocks_DMA((uint32_t*)buff, (uint32_t)(sector), count);
 800ce3e:	683a      	ldr	r2, [r7, #0]
 800ce40:	6879      	ldr	r1, [r7, #4]
 800ce42:	68b8      	ldr	r0, [r7, #8]
 800ce44:	f7ff fefe 	bl	800cc44 <BSP_SD_ReadBlocks_DMA>
 800ce48:	4603      	mov	r3, r0
 800ce4a:	77bb      	strb	r3, [r7, #30]

    if (ret == MSD_OK) {
 800ce4c:	7fbb      	ldrb	r3, [r7, #30]
 800ce4e:	2b00      	cmp	r3, #0
 800ce50:	d124      	bne.n	800ce9c <SD_read+0x84>
      {
        timer = osKernelSysTick();
        /* block until SDIO IP is ready or a timeout occur */
        while(osKernelSysTick() - timer <SD_TIMEOUT)
#else
          status = osMessageQueueGet(SDQueueID, (void *)&event, NULL, SD_TIMEOUT);
 800ce52:	4b15      	ldr	r3, [pc, #84]	; (800cea8 <SD_read+0x90>)
 800ce54:	6818      	ldr	r0, [r3, #0]
 800ce56:	f107 0112 	add.w	r1, r7, #18
 800ce5a:	f247 5330 	movw	r3, #30000	; 0x7530
 800ce5e:	2200      	movs	r2, #0
 800ce60:	f001 ff66 	bl	800ed30 <osMessageQueueGet>
 800ce64:	61b8      	str	r0, [r7, #24]
          if ((status == osOK) && (event == READ_CPLT_MSG))
 800ce66:	69bb      	ldr	r3, [r7, #24]
 800ce68:	2b00      	cmp	r3, #0
 800ce6a:	d117      	bne.n	800ce9c <SD_read+0x84>
 800ce6c:	8a7b      	ldrh	r3, [r7, #18]
 800ce6e:	2b01      	cmp	r3, #1
 800ce70:	d114      	bne.n	800ce9c <SD_read+0x84>
          {
            timer = osKernelGetTickCount();
 800ce72:	f001 fe27 	bl	800eac4 <osKernelGetTickCount>
 800ce76:	6178      	str	r0, [r7, #20]
            /* block until SDIO IP is ready or a timeout occur */
            while(osKernelGetTickCount() - timer <SD_TIMEOUT)
 800ce78:	e007      	b.n	800ce8a <SD_read+0x72>
#endif
            {
              if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800ce7a:	f7ff ff17 	bl	800ccac <BSP_SD_GetCardState>
 800ce7e:	4603      	mov	r3, r0
 800ce80:	2b00      	cmp	r3, #0
 800ce82:	d102      	bne.n	800ce8a <SD_read+0x72>
              {
                res = RES_OK;
 800ce84:	2300      	movs	r3, #0
 800ce86:	77fb      	strb	r3, [r7, #31]
                adjust the address and the D-Cache size to invalidate accordingly.
                */
                alignedAddr = (uint32_t)buff & ~0x1F;
                SCB_InvalidateDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif
                break;
 800ce88:	e008      	b.n	800ce9c <SD_read+0x84>
            while(osKernelGetTickCount() - timer <SD_TIMEOUT)
 800ce8a:	f001 fe1b 	bl	800eac4 <osKernelGetTickCount>
 800ce8e:	4602      	mov	r2, r0
 800ce90:	697b      	ldr	r3, [r7, #20]
 800ce92:	1ad3      	subs	r3, r2, r3
 800ce94:	f247 522f 	movw	r2, #29999	; 0x752f
 800ce98:	4293      	cmp	r3, r2
 800ce9a:	d9ee      	bls.n	800ce7a <SD_read+0x62>

      if ((i == count) && (ret == MSD_OK ))
        res = RES_OK;
    }
#endif
  return res;
 800ce9c:	7ffb      	ldrb	r3, [r7, #31]
}
 800ce9e:	4618      	mov	r0, r3
 800cea0:	3720      	adds	r7, #32
 800cea2:	46bd      	mov	sp, r7
 800cea4:	bd80      	pop	{r7, pc}
 800cea6:	bf00      	nop
 800cea8:	200001a8 	.word	0x200001a8

0800ceac <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 800ceac:	b580      	push	{r7, lr}
 800ceae:	b088      	sub	sp, #32
 800ceb0:	af00      	add	r7, sp, #0
 800ceb2:	60b9      	str	r1, [r7, #8]
 800ceb4:	607a      	str	r2, [r7, #4]
 800ceb6:	603b      	str	r3, [r7, #0]
 800ceb8:	4603      	mov	r3, r0
 800ceba:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800cebc:	2301      	movs	r3, #1
 800cebe:	77fb      	strb	r3, [r7, #31]

  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 800cec0:	f247 5030 	movw	r0, #30000	; 0x7530
 800cec4:	f7ff ff1d 	bl	800cd02 <SD_CheckStatusWithTimeout>
 800cec8:	4603      	mov	r3, r0
 800ceca:	2b00      	cmp	r3, #0
 800cecc:	da01      	bge.n	800ced2 <SD_write+0x26>
  {
    return res;
 800cece:	7ffb      	ldrb	r3, [r7, #31]
 800ced0:	e02d      	b.n	800cf2e <SD_write+0x82>
  */
  alignedAddr = (uint32_t)buff & ~0x1F;
  SCB_CleanDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif

  if(BSP_SD_WriteBlocks_DMA((uint32_t*)buff,
 800ced2:	683a      	ldr	r2, [r7, #0]
 800ced4:	6879      	ldr	r1, [r7, #4]
 800ced6:	68b8      	ldr	r0, [r7, #8]
 800ced8:	f7ff fece 	bl	800cc78 <BSP_SD_WriteBlocks_DMA>
 800cedc:	4603      	mov	r3, r0
 800cede:	2b00      	cmp	r3, #0
 800cee0:	d124      	bne.n	800cf2c <SD_write+0x80>
    if (event.status == osEventMessage)
    {
      if (event.value.v == WRITE_CPLT_MSG)
      {
#else
    status = osMessageQueueGet(SDQueueID, (void *)&event, NULL, SD_TIMEOUT);
 800cee2:	4b15      	ldr	r3, [pc, #84]	; (800cf38 <SD_write+0x8c>)
 800cee4:	6818      	ldr	r0, [r3, #0]
 800cee6:	f107 0112 	add.w	r1, r7, #18
 800ceea:	f247 5330 	movw	r3, #30000	; 0x7530
 800ceee:	2200      	movs	r2, #0
 800cef0:	f001 ff1e 	bl	800ed30 <osMessageQueueGet>
 800cef4:	61b8      	str	r0, [r7, #24]
    if ((status == osOK) && (event == WRITE_CPLT_MSG))
 800cef6:	69bb      	ldr	r3, [r7, #24]
 800cef8:	2b00      	cmp	r3, #0
 800cefa:	d117      	bne.n	800cf2c <SD_write+0x80>
 800cefc:	8a7b      	ldrh	r3, [r7, #18]
 800cefe:	2b02      	cmp	r3, #2
 800cf00:	d114      	bne.n	800cf2c <SD_write+0x80>
 #if (osCMSIS < 0x20000U)
        timer = osKernelSysTick();
        /* block until SDIO IP is ready or a timeout occur */
        while(osKernelSysTick() - timer  < SD_TIMEOUT)
#else
        timer = osKernelGetTickCount();
 800cf02:	f001 fddf 	bl	800eac4 <osKernelGetTickCount>
 800cf06:	6178      	str	r0, [r7, #20]
        /* block until SDIO IP is ready or a timeout occur */
        while(osKernelGetTickCount() - timer  < SD_TIMEOUT)
 800cf08:	e007      	b.n	800cf1a <SD_write+0x6e>
#endif
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800cf0a:	f7ff fecf 	bl	800ccac <BSP_SD_GetCardState>
 800cf0e:	4603      	mov	r3, r0
 800cf10:	2b00      	cmp	r3, #0
 800cf12:	d102      	bne.n	800cf1a <SD_write+0x6e>
          {
            res = RES_OK;
 800cf14:	2300      	movs	r3, #0
 800cf16:	77fb      	strb	r3, [r7, #31]
            break;
 800cf18:	e008      	b.n	800cf2c <SD_write+0x80>
        while(osKernelGetTickCount() - timer  < SD_TIMEOUT)
 800cf1a:	f001 fdd3 	bl	800eac4 <osKernelGetTickCount>
 800cf1e:	4602      	mov	r2, r0
 800cf20:	697b      	ldr	r3, [r7, #20]
 800cf22:	1ad3      	subs	r3, r2, r3
 800cf24:	f247 522f 	movw	r2, #29999	; 0x752f
 800cf28:	4293      	cmp	r3, r2
 800cf2a:	d9ee      	bls.n	800cf0a <SD_write+0x5e>
    }

  }
#endif

  return res;
 800cf2c:	7ffb      	ldrb	r3, [r7, #31]
}
 800cf2e:	4618      	mov	r0, r3
 800cf30:	3720      	adds	r7, #32
 800cf32:	46bd      	mov	sp, r7
 800cf34:	bd80      	pop	{r7, pc}
 800cf36:	bf00      	nop
 800cf38:	200001a8 	.word	0x200001a8

0800cf3c <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 800cf3c:	b580      	push	{r7, lr}
 800cf3e:	b08c      	sub	sp, #48	; 0x30
 800cf40:	af00      	add	r7, sp, #0
 800cf42:	4603      	mov	r3, r0
 800cf44:	603a      	str	r2, [r7, #0]
 800cf46:	71fb      	strb	r3, [r7, #7]
 800cf48:	460b      	mov	r3, r1
 800cf4a:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 800cf4c:	2301      	movs	r3, #1
 800cf4e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 800cf52:	4b25      	ldr	r3, [pc, #148]	; (800cfe8 <SD_ioctl+0xac>)
 800cf54:	781b      	ldrb	r3, [r3, #0]
 800cf56:	b2db      	uxtb	r3, r3
 800cf58:	f003 0301 	and.w	r3, r3, #1
 800cf5c:	2b00      	cmp	r3, #0
 800cf5e:	d001      	beq.n	800cf64 <SD_ioctl+0x28>
 800cf60:	2303      	movs	r3, #3
 800cf62:	e03c      	b.n	800cfde <SD_ioctl+0xa2>

  switch (cmd)
 800cf64:	79bb      	ldrb	r3, [r7, #6]
 800cf66:	2b03      	cmp	r3, #3
 800cf68:	d834      	bhi.n	800cfd4 <SD_ioctl+0x98>
 800cf6a:	a201      	add	r2, pc, #4	; (adr r2, 800cf70 <SD_ioctl+0x34>)
 800cf6c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cf70:	0800cf81 	.word	0x0800cf81
 800cf74:	0800cf89 	.word	0x0800cf89
 800cf78:	0800cfa1 	.word	0x0800cfa1
 800cf7c:	0800cfbb 	.word	0x0800cfbb
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 800cf80:	2300      	movs	r3, #0
 800cf82:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800cf86:	e028      	b.n	800cfda <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 800cf88:	f107 0308 	add.w	r3, r7, #8
 800cf8c:	4618      	mov	r0, r3
 800cf8e:	f7ff fe9d 	bl	800cccc <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 800cf92:	6a3a      	ldr	r2, [r7, #32]
 800cf94:	683b      	ldr	r3, [r7, #0]
 800cf96:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800cf98:	2300      	movs	r3, #0
 800cf9a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800cf9e:	e01c      	b.n	800cfda <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800cfa0:	f107 0308 	add.w	r3, r7, #8
 800cfa4:	4618      	mov	r0, r3
 800cfa6:	f7ff fe91 	bl	800cccc <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 800cfaa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cfac:	b29a      	uxth	r2, r3
 800cfae:	683b      	ldr	r3, [r7, #0]
 800cfb0:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 800cfb2:	2300      	movs	r3, #0
 800cfb4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800cfb8:	e00f      	b.n	800cfda <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800cfba:	f107 0308 	add.w	r3, r7, #8
 800cfbe:	4618      	mov	r0, r3
 800cfc0:	f7ff fe84 	bl	800cccc <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 800cfc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cfc6:	0a5a      	lsrs	r2, r3, #9
 800cfc8:	683b      	ldr	r3, [r7, #0]
 800cfca:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800cfcc:	2300      	movs	r3, #0
 800cfce:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800cfd2:	e002      	b.n	800cfda <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 800cfd4:	2304      	movs	r3, #4
 800cfd6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  return res;
 800cfda:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800cfde:	4618      	mov	r0, r3
 800cfe0:	3730      	adds	r7, #48	; 0x30
 800cfe2:	46bd      	mov	sp, r7
 800cfe4:	bd80      	pop	{r7, pc}
 800cfe6:	bf00      	nop
 800cfe8:	2000000d 	.word	0x2000000d

0800cfec <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800cfec:	b580      	push	{r7, lr}
 800cfee:	b084      	sub	sp, #16
 800cff0:	af00      	add	r7, sp, #0
 800cff2:	6078      	str	r0, [r7, #4]
 800cff4:	460b      	mov	r3, r1
 800cff6:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800cff8:	f44f 7007 	mov.w	r0, #540	; 0x21c
 800cffc:	f005 f950 	bl	80122a0 <USBD_static_malloc>
 800d000:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 800d002:	68fb      	ldr	r3, [r7, #12]
 800d004:	2b00      	cmp	r3, #0
 800d006:	d105      	bne.n	800d014 <USBD_CDC_Init+0x28>
  {
    pdev->pClassData = NULL;
 800d008:	687b      	ldr	r3, [r7, #4]
 800d00a:	2200      	movs	r2, #0
 800d00c:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 800d010:	2302      	movs	r3, #2
 800d012:	e066      	b.n	800d0e2 <USBD_CDC_Init+0xf6>
  }

  pdev->pClassData = (void *)hcdc;
 800d014:	687b      	ldr	r3, [r7, #4]
 800d016:	68fa      	ldr	r2, [r7, #12]
 800d018:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800d01c:	687b      	ldr	r3, [r7, #4]
 800d01e:	7c1b      	ldrb	r3, [r3, #16]
 800d020:	2b00      	cmp	r3, #0
 800d022:	d119      	bne.n	800d058 <USBD_CDC_Init+0x6c>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800d024:	f44f 7300 	mov.w	r3, #512	; 0x200
 800d028:	2202      	movs	r2, #2
 800d02a:	2181      	movs	r1, #129	; 0x81
 800d02c:	6878      	ldr	r0, [r7, #4]
 800d02e:	f005 f814 	bl	801205a <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800d032:	687b      	ldr	r3, [r7, #4]
 800d034:	2201      	movs	r2, #1
 800d036:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800d038:	f44f 7300 	mov.w	r3, #512	; 0x200
 800d03c:	2202      	movs	r2, #2
 800d03e:	2101      	movs	r1, #1
 800d040:	6878      	ldr	r0, [r7, #4]
 800d042:	f005 f80a 	bl	801205a <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800d046:	687b      	ldr	r3, [r7, #4]
 800d048:	2201      	movs	r2, #1
 800d04a:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800d04e:	687b      	ldr	r3, [r7, #4]
 800d050:	2210      	movs	r2, #16
 800d052:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
 800d056:	e016      	b.n	800d086 <USBD_CDC_Init+0x9a>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800d058:	2340      	movs	r3, #64	; 0x40
 800d05a:	2202      	movs	r2, #2
 800d05c:	2181      	movs	r1, #129	; 0x81
 800d05e:	6878      	ldr	r0, [r7, #4]
 800d060:	f004 fffb 	bl	801205a <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800d064:	687b      	ldr	r3, [r7, #4]
 800d066:	2201      	movs	r2, #1
 800d068:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800d06a:	2340      	movs	r3, #64	; 0x40
 800d06c:	2202      	movs	r2, #2
 800d06e:	2101      	movs	r1, #1
 800d070:	6878      	ldr	r0, [r7, #4]
 800d072:	f004 fff2 	bl	801205a <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800d076:	687b      	ldr	r3, [r7, #4]
 800d078:	2201      	movs	r2, #1
 800d07a:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 800d07e:	687b      	ldr	r3, [r7, #4]
 800d080:	2210      	movs	r2, #16
 800d082:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800d086:	2308      	movs	r3, #8
 800d088:	2203      	movs	r2, #3
 800d08a:	2182      	movs	r1, #130	; 0x82
 800d08c:	6878      	ldr	r0, [r7, #4]
 800d08e:	f004 ffe4 	bl	801205a <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 800d092:	687b      	ldr	r3, [r7, #4]
 800d094:	2201      	movs	r2, #1
 800d096:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 800d09a:	687b      	ldr	r3, [r7, #4]
 800d09c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800d0a0:	681b      	ldr	r3, [r3, #0]
 800d0a2:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 800d0a4:	68fb      	ldr	r3, [r7, #12]
 800d0a6:	2200      	movs	r2, #0
 800d0a8:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 800d0ac:	68fb      	ldr	r3, [r7, #12]
 800d0ae:	2200      	movs	r2, #0
 800d0b0:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800d0b4:	687b      	ldr	r3, [r7, #4]
 800d0b6:	7c1b      	ldrb	r3, [r3, #16]
 800d0b8:	2b00      	cmp	r3, #0
 800d0ba:	d109      	bne.n	800d0d0 <USBD_CDC_Init+0xe4>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800d0bc:	68fb      	ldr	r3, [r7, #12]
 800d0be:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800d0c2:	f44f 7300 	mov.w	r3, #512	; 0x200
 800d0c6:	2101      	movs	r1, #1
 800d0c8:	6878      	ldr	r0, [r7, #4]
 800d0ca:	f005 f8b5 	bl	8012238 <USBD_LL_PrepareReceive>
 800d0ce:	e007      	b.n	800d0e0 <USBD_CDC_Init+0xf4>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800d0d0:	68fb      	ldr	r3, [r7, #12]
 800d0d2:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800d0d6:	2340      	movs	r3, #64	; 0x40
 800d0d8:	2101      	movs	r1, #1
 800d0da:	6878      	ldr	r0, [r7, #4]
 800d0dc:	f005 f8ac 	bl	8012238 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800d0e0:	2300      	movs	r3, #0
}
 800d0e2:	4618      	mov	r0, r3
 800d0e4:	3710      	adds	r7, #16
 800d0e6:	46bd      	mov	sp, r7
 800d0e8:	bd80      	pop	{r7, pc}

0800d0ea <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800d0ea:	b580      	push	{r7, lr}
 800d0ec:	b082      	sub	sp, #8
 800d0ee:	af00      	add	r7, sp, #0
 800d0f0:	6078      	str	r0, [r7, #4]
 800d0f2:	460b      	mov	r3, r1
 800d0f4:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 800d0f6:	2181      	movs	r1, #129	; 0x81
 800d0f8:	6878      	ldr	r0, [r7, #4]
 800d0fa:	f004 ffd4 	bl	80120a6 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 800d0fe:	687b      	ldr	r3, [r7, #4]
 800d100:	2200      	movs	r2, #0
 800d102:	871a      	strh	r2, [r3, #56]	; 0x38

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 800d104:	2101      	movs	r1, #1
 800d106:	6878      	ldr	r0, [r7, #4]
 800d108:	f004 ffcd 	bl	80120a6 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 800d10c:	687b      	ldr	r3, [r7, #4]
 800d10e:	2200      	movs	r2, #0
 800d110:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 800d114:	2182      	movs	r1, #130	; 0x82
 800d116:	6878      	ldr	r0, [r7, #4]
 800d118:	f004 ffc5 	bl	80120a6 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 800d11c:	687b      	ldr	r3, [r7, #4]
 800d11e:	2200      	movs	r2, #0
 800d120:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = 0U;
 800d124:	687b      	ldr	r3, [r7, #4]
 800d126:	2200      	movs	r2, #0
 800d128:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 800d12c:	687b      	ldr	r3, [r7, #4]
 800d12e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800d132:	2b00      	cmp	r3, #0
 800d134:	d00e      	beq.n	800d154 <USBD_CDC_DeInit+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 800d136:	687b      	ldr	r3, [r7, #4]
 800d138:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800d13c:	685b      	ldr	r3, [r3, #4]
 800d13e:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 800d140:	687b      	ldr	r3, [r7, #4]
 800d142:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800d146:	4618      	mov	r0, r3
 800d148:	f005 f8b8 	bl	80122bc <USBD_static_free>
    pdev->pClassData = NULL;
 800d14c:	687b      	ldr	r3, [r7, #4]
 800d14e:	2200      	movs	r2, #0
 800d150:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 800d154:	2300      	movs	r3, #0
}
 800d156:	4618      	mov	r0, r3
 800d158:	3708      	adds	r7, #8
 800d15a:	46bd      	mov	sp, r7
 800d15c:	bd80      	pop	{r7, pc}
	...

0800d160 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 800d160:	b580      	push	{r7, lr}
 800d162:	b086      	sub	sp, #24
 800d164:	af00      	add	r7, sp, #0
 800d166:	6078      	str	r0, [r7, #4]
 800d168:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800d16a:	687b      	ldr	r3, [r7, #4]
 800d16c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800d170:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 800d172:	2300      	movs	r3, #0
 800d174:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 800d176:	2300      	movs	r3, #0
 800d178:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 800d17a:	2300      	movs	r3, #0
 800d17c:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 800d17e:	693b      	ldr	r3, [r7, #16]
 800d180:	2b00      	cmp	r3, #0
 800d182:	d101      	bne.n	800d188 <USBD_CDC_Setup+0x28>
  {
    return (uint8_t)USBD_FAIL;
 800d184:	2303      	movs	r3, #3
 800d186:	e0af      	b.n	800d2e8 <USBD_CDC_Setup+0x188>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800d188:	683b      	ldr	r3, [r7, #0]
 800d18a:	781b      	ldrb	r3, [r3, #0]
 800d18c:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800d190:	2b00      	cmp	r3, #0
 800d192:	d03f      	beq.n	800d214 <USBD_CDC_Setup+0xb4>
 800d194:	2b20      	cmp	r3, #32
 800d196:	f040 809f 	bne.w	800d2d8 <USBD_CDC_Setup+0x178>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 800d19a:	683b      	ldr	r3, [r7, #0]
 800d19c:	88db      	ldrh	r3, [r3, #6]
 800d19e:	2b00      	cmp	r3, #0
 800d1a0:	d02e      	beq.n	800d200 <USBD_CDC_Setup+0xa0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 800d1a2:	683b      	ldr	r3, [r7, #0]
 800d1a4:	781b      	ldrb	r3, [r3, #0]
 800d1a6:	b25b      	sxtb	r3, r3
 800d1a8:	2b00      	cmp	r3, #0
 800d1aa:	da16      	bge.n	800d1da <USBD_CDC_Setup+0x7a>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800d1ac:	687b      	ldr	r3, [r7, #4]
 800d1ae:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800d1b2:	689b      	ldr	r3, [r3, #8]
 800d1b4:	683a      	ldr	r2, [r7, #0]
 800d1b6:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)hcdc->data,
 800d1b8:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800d1ba:	683a      	ldr	r2, [r7, #0]
 800d1bc:	88d2      	ldrh	r2, [r2, #6]
 800d1be:	4798      	blx	r3
                                                            req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 800d1c0:	683b      	ldr	r3, [r7, #0]
 800d1c2:	88db      	ldrh	r3, [r3, #6]
 800d1c4:	2b07      	cmp	r3, #7
 800d1c6:	bf28      	it	cs
 800d1c8:	2307      	movcs	r3, #7
 800d1ca:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 800d1cc:	693b      	ldr	r3, [r7, #16]
 800d1ce:	89fa      	ldrh	r2, [r7, #14]
 800d1d0:	4619      	mov	r1, r3
 800d1d2:	6878      	ldr	r0, [r7, #4]
 800d1d4:	f001 fae9 	bl	800e7aa <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)req, 0U);
      }
      break;
 800d1d8:	e085      	b.n	800d2e6 <USBD_CDC_Setup+0x186>
          hcdc->CmdOpCode = req->bRequest;
 800d1da:	683b      	ldr	r3, [r7, #0]
 800d1dc:	785a      	ldrb	r2, [r3, #1]
 800d1de:	693b      	ldr	r3, [r7, #16]
 800d1e0:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 800d1e4:	683b      	ldr	r3, [r7, #0]
 800d1e6:	88db      	ldrh	r3, [r3, #6]
 800d1e8:	b2da      	uxtb	r2, r3
 800d1ea:	693b      	ldr	r3, [r7, #16]
 800d1ec:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 800d1f0:	6939      	ldr	r1, [r7, #16]
 800d1f2:	683b      	ldr	r3, [r7, #0]
 800d1f4:	88db      	ldrh	r3, [r3, #6]
 800d1f6:	461a      	mov	r2, r3
 800d1f8:	6878      	ldr	r0, [r7, #4]
 800d1fa:	f001 fb02 	bl	800e802 <USBD_CtlPrepareRx>
      break;
 800d1fe:	e072      	b.n	800d2e6 <USBD_CDC_Setup+0x186>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800d200:	687b      	ldr	r3, [r7, #4]
 800d202:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800d206:	689b      	ldr	r3, [r3, #8]
 800d208:	683a      	ldr	r2, [r7, #0]
 800d20a:	7850      	ldrb	r0, [r2, #1]
 800d20c:	2200      	movs	r2, #0
 800d20e:	6839      	ldr	r1, [r7, #0]
 800d210:	4798      	blx	r3
      break;
 800d212:	e068      	b.n	800d2e6 <USBD_CDC_Setup+0x186>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800d214:	683b      	ldr	r3, [r7, #0]
 800d216:	785b      	ldrb	r3, [r3, #1]
 800d218:	2b0b      	cmp	r3, #11
 800d21a:	d852      	bhi.n	800d2c2 <USBD_CDC_Setup+0x162>
 800d21c:	a201      	add	r2, pc, #4	; (adr r2, 800d224 <USBD_CDC_Setup+0xc4>)
 800d21e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d222:	bf00      	nop
 800d224:	0800d255 	.word	0x0800d255
 800d228:	0800d2d1 	.word	0x0800d2d1
 800d22c:	0800d2c3 	.word	0x0800d2c3
 800d230:	0800d2c3 	.word	0x0800d2c3
 800d234:	0800d2c3 	.word	0x0800d2c3
 800d238:	0800d2c3 	.word	0x0800d2c3
 800d23c:	0800d2c3 	.word	0x0800d2c3
 800d240:	0800d2c3 	.word	0x0800d2c3
 800d244:	0800d2c3 	.word	0x0800d2c3
 800d248:	0800d2c3 	.word	0x0800d2c3
 800d24c:	0800d27f 	.word	0x0800d27f
 800d250:	0800d2a9 	.word	0x0800d2a9
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d254:	687b      	ldr	r3, [r7, #4]
 800d256:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d25a:	b2db      	uxtb	r3, r3
 800d25c:	2b03      	cmp	r3, #3
 800d25e:	d107      	bne.n	800d270 <USBD_CDC_Setup+0x110>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800d260:	f107 030a 	add.w	r3, r7, #10
 800d264:	2202      	movs	r2, #2
 800d266:	4619      	mov	r1, r3
 800d268:	6878      	ldr	r0, [r7, #4]
 800d26a:	f001 fa9e 	bl	800e7aa <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800d26e:	e032      	b.n	800d2d6 <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 800d270:	6839      	ldr	r1, [r7, #0]
 800d272:	6878      	ldr	r0, [r7, #4]
 800d274:	f001 fa28 	bl	800e6c8 <USBD_CtlError>
            ret = USBD_FAIL;
 800d278:	2303      	movs	r3, #3
 800d27a:	75fb      	strb	r3, [r7, #23]
          break;
 800d27c:	e02b      	b.n	800d2d6 <USBD_CDC_Setup+0x176>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d27e:	687b      	ldr	r3, [r7, #4]
 800d280:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d284:	b2db      	uxtb	r3, r3
 800d286:	2b03      	cmp	r3, #3
 800d288:	d107      	bne.n	800d29a <USBD_CDC_Setup+0x13a>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800d28a:	f107 030d 	add.w	r3, r7, #13
 800d28e:	2201      	movs	r2, #1
 800d290:	4619      	mov	r1, r3
 800d292:	6878      	ldr	r0, [r7, #4]
 800d294:	f001 fa89 	bl	800e7aa <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800d298:	e01d      	b.n	800d2d6 <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 800d29a:	6839      	ldr	r1, [r7, #0]
 800d29c:	6878      	ldr	r0, [r7, #4]
 800d29e:	f001 fa13 	bl	800e6c8 <USBD_CtlError>
            ret = USBD_FAIL;
 800d2a2:	2303      	movs	r3, #3
 800d2a4:	75fb      	strb	r3, [r7, #23]
          break;
 800d2a6:	e016      	b.n	800d2d6 <USBD_CDC_Setup+0x176>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800d2a8:	687b      	ldr	r3, [r7, #4]
 800d2aa:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d2ae:	b2db      	uxtb	r3, r3
 800d2b0:	2b03      	cmp	r3, #3
 800d2b2:	d00f      	beq.n	800d2d4 <USBD_CDC_Setup+0x174>
          {
            USBD_CtlError(pdev, req);
 800d2b4:	6839      	ldr	r1, [r7, #0]
 800d2b6:	6878      	ldr	r0, [r7, #4]
 800d2b8:	f001 fa06 	bl	800e6c8 <USBD_CtlError>
            ret = USBD_FAIL;
 800d2bc:	2303      	movs	r3, #3
 800d2be:	75fb      	strb	r3, [r7, #23]
          }
          break;
 800d2c0:	e008      	b.n	800d2d4 <USBD_CDC_Setup+0x174>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800d2c2:	6839      	ldr	r1, [r7, #0]
 800d2c4:	6878      	ldr	r0, [r7, #4]
 800d2c6:	f001 f9ff 	bl	800e6c8 <USBD_CtlError>
          ret = USBD_FAIL;
 800d2ca:	2303      	movs	r3, #3
 800d2cc:	75fb      	strb	r3, [r7, #23]
          break;
 800d2ce:	e002      	b.n	800d2d6 <USBD_CDC_Setup+0x176>
          break;
 800d2d0:	bf00      	nop
 800d2d2:	e008      	b.n	800d2e6 <USBD_CDC_Setup+0x186>
          break;
 800d2d4:	bf00      	nop
      }
      break;
 800d2d6:	e006      	b.n	800d2e6 <USBD_CDC_Setup+0x186>

    default:
      USBD_CtlError(pdev, req);
 800d2d8:	6839      	ldr	r1, [r7, #0]
 800d2da:	6878      	ldr	r0, [r7, #4]
 800d2dc:	f001 f9f4 	bl	800e6c8 <USBD_CtlError>
      ret = USBD_FAIL;
 800d2e0:	2303      	movs	r3, #3
 800d2e2:	75fb      	strb	r3, [r7, #23]
      break;
 800d2e4:	bf00      	nop
  }

  return (uint8_t)ret;
 800d2e6:	7dfb      	ldrb	r3, [r7, #23]
}
 800d2e8:	4618      	mov	r0, r3
 800d2ea:	3718      	adds	r7, #24
 800d2ec:	46bd      	mov	sp, r7
 800d2ee:	bd80      	pop	{r7, pc}

0800d2f0 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800d2f0:	b580      	push	{r7, lr}
 800d2f2:	b084      	sub	sp, #16
 800d2f4:	af00      	add	r7, sp, #0
 800d2f6:	6078      	str	r0, [r7, #4]
 800d2f8:	460b      	mov	r3, r1
 800d2fa:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = pdev->pData;
 800d2fc:	687b      	ldr	r3, [r7, #4]
 800d2fe:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800d302:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800d304:	687b      	ldr	r3, [r7, #4]
 800d306:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800d30a:	2b00      	cmp	r3, #0
 800d30c:	d101      	bne.n	800d312 <USBD_CDC_DataIn+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800d30e:	2303      	movs	r3, #3
 800d310:	e04f      	b.n	800d3b2 <USBD_CDC_DataIn+0xc2>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800d312:	687b      	ldr	r3, [r7, #4]
 800d314:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800d318:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum].total_length > 0U) &&
 800d31a:	78fa      	ldrb	r2, [r7, #3]
 800d31c:	6879      	ldr	r1, [r7, #4]
 800d31e:	4613      	mov	r3, r2
 800d320:	009b      	lsls	r3, r3, #2
 800d322:	4413      	add	r3, r2
 800d324:	009b      	lsls	r3, r3, #2
 800d326:	440b      	add	r3, r1
 800d328:	3318      	adds	r3, #24
 800d32a:	681b      	ldr	r3, [r3, #0]
 800d32c:	2b00      	cmp	r3, #0
 800d32e:	d029      	beq.n	800d384 <USBD_CDC_DataIn+0x94>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 800d330:	78fa      	ldrb	r2, [r7, #3]
 800d332:	6879      	ldr	r1, [r7, #4]
 800d334:	4613      	mov	r3, r2
 800d336:	009b      	lsls	r3, r3, #2
 800d338:	4413      	add	r3, r2
 800d33a:	009b      	lsls	r3, r3, #2
 800d33c:	440b      	add	r3, r1
 800d33e:	3318      	adds	r3, #24
 800d340:	681a      	ldr	r2, [r3, #0]
 800d342:	78f9      	ldrb	r1, [r7, #3]
 800d344:	68f8      	ldr	r0, [r7, #12]
 800d346:	460b      	mov	r3, r1
 800d348:	00db      	lsls	r3, r3, #3
 800d34a:	1a5b      	subs	r3, r3, r1
 800d34c:	009b      	lsls	r3, r3, #2
 800d34e:	4403      	add	r3, r0
 800d350:	3344      	adds	r3, #68	; 0x44
 800d352:	681b      	ldr	r3, [r3, #0]
 800d354:	fbb2 f1f3 	udiv	r1, r2, r3
 800d358:	fb03 f301 	mul.w	r3, r3, r1
 800d35c:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 800d35e:	2b00      	cmp	r3, #0
 800d360:	d110      	bne.n	800d384 <USBD_CDC_DataIn+0x94>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum].total_length = 0U;
 800d362:	78fa      	ldrb	r2, [r7, #3]
 800d364:	6879      	ldr	r1, [r7, #4]
 800d366:	4613      	mov	r3, r2
 800d368:	009b      	lsls	r3, r3, #2
 800d36a:	4413      	add	r3, r2
 800d36c:	009b      	lsls	r3, r3, #2
 800d36e:	440b      	add	r3, r1
 800d370:	3318      	adds	r3, #24
 800d372:	2200      	movs	r2, #0
 800d374:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800d376:	78f9      	ldrb	r1, [r7, #3]
 800d378:	2300      	movs	r3, #0
 800d37a:	2200      	movs	r2, #0
 800d37c:	6878      	ldr	r0, [r7, #4]
 800d37e:	f004 ff3a 	bl	80121f6 <USBD_LL_Transmit>
 800d382:	e015      	b.n	800d3b0 <USBD_CDC_DataIn+0xc0>
  }
  else
  {
    hcdc->TxState = 0U;
 800d384:	68bb      	ldr	r3, [r7, #8]
 800d386:	2200      	movs	r2, #0
 800d388:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt != NULL)
 800d38c:	687b      	ldr	r3, [r7, #4]
 800d38e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800d392:	691b      	ldr	r3, [r3, #16]
 800d394:	2b00      	cmp	r3, #0
 800d396:	d00b      	beq.n	800d3b0 <USBD_CDC_DataIn+0xc0>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800d398:	687b      	ldr	r3, [r7, #4]
 800d39a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800d39e:	691b      	ldr	r3, [r3, #16]
 800d3a0:	68ba      	ldr	r2, [r7, #8]
 800d3a2:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 800d3a6:	68ba      	ldr	r2, [r7, #8]
 800d3a8:	f502 7104 	add.w	r1, r2, #528	; 0x210
 800d3ac:	78fa      	ldrb	r2, [r7, #3]
 800d3ae:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 800d3b0:	2300      	movs	r3, #0
}
 800d3b2:	4618      	mov	r0, r3
 800d3b4:	3710      	adds	r7, #16
 800d3b6:	46bd      	mov	sp, r7
 800d3b8:	bd80      	pop	{r7, pc}

0800d3ba <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800d3ba:	b580      	push	{r7, lr}
 800d3bc:	b084      	sub	sp, #16
 800d3be:	af00      	add	r7, sp, #0
 800d3c0:	6078      	str	r0, [r7, #4]
 800d3c2:	460b      	mov	r3, r1
 800d3c4:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800d3c6:	687b      	ldr	r3, [r7, #4]
 800d3c8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800d3cc:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800d3ce:	687b      	ldr	r3, [r7, #4]
 800d3d0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800d3d4:	2b00      	cmp	r3, #0
 800d3d6:	d101      	bne.n	800d3dc <USBD_CDC_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800d3d8:	2303      	movs	r3, #3
 800d3da:	e015      	b.n	800d408 <USBD_CDC_DataOut+0x4e>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800d3dc:	78fb      	ldrb	r3, [r7, #3]
 800d3de:	4619      	mov	r1, r3
 800d3e0:	6878      	ldr	r0, [r7, #4]
 800d3e2:	f004 ff4a 	bl	801227a <USBD_LL_GetRxDataSize>
 800d3e6:	4602      	mov	r2, r0
 800d3e8:	68fb      	ldr	r3, [r7, #12]
 800d3ea:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800d3ee:	687b      	ldr	r3, [r7, #4]
 800d3f0:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800d3f4:	68db      	ldr	r3, [r3, #12]
 800d3f6:	68fa      	ldr	r2, [r7, #12]
 800d3f8:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 800d3fc:	68fa      	ldr	r2, [r7, #12]
 800d3fe:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 800d402:	4611      	mov	r1, r2
 800d404:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 800d406:	2300      	movs	r3, #0
}
 800d408:	4618      	mov	r0, r3
 800d40a:	3710      	adds	r7, #16
 800d40c:	46bd      	mov	sp, r7
 800d40e:	bd80      	pop	{r7, pc}

0800d410 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800d410:	b580      	push	{r7, lr}
 800d412:	b084      	sub	sp, #16
 800d414:	af00      	add	r7, sp, #0
 800d416:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800d418:	687b      	ldr	r3, [r7, #4]
 800d41a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800d41e:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800d420:	68fb      	ldr	r3, [r7, #12]
 800d422:	2b00      	cmp	r3, #0
 800d424:	d101      	bne.n	800d42a <USBD_CDC_EP0_RxReady+0x1a>
  {
    return (uint8_t)USBD_FAIL;
 800d426:	2303      	movs	r3, #3
 800d428:	e01b      	b.n	800d462 <USBD_CDC_EP0_RxReady+0x52>
  }

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800d42a:	687b      	ldr	r3, [r7, #4]
 800d42c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800d430:	2b00      	cmp	r3, #0
 800d432:	d015      	beq.n	800d460 <USBD_CDC_EP0_RxReady+0x50>
 800d434:	68fb      	ldr	r3, [r7, #12]
 800d436:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800d43a:	2bff      	cmp	r3, #255	; 0xff
 800d43c:	d010      	beq.n	800d460 <USBD_CDC_EP0_RxReady+0x50>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800d43e:	687b      	ldr	r3, [r7, #4]
 800d440:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800d444:	689b      	ldr	r3, [r3, #8]
 800d446:	68fa      	ldr	r2, [r7, #12]
 800d448:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)hcdc->data,
 800d44c:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 800d44e:	68fa      	ldr	r2, [r7, #12]
 800d450:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800d454:	b292      	uxth	r2, r2
 800d456:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800d458:	68fb      	ldr	r3, [r7, #12]
 800d45a:	22ff      	movs	r2, #255	; 0xff
 800d45c:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 800d460:	2300      	movs	r3, #0
}
 800d462:	4618      	mov	r0, r3
 800d464:	3710      	adds	r7, #16
 800d466:	46bd      	mov	sp, r7
 800d468:	bd80      	pop	{r7, pc}
	...

0800d46c <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800d46c:	b480      	push	{r7}
 800d46e:	b083      	sub	sp, #12
 800d470:	af00      	add	r7, sp, #0
 800d472:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 800d474:	687b      	ldr	r3, [r7, #4]
 800d476:	2243      	movs	r2, #67	; 0x43
 800d478:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 800d47a:	4b03      	ldr	r3, [pc, #12]	; (800d488 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 800d47c:	4618      	mov	r0, r3
 800d47e:	370c      	adds	r7, #12
 800d480:	46bd      	mov	sp, r7
 800d482:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d486:	4770      	bx	lr
 800d488:	20000098 	.word	0x20000098

0800d48c <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800d48c:	b480      	push	{r7}
 800d48e:	b083      	sub	sp, #12
 800d490:	af00      	add	r7, sp, #0
 800d492:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 800d494:	687b      	ldr	r3, [r7, #4]
 800d496:	2243      	movs	r2, #67	; 0x43
 800d498:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgHSDesc;
 800d49a:	4b03      	ldr	r3, [pc, #12]	; (800d4a8 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 800d49c:	4618      	mov	r0, r3
 800d49e:	370c      	adds	r7, #12
 800d4a0:	46bd      	mov	sp, r7
 800d4a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d4a6:	4770      	bx	lr
 800d4a8:	20000054 	.word	0x20000054

0800d4ac <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800d4ac:	b480      	push	{r7}
 800d4ae:	b083      	sub	sp, #12
 800d4b0:	af00      	add	r7, sp, #0
 800d4b2:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 800d4b4:	687b      	ldr	r3, [r7, #4]
 800d4b6:	2243      	movs	r2, #67	; 0x43
 800d4b8:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
 800d4ba:	4b03      	ldr	r3, [pc, #12]	; (800d4c8 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 800d4bc:	4618      	mov	r0, r3
 800d4be:	370c      	adds	r7, #12
 800d4c0:	46bd      	mov	sp, r7
 800d4c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d4c6:	4770      	bx	lr
 800d4c8:	200000dc 	.word	0x200000dc

0800d4cc <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800d4cc:	b480      	push	{r7}
 800d4ce:	b083      	sub	sp, #12
 800d4d0:	af00      	add	r7, sp, #0
 800d4d2:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 800d4d4:	687b      	ldr	r3, [r7, #4]
 800d4d6:	220a      	movs	r2, #10
 800d4d8:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800d4da:	4b03      	ldr	r3, [pc, #12]	; (800d4e8 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800d4dc:	4618      	mov	r0, r3
 800d4de:	370c      	adds	r7, #12
 800d4e0:	46bd      	mov	sp, r7
 800d4e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d4e6:	4770      	bx	lr
 800d4e8:	20000010 	.word	0x20000010

0800d4ec <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 800d4ec:	b480      	push	{r7}
 800d4ee:	b083      	sub	sp, #12
 800d4f0:	af00      	add	r7, sp, #0
 800d4f2:	6078      	str	r0, [r7, #4]
 800d4f4:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800d4f6:	683b      	ldr	r3, [r7, #0]
 800d4f8:	2b00      	cmp	r3, #0
 800d4fa:	d101      	bne.n	800d500 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800d4fc:	2303      	movs	r3, #3
 800d4fe:	e004      	b.n	800d50a <USBD_CDC_RegisterInterface+0x1e>
  }

  pdev->pUserData = fops;
 800d500:	687b      	ldr	r3, [r7, #4]
 800d502:	683a      	ldr	r2, [r7, #0]
 800d504:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 800d508:	2300      	movs	r3, #0
}
 800d50a:	4618      	mov	r0, r3
 800d50c:	370c      	adds	r7, #12
 800d50e:	46bd      	mov	sp, r7
 800d510:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d514:	4770      	bx	lr

0800d516 <USBD_CDC_SetTxBuffer>:
  * @param  pbuff: Tx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 800d516:	b480      	push	{r7}
 800d518:	b087      	sub	sp, #28
 800d51a:	af00      	add	r7, sp, #0
 800d51c:	60f8      	str	r0, [r7, #12]
 800d51e:	60b9      	str	r1, [r7, #8]
 800d520:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800d522:	68fb      	ldr	r3, [r7, #12]
 800d524:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800d528:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 800d52a:	697b      	ldr	r3, [r7, #20]
 800d52c:	2b00      	cmp	r3, #0
 800d52e:	d101      	bne.n	800d534 <USBD_CDC_SetTxBuffer+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 800d530:	2303      	movs	r3, #3
 800d532:	e008      	b.n	800d546 <USBD_CDC_SetTxBuffer+0x30>
  }

  hcdc->TxBuffer = pbuff;
 800d534:	697b      	ldr	r3, [r7, #20]
 800d536:	68ba      	ldr	r2, [r7, #8]
 800d538:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 800d53c:	697b      	ldr	r3, [r7, #20]
 800d53e:	687a      	ldr	r2, [r7, #4]
 800d540:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 800d544:	2300      	movs	r3, #0
}
 800d546:	4618      	mov	r0, r3
 800d548:	371c      	adds	r7, #28
 800d54a:	46bd      	mov	sp, r7
 800d54c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d550:	4770      	bx	lr

0800d552 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 800d552:	b480      	push	{r7}
 800d554:	b085      	sub	sp, #20
 800d556:	af00      	add	r7, sp, #0
 800d558:	6078      	str	r0, [r7, #4]
 800d55a:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800d55c:	687b      	ldr	r3, [r7, #4]
 800d55e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800d562:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800d564:	68fb      	ldr	r3, [r7, #12]
 800d566:	2b00      	cmp	r3, #0
 800d568:	d101      	bne.n	800d56e <USBD_CDC_SetRxBuffer+0x1c>
  {
    return (uint8_t)USBD_FAIL;
 800d56a:	2303      	movs	r3, #3
 800d56c:	e004      	b.n	800d578 <USBD_CDC_SetRxBuffer+0x26>
  }

  hcdc->RxBuffer = pbuff;
 800d56e:	68fb      	ldr	r3, [r7, #12]
 800d570:	683a      	ldr	r2, [r7, #0]
 800d572:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 800d576:	2300      	movs	r3, #0
}
 800d578:	4618      	mov	r0, r3
 800d57a:	3714      	adds	r7, #20
 800d57c:	46bd      	mov	sp, r7
 800d57e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d582:	4770      	bx	lr

0800d584 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800d584:	b580      	push	{r7, lr}
 800d586:	b084      	sub	sp, #16
 800d588:	af00      	add	r7, sp, #0
 800d58a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800d58c:	687b      	ldr	r3, [r7, #4]
 800d58e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800d592:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800d594:	687b      	ldr	r3, [r7, #4]
 800d596:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800d59a:	2b00      	cmp	r3, #0
 800d59c:	d101      	bne.n	800d5a2 <USBD_CDC_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 800d59e:	2303      	movs	r3, #3
 800d5a0:	e016      	b.n	800d5d0 <USBD_CDC_ReceivePacket+0x4c>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800d5a2:	687b      	ldr	r3, [r7, #4]
 800d5a4:	7c1b      	ldrb	r3, [r3, #16]
 800d5a6:	2b00      	cmp	r3, #0
 800d5a8:	d109      	bne.n	800d5be <USBD_CDC_ReceivePacket+0x3a>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800d5aa:	68fb      	ldr	r3, [r7, #12]
 800d5ac:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800d5b0:	f44f 7300 	mov.w	r3, #512	; 0x200
 800d5b4:	2101      	movs	r1, #1
 800d5b6:	6878      	ldr	r0, [r7, #4]
 800d5b8:	f004 fe3e 	bl	8012238 <USBD_LL_PrepareReceive>
 800d5bc:	e007      	b.n	800d5ce <USBD_CDC_ReceivePacket+0x4a>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800d5be:	68fb      	ldr	r3, [r7, #12]
 800d5c0:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800d5c4:	2340      	movs	r3, #64	; 0x40
 800d5c6:	2101      	movs	r1, #1
 800d5c8:	6878      	ldr	r0, [r7, #4]
 800d5ca:	f004 fe35 	bl	8012238 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800d5ce:	2300      	movs	r3, #0
}
 800d5d0:	4618      	mov	r0, r3
 800d5d2:	3710      	adds	r7, #16
 800d5d4:	46bd      	mov	sp, r7
 800d5d6:	bd80      	pop	{r7, pc}

0800d5d8 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800d5d8:	b580      	push	{r7, lr}
 800d5da:	b086      	sub	sp, #24
 800d5dc:	af00      	add	r7, sp, #0
 800d5de:	60f8      	str	r0, [r7, #12]
 800d5e0:	60b9      	str	r1, [r7, #8]
 800d5e2:	4613      	mov	r3, r2
 800d5e4:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800d5e6:	68fb      	ldr	r3, [r7, #12]
 800d5e8:	2b00      	cmp	r3, #0
 800d5ea:	d101      	bne.n	800d5f0 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 800d5ec:	2303      	movs	r3, #3
 800d5ee:	e01f      	b.n	800d630 <USBD_Init+0x58>
  }

  /* Unlink previous class resources */
  pdev->pClass = NULL;
 800d5f0:	68fb      	ldr	r3, [r7, #12]
 800d5f2:	2200      	movs	r2, #0
 800d5f4:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData = NULL;
 800d5f8:	68fb      	ldr	r3, [r7, #12]
 800d5fa:	2200      	movs	r2, #0
 800d5fc:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0
  pdev->pConfDesc = NULL;
 800d600:	68fb      	ldr	r3, [r7, #12]
 800d602:	2200      	movs	r2, #0
 800d604:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800d608:	68bb      	ldr	r3, [r7, #8]
 800d60a:	2b00      	cmp	r3, #0
 800d60c:	d003      	beq.n	800d616 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800d60e:	68fb      	ldr	r3, [r7, #12]
 800d610:	68ba      	ldr	r2, [r7, #8]
 800d612:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800d616:	68fb      	ldr	r3, [r7, #12]
 800d618:	2201      	movs	r2, #1
 800d61a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 800d61e:	68fb      	ldr	r3, [r7, #12]
 800d620:	79fa      	ldrb	r2, [r7, #7]
 800d622:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800d624:	68f8      	ldr	r0, [r7, #12]
 800d626:	f004 fcab 	bl	8011f80 <USBD_LL_Init>
 800d62a:	4603      	mov	r3, r0
 800d62c:	75fb      	strb	r3, [r7, #23]

  return ret;
 800d62e:	7dfb      	ldrb	r3, [r7, #23]
}
 800d630:	4618      	mov	r0, r3
 800d632:	3718      	adds	r7, #24
 800d634:	46bd      	mov	sp, r7
 800d636:	bd80      	pop	{r7, pc}

0800d638 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800d638:	b580      	push	{r7, lr}
 800d63a:	b084      	sub	sp, #16
 800d63c:	af00      	add	r7, sp, #0
 800d63e:	6078      	str	r0, [r7, #4]
 800d640:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800d642:	2300      	movs	r3, #0
 800d644:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800d646:	683b      	ldr	r3, [r7, #0]
 800d648:	2b00      	cmp	r3, #0
 800d64a:	d101      	bne.n	800d650 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 800d64c:	2303      	movs	r3, #3
 800d64e:	e016      	b.n	800d67e <USBD_RegisterClass+0x46>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 800d650:	687b      	ldr	r3, [r7, #4]
 800d652:	683a      	ldr	r2, [r7, #0]
 800d654:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass->GetFSConfigDescriptor != NULL)
 800d658:	687b      	ldr	r3, [r7, #4]
 800d65a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d65e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d660:	2b00      	cmp	r3, #0
 800d662:	d00b      	beq.n	800d67c <USBD_RegisterClass+0x44>
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 800d664:	687b      	ldr	r3, [r7, #4]
 800d666:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d66a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d66c:	f107 020e 	add.w	r2, r7, #14
 800d670:	4610      	mov	r0, r2
 800d672:	4798      	blx	r3
 800d674:	4602      	mov	r2, r0
 800d676:	687b      	ldr	r3, [r7, #4]
 800d678:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }
#endif /* USE_USB_FS */

  return USBD_OK;
 800d67c:	2300      	movs	r3, #0
}
 800d67e:	4618      	mov	r0, r3
 800d680:	3710      	adds	r7, #16
 800d682:	46bd      	mov	sp, r7
 800d684:	bd80      	pop	{r7, pc}

0800d686 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800d686:	b580      	push	{r7, lr}
 800d688:	b082      	sub	sp, #8
 800d68a:	af00      	add	r7, sp, #0
 800d68c:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800d68e:	6878      	ldr	r0, [r7, #4]
 800d690:	f004 fcc8 	bl	8012024 <USBD_LL_Start>
 800d694:	4603      	mov	r3, r0
}
 800d696:	4618      	mov	r0, r3
 800d698:	3708      	adds	r7, #8
 800d69a:	46bd      	mov	sp, r7
 800d69c:	bd80      	pop	{r7, pc}

0800d69e <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 800d69e:	b480      	push	{r7}
 800d6a0:	b083      	sub	sp, #12
 800d6a2:	af00      	add	r7, sp, #0
 800d6a4:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800d6a6:	2300      	movs	r3, #0
}
 800d6a8:	4618      	mov	r0, r3
 800d6aa:	370c      	adds	r7, #12
 800d6ac:	46bd      	mov	sp, r7
 800d6ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d6b2:	4770      	bx	lr

0800d6b4 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800d6b4:	b580      	push	{r7, lr}
 800d6b6:	b084      	sub	sp, #16
 800d6b8:	af00      	add	r7, sp, #0
 800d6ba:	6078      	str	r0, [r7, #4]
 800d6bc:	460b      	mov	r3, r1
 800d6be:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 800d6c0:	2303      	movs	r3, #3
 800d6c2:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 800d6c4:	687b      	ldr	r3, [r7, #4]
 800d6c6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d6ca:	2b00      	cmp	r3, #0
 800d6cc:	d009      	beq.n	800d6e2 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 800d6ce:	687b      	ldr	r3, [r7, #4]
 800d6d0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d6d4:	681b      	ldr	r3, [r3, #0]
 800d6d6:	78fa      	ldrb	r2, [r7, #3]
 800d6d8:	4611      	mov	r1, r2
 800d6da:	6878      	ldr	r0, [r7, #4]
 800d6dc:	4798      	blx	r3
 800d6de:	4603      	mov	r3, r0
 800d6e0:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 800d6e2:	7bfb      	ldrb	r3, [r7, #15]
}
 800d6e4:	4618      	mov	r0, r3
 800d6e6:	3710      	adds	r7, #16
 800d6e8:	46bd      	mov	sp, r7
 800d6ea:	bd80      	pop	{r7, pc}

0800d6ec <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800d6ec:	b580      	push	{r7, lr}
 800d6ee:	b082      	sub	sp, #8
 800d6f0:	af00      	add	r7, sp, #0
 800d6f2:	6078      	str	r0, [r7, #4]
 800d6f4:	460b      	mov	r3, r1
 800d6f6:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 800d6f8:	687b      	ldr	r3, [r7, #4]
 800d6fa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d6fe:	2b00      	cmp	r3, #0
 800d700:	d007      	beq.n	800d712 <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 800d702:	687b      	ldr	r3, [r7, #4]
 800d704:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d708:	685b      	ldr	r3, [r3, #4]
 800d70a:	78fa      	ldrb	r2, [r7, #3]
 800d70c:	4611      	mov	r1, r2
 800d70e:	6878      	ldr	r0, [r7, #4]
 800d710:	4798      	blx	r3
  }

  return USBD_OK;
 800d712:	2300      	movs	r3, #0
}
 800d714:	4618      	mov	r0, r3
 800d716:	3708      	adds	r7, #8
 800d718:	46bd      	mov	sp, r7
 800d71a:	bd80      	pop	{r7, pc}

0800d71c <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800d71c:	b580      	push	{r7, lr}
 800d71e:	b084      	sub	sp, #16
 800d720:	af00      	add	r7, sp, #0
 800d722:	6078      	str	r0, [r7, #4]
 800d724:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800d726:	687b      	ldr	r3, [r7, #4]
 800d728:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800d72c:	6839      	ldr	r1, [r7, #0]
 800d72e:	4618      	mov	r0, r3
 800d730:	f000 ff90 	bl	800e654 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800d734:	687b      	ldr	r3, [r7, #4]
 800d736:	2201      	movs	r2, #1
 800d738:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800d73c:	687b      	ldr	r3, [r7, #4]
 800d73e:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 800d742:	461a      	mov	r2, r3
 800d744:	687b      	ldr	r3, [r7, #4]
 800d746:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800d74a:	687b      	ldr	r3, [r7, #4]
 800d74c:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800d750:	f003 031f 	and.w	r3, r3, #31
 800d754:	2b02      	cmp	r3, #2
 800d756:	d01a      	beq.n	800d78e <USBD_LL_SetupStage+0x72>
 800d758:	2b02      	cmp	r3, #2
 800d75a:	d822      	bhi.n	800d7a2 <USBD_LL_SetupStage+0x86>
 800d75c:	2b00      	cmp	r3, #0
 800d75e:	d002      	beq.n	800d766 <USBD_LL_SetupStage+0x4a>
 800d760:	2b01      	cmp	r3, #1
 800d762:	d00a      	beq.n	800d77a <USBD_LL_SetupStage+0x5e>
 800d764:	e01d      	b.n	800d7a2 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800d766:	687b      	ldr	r3, [r7, #4]
 800d768:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800d76c:	4619      	mov	r1, r3
 800d76e:	6878      	ldr	r0, [r7, #4]
 800d770:	f000 fa62 	bl	800dc38 <USBD_StdDevReq>
 800d774:	4603      	mov	r3, r0
 800d776:	73fb      	strb	r3, [r7, #15]
      break;
 800d778:	e020      	b.n	800d7bc <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800d77a:	687b      	ldr	r3, [r7, #4]
 800d77c:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800d780:	4619      	mov	r1, r3
 800d782:	6878      	ldr	r0, [r7, #4]
 800d784:	f000 fac6 	bl	800dd14 <USBD_StdItfReq>
 800d788:	4603      	mov	r3, r0
 800d78a:	73fb      	strb	r3, [r7, #15]
      break;
 800d78c:	e016      	b.n	800d7bc <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800d78e:	687b      	ldr	r3, [r7, #4]
 800d790:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800d794:	4619      	mov	r1, r3
 800d796:	6878      	ldr	r0, [r7, #4]
 800d798:	f000 fb05 	bl	800dda6 <USBD_StdEPReq>
 800d79c:	4603      	mov	r3, r0
 800d79e:	73fb      	strb	r3, [r7, #15]
      break;
 800d7a0:	e00c      	b.n	800d7bc <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800d7a2:	687b      	ldr	r3, [r7, #4]
 800d7a4:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800d7a8:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800d7ac:	b2db      	uxtb	r3, r3
 800d7ae:	4619      	mov	r1, r3
 800d7b0:	6878      	ldr	r0, [r7, #4]
 800d7b2:	f004 fc97 	bl	80120e4 <USBD_LL_StallEP>
 800d7b6:	4603      	mov	r3, r0
 800d7b8:	73fb      	strb	r3, [r7, #15]
      break;
 800d7ba:	bf00      	nop
  }

  return ret;
 800d7bc:	7bfb      	ldrb	r3, [r7, #15]
}
 800d7be:	4618      	mov	r0, r3
 800d7c0:	3710      	adds	r7, #16
 800d7c2:	46bd      	mov	sp, r7
 800d7c4:	bd80      	pop	{r7, pc}

0800d7c6 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800d7c6:	b580      	push	{r7, lr}
 800d7c8:	b086      	sub	sp, #24
 800d7ca:	af00      	add	r7, sp, #0
 800d7cc:	60f8      	str	r0, [r7, #12]
 800d7ce:	460b      	mov	r3, r1
 800d7d0:	607a      	str	r2, [r7, #4]
 800d7d2:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800d7d4:	7afb      	ldrb	r3, [r7, #11]
 800d7d6:	2b00      	cmp	r3, #0
 800d7d8:	d138      	bne.n	800d84c <USBD_LL_DataOutStage+0x86>
  {
    pep = &pdev->ep_out[0];
 800d7da:	68fb      	ldr	r3, [r7, #12]
 800d7dc:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800d7e0:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800d7e2:	68fb      	ldr	r3, [r7, #12]
 800d7e4:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800d7e8:	2b03      	cmp	r3, #3
 800d7ea:	d14a      	bne.n	800d882 <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 800d7ec:	693b      	ldr	r3, [r7, #16]
 800d7ee:	689a      	ldr	r2, [r3, #8]
 800d7f0:	693b      	ldr	r3, [r7, #16]
 800d7f2:	68db      	ldr	r3, [r3, #12]
 800d7f4:	429a      	cmp	r2, r3
 800d7f6:	d913      	bls.n	800d820 <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800d7f8:	693b      	ldr	r3, [r7, #16]
 800d7fa:	689a      	ldr	r2, [r3, #8]
 800d7fc:	693b      	ldr	r3, [r7, #16]
 800d7fe:	68db      	ldr	r3, [r3, #12]
 800d800:	1ad2      	subs	r2, r2, r3
 800d802:	693b      	ldr	r3, [r7, #16]
 800d804:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800d806:	693b      	ldr	r3, [r7, #16]
 800d808:	68da      	ldr	r2, [r3, #12]
 800d80a:	693b      	ldr	r3, [r7, #16]
 800d80c:	689b      	ldr	r3, [r3, #8]
 800d80e:	4293      	cmp	r3, r2
 800d810:	bf28      	it	cs
 800d812:	4613      	movcs	r3, r2
 800d814:	461a      	mov	r2, r3
 800d816:	6879      	ldr	r1, [r7, #4]
 800d818:	68f8      	ldr	r0, [r7, #12]
 800d81a:	f001 f80f 	bl	800e83c <USBD_CtlContinueRx>
 800d81e:	e030      	b.n	800d882 <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d820:	68fb      	ldr	r3, [r7, #12]
 800d822:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d826:	b2db      	uxtb	r3, r3
 800d828:	2b03      	cmp	r3, #3
 800d82a:	d10b      	bne.n	800d844 <USBD_LL_DataOutStage+0x7e>
        {
          if (pdev->pClass->EP0_RxReady != NULL)
 800d82c:	68fb      	ldr	r3, [r7, #12]
 800d82e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d832:	691b      	ldr	r3, [r3, #16]
 800d834:	2b00      	cmp	r3, #0
 800d836:	d005      	beq.n	800d844 <USBD_LL_DataOutStage+0x7e>
          {
            pdev->pClass->EP0_RxReady(pdev);
 800d838:	68fb      	ldr	r3, [r7, #12]
 800d83a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d83e:	691b      	ldr	r3, [r3, #16]
 800d840:	68f8      	ldr	r0, [r7, #12]
 800d842:	4798      	blx	r3
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800d844:	68f8      	ldr	r0, [r7, #12]
 800d846:	f001 f80a 	bl	800e85e <USBD_CtlSendStatus>
 800d84a:	e01a      	b.n	800d882 <USBD_LL_DataOutStage+0xbc>
#endif
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d84c:	68fb      	ldr	r3, [r7, #12]
 800d84e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d852:	b2db      	uxtb	r3, r3
 800d854:	2b03      	cmp	r3, #3
 800d856:	d114      	bne.n	800d882 <USBD_LL_DataOutStage+0xbc>
    {
      if (pdev->pClass->DataOut != NULL)
 800d858:	68fb      	ldr	r3, [r7, #12]
 800d85a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d85e:	699b      	ldr	r3, [r3, #24]
 800d860:	2b00      	cmp	r3, #0
 800d862:	d00e      	beq.n	800d882 <USBD_LL_DataOutStage+0xbc>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 800d864:	68fb      	ldr	r3, [r7, #12]
 800d866:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d86a:	699b      	ldr	r3, [r3, #24]
 800d86c:	7afa      	ldrb	r2, [r7, #11]
 800d86e:	4611      	mov	r1, r2
 800d870:	68f8      	ldr	r0, [r7, #12]
 800d872:	4798      	blx	r3
 800d874:	4603      	mov	r3, r0
 800d876:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 800d878:	7dfb      	ldrb	r3, [r7, #23]
 800d87a:	2b00      	cmp	r3, #0
 800d87c:	d001      	beq.n	800d882 <USBD_LL_DataOutStage+0xbc>
        {
          return ret;
 800d87e:	7dfb      	ldrb	r3, [r7, #23]
 800d880:	e000      	b.n	800d884 <USBD_LL_DataOutStage+0xbe>
        }
      }
    }
  }

  return USBD_OK;
 800d882:	2300      	movs	r3, #0
}
 800d884:	4618      	mov	r0, r3
 800d886:	3718      	adds	r7, #24
 800d888:	46bd      	mov	sp, r7
 800d88a:	bd80      	pop	{r7, pc}

0800d88c <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800d88c:	b580      	push	{r7, lr}
 800d88e:	b086      	sub	sp, #24
 800d890:	af00      	add	r7, sp, #0
 800d892:	60f8      	str	r0, [r7, #12]
 800d894:	460b      	mov	r3, r1
 800d896:	607a      	str	r2, [r7, #4]
 800d898:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800d89a:	7afb      	ldrb	r3, [r7, #11]
 800d89c:	2b00      	cmp	r3, #0
 800d89e:	d16b      	bne.n	800d978 <USBD_LL_DataInStage+0xec>
  {
    pep = &pdev->ep_in[0];
 800d8a0:	68fb      	ldr	r3, [r7, #12]
 800d8a2:	3314      	adds	r3, #20
 800d8a4:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800d8a6:	68fb      	ldr	r3, [r7, #12]
 800d8a8:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800d8ac:	2b02      	cmp	r3, #2
 800d8ae:	d156      	bne.n	800d95e <USBD_LL_DataInStage+0xd2>
    {
      if (pep->rem_length > pep->maxpacket)
 800d8b0:	693b      	ldr	r3, [r7, #16]
 800d8b2:	689a      	ldr	r2, [r3, #8]
 800d8b4:	693b      	ldr	r3, [r7, #16]
 800d8b6:	68db      	ldr	r3, [r3, #12]
 800d8b8:	429a      	cmp	r2, r3
 800d8ba:	d914      	bls.n	800d8e6 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800d8bc:	693b      	ldr	r3, [r7, #16]
 800d8be:	689a      	ldr	r2, [r3, #8]
 800d8c0:	693b      	ldr	r3, [r7, #16]
 800d8c2:	68db      	ldr	r3, [r3, #12]
 800d8c4:	1ad2      	subs	r2, r2, r3
 800d8c6:	693b      	ldr	r3, [r7, #16]
 800d8c8:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800d8ca:	693b      	ldr	r3, [r7, #16]
 800d8cc:	689b      	ldr	r3, [r3, #8]
 800d8ce:	461a      	mov	r2, r3
 800d8d0:	6879      	ldr	r1, [r7, #4]
 800d8d2:	68f8      	ldr	r0, [r7, #12]
 800d8d4:	f000 ff84 	bl	800e7e0 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800d8d8:	2300      	movs	r3, #0
 800d8da:	2200      	movs	r2, #0
 800d8dc:	2100      	movs	r1, #0
 800d8de:	68f8      	ldr	r0, [r7, #12]
 800d8e0:	f004 fcaa 	bl	8012238 <USBD_LL_PrepareReceive>
 800d8e4:	e03b      	b.n	800d95e <USBD_LL_DataInStage+0xd2>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800d8e6:	693b      	ldr	r3, [r7, #16]
 800d8e8:	68da      	ldr	r2, [r3, #12]
 800d8ea:	693b      	ldr	r3, [r7, #16]
 800d8ec:	689b      	ldr	r3, [r3, #8]
 800d8ee:	429a      	cmp	r2, r3
 800d8f0:	d11c      	bne.n	800d92c <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800d8f2:	693b      	ldr	r3, [r7, #16]
 800d8f4:	685a      	ldr	r2, [r3, #4]
 800d8f6:	693b      	ldr	r3, [r7, #16]
 800d8f8:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800d8fa:	429a      	cmp	r2, r3
 800d8fc:	d316      	bcc.n	800d92c <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800d8fe:	693b      	ldr	r3, [r7, #16]
 800d900:	685a      	ldr	r2, [r3, #4]
 800d902:	68fb      	ldr	r3, [r7, #12]
 800d904:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800d908:	429a      	cmp	r2, r3
 800d90a:	d20f      	bcs.n	800d92c <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800d90c:	2200      	movs	r2, #0
 800d90e:	2100      	movs	r1, #0
 800d910:	68f8      	ldr	r0, [r7, #12]
 800d912:	f000 ff65 	bl	800e7e0 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800d916:	68fb      	ldr	r3, [r7, #12]
 800d918:	2200      	movs	r2, #0
 800d91a:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800d91e:	2300      	movs	r3, #0
 800d920:	2200      	movs	r2, #0
 800d922:	2100      	movs	r1, #0
 800d924:	68f8      	ldr	r0, [r7, #12]
 800d926:	f004 fc87 	bl	8012238 <USBD_LL_PrepareReceive>
 800d92a:	e018      	b.n	800d95e <USBD_LL_DataInStage+0xd2>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d92c:	68fb      	ldr	r3, [r7, #12]
 800d92e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d932:	b2db      	uxtb	r3, r3
 800d934:	2b03      	cmp	r3, #3
 800d936:	d10b      	bne.n	800d950 <USBD_LL_DataInStage+0xc4>
          {
            if (pdev->pClass->EP0_TxSent != NULL)
 800d938:	68fb      	ldr	r3, [r7, #12]
 800d93a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d93e:	68db      	ldr	r3, [r3, #12]
 800d940:	2b00      	cmp	r3, #0
 800d942:	d005      	beq.n	800d950 <USBD_LL_DataInStage+0xc4>
            {
              pdev->pClass->EP0_TxSent(pdev);
 800d944:	68fb      	ldr	r3, [r7, #12]
 800d946:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d94a:	68db      	ldr	r3, [r3, #12]
 800d94c:	68f8      	ldr	r0, [r7, #12]
 800d94e:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800d950:	2180      	movs	r1, #128	; 0x80
 800d952:	68f8      	ldr	r0, [r7, #12]
 800d954:	f004 fbc6 	bl	80120e4 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800d958:	68f8      	ldr	r0, [r7, #12]
 800d95a:	f000 ff93 	bl	800e884 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 800d95e:	68fb      	ldr	r3, [r7, #12]
 800d960:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800d964:	2b01      	cmp	r3, #1
 800d966:	d122      	bne.n	800d9ae <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 800d968:	68f8      	ldr	r0, [r7, #12]
 800d96a:	f7ff fe98 	bl	800d69e <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800d96e:	68fb      	ldr	r3, [r7, #12]
 800d970:	2200      	movs	r2, #0
 800d972:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 800d976:	e01a      	b.n	800d9ae <USBD_LL_DataInStage+0x122>
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d978:	68fb      	ldr	r3, [r7, #12]
 800d97a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d97e:	b2db      	uxtb	r3, r3
 800d980:	2b03      	cmp	r3, #3
 800d982:	d114      	bne.n	800d9ae <USBD_LL_DataInStage+0x122>
    {
      if (pdev->pClass->DataIn != NULL)
 800d984:	68fb      	ldr	r3, [r7, #12]
 800d986:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d98a:	695b      	ldr	r3, [r3, #20]
 800d98c:	2b00      	cmp	r3, #0
 800d98e:	d00e      	beq.n	800d9ae <USBD_LL_DataInStage+0x122>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 800d990:	68fb      	ldr	r3, [r7, #12]
 800d992:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d996:	695b      	ldr	r3, [r3, #20]
 800d998:	7afa      	ldrb	r2, [r7, #11]
 800d99a:	4611      	mov	r1, r2
 800d99c:	68f8      	ldr	r0, [r7, #12]
 800d99e:	4798      	blx	r3
 800d9a0:	4603      	mov	r3, r0
 800d9a2:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 800d9a4:	7dfb      	ldrb	r3, [r7, #23]
 800d9a6:	2b00      	cmp	r3, #0
 800d9a8:	d001      	beq.n	800d9ae <USBD_LL_DataInStage+0x122>
        {
          return ret;
 800d9aa:	7dfb      	ldrb	r3, [r7, #23]
 800d9ac:	e000      	b.n	800d9b0 <USBD_LL_DataInStage+0x124>
        }
      }
    }
  }

  return USBD_OK;
 800d9ae:	2300      	movs	r3, #0
}
 800d9b0:	4618      	mov	r0, r3
 800d9b2:	3718      	adds	r7, #24
 800d9b4:	46bd      	mov	sp, r7
 800d9b6:	bd80      	pop	{r7, pc}

0800d9b8 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800d9b8:	b580      	push	{r7, lr}
 800d9ba:	b082      	sub	sp, #8
 800d9bc:	af00      	add	r7, sp, #0
 800d9be:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800d9c0:	687b      	ldr	r3, [r7, #4]
 800d9c2:	2201      	movs	r2, #1
 800d9c4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800d9c8:	687b      	ldr	r3, [r7, #4]
 800d9ca:	2200      	movs	r2, #0
 800d9cc:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800d9d0:	687b      	ldr	r3, [r7, #4]
 800d9d2:	2200      	movs	r2, #0
 800d9d4:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800d9d6:	687b      	ldr	r3, [r7, #4]
 800d9d8:	2200      	movs	r2, #0
 800d9da:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClass == NULL)
 800d9de:	687b      	ldr	r3, [r7, #4]
 800d9e0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d9e4:	2b00      	cmp	r3, #0
 800d9e6:	d101      	bne.n	800d9ec <USBD_LL_Reset+0x34>
  {
    return USBD_FAIL;
 800d9e8:	2303      	movs	r3, #3
 800d9ea:	e02f      	b.n	800da4c <USBD_LL_Reset+0x94>
  }

  if (pdev->pClassData != NULL)
 800d9ec:	687b      	ldr	r3, [r7, #4]
 800d9ee:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800d9f2:	2b00      	cmp	r3, #0
 800d9f4:	d00f      	beq.n	800da16 <USBD_LL_Reset+0x5e>
  {
    if (pdev->pClass->DeInit != NULL)
 800d9f6:	687b      	ldr	r3, [r7, #4]
 800d9f8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d9fc:	685b      	ldr	r3, [r3, #4]
 800d9fe:	2b00      	cmp	r3, #0
 800da00:	d009      	beq.n	800da16 <USBD_LL_Reset+0x5e>
    {
      (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800da02:	687b      	ldr	r3, [r7, #4]
 800da04:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800da08:	685b      	ldr	r3, [r3, #4]
 800da0a:	687a      	ldr	r2, [r7, #4]
 800da0c:	6852      	ldr	r2, [r2, #4]
 800da0e:	b2d2      	uxtb	r2, r2
 800da10:	4611      	mov	r1, r2
 800da12:	6878      	ldr	r0, [r7, #4]
 800da14:	4798      	blx	r3
    }
  }

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800da16:	2340      	movs	r3, #64	; 0x40
 800da18:	2200      	movs	r2, #0
 800da1a:	2100      	movs	r1, #0
 800da1c:	6878      	ldr	r0, [r7, #4]
 800da1e:	f004 fb1c 	bl	801205a <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800da22:	687b      	ldr	r3, [r7, #4]
 800da24:	2201      	movs	r2, #1
 800da26:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800da2a:	687b      	ldr	r3, [r7, #4]
 800da2c:	2240      	movs	r2, #64	; 0x40
 800da2e:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800da32:	2340      	movs	r3, #64	; 0x40
 800da34:	2200      	movs	r2, #0
 800da36:	2180      	movs	r1, #128	; 0x80
 800da38:	6878      	ldr	r0, [r7, #4]
 800da3a:	f004 fb0e 	bl	801205a <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800da3e:	687b      	ldr	r3, [r7, #4]
 800da40:	2201      	movs	r2, #1
 800da42:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800da44:	687b      	ldr	r3, [r7, #4]
 800da46:	2240      	movs	r2, #64	; 0x40
 800da48:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 800da4a:	2300      	movs	r3, #0
}
 800da4c:	4618      	mov	r0, r3
 800da4e:	3708      	adds	r7, #8
 800da50:	46bd      	mov	sp, r7
 800da52:	bd80      	pop	{r7, pc}

0800da54 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800da54:	b480      	push	{r7}
 800da56:	b083      	sub	sp, #12
 800da58:	af00      	add	r7, sp, #0
 800da5a:	6078      	str	r0, [r7, #4]
 800da5c:	460b      	mov	r3, r1
 800da5e:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800da60:	687b      	ldr	r3, [r7, #4]
 800da62:	78fa      	ldrb	r2, [r7, #3]
 800da64:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800da66:	2300      	movs	r3, #0
}
 800da68:	4618      	mov	r0, r3
 800da6a:	370c      	adds	r7, #12
 800da6c:	46bd      	mov	sp, r7
 800da6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da72:	4770      	bx	lr

0800da74 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800da74:	b480      	push	{r7}
 800da76:	b083      	sub	sp, #12
 800da78:	af00      	add	r7, sp, #0
 800da7a:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 800da7c:	687b      	ldr	r3, [r7, #4]
 800da7e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800da82:	b2da      	uxtb	r2, r3
 800da84:	687b      	ldr	r3, [r7, #4]
 800da86:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 800da8a:	687b      	ldr	r3, [r7, #4]
 800da8c:	2204      	movs	r2, #4
 800da8e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800da92:	2300      	movs	r3, #0
}
 800da94:	4618      	mov	r0, r3
 800da96:	370c      	adds	r7, #12
 800da98:	46bd      	mov	sp, r7
 800da9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da9e:	4770      	bx	lr

0800daa0 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800daa0:	b480      	push	{r7}
 800daa2:	b083      	sub	sp, #12
 800daa4:	af00      	add	r7, sp, #0
 800daa6:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800daa8:	687b      	ldr	r3, [r7, #4]
 800daaa:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800daae:	b2db      	uxtb	r3, r3
 800dab0:	2b04      	cmp	r3, #4
 800dab2:	d106      	bne.n	800dac2 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800dab4:	687b      	ldr	r3, [r7, #4]
 800dab6:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 800daba:	b2da      	uxtb	r2, r3
 800dabc:	687b      	ldr	r3, [r7, #4]
 800dabe:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800dac2:	2300      	movs	r3, #0
}
 800dac4:	4618      	mov	r0, r3
 800dac6:	370c      	adds	r7, #12
 800dac8:	46bd      	mov	sp, r7
 800daca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dace:	4770      	bx	lr

0800dad0 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800dad0:	b580      	push	{r7, lr}
 800dad2:	b082      	sub	sp, #8
 800dad4:	af00      	add	r7, sp, #0
 800dad6:	6078      	str	r0, [r7, #4]
  if (pdev->pClass == NULL)
 800dad8:	687b      	ldr	r3, [r7, #4]
 800dada:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800dade:	2b00      	cmp	r3, #0
 800dae0:	d101      	bne.n	800dae6 <USBD_LL_SOF+0x16>
  {
    return USBD_FAIL;
 800dae2:	2303      	movs	r3, #3
 800dae4:	e012      	b.n	800db0c <USBD_LL_SOF+0x3c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800dae6:	687b      	ldr	r3, [r7, #4]
 800dae8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800daec:	b2db      	uxtb	r3, r3
 800daee:	2b03      	cmp	r3, #3
 800daf0:	d10b      	bne.n	800db0a <USBD_LL_SOF+0x3a>
  {
    if (pdev->pClass->SOF != NULL)
 800daf2:	687b      	ldr	r3, [r7, #4]
 800daf4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800daf8:	69db      	ldr	r3, [r3, #28]
 800dafa:	2b00      	cmp	r3, #0
 800dafc:	d005      	beq.n	800db0a <USBD_LL_SOF+0x3a>
    {
      (void)pdev->pClass->SOF(pdev);
 800dafe:	687b      	ldr	r3, [r7, #4]
 800db00:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800db04:	69db      	ldr	r3, [r3, #28]
 800db06:	6878      	ldr	r0, [r7, #4]
 800db08:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800db0a:	2300      	movs	r3, #0
}
 800db0c:	4618      	mov	r0, r3
 800db0e:	3708      	adds	r7, #8
 800db10:	46bd      	mov	sp, r7
 800db12:	bd80      	pop	{r7, pc}

0800db14 <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800db14:	b580      	push	{r7, lr}
 800db16:	b082      	sub	sp, #8
 800db18:	af00      	add	r7, sp, #0
 800db1a:	6078      	str	r0, [r7, #4]
 800db1c:	460b      	mov	r3, r1
 800db1e:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 800db20:	687b      	ldr	r3, [r7, #4]
 800db22:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800db26:	2b00      	cmp	r3, #0
 800db28:	d101      	bne.n	800db2e <USBD_LL_IsoINIncomplete+0x1a>
  {
    return USBD_FAIL;
 800db2a:	2303      	movs	r3, #3
 800db2c:	e014      	b.n	800db58 <USBD_LL_IsoINIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800db2e:	687b      	ldr	r3, [r7, #4]
 800db30:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800db34:	b2db      	uxtb	r3, r3
 800db36:	2b03      	cmp	r3, #3
 800db38:	d10d      	bne.n	800db56 <USBD_LL_IsoINIncomplete+0x42>
  {
    if (pdev->pClass->IsoINIncomplete != NULL)
 800db3a:	687b      	ldr	r3, [r7, #4]
 800db3c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800db40:	6a1b      	ldr	r3, [r3, #32]
 800db42:	2b00      	cmp	r3, #0
 800db44:	d007      	beq.n	800db56 <USBD_LL_IsoINIncomplete+0x42>
    {
      (void)pdev->pClass->IsoINIncomplete(pdev, epnum);
 800db46:	687b      	ldr	r3, [r7, #4]
 800db48:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800db4c:	6a1b      	ldr	r3, [r3, #32]
 800db4e:	78fa      	ldrb	r2, [r7, #3]
 800db50:	4611      	mov	r1, r2
 800db52:	6878      	ldr	r0, [r7, #4]
 800db54:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800db56:	2300      	movs	r3, #0
}
 800db58:	4618      	mov	r0, r3
 800db5a:	3708      	adds	r7, #8
 800db5c:	46bd      	mov	sp, r7
 800db5e:	bd80      	pop	{r7, pc}

0800db60 <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800db60:	b580      	push	{r7, lr}
 800db62:	b082      	sub	sp, #8
 800db64:	af00      	add	r7, sp, #0
 800db66:	6078      	str	r0, [r7, #4]
 800db68:	460b      	mov	r3, r1
 800db6a:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 800db6c:	687b      	ldr	r3, [r7, #4]
 800db6e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800db72:	2b00      	cmp	r3, #0
 800db74:	d101      	bne.n	800db7a <USBD_LL_IsoOUTIncomplete+0x1a>
  {
    return USBD_FAIL;
 800db76:	2303      	movs	r3, #3
 800db78:	e014      	b.n	800dba4 <USBD_LL_IsoOUTIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800db7a:	687b      	ldr	r3, [r7, #4]
 800db7c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800db80:	b2db      	uxtb	r3, r3
 800db82:	2b03      	cmp	r3, #3
 800db84:	d10d      	bne.n	800dba2 <USBD_LL_IsoOUTIncomplete+0x42>
  {
    if (pdev->pClass->IsoOUTIncomplete != NULL)
 800db86:	687b      	ldr	r3, [r7, #4]
 800db88:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800db8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800db8e:	2b00      	cmp	r3, #0
 800db90:	d007      	beq.n	800dba2 <USBD_LL_IsoOUTIncomplete+0x42>
    {
      (void)pdev->pClass->IsoOUTIncomplete(pdev, epnum);
 800db92:	687b      	ldr	r3, [r7, #4]
 800db94:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800db98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800db9a:	78fa      	ldrb	r2, [r7, #3]
 800db9c:	4611      	mov	r1, r2
 800db9e:	6878      	ldr	r0, [r7, #4]
 800dba0:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800dba2:	2300      	movs	r3, #0
}
 800dba4:	4618      	mov	r0, r3
 800dba6:	3708      	adds	r7, #8
 800dba8:	46bd      	mov	sp, r7
 800dbaa:	bd80      	pop	{r7, pc}

0800dbac <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800dbac:	b480      	push	{r7}
 800dbae:	b083      	sub	sp, #12
 800dbb0:	af00      	add	r7, sp, #0
 800dbb2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800dbb4:	2300      	movs	r3, #0
}
 800dbb6:	4618      	mov	r0, r3
 800dbb8:	370c      	adds	r7, #12
 800dbba:	46bd      	mov	sp, r7
 800dbbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dbc0:	4770      	bx	lr

0800dbc2 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800dbc2:	b580      	push	{r7, lr}
 800dbc4:	b082      	sub	sp, #8
 800dbc6:	af00      	add	r7, sp, #0
 800dbc8:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800dbca:	687b      	ldr	r3, [r7, #4]
 800dbcc:	2201      	movs	r2, #1
 800dbce:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  if (pdev->pClass != NULL)
 800dbd2:	687b      	ldr	r3, [r7, #4]
 800dbd4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800dbd8:	2b00      	cmp	r3, #0
 800dbda:	d009      	beq.n	800dbf0 <USBD_LL_DevDisconnected+0x2e>
  {
    (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800dbdc:	687b      	ldr	r3, [r7, #4]
 800dbde:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800dbe2:	685b      	ldr	r3, [r3, #4]
 800dbe4:	687a      	ldr	r2, [r7, #4]
 800dbe6:	6852      	ldr	r2, [r2, #4]
 800dbe8:	b2d2      	uxtb	r2, r2
 800dbea:	4611      	mov	r1, r2
 800dbec:	6878      	ldr	r0, [r7, #4]
 800dbee:	4798      	blx	r3
  }

  return USBD_OK;
 800dbf0:	2300      	movs	r3, #0
}
 800dbf2:	4618      	mov	r0, r3
 800dbf4:	3708      	adds	r7, #8
 800dbf6:	46bd      	mov	sp, r7
 800dbf8:	bd80      	pop	{r7, pc}

0800dbfa <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800dbfa:	b480      	push	{r7}
 800dbfc:	b087      	sub	sp, #28
 800dbfe:	af00      	add	r7, sp, #0
 800dc00:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 800dc02:	687b      	ldr	r3, [r7, #4]
 800dc04:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800dc06:	697b      	ldr	r3, [r7, #20]
 800dc08:	781b      	ldrb	r3, [r3, #0]
 800dc0a:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800dc0c:	697b      	ldr	r3, [r7, #20]
 800dc0e:	3301      	adds	r3, #1
 800dc10:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800dc12:	697b      	ldr	r3, [r7, #20]
 800dc14:	781b      	ldrb	r3, [r3, #0]
 800dc16:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800dc18:	8a3b      	ldrh	r3, [r7, #16]
 800dc1a:	021b      	lsls	r3, r3, #8
 800dc1c:	b21a      	sxth	r2, r3
 800dc1e:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800dc22:	4313      	orrs	r3, r2
 800dc24:	b21b      	sxth	r3, r3
 800dc26:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800dc28:	89fb      	ldrh	r3, [r7, #14]
}
 800dc2a:	4618      	mov	r0, r3
 800dc2c:	371c      	adds	r7, #28
 800dc2e:	46bd      	mov	sp, r7
 800dc30:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc34:	4770      	bx	lr
	...

0800dc38 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800dc38:	b580      	push	{r7, lr}
 800dc3a:	b084      	sub	sp, #16
 800dc3c:	af00      	add	r7, sp, #0
 800dc3e:	6078      	str	r0, [r7, #4]
 800dc40:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800dc42:	2300      	movs	r3, #0
 800dc44:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800dc46:	683b      	ldr	r3, [r7, #0]
 800dc48:	781b      	ldrb	r3, [r3, #0]
 800dc4a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800dc4e:	2b40      	cmp	r3, #64	; 0x40
 800dc50:	d005      	beq.n	800dc5e <USBD_StdDevReq+0x26>
 800dc52:	2b40      	cmp	r3, #64	; 0x40
 800dc54:	d853      	bhi.n	800dcfe <USBD_StdDevReq+0xc6>
 800dc56:	2b00      	cmp	r3, #0
 800dc58:	d00b      	beq.n	800dc72 <USBD_StdDevReq+0x3a>
 800dc5a:	2b20      	cmp	r3, #32
 800dc5c:	d14f      	bne.n	800dcfe <USBD_StdDevReq+0xc6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800dc5e:	687b      	ldr	r3, [r7, #4]
 800dc60:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800dc64:	689b      	ldr	r3, [r3, #8]
 800dc66:	6839      	ldr	r1, [r7, #0]
 800dc68:	6878      	ldr	r0, [r7, #4]
 800dc6a:	4798      	blx	r3
 800dc6c:	4603      	mov	r3, r0
 800dc6e:	73fb      	strb	r3, [r7, #15]
      break;
 800dc70:	e04a      	b.n	800dd08 <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800dc72:	683b      	ldr	r3, [r7, #0]
 800dc74:	785b      	ldrb	r3, [r3, #1]
 800dc76:	2b09      	cmp	r3, #9
 800dc78:	d83b      	bhi.n	800dcf2 <USBD_StdDevReq+0xba>
 800dc7a:	a201      	add	r2, pc, #4	; (adr r2, 800dc80 <USBD_StdDevReq+0x48>)
 800dc7c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dc80:	0800dcd5 	.word	0x0800dcd5
 800dc84:	0800dce9 	.word	0x0800dce9
 800dc88:	0800dcf3 	.word	0x0800dcf3
 800dc8c:	0800dcdf 	.word	0x0800dcdf
 800dc90:	0800dcf3 	.word	0x0800dcf3
 800dc94:	0800dcb3 	.word	0x0800dcb3
 800dc98:	0800dca9 	.word	0x0800dca9
 800dc9c:	0800dcf3 	.word	0x0800dcf3
 800dca0:	0800dccb 	.word	0x0800dccb
 800dca4:	0800dcbd 	.word	0x0800dcbd
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800dca8:	6839      	ldr	r1, [r7, #0]
 800dcaa:	6878      	ldr	r0, [r7, #4]
 800dcac:	f000 f9de 	bl	800e06c <USBD_GetDescriptor>
          break;
 800dcb0:	e024      	b.n	800dcfc <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800dcb2:	6839      	ldr	r1, [r7, #0]
 800dcb4:	6878      	ldr	r0, [r7, #4]
 800dcb6:	f000 fb43 	bl	800e340 <USBD_SetAddress>
          break;
 800dcba:	e01f      	b.n	800dcfc <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800dcbc:	6839      	ldr	r1, [r7, #0]
 800dcbe:	6878      	ldr	r0, [r7, #4]
 800dcc0:	f000 fb82 	bl	800e3c8 <USBD_SetConfig>
 800dcc4:	4603      	mov	r3, r0
 800dcc6:	73fb      	strb	r3, [r7, #15]
          break;
 800dcc8:	e018      	b.n	800dcfc <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800dcca:	6839      	ldr	r1, [r7, #0]
 800dccc:	6878      	ldr	r0, [r7, #4]
 800dcce:	f000 fc21 	bl	800e514 <USBD_GetConfig>
          break;
 800dcd2:	e013      	b.n	800dcfc <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800dcd4:	6839      	ldr	r1, [r7, #0]
 800dcd6:	6878      	ldr	r0, [r7, #4]
 800dcd8:	f000 fc52 	bl	800e580 <USBD_GetStatus>
          break;
 800dcdc:	e00e      	b.n	800dcfc <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800dcde:	6839      	ldr	r1, [r7, #0]
 800dce0:	6878      	ldr	r0, [r7, #4]
 800dce2:	f000 fc81 	bl	800e5e8 <USBD_SetFeature>
          break;
 800dce6:	e009      	b.n	800dcfc <USBD_StdDevReq+0xc4>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800dce8:	6839      	ldr	r1, [r7, #0]
 800dcea:	6878      	ldr	r0, [r7, #4]
 800dcec:	f000 fc90 	bl	800e610 <USBD_ClrFeature>
          break;
 800dcf0:	e004      	b.n	800dcfc <USBD_StdDevReq+0xc4>

        default:
          USBD_CtlError(pdev, req);
 800dcf2:	6839      	ldr	r1, [r7, #0]
 800dcf4:	6878      	ldr	r0, [r7, #4]
 800dcf6:	f000 fce7 	bl	800e6c8 <USBD_CtlError>
          break;
 800dcfa:	bf00      	nop
      }
      break;
 800dcfc:	e004      	b.n	800dd08 <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 800dcfe:	6839      	ldr	r1, [r7, #0]
 800dd00:	6878      	ldr	r0, [r7, #4]
 800dd02:	f000 fce1 	bl	800e6c8 <USBD_CtlError>
      break;
 800dd06:	bf00      	nop
  }

  return ret;
 800dd08:	7bfb      	ldrb	r3, [r7, #15]
}
 800dd0a:	4618      	mov	r0, r3
 800dd0c:	3710      	adds	r7, #16
 800dd0e:	46bd      	mov	sp, r7
 800dd10:	bd80      	pop	{r7, pc}
 800dd12:	bf00      	nop

0800dd14 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800dd14:	b580      	push	{r7, lr}
 800dd16:	b084      	sub	sp, #16
 800dd18:	af00      	add	r7, sp, #0
 800dd1a:	6078      	str	r0, [r7, #4]
 800dd1c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800dd1e:	2300      	movs	r3, #0
 800dd20:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800dd22:	683b      	ldr	r3, [r7, #0]
 800dd24:	781b      	ldrb	r3, [r3, #0]
 800dd26:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800dd2a:	2b40      	cmp	r3, #64	; 0x40
 800dd2c:	d005      	beq.n	800dd3a <USBD_StdItfReq+0x26>
 800dd2e:	2b40      	cmp	r3, #64	; 0x40
 800dd30:	d82f      	bhi.n	800dd92 <USBD_StdItfReq+0x7e>
 800dd32:	2b00      	cmp	r3, #0
 800dd34:	d001      	beq.n	800dd3a <USBD_StdItfReq+0x26>
 800dd36:	2b20      	cmp	r3, #32
 800dd38:	d12b      	bne.n	800dd92 <USBD_StdItfReq+0x7e>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800dd3a:	687b      	ldr	r3, [r7, #4]
 800dd3c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800dd40:	b2db      	uxtb	r3, r3
 800dd42:	3b01      	subs	r3, #1
 800dd44:	2b02      	cmp	r3, #2
 800dd46:	d81d      	bhi.n	800dd84 <USBD_StdItfReq+0x70>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800dd48:	683b      	ldr	r3, [r7, #0]
 800dd4a:	889b      	ldrh	r3, [r3, #4]
 800dd4c:	b2db      	uxtb	r3, r3
 800dd4e:	2b01      	cmp	r3, #1
 800dd50:	d813      	bhi.n	800dd7a <USBD_StdItfReq+0x66>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800dd52:	687b      	ldr	r3, [r7, #4]
 800dd54:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800dd58:	689b      	ldr	r3, [r3, #8]
 800dd5a:	6839      	ldr	r1, [r7, #0]
 800dd5c:	6878      	ldr	r0, [r7, #4]
 800dd5e:	4798      	blx	r3
 800dd60:	4603      	mov	r3, r0
 800dd62:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800dd64:	683b      	ldr	r3, [r7, #0]
 800dd66:	88db      	ldrh	r3, [r3, #6]
 800dd68:	2b00      	cmp	r3, #0
 800dd6a:	d110      	bne.n	800dd8e <USBD_StdItfReq+0x7a>
 800dd6c:	7bfb      	ldrb	r3, [r7, #15]
 800dd6e:	2b00      	cmp	r3, #0
 800dd70:	d10d      	bne.n	800dd8e <USBD_StdItfReq+0x7a>
            {
              (void)USBD_CtlSendStatus(pdev);
 800dd72:	6878      	ldr	r0, [r7, #4]
 800dd74:	f000 fd73 	bl	800e85e <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800dd78:	e009      	b.n	800dd8e <USBD_StdItfReq+0x7a>
            USBD_CtlError(pdev, req);
 800dd7a:	6839      	ldr	r1, [r7, #0]
 800dd7c:	6878      	ldr	r0, [r7, #4]
 800dd7e:	f000 fca3 	bl	800e6c8 <USBD_CtlError>
          break;
 800dd82:	e004      	b.n	800dd8e <USBD_StdItfReq+0x7a>

        default:
          USBD_CtlError(pdev, req);
 800dd84:	6839      	ldr	r1, [r7, #0]
 800dd86:	6878      	ldr	r0, [r7, #4]
 800dd88:	f000 fc9e 	bl	800e6c8 <USBD_CtlError>
          break;
 800dd8c:	e000      	b.n	800dd90 <USBD_StdItfReq+0x7c>
          break;
 800dd8e:	bf00      	nop
      }
      break;
 800dd90:	e004      	b.n	800dd9c <USBD_StdItfReq+0x88>

    default:
      USBD_CtlError(pdev, req);
 800dd92:	6839      	ldr	r1, [r7, #0]
 800dd94:	6878      	ldr	r0, [r7, #4]
 800dd96:	f000 fc97 	bl	800e6c8 <USBD_CtlError>
      break;
 800dd9a:	bf00      	nop
  }

  return ret;
 800dd9c:	7bfb      	ldrb	r3, [r7, #15]
}
 800dd9e:	4618      	mov	r0, r3
 800dda0:	3710      	adds	r7, #16
 800dda2:	46bd      	mov	sp, r7
 800dda4:	bd80      	pop	{r7, pc}

0800dda6 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800dda6:	b580      	push	{r7, lr}
 800dda8:	b084      	sub	sp, #16
 800ddaa:	af00      	add	r7, sp, #0
 800ddac:	6078      	str	r0, [r7, #4]
 800ddae:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 800ddb0:	2300      	movs	r3, #0
 800ddb2:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 800ddb4:	683b      	ldr	r3, [r7, #0]
 800ddb6:	889b      	ldrh	r3, [r3, #4]
 800ddb8:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800ddba:	683b      	ldr	r3, [r7, #0]
 800ddbc:	781b      	ldrb	r3, [r3, #0]
 800ddbe:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800ddc2:	2b40      	cmp	r3, #64	; 0x40
 800ddc4:	d007      	beq.n	800ddd6 <USBD_StdEPReq+0x30>
 800ddc6:	2b40      	cmp	r3, #64	; 0x40
 800ddc8:	f200 8145 	bhi.w	800e056 <USBD_StdEPReq+0x2b0>
 800ddcc:	2b00      	cmp	r3, #0
 800ddce:	d00c      	beq.n	800ddea <USBD_StdEPReq+0x44>
 800ddd0:	2b20      	cmp	r3, #32
 800ddd2:	f040 8140 	bne.w	800e056 <USBD_StdEPReq+0x2b0>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800ddd6:	687b      	ldr	r3, [r7, #4]
 800ddd8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800dddc:	689b      	ldr	r3, [r3, #8]
 800ddde:	6839      	ldr	r1, [r7, #0]
 800dde0:	6878      	ldr	r0, [r7, #4]
 800dde2:	4798      	blx	r3
 800dde4:	4603      	mov	r3, r0
 800dde6:	73fb      	strb	r3, [r7, #15]
      break;
 800dde8:	e13a      	b.n	800e060 <USBD_StdEPReq+0x2ba>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800ddea:	683b      	ldr	r3, [r7, #0]
 800ddec:	785b      	ldrb	r3, [r3, #1]
 800ddee:	2b03      	cmp	r3, #3
 800ddf0:	d007      	beq.n	800de02 <USBD_StdEPReq+0x5c>
 800ddf2:	2b03      	cmp	r3, #3
 800ddf4:	f300 8129 	bgt.w	800e04a <USBD_StdEPReq+0x2a4>
 800ddf8:	2b00      	cmp	r3, #0
 800ddfa:	d07f      	beq.n	800defc <USBD_StdEPReq+0x156>
 800ddfc:	2b01      	cmp	r3, #1
 800ddfe:	d03c      	beq.n	800de7a <USBD_StdEPReq+0xd4>
 800de00:	e123      	b.n	800e04a <USBD_StdEPReq+0x2a4>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800de02:	687b      	ldr	r3, [r7, #4]
 800de04:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800de08:	b2db      	uxtb	r3, r3
 800de0a:	2b02      	cmp	r3, #2
 800de0c:	d002      	beq.n	800de14 <USBD_StdEPReq+0x6e>
 800de0e:	2b03      	cmp	r3, #3
 800de10:	d016      	beq.n	800de40 <USBD_StdEPReq+0x9a>
 800de12:	e02c      	b.n	800de6e <USBD_StdEPReq+0xc8>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800de14:	7bbb      	ldrb	r3, [r7, #14]
 800de16:	2b00      	cmp	r3, #0
 800de18:	d00d      	beq.n	800de36 <USBD_StdEPReq+0x90>
 800de1a:	7bbb      	ldrb	r3, [r7, #14]
 800de1c:	2b80      	cmp	r3, #128	; 0x80
 800de1e:	d00a      	beq.n	800de36 <USBD_StdEPReq+0x90>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800de20:	7bbb      	ldrb	r3, [r7, #14]
 800de22:	4619      	mov	r1, r3
 800de24:	6878      	ldr	r0, [r7, #4]
 800de26:	f004 f95d 	bl	80120e4 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800de2a:	2180      	movs	r1, #128	; 0x80
 800de2c:	6878      	ldr	r0, [r7, #4]
 800de2e:	f004 f959 	bl	80120e4 <USBD_LL_StallEP>
 800de32:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800de34:	e020      	b.n	800de78 <USBD_StdEPReq+0xd2>
                USBD_CtlError(pdev, req);
 800de36:	6839      	ldr	r1, [r7, #0]
 800de38:	6878      	ldr	r0, [r7, #4]
 800de3a:	f000 fc45 	bl	800e6c8 <USBD_CtlError>
              break;
 800de3e:	e01b      	b.n	800de78 <USBD_StdEPReq+0xd2>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800de40:	683b      	ldr	r3, [r7, #0]
 800de42:	885b      	ldrh	r3, [r3, #2]
 800de44:	2b00      	cmp	r3, #0
 800de46:	d10e      	bne.n	800de66 <USBD_StdEPReq+0xc0>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800de48:	7bbb      	ldrb	r3, [r7, #14]
 800de4a:	2b00      	cmp	r3, #0
 800de4c:	d00b      	beq.n	800de66 <USBD_StdEPReq+0xc0>
 800de4e:	7bbb      	ldrb	r3, [r7, #14]
 800de50:	2b80      	cmp	r3, #128	; 0x80
 800de52:	d008      	beq.n	800de66 <USBD_StdEPReq+0xc0>
 800de54:	683b      	ldr	r3, [r7, #0]
 800de56:	88db      	ldrh	r3, [r3, #6]
 800de58:	2b00      	cmp	r3, #0
 800de5a:	d104      	bne.n	800de66 <USBD_StdEPReq+0xc0>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800de5c:	7bbb      	ldrb	r3, [r7, #14]
 800de5e:	4619      	mov	r1, r3
 800de60:	6878      	ldr	r0, [r7, #4]
 800de62:	f004 f93f 	bl	80120e4 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800de66:	6878      	ldr	r0, [r7, #4]
 800de68:	f000 fcf9 	bl	800e85e <USBD_CtlSendStatus>

              break;
 800de6c:	e004      	b.n	800de78 <USBD_StdEPReq+0xd2>

            default:
              USBD_CtlError(pdev, req);
 800de6e:	6839      	ldr	r1, [r7, #0]
 800de70:	6878      	ldr	r0, [r7, #4]
 800de72:	f000 fc29 	bl	800e6c8 <USBD_CtlError>
              break;
 800de76:	bf00      	nop
          }
          break;
 800de78:	e0ec      	b.n	800e054 <USBD_StdEPReq+0x2ae>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800de7a:	687b      	ldr	r3, [r7, #4]
 800de7c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800de80:	b2db      	uxtb	r3, r3
 800de82:	2b02      	cmp	r3, #2
 800de84:	d002      	beq.n	800de8c <USBD_StdEPReq+0xe6>
 800de86:	2b03      	cmp	r3, #3
 800de88:	d016      	beq.n	800deb8 <USBD_StdEPReq+0x112>
 800de8a:	e030      	b.n	800deee <USBD_StdEPReq+0x148>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800de8c:	7bbb      	ldrb	r3, [r7, #14]
 800de8e:	2b00      	cmp	r3, #0
 800de90:	d00d      	beq.n	800deae <USBD_StdEPReq+0x108>
 800de92:	7bbb      	ldrb	r3, [r7, #14]
 800de94:	2b80      	cmp	r3, #128	; 0x80
 800de96:	d00a      	beq.n	800deae <USBD_StdEPReq+0x108>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800de98:	7bbb      	ldrb	r3, [r7, #14]
 800de9a:	4619      	mov	r1, r3
 800de9c:	6878      	ldr	r0, [r7, #4]
 800de9e:	f004 f921 	bl	80120e4 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800dea2:	2180      	movs	r1, #128	; 0x80
 800dea4:	6878      	ldr	r0, [r7, #4]
 800dea6:	f004 f91d 	bl	80120e4 <USBD_LL_StallEP>
 800deaa:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800deac:	e025      	b.n	800defa <USBD_StdEPReq+0x154>
                USBD_CtlError(pdev, req);
 800deae:	6839      	ldr	r1, [r7, #0]
 800deb0:	6878      	ldr	r0, [r7, #4]
 800deb2:	f000 fc09 	bl	800e6c8 <USBD_CtlError>
              break;
 800deb6:	e020      	b.n	800defa <USBD_StdEPReq+0x154>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800deb8:	683b      	ldr	r3, [r7, #0]
 800deba:	885b      	ldrh	r3, [r3, #2]
 800debc:	2b00      	cmp	r3, #0
 800debe:	d11b      	bne.n	800def8 <USBD_StdEPReq+0x152>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800dec0:	7bbb      	ldrb	r3, [r7, #14]
 800dec2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800dec6:	2b00      	cmp	r3, #0
 800dec8:	d004      	beq.n	800ded4 <USBD_StdEPReq+0x12e>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800deca:	7bbb      	ldrb	r3, [r7, #14]
 800decc:	4619      	mov	r1, r3
 800dece:	6878      	ldr	r0, [r7, #4]
 800ded0:	f004 f927 	bl	8012122 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800ded4:	6878      	ldr	r0, [r7, #4]
 800ded6:	f000 fcc2 	bl	800e85e <USBD_CtlSendStatus>
                ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800deda:	687b      	ldr	r3, [r7, #4]
 800dedc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800dee0:	689b      	ldr	r3, [r3, #8]
 800dee2:	6839      	ldr	r1, [r7, #0]
 800dee4:	6878      	ldr	r0, [r7, #4]
 800dee6:	4798      	blx	r3
 800dee8:	4603      	mov	r3, r0
 800deea:	73fb      	strb	r3, [r7, #15]
              }
              break;
 800deec:	e004      	b.n	800def8 <USBD_StdEPReq+0x152>

            default:
              USBD_CtlError(pdev, req);
 800deee:	6839      	ldr	r1, [r7, #0]
 800def0:	6878      	ldr	r0, [r7, #4]
 800def2:	f000 fbe9 	bl	800e6c8 <USBD_CtlError>
              break;
 800def6:	e000      	b.n	800defa <USBD_StdEPReq+0x154>
              break;
 800def8:	bf00      	nop
          }
          break;
 800defa:	e0ab      	b.n	800e054 <USBD_StdEPReq+0x2ae>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800defc:	687b      	ldr	r3, [r7, #4]
 800defe:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800df02:	b2db      	uxtb	r3, r3
 800df04:	2b02      	cmp	r3, #2
 800df06:	d002      	beq.n	800df0e <USBD_StdEPReq+0x168>
 800df08:	2b03      	cmp	r3, #3
 800df0a:	d032      	beq.n	800df72 <USBD_StdEPReq+0x1cc>
 800df0c:	e097      	b.n	800e03e <USBD_StdEPReq+0x298>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800df0e:	7bbb      	ldrb	r3, [r7, #14]
 800df10:	2b00      	cmp	r3, #0
 800df12:	d007      	beq.n	800df24 <USBD_StdEPReq+0x17e>
 800df14:	7bbb      	ldrb	r3, [r7, #14]
 800df16:	2b80      	cmp	r3, #128	; 0x80
 800df18:	d004      	beq.n	800df24 <USBD_StdEPReq+0x17e>
              {
                USBD_CtlError(pdev, req);
 800df1a:	6839      	ldr	r1, [r7, #0]
 800df1c:	6878      	ldr	r0, [r7, #4]
 800df1e:	f000 fbd3 	bl	800e6c8 <USBD_CtlError>
                break;
 800df22:	e091      	b.n	800e048 <USBD_StdEPReq+0x2a2>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800df24:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800df28:	2b00      	cmp	r3, #0
 800df2a:	da0b      	bge.n	800df44 <USBD_StdEPReq+0x19e>
 800df2c:	7bbb      	ldrb	r3, [r7, #14]
 800df2e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800df32:	4613      	mov	r3, r2
 800df34:	009b      	lsls	r3, r3, #2
 800df36:	4413      	add	r3, r2
 800df38:	009b      	lsls	r3, r3, #2
 800df3a:	3310      	adds	r3, #16
 800df3c:	687a      	ldr	r2, [r7, #4]
 800df3e:	4413      	add	r3, r2
 800df40:	3304      	adds	r3, #4
 800df42:	e00b      	b.n	800df5c <USBD_StdEPReq+0x1b6>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800df44:	7bbb      	ldrb	r3, [r7, #14]
 800df46:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800df4a:	4613      	mov	r3, r2
 800df4c:	009b      	lsls	r3, r3, #2
 800df4e:	4413      	add	r3, r2
 800df50:	009b      	lsls	r3, r3, #2
 800df52:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800df56:	687a      	ldr	r2, [r7, #4]
 800df58:	4413      	add	r3, r2
 800df5a:	3304      	adds	r3, #4
 800df5c:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800df5e:	68bb      	ldr	r3, [r7, #8]
 800df60:	2200      	movs	r2, #0
 800df62:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800df64:	68bb      	ldr	r3, [r7, #8]
 800df66:	2202      	movs	r2, #2
 800df68:	4619      	mov	r1, r3
 800df6a:	6878      	ldr	r0, [r7, #4]
 800df6c:	f000 fc1d 	bl	800e7aa <USBD_CtlSendData>
              break;
 800df70:	e06a      	b.n	800e048 <USBD_StdEPReq+0x2a2>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800df72:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800df76:	2b00      	cmp	r3, #0
 800df78:	da11      	bge.n	800df9e <USBD_StdEPReq+0x1f8>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800df7a:	7bbb      	ldrb	r3, [r7, #14]
 800df7c:	f003 020f 	and.w	r2, r3, #15
 800df80:	6879      	ldr	r1, [r7, #4]
 800df82:	4613      	mov	r3, r2
 800df84:	009b      	lsls	r3, r3, #2
 800df86:	4413      	add	r3, r2
 800df88:	009b      	lsls	r3, r3, #2
 800df8a:	440b      	add	r3, r1
 800df8c:	3324      	adds	r3, #36	; 0x24
 800df8e:	881b      	ldrh	r3, [r3, #0]
 800df90:	2b00      	cmp	r3, #0
 800df92:	d117      	bne.n	800dfc4 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 800df94:	6839      	ldr	r1, [r7, #0]
 800df96:	6878      	ldr	r0, [r7, #4]
 800df98:	f000 fb96 	bl	800e6c8 <USBD_CtlError>
                  break;
 800df9c:	e054      	b.n	800e048 <USBD_StdEPReq+0x2a2>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800df9e:	7bbb      	ldrb	r3, [r7, #14]
 800dfa0:	f003 020f 	and.w	r2, r3, #15
 800dfa4:	6879      	ldr	r1, [r7, #4]
 800dfa6:	4613      	mov	r3, r2
 800dfa8:	009b      	lsls	r3, r3, #2
 800dfaa:	4413      	add	r3, r2
 800dfac:	009b      	lsls	r3, r3, #2
 800dfae:	440b      	add	r3, r1
 800dfb0:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800dfb4:	881b      	ldrh	r3, [r3, #0]
 800dfb6:	2b00      	cmp	r3, #0
 800dfb8:	d104      	bne.n	800dfc4 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 800dfba:	6839      	ldr	r1, [r7, #0]
 800dfbc:	6878      	ldr	r0, [r7, #4]
 800dfbe:	f000 fb83 	bl	800e6c8 <USBD_CtlError>
                  break;
 800dfc2:	e041      	b.n	800e048 <USBD_StdEPReq+0x2a2>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800dfc4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800dfc8:	2b00      	cmp	r3, #0
 800dfca:	da0b      	bge.n	800dfe4 <USBD_StdEPReq+0x23e>
 800dfcc:	7bbb      	ldrb	r3, [r7, #14]
 800dfce:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800dfd2:	4613      	mov	r3, r2
 800dfd4:	009b      	lsls	r3, r3, #2
 800dfd6:	4413      	add	r3, r2
 800dfd8:	009b      	lsls	r3, r3, #2
 800dfda:	3310      	adds	r3, #16
 800dfdc:	687a      	ldr	r2, [r7, #4]
 800dfde:	4413      	add	r3, r2
 800dfe0:	3304      	adds	r3, #4
 800dfe2:	e00b      	b.n	800dffc <USBD_StdEPReq+0x256>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800dfe4:	7bbb      	ldrb	r3, [r7, #14]
 800dfe6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800dfea:	4613      	mov	r3, r2
 800dfec:	009b      	lsls	r3, r3, #2
 800dfee:	4413      	add	r3, r2
 800dff0:	009b      	lsls	r3, r3, #2
 800dff2:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800dff6:	687a      	ldr	r2, [r7, #4]
 800dff8:	4413      	add	r3, r2
 800dffa:	3304      	adds	r3, #4
 800dffc:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800dffe:	7bbb      	ldrb	r3, [r7, #14]
 800e000:	2b00      	cmp	r3, #0
 800e002:	d002      	beq.n	800e00a <USBD_StdEPReq+0x264>
 800e004:	7bbb      	ldrb	r3, [r7, #14]
 800e006:	2b80      	cmp	r3, #128	; 0x80
 800e008:	d103      	bne.n	800e012 <USBD_StdEPReq+0x26c>
              {
                pep->status = 0x0000U;
 800e00a:	68bb      	ldr	r3, [r7, #8]
 800e00c:	2200      	movs	r2, #0
 800e00e:	601a      	str	r2, [r3, #0]
 800e010:	e00e      	b.n	800e030 <USBD_StdEPReq+0x28a>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800e012:	7bbb      	ldrb	r3, [r7, #14]
 800e014:	4619      	mov	r1, r3
 800e016:	6878      	ldr	r0, [r7, #4]
 800e018:	f004 f8a2 	bl	8012160 <USBD_LL_IsStallEP>
 800e01c:	4603      	mov	r3, r0
 800e01e:	2b00      	cmp	r3, #0
 800e020:	d003      	beq.n	800e02a <USBD_StdEPReq+0x284>
              {
                pep->status = 0x0001U;
 800e022:	68bb      	ldr	r3, [r7, #8]
 800e024:	2201      	movs	r2, #1
 800e026:	601a      	str	r2, [r3, #0]
 800e028:	e002      	b.n	800e030 <USBD_StdEPReq+0x28a>
              }
              else
              {
                pep->status = 0x0000U;
 800e02a:	68bb      	ldr	r3, [r7, #8]
 800e02c:	2200      	movs	r2, #0
 800e02e:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800e030:	68bb      	ldr	r3, [r7, #8]
 800e032:	2202      	movs	r2, #2
 800e034:	4619      	mov	r1, r3
 800e036:	6878      	ldr	r0, [r7, #4]
 800e038:	f000 fbb7 	bl	800e7aa <USBD_CtlSendData>
              break;
 800e03c:	e004      	b.n	800e048 <USBD_StdEPReq+0x2a2>

            default:
              USBD_CtlError(pdev, req);
 800e03e:	6839      	ldr	r1, [r7, #0]
 800e040:	6878      	ldr	r0, [r7, #4]
 800e042:	f000 fb41 	bl	800e6c8 <USBD_CtlError>
              break;
 800e046:	bf00      	nop
          }
          break;
 800e048:	e004      	b.n	800e054 <USBD_StdEPReq+0x2ae>

        default:
          USBD_CtlError(pdev, req);
 800e04a:	6839      	ldr	r1, [r7, #0]
 800e04c:	6878      	ldr	r0, [r7, #4]
 800e04e:	f000 fb3b 	bl	800e6c8 <USBD_CtlError>
          break;
 800e052:	bf00      	nop
      }
      break;
 800e054:	e004      	b.n	800e060 <USBD_StdEPReq+0x2ba>

    default:
      USBD_CtlError(pdev, req);
 800e056:	6839      	ldr	r1, [r7, #0]
 800e058:	6878      	ldr	r0, [r7, #4]
 800e05a:	f000 fb35 	bl	800e6c8 <USBD_CtlError>
      break;
 800e05e:	bf00      	nop
  }

  return ret;
 800e060:	7bfb      	ldrb	r3, [r7, #15]
}
 800e062:	4618      	mov	r0, r3
 800e064:	3710      	adds	r7, #16
 800e066:	46bd      	mov	sp, r7
 800e068:	bd80      	pop	{r7, pc}
	...

0800e06c <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800e06c:	b580      	push	{r7, lr}
 800e06e:	b084      	sub	sp, #16
 800e070:	af00      	add	r7, sp, #0
 800e072:	6078      	str	r0, [r7, #4]
 800e074:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800e076:	2300      	movs	r3, #0
 800e078:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800e07a:	2300      	movs	r3, #0
 800e07c:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800e07e:	2300      	movs	r3, #0
 800e080:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800e082:	683b      	ldr	r3, [r7, #0]
 800e084:	885b      	ldrh	r3, [r3, #2]
 800e086:	0a1b      	lsrs	r3, r3, #8
 800e088:	b29b      	uxth	r3, r3
 800e08a:	3b01      	subs	r3, #1
 800e08c:	2b06      	cmp	r3, #6
 800e08e:	f200 8128 	bhi.w	800e2e2 <USBD_GetDescriptor+0x276>
 800e092:	a201      	add	r2, pc, #4	; (adr r2, 800e098 <USBD_GetDescriptor+0x2c>)
 800e094:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e098:	0800e0b5 	.word	0x0800e0b5
 800e09c:	0800e0cd 	.word	0x0800e0cd
 800e0a0:	0800e10d 	.word	0x0800e10d
 800e0a4:	0800e2e3 	.word	0x0800e2e3
 800e0a8:	0800e2e3 	.word	0x0800e2e3
 800e0ac:	0800e283 	.word	0x0800e283
 800e0b0:	0800e2af 	.word	0x0800e2af
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800e0b4:	687b      	ldr	r3, [r7, #4]
 800e0b6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800e0ba:	681b      	ldr	r3, [r3, #0]
 800e0bc:	687a      	ldr	r2, [r7, #4]
 800e0be:	7c12      	ldrb	r2, [r2, #16]
 800e0c0:	f107 0108 	add.w	r1, r7, #8
 800e0c4:	4610      	mov	r0, r2
 800e0c6:	4798      	blx	r3
 800e0c8:	60f8      	str	r0, [r7, #12]
      break;
 800e0ca:	e112      	b.n	800e2f2 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800e0cc:	687b      	ldr	r3, [r7, #4]
 800e0ce:	7c1b      	ldrb	r3, [r3, #16]
 800e0d0:	2b00      	cmp	r3, #0
 800e0d2:	d10d      	bne.n	800e0f0 <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 800e0d4:	687b      	ldr	r3, [r7, #4]
 800e0d6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e0da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e0dc:	f107 0208 	add.w	r2, r7, #8
 800e0e0:	4610      	mov	r0, r2
 800e0e2:	4798      	blx	r3
 800e0e4:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800e0e6:	68fb      	ldr	r3, [r7, #12]
 800e0e8:	3301      	adds	r3, #1
 800e0ea:	2202      	movs	r2, #2
 800e0ec:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800e0ee:	e100      	b.n	800e2f2 <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 800e0f0:	687b      	ldr	r3, [r7, #4]
 800e0f2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e0f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e0f8:	f107 0208 	add.w	r2, r7, #8
 800e0fc:	4610      	mov	r0, r2
 800e0fe:	4798      	blx	r3
 800e100:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800e102:	68fb      	ldr	r3, [r7, #12]
 800e104:	3301      	adds	r3, #1
 800e106:	2202      	movs	r2, #2
 800e108:	701a      	strb	r2, [r3, #0]
      break;
 800e10a:	e0f2      	b.n	800e2f2 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800e10c:	683b      	ldr	r3, [r7, #0]
 800e10e:	885b      	ldrh	r3, [r3, #2]
 800e110:	b2db      	uxtb	r3, r3
 800e112:	2b05      	cmp	r3, #5
 800e114:	f200 80ac 	bhi.w	800e270 <USBD_GetDescriptor+0x204>
 800e118:	a201      	add	r2, pc, #4	; (adr r2, 800e120 <USBD_GetDescriptor+0xb4>)
 800e11a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e11e:	bf00      	nop
 800e120:	0800e139 	.word	0x0800e139
 800e124:	0800e16d 	.word	0x0800e16d
 800e128:	0800e1a1 	.word	0x0800e1a1
 800e12c:	0800e1d5 	.word	0x0800e1d5
 800e130:	0800e209 	.word	0x0800e209
 800e134:	0800e23d 	.word	0x0800e23d
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800e138:	687b      	ldr	r3, [r7, #4]
 800e13a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800e13e:	685b      	ldr	r3, [r3, #4]
 800e140:	2b00      	cmp	r3, #0
 800e142:	d00b      	beq.n	800e15c <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800e144:	687b      	ldr	r3, [r7, #4]
 800e146:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800e14a:	685b      	ldr	r3, [r3, #4]
 800e14c:	687a      	ldr	r2, [r7, #4]
 800e14e:	7c12      	ldrb	r2, [r2, #16]
 800e150:	f107 0108 	add.w	r1, r7, #8
 800e154:	4610      	mov	r0, r2
 800e156:	4798      	blx	r3
 800e158:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800e15a:	e091      	b.n	800e280 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800e15c:	6839      	ldr	r1, [r7, #0]
 800e15e:	6878      	ldr	r0, [r7, #4]
 800e160:	f000 fab2 	bl	800e6c8 <USBD_CtlError>
            err++;
 800e164:	7afb      	ldrb	r3, [r7, #11]
 800e166:	3301      	adds	r3, #1
 800e168:	72fb      	strb	r3, [r7, #11]
          break;
 800e16a:	e089      	b.n	800e280 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800e16c:	687b      	ldr	r3, [r7, #4]
 800e16e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800e172:	689b      	ldr	r3, [r3, #8]
 800e174:	2b00      	cmp	r3, #0
 800e176:	d00b      	beq.n	800e190 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800e178:	687b      	ldr	r3, [r7, #4]
 800e17a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800e17e:	689b      	ldr	r3, [r3, #8]
 800e180:	687a      	ldr	r2, [r7, #4]
 800e182:	7c12      	ldrb	r2, [r2, #16]
 800e184:	f107 0108 	add.w	r1, r7, #8
 800e188:	4610      	mov	r0, r2
 800e18a:	4798      	blx	r3
 800e18c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800e18e:	e077      	b.n	800e280 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800e190:	6839      	ldr	r1, [r7, #0]
 800e192:	6878      	ldr	r0, [r7, #4]
 800e194:	f000 fa98 	bl	800e6c8 <USBD_CtlError>
            err++;
 800e198:	7afb      	ldrb	r3, [r7, #11]
 800e19a:	3301      	adds	r3, #1
 800e19c:	72fb      	strb	r3, [r7, #11]
          break;
 800e19e:	e06f      	b.n	800e280 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800e1a0:	687b      	ldr	r3, [r7, #4]
 800e1a2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800e1a6:	68db      	ldr	r3, [r3, #12]
 800e1a8:	2b00      	cmp	r3, #0
 800e1aa:	d00b      	beq.n	800e1c4 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800e1ac:	687b      	ldr	r3, [r7, #4]
 800e1ae:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800e1b2:	68db      	ldr	r3, [r3, #12]
 800e1b4:	687a      	ldr	r2, [r7, #4]
 800e1b6:	7c12      	ldrb	r2, [r2, #16]
 800e1b8:	f107 0108 	add.w	r1, r7, #8
 800e1bc:	4610      	mov	r0, r2
 800e1be:	4798      	blx	r3
 800e1c0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800e1c2:	e05d      	b.n	800e280 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800e1c4:	6839      	ldr	r1, [r7, #0]
 800e1c6:	6878      	ldr	r0, [r7, #4]
 800e1c8:	f000 fa7e 	bl	800e6c8 <USBD_CtlError>
            err++;
 800e1cc:	7afb      	ldrb	r3, [r7, #11]
 800e1ce:	3301      	adds	r3, #1
 800e1d0:	72fb      	strb	r3, [r7, #11]
          break;
 800e1d2:	e055      	b.n	800e280 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800e1d4:	687b      	ldr	r3, [r7, #4]
 800e1d6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800e1da:	691b      	ldr	r3, [r3, #16]
 800e1dc:	2b00      	cmp	r3, #0
 800e1de:	d00b      	beq.n	800e1f8 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800e1e0:	687b      	ldr	r3, [r7, #4]
 800e1e2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800e1e6:	691b      	ldr	r3, [r3, #16]
 800e1e8:	687a      	ldr	r2, [r7, #4]
 800e1ea:	7c12      	ldrb	r2, [r2, #16]
 800e1ec:	f107 0108 	add.w	r1, r7, #8
 800e1f0:	4610      	mov	r0, r2
 800e1f2:	4798      	blx	r3
 800e1f4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800e1f6:	e043      	b.n	800e280 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800e1f8:	6839      	ldr	r1, [r7, #0]
 800e1fa:	6878      	ldr	r0, [r7, #4]
 800e1fc:	f000 fa64 	bl	800e6c8 <USBD_CtlError>
            err++;
 800e200:	7afb      	ldrb	r3, [r7, #11]
 800e202:	3301      	adds	r3, #1
 800e204:	72fb      	strb	r3, [r7, #11]
          break;
 800e206:	e03b      	b.n	800e280 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800e208:	687b      	ldr	r3, [r7, #4]
 800e20a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800e20e:	695b      	ldr	r3, [r3, #20]
 800e210:	2b00      	cmp	r3, #0
 800e212:	d00b      	beq.n	800e22c <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800e214:	687b      	ldr	r3, [r7, #4]
 800e216:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800e21a:	695b      	ldr	r3, [r3, #20]
 800e21c:	687a      	ldr	r2, [r7, #4]
 800e21e:	7c12      	ldrb	r2, [r2, #16]
 800e220:	f107 0108 	add.w	r1, r7, #8
 800e224:	4610      	mov	r0, r2
 800e226:	4798      	blx	r3
 800e228:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800e22a:	e029      	b.n	800e280 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800e22c:	6839      	ldr	r1, [r7, #0]
 800e22e:	6878      	ldr	r0, [r7, #4]
 800e230:	f000 fa4a 	bl	800e6c8 <USBD_CtlError>
            err++;
 800e234:	7afb      	ldrb	r3, [r7, #11]
 800e236:	3301      	adds	r3, #1
 800e238:	72fb      	strb	r3, [r7, #11]
          break;
 800e23a:	e021      	b.n	800e280 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800e23c:	687b      	ldr	r3, [r7, #4]
 800e23e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800e242:	699b      	ldr	r3, [r3, #24]
 800e244:	2b00      	cmp	r3, #0
 800e246:	d00b      	beq.n	800e260 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800e248:	687b      	ldr	r3, [r7, #4]
 800e24a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800e24e:	699b      	ldr	r3, [r3, #24]
 800e250:	687a      	ldr	r2, [r7, #4]
 800e252:	7c12      	ldrb	r2, [r2, #16]
 800e254:	f107 0108 	add.w	r1, r7, #8
 800e258:	4610      	mov	r0, r2
 800e25a:	4798      	blx	r3
 800e25c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800e25e:	e00f      	b.n	800e280 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800e260:	6839      	ldr	r1, [r7, #0]
 800e262:	6878      	ldr	r0, [r7, #4]
 800e264:	f000 fa30 	bl	800e6c8 <USBD_CtlError>
            err++;
 800e268:	7afb      	ldrb	r3, [r7, #11]
 800e26a:	3301      	adds	r3, #1
 800e26c:	72fb      	strb	r3, [r7, #11]
          break;
 800e26e:	e007      	b.n	800e280 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800e270:	6839      	ldr	r1, [r7, #0]
 800e272:	6878      	ldr	r0, [r7, #4]
 800e274:	f000 fa28 	bl	800e6c8 <USBD_CtlError>
          err++;
 800e278:	7afb      	ldrb	r3, [r7, #11]
 800e27a:	3301      	adds	r3, #1
 800e27c:	72fb      	strb	r3, [r7, #11]
#endif
          break;
 800e27e:	bf00      	nop
      }
      break;
 800e280:	e037      	b.n	800e2f2 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800e282:	687b      	ldr	r3, [r7, #4]
 800e284:	7c1b      	ldrb	r3, [r3, #16]
 800e286:	2b00      	cmp	r3, #0
 800e288:	d109      	bne.n	800e29e <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800e28a:	687b      	ldr	r3, [r7, #4]
 800e28c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e290:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e292:	f107 0208 	add.w	r2, r7, #8
 800e296:	4610      	mov	r0, r2
 800e298:	4798      	blx	r3
 800e29a:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800e29c:	e029      	b.n	800e2f2 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800e29e:	6839      	ldr	r1, [r7, #0]
 800e2a0:	6878      	ldr	r0, [r7, #4]
 800e2a2:	f000 fa11 	bl	800e6c8 <USBD_CtlError>
        err++;
 800e2a6:	7afb      	ldrb	r3, [r7, #11]
 800e2a8:	3301      	adds	r3, #1
 800e2aa:	72fb      	strb	r3, [r7, #11]
      break;
 800e2ac:	e021      	b.n	800e2f2 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800e2ae:	687b      	ldr	r3, [r7, #4]
 800e2b0:	7c1b      	ldrb	r3, [r3, #16]
 800e2b2:	2b00      	cmp	r3, #0
 800e2b4:	d10d      	bne.n	800e2d2 <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800e2b6:	687b      	ldr	r3, [r7, #4]
 800e2b8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e2bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e2be:	f107 0208 	add.w	r2, r7, #8
 800e2c2:	4610      	mov	r0, r2
 800e2c4:	4798      	blx	r3
 800e2c6:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800e2c8:	68fb      	ldr	r3, [r7, #12]
 800e2ca:	3301      	adds	r3, #1
 800e2cc:	2207      	movs	r2, #7
 800e2ce:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800e2d0:	e00f      	b.n	800e2f2 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800e2d2:	6839      	ldr	r1, [r7, #0]
 800e2d4:	6878      	ldr	r0, [r7, #4]
 800e2d6:	f000 f9f7 	bl	800e6c8 <USBD_CtlError>
        err++;
 800e2da:	7afb      	ldrb	r3, [r7, #11]
 800e2dc:	3301      	adds	r3, #1
 800e2de:	72fb      	strb	r3, [r7, #11]
      break;
 800e2e0:	e007      	b.n	800e2f2 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800e2e2:	6839      	ldr	r1, [r7, #0]
 800e2e4:	6878      	ldr	r0, [r7, #4]
 800e2e6:	f000 f9ef 	bl	800e6c8 <USBD_CtlError>
      err++;
 800e2ea:	7afb      	ldrb	r3, [r7, #11]
 800e2ec:	3301      	adds	r3, #1
 800e2ee:	72fb      	strb	r3, [r7, #11]
      break;
 800e2f0:	bf00      	nop
  }

  if (err != 0U)
 800e2f2:	7afb      	ldrb	r3, [r7, #11]
 800e2f4:	2b00      	cmp	r3, #0
 800e2f6:	d11e      	bne.n	800e336 <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 800e2f8:	683b      	ldr	r3, [r7, #0]
 800e2fa:	88db      	ldrh	r3, [r3, #6]
 800e2fc:	2b00      	cmp	r3, #0
 800e2fe:	d016      	beq.n	800e32e <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 800e300:	893b      	ldrh	r3, [r7, #8]
 800e302:	2b00      	cmp	r3, #0
 800e304:	d00e      	beq.n	800e324 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 800e306:	683b      	ldr	r3, [r7, #0]
 800e308:	88da      	ldrh	r2, [r3, #6]
 800e30a:	893b      	ldrh	r3, [r7, #8]
 800e30c:	4293      	cmp	r3, r2
 800e30e:	bf28      	it	cs
 800e310:	4613      	movcs	r3, r2
 800e312:	b29b      	uxth	r3, r3
 800e314:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800e316:	893b      	ldrh	r3, [r7, #8]
 800e318:	461a      	mov	r2, r3
 800e31a:	68f9      	ldr	r1, [r7, #12]
 800e31c:	6878      	ldr	r0, [r7, #4]
 800e31e:	f000 fa44 	bl	800e7aa <USBD_CtlSendData>
 800e322:	e009      	b.n	800e338 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800e324:	6839      	ldr	r1, [r7, #0]
 800e326:	6878      	ldr	r0, [r7, #4]
 800e328:	f000 f9ce 	bl	800e6c8 <USBD_CtlError>
 800e32c:	e004      	b.n	800e338 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800e32e:	6878      	ldr	r0, [r7, #4]
 800e330:	f000 fa95 	bl	800e85e <USBD_CtlSendStatus>
 800e334:	e000      	b.n	800e338 <USBD_GetDescriptor+0x2cc>
    return;
 800e336:	bf00      	nop
  }
}
 800e338:	3710      	adds	r7, #16
 800e33a:	46bd      	mov	sp, r7
 800e33c:	bd80      	pop	{r7, pc}
 800e33e:	bf00      	nop

0800e340 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800e340:	b580      	push	{r7, lr}
 800e342:	b084      	sub	sp, #16
 800e344:	af00      	add	r7, sp, #0
 800e346:	6078      	str	r0, [r7, #4]
 800e348:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800e34a:	683b      	ldr	r3, [r7, #0]
 800e34c:	889b      	ldrh	r3, [r3, #4]
 800e34e:	2b00      	cmp	r3, #0
 800e350:	d131      	bne.n	800e3b6 <USBD_SetAddress+0x76>
 800e352:	683b      	ldr	r3, [r7, #0]
 800e354:	88db      	ldrh	r3, [r3, #6]
 800e356:	2b00      	cmp	r3, #0
 800e358:	d12d      	bne.n	800e3b6 <USBD_SetAddress+0x76>
 800e35a:	683b      	ldr	r3, [r7, #0]
 800e35c:	885b      	ldrh	r3, [r3, #2]
 800e35e:	2b7f      	cmp	r3, #127	; 0x7f
 800e360:	d829      	bhi.n	800e3b6 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800e362:	683b      	ldr	r3, [r7, #0]
 800e364:	885b      	ldrh	r3, [r3, #2]
 800e366:	b2db      	uxtb	r3, r3
 800e368:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800e36c:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800e36e:	687b      	ldr	r3, [r7, #4]
 800e370:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800e374:	b2db      	uxtb	r3, r3
 800e376:	2b03      	cmp	r3, #3
 800e378:	d104      	bne.n	800e384 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800e37a:	6839      	ldr	r1, [r7, #0]
 800e37c:	6878      	ldr	r0, [r7, #4]
 800e37e:	f000 f9a3 	bl	800e6c8 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800e382:	e01d      	b.n	800e3c0 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800e384:	687b      	ldr	r3, [r7, #4]
 800e386:	7bfa      	ldrb	r2, [r7, #15]
 800e388:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800e38c:	7bfb      	ldrb	r3, [r7, #15]
 800e38e:	4619      	mov	r1, r3
 800e390:	6878      	ldr	r0, [r7, #4]
 800e392:	f003 ff11 	bl	80121b8 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800e396:	6878      	ldr	r0, [r7, #4]
 800e398:	f000 fa61 	bl	800e85e <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800e39c:	7bfb      	ldrb	r3, [r7, #15]
 800e39e:	2b00      	cmp	r3, #0
 800e3a0:	d004      	beq.n	800e3ac <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800e3a2:	687b      	ldr	r3, [r7, #4]
 800e3a4:	2202      	movs	r2, #2
 800e3a6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800e3aa:	e009      	b.n	800e3c0 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800e3ac:	687b      	ldr	r3, [r7, #4]
 800e3ae:	2201      	movs	r2, #1
 800e3b0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800e3b4:	e004      	b.n	800e3c0 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800e3b6:	6839      	ldr	r1, [r7, #0]
 800e3b8:	6878      	ldr	r0, [r7, #4]
 800e3ba:	f000 f985 	bl	800e6c8 <USBD_CtlError>
  }
}
 800e3be:	bf00      	nop
 800e3c0:	bf00      	nop
 800e3c2:	3710      	adds	r7, #16
 800e3c4:	46bd      	mov	sp, r7
 800e3c6:	bd80      	pop	{r7, pc}

0800e3c8 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800e3c8:	b580      	push	{r7, lr}
 800e3ca:	b084      	sub	sp, #16
 800e3cc:	af00      	add	r7, sp, #0
 800e3ce:	6078      	str	r0, [r7, #4]
 800e3d0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800e3d2:	2300      	movs	r3, #0
 800e3d4:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800e3d6:	683b      	ldr	r3, [r7, #0]
 800e3d8:	885b      	ldrh	r3, [r3, #2]
 800e3da:	b2da      	uxtb	r2, r3
 800e3dc:	4b4c      	ldr	r3, [pc, #304]	; (800e510 <USBD_SetConfig+0x148>)
 800e3de:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800e3e0:	4b4b      	ldr	r3, [pc, #300]	; (800e510 <USBD_SetConfig+0x148>)
 800e3e2:	781b      	ldrb	r3, [r3, #0]
 800e3e4:	2b01      	cmp	r3, #1
 800e3e6:	d905      	bls.n	800e3f4 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800e3e8:	6839      	ldr	r1, [r7, #0]
 800e3ea:	6878      	ldr	r0, [r7, #4]
 800e3ec:	f000 f96c 	bl	800e6c8 <USBD_CtlError>
    return USBD_FAIL;
 800e3f0:	2303      	movs	r3, #3
 800e3f2:	e088      	b.n	800e506 <USBD_SetConfig+0x13e>
  }

  switch (pdev->dev_state)
 800e3f4:	687b      	ldr	r3, [r7, #4]
 800e3f6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800e3fa:	b2db      	uxtb	r3, r3
 800e3fc:	2b02      	cmp	r3, #2
 800e3fe:	d002      	beq.n	800e406 <USBD_SetConfig+0x3e>
 800e400:	2b03      	cmp	r3, #3
 800e402:	d025      	beq.n	800e450 <USBD_SetConfig+0x88>
 800e404:	e071      	b.n	800e4ea <USBD_SetConfig+0x122>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800e406:	4b42      	ldr	r3, [pc, #264]	; (800e510 <USBD_SetConfig+0x148>)
 800e408:	781b      	ldrb	r3, [r3, #0]
 800e40a:	2b00      	cmp	r3, #0
 800e40c:	d01c      	beq.n	800e448 <USBD_SetConfig+0x80>
      {
        pdev->dev_config = cfgidx;
 800e40e:	4b40      	ldr	r3, [pc, #256]	; (800e510 <USBD_SetConfig+0x148>)
 800e410:	781b      	ldrb	r3, [r3, #0]
 800e412:	461a      	mov	r2, r3
 800e414:	687b      	ldr	r3, [r7, #4]
 800e416:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800e418:	4b3d      	ldr	r3, [pc, #244]	; (800e510 <USBD_SetConfig+0x148>)
 800e41a:	781b      	ldrb	r3, [r3, #0]
 800e41c:	4619      	mov	r1, r3
 800e41e:	6878      	ldr	r0, [r7, #4]
 800e420:	f7ff f948 	bl	800d6b4 <USBD_SetClassConfig>
 800e424:	4603      	mov	r3, r0
 800e426:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800e428:	7bfb      	ldrb	r3, [r7, #15]
 800e42a:	2b00      	cmp	r3, #0
 800e42c:	d004      	beq.n	800e438 <USBD_SetConfig+0x70>
        {
          USBD_CtlError(pdev, req);
 800e42e:	6839      	ldr	r1, [r7, #0]
 800e430:	6878      	ldr	r0, [r7, #4]
 800e432:	f000 f949 	bl	800e6c8 <USBD_CtlError>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800e436:	e065      	b.n	800e504 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 800e438:	6878      	ldr	r0, [r7, #4]
 800e43a:	f000 fa10 	bl	800e85e <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800e43e:	687b      	ldr	r3, [r7, #4]
 800e440:	2203      	movs	r2, #3
 800e442:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800e446:	e05d      	b.n	800e504 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 800e448:	6878      	ldr	r0, [r7, #4]
 800e44a:	f000 fa08 	bl	800e85e <USBD_CtlSendStatus>
      break;
 800e44e:	e059      	b.n	800e504 <USBD_SetConfig+0x13c>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800e450:	4b2f      	ldr	r3, [pc, #188]	; (800e510 <USBD_SetConfig+0x148>)
 800e452:	781b      	ldrb	r3, [r3, #0]
 800e454:	2b00      	cmp	r3, #0
 800e456:	d112      	bne.n	800e47e <USBD_SetConfig+0xb6>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800e458:	687b      	ldr	r3, [r7, #4]
 800e45a:	2202      	movs	r2, #2
 800e45c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 800e460:	4b2b      	ldr	r3, [pc, #172]	; (800e510 <USBD_SetConfig+0x148>)
 800e462:	781b      	ldrb	r3, [r3, #0]
 800e464:	461a      	mov	r2, r3
 800e466:	687b      	ldr	r3, [r7, #4]
 800e468:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800e46a:	4b29      	ldr	r3, [pc, #164]	; (800e510 <USBD_SetConfig+0x148>)
 800e46c:	781b      	ldrb	r3, [r3, #0]
 800e46e:	4619      	mov	r1, r3
 800e470:	6878      	ldr	r0, [r7, #4]
 800e472:	f7ff f93b 	bl	800d6ec <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800e476:	6878      	ldr	r0, [r7, #4]
 800e478:	f000 f9f1 	bl	800e85e <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800e47c:	e042      	b.n	800e504 <USBD_SetConfig+0x13c>
      else if (cfgidx != pdev->dev_config)
 800e47e:	4b24      	ldr	r3, [pc, #144]	; (800e510 <USBD_SetConfig+0x148>)
 800e480:	781b      	ldrb	r3, [r3, #0]
 800e482:	461a      	mov	r2, r3
 800e484:	687b      	ldr	r3, [r7, #4]
 800e486:	685b      	ldr	r3, [r3, #4]
 800e488:	429a      	cmp	r2, r3
 800e48a:	d02a      	beq.n	800e4e2 <USBD_SetConfig+0x11a>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800e48c:	687b      	ldr	r3, [r7, #4]
 800e48e:	685b      	ldr	r3, [r3, #4]
 800e490:	b2db      	uxtb	r3, r3
 800e492:	4619      	mov	r1, r3
 800e494:	6878      	ldr	r0, [r7, #4]
 800e496:	f7ff f929 	bl	800d6ec <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800e49a:	4b1d      	ldr	r3, [pc, #116]	; (800e510 <USBD_SetConfig+0x148>)
 800e49c:	781b      	ldrb	r3, [r3, #0]
 800e49e:	461a      	mov	r2, r3
 800e4a0:	687b      	ldr	r3, [r7, #4]
 800e4a2:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800e4a4:	4b1a      	ldr	r3, [pc, #104]	; (800e510 <USBD_SetConfig+0x148>)
 800e4a6:	781b      	ldrb	r3, [r3, #0]
 800e4a8:	4619      	mov	r1, r3
 800e4aa:	6878      	ldr	r0, [r7, #4]
 800e4ac:	f7ff f902 	bl	800d6b4 <USBD_SetClassConfig>
 800e4b0:	4603      	mov	r3, r0
 800e4b2:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800e4b4:	7bfb      	ldrb	r3, [r7, #15]
 800e4b6:	2b00      	cmp	r3, #0
 800e4b8:	d00f      	beq.n	800e4da <USBD_SetConfig+0x112>
          USBD_CtlError(pdev, req);
 800e4ba:	6839      	ldr	r1, [r7, #0]
 800e4bc:	6878      	ldr	r0, [r7, #4]
 800e4be:	f000 f903 	bl	800e6c8 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800e4c2:	687b      	ldr	r3, [r7, #4]
 800e4c4:	685b      	ldr	r3, [r3, #4]
 800e4c6:	b2db      	uxtb	r3, r3
 800e4c8:	4619      	mov	r1, r3
 800e4ca:	6878      	ldr	r0, [r7, #4]
 800e4cc:	f7ff f90e 	bl	800d6ec <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800e4d0:	687b      	ldr	r3, [r7, #4]
 800e4d2:	2202      	movs	r2, #2
 800e4d4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800e4d8:	e014      	b.n	800e504 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 800e4da:	6878      	ldr	r0, [r7, #4]
 800e4dc:	f000 f9bf 	bl	800e85e <USBD_CtlSendStatus>
      break;
 800e4e0:	e010      	b.n	800e504 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 800e4e2:	6878      	ldr	r0, [r7, #4]
 800e4e4:	f000 f9bb 	bl	800e85e <USBD_CtlSendStatus>
      break;
 800e4e8:	e00c      	b.n	800e504 <USBD_SetConfig+0x13c>

    default:
      USBD_CtlError(pdev, req);
 800e4ea:	6839      	ldr	r1, [r7, #0]
 800e4ec:	6878      	ldr	r0, [r7, #4]
 800e4ee:	f000 f8eb 	bl	800e6c8 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800e4f2:	4b07      	ldr	r3, [pc, #28]	; (800e510 <USBD_SetConfig+0x148>)
 800e4f4:	781b      	ldrb	r3, [r3, #0]
 800e4f6:	4619      	mov	r1, r3
 800e4f8:	6878      	ldr	r0, [r7, #4]
 800e4fa:	f7ff f8f7 	bl	800d6ec <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800e4fe:	2303      	movs	r3, #3
 800e500:	73fb      	strb	r3, [r7, #15]
      break;
 800e502:	bf00      	nop
  }

  return ret;
 800e504:	7bfb      	ldrb	r3, [r7, #15]
}
 800e506:	4618      	mov	r0, r3
 800e508:	3710      	adds	r7, #16
 800e50a:	46bd      	mov	sp, r7
 800e50c:	bd80      	pop	{r7, pc}
 800e50e:	bf00      	nop
 800e510:	200001ac 	.word	0x200001ac

0800e514 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800e514:	b580      	push	{r7, lr}
 800e516:	b082      	sub	sp, #8
 800e518:	af00      	add	r7, sp, #0
 800e51a:	6078      	str	r0, [r7, #4]
 800e51c:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800e51e:	683b      	ldr	r3, [r7, #0]
 800e520:	88db      	ldrh	r3, [r3, #6]
 800e522:	2b01      	cmp	r3, #1
 800e524:	d004      	beq.n	800e530 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800e526:	6839      	ldr	r1, [r7, #0]
 800e528:	6878      	ldr	r0, [r7, #4]
 800e52a:	f000 f8cd 	bl	800e6c8 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800e52e:	e023      	b.n	800e578 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800e530:	687b      	ldr	r3, [r7, #4]
 800e532:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800e536:	b2db      	uxtb	r3, r3
 800e538:	2b02      	cmp	r3, #2
 800e53a:	dc02      	bgt.n	800e542 <USBD_GetConfig+0x2e>
 800e53c:	2b00      	cmp	r3, #0
 800e53e:	dc03      	bgt.n	800e548 <USBD_GetConfig+0x34>
 800e540:	e015      	b.n	800e56e <USBD_GetConfig+0x5a>
 800e542:	2b03      	cmp	r3, #3
 800e544:	d00b      	beq.n	800e55e <USBD_GetConfig+0x4a>
 800e546:	e012      	b.n	800e56e <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800e548:	687b      	ldr	r3, [r7, #4]
 800e54a:	2200      	movs	r2, #0
 800e54c:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800e54e:	687b      	ldr	r3, [r7, #4]
 800e550:	3308      	adds	r3, #8
 800e552:	2201      	movs	r2, #1
 800e554:	4619      	mov	r1, r3
 800e556:	6878      	ldr	r0, [r7, #4]
 800e558:	f000 f927 	bl	800e7aa <USBD_CtlSendData>
        break;
 800e55c:	e00c      	b.n	800e578 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800e55e:	687b      	ldr	r3, [r7, #4]
 800e560:	3304      	adds	r3, #4
 800e562:	2201      	movs	r2, #1
 800e564:	4619      	mov	r1, r3
 800e566:	6878      	ldr	r0, [r7, #4]
 800e568:	f000 f91f 	bl	800e7aa <USBD_CtlSendData>
        break;
 800e56c:	e004      	b.n	800e578 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800e56e:	6839      	ldr	r1, [r7, #0]
 800e570:	6878      	ldr	r0, [r7, #4]
 800e572:	f000 f8a9 	bl	800e6c8 <USBD_CtlError>
        break;
 800e576:	bf00      	nop
}
 800e578:	bf00      	nop
 800e57a:	3708      	adds	r7, #8
 800e57c:	46bd      	mov	sp, r7
 800e57e:	bd80      	pop	{r7, pc}

0800e580 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800e580:	b580      	push	{r7, lr}
 800e582:	b082      	sub	sp, #8
 800e584:	af00      	add	r7, sp, #0
 800e586:	6078      	str	r0, [r7, #4]
 800e588:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800e58a:	687b      	ldr	r3, [r7, #4]
 800e58c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800e590:	b2db      	uxtb	r3, r3
 800e592:	3b01      	subs	r3, #1
 800e594:	2b02      	cmp	r3, #2
 800e596:	d81e      	bhi.n	800e5d6 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800e598:	683b      	ldr	r3, [r7, #0]
 800e59a:	88db      	ldrh	r3, [r3, #6]
 800e59c:	2b02      	cmp	r3, #2
 800e59e:	d004      	beq.n	800e5aa <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800e5a0:	6839      	ldr	r1, [r7, #0]
 800e5a2:	6878      	ldr	r0, [r7, #4]
 800e5a4:	f000 f890 	bl	800e6c8 <USBD_CtlError>
        break;
 800e5a8:	e01a      	b.n	800e5e0 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800e5aa:	687b      	ldr	r3, [r7, #4]
 800e5ac:	2201      	movs	r2, #1
 800e5ae:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup != 0U)
 800e5b0:	687b      	ldr	r3, [r7, #4]
 800e5b2:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800e5b6:	2b00      	cmp	r3, #0
 800e5b8:	d005      	beq.n	800e5c6 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800e5ba:	687b      	ldr	r3, [r7, #4]
 800e5bc:	68db      	ldr	r3, [r3, #12]
 800e5be:	f043 0202 	orr.w	r2, r3, #2
 800e5c2:	687b      	ldr	r3, [r7, #4]
 800e5c4:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800e5c6:	687b      	ldr	r3, [r7, #4]
 800e5c8:	330c      	adds	r3, #12
 800e5ca:	2202      	movs	r2, #2
 800e5cc:	4619      	mov	r1, r3
 800e5ce:	6878      	ldr	r0, [r7, #4]
 800e5d0:	f000 f8eb 	bl	800e7aa <USBD_CtlSendData>
      break;
 800e5d4:	e004      	b.n	800e5e0 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800e5d6:	6839      	ldr	r1, [r7, #0]
 800e5d8:	6878      	ldr	r0, [r7, #4]
 800e5da:	f000 f875 	bl	800e6c8 <USBD_CtlError>
      break;
 800e5de:	bf00      	nop
  }
}
 800e5e0:	bf00      	nop
 800e5e2:	3708      	adds	r7, #8
 800e5e4:	46bd      	mov	sp, r7
 800e5e6:	bd80      	pop	{r7, pc}

0800e5e8 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800e5e8:	b580      	push	{r7, lr}
 800e5ea:	b082      	sub	sp, #8
 800e5ec:	af00      	add	r7, sp, #0
 800e5ee:	6078      	str	r0, [r7, #4]
 800e5f0:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800e5f2:	683b      	ldr	r3, [r7, #0]
 800e5f4:	885b      	ldrh	r3, [r3, #2]
 800e5f6:	2b01      	cmp	r3, #1
 800e5f8:	d106      	bne.n	800e608 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 800e5fa:	687b      	ldr	r3, [r7, #4]
 800e5fc:	2201      	movs	r2, #1
 800e5fe:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800e602:	6878      	ldr	r0, [r7, #4]
 800e604:	f000 f92b 	bl	800e85e <USBD_CtlSendStatus>
  }
}
 800e608:	bf00      	nop
 800e60a:	3708      	adds	r7, #8
 800e60c:	46bd      	mov	sp, r7
 800e60e:	bd80      	pop	{r7, pc}

0800e610 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800e610:	b580      	push	{r7, lr}
 800e612:	b082      	sub	sp, #8
 800e614:	af00      	add	r7, sp, #0
 800e616:	6078      	str	r0, [r7, #4]
 800e618:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800e61a:	687b      	ldr	r3, [r7, #4]
 800e61c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800e620:	b2db      	uxtb	r3, r3
 800e622:	3b01      	subs	r3, #1
 800e624:	2b02      	cmp	r3, #2
 800e626:	d80b      	bhi.n	800e640 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800e628:	683b      	ldr	r3, [r7, #0]
 800e62a:	885b      	ldrh	r3, [r3, #2]
 800e62c:	2b01      	cmp	r3, #1
 800e62e:	d10c      	bne.n	800e64a <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800e630:	687b      	ldr	r3, [r7, #4]
 800e632:	2200      	movs	r2, #0
 800e634:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800e638:	6878      	ldr	r0, [r7, #4]
 800e63a:	f000 f910 	bl	800e85e <USBD_CtlSendStatus>
      }
      break;
 800e63e:	e004      	b.n	800e64a <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800e640:	6839      	ldr	r1, [r7, #0]
 800e642:	6878      	ldr	r0, [r7, #4]
 800e644:	f000 f840 	bl	800e6c8 <USBD_CtlError>
      break;
 800e648:	e000      	b.n	800e64c <USBD_ClrFeature+0x3c>
      break;
 800e64a:	bf00      	nop
  }
}
 800e64c:	bf00      	nop
 800e64e:	3708      	adds	r7, #8
 800e650:	46bd      	mov	sp, r7
 800e652:	bd80      	pop	{r7, pc}

0800e654 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800e654:	b580      	push	{r7, lr}
 800e656:	b084      	sub	sp, #16
 800e658:	af00      	add	r7, sp, #0
 800e65a:	6078      	str	r0, [r7, #4]
 800e65c:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800e65e:	683b      	ldr	r3, [r7, #0]
 800e660:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800e662:	68fb      	ldr	r3, [r7, #12]
 800e664:	781a      	ldrb	r2, [r3, #0]
 800e666:	687b      	ldr	r3, [r7, #4]
 800e668:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800e66a:	68fb      	ldr	r3, [r7, #12]
 800e66c:	3301      	adds	r3, #1
 800e66e:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800e670:	68fb      	ldr	r3, [r7, #12]
 800e672:	781a      	ldrb	r2, [r3, #0]
 800e674:	687b      	ldr	r3, [r7, #4]
 800e676:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800e678:	68fb      	ldr	r3, [r7, #12]
 800e67a:	3301      	adds	r3, #1
 800e67c:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800e67e:	68f8      	ldr	r0, [r7, #12]
 800e680:	f7ff fabb 	bl	800dbfa <SWAPBYTE>
 800e684:	4603      	mov	r3, r0
 800e686:	461a      	mov	r2, r3
 800e688:	687b      	ldr	r3, [r7, #4]
 800e68a:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800e68c:	68fb      	ldr	r3, [r7, #12]
 800e68e:	3301      	adds	r3, #1
 800e690:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800e692:	68fb      	ldr	r3, [r7, #12]
 800e694:	3301      	adds	r3, #1
 800e696:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800e698:	68f8      	ldr	r0, [r7, #12]
 800e69a:	f7ff faae 	bl	800dbfa <SWAPBYTE>
 800e69e:	4603      	mov	r3, r0
 800e6a0:	461a      	mov	r2, r3
 800e6a2:	687b      	ldr	r3, [r7, #4]
 800e6a4:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800e6a6:	68fb      	ldr	r3, [r7, #12]
 800e6a8:	3301      	adds	r3, #1
 800e6aa:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800e6ac:	68fb      	ldr	r3, [r7, #12]
 800e6ae:	3301      	adds	r3, #1
 800e6b0:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800e6b2:	68f8      	ldr	r0, [r7, #12]
 800e6b4:	f7ff faa1 	bl	800dbfa <SWAPBYTE>
 800e6b8:	4603      	mov	r3, r0
 800e6ba:	461a      	mov	r2, r3
 800e6bc:	687b      	ldr	r3, [r7, #4]
 800e6be:	80da      	strh	r2, [r3, #6]
}
 800e6c0:	bf00      	nop
 800e6c2:	3710      	adds	r7, #16
 800e6c4:	46bd      	mov	sp, r7
 800e6c6:	bd80      	pop	{r7, pc}

0800e6c8 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800e6c8:	b580      	push	{r7, lr}
 800e6ca:	b082      	sub	sp, #8
 800e6cc:	af00      	add	r7, sp, #0
 800e6ce:	6078      	str	r0, [r7, #4]
 800e6d0:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800e6d2:	2180      	movs	r1, #128	; 0x80
 800e6d4:	6878      	ldr	r0, [r7, #4]
 800e6d6:	f003 fd05 	bl	80120e4 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800e6da:	2100      	movs	r1, #0
 800e6dc:	6878      	ldr	r0, [r7, #4]
 800e6de:	f003 fd01 	bl	80120e4 <USBD_LL_StallEP>
}
 800e6e2:	bf00      	nop
 800e6e4:	3708      	adds	r7, #8
 800e6e6:	46bd      	mov	sp, r7
 800e6e8:	bd80      	pop	{r7, pc}

0800e6ea <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800e6ea:	b580      	push	{r7, lr}
 800e6ec:	b086      	sub	sp, #24
 800e6ee:	af00      	add	r7, sp, #0
 800e6f0:	60f8      	str	r0, [r7, #12]
 800e6f2:	60b9      	str	r1, [r7, #8]
 800e6f4:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800e6f6:	2300      	movs	r3, #0
 800e6f8:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800e6fa:	68fb      	ldr	r3, [r7, #12]
 800e6fc:	2b00      	cmp	r3, #0
 800e6fe:	d036      	beq.n	800e76e <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800e700:	68fb      	ldr	r3, [r7, #12]
 800e702:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800e704:	6938      	ldr	r0, [r7, #16]
 800e706:	f000 f836 	bl	800e776 <USBD_GetLen>
 800e70a:	4603      	mov	r3, r0
 800e70c:	3301      	adds	r3, #1
 800e70e:	b29b      	uxth	r3, r3
 800e710:	005b      	lsls	r3, r3, #1
 800e712:	b29a      	uxth	r2, r3
 800e714:	687b      	ldr	r3, [r7, #4]
 800e716:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800e718:	7dfb      	ldrb	r3, [r7, #23]
 800e71a:	68ba      	ldr	r2, [r7, #8]
 800e71c:	4413      	add	r3, r2
 800e71e:	687a      	ldr	r2, [r7, #4]
 800e720:	7812      	ldrb	r2, [r2, #0]
 800e722:	701a      	strb	r2, [r3, #0]
  idx++;
 800e724:	7dfb      	ldrb	r3, [r7, #23]
 800e726:	3301      	adds	r3, #1
 800e728:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800e72a:	7dfb      	ldrb	r3, [r7, #23]
 800e72c:	68ba      	ldr	r2, [r7, #8]
 800e72e:	4413      	add	r3, r2
 800e730:	2203      	movs	r2, #3
 800e732:	701a      	strb	r2, [r3, #0]
  idx++;
 800e734:	7dfb      	ldrb	r3, [r7, #23]
 800e736:	3301      	adds	r3, #1
 800e738:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800e73a:	e013      	b.n	800e764 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800e73c:	7dfb      	ldrb	r3, [r7, #23]
 800e73e:	68ba      	ldr	r2, [r7, #8]
 800e740:	4413      	add	r3, r2
 800e742:	693a      	ldr	r2, [r7, #16]
 800e744:	7812      	ldrb	r2, [r2, #0]
 800e746:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800e748:	693b      	ldr	r3, [r7, #16]
 800e74a:	3301      	adds	r3, #1
 800e74c:	613b      	str	r3, [r7, #16]
    idx++;
 800e74e:	7dfb      	ldrb	r3, [r7, #23]
 800e750:	3301      	adds	r3, #1
 800e752:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800e754:	7dfb      	ldrb	r3, [r7, #23]
 800e756:	68ba      	ldr	r2, [r7, #8]
 800e758:	4413      	add	r3, r2
 800e75a:	2200      	movs	r2, #0
 800e75c:	701a      	strb	r2, [r3, #0]
    idx++;
 800e75e:	7dfb      	ldrb	r3, [r7, #23]
 800e760:	3301      	adds	r3, #1
 800e762:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800e764:	693b      	ldr	r3, [r7, #16]
 800e766:	781b      	ldrb	r3, [r3, #0]
 800e768:	2b00      	cmp	r3, #0
 800e76a:	d1e7      	bne.n	800e73c <USBD_GetString+0x52>
 800e76c:	e000      	b.n	800e770 <USBD_GetString+0x86>
    return;
 800e76e:	bf00      	nop
  }
}
 800e770:	3718      	adds	r7, #24
 800e772:	46bd      	mov	sp, r7
 800e774:	bd80      	pop	{r7, pc}

0800e776 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800e776:	b480      	push	{r7}
 800e778:	b085      	sub	sp, #20
 800e77a:	af00      	add	r7, sp, #0
 800e77c:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800e77e:	2300      	movs	r3, #0
 800e780:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800e782:	687b      	ldr	r3, [r7, #4]
 800e784:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800e786:	e005      	b.n	800e794 <USBD_GetLen+0x1e>
  {
    len++;
 800e788:	7bfb      	ldrb	r3, [r7, #15]
 800e78a:	3301      	adds	r3, #1
 800e78c:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800e78e:	68bb      	ldr	r3, [r7, #8]
 800e790:	3301      	adds	r3, #1
 800e792:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800e794:	68bb      	ldr	r3, [r7, #8]
 800e796:	781b      	ldrb	r3, [r3, #0]
 800e798:	2b00      	cmp	r3, #0
 800e79a:	d1f5      	bne.n	800e788 <USBD_GetLen+0x12>
  }

  return len;
 800e79c:	7bfb      	ldrb	r3, [r7, #15]
}
 800e79e:	4618      	mov	r0, r3
 800e7a0:	3714      	adds	r7, #20
 800e7a2:	46bd      	mov	sp, r7
 800e7a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e7a8:	4770      	bx	lr

0800e7aa <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800e7aa:	b580      	push	{r7, lr}
 800e7ac:	b084      	sub	sp, #16
 800e7ae:	af00      	add	r7, sp, #0
 800e7b0:	60f8      	str	r0, [r7, #12]
 800e7b2:	60b9      	str	r1, [r7, #8]
 800e7b4:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800e7b6:	68fb      	ldr	r3, [r7, #12]
 800e7b8:	2202      	movs	r2, #2
 800e7ba:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800e7be:	68fb      	ldr	r3, [r7, #12]
 800e7c0:	687a      	ldr	r2, [r7, #4]
 800e7c2:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800e7c4:	68fb      	ldr	r3, [r7, #12]
 800e7c6:	687a      	ldr	r2, [r7, #4]
 800e7c8:	61da      	str	r2, [r3, #28]
#endif

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800e7ca:	687b      	ldr	r3, [r7, #4]
 800e7cc:	68ba      	ldr	r2, [r7, #8]
 800e7ce:	2100      	movs	r1, #0
 800e7d0:	68f8      	ldr	r0, [r7, #12]
 800e7d2:	f003 fd10 	bl	80121f6 <USBD_LL_Transmit>

  return USBD_OK;
 800e7d6:	2300      	movs	r3, #0
}
 800e7d8:	4618      	mov	r0, r3
 800e7da:	3710      	adds	r7, #16
 800e7dc:	46bd      	mov	sp, r7
 800e7de:	bd80      	pop	{r7, pc}

0800e7e0 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800e7e0:	b580      	push	{r7, lr}
 800e7e2:	b084      	sub	sp, #16
 800e7e4:	af00      	add	r7, sp, #0
 800e7e6:	60f8      	str	r0, [r7, #12]
 800e7e8:	60b9      	str	r1, [r7, #8]
 800e7ea:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800e7ec:	687b      	ldr	r3, [r7, #4]
 800e7ee:	68ba      	ldr	r2, [r7, #8]
 800e7f0:	2100      	movs	r1, #0
 800e7f2:	68f8      	ldr	r0, [r7, #12]
 800e7f4:	f003 fcff 	bl	80121f6 <USBD_LL_Transmit>

  return USBD_OK;
 800e7f8:	2300      	movs	r3, #0
}
 800e7fa:	4618      	mov	r0, r3
 800e7fc:	3710      	adds	r7, #16
 800e7fe:	46bd      	mov	sp, r7
 800e800:	bd80      	pop	{r7, pc}

0800e802 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800e802:	b580      	push	{r7, lr}
 800e804:	b084      	sub	sp, #16
 800e806:	af00      	add	r7, sp, #0
 800e808:	60f8      	str	r0, [r7, #12]
 800e80a:	60b9      	str	r1, [r7, #8]
 800e80c:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800e80e:	68fb      	ldr	r3, [r7, #12]
 800e810:	2203      	movs	r2, #3
 800e812:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800e816:	68fb      	ldr	r3, [r7, #12]
 800e818:	687a      	ldr	r2, [r7, #4]
 800e81a:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800e81e:	68fb      	ldr	r3, [r7, #12]
 800e820:	687a      	ldr	r2, [r7, #4]
 800e822:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800e826:	687b      	ldr	r3, [r7, #4]
 800e828:	68ba      	ldr	r2, [r7, #8]
 800e82a:	2100      	movs	r1, #0
 800e82c:	68f8      	ldr	r0, [r7, #12]
 800e82e:	f003 fd03 	bl	8012238 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800e832:	2300      	movs	r3, #0
}
 800e834:	4618      	mov	r0, r3
 800e836:	3710      	adds	r7, #16
 800e838:	46bd      	mov	sp, r7
 800e83a:	bd80      	pop	{r7, pc}

0800e83c <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800e83c:	b580      	push	{r7, lr}
 800e83e:	b084      	sub	sp, #16
 800e840:	af00      	add	r7, sp, #0
 800e842:	60f8      	str	r0, [r7, #12]
 800e844:	60b9      	str	r1, [r7, #8]
 800e846:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800e848:	687b      	ldr	r3, [r7, #4]
 800e84a:	68ba      	ldr	r2, [r7, #8]
 800e84c:	2100      	movs	r1, #0
 800e84e:	68f8      	ldr	r0, [r7, #12]
 800e850:	f003 fcf2 	bl	8012238 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800e854:	2300      	movs	r3, #0
}
 800e856:	4618      	mov	r0, r3
 800e858:	3710      	adds	r7, #16
 800e85a:	46bd      	mov	sp, r7
 800e85c:	bd80      	pop	{r7, pc}

0800e85e <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800e85e:	b580      	push	{r7, lr}
 800e860:	b082      	sub	sp, #8
 800e862:	af00      	add	r7, sp, #0
 800e864:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800e866:	687b      	ldr	r3, [r7, #4]
 800e868:	2204      	movs	r2, #4
 800e86a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800e86e:	2300      	movs	r3, #0
 800e870:	2200      	movs	r2, #0
 800e872:	2100      	movs	r1, #0
 800e874:	6878      	ldr	r0, [r7, #4]
 800e876:	f003 fcbe 	bl	80121f6 <USBD_LL_Transmit>

  return USBD_OK;
 800e87a:	2300      	movs	r3, #0
}
 800e87c:	4618      	mov	r0, r3
 800e87e:	3708      	adds	r7, #8
 800e880:	46bd      	mov	sp, r7
 800e882:	bd80      	pop	{r7, pc}

0800e884 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800e884:	b580      	push	{r7, lr}
 800e886:	b082      	sub	sp, #8
 800e888:	af00      	add	r7, sp, #0
 800e88a:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800e88c:	687b      	ldr	r3, [r7, #4]
 800e88e:	2205      	movs	r2, #5
 800e890:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800e894:	2300      	movs	r3, #0
 800e896:	2200      	movs	r2, #0
 800e898:	2100      	movs	r1, #0
 800e89a:	6878      	ldr	r0, [r7, #4]
 800e89c:	f003 fccc 	bl	8012238 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800e8a0:	2300      	movs	r3, #0
}
 800e8a2:	4618      	mov	r0, r3
 800e8a4:	3708      	adds	r7, #8
 800e8a6:	46bd      	mov	sp, r7
 800e8a8:	bd80      	pop	{r7, pc}
	...

0800e8ac <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800e8ac:	b480      	push	{r7}
 800e8ae:	b087      	sub	sp, #28
 800e8b0:	af00      	add	r7, sp, #0
 800e8b2:	60f8      	str	r0, [r7, #12]
 800e8b4:	60b9      	str	r1, [r7, #8]
 800e8b6:	4613      	mov	r3, r2
 800e8b8:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800e8ba:	2301      	movs	r3, #1
 800e8bc:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800e8be:	2300      	movs	r3, #0
 800e8c0:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800e8c2:	4b1f      	ldr	r3, [pc, #124]	; (800e940 <FATFS_LinkDriverEx+0x94>)
 800e8c4:	7a5b      	ldrb	r3, [r3, #9]
 800e8c6:	b2db      	uxtb	r3, r3
 800e8c8:	2b00      	cmp	r3, #0
 800e8ca:	d131      	bne.n	800e930 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800e8cc:	4b1c      	ldr	r3, [pc, #112]	; (800e940 <FATFS_LinkDriverEx+0x94>)
 800e8ce:	7a5b      	ldrb	r3, [r3, #9]
 800e8d0:	b2db      	uxtb	r3, r3
 800e8d2:	461a      	mov	r2, r3
 800e8d4:	4b1a      	ldr	r3, [pc, #104]	; (800e940 <FATFS_LinkDriverEx+0x94>)
 800e8d6:	2100      	movs	r1, #0
 800e8d8:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800e8da:	4b19      	ldr	r3, [pc, #100]	; (800e940 <FATFS_LinkDriverEx+0x94>)
 800e8dc:	7a5b      	ldrb	r3, [r3, #9]
 800e8de:	b2db      	uxtb	r3, r3
 800e8e0:	4a17      	ldr	r2, [pc, #92]	; (800e940 <FATFS_LinkDriverEx+0x94>)
 800e8e2:	009b      	lsls	r3, r3, #2
 800e8e4:	4413      	add	r3, r2
 800e8e6:	68fa      	ldr	r2, [r7, #12]
 800e8e8:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800e8ea:	4b15      	ldr	r3, [pc, #84]	; (800e940 <FATFS_LinkDriverEx+0x94>)
 800e8ec:	7a5b      	ldrb	r3, [r3, #9]
 800e8ee:	b2db      	uxtb	r3, r3
 800e8f0:	461a      	mov	r2, r3
 800e8f2:	4b13      	ldr	r3, [pc, #76]	; (800e940 <FATFS_LinkDriverEx+0x94>)
 800e8f4:	4413      	add	r3, r2
 800e8f6:	79fa      	ldrb	r2, [r7, #7]
 800e8f8:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800e8fa:	4b11      	ldr	r3, [pc, #68]	; (800e940 <FATFS_LinkDriverEx+0x94>)
 800e8fc:	7a5b      	ldrb	r3, [r3, #9]
 800e8fe:	b2db      	uxtb	r3, r3
 800e900:	1c5a      	adds	r2, r3, #1
 800e902:	b2d1      	uxtb	r1, r2
 800e904:	4a0e      	ldr	r2, [pc, #56]	; (800e940 <FATFS_LinkDriverEx+0x94>)
 800e906:	7251      	strb	r1, [r2, #9]
 800e908:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800e90a:	7dbb      	ldrb	r3, [r7, #22]
 800e90c:	3330      	adds	r3, #48	; 0x30
 800e90e:	b2da      	uxtb	r2, r3
 800e910:	68bb      	ldr	r3, [r7, #8]
 800e912:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800e914:	68bb      	ldr	r3, [r7, #8]
 800e916:	3301      	adds	r3, #1
 800e918:	223a      	movs	r2, #58	; 0x3a
 800e91a:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800e91c:	68bb      	ldr	r3, [r7, #8]
 800e91e:	3302      	adds	r3, #2
 800e920:	222f      	movs	r2, #47	; 0x2f
 800e922:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800e924:	68bb      	ldr	r3, [r7, #8]
 800e926:	3303      	adds	r3, #3
 800e928:	2200      	movs	r2, #0
 800e92a:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800e92c:	2300      	movs	r3, #0
 800e92e:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800e930:	7dfb      	ldrb	r3, [r7, #23]
}
 800e932:	4618      	mov	r0, r3
 800e934:	371c      	adds	r7, #28
 800e936:	46bd      	mov	sp, r7
 800e938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e93c:	4770      	bx	lr
 800e93e:	bf00      	nop
 800e940:	200001b0 	.word	0x200001b0

0800e944 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800e944:	b580      	push	{r7, lr}
 800e946:	b082      	sub	sp, #8
 800e948:	af00      	add	r7, sp, #0
 800e94a:	6078      	str	r0, [r7, #4]
 800e94c:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800e94e:	2200      	movs	r2, #0
 800e950:	6839      	ldr	r1, [r7, #0]
 800e952:	6878      	ldr	r0, [r7, #4]
 800e954:	f7ff ffaa 	bl	800e8ac <FATFS_LinkDriverEx>
 800e958:	4603      	mov	r3, r0
}
 800e95a:	4618      	mov	r0, r3
 800e95c:	3708      	adds	r7, #8
 800e95e:	46bd      	mov	sp, r7
 800e960:	bd80      	pop	{r7, pc}
	...

0800e964 <__NVIC_SetPriority>:
{
 800e964:	b480      	push	{r7}
 800e966:	b083      	sub	sp, #12
 800e968:	af00      	add	r7, sp, #0
 800e96a:	4603      	mov	r3, r0
 800e96c:	6039      	str	r1, [r7, #0]
 800e96e:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800e970:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800e974:	2b00      	cmp	r3, #0
 800e976:	db0a      	blt.n	800e98e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800e978:	683b      	ldr	r3, [r7, #0]
 800e97a:	b2da      	uxtb	r2, r3
 800e97c:	490c      	ldr	r1, [pc, #48]	; (800e9b0 <__NVIC_SetPriority+0x4c>)
 800e97e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800e982:	0112      	lsls	r2, r2, #4
 800e984:	b2d2      	uxtb	r2, r2
 800e986:	440b      	add	r3, r1
 800e988:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800e98c:	e00a      	b.n	800e9a4 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800e98e:	683b      	ldr	r3, [r7, #0]
 800e990:	b2da      	uxtb	r2, r3
 800e992:	4908      	ldr	r1, [pc, #32]	; (800e9b4 <__NVIC_SetPriority+0x50>)
 800e994:	88fb      	ldrh	r3, [r7, #6]
 800e996:	f003 030f 	and.w	r3, r3, #15
 800e99a:	3b04      	subs	r3, #4
 800e99c:	0112      	lsls	r2, r2, #4
 800e99e:	b2d2      	uxtb	r2, r2
 800e9a0:	440b      	add	r3, r1
 800e9a2:	761a      	strb	r2, [r3, #24]
}
 800e9a4:	bf00      	nop
 800e9a6:	370c      	adds	r7, #12
 800e9a8:	46bd      	mov	sp, r7
 800e9aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e9ae:	4770      	bx	lr
 800e9b0:	e000e100 	.word	0xe000e100
 800e9b4:	e000ed00 	.word	0xe000ed00

0800e9b8 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 800e9b8:	b580      	push	{r7, lr}
 800e9ba:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 800e9bc:	4b05      	ldr	r3, [pc, #20]	; (800e9d4 <SysTick_Handler+0x1c>)
 800e9be:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 800e9c0:	f001 fed2 	bl	8010768 <xTaskGetSchedulerState>
 800e9c4:	4603      	mov	r3, r0
 800e9c6:	2b01      	cmp	r3, #1
 800e9c8:	d001      	beq.n	800e9ce <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 800e9ca:	f002 fcbd 	bl	8011348 <xPortSysTickHandler>
  }
}
 800e9ce:	bf00      	nop
 800e9d0:	bd80      	pop	{r7, pc}
 800e9d2:	bf00      	nop
 800e9d4:	e000e010 	.word	0xe000e010

0800e9d8 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800e9d8:	b580      	push	{r7, lr}
 800e9da:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 800e9dc:	2100      	movs	r1, #0
 800e9de:	f06f 0004 	mvn.w	r0, #4
 800e9e2:	f7ff ffbf 	bl	800e964 <__NVIC_SetPriority>
#endif
}
 800e9e6:	bf00      	nop
 800e9e8:	bd80      	pop	{r7, pc}
	...

0800e9ec <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800e9ec:	b480      	push	{r7}
 800e9ee:	b083      	sub	sp, #12
 800e9f0:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800e9f2:	f3ef 8305 	mrs	r3, IPSR
 800e9f6:	603b      	str	r3, [r7, #0]
  return(result);
 800e9f8:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800e9fa:	2b00      	cmp	r3, #0
 800e9fc:	d003      	beq.n	800ea06 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800e9fe:	f06f 0305 	mvn.w	r3, #5
 800ea02:	607b      	str	r3, [r7, #4]
 800ea04:	e00c      	b.n	800ea20 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800ea06:	4b0a      	ldr	r3, [pc, #40]	; (800ea30 <osKernelInitialize+0x44>)
 800ea08:	681b      	ldr	r3, [r3, #0]
 800ea0a:	2b00      	cmp	r3, #0
 800ea0c:	d105      	bne.n	800ea1a <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800ea0e:	4b08      	ldr	r3, [pc, #32]	; (800ea30 <osKernelInitialize+0x44>)
 800ea10:	2201      	movs	r2, #1
 800ea12:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800ea14:	2300      	movs	r3, #0
 800ea16:	607b      	str	r3, [r7, #4]
 800ea18:	e002      	b.n	800ea20 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800ea1a:	f04f 33ff 	mov.w	r3, #4294967295
 800ea1e:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800ea20:	687b      	ldr	r3, [r7, #4]
}
 800ea22:	4618      	mov	r0, r3
 800ea24:	370c      	adds	r7, #12
 800ea26:	46bd      	mov	sp, r7
 800ea28:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea2c:	4770      	bx	lr
 800ea2e:	bf00      	nop
 800ea30:	200001bc 	.word	0x200001bc

0800ea34 <osKernelGetState>:
  }

  return (osOK);
}

osKernelState_t osKernelGetState (void) {
 800ea34:	b580      	push	{r7, lr}
 800ea36:	b082      	sub	sp, #8
 800ea38:	af00      	add	r7, sp, #0
  osKernelState_t state;

  switch (xTaskGetSchedulerState()) {
 800ea3a:	f001 fe95 	bl	8010768 <xTaskGetSchedulerState>
 800ea3e:	4603      	mov	r3, r0
 800ea40:	2b00      	cmp	r3, #0
 800ea42:	d004      	beq.n	800ea4e <osKernelGetState+0x1a>
 800ea44:	2b02      	cmp	r3, #2
 800ea46:	d105      	bne.n	800ea54 <osKernelGetState+0x20>
    case taskSCHEDULER_RUNNING:
      state = osKernelRunning;
 800ea48:	2302      	movs	r3, #2
 800ea4a:	607b      	str	r3, [r7, #4]
      break;
 800ea4c:	e00c      	b.n	800ea68 <osKernelGetState+0x34>

    case taskSCHEDULER_SUSPENDED:
      state = osKernelLocked;
 800ea4e:	2303      	movs	r3, #3
 800ea50:	607b      	str	r3, [r7, #4]
      break;
 800ea52:	e009      	b.n	800ea68 <osKernelGetState+0x34>

    case taskSCHEDULER_NOT_STARTED:
    default:
      if (KernelState == osKernelReady) {
 800ea54:	4b07      	ldr	r3, [pc, #28]	; (800ea74 <osKernelGetState+0x40>)
 800ea56:	681b      	ldr	r3, [r3, #0]
 800ea58:	2b01      	cmp	r3, #1
 800ea5a:	d102      	bne.n	800ea62 <osKernelGetState+0x2e>
        state = osKernelReady;
 800ea5c:	2301      	movs	r3, #1
 800ea5e:	607b      	str	r3, [r7, #4]
      } else {
        state = osKernelInactive;
      }
      break;
 800ea60:	e001      	b.n	800ea66 <osKernelGetState+0x32>
        state = osKernelInactive;
 800ea62:	2300      	movs	r3, #0
 800ea64:	607b      	str	r3, [r7, #4]
      break;
 800ea66:	bf00      	nop
  }

  return (state);
 800ea68:	687b      	ldr	r3, [r7, #4]
}
 800ea6a:	4618      	mov	r0, r3
 800ea6c:	3708      	adds	r7, #8
 800ea6e:	46bd      	mov	sp, r7
 800ea70:	bd80      	pop	{r7, pc}
 800ea72:	bf00      	nop
 800ea74:	200001bc 	.word	0x200001bc

0800ea78 <osKernelStart>:

osStatus_t osKernelStart (void) {
 800ea78:	b580      	push	{r7, lr}
 800ea7a:	b082      	sub	sp, #8
 800ea7c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800ea7e:	f3ef 8305 	mrs	r3, IPSR
 800ea82:	603b      	str	r3, [r7, #0]
  return(result);
 800ea84:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800ea86:	2b00      	cmp	r3, #0
 800ea88:	d003      	beq.n	800ea92 <osKernelStart+0x1a>
    stat = osErrorISR;
 800ea8a:	f06f 0305 	mvn.w	r3, #5
 800ea8e:	607b      	str	r3, [r7, #4]
 800ea90:	e010      	b.n	800eab4 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800ea92:	4b0b      	ldr	r3, [pc, #44]	; (800eac0 <osKernelStart+0x48>)
 800ea94:	681b      	ldr	r3, [r3, #0]
 800ea96:	2b01      	cmp	r3, #1
 800ea98:	d109      	bne.n	800eaae <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800ea9a:	f7ff ff9d 	bl	800e9d8 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800ea9e:	4b08      	ldr	r3, [pc, #32]	; (800eac0 <osKernelStart+0x48>)
 800eaa0:	2202      	movs	r2, #2
 800eaa2:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800eaa4:	f001 fa06 	bl	800feb4 <vTaskStartScheduler>
      stat = osOK;
 800eaa8:	2300      	movs	r3, #0
 800eaaa:	607b      	str	r3, [r7, #4]
 800eaac:	e002      	b.n	800eab4 <osKernelStart+0x3c>
    } else {
      stat = osError;
 800eaae:	f04f 33ff 	mov.w	r3, #4294967295
 800eab2:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800eab4:	687b      	ldr	r3, [r7, #4]
}
 800eab6:	4618      	mov	r0, r3
 800eab8:	3708      	adds	r7, #8
 800eaba:	46bd      	mov	sp, r7
 800eabc:	bd80      	pop	{r7, pc}
 800eabe:	bf00      	nop
 800eac0:	200001bc 	.word	0x200001bc

0800eac4 <osKernelGetTickCount>:
  }

  return (lock);
}

uint32_t osKernelGetTickCount (void) {
 800eac4:	b580      	push	{r7, lr}
 800eac6:	b082      	sub	sp, #8
 800eac8:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800eaca:	f3ef 8305 	mrs	r3, IPSR
 800eace:	603b      	str	r3, [r7, #0]
  return(result);
 800ead0:	683b      	ldr	r3, [r7, #0]
  TickType_t ticks;

  if (IS_IRQ()) {
 800ead2:	2b00      	cmp	r3, #0
 800ead4:	d003      	beq.n	800eade <osKernelGetTickCount+0x1a>
    ticks = xTaskGetTickCountFromISR();
 800ead6:	f001 fb0f 	bl	80100f8 <xTaskGetTickCountFromISR>
 800eada:	6078      	str	r0, [r7, #4]
 800eadc:	e002      	b.n	800eae4 <osKernelGetTickCount+0x20>
  } else {
    ticks = xTaskGetTickCount();
 800eade:	f001 fafb 	bl	80100d8 <xTaskGetTickCount>
 800eae2:	6078      	str	r0, [r7, #4]
  }

  return (ticks);
 800eae4:	687b      	ldr	r3, [r7, #4]
}
 800eae6:	4618      	mov	r0, r3
 800eae8:	3708      	adds	r7, #8
 800eaea:	46bd      	mov	sp, r7
 800eaec:	bd80      	pop	{r7, pc}

0800eaee <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800eaee:	b580      	push	{r7, lr}
 800eaf0:	b08e      	sub	sp, #56	; 0x38
 800eaf2:	af04      	add	r7, sp, #16
 800eaf4:	60f8      	str	r0, [r7, #12]
 800eaf6:	60b9      	str	r1, [r7, #8]
 800eaf8:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800eafa:	2300      	movs	r3, #0
 800eafc:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800eafe:	f3ef 8305 	mrs	r3, IPSR
 800eb02:	617b      	str	r3, [r7, #20]
  return(result);
 800eb04:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 800eb06:	2b00      	cmp	r3, #0
 800eb08:	d17e      	bne.n	800ec08 <osThreadNew+0x11a>
 800eb0a:	68fb      	ldr	r3, [r7, #12]
 800eb0c:	2b00      	cmp	r3, #0
 800eb0e:	d07b      	beq.n	800ec08 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 800eb10:	2380      	movs	r3, #128	; 0x80
 800eb12:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 800eb14:	2318      	movs	r3, #24
 800eb16:	61fb      	str	r3, [r7, #28]

    name = NULL;
 800eb18:	2300      	movs	r3, #0
 800eb1a:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 800eb1c:	f04f 33ff 	mov.w	r3, #4294967295
 800eb20:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800eb22:	687b      	ldr	r3, [r7, #4]
 800eb24:	2b00      	cmp	r3, #0
 800eb26:	d045      	beq.n	800ebb4 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 800eb28:	687b      	ldr	r3, [r7, #4]
 800eb2a:	681b      	ldr	r3, [r3, #0]
 800eb2c:	2b00      	cmp	r3, #0
 800eb2e:	d002      	beq.n	800eb36 <osThreadNew+0x48>
        name = attr->name;
 800eb30:	687b      	ldr	r3, [r7, #4]
 800eb32:	681b      	ldr	r3, [r3, #0]
 800eb34:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 800eb36:	687b      	ldr	r3, [r7, #4]
 800eb38:	699b      	ldr	r3, [r3, #24]
 800eb3a:	2b00      	cmp	r3, #0
 800eb3c:	d002      	beq.n	800eb44 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 800eb3e:	687b      	ldr	r3, [r7, #4]
 800eb40:	699b      	ldr	r3, [r3, #24]
 800eb42:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800eb44:	69fb      	ldr	r3, [r7, #28]
 800eb46:	2b00      	cmp	r3, #0
 800eb48:	d008      	beq.n	800eb5c <osThreadNew+0x6e>
 800eb4a:	69fb      	ldr	r3, [r7, #28]
 800eb4c:	2b38      	cmp	r3, #56	; 0x38
 800eb4e:	d805      	bhi.n	800eb5c <osThreadNew+0x6e>
 800eb50:	687b      	ldr	r3, [r7, #4]
 800eb52:	685b      	ldr	r3, [r3, #4]
 800eb54:	f003 0301 	and.w	r3, r3, #1
 800eb58:	2b00      	cmp	r3, #0
 800eb5a:	d001      	beq.n	800eb60 <osThreadNew+0x72>
        return (NULL);
 800eb5c:	2300      	movs	r3, #0
 800eb5e:	e054      	b.n	800ec0a <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 800eb60:	687b      	ldr	r3, [r7, #4]
 800eb62:	695b      	ldr	r3, [r3, #20]
 800eb64:	2b00      	cmp	r3, #0
 800eb66:	d003      	beq.n	800eb70 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800eb68:	687b      	ldr	r3, [r7, #4]
 800eb6a:	695b      	ldr	r3, [r3, #20]
 800eb6c:	089b      	lsrs	r3, r3, #2
 800eb6e:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800eb70:	687b      	ldr	r3, [r7, #4]
 800eb72:	689b      	ldr	r3, [r3, #8]
 800eb74:	2b00      	cmp	r3, #0
 800eb76:	d00e      	beq.n	800eb96 <osThreadNew+0xa8>
 800eb78:	687b      	ldr	r3, [r7, #4]
 800eb7a:	68db      	ldr	r3, [r3, #12]
 800eb7c:	2b5b      	cmp	r3, #91	; 0x5b
 800eb7e:	d90a      	bls.n	800eb96 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800eb80:	687b      	ldr	r3, [r7, #4]
 800eb82:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800eb84:	2b00      	cmp	r3, #0
 800eb86:	d006      	beq.n	800eb96 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800eb88:	687b      	ldr	r3, [r7, #4]
 800eb8a:	695b      	ldr	r3, [r3, #20]
 800eb8c:	2b00      	cmp	r3, #0
 800eb8e:	d002      	beq.n	800eb96 <osThreadNew+0xa8>
        mem = 1;
 800eb90:	2301      	movs	r3, #1
 800eb92:	61bb      	str	r3, [r7, #24]
 800eb94:	e010      	b.n	800ebb8 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800eb96:	687b      	ldr	r3, [r7, #4]
 800eb98:	689b      	ldr	r3, [r3, #8]
 800eb9a:	2b00      	cmp	r3, #0
 800eb9c:	d10c      	bne.n	800ebb8 <osThreadNew+0xca>
 800eb9e:	687b      	ldr	r3, [r7, #4]
 800eba0:	68db      	ldr	r3, [r3, #12]
 800eba2:	2b00      	cmp	r3, #0
 800eba4:	d108      	bne.n	800ebb8 <osThreadNew+0xca>
 800eba6:	687b      	ldr	r3, [r7, #4]
 800eba8:	691b      	ldr	r3, [r3, #16]
 800ebaa:	2b00      	cmp	r3, #0
 800ebac:	d104      	bne.n	800ebb8 <osThreadNew+0xca>
          mem = 0;
 800ebae:	2300      	movs	r3, #0
 800ebb0:	61bb      	str	r3, [r7, #24]
 800ebb2:	e001      	b.n	800ebb8 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 800ebb4:	2300      	movs	r3, #0
 800ebb6:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800ebb8:	69bb      	ldr	r3, [r7, #24]
 800ebba:	2b01      	cmp	r3, #1
 800ebbc:	d110      	bne.n	800ebe0 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800ebbe:	687b      	ldr	r3, [r7, #4]
 800ebc0:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 800ebc2:	687a      	ldr	r2, [r7, #4]
 800ebc4:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800ebc6:	9202      	str	r2, [sp, #8]
 800ebc8:	9301      	str	r3, [sp, #4]
 800ebca:	69fb      	ldr	r3, [r7, #28]
 800ebcc:	9300      	str	r3, [sp, #0]
 800ebce:	68bb      	ldr	r3, [r7, #8]
 800ebd0:	6a3a      	ldr	r2, [r7, #32]
 800ebd2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800ebd4:	68f8      	ldr	r0, [r7, #12]
 800ebd6:	f000 ff97 	bl	800fb08 <xTaskCreateStatic>
 800ebda:	4603      	mov	r3, r0
 800ebdc:	613b      	str	r3, [r7, #16]
 800ebde:	e013      	b.n	800ec08 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 800ebe0:	69bb      	ldr	r3, [r7, #24]
 800ebe2:	2b00      	cmp	r3, #0
 800ebe4:	d110      	bne.n	800ec08 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800ebe6:	6a3b      	ldr	r3, [r7, #32]
 800ebe8:	b29a      	uxth	r2, r3
 800ebea:	f107 0310 	add.w	r3, r7, #16
 800ebee:	9301      	str	r3, [sp, #4]
 800ebf0:	69fb      	ldr	r3, [r7, #28]
 800ebf2:	9300      	str	r3, [sp, #0]
 800ebf4:	68bb      	ldr	r3, [r7, #8]
 800ebf6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800ebf8:	68f8      	ldr	r0, [r7, #12]
 800ebfa:	f000 ffe2 	bl	800fbc2 <xTaskCreate>
 800ebfe:	4603      	mov	r3, r0
 800ec00:	2b01      	cmp	r3, #1
 800ec02:	d001      	beq.n	800ec08 <osThreadNew+0x11a>
            hTask = NULL;
 800ec04:	2300      	movs	r3, #0
 800ec06:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800ec08:	693b      	ldr	r3, [r7, #16]
}
 800ec0a:	4618      	mov	r0, r3
 800ec0c:	3728      	adds	r7, #40	; 0x28
 800ec0e:	46bd      	mov	sp, r7
 800ec10:	bd80      	pop	{r7, pc}

0800ec12 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 800ec12:	b580      	push	{r7, lr}
 800ec14:	b084      	sub	sp, #16
 800ec16:	af00      	add	r7, sp, #0
 800ec18:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800ec1a:	f3ef 8305 	mrs	r3, IPSR
 800ec1e:	60bb      	str	r3, [r7, #8]
  return(result);
 800ec20:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800ec22:	2b00      	cmp	r3, #0
 800ec24:	d003      	beq.n	800ec2e <osDelay+0x1c>
    stat = osErrorISR;
 800ec26:	f06f 0305 	mvn.w	r3, #5
 800ec2a:	60fb      	str	r3, [r7, #12]
 800ec2c:	e007      	b.n	800ec3e <osDelay+0x2c>
  }
  else {
    stat = osOK;
 800ec2e:	2300      	movs	r3, #0
 800ec30:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 800ec32:	687b      	ldr	r3, [r7, #4]
 800ec34:	2b00      	cmp	r3, #0
 800ec36:	d002      	beq.n	800ec3e <osDelay+0x2c>
      vTaskDelay(ticks);
 800ec38:	6878      	ldr	r0, [r7, #4]
 800ec3a:	f001 f907 	bl	800fe4c <vTaskDelay>
    }
  }

  return (stat);
 800ec3e:	68fb      	ldr	r3, [r7, #12]
}
 800ec40:	4618      	mov	r0, r3
 800ec42:	3710      	adds	r7, #16
 800ec44:	46bd      	mov	sp, r7
 800ec46:	bd80      	pop	{r7, pc}

0800ec48 <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 800ec48:	b580      	push	{r7, lr}
 800ec4a:	b08a      	sub	sp, #40	; 0x28
 800ec4c:	af02      	add	r7, sp, #8
 800ec4e:	60f8      	str	r0, [r7, #12]
 800ec50:	60b9      	str	r1, [r7, #8]
 800ec52:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 800ec54:	2300      	movs	r3, #0
 800ec56:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800ec58:	f3ef 8305 	mrs	r3, IPSR
 800ec5c:	613b      	str	r3, [r7, #16]
  return(result);
 800ec5e:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 800ec60:	2b00      	cmp	r3, #0
 800ec62:	d15f      	bne.n	800ed24 <osMessageQueueNew+0xdc>
 800ec64:	68fb      	ldr	r3, [r7, #12]
 800ec66:	2b00      	cmp	r3, #0
 800ec68:	d05c      	beq.n	800ed24 <osMessageQueueNew+0xdc>
 800ec6a:	68bb      	ldr	r3, [r7, #8]
 800ec6c:	2b00      	cmp	r3, #0
 800ec6e:	d059      	beq.n	800ed24 <osMessageQueueNew+0xdc>
    mem = -1;
 800ec70:	f04f 33ff 	mov.w	r3, #4294967295
 800ec74:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800ec76:	687b      	ldr	r3, [r7, #4]
 800ec78:	2b00      	cmp	r3, #0
 800ec7a:	d029      	beq.n	800ecd0 <osMessageQueueNew+0x88>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800ec7c:	687b      	ldr	r3, [r7, #4]
 800ec7e:	689b      	ldr	r3, [r3, #8]
 800ec80:	2b00      	cmp	r3, #0
 800ec82:	d012      	beq.n	800ecaa <osMessageQueueNew+0x62>
 800ec84:	687b      	ldr	r3, [r7, #4]
 800ec86:	68db      	ldr	r3, [r3, #12]
 800ec88:	2b4f      	cmp	r3, #79	; 0x4f
 800ec8a:	d90e      	bls.n	800ecaa <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800ec8c:	687b      	ldr	r3, [r7, #4]
 800ec8e:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800ec90:	2b00      	cmp	r3, #0
 800ec92:	d00a      	beq.n	800ecaa <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800ec94:	687b      	ldr	r3, [r7, #4]
 800ec96:	695a      	ldr	r2, [r3, #20]
 800ec98:	68fb      	ldr	r3, [r7, #12]
 800ec9a:	68b9      	ldr	r1, [r7, #8]
 800ec9c:	fb01 f303 	mul.w	r3, r1, r3
 800eca0:	429a      	cmp	r2, r3
 800eca2:	d302      	bcc.n	800ecaa <osMessageQueueNew+0x62>
        mem = 1;
 800eca4:	2301      	movs	r3, #1
 800eca6:	61bb      	str	r3, [r7, #24]
 800eca8:	e014      	b.n	800ecd4 <osMessageQueueNew+0x8c>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800ecaa:	687b      	ldr	r3, [r7, #4]
 800ecac:	689b      	ldr	r3, [r3, #8]
 800ecae:	2b00      	cmp	r3, #0
 800ecb0:	d110      	bne.n	800ecd4 <osMessageQueueNew+0x8c>
 800ecb2:	687b      	ldr	r3, [r7, #4]
 800ecb4:	68db      	ldr	r3, [r3, #12]
 800ecb6:	2b00      	cmp	r3, #0
 800ecb8:	d10c      	bne.n	800ecd4 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800ecba:	687b      	ldr	r3, [r7, #4]
 800ecbc:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800ecbe:	2b00      	cmp	r3, #0
 800ecc0:	d108      	bne.n	800ecd4 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800ecc2:	687b      	ldr	r3, [r7, #4]
 800ecc4:	695b      	ldr	r3, [r3, #20]
 800ecc6:	2b00      	cmp	r3, #0
 800ecc8:	d104      	bne.n	800ecd4 <osMessageQueueNew+0x8c>
          mem = 0;
 800ecca:	2300      	movs	r3, #0
 800eccc:	61bb      	str	r3, [r7, #24]
 800ecce:	e001      	b.n	800ecd4 <osMessageQueueNew+0x8c>
        }
      }
    }
    else {
      mem = 0;
 800ecd0:	2300      	movs	r3, #0
 800ecd2:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800ecd4:	69bb      	ldr	r3, [r7, #24]
 800ecd6:	2b01      	cmp	r3, #1
 800ecd8:	d10b      	bne.n	800ecf2 <osMessageQueueNew+0xaa>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 800ecda:	687b      	ldr	r3, [r7, #4]
 800ecdc:	691a      	ldr	r2, [r3, #16]
 800ecde:	687b      	ldr	r3, [r7, #4]
 800ece0:	689b      	ldr	r3, [r3, #8]
 800ece2:	2100      	movs	r1, #0
 800ece4:	9100      	str	r1, [sp, #0]
 800ece6:	68b9      	ldr	r1, [r7, #8]
 800ece8:	68f8      	ldr	r0, [r7, #12]
 800ecea:	f000 f9cf 	bl	800f08c <xQueueGenericCreateStatic>
 800ecee:	61f8      	str	r0, [r7, #28]
 800ecf0:	e008      	b.n	800ed04 <osMessageQueueNew+0xbc>
      #endif
    }
    else {
      if (mem == 0) {
 800ecf2:	69bb      	ldr	r3, [r7, #24]
 800ecf4:	2b00      	cmp	r3, #0
 800ecf6:	d105      	bne.n	800ed04 <osMessageQueueNew+0xbc>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 800ecf8:	2200      	movs	r2, #0
 800ecfa:	68b9      	ldr	r1, [r7, #8]
 800ecfc:	68f8      	ldr	r0, [r7, #12]
 800ecfe:	f000 fa3d 	bl	800f17c <xQueueGenericCreate>
 800ed02:	61f8      	str	r0, [r7, #28]
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 800ed04:	69fb      	ldr	r3, [r7, #28]
 800ed06:	2b00      	cmp	r3, #0
 800ed08:	d00c      	beq.n	800ed24 <osMessageQueueNew+0xdc>
      if (attr != NULL) {
 800ed0a:	687b      	ldr	r3, [r7, #4]
 800ed0c:	2b00      	cmp	r3, #0
 800ed0e:	d003      	beq.n	800ed18 <osMessageQueueNew+0xd0>
        name = attr->name;
 800ed10:	687b      	ldr	r3, [r7, #4]
 800ed12:	681b      	ldr	r3, [r3, #0]
 800ed14:	617b      	str	r3, [r7, #20]
 800ed16:	e001      	b.n	800ed1c <osMessageQueueNew+0xd4>
      } else {
        name = NULL;
 800ed18:	2300      	movs	r3, #0
 800ed1a:	617b      	str	r3, [r7, #20]
      }
      vQueueAddToRegistry (hQueue, name);
 800ed1c:	6979      	ldr	r1, [r7, #20]
 800ed1e:	69f8      	ldr	r0, [r7, #28]
 800ed20:	f000 fe94 	bl	800fa4c <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 800ed24:	69fb      	ldr	r3, [r7, #28]
}
 800ed26:	4618      	mov	r0, r3
 800ed28:	3720      	adds	r7, #32
 800ed2a:	46bd      	mov	sp, r7
 800ed2c:	bd80      	pop	{r7, pc}
	...

0800ed30 <osMessageQueueGet>:
  }

  return (stat);
}

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 800ed30:	b580      	push	{r7, lr}
 800ed32:	b088      	sub	sp, #32
 800ed34:	af00      	add	r7, sp, #0
 800ed36:	60f8      	str	r0, [r7, #12]
 800ed38:	60b9      	str	r1, [r7, #8]
 800ed3a:	607a      	str	r2, [r7, #4]
 800ed3c:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 800ed3e:	68fb      	ldr	r3, [r7, #12]
 800ed40:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 800ed42:	2300      	movs	r3, #0
 800ed44:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800ed46:	f3ef 8305 	mrs	r3, IPSR
 800ed4a:	617b      	str	r3, [r7, #20]
  return(result);
 800ed4c:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 800ed4e:	2b00      	cmp	r3, #0
 800ed50:	d028      	beq.n	800eda4 <osMessageQueueGet+0x74>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800ed52:	69bb      	ldr	r3, [r7, #24]
 800ed54:	2b00      	cmp	r3, #0
 800ed56:	d005      	beq.n	800ed64 <osMessageQueueGet+0x34>
 800ed58:	68bb      	ldr	r3, [r7, #8]
 800ed5a:	2b00      	cmp	r3, #0
 800ed5c:	d002      	beq.n	800ed64 <osMessageQueueGet+0x34>
 800ed5e:	683b      	ldr	r3, [r7, #0]
 800ed60:	2b00      	cmp	r3, #0
 800ed62:	d003      	beq.n	800ed6c <osMessageQueueGet+0x3c>
      stat = osErrorParameter;
 800ed64:	f06f 0303 	mvn.w	r3, #3
 800ed68:	61fb      	str	r3, [r7, #28]
 800ed6a:	e037      	b.n	800eddc <osMessageQueueGet+0xac>
    }
    else {
      yield = pdFALSE;
 800ed6c:	2300      	movs	r3, #0
 800ed6e:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 800ed70:	f107 0310 	add.w	r3, r7, #16
 800ed74:	461a      	mov	r2, r3
 800ed76:	68b9      	ldr	r1, [r7, #8]
 800ed78:	69b8      	ldr	r0, [r7, #24]
 800ed7a:	f000 fcd7 	bl	800f72c <xQueueReceiveFromISR>
 800ed7e:	4603      	mov	r3, r0
 800ed80:	2b01      	cmp	r3, #1
 800ed82:	d003      	beq.n	800ed8c <osMessageQueueGet+0x5c>
        stat = osErrorResource;
 800ed84:	f06f 0302 	mvn.w	r3, #2
 800ed88:	61fb      	str	r3, [r7, #28]
 800ed8a:	e027      	b.n	800eddc <osMessageQueueGet+0xac>
      } else {
        portYIELD_FROM_ISR (yield);
 800ed8c:	693b      	ldr	r3, [r7, #16]
 800ed8e:	2b00      	cmp	r3, #0
 800ed90:	d024      	beq.n	800eddc <osMessageQueueGet+0xac>
 800ed92:	4b15      	ldr	r3, [pc, #84]	; (800ede8 <osMessageQueueGet+0xb8>)
 800ed94:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ed98:	601a      	str	r2, [r3, #0]
 800ed9a:	f3bf 8f4f 	dsb	sy
 800ed9e:	f3bf 8f6f 	isb	sy
 800eda2:	e01b      	b.n	800eddc <osMessageQueueGet+0xac>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 800eda4:	69bb      	ldr	r3, [r7, #24]
 800eda6:	2b00      	cmp	r3, #0
 800eda8:	d002      	beq.n	800edb0 <osMessageQueueGet+0x80>
 800edaa:	68bb      	ldr	r3, [r7, #8]
 800edac:	2b00      	cmp	r3, #0
 800edae:	d103      	bne.n	800edb8 <osMessageQueueGet+0x88>
      stat = osErrorParameter;
 800edb0:	f06f 0303 	mvn.w	r3, #3
 800edb4:	61fb      	str	r3, [r7, #28]
 800edb6:	e011      	b.n	800eddc <osMessageQueueGet+0xac>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 800edb8:	683a      	ldr	r2, [r7, #0]
 800edba:	68b9      	ldr	r1, [r7, #8]
 800edbc:	69b8      	ldr	r0, [r7, #24]
 800edbe:	f000 fbd5 	bl	800f56c <xQueueReceive>
 800edc2:	4603      	mov	r3, r0
 800edc4:	2b01      	cmp	r3, #1
 800edc6:	d009      	beq.n	800eddc <osMessageQueueGet+0xac>
        if (timeout != 0U) {
 800edc8:	683b      	ldr	r3, [r7, #0]
 800edca:	2b00      	cmp	r3, #0
 800edcc:	d003      	beq.n	800edd6 <osMessageQueueGet+0xa6>
          stat = osErrorTimeout;
 800edce:	f06f 0301 	mvn.w	r3, #1
 800edd2:	61fb      	str	r3, [r7, #28]
 800edd4:	e002      	b.n	800eddc <osMessageQueueGet+0xac>
        } else {
          stat = osErrorResource;
 800edd6:	f06f 0302 	mvn.w	r3, #2
 800edda:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 800eddc:	69fb      	ldr	r3, [r7, #28]
}
 800edde:	4618      	mov	r0, r3
 800ede0:	3720      	adds	r7, #32
 800ede2:	46bd      	mov	sp, r7
 800ede4:	bd80      	pop	{r7, pc}
 800ede6:	bf00      	nop
 800ede8:	e000ed04 	.word	0xe000ed04

0800edec <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800edec:	b480      	push	{r7}
 800edee:	b085      	sub	sp, #20
 800edf0:	af00      	add	r7, sp, #0
 800edf2:	60f8      	str	r0, [r7, #12]
 800edf4:	60b9      	str	r1, [r7, #8]
 800edf6:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800edf8:	68fb      	ldr	r3, [r7, #12]
 800edfa:	4a07      	ldr	r2, [pc, #28]	; (800ee18 <vApplicationGetIdleTaskMemory+0x2c>)
 800edfc:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800edfe:	68bb      	ldr	r3, [r7, #8]
 800ee00:	4a06      	ldr	r2, [pc, #24]	; (800ee1c <vApplicationGetIdleTaskMemory+0x30>)
 800ee02:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800ee04:	687b      	ldr	r3, [r7, #4]
 800ee06:	2280      	movs	r2, #128	; 0x80
 800ee08:	601a      	str	r2, [r3, #0]
}
 800ee0a:	bf00      	nop
 800ee0c:	3714      	adds	r7, #20
 800ee0e:	46bd      	mov	sp, r7
 800ee10:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee14:	4770      	bx	lr
 800ee16:	bf00      	nop
 800ee18:	200001c0 	.word	0x200001c0
 800ee1c:	2000021c 	.word	0x2000021c

0800ee20 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800ee20:	b480      	push	{r7}
 800ee22:	b085      	sub	sp, #20
 800ee24:	af00      	add	r7, sp, #0
 800ee26:	60f8      	str	r0, [r7, #12]
 800ee28:	60b9      	str	r1, [r7, #8]
 800ee2a:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800ee2c:	68fb      	ldr	r3, [r7, #12]
 800ee2e:	4a07      	ldr	r2, [pc, #28]	; (800ee4c <vApplicationGetTimerTaskMemory+0x2c>)
 800ee30:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800ee32:	68bb      	ldr	r3, [r7, #8]
 800ee34:	4a06      	ldr	r2, [pc, #24]	; (800ee50 <vApplicationGetTimerTaskMemory+0x30>)
 800ee36:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800ee38:	687b      	ldr	r3, [r7, #4]
 800ee3a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800ee3e:	601a      	str	r2, [r3, #0]
}
 800ee40:	bf00      	nop
 800ee42:	3714      	adds	r7, #20
 800ee44:	46bd      	mov	sp, r7
 800ee46:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee4a:	4770      	bx	lr
 800ee4c:	2000041c 	.word	0x2000041c
 800ee50:	20000478 	.word	0x20000478

0800ee54 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800ee54:	b480      	push	{r7}
 800ee56:	b083      	sub	sp, #12
 800ee58:	af00      	add	r7, sp, #0
 800ee5a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800ee5c:	687b      	ldr	r3, [r7, #4]
 800ee5e:	f103 0208 	add.w	r2, r3, #8
 800ee62:	687b      	ldr	r3, [r7, #4]
 800ee64:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800ee66:	687b      	ldr	r3, [r7, #4]
 800ee68:	f04f 32ff 	mov.w	r2, #4294967295
 800ee6c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800ee6e:	687b      	ldr	r3, [r7, #4]
 800ee70:	f103 0208 	add.w	r2, r3, #8
 800ee74:	687b      	ldr	r3, [r7, #4]
 800ee76:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800ee78:	687b      	ldr	r3, [r7, #4]
 800ee7a:	f103 0208 	add.w	r2, r3, #8
 800ee7e:	687b      	ldr	r3, [r7, #4]
 800ee80:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800ee82:	687b      	ldr	r3, [r7, #4]
 800ee84:	2200      	movs	r2, #0
 800ee86:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800ee88:	bf00      	nop
 800ee8a:	370c      	adds	r7, #12
 800ee8c:	46bd      	mov	sp, r7
 800ee8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee92:	4770      	bx	lr

0800ee94 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800ee94:	b480      	push	{r7}
 800ee96:	b083      	sub	sp, #12
 800ee98:	af00      	add	r7, sp, #0
 800ee9a:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800ee9c:	687b      	ldr	r3, [r7, #4]
 800ee9e:	2200      	movs	r2, #0
 800eea0:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800eea2:	bf00      	nop
 800eea4:	370c      	adds	r7, #12
 800eea6:	46bd      	mov	sp, r7
 800eea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eeac:	4770      	bx	lr

0800eeae <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800eeae:	b480      	push	{r7}
 800eeb0:	b085      	sub	sp, #20
 800eeb2:	af00      	add	r7, sp, #0
 800eeb4:	6078      	str	r0, [r7, #4]
 800eeb6:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800eeb8:	687b      	ldr	r3, [r7, #4]
 800eeba:	685b      	ldr	r3, [r3, #4]
 800eebc:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800eebe:	683b      	ldr	r3, [r7, #0]
 800eec0:	68fa      	ldr	r2, [r7, #12]
 800eec2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800eec4:	68fb      	ldr	r3, [r7, #12]
 800eec6:	689a      	ldr	r2, [r3, #8]
 800eec8:	683b      	ldr	r3, [r7, #0]
 800eeca:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800eecc:	68fb      	ldr	r3, [r7, #12]
 800eece:	689b      	ldr	r3, [r3, #8]
 800eed0:	683a      	ldr	r2, [r7, #0]
 800eed2:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800eed4:	68fb      	ldr	r3, [r7, #12]
 800eed6:	683a      	ldr	r2, [r7, #0]
 800eed8:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800eeda:	683b      	ldr	r3, [r7, #0]
 800eedc:	687a      	ldr	r2, [r7, #4]
 800eede:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800eee0:	687b      	ldr	r3, [r7, #4]
 800eee2:	681b      	ldr	r3, [r3, #0]
 800eee4:	1c5a      	adds	r2, r3, #1
 800eee6:	687b      	ldr	r3, [r7, #4]
 800eee8:	601a      	str	r2, [r3, #0]
}
 800eeea:	bf00      	nop
 800eeec:	3714      	adds	r7, #20
 800eeee:	46bd      	mov	sp, r7
 800eef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eef4:	4770      	bx	lr

0800eef6 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800eef6:	b480      	push	{r7}
 800eef8:	b085      	sub	sp, #20
 800eefa:	af00      	add	r7, sp, #0
 800eefc:	6078      	str	r0, [r7, #4]
 800eefe:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800ef00:	683b      	ldr	r3, [r7, #0]
 800ef02:	681b      	ldr	r3, [r3, #0]
 800ef04:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800ef06:	68bb      	ldr	r3, [r7, #8]
 800ef08:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ef0c:	d103      	bne.n	800ef16 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800ef0e:	687b      	ldr	r3, [r7, #4]
 800ef10:	691b      	ldr	r3, [r3, #16]
 800ef12:	60fb      	str	r3, [r7, #12]
 800ef14:	e00c      	b.n	800ef30 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800ef16:	687b      	ldr	r3, [r7, #4]
 800ef18:	3308      	adds	r3, #8
 800ef1a:	60fb      	str	r3, [r7, #12]
 800ef1c:	e002      	b.n	800ef24 <vListInsert+0x2e>
 800ef1e:	68fb      	ldr	r3, [r7, #12]
 800ef20:	685b      	ldr	r3, [r3, #4]
 800ef22:	60fb      	str	r3, [r7, #12]
 800ef24:	68fb      	ldr	r3, [r7, #12]
 800ef26:	685b      	ldr	r3, [r3, #4]
 800ef28:	681b      	ldr	r3, [r3, #0]
 800ef2a:	68ba      	ldr	r2, [r7, #8]
 800ef2c:	429a      	cmp	r2, r3
 800ef2e:	d2f6      	bcs.n	800ef1e <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800ef30:	68fb      	ldr	r3, [r7, #12]
 800ef32:	685a      	ldr	r2, [r3, #4]
 800ef34:	683b      	ldr	r3, [r7, #0]
 800ef36:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800ef38:	683b      	ldr	r3, [r7, #0]
 800ef3a:	685b      	ldr	r3, [r3, #4]
 800ef3c:	683a      	ldr	r2, [r7, #0]
 800ef3e:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800ef40:	683b      	ldr	r3, [r7, #0]
 800ef42:	68fa      	ldr	r2, [r7, #12]
 800ef44:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800ef46:	68fb      	ldr	r3, [r7, #12]
 800ef48:	683a      	ldr	r2, [r7, #0]
 800ef4a:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800ef4c:	683b      	ldr	r3, [r7, #0]
 800ef4e:	687a      	ldr	r2, [r7, #4]
 800ef50:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800ef52:	687b      	ldr	r3, [r7, #4]
 800ef54:	681b      	ldr	r3, [r3, #0]
 800ef56:	1c5a      	adds	r2, r3, #1
 800ef58:	687b      	ldr	r3, [r7, #4]
 800ef5a:	601a      	str	r2, [r3, #0]
}
 800ef5c:	bf00      	nop
 800ef5e:	3714      	adds	r7, #20
 800ef60:	46bd      	mov	sp, r7
 800ef62:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef66:	4770      	bx	lr

0800ef68 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800ef68:	b480      	push	{r7}
 800ef6a:	b085      	sub	sp, #20
 800ef6c:	af00      	add	r7, sp, #0
 800ef6e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800ef70:	687b      	ldr	r3, [r7, #4]
 800ef72:	691b      	ldr	r3, [r3, #16]
 800ef74:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800ef76:	687b      	ldr	r3, [r7, #4]
 800ef78:	685b      	ldr	r3, [r3, #4]
 800ef7a:	687a      	ldr	r2, [r7, #4]
 800ef7c:	6892      	ldr	r2, [r2, #8]
 800ef7e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800ef80:	687b      	ldr	r3, [r7, #4]
 800ef82:	689b      	ldr	r3, [r3, #8]
 800ef84:	687a      	ldr	r2, [r7, #4]
 800ef86:	6852      	ldr	r2, [r2, #4]
 800ef88:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800ef8a:	68fb      	ldr	r3, [r7, #12]
 800ef8c:	685b      	ldr	r3, [r3, #4]
 800ef8e:	687a      	ldr	r2, [r7, #4]
 800ef90:	429a      	cmp	r2, r3
 800ef92:	d103      	bne.n	800ef9c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800ef94:	687b      	ldr	r3, [r7, #4]
 800ef96:	689a      	ldr	r2, [r3, #8]
 800ef98:	68fb      	ldr	r3, [r7, #12]
 800ef9a:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800ef9c:	687b      	ldr	r3, [r7, #4]
 800ef9e:	2200      	movs	r2, #0
 800efa0:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800efa2:	68fb      	ldr	r3, [r7, #12]
 800efa4:	681b      	ldr	r3, [r3, #0]
 800efa6:	1e5a      	subs	r2, r3, #1
 800efa8:	68fb      	ldr	r3, [r7, #12]
 800efaa:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800efac:	68fb      	ldr	r3, [r7, #12]
 800efae:	681b      	ldr	r3, [r3, #0]
}
 800efb0:	4618      	mov	r0, r3
 800efb2:	3714      	adds	r7, #20
 800efb4:	46bd      	mov	sp, r7
 800efb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800efba:	4770      	bx	lr

0800efbc <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800efbc:	b580      	push	{r7, lr}
 800efbe:	b084      	sub	sp, #16
 800efc0:	af00      	add	r7, sp, #0
 800efc2:	6078      	str	r0, [r7, #4]
 800efc4:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800efc6:	687b      	ldr	r3, [r7, #4]
 800efc8:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800efca:	68fb      	ldr	r3, [r7, #12]
 800efcc:	2b00      	cmp	r3, #0
 800efce:	d10a      	bne.n	800efe6 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800efd0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800efd4:	f383 8811 	msr	BASEPRI, r3
 800efd8:	f3bf 8f6f 	isb	sy
 800efdc:	f3bf 8f4f 	dsb	sy
 800efe0:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800efe2:	bf00      	nop
 800efe4:	e7fe      	b.n	800efe4 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800efe6:	f002 f91d 	bl	8011224 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800efea:	68fb      	ldr	r3, [r7, #12]
 800efec:	681a      	ldr	r2, [r3, #0]
 800efee:	68fb      	ldr	r3, [r7, #12]
 800eff0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800eff2:	68f9      	ldr	r1, [r7, #12]
 800eff4:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800eff6:	fb01 f303 	mul.w	r3, r1, r3
 800effa:	441a      	add	r2, r3
 800effc:	68fb      	ldr	r3, [r7, #12]
 800effe:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800f000:	68fb      	ldr	r3, [r7, #12]
 800f002:	2200      	movs	r2, #0
 800f004:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800f006:	68fb      	ldr	r3, [r7, #12]
 800f008:	681a      	ldr	r2, [r3, #0]
 800f00a:	68fb      	ldr	r3, [r7, #12]
 800f00c:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800f00e:	68fb      	ldr	r3, [r7, #12]
 800f010:	681a      	ldr	r2, [r3, #0]
 800f012:	68fb      	ldr	r3, [r7, #12]
 800f014:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f016:	3b01      	subs	r3, #1
 800f018:	68f9      	ldr	r1, [r7, #12]
 800f01a:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800f01c:	fb01 f303 	mul.w	r3, r1, r3
 800f020:	441a      	add	r2, r3
 800f022:	68fb      	ldr	r3, [r7, #12]
 800f024:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800f026:	68fb      	ldr	r3, [r7, #12]
 800f028:	22ff      	movs	r2, #255	; 0xff
 800f02a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800f02e:	68fb      	ldr	r3, [r7, #12]
 800f030:	22ff      	movs	r2, #255	; 0xff
 800f032:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800f036:	683b      	ldr	r3, [r7, #0]
 800f038:	2b00      	cmp	r3, #0
 800f03a:	d114      	bne.n	800f066 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800f03c:	68fb      	ldr	r3, [r7, #12]
 800f03e:	691b      	ldr	r3, [r3, #16]
 800f040:	2b00      	cmp	r3, #0
 800f042:	d01a      	beq.n	800f07a <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800f044:	68fb      	ldr	r3, [r7, #12]
 800f046:	3310      	adds	r3, #16
 800f048:	4618      	mov	r0, r3
 800f04a:	f001 f9cf 	bl	80103ec <xTaskRemoveFromEventList>
 800f04e:	4603      	mov	r3, r0
 800f050:	2b00      	cmp	r3, #0
 800f052:	d012      	beq.n	800f07a <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800f054:	4b0c      	ldr	r3, [pc, #48]	; (800f088 <xQueueGenericReset+0xcc>)
 800f056:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f05a:	601a      	str	r2, [r3, #0]
 800f05c:	f3bf 8f4f 	dsb	sy
 800f060:	f3bf 8f6f 	isb	sy
 800f064:	e009      	b.n	800f07a <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800f066:	68fb      	ldr	r3, [r7, #12]
 800f068:	3310      	adds	r3, #16
 800f06a:	4618      	mov	r0, r3
 800f06c:	f7ff fef2 	bl	800ee54 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800f070:	68fb      	ldr	r3, [r7, #12]
 800f072:	3324      	adds	r3, #36	; 0x24
 800f074:	4618      	mov	r0, r3
 800f076:	f7ff feed 	bl	800ee54 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800f07a:	f002 f903 	bl	8011284 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800f07e:	2301      	movs	r3, #1
}
 800f080:	4618      	mov	r0, r3
 800f082:	3710      	adds	r7, #16
 800f084:	46bd      	mov	sp, r7
 800f086:	bd80      	pop	{r7, pc}
 800f088:	e000ed04 	.word	0xe000ed04

0800f08c <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800f08c:	b580      	push	{r7, lr}
 800f08e:	b08e      	sub	sp, #56	; 0x38
 800f090:	af02      	add	r7, sp, #8
 800f092:	60f8      	str	r0, [r7, #12]
 800f094:	60b9      	str	r1, [r7, #8]
 800f096:	607a      	str	r2, [r7, #4]
 800f098:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800f09a:	68fb      	ldr	r3, [r7, #12]
 800f09c:	2b00      	cmp	r3, #0
 800f09e:	d10a      	bne.n	800f0b6 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 800f0a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f0a4:	f383 8811 	msr	BASEPRI, r3
 800f0a8:	f3bf 8f6f 	isb	sy
 800f0ac:	f3bf 8f4f 	dsb	sy
 800f0b0:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800f0b2:	bf00      	nop
 800f0b4:	e7fe      	b.n	800f0b4 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800f0b6:	683b      	ldr	r3, [r7, #0]
 800f0b8:	2b00      	cmp	r3, #0
 800f0ba:	d10a      	bne.n	800f0d2 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 800f0bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f0c0:	f383 8811 	msr	BASEPRI, r3
 800f0c4:	f3bf 8f6f 	isb	sy
 800f0c8:	f3bf 8f4f 	dsb	sy
 800f0cc:	627b      	str	r3, [r7, #36]	; 0x24
}
 800f0ce:	bf00      	nop
 800f0d0:	e7fe      	b.n	800f0d0 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800f0d2:	687b      	ldr	r3, [r7, #4]
 800f0d4:	2b00      	cmp	r3, #0
 800f0d6:	d002      	beq.n	800f0de <xQueueGenericCreateStatic+0x52>
 800f0d8:	68bb      	ldr	r3, [r7, #8]
 800f0da:	2b00      	cmp	r3, #0
 800f0dc:	d001      	beq.n	800f0e2 <xQueueGenericCreateStatic+0x56>
 800f0de:	2301      	movs	r3, #1
 800f0e0:	e000      	b.n	800f0e4 <xQueueGenericCreateStatic+0x58>
 800f0e2:	2300      	movs	r3, #0
 800f0e4:	2b00      	cmp	r3, #0
 800f0e6:	d10a      	bne.n	800f0fe <xQueueGenericCreateStatic+0x72>
	__asm volatile
 800f0e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f0ec:	f383 8811 	msr	BASEPRI, r3
 800f0f0:	f3bf 8f6f 	isb	sy
 800f0f4:	f3bf 8f4f 	dsb	sy
 800f0f8:	623b      	str	r3, [r7, #32]
}
 800f0fa:	bf00      	nop
 800f0fc:	e7fe      	b.n	800f0fc <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800f0fe:	687b      	ldr	r3, [r7, #4]
 800f100:	2b00      	cmp	r3, #0
 800f102:	d102      	bne.n	800f10a <xQueueGenericCreateStatic+0x7e>
 800f104:	68bb      	ldr	r3, [r7, #8]
 800f106:	2b00      	cmp	r3, #0
 800f108:	d101      	bne.n	800f10e <xQueueGenericCreateStatic+0x82>
 800f10a:	2301      	movs	r3, #1
 800f10c:	e000      	b.n	800f110 <xQueueGenericCreateStatic+0x84>
 800f10e:	2300      	movs	r3, #0
 800f110:	2b00      	cmp	r3, #0
 800f112:	d10a      	bne.n	800f12a <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 800f114:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f118:	f383 8811 	msr	BASEPRI, r3
 800f11c:	f3bf 8f6f 	isb	sy
 800f120:	f3bf 8f4f 	dsb	sy
 800f124:	61fb      	str	r3, [r7, #28]
}
 800f126:	bf00      	nop
 800f128:	e7fe      	b.n	800f128 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800f12a:	2350      	movs	r3, #80	; 0x50
 800f12c:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800f12e:	697b      	ldr	r3, [r7, #20]
 800f130:	2b50      	cmp	r3, #80	; 0x50
 800f132:	d00a      	beq.n	800f14a <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 800f134:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f138:	f383 8811 	msr	BASEPRI, r3
 800f13c:	f3bf 8f6f 	isb	sy
 800f140:	f3bf 8f4f 	dsb	sy
 800f144:	61bb      	str	r3, [r7, #24]
}
 800f146:	bf00      	nop
 800f148:	e7fe      	b.n	800f148 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800f14a:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800f14c:	683b      	ldr	r3, [r7, #0]
 800f14e:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800f150:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f152:	2b00      	cmp	r3, #0
 800f154:	d00d      	beq.n	800f172 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800f156:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f158:	2201      	movs	r2, #1
 800f15a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800f15e:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800f162:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f164:	9300      	str	r3, [sp, #0]
 800f166:	4613      	mov	r3, r2
 800f168:	687a      	ldr	r2, [r7, #4]
 800f16a:	68b9      	ldr	r1, [r7, #8]
 800f16c:	68f8      	ldr	r0, [r7, #12]
 800f16e:	f000 f83f 	bl	800f1f0 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800f172:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800f174:	4618      	mov	r0, r3
 800f176:	3730      	adds	r7, #48	; 0x30
 800f178:	46bd      	mov	sp, r7
 800f17a:	bd80      	pop	{r7, pc}

0800f17c <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800f17c:	b580      	push	{r7, lr}
 800f17e:	b08a      	sub	sp, #40	; 0x28
 800f180:	af02      	add	r7, sp, #8
 800f182:	60f8      	str	r0, [r7, #12]
 800f184:	60b9      	str	r1, [r7, #8]
 800f186:	4613      	mov	r3, r2
 800f188:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800f18a:	68fb      	ldr	r3, [r7, #12]
 800f18c:	2b00      	cmp	r3, #0
 800f18e:	d10a      	bne.n	800f1a6 <xQueueGenericCreate+0x2a>
	__asm volatile
 800f190:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f194:	f383 8811 	msr	BASEPRI, r3
 800f198:	f3bf 8f6f 	isb	sy
 800f19c:	f3bf 8f4f 	dsb	sy
 800f1a0:	613b      	str	r3, [r7, #16]
}
 800f1a2:	bf00      	nop
 800f1a4:	e7fe      	b.n	800f1a4 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800f1a6:	68fb      	ldr	r3, [r7, #12]
 800f1a8:	68ba      	ldr	r2, [r7, #8]
 800f1aa:	fb02 f303 	mul.w	r3, r2, r3
 800f1ae:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800f1b0:	69fb      	ldr	r3, [r7, #28]
 800f1b2:	3350      	adds	r3, #80	; 0x50
 800f1b4:	4618      	mov	r0, r3
 800f1b6:	f002 f957 	bl	8011468 <pvPortMalloc>
 800f1ba:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800f1bc:	69bb      	ldr	r3, [r7, #24]
 800f1be:	2b00      	cmp	r3, #0
 800f1c0:	d011      	beq.n	800f1e6 <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800f1c2:	69bb      	ldr	r3, [r7, #24]
 800f1c4:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800f1c6:	697b      	ldr	r3, [r7, #20]
 800f1c8:	3350      	adds	r3, #80	; 0x50
 800f1ca:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800f1cc:	69bb      	ldr	r3, [r7, #24]
 800f1ce:	2200      	movs	r2, #0
 800f1d0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800f1d4:	79fa      	ldrb	r2, [r7, #7]
 800f1d6:	69bb      	ldr	r3, [r7, #24]
 800f1d8:	9300      	str	r3, [sp, #0]
 800f1da:	4613      	mov	r3, r2
 800f1dc:	697a      	ldr	r2, [r7, #20]
 800f1de:	68b9      	ldr	r1, [r7, #8]
 800f1e0:	68f8      	ldr	r0, [r7, #12]
 800f1e2:	f000 f805 	bl	800f1f0 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800f1e6:	69bb      	ldr	r3, [r7, #24]
	}
 800f1e8:	4618      	mov	r0, r3
 800f1ea:	3720      	adds	r7, #32
 800f1ec:	46bd      	mov	sp, r7
 800f1ee:	bd80      	pop	{r7, pc}

0800f1f0 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800f1f0:	b580      	push	{r7, lr}
 800f1f2:	b084      	sub	sp, #16
 800f1f4:	af00      	add	r7, sp, #0
 800f1f6:	60f8      	str	r0, [r7, #12]
 800f1f8:	60b9      	str	r1, [r7, #8]
 800f1fa:	607a      	str	r2, [r7, #4]
 800f1fc:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800f1fe:	68bb      	ldr	r3, [r7, #8]
 800f200:	2b00      	cmp	r3, #0
 800f202:	d103      	bne.n	800f20c <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800f204:	69bb      	ldr	r3, [r7, #24]
 800f206:	69ba      	ldr	r2, [r7, #24]
 800f208:	601a      	str	r2, [r3, #0]
 800f20a:	e002      	b.n	800f212 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800f20c:	69bb      	ldr	r3, [r7, #24]
 800f20e:	687a      	ldr	r2, [r7, #4]
 800f210:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800f212:	69bb      	ldr	r3, [r7, #24]
 800f214:	68fa      	ldr	r2, [r7, #12]
 800f216:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800f218:	69bb      	ldr	r3, [r7, #24]
 800f21a:	68ba      	ldr	r2, [r7, #8]
 800f21c:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800f21e:	2101      	movs	r1, #1
 800f220:	69b8      	ldr	r0, [r7, #24]
 800f222:	f7ff fecb 	bl	800efbc <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800f226:	69bb      	ldr	r3, [r7, #24]
 800f228:	78fa      	ldrb	r2, [r7, #3]
 800f22a:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800f22e:	bf00      	nop
 800f230:	3710      	adds	r7, #16
 800f232:	46bd      	mov	sp, r7
 800f234:	bd80      	pop	{r7, pc}
	...

0800f238 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800f238:	b580      	push	{r7, lr}
 800f23a:	b08e      	sub	sp, #56	; 0x38
 800f23c:	af00      	add	r7, sp, #0
 800f23e:	60f8      	str	r0, [r7, #12]
 800f240:	60b9      	str	r1, [r7, #8]
 800f242:	607a      	str	r2, [r7, #4]
 800f244:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800f246:	2300      	movs	r3, #0
 800f248:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800f24a:	68fb      	ldr	r3, [r7, #12]
 800f24c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800f24e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f250:	2b00      	cmp	r3, #0
 800f252:	d10a      	bne.n	800f26a <xQueueGenericSend+0x32>
	__asm volatile
 800f254:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f258:	f383 8811 	msr	BASEPRI, r3
 800f25c:	f3bf 8f6f 	isb	sy
 800f260:	f3bf 8f4f 	dsb	sy
 800f264:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800f266:	bf00      	nop
 800f268:	e7fe      	b.n	800f268 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800f26a:	68bb      	ldr	r3, [r7, #8]
 800f26c:	2b00      	cmp	r3, #0
 800f26e:	d103      	bne.n	800f278 <xQueueGenericSend+0x40>
 800f270:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f272:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f274:	2b00      	cmp	r3, #0
 800f276:	d101      	bne.n	800f27c <xQueueGenericSend+0x44>
 800f278:	2301      	movs	r3, #1
 800f27a:	e000      	b.n	800f27e <xQueueGenericSend+0x46>
 800f27c:	2300      	movs	r3, #0
 800f27e:	2b00      	cmp	r3, #0
 800f280:	d10a      	bne.n	800f298 <xQueueGenericSend+0x60>
	__asm volatile
 800f282:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f286:	f383 8811 	msr	BASEPRI, r3
 800f28a:	f3bf 8f6f 	isb	sy
 800f28e:	f3bf 8f4f 	dsb	sy
 800f292:	627b      	str	r3, [r7, #36]	; 0x24
}
 800f294:	bf00      	nop
 800f296:	e7fe      	b.n	800f296 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800f298:	683b      	ldr	r3, [r7, #0]
 800f29a:	2b02      	cmp	r3, #2
 800f29c:	d103      	bne.n	800f2a6 <xQueueGenericSend+0x6e>
 800f29e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f2a0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f2a2:	2b01      	cmp	r3, #1
 800f2a4:	d101      	bne.n	800f2aa <xQueueGenericSend+0x72>
 800f2a6:	2301      	movs	r3, #1
 800f2a8:	e000      	b.n	800f2ac <xQueueGenericSend+0x74>
 800f2aa:	2300      	movs	r3, #0
 800f2ac:	2b00      	cmp	r3, #0
 800f2ae:	d10a      	bne.n	800f2c6 <xQueueGenericSend+0x8e>
	__asm volatile
 800f2b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f2b4:	f383 8811 	msr	BASEPRI, r3
 800f2b8:	f3bf 8f6f 	isb	sy
 800f2bc:	f3bf 8f4f 	dsb	sy
 800f2c0:	623b      	str	r3, [r7, #32]
}
 800f2c2:	bf00      	nop
 800f2c4:	e7fe      	b.n	800f2c4 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800f2c6:	f001 fa4f 	bl	8010768 <xTaskGetSchedulerState>
 800f2ca:	4603      	mov	r3, r0
 800f2cc:	2b00      	cmp	r3, #0
 800f2ce:	d102      	bne.n	800f2d6 <xQueueGenericSend+0x9e>
 800f2d0:	687b      	ldr	r3, [r7, #4]
 800f2d2:	2b00      	cmp	r3, #0
 800f2d4:	d101      	bne.n	800f2da <xQueueGenericSend+0xa2>
 800f2d6:	2301      	movs	r3, #1
 800f2d8:	e000      	b.n	800f2dc <xQueueGenericSend+0xa4>
 800f2da:	2300      	movs	r3, #0
 800f2dc:	2b00      	cmp	r3, #0
 800f2de:	d10a      	bne.n	800f2f6 <xQueueGenericSend+0xbe>
	__asm volatile
 800f2e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f2e4:	f383 8811 	msr	BASEPRI, r3
 800f2e8:	f3bf 8f6f 	isb	sy
 800f2ec:	f3bf 8f4f 	dsb	sy
 800f2f0:	61fb      	str	r3, [r7, #28]
}
 800f2f2:	bf00      	nop
 800f2f4:	e7fe      	b.n	800f2f4 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800f2f6:	f001 ff95 	bl	8011224 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800f2fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f2fc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800f2fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f300:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f302:	429a      	cmp	r2, r3
 800f304:	d302      	bcc.n	800f30c <xQueueGenericSend+0xd4>
 800f306:	683b      	ldr	r3, [r7, #0]
 800f308:	2b02      	cmp	r3, #2
 800f30a:	d129      	bne.n	800f360 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800f30c:	683a      	ldr	r2, [r7, #0]
 800f30e:	68b9      	ldr	r1, [r7, #8]
 800f310:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800f312:	f000 fa8b 	bl	800f82c <prvCopyDataToQueue>
 800f316:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800f318:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f31a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f31c:	2b00      	cmp	r3, #0
 800f31e:	d010      	beq.n	800f342 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800f320:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f322:	3324      	adds	r3, #36	; 0x24
 800f324:	4618      	mov	r0, r3
 800f326:	f001 f861 	bl	80103ec <xTaskRemoveFromEventList>
 800f32a:	4603      	mov	r3, r0
 800f32c:	2b00      	cmp	r3, #0
 800f32e:	d013      	beq.n	800f358 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800f330:	4b3f      	ldr	r3, [pc, #252]	; (800f430 <xQueueGenericSend+0x1f8>)
 800f332:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f336:	601a      	str	r2, [r3, #0]
 800f338:	f3bf 8f4f 	dsb	sy
 800f33c:	f3bf 8f6f 	isb	sy
 800f340:	e00a      	b.n	800f358 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800f342:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f344:	2b00      	cmp	r3, #0
 800f346:	d007      	beq.n	800f358 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800f348:	4b39      	ldr	r3, [pc, #228]	; (800f430 <xQueueGenericSend+0x1f8>)
 800f34a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f34e:	601a      	str	r2, [r3, #0]
 800f350:	f3bf 8f4f 	dsb	sy
 800f354:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800f358:	f001 ff94 	bl	8011284 <vPortExitCritical>
				return pdPASS;
 800f35c:	2301      	movs	r3, #1
 800f35e:	e063      	b.n	800f428 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800f360:	687b      	ldr	r3, [r7, #4]
 800f362:	2b00      	cmp	r3, #0
 800f364:	d103      	bne.n	800f36e <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800f366:	f001 ff8d 	bl	8011284 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800f36a:	2300      	movs	r3, #0
 800f36c:	e05c      	b.n	800f428 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800f36e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f370:	2b00      	cmp	r3, #0
 800f372:	d106      	bne.n	800f382 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800f374:	f107 0314 	add.w	r3, r7, #20
 800f378:	4618      	mov	r0, r3
 800f37a:	f001 f89b 	bl	80104b4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800f37e:	2301      	movs	r3, #1
 800f380:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800f382:	f001 ff7f 	bl	8011284 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800f386:	f000 fdfb 	bl	800ff80 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800f38a:	f001 ff4b 	bl	8011224 <vPortEnterCritical>
 800f38e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f390:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800f394:	b25b      	sxtb	r3, r3
 800f396:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f39a:	d103      	bne.n	800f3a4 <xQueueGenericSend+0x16c>
 800f39c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f39e:	2200      	movs	r2, #0
 800f3a0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800f3a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f3a6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800f3aa:	b25b      	sxtb	r3, r3
 800f3ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f3b0:	d103      	bne.n	800f3ba <xQueueGenericSend+0x182>
 800f3b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f3b4:	2200      	movs	r2, #0
 800f3b6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800f3ba:	f001 ff63 	bl	8011284 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800f3be:	1d3a      	adds	r2, r7, #4
 800f3c0:	f107 0314 	add.w	r3, r7, #20
 800f3c4:	4611      	mov	r1, r2
 800f3c6:	4618      	mov	r0, r3
 800f3c8:	f001 f88a 	bl	80104e0 <xTaskCheckForTimeOut>
 800f3cc:	4603      	mov	r3, r0
 800f3ce:	2b00      	cmp	r3, #0
 800f3d0:	d124      	bne.n	800f41c <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800f3d2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800f3d4:	f000 fb22 	bl	800fa1c <prvIsQueueFull>
 800f3d8:	4603      	mov	r3, r0
 800f3da:	2b00      	cmp	r3, #0
 800f3dc:	d018      	beq.n	800f410 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800f3de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f3e0:	3310      	adds	r3, #16
 800f3e2:	687a      	ldr	r2, [r7, #4]
 800f3e4:	4611      	mov	r1, r2
 800f3e6:	4618      	mov	r0, r3
 800f3e8:	f000 ffb0 	bl	801034c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800f3ec:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800f3ee:	f000 faad 	bl	800f94c <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800f3f2:	f000 fdd3 	bl	800ff9c <xTaskResumeAll>
 800f3f6:	4603      	mov	r3, r0
 800f3f8:	2b00      	cmp	r3, #0
 800f3fa:	f47f af7c 	bne.w	800f2f6 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800f3fe:	4b0c      	ldr	r3, [pc, #48]	; (800f430 <xQueueGenericSend+0x1f8>)
 800f400:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f404:	601a      	str	r2, [r3, #0]
 800f406:	f3bf 8f4f 	dsb	sy
 800f40a:	f3bf 8f6f 	isb	sy
 800f40e:	e772      	b.n	800f2f6 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800f410:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800f412:	f000 fa9b 	bl	800f94c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800f416:	f000 fdc1 	bl	800ff9c <xTaskResumeAll>
 800f41a:	e76c      	b.n	800f2f6 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800f41c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800f41e:	f000 fa95 	bl	800f94c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800f422:	f000 fdbb 	bl	800ff9c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800f426:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800f428:	4618      	mov	r0, r3
 800f42a:	3738      	adds	r7, #56	; 0x38
 800f42c:	46bd      	mov	sp, r7
 800f42e:	bd80      	pop	{r7, pc}
 800f430:	e000ed04 	.word	0xe000ed04

0800f434 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800f434:	b580      	push	{r7, lr}
 800f436:	b090      	sub	sp, #64	; 0x40
 800f438:	af00      	add	r7, sp, #0
 800f43a:	60f8      	str	r0, [r7, #12]
 800f43c:	60b9      	str	r1, [r7, #8]
 800f43e:	607a      	str	r2, [r7, #4]
 800f440:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800f442:	68fb      	ldr	r3, [r7, #12]
 800f444:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 800f446:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f448:	2b00      	cmp	r3, #0
 800f44a:	d10a      	bne.n	800f462 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 800f44c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f450:	f383 8811 	msr	BASEPRI, r3
 800f454:	f3bf 8f6f 	isb	sy
 800f458:	f3bf 8f4f 	dsb	sy
 800f45c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800f45e:	bf00      	nop
 800f460:	e7fe      	b.n	800f460 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800f462:	68bb      	ldr	r3, [r7, #8]
 800f464:	2b00      	cmp	r3, #0
 800f466:	d103      	bne.n	800f470 <xQueueGenericSendFromISR+0x3c>
 800f468:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f46a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f46c:	2b00      	cmp	r3, #0
 800f46e:	d101      	bne.n	800f474 <xQueueGenericSendFromISR+0x40>
 800f470:	2301      	movs	r3, #1
 800f472:	e000      	b.n	800f476 <xQueueGenericSendFromISR+0x42>
 800f474:	2300      	movs	r3, #0
 800f476:	2b00      	cmp	r3, #0
 800f478:	d10a      	bne.n	800f490 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 800f47a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f47e:	f383 8811 	msr	BASEPRI, r3
 800f482:	f3bf 8f6f 	isb	sy
 800f486:	f3bf 8f4f 	dsb	sy
 800f48a:	627b      	str	r3, [r7, #36]	; 0x24
}
 800f48c:	bf00      	nop
 800f48e:	e7fe      	b.n	800f48e <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800f490:	683b      	ldr	r3, [r7, #0]
 800f492:	2b02      	cmp	r3, #2
 800f494:	d103      	bne.n	800f49e <xQueueGenericSendFromISR+0x6a>
 800f496:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f498:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f49a:	2b01      	cmp	r3, #1
 800f49c:	d101      	bne.n	800f4a2 <xQueueGenericSendFromISR+0x6e>
 800f49e:	2301      	movs	r3, #1
 800f4a0:	e000      	b.n	800f4a4 <xQueueGenericSendFromISR+0x70>
 800f4a2:	2300      	movs	r3, #0
 800f4a4:	2b00      	cmp	r3, #0
 800f4a6:	d10a      	bne.n	800f4be <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 800f4a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f4ac:	f383 8811 	msr	BASEPRI, r3
 800f4b0:	f3bf 8f6f 	isb	sy
 800f4b4:	f3bf 8f4f 	dsb	sy
 800f4b8:	623b      	str	r3, [r7, #32]
}
 800f4ba:	bf00      	nop
 800f4bc:	e7fe      	b.n	800f4bc <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800f4be:	f001 ff93 	bl	80113e8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800f4c2:	f3ef 8211 	mrs	r2, BASEPRI
 800f4c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f4ca:	f383 8811 	msr	BASEPRI, r3
 800f4ce:	f3bf 8f6f 	isb	sy
 800f4d2:	f3bf 8f4f 	dsb	sy
 800f4d6:	61fa      	str	r2, [r7, #28]
 800f4d8:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800f4da:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800f4dc:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800f4de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f4e0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800f4e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f4e4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f4e6:	429a      	cmp	r2, r3
 800f4e8:	d302      	bcc.n	800f4f0 <xQueueGenericSendFromISR+0xbc>
 800f4ea:	683b      	ldr	r3, [r7, #0]
 800f4ec:	2b02      	cmp	r3, #2
 800f4ee:	d12f      	bne.n	800f550 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800f4f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f4f2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800f4f6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800f4fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f4fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f4fe:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800f500:	683a      	ldr	r2, [r7, #0]
 800f502:	68b9      	ldr	r1, [r7, #8]
 800f504:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800f506:	f000 f991 	bl	800f82c <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800f50a:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 800f50e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f512:	d112      	bne.n	800f53a <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800f514:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f516:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f518:	2b00      	cmp	r3, #0
 800f51a:	d016      	beq.n	800f54a <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800f51c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f51e:	3324      	adds	r3, #36	; 0x24
 800f520:	4618      	mov	r0, r3
 800f522:	f000 ff63 	bl	80103ec <xTaskRemoveFromEventList>
 800f526:	4603      	mov	r3, r0
 800f528:	2b00      	cmp	r3, #0
 800f52a:	d00e      	beq.n	800f54a <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800f52c:	687b      	ldr	r3, [r7, #4]
 800f52e:	2b00      	cmp	r3, #0
 800f530:	d00b      	beq.n	800f54a <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800f532:	687b      	ldr	r3, [r7, #4]
 800f534:	2201      	movs	r2, #1
 800f536:	601a      	str	r2, [r3, #0]
 800f538:	e007      	b.n	800f54a <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800f53a:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800f53e:	3301      	adds	r3, #1
 800f540:	b2db      	uxtb	r3, r3
 800f542:	b25a      	sxtb	r2, r3
 800f544:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f546:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800f54a:	2301      	movs	r3, #1
 800f54c:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 800f54e:	e001      	b.n	800f554 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800f550:	2300      	movs	r3, #0
 800f552:	63fb      	str	r3, [r7, #60]	; 0x3c
 800f554:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f556:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800f558:	697b      	ldr	r3, [r7, #20]
 800f55a:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800f55e:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800f560:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800f562:	4618      	mov	r0, r3
 800f564:	3740      	adds	r7, #64	; 0x40
 800f566:	46bd      	mov	sp, r7
 800f568:	bd80      	pop	{r7, pc}
	...

0800f56c <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800f56c:	b580      	push	{r7, lr}
 800f56e:	b08c      	sub	sp, #48	; 0x30
 800f570:	af00      	add	r7, sp, #0
 800f572:	60f8      	str	r0, [r7, #12]
 800f574:	60b9      	str	r1, [r7, #8]
 800f576:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800f578:	2300      	movs	r3, #0
 800f57a:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800f57c:	68fb      	ldr	r3, [r7, #12]
 800f57e:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800f580:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f582:	2b00      	cmp	r3, #0
 800f584:	d10a      	bne.n	800f59c <xQueueReceive+0x30>
	__asm volatile
 800f586:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f58a:	f383 8811 	msr	BASEPRI, r3
 800f58e:	f3bf 8f6f 	isb	sy
 800f592:	f3bf 8f4f 	dsb	sy
 800f596:	623b      	str	r3, [r7, #32]
}
 800f598:	bf00      	nop
 800f59a:	e7fe      	b.n	800f59a <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800f59c:	68bb      	ldr	r3, [r7, #8]
 800f59e:	2b00      	cmp	r3, #0
 800f5a0:	d103      	bne.n	800f5aa <xQueueReceive+0x3e>
 800f5a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f5a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f5a6:	2b00      	cmp	r3, #0
 800f5a8:	d101      	bne.n	800f5ae <xQueueReceive+0x42>
 800f5aa:	2301      	movs	r3, #1
 800f5ac:	e000      	b.n	800f5b0 <xQueueReceive+0x44>
 800f5ae:	2300      	movs	r3, #0
 800f5b0:	2b00      	cmp	r3, #0
 800f5b2:	d10a      	bne.n	800f5ca <xQueueReceive+0x5e>
	__asm volatile
 800f5b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f5b8:	f383 8811 	msr	BASEPRI, r3
 800f5bc:	f3bf 8f6f 	isb	sy
 800f5c0:	f3bf 8f4f 	dsb	sy
 800f5c4:	61fb      	str	r3, [r7, #28]
}
 800f5c6:	bf00      	nop
 800f5c8:	e7fe      	b.n	800f5c8 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800f5ca:	f001 f8cd 	bl	8010768 <xTaskGetSchedulerState>
 800f5ce:	4603      	mov	r3, r0
 800f5d0:	2b00      	cmp	r3, #0
 800f5d2:	d102      	bne.n	800f5da <xQueueReceive+0x6e>
 800f5d4:	687b      	ldr	r3, [r7, #4]
 800f5d6:	2b00      	cmp	r3, #0
 800f5d8:	d101      	bne.n	800f5de <xQueueReceive+0x72>
 800f5da:	2301      	movs	r3, #1
 800f5dc:	e000      	b.n	800f5e0 <xQueueReceive+0x74>
 800f5de:	2300      	movs	r3, #0
 800f5e0:	2b00      	cmp	r3, #0
 800f5e2:	d10a      	bne.n	800f5fa <xQueueReceive+0x8e>
	__asm volatile
 800f5e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f5e8:	f383 8811 	msr	BASEPRI, r3
 800f5ec:	f3bf 8f6f 	isb	sy
 800f5f0:	f3bf 8f4f 	dsb	sy
 800f5f4:	61bb      	str	r3, [r7, #24]
}
 800f5f6:	bf00      	nop
 800f5f8:	e7fe      	b.n	800f5f8 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800f5fa:	f001 fe13 	bl	8011224 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800f5fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f600:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f602:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800f604:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f606:	2b00      	cmp	r3, #0
 800f608:	d01f      	beq.n	800f64a <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800f60a:	68b9      	ldr	r1, [r7, #8]
 800f60c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800f60e:	f000 f977 	bl	800f900 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800f612:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f614:	1e5a      	subs	r2, r3, #1
 800f616:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f618:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800f61a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f61c:	691b      	ldr	r3, [r3, #16]
 800f61e:	2b00      	cmp	r3, #0
 800f620:	d00f      	beq.n	800f642 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800f622:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f624:	3310      	adds	r3, #16
 800f626:	4618      	mov	r0, r3
 800f628:	f000 fee0 	bl	80103ec <xTaskRemoveFromEventList>
 800f62c:	4603      	mov	r3, r0
 800f62e:	2b00      	cmp	r3, #0
 800f630:	d007      	beq.n	800f642 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800f632:	4b3d      	ldr	r3, [pc, #244]	; (800f728 <xQueueReceive+0x1bc>)
 800f634:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f638:	601a      	str	r2, [r3, #0]
 800f63a:	f3bf 8f4f 	dsb	sy
 800f63e:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800f642:	f001 fe1f 	bl	8011284 <vPortExitCritical>
				return pdPASS;
 800f646:	2301      	movs	r3, #1
 800f648:	e069      	b.n	800f71e <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800f64a:	687b      	ldr	r3, [r7, #4]
 800f64c:	2b00      	cmp	r3, #0
 800f64e:	d103      	bne.n	800f658 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800f650:	f001 fe18 	bl	8011284 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800f654:	2300      	movs	r3, #0
 800f656:	e062      	b.n	800f71e <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 800f658:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f65a:	2b00      	cmp	r3, #0
 800f65c:	d106      	bne.n	800f66c <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800f65e:	f107 0310 	add.w	r3, r7, #16
 800f662:	4618      	mov	r0, r3
 800f664:	f000 ff26 	bl	80104b4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800f668:	2301      	movs	r3, #1
 800f66a:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800f66c:	f001 fe0a 	bl	8011284 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800f670:	f000 fc86 	bl	800ff80 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800f674:	f001 fdd6 	bl	8011224 <vPortEnterCritical>
 800f678:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f67a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800f67e:	b25b      	sxtb	r3, r3
 800f680:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f684:	d103      	bne.n	800f68e <xQueueReceive+0x122>
 800f686:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f688:	2200      	movs	r2, #0
 800f68a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800f68e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f690:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800f694:	b25b      	sxtb	r3, r3
 800f696:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f69a:	d103      	bne.n	800f6a4 <xQueueReceive+0x138>
 800f69c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f69e:	2200      	movs	r2, #0
 800f6a0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800f6a4:	f001 fdee 	bl	8011284 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800f6a8:	1d3a      	adds	r2, r7, #4
 800f6aa:	f107 0310 	add.w	r3, r7, #16
 800f6ae:	4611      	mov	r1, r2
 800f6b0:	4618      	mov	r0, r3
 800f6b2:	f000 ff15 	bl	80104e0 <xTaskCheckForTimeOut>
 800f6b6:	4603      	mov	r3, r0
 800f6b8:	2b00      	cmp	r3, #0
 800f6ba:	d123      	bne.n	800f704 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800f6bc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800f6be:	f000 f997 	bl	800f9f0 <prvIsQueueEmpty>
 800f6c2:	4603      	mov	r3, r0
 800f6c4:	2b00      	cmp	r3, #0
 800f6c6:	d017      	beq.n	800f6f8 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800f6c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f6ca:	3324      	adds	r3, #36	; 0x24
 800f6cc:	687a      	ldr	r2, [r7, #4]
 800f6ce:	4611      	mov	r1, r2
 800f6d0:	4618      	mov	r0, r3
 800f6d2:	f000 fe3b 	bl	801034c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800f6d6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800f6d8:	f000 f938 	bl	800f94c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800f6dc:	f000 fc5e 	bl	800ff9c <xTaskResumeAll>
 800f6e0:	4603      	mov	r3, r0
 800f6e2:	2b00      	cmp	r3, #0
 800f6e4:	d189      	bne.n	800f5fa <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800f6e6:	4b10      	ldr	r3, [pc, #64]	; (800f728 <xQueueReceive+0x1bc>)
 800f6e8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f6ec:	601a      	str	r2, [r3, #0]
 800f6ee:	f3bf 8f4f 	dsb	sy
 800f6f2:	f3bf 8f6f 	isb	sy
 800f6f6:	e780      	b.n	800f5fa <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800f6f8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800f6fa:	f000 f927 	bl	800f94c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800f6fe:	f000 fc4d 	bl	800ff9c <xTaskResumeAll>
 800f702:	e77a      	b.n	800f5fa <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800f704:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800f706:	f000 f921 	bl	800f94c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800f70a:	f000 fc47 	bl	800ff9c <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800f70e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800f710:	f000 f96e 	bl	800f9f0 <prvIsQueueEmpty>
 800f714:	4603      	mov	r3, r0
 800f716:	2b00      	cmp	r3, #0
 800f718:	f43f af6f 	beq.w	800f5fa <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800f71c:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800f71e:	4618      	mov	r0, r3
 800f720:	3730      	adds	r7, #48	; 0x30
 800f722:	46bd      	mov	sp, r7
 800f724:	bd80      	pop	{r7, pc}
 800f726:	bf00      	nop
 800f728:	e000ed04 	.word	0xe000ed04

0800f72c <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800f72c:	b580      	push	{r7, lr}
 800f72e:	b08e      	sub	sp, #56	; 0x38
 800f730:	af00      	add	r7, sp, #0
 800f732:	60f8      	str	r0, [r7, #12]
 800f734:	60b9      	str	r1, [r7, #8]
 800f736:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800f738:	68fb      	ldr	r3, [r7, #12]
 800f73a:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800f73c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f73e:	2b00      	cmp	r3, #0
 800f740:	d10a      	bne.n	800f758 <xQueueReceiveFromISR+0x2c>
	__asm volatile
 800f742:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f746:	f383 8811 	msr	BASEPRI, r3
 800f74a:	f3bf 8f6f 	isb	sy
 800f74e:	f3bf 8f4f 	dsb	sy
 800f752:	623b      	str	r3, [r7, #32]
}
 800f754:	bf00      	nop
 800f756:	e7fe      	b.n	800f756 <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800f758:	68bb      	ldr	r3, [r7, #8]
 800f75a:	2b00      	cmp	r3, #0
 800f75c:	d103      	bne.n	800f766 <xQueueReceiveFromISR+0x3a>
 800f75e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f760:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f762:	2b00      	cmp	r3, #0
 800f764:	d101      	bne.n	800f76a <xQueueReceiveFromISR+0x3e>
 800f766:	2301      	movs	r3, #1
 800f768:	e000      	b.n	800f76c <xQueueReceiveFromISR+0x40>
 800f76a:	2300      	movs	r3, #0
 800f76c:	2b00      	cmp	r3, #0
 800f76e:	d10a      	bne.n	800f786 <xQueueReceiveFromISR+0x5a>
	__asm volatile
 800f770:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f774:	f383 8811 	msr	BASEPRI, r3
 800f778:	f3bf 8f6f 	isb	sy
 800f77c:	f3bf 8f4f 	dsb	sy
 800f780:	61fb      	str	r3, [r7, #28]
}
 800f782:	bf00      	nop
 800f784:	e7fe      	b.n	800f784 <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800f786:	f001 fe2f 	bl	80113e8 <vPortValidateInterruptPriority>
	__asm volatile
 800f78a:	f3ef 8211 	mrs	r2, BASEPRI
 800f78e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f792:	f383 8811 	msr	BASEPRI, r3
 800f796:	f3bf 8f6f 	isb	sy
 800f79a:	f3bf 8f4f 	dsb	sy
 800f79e:	61ba      	str	r2, [r7, #24]
 800f7a0:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800f7a2:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800f7a4:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800f7a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f7a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f7aa:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800f7ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f7ae:	2b00      	cmp	r3, #0
 800f7b0:	d02f      	beq.n	800f812 <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800f7b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f7b4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800f7b8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800f7bc:	68b9      	ldr	r1, [r7, #8]
 800f7be:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800f7c0:	f000 f89e 	bl	800f900 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800f7c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f7c6:	1e5a      	subs	r2, r3, #1
 800f7c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f7ca:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 800f7cc:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800f7d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f7d4:	d112      	bne.n	800f7fc <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800f7d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f7d8:	691b      	ldr	r3, [r3, #16]
 800f7da:	2b00      	cmp	r3, #0
 800f7dc:	d016      	beq.n	800f80c <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800f7de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f7e0:	3310      	adds	r3, #16
 800f7e2:	4618      	mov	r0, r3
 800f7e4:	f000 fe02 	bl	80103ec <xTaskRemoveFromEventList>
 800f7e8:	4603      	mov	r3, r0
 800f7ea:	2b00      	cmp	r3, #0
 800f7ec:	d00e      	beq.n	800f80c <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800f7ee:	687b      	ldr	r3, [r7, #4]
 800f7f0:	2b00      	cmp	r3, #0
 800f7f2:	d00b      	beq.n	800f80c <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 800f7f4:	687b      	ldr	r3, [r7, #4]
 800f7f6:	2201      	movs	r2, #1
 800f7f8:	601a      	str	r2, [r3, #0]
 800f7fa:	e007      	b.n	800f80c <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800f7fc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800f800:	3301      	adds	r3, #1
 800f802:	b2db      	uxtb	r3, r3
 800f804:	b25a      	sxtb	r2, r3
 800f806:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f808:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 800f80c:	2301      	movs	r3, #1
 800f80e:	637b      	str	r3, [r7, #52]	; 0x34
 800f810:	e001      	b.n	800f816 <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 800f812:	2300      	movs	r3, #0
 800f814:	637b      	str	r3, [r7, #52]	; 0x34
 800f816:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f818:	613b      	str	r3, [r7, #16]
	__asm volatile
 800f81a:	693b      	ldr	r3, [r7, #16]
 800f81c:	f383 8811 	msr	BASEPRI, r3
}
 800f820:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800f822:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800f824:	4618      	mov	r0, r3
 800f826:	3738      	adds	r7, #56	; 0x38
 800f828:	46bd      	mov	sp, r7
 800f82a:	bd80      	pop	{r7, pc}

0800f82c <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800f82c:	b580      	push	{r7, lr}
 800f82e:	b086      	sub	sp, #24
 800f830:	af00      	add	r7, sp, #0
 800f832:	60f8      	str	r0, [r7, #12]
 800f834:	60b9      	str	r1, [r7, #8]
 800f836:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800f838:	2300      	movs	r3, #0
 800f83a:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800f83c:	68fb      	ldr	r3, [r7, #12]
 800f83e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f840:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800f842:	68fb      	ldr	r3, [r7, #12]
 800f844:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f846:	2b00      	cmp	r3, #0
 800f848:	d10d      	bne.n	800f866 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800f84a:	68fb      	ldr	r3, [r7, #12]
 800f84c:	681b      	ldr	r3, [r3, #0]
 800f84e:	2b00      	cmp	r3, #0
 800f850:	d14d      	bne.n	800f8ee <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800f852:	68fb      	ldr	r3, [r7, #12]
 800f854:	689b      	ldr	r3, [r3, #8]
 800f856:	4618      	mov	r0, r3
 800f858:	f000 ffa4 	bl	80107a4 <xTaskPriorityDisinherit>
 800f85c:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800f85e:	68fb      	ldr	r3, [r7, #12]
 800f860:	2200      	movs	r2, #0
 800f862:	609a      	str	r2, [r3, #8]
 800f864:	e043      	b.n	800f8ee <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800f866:	687b      	ldr	r3, [r7, #4]
 800f868:	2b00      	cmp	r3, #0
 800f86a:	d119      	bne.n	800f8a0 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800f86c:	68fb      	ldr	r3, [r7, #12]
 800f86e:	6858      	ldr	r0, [r3, #4]
 800f870:	68fb      	ldr	r3, [r7, #12]
 800f872:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f874:	461a      	mov	r2, r3
 800f876:	68b9      	ldr	r1, [r7, #8]
 800f878:	f002 fd7a 	bl	8012370 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800f87c:	68fb      	ldr	r3, [r7, #12]
 800f87e:	685a      	ldr	r2, [r3, #4]
 800f880:	68fb      	ldr	r3, [r7, #12]
 800f882:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f884:	441a      	add	r2, r3
 800f886:	68fb      	ldr	r3, [r7, #12]
 800f888:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800f88a:	68fb      	ldr	r3, [r7, #12]
 800f88c:	685a      	ldr	r2, [r3, #4]
 800f88e:	68fb      	ldr	r3, [r7, #12]
 800f890:	689b      	ldr	r3, [r3, #8]
 800f892:	429a      	cmp	r2, r3
 800f894:	d32b      	bcc.n	800f8ee <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800f896:	68fb      	ldr	r3, [r7, #12]
 800f898:	681a      	ldr	r2, [r3, #0]
 800f89a:	68fb      	ldr	r3, [r7, #12]
 800f89c:	605a      	str	r2, [r3, #4]
 800f89e:	e026      	b.n	800f8ee <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800f8a0:	68fb      	ldr	r3, [r7, #12]
 800f8a2:	68d8      	ldr	r0, [r3, #12]
 800f8a4:	68fb      	ldr	r3, [r7, #12]
 800f8a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f8a8:	461a      	mov	r2, r3
 800f8aa:	68b9      	ldr	r1, [r7, #8]
 800f8ac:	f002 fd60 	bl	8012370 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800f8b0:	68fb      	ldr	r3, [r7, #12]
 800f8b2:	68da      	ldr	r2, [r3, #12]
 800f8b4:	68fb      	ldr	r3, [r7, #12]
 800f8b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f8b8:	425b      	negs	r3, r3
 800f8ba:	441a      	add	r2, r3
 800f8bc:	68fb      	ldr	r3, [r7, #12]
 800f8be:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800f8c0:	68fb      	ldr	r3, [r7, #12]
 800f8c2:	68da      	ldr	r2, [r3, #12]
 800f8c4:	68fb      	ldr	r3, [r7, #12]
 800f8c6:	681b      	ldr	r3, [r3, #0]
 800f8c8:	429a      	cmp	r2, r3
 800f8ca:	d207      	bcs.n	800f8dc <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800f8cc:	68fb      	ldr	r3, [r7, #12]
 800f8ce:	689a      	ldr	r2, [r3, #8]
 800f8d0:	68fb      	ldr	r3, [r7, #12]
 800f8d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f8d4:	425b      	negs	r3, r3
 800f8d6:	441a      	add	r2, r3
 800f8d8:	68fb      	ldr	r3, [r7, #12]
 800f8da:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800f8dc:	687b      	ldr	r3, [r7, #4]
 800f8de:	2b02      	cmp	r3, #2
 800f8e0:	d105      	bne.n	800f8ee <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800f8e2:	693b      	ldr	r3, [r7, #16]
 800f8e4:	2b00      	cmp	r3, #0
 800f8e6:	d002      	beq.n	800f8ee <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800f8e8:	693b      	ldr	r3, [r7, #16]
 800f8ea:	3b01      	subs	r3, #1
 800f8ec:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800f8ee:	693b      	ldr	r3, [r7, #16]
 800f8f0:	1c5a      	adds	r2, r3, #1
 800f8f2:	68fb      	ldr	r3, [r7, #12]
 800f8f4:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800f8f6:	697b      	ldr	r3, [r7, #20]
}
 800f8f8:	4618      	mov	r0, r3
 800f8fa:	3718      	adds	r7, #24
 800f8fc:	46bd      	mov	sp, r7
 800f8fe:	bd80      	pop	{r7, pc}

0800f900 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800f900:	b580      	push	{r7, lr}
 800f902:	b082      	sub	sp, #8
 800f904:	af00      	add	r7, sp, #0
 800f906:	6078      	str	r0, [r7, #4]
 800f908:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800f90a:	687b      	ldr	r3, [r7, #4]
 800f90c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f90e:	2b00      	cmp	r3, #0
 800f910:	d018      	beq.n	800f944 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800f912:	687b      	ldr	r3, [r7, #4]
 800f914:	68da      	ldr	r2, [r3, #12]
 800f916:	687b      	ldr	r3, [r7, #4]
 800f918:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f91a:	441a      	add	r2, r3
 800f91c:	687b      	ldr	r3, [r7, #4]
 800f91e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800f920:	687b      	ldr	r3, [r7, #4]
 800f922:	68da      	ldr	r2, [r3, #12]
 800f924:	687b      	ldr	r3, [r7, #4]
 800f926:	689b      	ldr	r3, [r3, #8]
 800f928:	429a      	cmp	r2, r3
 800f92a:	d303      	bcc.n	800f934 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800f92c:	687b      	ldr	r3, [r7, #4]
 800f92e:	681a      	ldr	r2, [r3, #0]
 800f930:	687b      	ldr	r3, [r7, #4]
 800f932:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800f934:	687b      	ldr	r3, [r7, #4]
 800f936:	68d9      	ldr	r1, [r3, #12]
 800f938:	687b      	ldr	r3, [r7, #4]
 800f93a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f93c:	461a      	mov	r2, r3
 800f93e:	6838      	ldr	r0, [r7, #0]
 800f940:	f002 fd16 	bl	8012370 <memcpy>
	}
}
 800f944:	bf00      	nop
 800f946:	3708      	adds	r7, #8
 800f948:	46bd      	mov	sp, r7
 800f94a:	bd80      	pop	{r7, pc}

0800f94c <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800f94c:	b580      	push	{r7, lr}
 800f94e:	b084      	sub	sp, #16
 800f950:	af00      	add	r7, sp, #0
 800f952:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800f954:	f001 fc66 	bl	8011224 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800f958:	687b      	ldr	r3, [r7, #4]
 800f95a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800f95e:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800f960:	e011      	b.n	800f986 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800f962:	687b      	ldr	r3, [r7, #4]
 800f964:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f966:	2b00      	cmp	r3, #0
 800f968:	d012      	beq.n	800f990 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800f96a:	687b      	ldr	r3, [r7, #4]
 800f96c:	3324      	adds	r3, #36	; 0x24
 800f96e:	4618      	mov	r0, r3
 800f970:	f000 fd3c 	bl	80103ec <xTaskRemoveFromEventList>
 800f974:	4603      	mov	r3, r0
 800f976:	2b00      	cmp	r3, #0
 800f978:	d001      	beq.n	800f97e <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800f97a:	f000 fe13 	bl	80105a4 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800f97e:	7bfb      	ldrb	r3, [r7, #15]
 800f980:	3b01      	subs	r3, #1
 800f982:	b2db      	uxtb	r3, r3
 800f984:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800f986:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800f98a:	2b00      	cmp	r3, #0
 800f98c:	dce9      	bgt.n	800f962 <prvUnlockQueue+0x16>
 800f98e:	e000      	b.n	800f992 <prvUnlockQueue+0x46>
					break;
 800f990:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800f992:	687b      	ldr	r3, [r7, #4]
 800f994:	22ff      	movs	r2, #255	; 0xff
 800f996:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800f99a:	f001 fc73 	bl	8011284 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800f99e:	f001 fc41 	bl	8011224 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800f9a2:	687b      	ldr	r3, [r7, #4]
 800f9a4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800f9a8:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800f9aa:	e011      	b.n	800f9d0 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800f9ac:	687b      	ldr	r3, [r7, #4]
 800f9ae:	691b      	ldr	r3, [r3, #16]
 800f9b0:	2b00      	cmp	r3, #0
 800f9b2:	d012      	beq.n	800f9da <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800f9b4:	687b      	ldr	r3, [r7, #4]
 800f9b6:	3310      	adds	r3, #16
 800f9b8:	4618      	mov	r0, r3
 800f9ba:	f000 fd17 	bl	80103ec <xTaskRemoveFromEventList>
 800f9be:	4603      	mov	r3, r0
 800f9c0:	2b00      	cmp	r3, #0
 800f9c2:	d001      	beq.n	800f9c8 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800f9c4:	f000 fdee 	bl	80105a4 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800f9c8:	7bbb      	ldrb	r3, [r7, #14]
 800f9ca:	3b01      	subs	r3, #1
 800f9cc:	b2db      	uxtb	r3, r3
 800f9ce:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800f9d0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800f9d4:	2b00      	cmp	r3, #0
 800f9d6:	dce9      	bgt.n	800f9ac <prvUnlockQueue+0x60>
 800f9d8:	e000      	b.n	800f9dc <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800f9da:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800f9dc:	687b      	ldr	r3, [r7, #4]
 800f9de:	22ff      	movs	r2, #255	; 0xff
 800f9e0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800f9e4:	f001 fc4e 	bl	8011284 <vPortExitCritical>
}
 800f9e8:	bf00      	nop
 800f9ea:	3710      	adds	r7, #16
 800f9ec:	46bd      	mov	sp, r7
 800f9ee:	bd80      	pop	{r7, pc}

0800f9f0 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800f9f0:	b580      	push	{r7, lr}
 800f9f2:	b084      	sub	sp, #16
 800f9f4:	af00      	add	r7, sp, #0
 800f9f6:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800f9f8:	f001 fc14 	bl	8011224 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800f9fc:	687b      	ldr	r3, [r7, #4]
 800f9fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800fa00:	2b00      	cmp	r3, #0
 800fa02:	d102      	bne.n	800fa0a <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800fa04:	2301      	movs	r3, #1
 800fa06:	60fb      	str	r3, [r7, #12]
 800fa08:	e001      	b.n	800fa0e <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800fa0a:	2300      	movs	r3, #0
 800fa0c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800fa0e:	f001 fc39 	bl	8011284 <vPortExitCritical>

	return xReturn;
 800fa12:	68fb      	ldr	r3, [r7, #12]
}
 800fa14:	4618      	mov	r0, r3
 800fa16:	3710      	adds	r7, #16
 800fa18:	46bd      	mov	sp, r7
 800fa1a:	bd80      	pop	{r7, pc}

0800fa1c <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800fa1c:	b580      	push	{r7, lr}
 800fa1e:	b084      	sub	sp, #16
 800fa20:	af00      	add	r7, sp, #0
 800fa22:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800fa24:	f001 fbfe 	bl	8011224 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800fa28:	687b      	ldr	r3, [r7, #4]
 800fa2a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800fa2c:	687b      	ldr	r3, [r7, #4]
 800fa2e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800fa30:	429a      	cmp	r2, r3
 800fa32:	d102      	bne.n	800fa3a <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800fa34:	2301      	movs	r3, #1
 800fa36:	60fb      	str	r3, [r7, #12]
 800fa38:	e001      	b.n	800fa3e <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800fa3a:	2300      	movs	r3, #0
 800fa3c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800fa3e:	f001 fc21 	bl	8011284 <vPortExitCritical>

	return xReturn;
 800fa42:	68fb      	ldr	r3, [r7, #12]
}
 800fa44:	4618      	mov	r0, r3
 800fa46:	3710      	adds	r7, #16
 800fa48:	46bd      	mov	sp, r7
 800fa4a:	bd80      	pop	{r7, pc}

0800fa4c <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800fa4c:	b480      	push	{r7}
 800fa4e:	b085      	sub	sp, #20
 800fa50:	af00      	add	r7, sp, #0
 800fa52:	6078      	str	r0, [r7, #4]
 800fa54:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800fa56:	2300      	movs	r3, #0
 800fa58:	60fb      	str	r3, [r7, #12]
 800fa5a:	e014      	b.n	800fa86 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800fa5c:	4a0f      	ldr	r2, [pc, #60]	; (800fa9c <vQueueAddToRegistry+0x50>)
 800fa5e:	68fb      	ldr	r3, [r7, #12]
 800fa60:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800fa64:	2b00      	cmp	r3, #0
 800fa66:	d10b      	bne.n	800fa80 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800fa68:	490c      	ldr	r1, [pc, #48]	; (800fa9c <vQueueAddToRegistry+0x50>)
 800fa6a:	68fb      	ldr	r3, [r7, #12]
 800fa6c:	683a      	ldr	r2, [r7, #0]
 800fa6e:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800fa72:	4a0a      	ldr	r2, [pc, #40]	; (800fa9c <vQueueAddToRegistry+0x50>)
 800fa74:	68fb      	ldr	r3, [r7, #12]
 800fa76:	00db      	lsls	r3, r3, #3
 800fa78:	4413      	add	r3, r2
 800fa7a:	687a      	ldr	r2, [r7, #4]
 800fa7c:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800fa7e:	e006      	b.n	800fa8e <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800fa80:	68fb      	ldr	r3, [r7, #12]
 800fa82:	3301      	adds	r3, #1
 800fa84:	60fb      	str	r3, [r7, #12]
 800fa86:	68fb      	ldr	r3, [r7, #12]
 800fa88:	2b07      	cmp	r3, #7
 800fa8a:	d9e7      	bls.n	800fa5c <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800fa8c:	bf00      	nop
 800fa8e:	bf00      	nop
 800fa90:	3714      	adds	r7, #20
 800fa92:	46bd      	mov	sp, r7
 800fa94:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa98:	4770      	bx	lr
 800fa9a:	bf00      	nop
 800fa9c:	200054cc 	.word	0x200054cc

0800faa0 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800faa0:	b580      	push	{r7, lr}
 800faa2:	b086      	sub	sp, #24
 800faa4:	af00      	add	r7, sp, #0
 800faa6:	60f8      	str	r0, [r7, #12]
 800faa8:	60b9      	str	r1, [r7, #8]
 800faaa:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800faac:	68fb      	ldr	r3, [r7, #12]
 800faae:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800fab0:	f001 fbb8 	bl	8011224 <vPortEnterCritical>
 800fab4:	697b      	ldr	r3, [r7, #20]
 800fab6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800faba:	b25b      	sxtb	r3, r3
 800fabc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800fac0:	d103      	bne.n	800faca <vQueueWaitForMessageRestricted+0x2a>
 800fac2:	697b      	ldr	r3, [r7, #20]
 800fac4:	2200      	movs	r2, #0
 800fac6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800faca:	697b      	ldr	r3, [r7, #20]
 800facc:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800fad0:	b25b      	sxtb	r3, r3
 800fad2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800fad6:	d103      	bne.n	800fae0 <vQueueWaitForMessageRestricted+0x40>
 800fad8:	697b      	ldr	r3, [r7, #20]
 800fada:	2200      	movs	r2, #0
 800fadc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800fae0:	f001 fbd0 	bl	8011284 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800fae4:	697b      	ldr	r3, [r7, #20]
 800fae6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800fae8:	2b00      	cmp	r3, #0
 800faea:	d106      	bne.n	800fafa <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800faec:	697b      	ldr	r3, [r7, #20]
 800faee:	3324      	adds	r3, #36	; 0x24
 800faf0:	687a      	ldr	r2, [r7, #4]
 800faf2:	68b9      	ldr	r1, [r7, #8]
 800faf4:	4618      	mov	r0, r3
 800faf6:	f000 fc4d 	bl	8010394 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800fafa:	6978      	ldr	r0, [r7, #20]
 800fafc:	f7ff ff26 	bl	800f94c <prvUnlockQueue>
	}
 800fb00:	bf00      	nop
 800fb02:	3718      	adds	r7, #24
 800fb04:	46bd      	mov	sp, r7
 800fb06:	bd80      	pop	{r7, pc}

0800fb08 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800fb08:	b580      	push	{r7, lr}
 800fb0a:	b08e      	sub	sp, #56	; 0x38
 800fb0c:	af04      	add	r7, sp, #16
 800fb0e:	60f8      	str	r0, [r7, #12]
 800fb10:	60b9      	str	r1, [r7, #8]
 800fb12:	607a      	str	r2, [r7, #4]
 800fb14:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800fb16:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fb18:	2b00      	cmp	r3, #0
 800fb1a:	d10a      	bne.n	800fb32 <xTaskCreateStatic+0x2a>
	__asm volatile
 800fb1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fb20:	f383 8811 	msr	BASEPRI, r3
 800fb24:	f3bf 8f6f 	isb	sy
 800fb28:	f3bf 8f4f 	dsb	sy
 800fb2c:	623b      	str	r3, [r7, #32]
}
 800fb2e:	bf00      	nop
 800fb30:	e7fe      	b.n	800fb30 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800fb32:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fb34:	2b00      	cmp	r3, #0
 800fb36:	d10a      	bne.n	800fb4e <xTaskCreateStatic+0x46>
	__asm volatile
 800fb38:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fb3c:	f383 8811 	msr	BASEPRI, r3
 800fb40:	f3bf 8f6f 	isb	sy
 800fb44:	f3bf 8f4f 	dsb	sy
 800fb48:	61fb      	str	r3, [r7, #28]
}
 800fb4a:	bf00      	nop
 800fb4c:	e7fe      	b.n	800fb4c <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800fb4e:	235c      	movs	r3, #92	; 0x5c
 800fb50:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800fb52:	693b      	ldr	r3, [r7, #16]
 800fb54:	2b5c      	cmp	r3, #92	; 0x5c
 800fb56:	d00a      	beq.n	800fb6e <xTaskCreateStatic+0x66>
	__asm volatile
 800fb58:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fb5c:	f383 8811 	msr	BASEPRI, r3
 800fb60:	f3bf 8f6f 	isb	sy
 800fb64:	f3bf 8f4f 	dsb	sy
 800fb68:	61bb      	str	r3, [r7, #24]
}
 800fb6a:	bf00      	nop
 800fb6c:	e7fe      	b.n	800fb6c <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800fb6e:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800fb70:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fb72:	2b00      	cmp	r3, #0
 800fb74:	d01e      	beq.n	800fbb4 <xTaskCreateStatic+0xac>
 800fb76:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fb78:	2b00      	cmp	r3, #0
 800fb7a:	d01b      	beq.n	800fbb4 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800fb7c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fb7e:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800fb80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fb82:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800fb84:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800fb86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fb88:	2202      	movs	r2, #2
 800fb8a:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800fb8e:	2300      	movs	r3, #0
 800fb90:	9303      	str	r3, [sp, #12]
 800fb92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fb94:	9302      	str	r3, [sp, #8]
 800fb96:	f107 0314 	add.w	r3, r7, #20
 800fb9a:	9301      	str	r3, [sp, #4]
 800fb9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fb9e:	9300      	str	r3, [sp, #0]
 800fba0:	683b      	ldr	r3, [r7, #0]
 800fba2:	687a      	ldr	r2, [r7, #4]
 800fba4:	68b9      	ldr	r1, [r7, #8]
 800fba6:	68f8      	ldr	r0, [r7, #12]
 800fba8:	f000 f850 	bl	800fc4c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800fbac:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800fbae:	f000 f8dd 	bl	800fd6c <prvAddNewTaskToReadyList>
 800fbb2:	e001      	b.n	800fbb8 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 800fbb4:	2300      	movs	r3, #0
 800fbb6:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800fbb8:	697b      	ldr	r3, [r7, #20]
	}
 800fbba:	4618      	mov	r0, r3
 800fbbc:	3728      	adds	r7, #40	; 0x28
 800fbbe:	46bd      	mov	sp, r7
 800fbc0:	bd80      	pop	{r7, pc}

0800fbc2 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800fbc2:	b580      	push	{r7, lr}
 800fbc4:	b08c      	sub	sp, #48	; 0x30
 800fbc6:	af04      	add	r7, sp, #16
 800fbc8:	60f8      	str	r0, [r7, #12]
 800fbca:	60b9      	str	r1, [r7, #8]
 800fbcc:	603b      	str	r3, [r7, #0]
 800fbce:	4613      	mov	r3, r2
 800fbd0:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800fbd2:	88fb      	ldrh	r3, [r7, #6]
 800fbd4:	009b      	lsls	r3, r3, #2
 800fbd6:	4618      	mov	r0, r3
 800fbd8:	f001 fc46 	bl	8011468 <pvPortMalloc>
 800fbdc:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800fbde:	697b      	ldr	r3, [r7, #20]
 800fbe0:	2b00      	cmp	r3, #0
 800fbe2:	d00e      	beq.n	800fc02 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800fbe4:	205c      	movs	r0, #92	; 0x5c
 800fbe6:	f001 fc3f 	bl	8011468 <pvPortMalloc>
 800fbea:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800fbec:	69fb      	ldr	r3, [r7, #28]
 800fbee:	2b00      	cmp	r3, #0
 800fbf0:	d003      	beq.n	800fbfa <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800fbf2:	69fb      	ldr	r3, [r7, #28]
 800fbf4:	697a      	ldr	r2, [r7, #20]
 800fbf6:	631a      	str	r2, [r3, #48]	; 0x30
 800fbf8:	e005      	b.n	800fc06 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800fbfa:	6978      	ldr	r0, [r7, #20]
 800fbfc:	f001 fd00 	bl	8011600 <vPortFree>
 800fc00:	e001      	b.n	800fc06 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800fc02:	2300      	movs	r3, #0
 800fc04:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800fc06:	69fb      	ldr	r3, [r7, #28]
 800fc08:	2b00      	cmp	r3, #0
 800fc0a:	d017      	beq.n	800fc3c <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800fc0c:	69fb      	ldr	r3, [r7, #28]
 800fc0e:	2200      	movs	r2, #0
 800fc10:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800fc14:	88fa      	ldrh	r2, [r7, #6]
 800fc16:	2300      	movs	r3, #0
 800fc18:	9303      	str	r3, [sp, #12]
 800fc1a:	69fb      	ldr	r3, [r7, #28]
 800fc1c:	9302      	str	r3, [sp, #8]
 800fc1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fc20:	9301      	str	r3, [sp, #4]
 800fc22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fc24:	9300      	str	r3, [sp, #0]
 800fc26:	683b      	ldr	r3, [r7, #0]
 800fc28:	68b9      	ldr	r1, [r7, #8]
 800fc2a:	68f8      	ldr	r0, [r7, #12]
 800fc2c:	f000 f80e 	bl	800fc4c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800fc30:	69f8      	ldr	r0, [r7, #28]
 800fc32:	f000 f89b 	bl	800fd6c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800fc36:	2301      	movs	r3, #1
 800fc38:	61bb      	str	r3, [r7, #24]
 800fc3a:	e002      	b.n	800fc42 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800fc3c:	f04f 33ff 	mov.w	r3, #4294967295
 800fc40:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800fc42:	69bb      	ldr	r3, [r7, #24]
	}
 800fc44:	4618      	mov	r0, r3
 800fc46:	3720      	adds	r7, #32
 800fc48:	46bd      	mov	sp, r7
 800fc4a:	bd80      	pop	{r7, pc}

0800fc4c <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800fc4c:	b580      	push	{r7, lr}
 800fc4e:	b088      	sub	sp, #32
 800fc50:	af00      	add	r7, sp, #0
 800fc52:	60f8      	str	r0, [r7, #12]
 800fc54:	60b9      	str	r1, [r7, #8]
 800fc56:	607a      	str	r2, [r7, #4]
 800fc58:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800fc5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fc5c:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800fc5e:	687b      	ldr	r3, [r7, #4]
 800fc60:	009b      	lsls	r3, r3, #2
 800fc62:	461a      	mov	r2, r3
 800fc64:	21a5      	movs	r1, #165	; 0xa5
 800fc66:	f002 fb91 	bl	801238c <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800fc6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fc6c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800fc6e:	6879      	ldr	r1, [r7, #4]
 800fc70:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 800fc74:	440b      	add	r3, r1
 800fc76:	009b      	lsls	r3, r3, #2
 800fc78:	4413      	add	r3, r2
 800fc7a:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800fc7c:	69bb      	ldr	r3, [r7, #24]
 800fc7e:	f023 0307 	bic.w	r3, r3, #7
 800fc82:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800fc84:	69bb      	ldr	r3, [r7, #24]
 800fc86:	f003 0307 	and.w	r3, r3, #7
 800fc8a:	2b00      	cmp	r3, #0
 800fc8c:	d00a      	beq.n	800fca4 <prvInitialiseNewTask+0x58>
	__asm volatile
 800fc8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fc92:	f383 8811 	msr	BASEPRI, r3
 800fc96:	f3bf 8f6f 	isb	sy
 800fc9a:	f3bf 8f4f 	dsb	sy
 800fc9e:	617b      	str	r3, [r7, #20]
}
 800fca0:	bf00      	nop
 800fca2:	e7fe      	b.n	800fca2 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800fca4:	68bb      	ldr	r3, [r7, #8]
 800fca6:	2b00      	cmp	r3, #0
 800fca8:	d01f      	beq.n	800fcea <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800fcaa:	2300      	movs	r3, #0
 800fcac:	61fb      	str	r3, [r7, #28]
 800fcae:	e012      	b.n	800fcd6 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800fcb0:	68ba      	ldr	r2, [r7, #8]
 800fcb2:	69fb      	ldr	r3, [r7, #28]
 800fcb4:	4413      	add	r3, r2
 800fcb6:	7819      	ldrb	r1, [r3, #0]
 800fcb8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800fcba:	69fb      	ldr	r3, [r7, #28]
 800fcbc:	4413      	add	r3, r2
 800fcbe:	3334      	adds	r3, #52	; 0x34
 800fcc0:	460a      	mov	r2, r1
 800fcc2:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800fcc4:	68ba      	ldr	r2, [r7, #8]
 800fcc6:	69fb      	ldr	r3, [r7, #28]
 800fcc8:	4413      	add	r3, r2
 800fcca:	781b      	ldrb	r3, [r3, #0]
 800fccc:	2b00      	cmp	r3, #0
 800fcce:	d006      	beq.n	800fcde <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800fcd0:	69fb      	ldr	r3, [r7, #28]
 800fcd2:	3301      	adds	r3, #1
 800fcd4:	61fb      	str	r3, [r7, #28]
 800fcd6:	69fb      	ldr	r3, [r7, #28]
 800fcd8:	2b0f      	cmp	r3, #15
 800fcda:	d9e9      	bls.n	800fcb0 <prvInitialiseNewTask+0x64>
 800fcdc:	e000      	b.n	800fce0 <prvInitialiseNewTask+0x94>
			{
				break;
 800fcde:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800fce0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fce2:	2200      	movs	r2, #0
 800fce4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800fce8:	e003      	b.n	800fcf2 <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800fcea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fcec:	2200      	movs	r2, #0
 800fcee:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800fcf2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fcf4:	2b37      	cmp	r3, #55	; 0x37
 800fcf6:	d901      	bls.n	800fcfc <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800fcf8:	2337      	movs	r3, #55	; 0x37
 800fcfa:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800fcfc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fcfe:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800fd00:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800fd02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fd04:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800fd06:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800fd08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fd0a:	2200      	movs	r2, #0
 800fd0c:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800fd0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fd10:	3304      	adds	r3, #4
 800fd12:	4618      	mov	r0, r3
 800fd14:	f7ff f8be 	bl	800ee94 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800fd18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fd1a:	3318      	adds	r3, #24
 800fd1c:	4618      	mov	r0, r3
 800fd1e:	f7ff f8b9 	bl	800ee94 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800fd22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fd24:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800fd26:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800fd28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fd2a:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800fd2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fd30:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800fd32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fd34:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800fd36:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800fd38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fd3a:	2200      	movs	r2, #0
 800fd3c:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800fd3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fd40:	2200      	movs	r2, #0
 800fd42:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800fd46:	683a      	ldr	r2, [r7, #0]
 800fd48:	68f9      	ldr	r1, [r7, #12]
 800fd4a:	69b8      	ldr	r0, [r7, #24]
 800fd4c:	f001 f93a 	bl	8010fc4 <pxPortInitialiseStack>
 800fd50:	4602      	mov	r2, r0
 800fd52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fd54:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800fd56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fd58:	2b00      	cmp	r3, #0
 800fd5a:	d002      	beq.n	800fd62 <prvInitialiseNewTask+0x116>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800fd5c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fd5e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800fd60:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800fd62:	bf00      	nop
 800fd64:	3720      	adds	r7, #32
 800fd66:	46bd      	mov	sp, r7
 800fd68:	bd80      	pop	{r7, pc}
	...

0800fd6c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800fd6c:	b580      	push	{r7, lr}
 800fd6e:	b082      	sub	sp, #8
 800fd70:	af00      	add	r7, sp, #0
 800fd72:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800fd74:	f001 fa56 	bl	8011224 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800fd78:	4b2d      	ldr	r3, [pc, #180]	; (800fe30 <prvAddNewTaskToReadyList+0xc4>)
 800fd7a:	681b      	ldr	r3, [r3, #0]
 800fd7c:	3301      	adds	r3, #1
 800fd7e:	4a2c      	ldr	r2, [pc, #176]	; (800fe30 <prvAddNewTaskToReadyList+0xc4>)
 800fd80:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800fd82:	4b2c      	ldr	r3, [pc, #176]	; (800fe34 <prvAddNewTaskToReadyList+0xc8>)
 800fd84:	681b      	ldr	r3, [r3, #0]
 800fd86:	2b00      	cmp	r3, #0
 800fd88:	d109      	bne.n	800fd9e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800fd8a:	4a2a      	ldr	r2, [pc, #168]	; (800fe34 <prvAddNewTaskToReadyList+0xc8>)
 800fd8c:	687b      	ldr	r3, [r7, #4]
 800fd8e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800fd90:	4b27      	ldr	r3, [pc, #156]	; (800fe30 <prvAddNewTaskToReadyList+0xc4>)
 800fd92:	681b      	ldr	r3, [r3, #0]
 800fd94:	2b01      	cmp	r3, #1
 800fd96:	d110      	bne.n	800fdba <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800fd98:	f000 fc28 	bl	80105ec <prvInitialiseTaskLists>
 800fd9c:	e00d      	b.n	800fdba <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800fd9e:	4b26      	ldr	r3, [pc, #152]	; (800fe38 <prvAddNewTaskToReadyList+0xcc>)
 800fda0:	681b      	ldr	r3, [r3, #0]
 800fda2:	2b00      	cmp	r3, #0
 800fda4:	d109      	bne.n	800fdba <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800fda6:	4b23      	ldr	r3, [pc, #140]	; (800fe34 <prvAddNewTaskToReadyList+0xc8>)
 800fda8:	681b      	ldr	r3, [r3, #0]
 800fdaa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800fdac:	687b      	ldr	r3, [r7, #4]
 800fdae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fdb0:	429a      	cmp	r2, r3
 800fdb2:	d802      	bhi.n	800fdba <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800fdb4:	4a1f      	ldr	r2, [pc, #124]	; (800fe34 <prvAddNewTaskToReadyList+0xc8>)
 800fdb6:	687b      	ldr	r3, [r7, #4]
 800fdb8:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800fdba:	4b20      	ldr	r3, [pc, #128]	; (800fe3c <prvAddNewTaskToReadyList+0xd0>)
 800fdbc:	681b      	ldr	r3, [r3, #0]
 800fdbe:	3301      	adds	r3, #1
 800fdc0:	4a1e      	ldr	r2, [pc, #120]	; (800fe3c <prvAddNewTaskToReadyList+0xd0>)
 800fdc2:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800fdc4:	4b1d      	ldr	r3, [pc, #116]	; (800fe3c <prvAddNewTaskToReadyList+0xd0>)
 800fdc6:	681a      	ldr	r2, [r3, #0]
 800fdc8:	687b      	ldr	r3, [r7, #4]
 800fdca:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800fdcc:	687b      	ldr	r3, [r7, #4]
 800fdce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800fdd0:	4b1b      	ldr	r3, [pc, #108]	; (800fe40 <prvAddNewTaskToReadyList+0xd4>)
 800fdd2:	681b      	ldr	r3, [r3, #0]
 800fdd4:	429a      	cmp	r2, r3
 800fdd6:	d903      	bls.n	800fde0 <prvAddNewTaskToReadyList+0x74>
 800fdd8:	687b      	ldr	r3, [r7, #4]
 800fdda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fddc:	4a18      	ldr	r2, [pc, #96]	; (800fe40 <prvAddNewTaskToReadyList+0xd4>)
 800fdde:	6013      	str	r3, [r2, #0]
 800fde0:	687b      	ldr	r3, [r7, #4]
 800fde2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800fde4:	4613      	mov	r3, r2
 800fde6:	009b      	lsls	r3, r3, #2
 800fde8:	4413      	add	r3, r2
 800fdea:	009b      	lsls	r3, r3, #2
 800fdec:	4a15      	ldr	r2, [pc, #84]	; (800fe44 <prvAddNewTaskToReadyList+0xd8>)
 800fdee:	441a      	add	r2, r3
 800fdf0:	687b      	ldr	r3, [r7, #4]
 800fdf2:	3304      	adds	r3, #4
 800fdf4:	4619      	mov	r1, r3
 800fdf6:	4610      	mov	r0, r2
 800fdf8:	f7ff f859 	bl	800eeae <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800fdfc:	f001 fa42 	bl	8011284 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800fe00:	4b0d      	ldr	r3, [pc, #52]	; (800fe38 <prvAddNewTaskToReadyList+0xcc>)
 800fe02:	681b      	ldr	r3, [r3, #0]
 800fe04:	2b00      	cmp	r3, #0
 800fe06:	d00e      	beq.n	800fe26 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800fe08:	4b0a      	ldr	r3, [pc, #40]	; (800fe34 <prvAddNewTaskToReadyList+0xc8>)
 800fe0a:	681b      	ldr	r3, [r3, #0]
 800fe0c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800fe0e:	687b      	ldr	r3, [r7, #4]
 800fe10:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fe12:	429a      	cmp	r2, r3
 800fe14:	d207      	bcs.n	800fe26 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800fe16:	4b0c      	ldr	r3, [pc, #48]	; (800fe48 <prvAddNewTaskToReadyList+0xdc>)
 800fe18:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800fe1c:	601a      	str	r2, [r3, #0]
 800fe1e:	f3bf 8f4f 	dsb	sy
 800fe22:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800fe26:	bf00      	nop
 800fe28:	3708      	adds	r7, #8
 800fe2a:	46bd      	mov	sp, r7
 800fe2c:	bd80      	pop	{r7, pc}
 800fe2e:	bf00      	nop
 800fe30:	20000d4c 	.word	0x20000d4c
 800fe34:	20000878 	.word	0x20000878
 800fe38:	20000d58 	.word	0x20000d58
 800fe3c:	20000d68 	.word	0x20000d68
 800fe40:	20000d54 	.word	0x20000d54
 800fe44:	2000087c 	.word	0x2000087c
 800fe48:	e000ed04 	.word	0xe000ed04

0800fe4c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800fe4c:	b580      	push	{r7, lr}
 800fe4e:	b084      	sub	sp, #16
 800fe50:	af00      	add	r7, sp, #0
 800fe52:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800fe54:	2300      	movs	r3, #0
 800fe56:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800fe58:	687b      	ldr	r3, [r7, #4]
 800fe5a:	2b00      	cmp	r3, #0
 800fe5c:	d017      	beq.n	800fe8e <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800fe5e:	4b13      	ldr	r3, [pc, #76]	; (800feac <vTaskDelay+0x60>)
 800fe60:	681b      	ldr	r3, [r3, #0]
 800fe62:	2b00      	cmp	r3, #0
 800fe64:	d00a      	beq.n	800fe7c <vTaskDelay+0x30>
	__asm volatile
 800fe66:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fe6a:	f383 8811 	msr	BASEPRI, r3
 800fe6e:	f3bf 8f6f 	isb	sy
 800fe72:	f3bf 8f4f 	dsb	sy
 800fe76:	60bb      	str	r3, [r7, #8]
}
 800fe78:	bf00      	nop
 800fe7a:	e7fe      	b.n	800fe7a <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800fe7c:	f000 f880 	bl	800ff80 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800fe80:	2100      	movs	r1, #0
 800fe82:	6878      	ldr	r0, [r7, #4]
 800fe84:	f000 fcfc 	bl	8010880 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800fe88:	f000 f888 	bl	800ff9c <xTaskResumeAll>
 800fe8c:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800fe8e:	68fb      	ldr	r3, [r7, #12]
 800fe90:	2b00      	cmp	r3, #0
 800fe92:	d107      	bne.n	800fea4 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 800fe94:	4b06      	ldr	r3, [pc, #24]	; (800feb0 <vTaskDelay+0x64>)
 800fe96:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800fe9a:	601a      	str	r2, [r3, #0]
 800fe9c:	f3bf 8f4f 	dsb	sy
 800fea0:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800fea4:	bf00      	nop
 800fea6:	3710      	adds	r7, #16
 800fea8:	46bd      	mov	sp, r7
 800feaa:	bd80      	pop	{r7, pc}
 800feac:	20000d74 	.word	0x20000d74
 800feb0:	e000ed04 	.word	0xe000ed04

0800feb4 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800feb4:	b580      	push	{r7, lr}
 800feb6:	b08a      	sub	sp, #40	; 0x28
 800feb8:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800feba:	2300      	movs	r3, #0
 800febc:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800febe:	2300      	movs	r3, #0
 800fec0:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800fec2:	463a      	mov	r2, r7
 800fec4:	1d39      	adds	r1, r7, #4
 800fec6:	f107 0308 	add.w	r3, r7, #8
 800feca:	4618      	mov	r0, r3
 800fecc:	f7fe ff8e 	bl	800edec <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800fed0:	6839      	ldr	r1, [r7, #0]
 800fed2:	687b      	ldr	r3, [r7, #4]
 800fed4:	68ba      	ldr	r2, [r7, #8]
 800fed6:	9202      	str	r2, [sp, #8]
 800fed8:	9301      	str	r3, [sp, #4]
 800feda:	2300      	movs	r3, #0
 800fedc:	9300      	str	r3, [sp, #0]
 800fede:	2300      	movs	r3, #0
 800fee0:	460a      	mov	r2, r1
 800fee2:	4921      	ldr	r1, [pc, #132]	; (800ff68 <vTaskStartScheduler+0xb4>)
 800fee4:	4821      	ldr	r0, [pc, #132]	; (800ff6c <vTaskStartScheduler+0xb8>)
 800fee6:	f7ff fe0f 	bl	800fb08 <xTaskCreateStatic>
 800feea:	4603      	mov	r3, r0
 800feec:	4a20      	ldr	r2, [pc, #128]	; (800ff70 <vTaskStartScheduler+0xbc>)
 800feee:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800fef0:	4b1f      	ldr	r3, [pc, #124]	; (800ff70 <vTaskStartScheduler+0xbc>)
 800fef2:	681b      	ldr	r3, [r3, #0]
 800fef4:	2b00      	cmp	r3, #0
 800fef6:	d002      	beq.n	800fefe <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800fef8:	2301      	movs	r3, #1
 800fefa:	617b      	str	r3, [r7, #20]
 800fefc:	e001      	b.n	800ff02 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800fefe:	2300      	movs	r3, #0
 800ff00:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800ff02:	697b      	ldr	r3, [r7, #20]
 800ff04:	2b01      	cmp	r3, #1
 800ff06:	d102      	bne.n	800ff0e <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800ff08:	f000 fd0e 	bl	8010928 <xTimerCreateTimerTask>
 800ff0c:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800ff0e:	697b      	ldr	r3, [r7, #20]
 800ff10:	2b01      	cmp	r3, #1
 800ff12:	d116      	bne.n	800ff42 <vTaskStartScheduler+0x8e>
	__asm volatile
 800ff14:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ff18:	f383 8811 	msr	BASEPRI, r3
 800ff1c:	f3bf 8f6f 	isb	sy
 800ff20:	f3bf 8f4f 	dsb	sy
 800ff24:	613b      	str	r3, [r7, #16]
}
 800ff26:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800ff28:	4b12      	ldr	r3, [pc, #72]	; (800ff74 <vTaskStartScheduler+0xc0>)
 800ff2a:	f04f 32ff 	mov.w	r2, #4294967295
 800ff2e:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800ff30:	4b11      	ldr	r3, [pc, #68]	; (800ff78 <vTaskStartScheduler+0xc4>)
 800ff32:	2201      	movs	r2, #1
 800ff34:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800ff36:	4b11      	ldr	r3, [pc, #68]	; (800ff7c <vTaskStartScheduler+0xc8>)
 800ff38:	2200      	movs	r2, #0
 800ff3a:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800ff3c:	f001 f8d0 	bl	80110e0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800ff40:	e00e      	b.n	800ff60 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800ff42:	697b      	ldr	r3, [r7, #20]
 800ff44:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ff48:	d10a      	bne.n	800ff60 <vTaskStartScheduler+0xac>
	__asm volatile
 800ff4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ff4e:	f383 8811 	msr	BASEPRI, r3
 800ff52:	f3bf 8f6f 	isb	sy
 800ff56:	f3bf 8f4f 	dsb	sy
 800ff5a:	60fb      	str	r3, [r7, #12]
}
 800ff5c:	bf00      	nop
 800ff5e:	e7fe      	b.n	800ff5e <vTaskStartScheduler+0xaa>
}
 800ff60:	bf00      	nop
 800ff62:	3718      	adds	r7, #24
 800ff64:	46bd      	mov	sp, r7
 800ff66:	bd80      	pop	{r7, pc}
 800ff68:	0801240c 	.word	0x0801240c
 800ff6c:	080105bd 	.word	0x080105bd
 800ff70:	20000d70 	.word	0x20000d70
 800ff74:	20000d6c 	.word	0x20000d6c
 800ff78:	20000d58 	.word	0x20000d58
 800ff7c:	20000d50 	.word	0x20000d50

0800ff80 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800ff80:	b480      	push	{r7}
 800ff82:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800ff84:	4b04      	ldr	r3, [pc, #16]	; (800ff98 <vTaskSuspendAll+0x18>)
 800ff86:	681b      	ldr	r3, [r3, #0]
 800ff88:	3301      	adds	r3, #1
 800ff8a:	4a03      	ldr	r2, [pc, #12]	; (800ff98 <vTaskSuspendAll+0x18>)
 800ff8c:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800ff8e:	bf00      	nop
 800ff90:	46bd      	mov	sp, r7
 800ff92:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff96:	4770      	bx	lr
 800ff98:	20000d74 	.word	0x20000d74

0800ff9c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800ff9c:	b580      	push	{r7, lr}
 800ff9e:	b084      	sub	sp, #16
 800ffa0:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800ffa2:	2300      	movs	r3, #0
 800ffa4:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800ffa6:	2300      	movs	r3, #0
 800ffa8:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800ffaa:	4b42      	ldr	r3, [pc, #264]	; (80100b4 <xTaskResumeAll+0x118>)
 800ffac:	681b      	ldr	r3, [r3, #0]
 800ffae:	2b00      	cmp	r3, #0
 800ffb0:	d10a      	bne.n	800ffc8 <xTaskResumeAll+0x2c>
	__asm volatile
 800ffb2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ffb6:	f383 8811 	msr	BASEPRI, r3
 800ffba:	f3bf 8f6f 	isb	sy
 800ffbe:	f3bf 8f4f 	dsb	sy
 800ffc2:	603b      	str	r3, [r7, #0]
}
 800ffc4:	bf00      	nop
 800ffc6:	e7fe      	b.n	800ffc6 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800ffc8:	f001 f92c 	bl	8011224 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800ffcc:	4b39      	ldr	r3, [pc, #228]	; (80100b4 <xTaskResumeAll+0x118>)
 800ffce:	681b      	ldr	r3, [r3, #0]
 800ffd0:	3b01      	subs	r3, #1
 800ffd2:	4a38      	ldr	r2, [pc, #224]	; (80100b4 <xTaskResumeAll+0x118>)
 800ffd4:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800ffd6:	4b37      	ldr	r3, [pc, #220]	; (80100b4 <xTaskResumeAll+0x118>)
 800ffd8:	681b      	ldr	r3, [r3, #0]
 800ffda:	2b00      	cmp	r3, #0
 800ffdc:	d162      	bne.n	80100a4 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800ffde:	4b36      	ldr	r3, [pc, #216]	; (80100b8 <xTaskResumeAll+0x11c>)
 800ffe0:	681b      	ldr	r3, [r3, #0]
 800ffe2:	2b00      	cmp	r3, #0
 800ffe4:	d05e      	beq.n	80100a4 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800ffe6:	e02f      	b.n	8010048 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ffe8:	4b34      	ldr	r3, [pc, #208]	; (80100bc <xTaskResumeAll+0x120>)
 800ffea:	68db      	ldr	r3, [r3, #12]
 800ffec:	68db      	ldr	r3, [r3, #12]
 800ffee:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800fff0:	68fb      	ldr	r3, [r7, #12]
 800fff2:	3318      	adds	r3, #24
 800fff4:	4618      	mov	r0, r3
 800fff6:	f7fe ffb7 	bl	800ef68 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800fffa:	68fb      	ldr	r3, [r7, #12]
 800fffc:	3304      	adds	r3, #4
 800fffe:	4618      	mov	r0, r3
 8010000:	f7fe ffb2 	bl	800ef68 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8010004:	68fb      	ldr	r3, [r7, #12]
 8010006:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010008:	4b2d      	ldr	r3, [pc, #180]	; (80100c0 <xTaskResumeAll+0x124>)
 801000a:	681b      	ldr	r3, [r3, #0]
 801000c:	429a      	cmp	r2, r3
 801000e:	d903      	bls.n	8010018 <xTaskResumeAll+0x7c>
 8010010:	68fb      	ldr	r3, [r7, #12]
 8010012:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010014:	4a2a      	ldr	r2, [pc, #168]	; (80100c0 <xTaskResumeAll+0x124>)
 8010016:	6013      	str	r3, [r2, #0]
 8010018:	68fb      	ldr	r3, [r7, #12]
 801001a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801001c:	4613      	mov	r3, r2
 801001e:	009b      	lsls	r3, r3, #2
 8010020:	4413      	add	r3, r2
 8010022:	009b      	lsls	r3, r3, #2
 8010024:	4a27      	ldr	r2, [pc, #156]	; (80100c4 <xTaskResumeAll+0x128>)
 8010026:	441a      	add	r2, r3
 8010028:	68fb      	ldr	r3, [r7, #12]
 801002a:	3304      	adds	r3, #4
 801002c:	4619      	mov	r1, r3
 801002e:	4610      	mov	r0, r2
 8010030:	f7fe ff3d 	bl	800eeae <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8010034:	68fb      	ldr	r3, [r7, #12]
 8010036:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010038:	4b23      	ldr	r3, [pc, #140]	; (80100c8 <xTaskResumeAll+0x12c>)
 801003a:	681b      	ldr	r3, [r3, #0]
 801003c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801003e:	429a      	cmp	r2, r3
 8010040:	d302      	bcc.n	8010048 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8010042:	4b22      	ldr	r3, [pc, #136]	; (80100cc <xTaskResumeAll+0x130>)
 8010044:	2201      	movs	r2, #1
 8010046:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8010048:	4b1c      	ldr	r3, [pc, #112]	; (80100bc <xTaskResumeAll+0x120>)
 801004a:	681b      	ldr	r3, [r3, #0]
 801004c:	2b00      	cmp	r3, #0
 801004e:	d1cb      	bne.n	800ffe8 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8010050:	68fb      	ldr	r3, [r7, #12]
 8010052:	2b00      	cmp	r3, #0
 8010054:	d001      	beq.n	801005a <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8010056:	f000 fb67 	bl	8010728 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 801005a:	4b1d      	ldr	r3, [pc, #116]	; (80100d0 <xTaskResumeAll+0x134>)
 801005c:	681b      	ldr	r3, [r3, #0]
 801005e:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8010060:	687b      	ldr	r3, [r7, #4]
 8010062:	2b00      	cmp	r3, #0
 8010064:	d010      	beq.n	8010088 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8010066:	f000 f859 	bl	801011c <xTaskIncrementTick>
 801006a:	4603      	mov	r3, r0
 801006c:	2b00      	cmp	r3, #0
 801006e:	d002      	beq.n	8010076 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8010070:	4b16      	ldr	r3, [pc, #88]	; (80100cc <xTaskResumeAll+0x130>)
 8010072:	2201      	movs	r2, #1
 8010074:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8010076:	687b      	ldr	r3, [r7, #4]
 8010078:	3b01      	subs	r3, #1
 801007a:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 801007c:	687b      	ldr	r3, [r7, #4]
 801007e:	2b00      	cmp	r3, #0
 8010080:	d1f1      	bne.n	8010066 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8010082:	4b13      	ldr	r3, [pc, #76]	; (80100d0 <xTaskResumeAll+0x134>)
 8010084:	2200      	movs	r2, #0
 8010086:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8010088:	4b10      	ldr	r3, [pc, #64]	; (80100cc <xTaskResumeAll+0x130>)
 801008a:	681b      	ldr	r3, [r3, #0]
 801008c:	2b00      	cmp	r3, #0
 801008e:	d009      	beq.n	80100a4 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8010090:	2301      	movs	r3, #1
 8010092:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8010094:	4b0f      	ldr	r3, [pc, #60]	; (80100d4 <xTaskResumeAll+0x138>)
 8010096:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801009a:	601a      	str	r2, [r3, #0]
 801009c:	f3bf 8f4f 	dsb	sy
 80100a0:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80100a4:	f001 f8ee 	bl	8011284 <vPortExitCritical>

	return xAlreadyYielded;
 80100a8:	68bb      	ldr	r3, [r7, #8]
}
 80100aa:	4618      	mov	r0, r3
 80100ac:	3710      	adds	r7, #16
 80100ae:	46bd      	mov	sp, r7
 80100b0:	bd80      	pop	{r7, pc}
 80100b2:	bf00      	nop
 80100b4:	20000d74 	.word	0x20000d74
 80100b8:	20000d4c 	.word	0x20000d4c
 80100bc:	20000d0c 	.word	0x20000d0c
 80100c0:	20000d54 	.word	0x20000d54
 80100c4:	2000087c 	.word	0x2000087c
 80100c8:	20000878 	.word	0x20000878
 80100cc:	20000d60 	.word	0x20000d60
 80100d0:	20000d5c 	.word	0x20000d5c
 80100d4:	e000ed04 	.word	0xe000ed04

080100d8 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80100d8:	b480      	push	{r7}
 80100da:	b083      	sub	sp, #12
 80100dc:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 80100de:	4b05      	ldr	r3, [pc, #20]	; (80100f4 <xTaskGetTickCount+0x1c>)
 80100e0:	681b      	ldr	r3, [r3, #0]
 80100e2:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 80100e4:	687b      	ldr	r3, [r7, #4]
}
 80100e6:	4618      	mov	r0, r3
 80100e8:	370c      	adds	r7, #12
 80100ea:	46bd      	mov	sp, r7
 80100ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80100f0:	4770      	bx	lr
 80100f2:	bf00      	nop
 80100f4:	20000d50 	.word	0x20000d50

080100f8 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 80100f8:	b580      	push	{r7, lr}
 80100fa:	b082      	sub	sp, #8
 80100fc:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80100fe:	f001 f973 	bl	80113e8 <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 8010102:	2300      	movs	r3, #0
 8010104:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 8010106:	4b04      	ldr	r3, [pc, #16]	; (8010118 <xTaskGetTickCountFromISR+0x20>)
 8010108:	681b      	ldr	r3, [r3, #0]
 801010a:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 801010c:	683b      	ldr	r3, [r7, #0]
}
 801010e:	4618      	mov	r0, r3
 8010110:	3708      	adds	r7, #8
 8010112:	46bd      	mov	sp, r7
 8010114:	bd80      	pop	{r7, pc}
 8010116:	bf00      	nop
 8010118:	20000d50 	.word	0x20000d50

0801011c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 801011c:	b580      	push	{r7, lr}
 801011e:	b086      	sub	sp, #24
 8010120:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8010122:	2300      	movs	r3, #0
 8010124:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8010126:	4b4f      	ldr	r3, [pc, #316]	; (8010264 <xTaskIncrementTick+0x148>)
 8010128:	681b      	ldr	r3, [r3, #0]
 801012a:	2b00      	cmp	r3, #0
 801012c:	f040 808f 	bne.w	801024e <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8010130:	4b4d      	ldr	r3, [pc, #308]	; (8010268 <xTaskIncrementTick+0x14c>)
 8010132:	681b      	ldr	r3, [r3, #0]
 8010134:	3301      	adds	r3, #1
 8010136:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8010138:	4a4b      	ldr	r2, [pc, #300]	; (8010268 <xTaskIncrementTick+0x14c>)
 801013a:	693b      	ldr	r3, [r7, #16]
 801013c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 801013e:	693b      	ldr	r3, [r7, #16]
 8010140:	2b00      	cmp	r3, #0
 8010142:	d120      	bne.n	8010186 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8010144:	4b49      	ldr	r3, [pc, #292]	; (801026c <xTaskIncrementTick+0x150>)
 8010146:	681b      	ldr	r3, [r3, #0]
 8010148:	681b      	ldr	r3, [r3, #0]
 801014a:	2b00      	cmp	r3, #0
 801014c:	d00a      	beq.n	8010164 <xTaskIncrementTick+0x48>
	__asm volatile
 801014e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010152:	f383 8811 	msr	BASEPRI, r3
 8010156:	f3bf 8f6f 	isb	sy
 801015a:	f3bf 8f4f 	dsb	sy
 801015e:	603b      	str	r3, [r7, #0]
}
 8010160:	bf00      	nop
 8010162:	e7fe      	b.n	8010162 <xTaskIncrementTick+0x46>
 8010164:	4b41      	ldr	r3, [pc, #260]	; (801026c <xTaskIncrementTick+0x150>)
 8010166:	681b      	ldr	r3, [r3, #0]
 8010168:	60fb      	str	r3, [r7, #12]
 801016a:	4b41      	ldr	r3, [pc, #260]	; (8010270 <xTaskIncrementTick+0x154>)
 801016c:	681b      	ldr	r3, [r3, #0]
 801016e:	4a3f      	ldr	r2, [pc, #252]	; (801026c <xTaskIncrementTick+0x150>)
 8010170:	6013      	str	r3, [r2, #0]
 8010172:	4a3f      	ldr	r2, [pc, #252]	; (8010270 <xTaskIncrementTick+0x154>)
 8010174:	68fb      	ldr	r3, [r7, #12]
 8010176:	6013      	str	r3, [r2, #0]
 8010178:	4b3e      	ldr	r3, [pc, #248]	; (8010274 <xTaskIncrementTick+0x158>)
 801017a:	681b      	ldr	r3, [r3, #0]
 801017c:	3301      	adds	r3, #1
 801017e:	4a3d      	ldr	r2, [pc, #244]	; (8010274 <xTaskIncrementTick+0x158>)
 8010180:	6013      	str	r3, [r2, #0]
 8010182:	f000 fad1 	bl	8010728 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8010186:	4b3c      	ldr	r3, [pc, #240]	; (8010278 <xTaskIncrementTick+0x15c>)
 8010188:	681b      	ldr	r3, [r3, #0]
 801018a:	693a      	ldr	r2, [r7, #16]
 801018c:	429a      	cmp	r2, r3
 801018e:	d349      	bcc.n	8010224 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8010190:	4b36      	ldr	r3, [pc, #216]	; (801026c <xTaskIncrementTick+0x150>)
 8010192:	681b      	ldr	r3, [r3, #0]
 8010194:	681b      	ldr	r3, [r3, #0]
 8010196:	2b00      	cmp	r3, #0
 8010198:	d104      	bne.n	80101a4 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801019a:	4b37      	ldr	r3, [pc, #220]	; (8010278 <xTaskIncrementTick+0x15c>)
 801019c:	f04f 32ff 	mov.w	r2, #4294967295
 80101a0:	601a      	str	r2, [r3, #0]
					break;
 80101a2:	e03f      	b.n	8010224 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80101a4:	4b31      	ldr	r3, [pc, #196]	; (801026c <xTaskIncrementTick+0x150>)
 80101a6:	681b      	ldr	r3, [r3, #0]
 80101a8:	68db      	ldr	r3, [r3, #12]
 80101aa:	68db      	ldr	r3, [r3, #12]
 80101ac:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80101ae:	68bb      	ldr	r3, [r7, #8]
 80101b0:	685b      	ldr	r3, [r3, #4]
 80101b2:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80101b4:	693a      	ldr	r2, [r7, #16]
 80101b6:	687b      	ldr	r3, [r7, #4]
 80101b8:	429a      	cmp	r2, r3
 80101ba:	d203      	bcs.n	80101c4 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80101bc:	4a2e      	ldr	r2, [pc, #184]	; (8010278 <xTaskIncrementTick+0x15c>)
 80101be:	687b      	ldr	r3, [r7, #4]
 80101c0:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80101c2:	e02f      	b.n	8010224 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80101c4:	68bb      	ldr	r3, [r7, #8]
 80101c6:	3304      	adds	r3, #4
 80101c8:	4618      	mov	r0, r3
 80101ca:	f7fe fecd 	bl	800ef68 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80101ce:	68bb      	ldr	r3, [r7, #8]
 80101d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80101d2:	2b00      	cmp	r3, #0
 80101d4:	d004      	beq.n	80101e0 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80101d6:	68bb      	ldr	r3, [r7, #8]
 80101d8:	3318      	adds	r3, #24
 80101da:	4618      	mov	r0, r3
 80101dc:	f7fe fec4 	bl	800ef68 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80101e0:	68bb      	ldr	r3, [r7, #8]
 80101e2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80101e4:	4b25      	ldr	r3, [pc, #148]	; (801027c <xTaskIncrementTick+0x160>)
 80101e6:	681b      	ldr	r3, [r3, #0]
 80101e8:	429a      	cmp	r2, r3
 80101ea:	d903      	bls.n	80101f4 <xTaskIncrementTick+0xd8>
 80101ec:	68bb      	ldr	r3, [r7, #8]
 80101ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80101f0:	4a22      	ldr	r2, [pc, #136]	; (801027c <xTaskIncrementTick+0x160>)
 80101f2:	6013      	str	r3, [r2, #0]
 80101f4:	68bb      	ldr	r3, [r7, #8]
 80101f6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80101f8:	4613      	mov	r3, r2
 80101fa:	009b      	lsls	r3, r3, #2
 80101fc:	4413      	add	r3, r2
 80101fe:	009b      	lsls	r3, r3, #2
 8010200:	4a1f      	ldr	r2, [pc, #124]	; (8010280 <xTaskIncrementTick+0x164>)
 8010202:	441a      	add	r2, r3
 8010204:	68bb      	ldr	r3, [r7, #8]
 8010206:	3304      	adds	r3, #4
 8010208:	4619      	mov	r1, r3
 801020a:	4610      	mov	r0, r2
 801020c:	f7fe fe4f 	bl	800eeae <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8010210:	68bb      	ldr	r3, [r7, #8]
 8010212:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010214:	4b1b      	ldr	r3, [pc, #108]	; (8010284 <xTaskIncrementTick+0x168>)
 8010216:	681b      	ldr	r3, [r3, #0]
 8010218:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801021a:	429a      	cmp	r2, r3
 801021c:	d3b8      	bcc.n	8010190 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 801021e:	2301      	movs	r3, #1
 8010220:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8010222:	e7b5      	b.n	8010190 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8010224:	4b17      	ldr	r3, [pc, #92]	; (8010284 <xTaskIncrementTick+0x168>)
 8010226:	681b      	ldr	r3, [r3, #0]
 8010228:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801022a:	4915      	ldr	r1, [pc, #84]	; (8010280 <xTaskIncrementTick+0x164>)
 801022c:	4613      	mov	r3, r2
 801022e:	009b      	lsls	r3, r3, #2
 8010230:	4413      	add	r3, r2
 8010232:	009b      	lsls	r3, r3, #2
 8010234:	440b      	add	r3, r1
 8010236:	681b      	ldr	r3, [r3, #0]
 8010238:	2b01      	cmp	r3, #1
 801023a:	d901      	bls.n	8010240 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 801023c:	2301      	movs	r3, #1
 801023e:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8010240:	4b11      	ldr	r3, [pc, #68]	; (8010288 <xTaskIncrementTick+0x16c>)
 8010242:	681b      	ldr	r3, [r3, #0]
 8010244:	2b00      	cmp	r3, #0
 8010246:	d007      	beq.n	8010258 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8010248:	2301      	movs	r3, #1
 801024a:	617b      	str	r3, [r7, #20]
 801024c:	e004      	b.n	8010258 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 801024e:	4b0f      	ldr	r3, [pc, #60]	; (801028c <xTaskIncrementTick+0x170>)
 8010250:	681b      	ldr	r3, [r3, #0]
 8010252:	3301      	adds	r3, #1
 8010254:	4a0d      	ldr	r2, [pc, #52]	; (801028c <xTaskIncrementTick+0x170>)
 8010256:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8010258:	697b      	ldr	r3, [r7, #20]
}
 801025a:	4618      	mov	r0, r3
 801025c:	3718      	adds	r7, #24
 801025e:	46bd      	mov	sp, r7
 8010260:	bd80      	pop	{r7, pc}
 8010262:	bf00      	nop
 8010264:	20000d74 	.word	0x20000d74
 8010268:	20000d50 	.word	0x20000d50
 801026c:	20000d04 	.word	0x20000d04
 8010270:	20000d08 	.word	0x20000d08
 8010274:	20000d64 	.word	0x20000d64
 8010278:	20000d6c 	.word	0x20000d6c
 801027c:	20000d54 	.word	0x20000d54
 8010280:	2000087c 	.word	0x2000087c
 8010284:	20000878 	.word	0x20000878
 8010288:	20000d60 	.word	0x20000d60
 801028c:	20000d5c 	.word	0x20000d5c

08010290 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8010290:	b480      	push	{r7}
 8010292:	b085      	sub	sp, #20
 8010294:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8010296:	4b28      	ldr	r3, [pc, #160]	; (8010338 <vTaskSwitchContext+0xa8>)
 8010298:	681b      	ldr	r3, [r3, #0]
 801029a:	2b00      	cmp	r3, #0
 801029c:	d003      	beq.n	80102a6 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 801029e:	4b27      	ldr	r3, [pc, #156]	; (801033c <vTaskSwitchContext+0xac>)
 80102a0:	2201      	movs	r2, #1
 80102a2:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80102a4:	e041      	b.n	801032a <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 80102a6:	4b25      	ldr	r3, [pc, #148]	; (801033c <vTaskSwitchContext+0xac>)
 80102a8:	2200      	movs	r2, #0
 80102aa:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80102ac:	4b24      	ldr	r3, [pc, #144]	; (8010340 <vTaskSwitchContext+0xb0>)
 80102ae:	681b      	ldr	r3, [r3, #0]
 80102b0:	60fb      	str	r3, [r7, #12]
 80102b2:	e010      	b.n	80102d6 <vTaskSwitchContext+0x46>
 80102b4:	68fb      	ldr	r3, [r7, #12]
 80102b6:	2b00      	cmp	r3, #0
 80102b8:	d10a      	bne.n	80102d0 <vTaskSwitchContext+0x40>
	__asm volatile
 80102ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80102be:	f383 8811 	msr	BASEPRI, r3
 80102c2:	f3bf 8f6f 	isb	sy
 80102c6:	f3bf 8f4f 	dsb	sy
 80102ca:	607b      	str	r3, [r7, #4]
}
 80102cc:	bf00      	nop
 80102ce:	e7fe      	b.n	80102ce <vTaskSwitchContext+0x3e>
 80102d0:	68fb      	ldr	r3, [r7, #12]
 80102d2:	3b01      	subs	r3, #1
 80102d4:	60fb      	str	r3, [r7, #12]
 80102d6:	491b      	ldr	r1, [pc, #108]	; (8010344 <vTaskSwitchContext+0xb4>)
 80102d8:	68fa      	ldr	r2, [r7, #12]
 80102da:	4613      	mov	r3, r2
 80102dc:	009b      	lsls	r3, r3, #2
 80102de:	4413      	add	r3, r2
 80102e0:	009b      	lsls	r3, r3, #2
 80102e2:	440b      	add	r3, r1
 80102e4:	681b      	ldr	r3, [r3, #0]
 80102e6:	2b00      	cmp	r3, #0
 80102e8:	d0e4      	beq.n	80102b4 <vTaskSwitchContext+0x24>
 80102ea:	68fa      	ldr	r2, [r7, #12]
 80102ec:	4613      	mov	r3, r2
 80102ee:	009b      	lsls	r3, r3, #2
 80102f0:	4413      	add	r3, r2
 80102f2:	009b      	lsls	r3, r3, #2
 80102f4:	4a13      	ldr	r2, [pc, #76]	; (8010344 <vTaskSwitchContext+0xb4>)
 80102f6:	4413      	add	r3, r2
 80102f8:	60bb      	str	r3, [r7, #8]
 80102fa:	68bb      	ldr	r3, [r7, #8]
 80102fc:	685b      	ldr	r3, [r3, #4]
 80102fe:	685a      	ldr	r2, [r3, #4]
 8010300:	68bb      	ldr	r3, [r7, #8]
 8010302:	605a      	str	r2, [r3, #4]
 8010304:	68bb      	ldr	r3, [r7, #8]
 8010306:	685a      	ldr	r2, [r3, #4]
 8010308:	68bb      	ldr	r3, [r7, #8]
 801030a:	3308      	adds	r3, #8
 801030c:	429a      	cmp	r2, r3
 801030e:	d104      	bne.n	801031a <vTaskSwitchContext+0x8a>
 8010310:	68bb      	ldr	r3, [r7, #8]
 8010312:	685b      	ldr	r3, [r3, #4]
 8010314:	685a      	ldr	r2, [r3, #4]
 8010316:	68bb      	ldr	r3, [r7, #8]
 8010318:	605a      	str	r2, [r3, #4]
 801031a:	68bb      	ldr	r3, [r7, #8]
 801031c:	685b      	ldr	r3, [r3, #4]
 801031e:	68db      	ldr	r3, [r3, #12]
 8010320:	4a09      	ldr	r2, [pc, #36]	; (8010348 <vTaskSwitchContext+0xb8>)
 8010322:	6013      	str	r3, [r2, #0]
 8010324:	4a06      	ldr	r2, [pc, #24]	; (8010340 <vTaskSwitchContext+0xb0>)
 8010326:	68fb      	ldr	r3, [r7, #12]
 8010328:	6013      	str	r3, [r2, #0]
}
 801032a:	bf00      	nop
 801032c:	3714      	adds	r7, #20
 801032e:	46bd      	mov	sp, r7
 8010330:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010334:	4770      	bx	lr
 8010336:	bf00      	nop
 8010338:	20000d74 	.word	0x20000d74
 801033c:	20000d60 	.word	0x20000d60
 8010340:	20000d54 	.word	0x20000d54
 8010344:	2000087c 	.word	0x2000087c
 8010348:	20000878 	.word	0x20000878

0801034c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 801034c:	b580      	push	{r7, lr}
 801034e:	b084      	sub	sp, #16
 8010350:	af00      	add	r7, sp, #0
 8010352:	6078      	str	r0, [r7, #4]
 8010354:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8010356:	687b      	ldr	r3, [r7, #4]
 8010358:	2b00      	cmp	r3, #0
 801035a:	d10a      	bne.n	8010372 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 801035c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010360:	f383 8811 	msr	BASEPRI, r3
 8010364:	f3bf 8f6f 	isb	sy
 8010368:	f3bf 8f4f 	dsb	sy
 801036c:	60fb      	str	r3, [r7, #12]
}
 801036e:	bf00      	nop
 8010370:	e7fe      	b.n	8010370 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8010372:	4b07      	ldr	r3, [pc, #28]	; (8010390 <vTaskPlaceOnEventList+0x44>)
 8010374:	681b      	ldr	r3, [r3, #0]
 8010376:	3318      	adds	r3, #24
 8010378:	4619      	mov	r1, r3
 801037a:	6878      	ldr	r0, [r7, #4]
 801037c:	f7fe fdbb 	bl	800eef6 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8010380:	2101      	movs	r1, #1
 8010382:	6838      	ldr	r0, [r7, #0]
 8010384:	f000 fa7c 	bl	8010880 <prvAddCurrentTaskToDelayedList>
}
 8010388:	bf00      	nop
 801038a:	3710      	adds	r7, #16
 801038c:	46bd      	mov	sp, r7
 801038e:	bd80      	pop	{r7, pc}
 8010390:	20000878 	.word	0x20000878

08010394 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8010394:	b580      	push	{r7, lr}
 8010396:	b086      	sub	sp, #24
 8010398:	af00      	add	r7, sp, #0
 801039a:	60f8      	str	r0, [r7, #12]
 801039c:	60b9      	str	r1, [r7, #8]
 801039e:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 80103a0:	68fb      	ldr	r3, [r7, #12]
 80103a2:	2b00      	cmp	r3, #0
 80103a4:	d10a      	bne.n	80103bc <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 80103a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80103aa:	f383 8811 	msr	BASEPRI, r3
 80103ae:	f3bf 8f6f 	isb	sy
 80103b2:	f3bf 8f4f 	dsb	sy
 80103b6:	617b      	str	r3, [r7, #20]
}
 80103b8:	bf00      	nop
 80103ba:	e7fe      	b.n	80103ba <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80103bc:	4b0a      	ldr	r3, [pc, #40]	; (80103e8 <vTaskPlaceOnEventListRestricted+0x54>)
 80103be:	681b      	ldr	r3, [r3, #0]
 80103c0:	3318      	adds	r3, #24
 80103c2:	4619      	mov	r1, r3
 80103c4:	68f8      	ldr	r0, [r7, #12]
 80103c6:	f7fe fd72 	bl	800eeae <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 80103ca:	687b      	ldr	r3, [r7, #4]
 80103cc:	2b00      	cmp	r3, #0
 80103ce:	d002      	beq.n	80103d6 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 80103d0:	f04f 33ff 	mov.w	r3, #4294967295
 80103d4:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80103d6:	6879      	ldr	r1, [r7, #4]
 80103d8:	68b8      	ldr	r0, [r7, #8]
 80103da:	f000 fa51 	bl	8010880 <prvAddCurrentTaskToDelayedList>
	}
 80103de:	bf00      	nop
 80103e0:	3718      	adds	r7, #24
 80103e2:	46bd      	mov	sp, r7
 80103e4:	bd80      	pop	{r7, pc}
 80103e6:	bf00      	nop
 80103e8:	20000878 	.word	0x20000878

080103ec <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80103ec:	b580      	push	{r7, lr}
 80103ee:	b086      	sub	sp, #24
 80103f0:	af00      	add	r7, sp, #0
 80103f2:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80103f4:	687b      	ldr	r3, [r7, #4]
 80103f6:	68db      	ldr	r3, [r3, #12]
 80103f8:	68db      	ldr	r3, [r3, #12]
 80103fa:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80103fc:	693b      	ldr	r3, [r7, #16]
 80103fe:	2b00      	cmp	r3, #0
 8010400:	d10a      	bne.n	8010418 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8010402:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010406:	f383 8811 	msr	BASEPRI, r3
 801040a:	f3bf 8f6f 	isb	sy
 801040e:	f3bf 8f4f 	dsb	sy
 8010412:	60fb      	str	r3, [r7, #12]
}
 8010414:	bf00      	nop
 8010416:	e7fe      	b.n	8010416 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8010418:	693b      	ldr	r3, [r7, #16]
 801041a:	3318      	adds	r3, #24
 801041c:	4618      	mov	r0, r3
 801041e:	f7fe fda3 	bl	800ef68 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8010422:	4b1e      	ldr	r3, [pc, #120]	; (801049c <xTaskRemoveFromEventList+0xb0>)
 8010424:	681b      	ldr	r3, [r3, #0]
 8010426:	2b00      	cmp	r3, #0
 8010428:	d11d      	bne.n	8010466 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 801042a:	693b      	ldr	r3, [r7, #16]
 801042c:	3304      	adds	r3, #4
 801042e:	4618      	mov	r0, r3
 8010430:	f7fe fd9a 	bl	800ef68 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8010434:	693b      	ldr	r3, [r7, #16]
 8010436:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010438:	4b19      	ldr	r3, [pc, #100]	; (80104a0 <xTaskRemoveFromEventList+0xb4>)
 801043a:	681b      	ldr	r3, [r3, #0]
 801043c:	429a      	cmp	r2, r3
 801043e:	d903      	bls.n	8010448 <xTaskRemoveFromEventList+0x5c>
 8010440:	693b      	ldr	r3, [r7, #16]
 8010442:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010444:	4a16      	ldr	r2, [pc, #88]	; (80104a0 <xTaskRemoveFromEventList+0xb4>)
 8010446:	6013      	str	r3, [r2, #0]
 8010448:	693b      	ldr	r3, [r7, #16]
 801044a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801044c:	4613      	mov	r3, r2
 801044e:	009b      	lsls	r3, r3, #2
 8010450:	4413      	add	r3, r2
 8010452:	009b      	lsls	r3, r3, #2
 8010454:	4a13      	ldr	r2, [pc, #76]	; (80104a4 <xTaskRemoveFromEventList+0xb8>)
 8010456:	441a      	add	r2, r3
 8010458:	693b      	ldr	r3, [r7, #16]
 801045a:	3304      	adds	r3, #4
 801045c:	4619      	mov	r1, r3
 801045e:	4610      	mov	r0, r2
 8010460:	f7fe fd25 	bl	800eeae <vListInsertEnd>
 8010464:	e005      	b.n	8010472 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8010466:	693b      	ldr	r3, [r7, #16]
 8010468:	3318      	adds	r3, #24
 801046a:	4619      	mov	r1, r3
 801046c:	480e      	ldr	r0, [pc, #56]	; (80104a8 <xTaskRemoveFromEventList+0xbc>)
 801046e:	f7fe fd1e 	bl	800eeae <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8010472:	693b      	ldr	r3, [r7, #16]
 8010474:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010476:	4b0d      	ldr	r3, [pc, #52]	; (80104ac <xTaskRemoveFromEventList+0xc0>)
 8010478:	681b      	ldr	r3, [r3, #0]
 801047a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801047c:	429a      	cmp	r2, r3
 801047e:	d905      	bls.n	801048c <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8010480:	2301      	movs	r3, #1
 8010482:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8010484:	4b0a      	ldr	r3, [pc, #40]	; (80104b0 <xTaskRemoveFromEventList+0xc4>)
 8010486:	2201      	movs	r2, #1
 8010488:	601a      	str	r2, [r3, #0]
 801048a:	e001      	b.n	8010490 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 801048c:	2300      	movs	r3, #0
 801048e:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8010490:	697b      	ldr	r3, [r7, #20]
}
 8010492:	4618      	mov	r0, r3
 8010494:	3718      	adds	r7, #24
 8010496:	46bd      	mov	sp, r7
 8010498:	bd80      	pop	{r7, pc}
 801049a:	bf00      	nop
 801049c:	20000d74 	.word	0x20000d74
 80104a0:	20000d54 	.word	0x20000d54
 80104a4:	2000087c 	.word	0x2000087c
 80104a8:	20000d0c 	.word	0x20000d0c
 80104ac:	20000878 	.word	0x20000878
 80104b0:	20000d60 	.word	0x20000d60

080104b4 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80104b4:	b480      	push	{r7}
 80104b6:	b083      	sub	sp, #12
 80104b8:	af00      	add	r7, sp, #0
 80104ba:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80104bc:	4b06      	ldr	r3, [pc, #24]	; (80104d8 <vTaskInternalSetTimeOutState+0x24>)
 80104be:	681a      	ldr	r2, [r3, #0]
 80104c0:	687b      	ldr	r3, [r7, #4]
 80104c2:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80104c4:	4b05      	ldr	r3, [pc, #20]	; (80104dc <vTaskInternalSetTimeOutState+0x28>)
 80104c6:	681a      	ldr	r2, [r3, #0]
 80104c8:	687b      	ldr	r3, [r7, #4]
 80104ca:	605a      	str	r2, [r3, #4]
}
 80104cc:	bf00      	nop
 80104ce:	370c      	adds	r7, #12
 80104d0:	46bd      	mov	sp, r7
 80104d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80104d6:	4770      	bx	lr
 80104d8:	20000d64 	.word	0x20000d64
 80104dc:	20000d50 	.word	0x20000d50

080104e0 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80104e0:	b580      	push	{r7, lr}
 80104e2:	b088      	sub	sp, #32
 80104e4:	af00      	add	r7, sp, #0
 80104e6:	6078      	str	r0, [r7, #4]
 80104e8:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80104ea:	687b      	ldr	r3, [r7, #4]
 80104ec:	2b00      	cmp	r3, #0
 80104ee:	d10a      	bne.n	8010506 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 80104f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80104f4:	f383 8811 	msr	BASEPRI, r3
 80104f8:	f3bf 8f6f 	isb	sy
 80104fc:	f3bf 8f4f 	dsb	sy
 8010500:	613b      	str	r3, [r7, #16]
}
 8010502:	bf00      	nop
 8010504:	e7fe      	b.n	8010504 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8010506:	683b      	ldr	r3, [r7, #0]
 8010508:	2b00      	cmp	r3, #0
 801050a:	d10a      	bne.n	8010522 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 801050c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010510:	f383 8811 	msr	BASEPRI, r3
 8010514:	f3bf 8f6f 	isb	sy
 8010518:	f3bf 8f4f 	dsb	sy
 801051c:	60fb      	str	r3, [r7, #12]
}
 801051e:	bf00      	nop
 8010520:	e7fe      	b.n	8010520 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8010522:	f000 fe7f 	bl	8011224 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8010526:	4b1d      	ldr	r3, [pc, #116]	; (801059c <xTaskCheckForTimeOut+0xbc>)
 8010528:	681b      	ldr	r3, [r3, #0]
 801052a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 801052c:	687b      	ldr	r3, [r7, #4]
 801052e:	685b      	ldr	r3, [r3, #4]
 8010530:	69ba      	ldr	r2, [r7, #24]
 8010532:	1ad3      	subs	r3, r2, r3
 8010534:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8010536:	683b      	ldr	r3, [r7, #0]
 8010538:	681b      	ldr	r3, [r3, #0]
 801053a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801053e:	d102      	bne.n	8010546 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8010540:	2300      	movs	r3, #0
 8010542:	61fb      	str	r3, [r7, #28]
 8010544:	e023      	b.n	801058e <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8010546:	687b      	ldr	r3, [r7, #4]
 8010548:	681a      	ldr	r2, [r3, #0]
 801054a:	4b15      	ldr	r3, [pc, #84]	; (80105a0 <xTaskCheckForTimeOut+0xc0>)
 801054c:	681b      	ldr	r3, [r3, #0]
 801054e:	429a      	cmp	r2, r3
 8010550:	d007      	beq.n	8010562 <xTaskCheckForTimeOut+0x82>
 8010552:	687b      	ldr	r3, [r7, #4]
 8010554:	685b      	ldr	r3, [r3, #4]
 8010556:	69ba      	ldr	r2, [r7, #24]
 8010558:	429a      	cmp	r2, r3
 801055a:	d302      	bcc.n	8010562 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 801055c:	2301      	movs	r3, #1
 801055e:	61fb      	str	r3, [r7, #28]
 8010560:	e015      	b.n	801058e <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8010562:	683b      	ldr	r3, [r7, #0]
 8010564:	681b      	ldr	r3, [r3, #0]
 8010566:	697a      	ldr	r2, [r7, #20]
 8010568:	429a      	cmp	r2, r3
 801056a:	d20b      	bcs.n	8010584 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 801056c:	683b      	ldr	r3, [r7, #0]
 801056e:	681a      	ldr	r2, [r3, #0]
 8010570:	697b      	ldr	r3, [r7, #20]
 8010572:	1ad2      	subs	r2, r2, r3
 8010574:	683b      	ldr	r3, [r7, #0]
 8010576:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8010578:	6878      	ldr	r0, [r7, #4]
 801057a:	f7ff ff9b 	bl	80104b4 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 801057e:	2300      	movs	r3, #0
 8010580:	61fb      	str	r3, [r7, #28]
 8010582:	e004      	b.n	801058e <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8010584:	683b      	ldr	r3, [r7, #0]
 8010586:	2200      	movs	r2, #0
 8010588:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 801058a:	2301      	movs	r3, #1
 801058c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 801058e:	f000 fe79 	bl	8011284 <vPortExitCritical>

	return xReturn;
 8010592:	69fb      	ldr	r3, [r7, #28]
}
 8010594:	4618      	mov	r0, r3
 8010596:	3720      	adds	r7, #32
 8010598:	46bd      	mov	sp, r7
 801059a:	bd80      	pop	{r7, pc}
 801059c:	20000d50 	.word	0x20000d50
 80105a0:	20000d64 	.word	0x20000d64

080105a4 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80105a4:	b480      	push	{r7}
 80105a6:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80105a8:	4b03      	ldr	r3, [pc, #12]	; (80105b8 <vTaskMissedYield+0x14>)
 80105aa:	2201      	movs	r2, #1
 80105ac:	601a      	str	r2, [r3, #0]
}
 80105ae:	bf00      	nop
 80105b0:	46bd      	mov	sp, r7
 80105b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80105b6:	4770      	bx	lr
 80105b8:	20000d60 	.word	0x20000d60

080105bc <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80105bc:	b580      	push	{r7, lr}
 80105be:	b082      	sub	sp, #8
 80105c0:	af00      	add	r7, sp, #0
 80105c2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80105c4:	f000 f852 	bl	801066c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80105c8:	4b06      	ldr	r3, [pc, #24]	; (80105e4 <prvIdleTask+0x28>)
 80105ca:	681b      	ldr	r3, [r3, #0]
 80105cc:	2b01      	cmp	r3, #1
 80105ce:	d9f9      	bls.n	80105c4 <prvIdleTask+0x8>
			{
				taskYIELD();
 80105d0:	4b05      	ldr	r3, [pc, #20]	; (80105e8 <prvIdleTask+0x2c>)
 80105d2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80105d6:	601a      	str	r2, [r3, #0]
 80105d8:	f3bf 8f4f 	dsb	sy
 80105dc:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80105e0:	e7f0      	b.n	80105c4 <prvIdleTask+0x8>
 80105e2:	bf00      	nop
 80105e4:	2000087c 	.word	0x2000087c
 80105e8:	e000ed04 	.word	0xe000ed04

080105ec <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80105ec:	b580      	push	{r7, lr}
 80105ee:	b082      	sub	sp, #8
 80105f0:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80105f2:	2300      	movs	r3, #0
 80105f4:	607b      	str	r3, [r7, #4]
 80105f6:	e00c      	b.n	8010612 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80105f8:	687a      	ldr	r2, [r7, #4]
 80105fa:	4613      	mov	r3, r2
 80105fc:	009b      	lsls	r3, r3, #2
 80105fe:	4413      	add	r3, r2
 8010600:	009b      	lsls	r3, r3, #2
 8010602:	4a12      	ldr	r2, [pc, #72]	; (801064c <prvInitialiseTaskLists+0x60>)
 8010604:	4413      	add	r3, r2
 8010606:	4618      	mov	r0, r3
 8010608:	f7fe fc24 	bl	800ee54 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 801060c:	687b      	ldr	r3, [r7, #4]
 801060e:	3301      	adds	r3, #1
 8010610:	607b      	str	r3, [r7, #4]
 8010612:	687b      	ldr	r3, [r7, #4]
 8010614:	2b37      	cmp	r3, #55	; 0x37
 8010616:	d9ef      	bls.n	80105f8 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8010618:	480d      	ldr	r0, [pc, #52]	; (8010650 <prvInitialiseTaskLists+0x64>)
 801061a:	f7fe fc1b 	bl	800ee54 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 801061e:	480d      	ldr	r0, [pc, #52]	; (8010654 <prvInitialiseTaskLists+0x68>)
 8010620:	f7fe fc18 	bl	800ee54 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8010624:	480c      	ldr	r0, [pc, #48]	; (8010658 <prvInitialiseTaskLists+0x6c>)
 8010626:	f7fe fc15 	bl	800ee54 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 801062a:	480c      	ldr	r0, [pc, #48]	; (801065c <prvInitialiseTaskLists+0x70>)
 801062c:	f7fe fc12 	bl	800ee54 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8010630:	480b      	ldr	r0, [pc, #44]	; (8010660 <prvInitialiseTaskLists+0x74>)
 8010632:	f7fe fc0f 	bl	800ee54 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8010636:	4b0b      	ldr	r3, [pc, #44]	; (8010664 <prvInitialiseTaskLists+0x78>)
 8010638:	4a05      	ldr	r2, [pc, #20]	; (8010650 <prvInitialiseTaskLists+0x64>)
 801063a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 801063c:	4b0a      	ldr	r3, [pc, #40]	; (8010668 <prvInitialiseTaskLists+0x7c>)
 801063e:	4a05      	ldr	r2, [pc, #20]	; (8010654 <prvInitialiseTaskLists+0x68>)
 8010640:	601a      	str	r2, [r3, #0]
}
 8010642:	bf00      	nop
 8010644:	3708      	adds	r7, #8
 8010646:	46bd      	mov	sp, r7
 8010648:	bd80      	pop	{r7, pc}
 801064a:	bf00      	nop
 801064c:	2000087c 	.word	0x2000087c
 8010650:	20000cdc 	.word	0x20000cdc
 8010654:	20000cf0 	.word	0x20000cf0
 8010658:	20000d0c 	.word	0x20000d0c
 801065c:	20000d20 	.word	0x20000d20
 8010660:	20000d38 	.word	0x20000d38
 8010664:	20000d04 	.word	0x20000d04
 8010668:	20000d08 	.word	0x20000d08

0801066c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 801066c:	b580      	push	{r7, lr}
 801066e:	b082      	sub	sp, #8
 8010670:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8010672:	e019      	b.n	80106a8 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8010674:	f000 fdd6 	bl	8011224 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8010678:	4b10      	ldr	r3, [pc, #64]	; (80106bc <prvCheckTasksWaitingTermination+0x50>)
 801067a:	68db      	ldr	r3, [r3, #12]
 801067c:	68db      	ldr	r3, [r3, #12]
 801067e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8010680:	687b      	ldr	r3, [r7, #4]
 8010682:	3304      	adds	r3, #4
 8010684:	4618      	mov	r0, r3
 8010686:	f7fe fc6f 	bl	800ef68 <uxListRemove>
				--uxCurrentNumberOfTasks;
 801068a:	4b0d      	ldr	r3, [pc, #52]	; (80106c0 <prvCheckTasksWaitingTermination+0x54>)
 801068c:	681b      	ldr	r3, [r3, #0]
 801068e:	3b01      	subs	r3, #1
 8010690:	4a0b      	ldr	r2, [pc, #44]	; (80106c0 <prvCheckTasksWaitingTermination+0x54>)
 8010692:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8010694:	4b0b      	ldr	r3, [pc, #44]	; (80106c4 <prvCheckTasksWaitingTermination+0x58>)
 8010696:	681b      	ldr	r3, [r3, #0]
 8010698:	3b01      	subs	r3, #1
 801069a:	4a0a      	ldr	r2, [pc, #40]	; (80106c4 <prvCheckTasksWaitingTermination+0x58>)
 801069c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 801069e:	f000 fdf1 	bl	8011284 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80106a2:	6878      	ldr	r0, [r7, #4]
 80106a4:	f000 f810 	bl	80106c8 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80106a8:	4b06      	ldr	r3, [pc, #24]	; (80106c4 <prvCheckTasksWaitingTermination+0x58>)
 80106aa:	681b      	ldr	r3, [r3, #0]
 80106ac:	2b00      	cmp	r3, #0
 80106ae:	d1e1      	bne.n	8010674 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80106b0:	bf00      	nop
 80106b2:	bf00      	nop
 80106b4:	3708      	adds	r7, #8
 80106b6:	46bd      	mov	sp, r7
 80106b8:	bd80      	pop	{r7, pc}
 80106ba:	bf00      	nop
 80106bc:	20000d20 	.word	0x20000d20
 80106c0:	20000d4c 	.word	0x20000d4c
 80106c4:	20000d34 	.word	0x20000d34

080106c8 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80106c8:	b580      	push	{r7, lr}
 80106ca:	b084      	sub	sp, #16
 80106cc:	af00      	add	r7, sp, #0
 80106ce:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80106d0:	687b      	ldr	r3, [r7, #4]
 80106d2:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 80106d6:	2b00      	cmp	r3, #0
 80106d8:	d108      	bne.n	80106ec <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80106da:	687b      	ldr	r3, [r7, #4]
 80106dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80106de:	4618      	mov	r0, r3
 80106e0:	f000 ff8e 	bl	8011600 <vPortFree>
				vPortFree( pxTCB );
 80106e4:	6878      	ldr	r0, [r7, #4]
 80106e6:	f000 ff8b 	bl	8011600 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80106ea:	e018      	b.n	801071e <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80106ec:	687b      	ldr	r3, [r7, #4]
 80106ee:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 80106f2:	2b01      	cmp	r3, #1
 80106f4:	d103      	bne.n	80106fe <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 80106f6:	6878      	ldr	r0, [r7, #4]
 80106f8:	f000 ff82 	bl	8011600 <vPortFree>
	}
 80106fc:	e00f      	b.n	801071e <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80106fe:	687b      	ldr	r3, [r7, #4]
 8010700:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8010704:	2b02      	cmp	r3, #2
 8010706:	d00a      	beq.n	801071e <prvDeleteTCB+0x56>
	__asm volatile
 8010708:	f04f 0350 	mov.w	r3, #80	; 0x50
 801070c:	f383 8811 	msr	BASEPRI, r3
 8010710:	f3bf 8f6f 	isb	sy
 8010714:	f3bf 8f4f 	dsb	sy
 8010718:	60fb      	str	r3, [r7, #12]
}
 801071a:	bf00      	nop
 801071c:	e7fe      	b.n	801071c <prvDeleteTCB+0x54>
	}
 801071e:	bf00      	nop
 8010720:	3710      	adds	r7, #16
 8010722:	46bd      	mov	sp, r7
 8010724:	bd80      	pop	{r7, pc}
	...

08010728 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8010728:	b480      	push	{r7}
 801072a:	b083      	sub	sp, #12
 801072c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 801072e:	4b0c      	ldr	r3, [pc, #48]	; (8010760 <prvResetNextTaskUnblockTime+0x38>)
 8010730:	681b      	ldr	r3, [r3, #0]
 8010732:	681b      	ldr	r3, [r3, #0]
 8010734:	2b00      	cmp	r3, #0
 8010736:	d104      	bne.n	8010742 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8010738:	4b0a      	ldr	r3, [pc, #40]	; (8010764 <prvResetNextTaskUnblockTime+0x3c>)
 801073a:	f04f 32ff 	mov.w	r2, #4294967295
 801073e:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8010740:	e008      	b.n	8010754 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8010742:	4b07      	ldr	r3, [pc, #28]	; (8010760 <prvResetNextTaskUnblockTime+0x38>)
 8010744:	681b      	ldr	r3, [r3, #0]
 8010746:	68db      	ldr	r3, [r3, #12]
 8010748:	68db      	ldr	r3, [r3, #12]
 801074a:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 801074c:	687b      	ldr	r3, [r7, #4]
 801074e:	685b      	ldr	r3, [r3, #4]
 8010750:	4a04      	ldr	r2, [pc, #16]	; (8010764 <prvResetNextTaskUnblockTime+0x3c>)
 8010752:	6013      	str	r3, [r2, #0]
}
 8010754:	bf00      	nop
 8010756:	370c      	adds	r7, #12
 8010758:	46bd      	mov	sp, r7
 801075a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801075e:	4770      	bx	lr
 8010760:	20000d04 	.word	0x20000d04
 8010764:	20000d6c 	.word	0x20000d6c

08010768 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8010768:	b480      	push	{r7}
 801076a:	b083      	sub	sp, #12
 801076c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 801076e:	4b0b      	ldr	r3, [pc, #44]	; (801079c <xTaskGetSchedulerState+0x34>)
 8010770:	681b      	ldr	r3, [r3, #0]
 8010772:	2b00      	cmp	r3, #0
 8010774:	d102      	bne.n	801077c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8010776:	2301      	movs	r3, #1
 8010778:	607b      	str	r3, [r7, #4]
 801077a:	e008      	b.n	801078e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 801077c:	4b08      	ldr	r3, [pc, #32]	; (80107a0 <xTaskGetSchedulerState+0x38>)
 801077e:	681b      	ldr	r3, [r3, #0]
 8010780:	2b00      	cmp	r3, #0
 8010782:	d102      	bne.n	801078a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8010784:	2302      	movs	r3, #2
 8010786:	607b      	str	r3, [r7, #4]
 8010788:	e001      	b.n	801078e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 801078a:	2300      	movs	r3, #0
 801078c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 801078e:	687b      	ldr	r3, [r7, #4]
	}
 8010790:	4618      	mov	r0, r3
 8010792:	370c      	adds	r7, #12
 8010794:	46bd      	mov	sp, r7
 8010796:	f85d 7b04 	ldr.w	r7, [sp], #4
 801079a:	4770      	bx	lr
 801079c:	20000d58 	.word	0x20000d58
 80107a0:	20000d74 	.word	0x20000d74

080107a4 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80107a4:	b580      	push	{r7, lr}
 80107a6:	b086      	sub	sp, #24
 80107a8:	af00      	add	r7, sp, #0
 80107aa:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 80107ac:	687b      	ldr	r3, [r7, #4]
 80107ae:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80107b0:	2300      	movs	r3, #0
 80107b2:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80107b4:	687b      	ldr	r3, [r7, #4]
 80107b6:	2b00      	cmp	r3, #0
 80107b8:	d056      	beq.n	8010868 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80107ba:	4b2e      	ldr	r3, [pc, #184]	; (8010874 <xTaskPriorityDisinherit+0xd0>)
 80107bc:	681b      	ldr	r3, [r3, #0]
 80107be:	693a      	ldr	r2, [r7, #16]
 80107c0:	429a      	cmp	r2, r3
 80107c2:	d00a      	beq.n	80107da <xTaskPriorityDisinherit+0x36>
	__asm volatile
 80107c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80107c8:	f383 8811 	msr	BASEPRI, r3
 80107cc:	f3bf 8f6f 	isb	sy
 80107d0:	f3bf 8f4f 	dsb	sy
 80107d4:	60fb      	str	r3, [r7, #12]
}
 80107d6:	bf00      	nop
 80107d8:	e7fe      	b.n	80107d8 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 80107da:	693b      	ldr	r3, [r7, #16]
 80107dc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80107de:	2b00      	cmp	r3, #0
 80107e0:	d10a      	bne.n	80107f8 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 80107e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80107e6:	f383 8811 	msr	BASEPRI, r3
 80107ea:	f3bf 8f6f 	isb	sy
 80107ee:	f3bf 8f4f 	dsb	sy
 80107f2:	60bb      	str	r3, [r7, #8]
}
 80107f4:	bf00      	nop
 80107f6:	e7fe      	b.n	80107f6 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 80107f8:	693b      	ldr	r3, [r7, #16]
 80107fa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80107fc:	1e5a      	subs	r2, r3, #1
 80107fe:	693b      	ldr	r3, [r7, #16]
 8010800:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8010802:	693b      	ldr	r3, [r7, #16]
 8010804:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010806:	693b      	ldr	r3, [r7, #16]
 8010808:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801080a:	429a      	cmp	r2, r3
 801080c:	d02c      	beq.n	8010868 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 801080e:	693b      	ldr	r3, [r7, #16]
 8010810:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8010812:	2b00      	cmp	r3, #0
 8010814:	d128      	bne.n	8010868 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8010816:	693b      	ldr	r3, [r7, #16]
 8010818:	3304      	adds	r3, #4
 801081a:	4618      	mov	r0, r3
 801081c:	f7fe fba4 	bl	800ef68 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8010820:	693b      	ldr	r3, [r7, #16]
 8010822:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8010824:	693b      	ldr	r3, [r7, #16]
 8010826:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8010828:	693b      	ldr	r3, [r7, #16]
 801082a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801082c:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8010830:	693b      	ldr	r3, [r7, #16]
 8010832:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8010834:	693b      	ldr	r3, [r7, #16]
 8010836:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010838:	4b0f      	ldr	r3, [pc, #60]	; (8010878 <xTaskPriorityDisinherit+0xd4>)
 801083a:	681b      	ldr	r3, [r3, #0]
 801083c:	429a      	cmp	r2, r3
 801083e:	d903      	bls.n	8010848 <xTaskPriorityDisinherit+0xa4>
 8010840:	693b      	ldr	r3, [r7, #16]
 8010842:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010844:	4a0c      	ldr	r2, [pc, #48]	; (8010878 <xTaskPriorityDisinherit+0xd4>)
 8010846:	6013      	str	r3, [r2, #0]
 8010848:	693b      	ldr	r3, [r7, #16]
 801084a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801084c:	4613      	mov	r3, r2
 801084e:	009b      	lsls	r3, r3, #2
 8010850:	4413      	add	r3, r2
 8010852:	009b      	lsls	r3, r3, #2
 8010854:	4a09      	ldr	r2, [pc, #36]	; (801087c <xTaskPriorityDisinherit+0xd8>)
 8010856:	441a      	add	r2, r3
 8010858:	693b      	ldr	r3, [r7, #16]
 801085a:	3304      	adds	r3, #4
 801085c:	4619      	mov	r1, r3
 801085e:	4610      	mov	r0, r2
 8010860:	f7fe fb25 	bl	800eeae <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8010864:	2301      	movs	r3, #1
 8010866:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8010868:	697b      	ldr	r3, [r7, #20]
	}
 801086a:	4618      	mov	r0, r3
 801086c:	3718      	adds	r7, #24
 801086e:	46bd      	mov	sp, r7
 8010870:	bd80      	pop	{r7, pc}
 8010872:	bf00      	nop
 8010874:	20000878 	.word	0x20000878
 8010878:	20000d54 	.word	0x20000d54
 801087c:	2000087c 	.word	0x2000087c

08010880 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8010880:	b580      	push	{r7, lr}
 8010882:	b084      	sub	sp, #16
 8010884:	af00      	add	r7, sp, #0
 8010886:	6078      	str	r0, [r7, #4]
 8010888:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 801088a:	4b21      	ldr	r3, [pc, #132]	; (8010910 <prvAddCurrentTaskToDelayedList+0x90>)
 801088c:	681b      	ldr	r3, [r3, #0]
 801088e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8010890:	4b20      	ldr	r3, [pc, #128]	; (8010914 <prvAddCurrentTaskToDelayedList+0x94>)
 8010892:	681b      	ldr	r3, [r3, #0]
 8010894:	3304      	adds	r3, #4
 8010896:	4618      	mov	r0, r3
 8010898:	f7fe fb66 	bl	800ef68 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 801089c:	687b      	ldr	r3, [r7, #4]
 801089e:	f1b3 3fff 	cmp.w	r3, #4294967295
 80108a2:	d10a      	bne.n	80108ba <prvAddCurrentTaskToDelayedList+0x3a>
 80108a4:	683b      	ldr	r3, [r7, #0]
 80108a6:	2b00      	cmp	r3, #0
 80108a8:	d007      	beq.n	80108ba <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80108aa:	4b1a      	ldr	r3, [pc, #104]	; (8010914 <prvAddCurrentTaskToDelayedList+0x94>)
 80108ac:	681b      	ldr	r3, [r3, #0]
 80108ae:	3304      	adds	r3, #4
 80108b0:	4619      	mov	r1, r3
 80108b2:	4819      	ldr	r0, [pc, #100]	; (8010918 <prvAddCurrentTaskToDelayedList+0x98>)
 80108b4:	f7fe fafb 	bl	800eeae <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80108b8:	e026      	b.n	8010908 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80108ba:	68fa      	ldr	r2, [r7, #12]
 80108bc:	687b      	ldr	r3, [r7, #4]
 80108be:	4413      	add	r3, r2
 80108c0:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80108c2:	4b14      	ldr	r3, [pc, #80]	; (8010914 <prvAddCurrentTaskToDelayedList+0x94>)
 80108c4:	681b      	ldr	r3, [r3, #0]
 80108c6:	68ba      	ldr	r2, [r7, #8]
 80108c8:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80108ca:	68ba      	ldr	r2, [r7, #8]
 80108cc:	68fb      	ldr	r3, [r7, #12]
 80108ce:	429a      	cmp	r2, r3
 80108d0:	d209      	bcs.n	80108e6 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80108d2:	4b12      	ldr	r3, [pc, #72]	; (801091c <prvAddCurrentTaskToDelayedList+0x9c>)
 80108d4:	681a      	ldr	r2, [r3, #0]
 80108d6:	4b0f      	ldr	r3, [pc, #60]	; (8010914 <prvAddCurrentTaskToDelayedList+0x94>)
 80108d8:	681b      	ldr	r3, [r3, #0]
 80108da:	3304      	adds	r3, #4
 80108dc:	4619      	mov	r1, r3
 80108de:	4610      	mov	r0, r2
 80108e0:	f7fe fb09 	bl	800eef6 <vListInsert>
}
 80108e4:	e010      	b.n	8010908 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80108e6:	4b0e      	ldr	r3, [pc, #56]	; (8010920 <prvAddCurrentTaskToDelayedList+0xa0>)
 80108e8:	681a      	ldr	r2, [r3, #0]
 80108ea:	4b0a      	ldr	r3, [pc, #40]	; (8010914 <prvAddCurrentTaskToDelayedList+0x94>)
 80108ec:	681b      	ldr	r3, [r3, #0]
 80108ee:	3304      	adds	r3, #4
 80108f0:	4619      	mov	r1, r3
 80108f2:	4610      	mov	r0, r2
 80108f4:	f7fe faff 	bl	800eef6 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80108f8:	4b0a      	ldr	r3, [pc, #40]	; (8010924 <prvAddCurrentTaskToDelayedList+0xa4>)
 80108fa:	681b      	ldr	r3, [r3, #0]
 80108fc:	68ba      	ldr	r2, [r7, #8]
 80108fe:	429a      	cmp	r2, r3
 8010900:	d202      	bcs.n	8010908 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8010902:	4a08      	ldr	r2, [pc, #32]	; (8010924 <prvAddCurrentTaskToDelayedList+0xa4>)
 8010904:	68bb      	ldr	r3, [r7, #8]
 8010906:	6013      	str	r3, [r2, #0]
}
 8010908:	bf00      	nop
 801090a:	3710      	adds	r7, #16
 801090c:	46bd      	mov	sp, r7
 801090e:	bd80      	pop	{r7, pc}
 8010910:	20000d50 	.word	0x20000d50
 8010914:	20000878 	.word	0x20000878
 8010918:	20000d38 	.word	0x20000d38
 801091c:	20000d08 	.word	0x20000d08
 8010920:	20000d04 	.word	0x20000d04
 8010924:	20000d6c 	.word	0x20000d6c

08010928 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8010928:	b580      	push	{r7, lr}
 801092a:	b08a      	sub	sp, #40	; 0x28
 801092c:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 801092e:	2300      	movs	r3, #0
 8010930:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8010932:	f000 fb07 	bl	8010f44 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8010936:	4b1c      	ldr	r3, [pc, #112]	; (80109a8 <xTimerCreateTimerTask+0x80>)
 8010938:	681b      	ldr	r3, [r3, #0]
 801093a:	2b00      	cmp	r3, #0
 801093c:	d021      	beq.n	8010982 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 801093e:	2300      	movs	r3, #0
 8010940:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8010942:	2300      	movs	r3, #0
 8010944:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8010946:	1d3a      	adds	r2, r7, #4
 8010948:	f107 0108 	add.w	r1, r7, #8
 801094c:	f107 030c 	add.w	r3, r7, #12
 8010950:	4618      	mov	r0, r3
 8010952:	f7fe fa65 	bl	800ee20 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8010956:	6879      	ldr	r1, [r7, #4]
 8010958:	68bb      	ldr	r3, [r7, #8]
 801095a:	68fa      	ldr	r2, [r7, #12]
 801095c:	9202      	str	r2, [sp, #8]
 801095e:	9301      	str	r3, [sp, #4]
 8010960:	2302      	movs	r3, #2
 8010962:	9300      	str	r3, [sp, #0]
 8010964:	2300      	movs	r3, #0
 8010966:	460a      	mov	r2, r1
 8010968:	4910      	ldr	r1, [pc, #64]	; (80109ac <xTimerCreateTimerTask+0x84>)
 801096a:	4811      	ldr	r0, [pc, #68]	; (80109b0 <xTimerCreateTimerTask+0x88>)
 801096c:	f7ff f8cc 	bl	800fb08 <xTaskCreateStatic>
 8010970:	4603      	mov	r3, r0
 8010972:	4a10      	ldr	r2, [pc, #64]	; (80109b4 <xTimerCreateTimerTask+0x8c>)
 8010974:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8010976:	4b0f      	ldr	r3, [pc, #60]	; (80109b4 <xTimerCreateTimerTask+0x8c>)
 8010978:	681b      	ldr	r3, [r3, #0]
 801097a:	2b00      	cmp	r3, #0
 801097c:	d001      	beq.n	8010982 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 801097e:	2301      	movs	r3, #1
 8010980:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8010982:	697b      	ldr	r3, [r7, #20]
 8010984:	2b00      	cmp	r3, #0
 8010986:	d10a      	bne.n	801099e <xTimerCreateTimerTask+0x76>
	__asm volatile
 8010988:	f04f 0350 	mov.w	r3, #80	; 0x50
 801098c:	f383 8811 	msr	BASEPRI, r3
 8010990:	f3bf 8f6f 	isb	sy
 8010994:	f3bf 8f4f 	dsb	sy
 8010998:	613b      	str	r3, [r7, #16]
}
 801099a:	bf00      	nop
 801099c:	e7fe      	b.n	801099c <xTimerCreateTimerTask+0x74>
	return xReturn;
 801099e:	697b      	ldr	r3, [r7, #20]
}
 80109a0:	4618      	mov	r0, r3
 80109a2:	3718      	adds	r7, #24
 80109a4:	46bd      	mov	sp, r7
 80109a6:	bd80      	pop	{r7, pc}
 80109a8:	20000da8 	.word	0x20000da8
 80109ac:	08012414 	.word	0x08012414
 80109b0:	08010aed 	.word	0x08010aed
 80109b4:	20000dac 	.word	0x20000dac

080109b8 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 80109b8:	b580      	push	{r7, lr}
 80109ba:	b08a      	sub	sp, #40	; 0x28
 80109bc:	af00      	add	r7, sp, #0
 80109be:	60f8      	str	r0, [r7, #12]
 80109c0:	60b9      	str	r1, [r7, #8]
 80109c2:	607a      	str	r2, [r7, #4]
 80109c4:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 80109c6:	2300      	movs	r3, #0
 80109c8:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 80109ca:	68fb      	ldr	r3, [r7, #12]
 80109cc:	2b00      	cmp	r3, #0
 80109ce:	d10a      	bne.n	80109e6 <xTimerGenericCommand+0x2e>
	__asm volatile
 80109d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80109d4:	f383 8811 	msr	BASEPRI, r3
 80109d8:	f3bf 8f6f 	isb	sy
 80109dc:	f3bf 8f4f 	dsb	sy
 80109e0:	623b      	str	r3, [r7, #32]
}
 80109e2:	bf00      	nop
 80109e4:	e7fe      	b.n	80109e4 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 80109e6:	4b1a      	ldr	r3, [pc, #104]	; (8010a50 <xTimerGenericCommand+0x98>)
 80109e8:	681b      	ldr	r3, [r3, #0]
 80109ea:	2b00      	cmp	r3, #0
 80109ec:	d02a      	beq.n	8010a44 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 80109ee:	68bb      	ldr	r3, [r7, #8]
 80109f0:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 80109f2:	687b      	ldr	r3, [r7, #4]
 80109f4:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 80109f6:	68fb      	ldr	r3, [r7, #12]
 80109f8:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 80109fa:	68bb      	ldr	r3, [r7, #8]
 80109fc:	2b05      	cmp	r3, #5
 80109fe:	dc18      	bgt.n	8010a32 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8010a00:	f7ff feb2 	bl	8010768 <xTaskGetSchedulerState>
 8010a04:	4603      	mov	r3, r0
 8010a06:	2b02      	cmp	r3, #2
 8010a08:	d109      	bne.n	8010a1e <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8010a0a:	4b11      	ldr	r3, [pc, #68]	; (8010a50 <xTimerGenericCommand+0x98>)
 8010a0c:	6818      	ldr	r0, [r3, #0]
 8010a0e:	f107 0110 	add.w	r1, r7, #16
 8010a12:	2300      	movs	r3, #0
 8010a14:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8010a16:	f7fe fc0f 	bl	800f238 <xQueueGenericSend>
 8010a1a:	6278      	str	r0, [r7, #36]	; 0x24
 8010a1c:	e012      	b.n	8010a44 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8010a1e:	4b0c      	ldr	r3, [pc, #48]	; (8010a50 <xTimerGenericCommand+0x98>)
 8010a20:	6818      	ldr	r0, [r3, #0]
 8010a22:	f107 0110 	add.w	r1, r7, #16
 8010a26:	2300      	movs	r3, #0
 8010a28:	2200      	movs	r2, #0
 8010a2a:	f7fe fc05 	bl	800f238 <xQueueGenericSend>
 8010a2e:	6278      	str	r0, [r7, #36]	; 0x24
 8010a30:	e008      	b.n	8010a44 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8010a32:	4b07      	ldr	r3, [pc, #28]	; (8010a50 <xTimerGenericCommand+0x98>)
 8010a34:	6818      	ldr	r0, [r3, #0]
 8010a36:	f107 0110 	add.w	r1, r7, #16
 8010a3a:	2300      	movs	r3, #0
 8010a3c:	683a      	ldr	r2, [r7, #0]
 8010a3e:	f7fe fcf9 	bl	800f434 <xQueueGenericSendFromISR>
 8010a42:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8010a44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8010a46:	4618      	mov	r0, r3
 8010a48:	3728      	adds	r7, #40	; 0x28
 8010a4a:	46bd      	mov	sp, r7
 8010a4c:	bd80      	pop	{r7, pc}
 8010a4e:	bf00      	nop
 8010a50:	20000da8 	.word	0x20000da8

08010a54 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8010a54:	b580      	push	{r7, lr}
 8010a56:	b088      	sub	sp, #32
 8010a58:	af02      	add	r7, sp, #8
 8010a5a:	6078      	str	r0, [r7, #4]
 8010a5c:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8010a5e:	4b22      	ldr	r3, [pc, #136]	; (8010ae8 <prvProcessExpiredTimer+0x94>)
 8010a60:	681b      	ldr	r3, [r3, #0]
 8010a62:	68db      	ldr	r3, [r3, #12]
 8010a64:	68db      	ldr	r3, [r3, #12]
 8010a66:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8010a68:	697b      	ldr	r3, [r7, #20]
 8010a6a:	3304      	adds	r3, #4
 8010a6c:	4618      	mov	r0, r3
 8010a6e:	f7fe fa7b 	bl	800ef68 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8010a72:	697b      	ldr	r3, [r7, #20]
 8010a74:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8010a78:	f003 0304 	and.w	r3, r3, #4
 8010a7c:	2b00      	cmp	r3, #0
 8010a7e:	d022      	beq.n	8010ac6 <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8010a80:	697b      	ldr	r3, [r7, #20]
 8010a82:	699a      	ldr	r2, [r3, #24]
 8010a84:	687b      	ldr	r3, [r7, #4]
 8010a86:	18d1      	adds	r1, r2, r3
 8010a88:	687b      	ldr	r3, [r7, #4]
 8010a8a:	683a      	ldr	r2, [r7, #0]
 8010a8c:	6978      	ldr	r0, [r7, #20]
 8010a8e:	f000 f8d1 	bl	8010c34 <prvInsertTimerInActiveList>
 8010a92:	4603      	mov	r3, r0
 8010a94:	2b00      	cmp	r3, #0
 8010a96:	d01f      	beq.n	8010ad8 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8010a98:	2300      	movs	r3, #0
 8010a9a:	9300      	str	r3, [sp, #0]
 8010a9c:	2300      	movs	r3, #0
 8010a9e:	687a      	ldr	r2, [r7, #4]
 8010aa0:	2100      	movs	r1, #0
 8010aa2:	6978      	ldr	r0, [r7, #20]
 8010aa4:	f7ff ff88 	bl	80109b8 <xTimerGenericCommand>
 8010aa8:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8010aaa:	693b      	ldr	r3, [r7, #16]
 8010aac:	2b00      	cmp	r3, #0
 8010aae:	d113      	bne.n	8010ad8 <prvProcessExpiredTimer+0x84>
	__asm volatile
 8010ab0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010ab4:	f383 8811 	msr	BASEPRI, r3
 8010ab8:	f3bf 8f6f 	isb	sy
 8010abc:	f3bf 8f4f 	dsb	sy
 8010ac0:	60fb      	str	r3, [r7, #12]
}
 8010ac2:	bf00      	nop
 8010ac4:	e7fe      	b.n	8010ac4 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8010ac6:	697b      	ldr	r3, [r7, #20]
 8010ac8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8010acc:	f023 0301 	bic.w	r3, r3, #1
 8010ad0:	b2da      	uxtb	r2, r3
 8010ad2:	697b      	ldr	r3, [r7, #20]
 8010ad4:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8010ad8:	697b      	ldr	r3, [r7, #20]
 8010ada:	6a1b      	ldr	r3, [r3, #32]
 8010adc:	6978      	ldr	r0, [r7, #20]
 8010ade:	4798      	blx	r3
}
 8010ae0:	bf00      	nop
 8010ae2:	3718      	adds	r7, #24
 8010ae4:	46bd      	mov	sp, r7
 8010ae6:	bd80      	pop	{r7, pc}
 8010ae8:	20000da0 	.word	0x20000da0

08010aec <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8010aec:	b580      	push	{r7, lr}
 8010aee:	b084      	sub	sp, #16
 8010af0:	af00      	add	r7, sp, #0
 8010af2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8010af4:	f107 0308 	add.w	r3, r7, #8
 8010af8:	4618      	mov	r0, r3
 8010afa:	f000 f857 	bl	8010bac <prvGetNextExpireTime>
 8010afe:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8010b00:	68bb      	ldr	r3, [r7, #8]
 8010b02:	4619      	mov	r1, r3
 8010b04:	68f8      	ldr	r0, [r7, #12]
 8010b06:	f000 f803 	bl	8010b10 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8010b0a:	f000 f8d5 	bl	8010cb8 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8010b0e:	e7f1      	b.n	8010af4 <prvTimerTask+0x8>

08010b10 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8010b10:	b580      	push	{r7, lr}
 8010b12:	b084      	sub	sp, #16
 8010b14:	af00      	add	r7, sp, #0
 8010b16:	6078      	str	r0, [r7, #4]
 8010b18:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8010b1a:	f7ff fa31 	bl	800ff80 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8010b1e:	f107 0308 	add.w	r3, r7, #8
 8010b22:	4618      	mov	r0, r3
 8010b24:	f000 f866 	bl	8010bf4 <prvSampleTimeNow>
 8010b28:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8010b2a:	68bb      	ldr	r3, [r7, #8]
 8010b2c:	2b00      	cmp	r3, #0
 8010b2e:	d130      	bne.n	8010b92 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8010b30:	683b      	ldr	r3, [r7, #0]
 8010b32:	2b00      	cmp	r3, #0
 8010b34:	d10a      	bne.n	8010b4c <prvProcessTimerOrBlockTask+0x3c>
 8010b36:	687a      	ldr	r2, [r7, #4]
 8010b38:	68fb      	ldr	r3, [r7, #12]
 8010b3a:	429a      	cmp	r2, r3
 8010b3c:	d806      	bhi.n	8010b4c <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8010b3e:	f7ff fa2d 	bl	800ff9c <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8010b42:	68f9      	ldr	r1, [r7, #12]
 8010b44:	6878      	ldr	r0, [r7, #4]
 8010b46:	f7ff ff85 	bl	8010a54 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8010b4a:	e024      	b.n	8010b96 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8010b4c:	683b      	ldr	r3, [r7, #0]
 8010b4e:	2b00      	cmp	r3, #0
 8010b50:	d008      	beq.n	8010b64 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8010b52:	4b13      	ldr	r3, [pc, #76]	; (8010ba0 <prvProcessTimerOrBlockTask+0x90>)
 8010b54:	681b      	ldr	r3, [r3, #0]
 8010b56:	681b      	ldr	r3, [r3, #0]
 8010b58:	2b00      	cmp	r3, #0
 8010b5a:	d101      	bne.n	8010b60 <prvProcessTimerOrBlockTask+0x50>
 8010b5c:	2301      	movs	r3, #1
 8010b5e:	e000      	b.n	8010b62 <prvProcessTimerOrBlockTask+0x52>
 8010b60:	2300      	movs	r3, #0
 8010b62:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8010b64:	4b0f      	ldr	r3, [pc, #60]	; (8010ba4 <prvProcessTimerOrBlockTask+0x94>)
 8010b66:	6818      	ldr	r0, [r3, #0]
 8010b68:	687a      	ldr	r2, [r7, #4]
 8010b6a:	68fb      	ldr	r3, [r7, #12]
 8010b6c:	1ad3      	subs	r3, r2, r3
 8010b6e:	683a      	ldr	r2, [r7, #0]
 8010b70:	4619      	mov	r1, r3
 8010b72:	f7fe ff95 	bl	800faa0 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8010b76:	f7ff fa11 	bl	800ff9c <xTaskResumeAll>
 8010b7a:	4603      	mov	r3, r0
 8010b7c:	2b00      	cmp	r3, #0
 8010b7e:	d10a      	bne.n	8010b96 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8010b80:	4b09      	ldr	r3, [pc, #36]	; (8010ba8 <prvProcessTimerOrBlockTask+0x98>)
 8010b82:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8010b86:	601a      	str	r2, [r3, #0]
 8010b88:	f3bf 8f4f 	dsb	sy
 8010b8c:	f3bf 8f6f 	isb	sy
}
 8010b90:	e001      	b.n	8010b96 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8010b92:	f7ff fa03 	bl	800ff9c <xTaskResumeAll>
}
 8010b96:	bf00      	nop
 8010b98:	3710      	adds	r7, #16
 8010b9a:	46bd      	mov	sp, r7
 8010b9c:	bd80      	pop	{r7, pc}
 8010b9e:	bf00      	nop
 8010ba0:	20000da4 	.word	0x20000da4
 8010ba4:	20000da8 	.word	0x20000da8
 8010ba8:	e000ed04 	.word	0xe000ed04

08010bac <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8010bac:	b480      	push	{r7}
 8010bae:	b085      	sub	sp, #20
 8010bb0:	af00      	add	r7, sp, #0
 8010bb2:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8010bb4:	4b0e      	ldr	r3, [pc, #56]	; (8010bf0 <prvGetNextExpireTime+0x44>)
 8010bb6:	681b      	ldr	r3, [r3, #0]
 8010bb8:	681b      	ldr	r3, [r3, #0]
 8010bba:	2b00      	cmp	r3, #0
 8010bbc:	d101      	bne.n	8010bc2 <prvGetNextExpireTime+0x16>
 8010bbe:	2201      	movs	r2, #1
 8010bc0:	e000      	b.n	8010bc4 <prvGetNextExpireTime+0x18>
 8010bc2:	2200      	movs	r2, #0
 8010bc4:	687b      	ldr	r3, [r7, #4]
 8010bc6:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8010bc8:	687b      	ldr	r3, [r7, #4]
 8010bca:	681b      	ldr	r3, [r3, #0]
 8010bcc:	2b00      	cmp	r3, #0
 8010bce:	d105      	bne.n	8010bdc <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8010bd0:	4b07      	ldr	r3, [pc, #28]	; (8010bf0 <prvGetNextExpireTime+0x44>)
 8010bd2:	681b      	ldr	r3, [r3, #0]
 8010bd4:	68db      	ldr	r3, [r3, #12]
 8010bd6:	681b      	ldr	r3, [r3, #0]
 8010bd8:	60fb      	str	r3, [r7, #12]
 8010bda:	e001      	b.n	8010be0 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8010bdc:	2300      	movs	r3, #0
 8010bde:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8010be0:	68fb      	ldr	r3, [r7, #12]
}
 8010be2:	4618      	mov	r0, r3
 8010be4:	3714      	adds	r7, #20
 8010be6:	46bd      	mov	sp, r7
 8010be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010bec:	4770      	bx	lr
 8010bee:	bf00      	nop
 8010bf0:	20000da0 	.word	0x20000da0

08010bf4 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8010bf4:	b580      	push	{r7, lr}
 8010bf6:	b084      	sub	sp, #16
 8010bf8:	af00      	add	r7, sp, #0
 8010bfa:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8010bfc:	f7ff fa6c 	bl	80100d8 <xTaskGetTickCount>
 8010c00:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8010c02:	4b0b      	ldr	r3, [pc, #44]	; (8010c30 <prvSampleTimeNow+0x3c>)
 8010c04:	681b      	ldr	r3, [r3, #0]
 8010c06:	68fa      	ldr	r2, [r7, #12]
 8010c08:	429a      	cmp	r2, r3
 8010c0a:	d205      	bcs.n	8010c18 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8010c0c:	f000 f936 	bl	8010e7c <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8010c10:	687b      	ldr	r3, [r7, #4]
 8010c12:	2201      	movs	r2, #1
 8010c14:	601a      	str	r2, [r3, #0]
 8010c16:	e002      	b.n	8010c1e <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8010c18:	687b      	ldr	r3, [r7, #4]
 8010c1a:	2200      	movs	r2, #0
 8010c1c:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8010c1e:	4a04      	ldr	r2, [pc, #16]	; (8010c30 <prvSampleTimeNow+0x3c>)
 8010c20:	68fb      	ldr	r3, [r7, #12]
 8010c22:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8010c24:	68fb      	ldr	r3, [r7, #12]
}
 8010c26:	4618      	mov	r0, r3
 8010c28:	3710      	adds	r7, #16
 8010c2a:	46bd      	mov	sp, r7
 8010c2c:	bd80      	pop	{r7, pc}
 8010c2e:	bf00      	nop
 8010c30:	20000db0 	.word	0x20000db0

08010c34 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8010c34:	b580      	push	{r7, lr}
 8010c36:	b086      	sub	sp, #24
 8010c38:	af00      	add	r7, sp, #0
 8010c3a:	60f8      	str	r0, [r7, #12]
 8010c3c:	60b9      	str	r1, [r7, #8]
 8010c3e:	607a      	str	r2, [r7, #4]
 8010c40:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8010c42:	2300      	movs	r3, #0
 8010c44:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8010c46:	68fb      	ldr	r3, [r7, #12]
 8010c48:	68ba      	ldr	r2, [r7, #8]
 8010c4a:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8010c4c:	68fb      	ldr	r3, [r7, #12]
 8010c4e:	68fa      	ldr	r2, [r7, #12]
 8010c50:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8010c52:	68ba      	ldr	r2, [r7, #8]
 8010c54:	687b      	ldr	r3, [r7, #4]
 8010c56:	429a      	cmp	r2, r3
 8010c58:	d812      	bhi.n	8010c80 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8010c5a:	687a      	ldr	r2, [r7, #4]
 8010c5c:	683b      	ldr	r3, [r7, #0]
 8010c5e:	1ad2      	subs	r2, r2, r3
 8010c60:	68fb      	ldr	r3, [r7, #12]
 8010c62:	699b      	ldr	r3, [r3, #24]
 8010c64:	429a      	cmp	r2, r3
 8010c66:	d302      	bcc.n	8010c6e <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8010c68:	2301      	movs	r3, #1
 8010c6a:	617b      	str	r3, [r7, #20]
 8010c6c:	e01b      	b.n	8010ca6 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8010c6e:	4b10      	ldr	r3, [pc, #64]	; (8010cb0 <prvInsertTimerInActiveList+0x7c>)
 8010c70:	681a      	ldr	r2, [r3, #0]
 8010c72:	68fb      	ldr	r3, [r7, #12]
 8010c74:	3304      	adds	r3, #4
 8010c76:	4619      	mov	r1, r3
 8010c78:	4610      	mov	r0, r2
 8010c7a:	f7fe f93c 	bl	800eef6 <vListInsert>
 8010c7e:	e012      	b.n	8010ca6 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8010c80:	687a      	ldr	r2, [r7, #4]
 8010c82:	683b      	ldr	r3, [r7, #0]
 8010c84:	429a      	cmp	r2, r3
 8010c86:	d206      	bcs.n	8010c96 <prvInsertTimerInActiveList+0x62>
 8010c88:	68ba      	ldr	r2, [r7, #8]
 8010c8a:	683b      	ldr	r3, [r7, #0]
 8010c8c:	429a      	cmp	r2, r3
 8010c8e:	d302      	bcc.n	8010c96 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8010c90:	2301      	movs	r3, #1
 8010c92:	617b      	str	r3, [r7, #20]
 8010c94:	e007      	b.n	8010ca6 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8010c96:	4b07      	ldr	r3, [pc, #28]	; (8010cb4 <prvInsertTimerInActiveList+0x80>)
 8010c98:	681a      	ldr	r2, [r3, #0]
 8010c9a:	68fb      	ldr	r3, [r7, #12]
 8010c9c:	3304      	adds	r3, #4
 8010c9e:	4619      	mov	r1, r3
 8010ca0:	4610      	mov	r0, r2
 8010ca2:	f7fe f928 	bl	800eef6 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8010ca6:	697b      	ldr	r3, [r7, #20]
}
 8010ca8:	4618      	mov	r0, r3
 8010caa:	3718      	adds	r7, #24
 8010cac:	46bd      	mov	sp, r7
 8010cae:	bd80      	pop	{r7, pc}
 8010cb0:	20000da4 	.word	0x20000da4
 8010cb4:	20000da0 	.word	0x20000da0

08010cb8 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8010cb8:	b580      	push	{r7, lr}
 8010cba:	b08e      	sub	sp, #56	; 0x38
 8010cbc:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8010cbe:	e0ca      	b.n	8010e56 <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8010cc0:	687b      	ldr	r3, [r7, #4]
 8010cc2:	2b00      	cmp	r3, #0
 8010cc4:	da18      	bge.n	8010cf8 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8010cc6:	1d3b      	adds	r3, r7, #4
 8010cc8:	3304      	adds	r3, #4
 8010cca:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8010ccc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010cce:	2b00      	cmp	r3, #0
 8010cd0:	d10a      	bne.n	8010ce8 <prvProcessReceivedCommands+0x30>
	__asm volatile
 8010cd2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010cd6:	f383 8811 	msr	BASEPRI, r3
 8010cda:	f3bf 8f6f 	isb	sy
 8010cde:	f3bf 8f4f 	dsb	sy
 8010ce2:	61fb      	str	r3, [r7, #28]
}
 8010ce4:	bf00      	nop
 8010ce6:	e7fe      	b.n	8010ce6 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8010ce8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010cea:	681b      	ldr	r3, [r3, #0]
 8010cec:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8010cee:	6850      	ldr	r0, [r2, #4]
 8010cf0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8010cf2:	6892      	ldr	r2, [r2, #8]
 8010cf4:	4611      	mov	r1, r2
 8010cf6:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8010cf8:	687b      	ldr	r3, [r7, #4]
 8010cfa:	2b00      	cmp	r3, #0
 8010cfc:	f2c0 80aa 	blt.w	8010e54 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8010d00:	68fb      	ldr	r3, [r7, #12]
 8010d02:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8010d04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010d06:	695b      	ldr	r3, [r3, #20]
 8010d08:	2b00      	cmp	r3, #0
 8010d0a:	d004      	beq.n	8010d16 <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8010d0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010d0e:	3304      	adds	r3, #4
 8010d10:	4618      	mov	r0, r3
 8010d12:	f7fe f929 	bl	800ef68 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8010d16:	463b      	mov	r3, r7
 8010d18:	4618      	mov	r0, r3
 8010d1a:	f7ff ff6b 	bl	8010bf4 <prvSampleTimeNow>
 8010d1e:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8010d20:	687b      	ldr	r3, [r7, #4]
 8010d22:	2b09      	cmp	r3, #9
 8010d24:	f200 8097 	bhi.w	8010e56 <prvProcessReceivedCommands+0x19e>
 8010d28:	a201      	add	r2, pc, #4	; (adr r2, 8010d30 <prvProcessReceivedCommands+0x78>)
 8010d2a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010d2e:	bf00      	nop
 8010d30:	08010d59 	.word	0x08010d59
 8010d34:	08010d59 	.word	0x08010d59
 8010d38:	08010d59 	.word	0x08010d59
 8010d3c:	08010dcd 	.word	0x08010dcd
 8010d40:	08010de1 	.word	0x08010de1
 8010d44:	08010e2b 	.word	0x08010e2b
 8010d48:	08010d59 	.word	0x08010d59
 8010d4c:	08010d59 	.word	0x08010d59
 8010d50:	08010dcd 	.word	0x08010dcd
 8010d54:	08010de1 	.word	0x08010de1
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8010d58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010d5a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8010d5e:	f043 0301 	orr.w	r3, r3, #1
 8010d62:	b2da      	uxtb	r2, r3
 8010d64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010d66:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8010d6a:	68ba      	ldr	r2, [r7, #8]
 8010d6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010d6e:	699b      	ldr	r3, [r3, #24]
 8010d70:	18d1      	adds	r1, r2, r3
 8010d72:	68bb      	ldr	r3, [r7, #8]
 8010d74:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8010d76:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8010d78:	f7ff ff5c 	bl	8010c34 <prvInsertTimerInActiveList>
 8010d7c:	4603      	mov	r3, r0
 8010d7e:	2b00      	cmp	r3, #0
 8010d80:	d069      	beq.n	8010e56 <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8010d82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010d84:	6a1b      	ldr	r3, [r3, #32]
 8010d86:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8010d88:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8010d8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010d8c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8010d90:	f003 0304 	and.w	r3, r3, #4
 8010d94:	2b00      	cmp	r3, #0
 8010d96:	d05e      	beq.n	8010e56 <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8010d98:	68ba      	ldr	r2, [r7, #8]
 8010d9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010d9c:	699b      	ldr	r3, [r3, #24]
 8010d9e:	441a      	add	r2, r3
 8010da0:	2300      	movs	r3, #0
 8010da2:	9300      	str	r3, [sp, #0]
 8010da4:	2300      	movs	r3, #0
 8010da6:	2100      	movs	r1, #0
 8010da8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8010daa:	f7ff fe05 	bl	80109b8 <xTimerGenericCommand>
 8010dae:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8010db0:	6a3b      	ldr	r3, [r7, #32]
 8010db2:	2b00      	cmp	r3, #0
 8010db4:	d14f      	bne.n	8010e56 <prvProcessReceivedCommands+0x19e>
	__asm volatile
 8010db6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010dba:	f383 8811 	msr	BASEPRI, r3
 8010dbe:	f3bf 8f6f 	isb	sy
 8010dc2:	f3bf 8f4f 	dsb	sy
 8010dc6:	61bb      	str	r3, [r7, #24]
}
 8010dc8:	bf00      	nop
 8010dca:	e7fe      	b.n	8010dca <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8010dcc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010dce:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8010dd2:	f023 0301 	bic.w	r3, r3, #1
 8010dd6:	b2da      	uxtb	r2, r3
 8010dd8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010dda:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8010dde:	e03a      	b.n	8010e56 <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8010de0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010de2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8010de6:	f043 0301 	orr.w	r3, r3, #1
 8010dea:	b2da      	uxtb	r2, r3
 8010dec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010dee:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8010df2:	68ba      	ldr	r2, [r7, #8]
 8010df4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010df6:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8010df8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010dfa:	699b      	ldr	r3, [r3, #24]
 8010dfc:	2b00      	cmp	r3, #0
 8010dfe:	d10a      	bne.n	8010e16 <prvProcessReceivedCommands+0x15e>
	__asm volatile
 8010e00:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010e04:	f383 8811 	msr	BASEPRI, r3
 8010e08:	f3bf 8f6f 	isb	sy
 8010e0c:	f3bf 8f4f 	dsb	sy
 8010e10:	617b      	str	r3, [r7, #20]
}
 8010e12:	bf00      	nop
 8010e14:	e7fe      	b.n	8010e14 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8010e16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010e18:	699a      	ldr	r2, [r3, #24]
 8010e1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010e1c:	18d1      	adds	r1, r2, r3
 8010e1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010e20:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8010e22:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8010e24:	f7ff ff06 	bl	8010c34 <prvInsertTimerInActiveList>
					break;
 8010e28:	e015      	b.n	8010e56 <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8010e2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010e2c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8010e30:	f003 0302 	and.w	r3, r3, #2
 8010e34:	2b00      	cmp	r3, #0
 8010e36:	d103      	bne.n	8010e40 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 8010e38:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8010e3a:	f000 fbe1 	bl	8011600 <vPortFree>
 8010e3e:	e00a      	b.n	8010e56 <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8010e40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010e42:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8010e46:	f023 0301 	bic.w	r3, r3, #1
 8010e4a:	b2da      	uxtb	r2, r3
 8010e4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010e4e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8010e52:	e000      	b.n	8010e56 <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8010e54:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8010e56:	4b08      	ldr	r3, [pc, #32]	; (8010e78 <prvProcessReceivedCommands+0x1c0>)
 8010e58:	681b      	ldr	r3, [r3, #0]
 8010e5a:	1d39      	adds	r1, r7, #4
 8010e5c:	2200      	movs	r2, #0
 8010e5e:	4618      	mov	r0, r3
 8010e60:	f7fe fb84 	bl	800f56c <xQueueReceive>
 8010e64:	4603      	mov	r3, r0
 8010e66:	2b00      	cmp	r3, #0
 8010e68:	f47f af2a 	bne.w	8010cc0 <prvProcessReceivedCommands+0x8>
	}
}
 8010e6c:	bf00      	nop
 8010e6e:	bf00      	nop
 8010e70:	3730      	adds	r7, #48	; 0x30
 8010e72:	46bd      	mov	sp, r7
 8010e74:	bd80      	pop	{r7, pc}
 8010e76:	bf00      	nop
 8010e78:	20000da8 	.word	0x20000da8

08010e7c <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8010e7c:	b580      	push	{r7, lr}
 8010e7e:	b088      	sub	sp, #32
 8010e80:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8010e82:	e048      	b.n	8010f16 <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8010e84:	4b2d      	ldr	r3, [pc, #180]	; (8010f3c <prvSwitchTimerLists+0xc0>)
 8010e86:	681b      	ldr	r3, [r3, #0]
 8010e88:	68db      	ldr	r3, [r3, #12]
 8010e8a:	681b      	ldr	r3, [r3, #0]
 8010e8c:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8010e8e:	4b2b      	ldr	r3, [pc, #172]	; (8010f3c <prvSwitchTimerLists+0xc0>)
 8010e90:	681b      	ldr	r3, [r3, #0]
 8010e92:	68db      	ldr	r3, [r3, #12]
 8010e94:	68db      	ldr	r3, [r3, #12]
 8010e96:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8010e98:	68fb      	ldr	r3, [r7, #12]
 8010e9a:	3304      	adds	r3, #4
 8010e9c:	4618      	mov	r0, r3
 8010e9e:	f7fe f863 	bl	800ef68 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8010ea2:	68fb      	ldr	r3, [r7, #12]
 8010ea4:	6a1b      	ldr	r3, [r3, #32]
 8010ea6:	68f8      	ldr	r0, [r7, #12]
 8010ea8:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8010eaa:	68fb      	ldr	r3, [r7, #12]
 8010eac:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8010eb0:	f003 0304 	and.w	r3, r3, #4
 8010eb4:	2b00      	cmp	r3, #0
 8010eb6:	d02e      	beq.n	8010f16 <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8010eb8:	68fb      	ldr	r3, [r7, #12]
 8010eba:	699b      	ldr	r3, [r3, #24]
 8010ebc:	693a      	ldr	r2, [r7, #16]
 8010ebe:	4413      	add	r3, r2
 8010ec0:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8010ec2:	68ba      	ldr	r2, [r7, #8]
 8010ec4:	693b      	ldr	r3, [r7, #16]
 8010ec6:	429a      	cmp	r2, r3
 8010ec8:	d90e      	bls.n	8010ee8 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8010eca:	68fb      	ldr	r3, [r7, #12]
 8010ecc:	68ba      	ldr	r2, [r7, #8]
 8010ece:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8010ed0:	68fb      	ldr	r3, [r7, #12]
 8010ed2:	68fa      	ldr	r2, [r7, #12]
 8010ed4:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8010ed6:	4b19      	ldr	r3, [pc, #100]	; (8010f3c <prvSwitchTimerLists+0xc0>)
 8010ed8:	681a      	ldr	r2, [r3, #0]
 8010eda:	68fb      	ldr	r3, [r7, #12]
 8010edc:	3304      	adds	r3, #4
 8010ede:	4619      	mov	r1, r3
 8010ee0:	4610      	mov	r0, r2
 8010ee2:	f7fe f808 	bl	800eef6 <vListInsert>
 8010ee6:	e016      	b.n	8010f16 <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8010ee8:	2300      	movs	r3, #0
 8010eea:	9300      	str	r3, [sp, #0]
 8010eec:	2300      	movs	r3, #0
 8010eee:	693a      	ldr	r2, [r7, #16]
 8010ef0:	2100      	movs	r1, #0
 8010ef2:	68f8      	ldr	r0, [r7, #12]
 8010ef4:	f7ff fd60 	bl	80109b8 <xTimerGenericCommand>
 8010ef8:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8010efa:	687b      	ldr	r3, [r7, #4]
 8010efc:	2b00      	cmp	r3, #0
 8010efe:	d10a      	bne.n	8010f16 <prvSwitchTimerLists+0x9a>
	__asm volatile
 8010f00:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010f04:	f383 8811 	msr	BASEPRI, r3
 8010f08:	f3bf 8f6f 	isb	sy
 8010f0c:	f3bf 8f4f 	dsb	sy
 8010f10:	603b      	str	r3, [r7, #0]
}
 8010f12:	bf00      	nop
 8010f14:	e7fe      	b.n	8010f14 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8010f16:	4b09      	ldr	r3, [pc, #36]	; (8010f3c <prvSwitchTimerLists+0xc0>)
 8010f18:	681b      	ldr	r3, [r3, #0]
 8010f1a:	681b      	ldr	r3, [r3, #0]
 8010f1c:	2b00      	cmp	r3, #0
 8010f1e:	d1b1      	bne.n	8010e84 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8010f20:	4b06      	ldr	r3, [pc, #24]	; (8010f3c <prvSwitchTimerLists+0xc0>)
 8010f22:	681b      	ldr	r3, [r3, #0]
 8010f24:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8010f26:	4b06      	ldr	r3, [pc, #24]	; (8010f40 <prvSwitchTimerLists+0xc4>)
 8010f28:	681b      	ldr	r3, [r3, #0]
 8010f2a:	4a04      	ldr	r2, [pc, #16]	; (8010f3c <prvSwitchTimerLists+0xc0>)
 8010f2c:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8010f2e:	4a04      	ldr	r2, [pc, #16]	; (8010f40 <prvSwitchTimerLists+0xc4>)
 8010f30:	697b      	ldr	r3, [r7, #20]
 8010f32:	6013      	str	r3, [r2, #0]
}
 8010f34:	bf00      	nop
 8010f36:	3718      	adds	r7, #24
 8010f38:	46bd      	mov	sp, r7
 8010f3a:	bd80      	pop	{r7, pc}
 8010f3c:	20000da0 	.word	0x20000da0
 8010f40:	20000da4 	.word	0x20000da4

08010f44 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8010f44:	b580      	push	{r7, lr}
 8010f46:	b082      	sub	sp, #8
 8010f48:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8010f4a:	f000 f96b 	bl	8011224 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8010f4e:	4b15      	ldr	r3, [pc, #84]	; (8010fa4 <prvCheckForValidListAndQueue+0x60>)
 8010f50:	681b      	ldr	r3, [r3, #0]
 8010f52:	2b00      	cmp	r3, #0
 8010f54:	d120      	bne.n	8010f98 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8010f56:	4814      	ldr	r0, [pc, #80]	; (8010fa8 <prvCheckForValidListAndQueue+0x64>)
 8010f58:	f7fd ff7c 	bl	800ee54 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8010f5c:	4813      	ldr	r0, [pc, #76]	; (8010fac <prvCheckForValidListAndQueue+0x68>)
 8010f5e:	f7fd ff79 	bl	800ee54 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8010f62:	4b13      	ldr	r3, [pc, #76]	; (8010fb0 <prvCheckForValidListAndQueue+0x6c>)
 8010f64:	4a10      	ldr	r2, [pc, #64]	; (8010fa8 <prvCheckForValidListAndQueue+0x64>)
 8010f66:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8010f68:	4b12      	ldr	r3, [pc, #72]	; (8010fb4 <prvCheckForValidListAndQueue+0x70>)
 8010f6a:	4a10      	ldr	r2, [pc, #64]	; (8010fac <prvCheckForValidListAndQueue+0x68>)
 8010f6c:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8010f6e:	2300      	movs	r3, #0
 8010f70:	9300      	str	r3, [sp, #0]
 8010f72:	4b11      	ldr	r3, [pc, #68]	; (8010fb8 <prvCheckForValidListAndQueue+0x74>)
 8010f74:	4a11      	ldr	r2, [pc, #68]	; (8010fbc <prvCheckForValidListAndQueue+0x78>)
 8010f76:	2110      	movs	r1, #16
 8010f78:	200a      	movs	r0, #10
 8010f7a:	f7fe f887 	bl	800f08c <xQueueGenericCreateStatic>
 8010f7e:	4603      	mov	r3, r0
 8010f80:	4a08      	ldr	r2, [pc, #32]	; (8010fa4 <prvCheckForValidListAndQueue+0x60>)
 8010f82:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8010f84:	4b07      	ldr	r3, [pc, #28]	; (8010fa4 <prvCheckForValidListAndQueue+0x60>)
 8010f86:	681b      	ldr	r3, [r3, #0]
 8010f88:	2b00      	cmp	r3, #0
 8010f8a:	d005      	beq.n	8010f98 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8010f8c:	4b05      	ldr	r3, [pc, #20]	; (8010fa4 <prvCheckForValidListAndQueue+0x60>)
 8010f8e:	681b      	ldr	r3, [r3, #0]
 8010f90:	490b      	ldr	r1, [pc, #44]	; (8010fc0 <prvCheckForValidListAndQueue+0x7c>)
 8010f92:	4618      	mov	r0, r3
 8010f94:	f7fe fd5a 	bl	800fa4c <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8010f98:	f000 f974 	bl	8011284 <vPortExitCritical>
}
 8010f9c:	bf00      	nop
 8010f9e:	46bd      	mov	sp, r7
 8010fa0:	bd80      	pop	{r7, pc}
 8010fa2:	bf00      	nop
 8010fa4:	20000da8 	.word	0x20000da8
 8010fa8:	20000d78 	.word	0x20000d78
 8010fac:	20000d8c 	.word	0x20000d8c
 8010fb0:	20000da0 	.word	0x20000da0
 8010fb4:	20000da4 	.word	0x20000da4
 8010fb8:	20000e54 	.word	0x20000e54
 8010fbc:	20000db4 	.word	0x20000db4
 8010fc0:	0801241c 	.word	0x0801241c

08010fc4 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8010fc4:	b480      	push	{r7}
 8010fc6:	b085      	sub	sp, #20
 8010fc8:	af00      	add	r7, sp, #0
 8010fca:	60f8      	str	r0, [r7, #12]
 8010fcc:	60b9      	str	r1, [r7, #8]
 8010fce:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8010fd0:	68fb      	ldr	r3, [r7, #12]
 8010fd2:	3b04      	subs	r3, #4
 8010fd4:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8010fd6:	68fb      	ldr	r3, [r7, #12]
 8010fd8:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8010fdc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8010fde:	68fb      	ldr	r3, [r7, #12]
 8010fe0:	3b04      	subs	r3, #4
 8010fe2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8010fe4:	68bb      	ldr	r3, [r7, #8]
 8010fe6:	f023 0201 	bic.w	r2, r3, #1
 8010fea:	68fb      	ldr	r3, [r7, #12]
 8010fec:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8010fee:	68fb      	ldr	r3, [r7, #12]
 8010ff0:	3b04      	subs	r3, #4
 8010ff2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8010ff4:	4a0c      	ldr	r2, [pc, #48]	; (8011028 <pxPortInitialiseStack+0x64>)
 8010ff6:	68fb      	ldr	r3, [r7, #12]
 8010ff8:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8010ffa:	68fb      	ldr	r3, [r7, #12]
 8010ffc:	3b14      	subs	r3, #20
 8010ffe:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8011000:	687a      	ldr	r2, [r7, #4]
 8011002:	68fb      	ldr	r3, [r7, #12]
 8011004:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8011006:	68fb      	ldr	r3, [r7, #12]
 8011008:	3b04      	subs	r3, #4
 801100a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 801100c:	68fb      	ldr	r3, [r7, #12]
 801100e:	f06f 0202 	mvn.w	r2, #2
 8011012:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8011014:	68fb      	ldr	r3, [r7, #12]
 8011016:	3b20      	subs	r3, #32
 8011018:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 801101a:	68fb      	ldr	r3, [r7, #12]
}
 801101c:	4618      	mov	r0, r3
 801101e:	3714      	adds	r7, #20
 8011020:	46bd      	mov	sp, r7
 8011022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011026:	4770      	bx	lr
 8011028:	0801102d 	.word	0x0801102d

0801102c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 801102c:	b480      	push	{r7}
 801102e:	b085      	sub	sp, #20
 8011030:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8011032:	2300      	movs	r3, #0
 8011034:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8011036:	4b12      	ldr	r3, [pc, #72]	; (8011080 <prvTaskExitError+0x54>)
 8011038:	681b      	ldr	r3, [r3, #0]
 801103a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801103e:	d00a      	beq.n	8011056 <prvTaskExitError+0x2a>
	__asm volatile
 8011040:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011044:	f383 8811 	msr	BASEPRI, r3
 8011048:	f3bf 8f6f 	isb	sy
 801104c:	f3bf 8f4f 	dsb	sy
 8011050:	60fb      	str	r3, [r7, #12]
}
 8011052:	bf00      	nop
 8011054:	e7fe      	b.n	8011054 <prvTaskExitError+0x28>
	__asm volatile
 8011056:	f04f 0350 	mov.w	r3, #80	; 0x50
 801105a:	f383 8811 	msr	BASEPRI, r3
 801105e:	f3bf 8f6f 	isb	sy
 8011062:	f3bf 8f4f 	dsb	sy
 8011066:	60bb      	str	r3, [r7, #8]
}
 8011068:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 801106a:	bf00      	nop
 801106c:	687b      	ldr	r3, [r7, #4]
 801106e:	2b00      	cmp	r3, #0
 8011070:	d0fc      	beq.n	801106c <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8011072:	bf00      	nop
 8011074:	bf00      	nop
 8011076:	3714      	adds	r7, #20
 8011078:	46bd      	mov	sp, r7
 801107a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801107e:	4770      	bx	lr
 8011080:	20000120 	.word	0x20000120
	...

08011090 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8011090:	4b07      	ldr	r3, [pc, #28]	; (80110b0 <pxCurrentTCBConst2>)
 8011092:	6819      	ldr	r1, [r3, #0]
 8011094:	6808      	ldr	r0, [r1, #0]
 8011096:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801109a:	f380 8809 	msr	PSP, r0
 801109e:	f3bf 8f6f 	isb	sy
 80110a2:	f04f 0000 	mov.w	r0, #0
 80110a6:	f380 8811 	msr	BASEPRI, r0
 80110aa:	4770      	bx	lr
 80110ac:	f3af 8000 	nop.w

080110b0 <pxCurrentTCBConst2>:
 80110b0:	20000878 	.word	0x20000878
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80110b4:	bf00      	nop
 80110b6:	bf00      	nop

080110b8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80110b8:	4808      	ldr	r0, [pc, #32]	; (80110dc <prvPortStartFirstTask+0x24>)
 80110ba:	6800      	ldr	r0, [r0, #0]
 80110bc:	6800      	ldr	r0, [r0, #0]
 80110be:	f380 8808 	msr	MSP, r0
 80110c2:	f04f 0000 	mov.w	r0, #0
 80110c6:	f380 8814 	msr	CONTROL, r0
 80110ca:	b662      	cpsie	i
 80110cc:	b661      	cpsie	f
 80110ce:	f3bf 8f4f 	dsb	sy
 80110d2:	f3bf 8f6f 	isb	sy
 80110d6:	df00      	svc	0
 80110d8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80110da:	bf00      	nop
 80110dc:	e000ed08 	.word	0xe000ed08

080110e0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80110e0:	b580      	push	{r7, lr}
 80110e2:	b086      	sub	sp, #24
 80110e4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80110e6:	4b46      	ldr	r3, [pc, #280]	; (8011200 <xPortStartScheduler+0x120>)
 80110e8:	681b      	ldr	r3, [r3, #0]
 80110ea:	4a46      	ldr	r2, [pc, #280]	; (8011204 <xPortStartScheduler+0x124>)
 80110ec:	4293      	cmp	r3, r2
 80110ee:	d10a      	bne.n	8011106 <xPortStartScheduler+0x26>
	__asm volatile
 80110f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80110f4:	f383 8811 	msr	BASEPRI, r3
 80110f8:	f3bf 8f6f 	isb	sy
 80110fc:	f3bf 8f4f 	dsb	sy
 8011100:	613b      	str	r3, [r7, #16]
}
 8011102:	bf00      	nop
 8011104:	e7fe      	b.n	8011104 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8011106:	4b3e      	ldr	r3, [pc, #248]	; (8011200 <xPortStartScheduler+0x120>)
 8011108:	681b      	ldr	r3, [r3, #0]
 801110a:	4a3f      	ldr	r2, [pc, #252]	; (8011208 <xPortStartScheduler+0x128>)
 801110c:	4293      	cmp	r3, r2
 801110e:	d10a      	bne.n	8011126 <xPortStartScheduler+0x46>
	__asm volatile
 8011110:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011114:	f383 8811 	msr	BASEPRI, r3
 8011118:	f3bf 8f6f 	isb	sy
 801111c:	f3bf 8f4f 	dsb	sy
 8011120:	60fb      	str	r3, [r7, #12]
}
 8011122:	bf00      	nop
 8011124:	e7fe      	b.n	8011124 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8011126:	4b39      	ldr	r3, [pc, #228]	; (801120c <xPortStartScheduler+0x12c>)
 8011128:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 801112a:	697b      	ldr	r3, [r7, #20]
 801112c:	781b      	ldrb	r3, [r3, #0]
 801112e:	b2db      	uxtb	r3, r3
 8011130:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8011132:	697b      	ldr	r3, [r7, #20]
 8011134:	22ff      	movs	r2, #255	; 0xff
 8011136:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8011138:	697b      	ldr	r3, [r7, #20]
 801113a:	781b      	ldrb	r3, [r3, #0]
 801113c:	b2db      	uxtb	r3, r3
 801113e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8011140:	78fb      	ldrb	r3, [r7, #3]
 8011142:	b2db      	uxtb	r3, r3
 8011144:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8011148:	b2da      	uxtb	r2, r3
 801114a:	4b31      	ldr	r3, [pc, #196]	; (8011210 <xPortStartScheduler+0x130>)
 801114c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 801114e:	4b31      	ldr	r3, [pc, #196]	; (8011214 <xPortStartScheduler+0x134>)
 8011150:	2207      	movs	r2, #7
 8011152:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8011154:	e009      	b.n	801116a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8011156:	4b2f      	ldr	r3, [pc, #188]	; (8011214 <xPortStartScheduler+0x134>)
 8011158:	681b      	ldr	r3, [r3, #0]
 801115a:	3b01      	subs	r3, #1
 801115c:	4a2d      	ldr	r2, [pc, #180]	; (8011214 <xPortStartScheduler+0x134>)
 801115e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8011160:	78fb      	ldrb	r3, [r7, #3]
 8011162:	b2db      	uxtb	r3, r3
 8011164:	005b      	lsls	r3, r3, #1
 8011166:	b2db      	uxtb	r3, r3
 8011168:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 801116a:	78fb      	ldrb	r3, [r7, #3]
 801116c:	b2db      	uxtb	r3, r3
 801116e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8011172:	2b80      	cmp	r3, #128	; 0x80
 8011174:	d0ef      	beq.n	8011156 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8011176:	4b27      	ldr	r3, [pc, #156]	; (8011214 <xPortStartScheduler+0x134>)
 8011178:	681b      	ldr	r3, [r3, #0]
 801117a:	f1c3 0307 	rsb	r3, r3, #7
 801117e:	2b04      	cmp	r3, #4
 8011180:	d00a      	beq.n	8011198 <xPortStartScheduler+0xb8>
	__asm volatile
 8011182:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011186:	f383 8811 	msr	BASEPRI, r3
 801118a:	f3bf 8f6f 	isb	sy
 801118e:	f3bf 8f4f 	dsb	sy
 8011192:	60bb      	str	r3, [r7, #8]
}
 8011194:	bf00      	nop
 8011196:	e7fe      	b.n	8011196 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8011198:	4b1e      	ldr	r3, [pc, #120]	; (8011214 <xPortStartScheduler+0x134>)
 801119a:	681b      	ldr	r3, [r3, #0]
 801119c:	021b      	lsls	r3, r3, #8
 801119e:	4a1d      	ldr	r2, [pc, #116]	; (8011214 <xPortStartScheduler+0x134>)
 80111a0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80111a2:	4b1c      	ldr	r3, [pc, #112]	; (8011214 <xPortStartScheduler+0x134>)
 80111a4:	681b      	ldr	r3, [r3, #0]
 80111a6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80111aa:	4a1a      	ldr	r2, [pc, #104]	; (8011214 <xPortStartScheduler+0x134>)
 80111ac:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80111ae:	687b      	ldr	r3, [r7, #4]
 80111b0:	b2da      	uxtb	r2, r3
 80111b2:	697b      	ldr	r3, [r7, #20]
 80111b4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80111b6:	4b18      	ldr	r3, [pc, #96]	; (8011218 <xPortStartScheduler+0x138>)
 80111b8:	681b      	ldr	r3, [r3, #0]
 80111ba:	4a17      	ldr	r2, [pc, #92]	; (8011218 <xPortStartScheduler+0x138>)
 80111bc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80111c0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80111c2:	4b15      	ldr	r3, [pc, #84]	; (8011218 <xPortStartScheduler+0x138>)
 80111c4:	681b      	ldr	r3, [r3, #0]
 80111c6:	4a14      	ldr	r2, [pc, #80]	; (8011218 <xPortStartScheduler+0x138>)
 80111c8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80111cc:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80111ce:	f000 f8dd 	bl	801138c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80111d2:	4b12      	ldr	r3, [pc, #72]	; (801121c <xPortStartScheduler+0x13c>)
 80111d4:	2200      	movs	r2, #0
 80111d6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80111d8:	f000 f8fc 	bl	80113d4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80111dc:	4b10      	ldr	r3, [pc, #64]	; (8011220 <xPortStartScheduler+0x140>)
 80111de:	681b      	ldr	r3, [r3, #0]
 80111e0:	4a0f      	ldr	r2, [pc, #60]	; (8011220 <xPortStartScheduler+0x140>)
 80111e2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 80111e6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80111e8:	f7ff ff66 	bl	80110b8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80111ec:	f7ff f850 	bl	8010290 <vTaskSwitchContext>
	prvTaskExitError();
 80111f0:	f7ff ff1c 	bl	801102c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80111f4:	2300      	movs	r3, #0
}
 80111f6:	4618      	mov	r0, r3
 80111f8:	3718      	adds	r7, #24
 80111fa:	46bd      	mov	sp, r7
 80111fc:	bd80      	pop	{r7, pc}
 80111fe:	bf00      	nop
 8011200:	e000ed00 	.word	0xe000ed00
 8011204:	410fc271 	.word	0x410fc271
 8011208:	410fc270 	.word	0x410fc270
 801120c:	e000e400 	.word	0xe000e400
 8011210:	20000ea4 	.word	0x20000ea4
 8011214:	20000ea8 	.word	0x20000ea8
 8011218:	e000ed20 	.word	0xe000ed20
 801121c:	20000120 	.word	0x20000120
 8011220:	e000ef34 	.word	0xe000ef34

08011224 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8011224:	b480      	push	{r7}
 8011226:	b083      	sub	sp, #12
 8011228:	af00      	add	r7, sp, #0
	__asm volatile
 801122a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801122e:	f383 8811 	msr	BASEPRI, r3
 8011232:	f3bf 8f6f 	isb	sy
 8011236:	f3bf 8f4f 	dsb	sy
 801123a:	607b      	str	r3, [r7, #4]
}
 801123c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 801123e:	4b0f      	ldr	r3, [pc, #60]	; (801127c <vPortEnterCritical+0x58>)
 8011240:	681b      	ldr	r3, [r3, #0]
 8011242:	3301      	adds	r3, #1
 8011244:	4a0d      	ldr	r2, [pc, #52]	; (801127c <vPortEnterCritical+0x58>)
 8011246:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8011248:	4b0c      	ldr	r3, [pc, #48]	; (801127c <vPortEnterCritical+0x58>)
 801124a:	681b      	ldr	r3, [r3, #0]
 801124c:	2b01      	cmp	r3, #1
 801124e:	d10f      	bne.n	8011270 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8011250:	4b0b      	ldr	r3, [pc, #44]	; (8011280 <vPortEnterCritical+0x5c>)
 8011252:	681b      	ldr	r3, [r3, #0]
 8011254:	b2db      	uxtb	r3, r3
 8011256:	2b00      	cmp	r3, #0
 8011258:	d00a      	beq.n	8011270 <vPortEnterCritical+0x4c>
	__asm volatile
 801125a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801125e:	f383 8811 	msr	BASEPRI, r3
 8011262:	f3bf 8f6f 	isb	sy
 8011266:	f3bf 8f4f 	dsb	sy
 801126a:	603b      	str	r3, [r7, #0]
}
 801126c:	bf00      	nop
 801126e:	e7fe      	b.n	801126e <vPortEnterCritical+0x4a>
	}
}
 8011270:	bf00      	nop
 8011272:	370c      	adds	r7, #12
 8011274:	46bd      	mov	sp, r7
 8011276:	f85d 7b04 	ldr.w	r7, [sp], #4
 801127a:	4770      	bx	lr
 801127c:	20000120 	.word	0x20000120
 8011280:	e000ed04 	.word	0xe000ed04

08011284 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8011284:	b480      	push	{r7}
 8011286:	b083      	sub	sp, #12
 8011288:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 801128a:	4b12      	ldr	r3, [pc, #72]	; (80112d4 <vPortExitCritical+0x50>)
 801128c:	681b      	ldr	r3, [r3, #0]
 801128e:	2b00      	cmp	r3, #0
 8011290:	d10a      	bne.n	80112a8 <vPortExitCritical+0x24>
	__asm volatile
 8011292:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011296:	f383 8811 	msr	BASEPRI, r3
 801129a:	f3bf 8f6f 	isb	sy
 801129e:	f3bf 8f4f 	dsb	sy
 80112a2:	607b      	str	r3, [r7, #4]
}
 80112a4:	bf00      	nop
 80112a6:	e7fe      	b.n	80112a6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 80112a8:	4b0a      	ldr	r3, [pc, #40]	; (80112d4 <vPortExitCritical+0x50>)
 80112aa:	681b      	ldr	r3, [r3, #0]
 80112ac:	3b01      	subs	r3, #1
 80112ae:	4a09      	ldr	r2, [pc, #36]	; (80112d4 <vPortExitCritical+0x50>)
 80112b0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80112b2:	4b08      	ldr	r3, [pc, #32]	; (80112d4 <vPortExitCritical+0x50>)
 80112b4:	681b      	ldr	r3, [r3, #0]
 80112b6:	2b00      	cmp	r3, #0
 80112b8:	d105      	bne.n	80112c6 <vPortExitCritical+0x42>
 80112ba:	2300      	movs	r3, #0
 80112bc:	603b      	str	r3, [r7, #0]
	__asm volatile
 80112be:	683b      	ldr	r3, [r7, #0]
 80112c0:	f383 8811 	msr	BASEPRI, r3
}
 80112c4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80112c6:	bf00      	nop
 80112c8:	370c      	adds	r7, #12
 80112ca:	46bd      	mov	sp, r7
 80112cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80112d0:	4770      	bx	lr
 80112d2:	bf00      	nop
 80112d4:	20000120 	.word	0x20000120
	...

080112e0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80112e0:	f3ef 8009 	mrs	r0, PSP
 80112e4:	f3bf 8f6f 	isb	sy
 80112e8:	4b15      	ldr	r3, [pc, #84]	; (8011340 <pxCurrentTCBConst>)
 80112ea:	681a      	ldr	r2, [r3, #0]
 80112ec:	f01e 0f10 	tst.w	lr, #16
 80112f0:	bf08      	it	eq
 80112f2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80112f6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80112fa:	6010      	str	r0, [r2, #0]
 80112fc:	e92d 0009 	stmdb	sp!, {r0, r3}
 8011300:	f04f 0050 	mov.w	r0, #80	; 0x50
 8011304:	f380 8811 	msr	BASEPRI, r0
 8011308:	f3bf 8f4f 	dsb	sy
 801130c:	f3bf 8f6f 	isb	sy
 8011310:	f7fe ffbe 	bl	8010290 <vTaskSwitchContext>
 8011314:	f04f 0000 	mov.w	r0, #0
 8011318:	f380 8811 	msr	BASEPRI, r0
 801131c:	bc09      	pop	{r0, r3}
 801131e:	6819      	ldr	r1, [r3, #0]
 8011320:	6808      	ldr	r0, [r1, #0]
 8011322:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011326:	f01e 0f10 	tst.w	lr, #16
 801132a:	bf08      	it	eq
 801132c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8011330:	f380 8809 	msr	PSP, r0
 8011334:	f3bf 8f6f 	isb	sy
 8011338:	4770      	bx	lr
 801133a:	bf00      	nop
 801133c:	f3af 8000 	nop.w

08011340 <pxCurrentTCBConst>:
 8011340:	20000878 	.word	0x20000878
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8011344:	bf00      	nop
 8011346:	bf00      	nop

08011348 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8011348:	b580      	push	{r7, lr}
 801134a:	b082      	sub	sp, #8
 801134c:	af00      	add	r7, sp, #0
	__asm volatile
 801134e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011352:	f383 8811 	msr	BASEPRI, r3
 8011356:	f3bf 8f6f 	isb	sy
 801135a:	f3bf 8f4f 	dsb	sy
 801135e:	607b      	str	r3, [r7, #4]
}
 8011360:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8011362:	f7fe fedb 	bl	801011c <xTaskIncrementTick>
 8011366:	4603      	mov	r3, r0
 8011368:	2b00      	cmp	r3, #0
 801136a:	d003      	beq.n	8011374 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 801136c:	4b06      	ldr	r3, [pc, #24]	; (8011388 <xPortSysTickHandler+0x40>)
 801136e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8011372:	601a      	str	r2, [r3, #0]
 8011374:	2300      	movs	r3, #0
 8011376:	603b      	str	r3, [r7, #0]
	__asm volatile
 8011378:	683b      	ldr	r3, [r7, #0]
 801137a:	f383 8811 	msr	BASEPRI, r3
}
 801137e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8011380:	bf00      	nop
 8011382:	3708      	adds	r7, #8
 8011384:	46bd      	mov	sp, r7
 8011386:	bd80      	pop	{r7, pc}
 8011388:	e000ed04 	.word	0xe000ed04

0801138c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 801138c:	b480      	push	{r7}
 801138e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8011390:	4b0b      	ldr	r3, [pc, #44]	; (80113c0 <vPortSetupTimerInterrupt+0x34>)
 8011392:	2200      	movs	r2, #0
 8011394:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8011396:	4b0b      	ldr	r3, [pc, #44]	; (80113c4 <vPortSetupTimerInterrupt+0x38>)
 8011398:	2200      	movs	r2, #0
 801139a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 801139c:	4b0a      	ldr	r3, [pc, #40]	; (80113c8 <vPortSetupTimerInterrupt+0x3c>)
 801139e:	681b      	ldr	r3, [r3, #0]
 80113a0:	4a0a      	ldr	r2, [pc, #40]	; (80113cc <vPortSetupTimerInterrupt+0x40>)
 80113a2:	fba2 2303 	umull	r2, r3, r2, r3
 80113a6:	099b      	lsrs	r3, r3, #6
 80113a8:	4a09      	ldr	r2, [pc, #36]	; (80113d0 <vPortSetupTimerInterrupt+0x44>)
 80113aa:	3b01      	subs	r3, #1
 80113ac:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80113ae:	4b04      	ldr	r3, [pc, #16]	; (80113c0 <vPortSetupTimerInterrupt+0x34>)
 80113b0:	2207      	movs	r2, #7
 80113b2:	601a      	str	r2, [r3, #0]
}
 80113b4:	bf00      	nop
 80113b6:	46bd      	mov	sp, r7
 80113b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80113bc:	4770      	bx	lr
 80113be:	bf00      	nop
 80113c0:	e000e010 	.word	0xe000e010
 80113c4:	e000e018 	.word	0xe000e018
 80113c8:	20000000 	.word	0x20000000
 80113cc:	10624dd3 	.word	0x10624dd3
 80113d0:	e000e014 	.word	0xe000e014

080113d4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80113d4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 80113e4 <vPortEnableVFP+0x10>
 80113d8:	6801      	ldr	r1, [r0, #0]
 80113da:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80113de:	6001      	str	r1, [r0, #0]
 80113e0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80113e2:	bf00      	nop
 80113e4:	e000ed88 	.word	0xe000ed88

080113e8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80113e8:	b480      	push	{r7}
 80113ea:	b085      	sub	sp, #20
 80113ec:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80113ee:	f3ef 8305 	mrs	r3, IPSR
 80113f2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80113f4:	68fb      	ldr	r3, [r7, #12]
 80113f6:	2b0f      	cmp	r3, #15
 80113f8:	d914      	bls.n	8011424 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80113fa:	4a17      	ldr	r2, [pc, #92]	; (8011458 <vPortValidateInterruptPriority+0x70>)
 80113fc:	68fb      	ldr	r3, [r7, #12]
 80113fe:	4413      	add	r3, r2
 8011400:	781b      	ldrb	r3, [r3, #0]
 8011402:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8011404:	4b15      	ldr	r3, [pc, #84]	; (801145c <vPortValidateInterruptPriority+0x74>)
 8011406:	781b      	ldrb	r3, [r3, #0]
 8011408:	7afa      	ldrb	r2, [r7, #11]
 801140a:	429a      	cmp	r2, r3
 801140c:	d20a      	bcs.n	8011424 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 801140e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011412:	f383 8811 	msr	BASEPRI, r3
 8011416:	f3bf 8f6f 	isb	sy
 801141a:	f3bf 8f4f 	dsb	sy
 801141e:	607b      	str	r3, [r7, #4]
}
 8011420:	bf00      	nop
 8011422:	e7fe      	b.n	8011422 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8011424:	4b0e      	ldr	r3, [pc, #56]	; (8011460 <vPortValidateInterruptPriority+0x78>)
 8011426:	681b      	ldr	r3, [r3, #0]
 8011428:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 801142c:	4b0d      	ldr	r3, [pc, #52]	; (8011464 <vPortValidateInterruptPriority+0x7c>)
 801142e:	681b      	ldr	r3, [r3, #0]
 8011430:	429a      	cmp	r2, r3
 8011432:	d90a      	bls.n	801144a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8011434:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011438:	f383 8811 	msr	BASEPRI, r3
 801143c:	f3bf 8f6f 	isb	sy
 8011440:	f3bf 8f4f 	dsb	sy
 8011444:	603b      	str	r3, [r7, #0]
}
 8011446:	bf00      	nop
 8011448:	e7fe      	b.n	8011448 <vPortValidateInterruptPriority+0x60>
	}
 801144a:	bf00      	nop
 801144c:	3714      	adds	r7, #20
 801144e:	46bd      	mov	sp, r7
 8011450:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011454:	4770      	bx	lr
 8011456:	bf00      	nop
 8011458:	e000e3f0 	.word	0xe000e3f0
 801145c:	20000ea4 	.word	0x20000ea4
 8011460:	e000ed0c 	.word	0xe000ed0c
 8011464:	20000ea8 	.word	0x20000ea8

08011468 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8011468:	b580      	push	{r7, lr}
 801146a:	b08a      	sub	sp, #40	; 0x28
 801146c:	af00      	add	r7, sp, #0
 801146e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8011470:	2300      	movs	r3, #0
 8011472:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8011474:	f7fe fd84 	bl	800ff80 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8011478:	4b5b      	ldr	r3, [pc, #364]	; (80115e8 <pvPortMalloc+0x180>)
 801147a:	681b      	ldr	r3, [r3, #0]
 801147c:	2b00      	cmp	r3, #0
 801147e:	d101      	bne.n	8011484 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8011480:	f000 f920 	bl	80116c4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8011484:	4b59      	ldr	r3, [pc, #356]	; (80115ec <pvPortMalloc+0x184>)
 8011486:	681a      	ldr	r2, [r3, #0]
 8011488:	687b      	ldr	r3, [r7, #4]
 801148a:	4013      	ands	r3, r2
 801148c:	2b00      	cmp	r3, #0
 801148e:	f040 8093 	bne.w	80115b8 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8011492:	687b      	ldr	r3, [r7, #4]
 8011494:	2b00      	cmp	r3, #0
 8011496:	d01d      	beq.n	80114d4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8011498:	2208      	movs	r2, #8
 801149a:	687b      	ldr	r3, [r7, #4]
 801149c:	4413      	add	r3, r2
 801149e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80114a0:	687b      	ldr	r3, [r7, #4]
 80114a2:	f003 0307 	and.w	r3, r3, #7
 80114a6:	2b00      	cmp	r3, #0
 80114a8:	d014      	beq.n	80114d4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80114aa:	687b      	ldr	r3, [r7, #4]
 80114ac:	f023 0307 	bic.w	r3, r3, #7
 80114b0:	3308      	adds	r3, #8
 80114b2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80114b4:	687b      	ldr	r3, [r7, #4]
 80114b6:	f003 0307 	and.w	r3, r3, #7
 80114ba:	2b00      	cmp	r3, #0
 80114bc:	d00a      	beq.n	80114d4 <pvPortMalloc+0x6c>
	__asm volatile
 80114be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80114c2:	f383 8811 	msr	BASEPRI, r3
 80114c6:	f3bf 8f6f 	isb	sy
 80114ca:	f3bf 8f4f 	dsb	sy
 80114ce:	617b      	str	r3, [r7, #20]
}
 80114d0:	bf00      	nop
 80114d2:	e7fe      	b.n	80114d2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80114d4:	687b      	ldr	r3, [r7, #4]
 80114d6:	2b00      	cmp	r3, #0
 80114d8:	d06e      	beq.n	80115b8 <pvPortMalloc+0x150>
 80114da:	4b45      	ldr	r3, [pc, #276]	; (80115f0 <pvPortMalloc+0x188>)
 80114dc:	681b      	ldr	r3, [r3, #0]
 80114de:	687a      	ldr	r2, [r7, #4]
 80114e0:	429a      	cmp	r2, r3
 80114e2:	d869      	bhi.n	80115b8 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80114e4:	4b43      	ldr	r3, [pc, #268]	; (80115f4 <pvPortMalloc+0x18c>)
 80114e6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80114e8:	4b42      	ldr	r3, [pc, #264]	; (80115f4 <pvPortMalloc+0x18c>)
 80114ea:	681b      	ldr	r3, [r3, #0]
 80114ec:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80114ee:	e004      	b.n	80114fa <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 80114f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80114f2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80114f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80114f6:	681b      	ldr	r3, [r3, #0]
 80114f8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80114fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80114fc:	685b      	ldr	r3, [r3, #4]
 80114fe:	687a      	ldr	r2, [r7, #4]
 8011500:	429a      	cmp	r2, r3
 8011502:	d903      	bls.n	801150c <pvPortMalloc+0xa4>
 8011504:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011506:	681b      	ldr	r3, [r3, #0]
 8011508:	2b00      	cmp	r3, #0
 801150a:	d1f1      	bne.n	80114f0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 801150c:	4b36      	ldr	r3, [pc, #216]	; (80115e8 <pvPortMalloc+0x180>)
 801150e:	681b      	ldr	r3, [r3, #0]
 8011510:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8011512:	429a      	cmp	r2, r3
 8011514:	d050      	beq.n	80115b8 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8011516:	6a3b      	ldr	r3, [r7, #32]
 8011518:	681b      	ldr	r3, [r3, #0]
 801151a:	2208      	movs	r2, #8
 801151c:	4413      	add	r3, r2
 801151e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8011520:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011522:	681a      	ldr	r2, [r3, #0]
 8011524:	6a3b      	ldr	r3, [r7, #32]
 8011526:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8011528:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801152a:	685a      	ldr	r2, [r3, #4]
 801152c:	687b      	ldr	r3, [r7, #4]
 801152e:	1ad2      	subs	r2, r2, r3
 8011530:	2308      	movs	r3, #8
 8011532:	005b      	lsls	r3, r3, #1
 8011534:	429a      	cmp	r2, r3
 8011536:	d91f      	bls.n	8011578 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8011538:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801153a:	687b      	ldr	r3, [r7, #4]
 801153c:	4413      	add	r3, r2
 801153e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8011540:	69bb      	ldr	r3, [r7, #24]
 8011542:	f003 0307 	and.w	r3, r3, #7
 8011546:	2b00      	cmp	r3, #0
 8011548:	d00a      	beq.n	8011560 <pvPortMalloc+0xf8>
	__asm volatile
 801154a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801154e:	f383 8811 	msr	BASEPRI, r3
 8011552:	f3bf 8f6f 	isb	sy
 8011556:	f3bf 8f4f 	dsb	sy
 801155a:	613b      	str	r3, [r7, #16]
}
 801155c:	bf00      	nop
 801155e:	e7fe      	b.n	801155e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8011560:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011562:	685a      	ldr	r2, [r3, #4]
 8011564:	687b      	ldr	r3, [r7, #4]
 8011566:	1ad2      	subs	r2, r2, r3
 8011568:	69bb      	ldr	r3, [r7, #24]
 801156a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 801156c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801156e:	687a      	ldr	r2, [r7, #4]
 8011570:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8011572:	69b8      	ldr	r0, [r7, #24]
 8011574:	f000 f908 	bl	8011788 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8011578:	4b1d      	ldr	r3, [pc, #116]	; (80115f0 <pvPortMalloc+0x188>)
 801157a:	681a      	ldr	r2, [r3, #0]
 801157c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801157e:	685b      	ldr	r3, [r3, #4]
 8011580:	1ad3      	subs	r3, r2, r3
 8011582:	4a1b      	ldr	r2, [pc, #108]	; (80115f0 <pvPortMalloc+0x188>)
 8011584:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8011586:	4b1a      	ldr	r3, [pc, #104]	; (80115f0 <pvPortMalloc+0x188>)
 8011588:	681a      	ldr	r2, [r3, #0]
 801158a:	4b1b      	ldr	r3, [pc, #108]	; (80115f8 <pvPortMalloc+0x190>)
 801158c:	681b      	ldr	r3, [r3, #0]
 801158e:	429a      	cmp	r2, r3
 8011590:	d203      	bcs.n	801159a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8011592:	4b17      	ldr	r3, [pc, #92]	; (80115f0 <pvPortMalloc+0x188>)
 8011594:	681b      	ldr	r3, [r3, #0]
 8011596:	4a18      	ldr	r2, [pc, #96]	; (80115f8 <pvPortMalloc+0x190>)
 8011598:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 801159a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801159c:	685a      	ldr	r2, [r3, #4]
 801159e:	4b13      	ldr	r3, [pc, #76]	; (80115ec <pvPortMalloc+0x184>)
 80115a0:	681b      	ldr	r3, [r3, #0]
 80115a2:	431a      	orrs	r2, r3
 80115a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80115a6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80115a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80115aa:	2200      	movs	r2, #0
 80115ac:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 80115ae:	4b13      	ldr	r3, [pc, #76]	; (80115fc <pvPortMalloc+0x194>)
 80115b0:	681b      	ldr	r3, [r3, #0]
 80115b2:	3301      	adds	r3, #1
 80115b4:	4a11      	ldr	r2, [pc, #68]	; (80115fc <pvPortMalloc+0x194>)
 80115b6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80115b8:	f7fe fcf0 	bl	800ff9c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80115bc:	69fb      	ldr	r3, [r7, #28]
 80115be:	f003 0307 	and.w	r3, r3, #7
 80115c2:	2b00      	cmp	r3, #0
 80115c4:	d00a      	beq.n	80115dc <pvPortMalloc+0x174>
	__asm volatile
 80115c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80115ca:	f383 8811 	msr	BASEPRI, r3
 80115ce:	f3bf 8f6f 	isb	sy
 80115d2:	f3bf 8f4f 	dsb	sy
 80115d6:	60fb      	str	r3, [r7, #12]
}
 80115d8:	bf00      	nop
 80115da:	e7fe      	b.n	80115da <pvPortMalloc+0x172>
	return pvReturn;
 80115dc:	69fb      	ldr	r3, [r7, #28]
}
 80115de:	4618      	mov	r0, r3
 80115e0:	3728      	adds	r7, #40	; 0x28
 80115e2:	46bd      	mov	sp, r7
 80115e4:	bd80      	pop	{r7, pc}
 80115e6:	bf00      	nop
 80115e8:	20004ab4 	.word	0x20004ab4
 80115ec:	20004ac8 	.word	0x20004ac8
 80115f0:	20004ab8 	.word	0x20004ab8
 80115f4:	20004aac 	.word	0x20004aac
 80115f8:	20004abc 	.word	0x20004abc
 80115fc:	20004ac0 	.word	0x20004ac0

08011600 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8011600:	b580      	push	{r7, lr}
 8011602:	b086      	sub	sp, #24
 8011604:	af00      	add	r7, sp, #0
 8011606:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8011608:	687b      	ldr	r3, [r7, #4]
 801160a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 801160c:	687b      	ldr	r3, [r7, #4]
 801160e:	2b00      	cmp	r3, #0
 8011610:	d04d      	beq.n	80116ae <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8011612:	2308      	movs	r3, #8
 8011614:	425b      	negs	r3, r3
 8011616:	697a      	ldr	r2, [r7, #20]
 8011618:	4413      	add	r3, r2
 801161a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 801161c:	697b      	ldr	r3, [r7, #20]
 801161e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8011620:	693b      	ldr	r3, [r7, #16]
 8011622:	685a      	ldr	r2, [r3, #4]
 8011624:	4b24      	ldr	r3, [pc, #144]	; (80116b8 <vPortFree+0xb8>)
 8011626:	681b      	ldr	r3, [r3, #0]
 8011628:	4013      	ands	r3, r2
 801162a:	2b00      	cmp	r3, #0
 801162c:	d10a      	bne.n	8011644 <vPortFree+0x44>
	__asm volatile
 801162e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011632:	f383 8811 	msr	BASEPRI, r3
 8011636:	f3bf 8f6f 	isb	sy
 801163a:	f3bf 8f4f 	dsb	sy
 801163e:	60fb      	str	r3, [r7, #12]
}
 8011640:	bf00      	nop
 8011642:	e7fe      	b.n	8011642 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8011644:	693b      	ldr	r3, [r7, #16]
 8011646:	681b      	ldr	r3, [r3, #0]
 8011648:	2b00      	cmp	r3, #0
 801164a:	d00a      	beq.n	8011662 <vPortFree+0x62>
	__asm volatile
 801164c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011650:	f383 8811 	msr	BASEPRI, r3
 8011654:	f3bf 8f6f 	isb	sy
 8011658:	f3bf 8f4f 	dsb	sy
 801165c:	60bb      	str	r3, [r7, #8]
}
 801165e:	bf00      	nop
 8011660:	e7fe      	b.n	8011660 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8011662:	693b      	ldr	r3, [r7, #16]
 8011664:	685a      	ldr	r2, [r3, #4]
 8011666:	4b14      	ldr	r3, [pc, #80]	; (80116b8 <vPortFree+0xb8>)
 8011668:	681b      	ldr	r3, [r3, #0]
 801166a:	4013      	ands	r3, r2
 801166c:	2b00      	cmp	r3, #0
 801166e:	d01e      	beq.n	80116ae <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8011670:	693b      	ldr	r3, [r7, #16]
 8011672:	681b      	ldr	r3, [r3, #0]
 8011674:	2b00      	cmp	r3, #0
 8011676:	d11a      	bne.n	80116ae <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8011678:	693b      	ldr	r3, [r7, #16]
 801167a:	685a      	ldr	r2, [r3, #4]
 801167c:	4b0e      	ldr	r3, [pc, #56]	; (80116b8 <vPortFree+0xb8>)
 801167e:	681b      	ldr	r3, [r3, #0]
 8011680:	43db      	mvns	r3, r3
 8011682:	401a      	ands	r2, r3
 8011684:	693b      	ldr	r3, [r7, #16]
 8011686:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8011688:	f7fe fc7a 	bl	800ff80 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 801168c:	693b      	ldr	r3, [r7, #16]
 801168e:	685a      	ldr	r2, [r3, #4]
 8011690:	4b0a      	ldr	r3, [pc, #40]	; (80116bc <vPortFree+0xbc>)
 8011692:	681b      	ldr	r3, [r3, #0]
 8011694:	4413      	add	r3, r2
 8011696:	4a09      	ldr	r2, [pc, #36]	; (80116bc <vPortFree+0xbc>)
 8011698:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 801169a:	6938      	ldr	r0, [r7, #16]
 801169c:	f000 f874 	bl	8011788 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 80116a0:	4b07      	ldr	r3, [pc, #28]	; (80116c0 <vPortFree+0xc0>)
 80116a2:	681b      	ldr	r3, [r3, #0]
 80116a4:	3301      	adds	r3, #1
 80116a6:	4a06      	ldr	r2, [pc, #24]	; (80116c0 <vPortFree+0xc0>)
 80116a8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 80116aa:	f7fe fc77 	bl	800ff9c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80116ae:	bf00      	nop
 80116b0:	3718      	adds	r7, #24
 80116b2:	46bd      	mov	sp, r7
 80116b4:	bd80      	pop	{r7, pc}
 80116b6:	bf00      	nop
 80116b8:	20004ac8 	.word	0x20004ac8
 80116bc:	20004ab8 	.word	0x20004ab8
 80116c0:	20004ac4 	.word	0x20004ac4

080116c4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80116c4:	b480      	push	{r7}
 80116c6:	b085      	sub	sp, #20
 80116c8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80116ca:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 80116ce:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80116d0:	4b27      	ldr	r3, [pc, #156]	; (8011770 <prvHeapInit+0xac>)
 80116d2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80116d4:	68fb      	ldr	r3, [r7, #12]
 80116d6:	f003 0307 	and.w	r3, r3, #7
 80116da:	2b00      	cmp	r3, #0
 80116dc:	d00c      	beq.n	80116f8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80116de:	68fb      	ldr	r3, [r7, #12]
 80116e0:	3307      	adds	r3, #7
 80116e2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80116e4:	68fb      	ldr	r3, [r7, #12]
 80116e6:	f023 0307 	bic.w	r3, r3, #7
 80116ea:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80116ec:	68ba      	ldr	r2, [r7, #8]
 80116ee:	68fb      	ldr	r3, [r7, #12]
 80116f0:	1ad3      	subs	r3, r2, r3
 80116f2:	4a1f      	ldr	r2, [pc, #124]	; (8011770 <prvHeapInit+0xac>)
 80116f4:	4413      	add	r3, r2
 80116f6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80116f8:	68fb      	ldr	r3, [r7, #12]
 80116fa:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80116fc:	4a1d      	ldr	r2, [pc, #116]	; (8011774 <prvHeapInit+0xb0>)
 80116fe:	687b      	ldr	r3, [r7, #4]
 8011700:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8011702:	4b1c      	ldr	r3, [pc, #112]	; (8011774 <prvHeapInit+0xb0>)
 8011704:	2200      	movs	r2, #0
 8011706:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8011708:	687b      	ldr	r3, [r7, #4]
 801170a:	68ba      	ldr	r2, [r7, #8]
 801170c:	4413      	add	r3, r2
 801170e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8011710:	2208      	movs	r2, #8
 8011712:	68fb      	ldr	r3, [r7, #12]
 8011714:	1a9b      	subs	r3, r3, r2
 8011716:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8011718:	68fb      	ldr	r3, [r7, #12]
 801171a:	f023 0307 	bic.w	r3, r3, #7
 801171e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8011720:	68fb      	ldr	r3, [r7, #12]
 8011722:	4a15      	ldr	r2, [pc, #84]	; (8011778 <prvHeapInit+0xb4>)
 8011724:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8011726:	4b14      	ldr	r3, [pc, #80]	; (8011778 <prvHeapInit+0xb4>)
 8011728:	681b      	ldr	r3, [r3, #0]
 801172a:	2200      	movs	r2, #0
 801172c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 801172e:	4b12      	ldr	r3, [pc, #72]	; (8011778 <prvHeapInit+0xb4>)
 8011730:	681b      	ldr	r3, [r3, #0]
 8011732:	2200      	movs	r2, #0
 8011734:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8011736:	687b      	ldr	r3, [r7, #4]
 8011738:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 801173a:	683b      	ldr	r3, [r7, #0]
 801173c:	68fa      	ldr	r2, [r7, #12]
 801173e:	1ad2      	subs	r2, r2, r3
 8011740:	683b      	ldr	r3, [r7, #0]
 8011742:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8011744:	4b0c      	ldr	r3, [pc, #48]	; (8011778 <prvHeapInit+0xb4>)
 8011746:	681a      	ldr	r2, [r3, #0]
 8011748:	683b      	ldr	r3, [r7, #0]
 801174a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 801174c:	683b      	ldr	r3, [r7, #0]
 801174e:	685b      	ldr	r3, [r3, #4]
 8011750:	4a0a      	ldr	r2, [pc, #40]	; (801177c <prvHeapInit+0xb8>)
 8011752:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8011754:	683b      	ldr	r3, [r7, #0]
 8011756:	685b      	ldr	r3, [r3, #4]
 8011758:	4a09      	ldr	r2, [pc, #36]	; (8011780 <prvHeapInit+0xbc>)
 801175a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 801175c:	4b09      	ldr	r3, [pc, #36]	; (8011784 <prvHeapInit+0xc0>)
 801175e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8011762:	601a      	str	r2, [r3, #0]
}
 8011764:	bf00      	nop
 8011766:	3714      	adds	r7, #20
 8011768:	46bd      	mov	sp, r7
 801176a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801176e:	4770      	bx	lr
 8011770:	20000eac 	.word	0x20000eac
 8011774:	20004aac 	.word	0x20004aac
 8011778:	20004ab4 	.word	0x20004ab4
 801177c:	20004abc 	.word	0x20004abc
 8011780:	20004ab8 	.word	0x20004ab8
 8011784:	20004ac8 	.word	0x20004ac8

08011788 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8011788:	b480      	push	{r7}
 801178a:	b085      	sub	sp, #20
 801178c:	af00      	add	r7, sp, #0
 801178e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8011790:	4b28      	ldr	r3, [pc, #160]	; (8011834 <prvInsertBlockIntoFreeList+0xac>)
 8011792:	60fb      	str	r3, [r7, #12]
 8011794:	e002      	b.n	801179c <prvInsertBlockIntoFreeList+0x14>
 8011796:	68fb      	ldr	r3, [r7, #12]
 8011798:	681b      	ldr	r3, [r3, #0]
 801179a:	60fb      	str	r3, [r7, #12]
 801179c:	68fb      	ldr	r3, [r7, #12]
 801179e:	681b      	ldr	r3, [r3, #0]
 80117a0:	687a      	ldr	r2, [r7, #4]
 80117a2:	429a      	cmp	r2, r3
 80117a4:	d8f7      	bhi.n	8011796 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80117a6:	68fb      	ldr	r3, [r7, #12]
 80117a8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80117aa:	68fb      	ldr	r3, [r7, #12]
 80117ac:	685b      	ldr	r3, [r3, #4]
 80117ae:	68ba      	ldr	r2, [r7, #8]
 80117b0:	4413      	add	r3, r2
 80117b2:	687a      	ldr	r2, [r7, #4]
 80117b4:	429a      	cmp	r2, r3
 80117b6:	d108      	bne.n	80117ca <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80117b8:	68fb      	ldr	r3, [r7, #12]
 80117ba:	685a      	ldr	r2, [r3, #4]
 80117bc:	687b      	ldr	r3, [r7, #4]
 80117be:	685b      	ldr	r3, [r3, #4]
 80117c0:	441a      	add	r2, r3
 80117c2:	68fb      	ldr	r3, [r7, #12]
 80117c4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80117c6:	68fb      	ldr	r3, [r7, #12]
 80117c8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80117ca:	687b      	ldr	r3, [r7, #4]
 80117cc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80117ce:	687b      	ldr	r3, [r7, #4]
 80117d0:	685b      	ldr	r3, [r3, #4]
 80117d2:	68ba      	ldr	r2, [r7, #8]
 80117d4:	441a      	add	r2, r3
 80117d6:	68fb      	ldr	r3, [r7, #12]
 80117d8:	681b      	ldr	r3, [r3, #0]
 80117da:	429a      	cmp	r2, r3
 80117dc:	d118      	bne.n	8011810 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80117de:	68fb      	ldr	r3, [r7, #12]
 80117e0:	681a      	ldr	r2, [r3, #0]
 80117e2:	4b15      	ldr	r3, [pc, #84]	; (8011838 <prvInsertBlockIntoFreeList+0xb0>)
 80117e4:	681b      	ldr	r3, [r3, #0]
 80117e6:	429a      	cmp	r2, r3
 80117e8:	d00d      	beq.n	8011806 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80117ea:	687b      	ldr	r3, [r7, #4]
 80117ec:	685a      	ldr	r2, [r3, #4]
 80117ee:	68fb      	ldr	r3, [r7, #12]
 80117f0:	681b      	ldr	r3, [r3, #0]
 80117f2:	685b      	ldr	r3, [r3, #4]
 80117f4:	441a      	add	r2, r3
 80117f6:	687b      	ldr	r3, [r7, #4]
 80117f8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80117fa:	68fb      	ldr	r3, [r7, #12]
 80117fc:	681b      	ldr	r3, [r3, #0]
 80117fe:	681a      	ldr	r2, [r3, #0]
 8011800:	687b      	ldr	r3, [r7, #4]
 8011802:	601a      	str	r2, [r3, #0]
 8011804:	e008      	b.n	8011818 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8011806:	4b0c      	ldr	r3, [pc, #48]	; (8011838 <prvInsertBlockIntoFreeList+0xb0>)
 8011808:	681a      	ldr	r2, [r3, #0]
 801180a:	687b      	ldr	r3, [r7, #4]
 801180c:	601a      	str	r2, [r3, #0]
 801180e:	e003      	b.n	8011818 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8011810:	68fb      	ldr	r3, [r7, #12]
 8011812:	681a      	ldr	r2, [r3, #0]
 8011814:	687b      	ldr	r3, [r7, #4]
 8011816:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8011818:	68fa      	ldr	r2, [r7, #12]
 801181a:	687b      	ldr	r3, [r7, #4]
 801181c:	429a      	cmp	r2, r3
 801181e:	d002      	beq.n	8011826 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8011820:	68fb      	ldr	r3, [r7, #12]
 8011822:	687a      	ldr	r2, [r7, #4]
 8011824:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8011826:	bf00      	nop
 8011828:	3714      	adds	r7, #20
 801182a:	46bd      	mov	sp, r7
 801182c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011830:	4770      	bx	lr
 8011832:	bf00      	nop
 8011834:	20004aac 	.word	0x20004aac
 8011838:	20004ab4 	.word	0x20004ab4

0801183c <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 801183c:	b580      	push	{r7, lr}
 801183e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceHS, &HS_Desc, DEVICE_HS) != USBD_OK)
 8011840:	2201      	movs	r2, #1
 8011842:	4913      	ldr	r1, [pc, #76]	; (8011890 <MX_USB_DEVICE_Init+0x54>)
 8011844:	4813      	ldr	r0, [pc, #76]	; (8011894 <MX_USB_DEVICE_Init+0x58>)
 8011846:	f7fb fec7 	bl	800d5d8 <USBD_Init>
 801184a:	4603      	mov	r3, r0
 801184c:	2b00      	cmp	r3, #0
 801184e:	d001      	beq.n	8011854 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8011850:	f7ef fa86 	bl	8000d60 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceHS, &USBD_CDC) != USBD_OK)
 8011854:	4910      	ldr	r1, [pc, #64]	; (8011898 <MX_USB_DEVICE_Init+0x5c>)
 8011856:	480f      	ldr	r0, [pc, #60]	; (8011894 <MX_USB_DEVICE_Init+0x58>)
 8011858:	f7fb feee 	bl	800d638 <USBD_RegisterClass>
 801185c:	4603      	mov	r3, r0
 801185e:	2b00      	cmp	r3, #0
 8011860:	d001      	beq.n	8011866 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8011862:	f7ef fa7d 	bl	8000d60 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceHS, &USBD_Interface_fops_HS) != USBD_OK)
 8011866:	490d      	ldr	r1, [pc, #52]	; (801189c <MX_USB_DEVICE_Init+0x60>)
 8011868:	480a      	ldr	r0, [pc, #40]	; (8011894 <MX_USB_DEVICE_Init+0x58>)
 801186a:	f7fb fe3f 	bl	800d4ec <USBD_CDC_RegisterInterface>
 801186e:	4603      	mov	r3, r0
 8011870:	2b00      	cmp	r3, #0
 8011872:	d001      	beq.n	8011878 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8011874:	f7ef fa74 	bl	8000d60 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceHS) != USBD_OK)
 8011878:	4806      	ldr	r0, [pc, #24]	; (8011894 <MX_USB_DEVICE_Init+0x58>)
 801187a:	f7fb ff04 	bl	800d686 <USBD_Start>
 801187e:	4603      	mov	r3, r0
 8011880:	2b00      	cmp	r3, #0
 8011882:	d001      	beq.n	8011888 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8011884:	f7ef fa6c 	bl	8000d60 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */
  HAL_PWREx_EnableUSBVoltageDetector();
 8011888:	f7f2 fef2 	bl	8004670 <HAL_PWREx_EnableUSBVoltageDetector>

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 801188c:	bf00      	nop
 801188e:	bd80      	pop	{r7, pc}
 8011890:	20000138 	.word	0x20000138
 8011894:	2000550c 	.word	0x2000550c
 8011898:	2000001c 	.word	0x2000001c
 801189c:	20000124 	.word	0x20000124

080118a0 <CDC_Init_HS>:
/**
  * @brief  Initializes the CDC media low layer over the USB HS IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_HS(void)
{
 80118a0:	b580      	push	{r7, lr}
 80118a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 8 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceHS, UserTxBufferHS, 0);
 80118a4:	2200      	movs	r2, #0
 80118a6:	4905      	ldr	r1, [pc, #20]	; (80118bc <CDC_Init_HS+0x1c>)
 80118a8:	4805      	ldr	r0, [pc, #20]	; (80118c0 <CDC_Init_HS+0x20>)
 80118aa:	f7fb fe34 	bl	800d516 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceHS, UserRxBufferHS);
 80118ae:	4905      	ldr	r1, [pc, #20]	; (80118c4 <CDC_Init_HS+0x24>)
 80118b0:	4803      	ldr	r0, [pc, #12]	; (80118c0 <CDC_Init_HS+0x20>)
 80118b2:	f7fb fe4e 	bl	800d552 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 80118b6:	2300      	movs	r3, #0
  /* USER CODE END 8 */
}
 80118b8:	4618      	mov	r0, r3
 80118ba:	bd80      	pop	{r7, pc}
 80118bc:	20005fdc 	.word	0x20005fdc
 80118c0:	2000550c 	.word	0x2000550c
 80118c4:	200057dc 	.word	0x200057dc

080118c8 <CDC_DeInit_HS>:
  * @brief  DeInitializes the CDC media low layer
  * @param  None
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_HS(void)
{
 80118c8:	b480      	push	{r7}
 80118ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 9 */
  return (USBD_OK);
 80118cc:	2300      	movs	r3, #0
  /* USER CODE END 9 */
}
 80118ce:	4618      	mov	r0, r3
 80118d0:	46bd      	mov	sp, r7
 80118d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80118d6:	4770      	bx	lr

080118d8 <CDC_Control_HS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_HS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 80118d8:	b480      	push	{r7}
 80118da:	b083      	sub	sp, #12
 80118dc:	af00      	add	r7, sp, #0
 80118de:	4603      	mov	r3, r0
 80118e0:	6039      	str	r1, [r7, #0]
 80118e2:	71fb      	strb	r3, [r7, #7]
 80118e4:	4613      	mov	r3, r2
 80118e6:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 10 */
  switch(cmd)
 80118e8:	79fb      	ldrb	r3, [r7, #7]
 80118ea:	2b23      	cmp	r3, #35	; 0x23
 80118ec:	d84a      	bhi.n	8011984 <CDC_Control_HS+0xac>
 80118ee:	a201      	add	r2, pc, #4	; (adr r2, 80118f4 <CDC_Control_HS+0x1c>)
 80118f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80118f4:	08011985 	.word	0x08011985
 80118f8:	08011985 	.word	0x08011985
 80118fc:	08011985 	.word	0x08011985
 8011900:	08011985 	.word	0x08011985
 8011904:	08011985 	.word	0x08011985
 8011908:	08011985 	.word	0x08011985
 801190c:	08011985 	.word	0x08011985
 8011910:	08011985 	.word	0x08011985
 8011914:	08011985 	.word	0x08011985
 8011918:	08011985 	.word	0x08011985
 801191c:	08011985 	.word	0x08011985
 8011920:	08011985 	.word	0x08011985
 8011924:	08011985 	.word	0x08011985
 8011928:	08011985 	.word	0x08011985
 801192c:	08011985 	.word	0x08011985
 8011930:	08011985 	.word	0x08011985
 8011934:	08011985 	.word	0x08011985
 8011938:	08011985 	.word	0x08011985
 801193c:	08011985 	.word	0x08011985
 8011940:	08011985 	.word	0x08011985
 8011944:	08011985 	.word	0x08011985
 8011948:	08011985 	.word	0x08011985
 801194c:	08011985 	.word	0x08011985
 8011950:	08011985 	.word	0x08011985
 8011954:	08011985 	.word	0x08011985
 8011958:	08011985 	.word	0x08011985
 801195c:	08011985 	.word	0x08011985
 8011960:	08011985 	.word	0x08011985
 8011964:	08011985 	.word	0x08011985
 8011968:	08011985 	.word	0x08011985
 801196c:	08011985 	.word	0x08011985
 8011970:	08011985 	.word	0x08011985
 8011974:	08011985 	.word	0x08011985
 8011978:	08011985 	.word	0x08011985
 801197c:	08011985 	.word	0x08011985
 8011980:	08011985 	.word	0x08011985
  case CDC_SEND_BREAK:

    break;

  default:
    break;
 8011984:	bf00      	nop
  }

  return (USBD_OK);
 8011986:	2300      	movs	r3, #0
  /* USER CODE END 10 */
}
 8011988:	4618      	mov	r0, r3
 801198a:	370c      	adds	r7, #12
 801198c:	46bd      	mov	sp, r7
 801198e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011992:	4770      	bx	lr

08011994 <CDC_Receive_HS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAILL
  */
static int8_t CDC_Receive_HS(uint8_t* Buf, uint32_t *Len)
{
 8011994:	b580      	push	{r7, lr}
 8011996:	b082      	sub	sp, #8
 8011998:	af00      	add	r7, sp, #0
 801199a:	6078      	str	r0, [r7, #4]
 801199c:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 11 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceHS, &Buf[0]);
 801199e:	6879      	ldr	r1, [r7, #4]
 80119a0:	4805      	ldr	r0, [pc, #20]	; (80119b8 <CDC_Receive_HS+0x24>)
 80119a2:	f7fb fdd6 	bl	800d552 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceHS);
 80119a6:	4804      	ldr	r0, [pc, #16]	; (80119b8 <CDC_Receive_HS+0x24>)
 80119a8:	f7fb fdec 	bl	800d584 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 80119ac:	2300      	movs	r3, #0
  /* USER CODE END 11 */
}
 80119ae:	4618      	mov	r0, r3
 80119b0:	3708      	adds	r7, #8
 80119b2:	46bd      	mov	sp, r7
 80119b4:	bd80      	pop	{r7, pc}
 80119b6:	bf00      	nop
 80119b8:	2000550c 	.word	0x2000550c

080119bc <CDC_TransmitCplt_HS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_HS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 80119bc:	b480      	push	{r7}
 80119be:	b087      	sub	sp, #28
 80119c0:	af00      	add	r7, sp, #0
 80119c2:	60f8      	str	r0, [r7, #12]
 80119c4:	60b9      	str	r1, [r7, #8]
 80119c6:	4613      	mov	r3, r2
 80119c8:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 80119ca:	2300      	movs	r3, #0
 80119cc:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 14 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 14 */
  return result;
 80119ce:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80119d2:	4618      	mov	r0, r3
 80119d4:	371c      	adds	r7, #28
 80119d6:	46bd      	mov	sp, r7
 80119d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80119dc:	4770      	bx	lr
	...

080119e0 <USBD_HS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80119e0:	b480      	push	{r7}
 80119e2:	b083      	sub	sp, #12
 80119e4:	af00      	add	r7, sp, #0
 80119e6:	4603      	mov	r3, r0
 80119e8:	6039      	str	r1, [r7, #0]
 80119ea:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_HS_DeviceDesc);
 80119ec:	683b      	ldr	r3, [r7, #0]
 80119ee:	2212      	movs	r2, #18
 80119f0:	801a      	strh	r2, [r3, #0]
  return USBD_HS_DeviceDesc;
 80119f2:	4b03      	ldr	r3, [pc, #12]	; (8011a00 <USBD_HS_DeviceDescriptor+0x20>)
}
 80119f4:	4618      	mov	r0, r3
 80119f6:	370c      	adds	r7, #12
 80119f8:	46bd      	mov	sp, r7
 80119fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80119fe:	4770      	bx	lr
 8011a00:	20000154 	.word	0x20000154

08011a04 <USBD_HS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8011a04:	b480      	push	{r7}
 8011a06:	b083      	sub	sp, #12
 8011a08:	af00      	add	r7, sp, #0
 8011a0a:	4603      	mov	r3, r0
 8011a0c:	6039      	str	r1, [r7, #0]
 8011a0e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8011a10:	683b      	ldr	r3, [r7, #0]
 8011a12:	2204      	movs	r2, #4
 8011a14:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8011a16:	4b03      	ldr	r3, [pc, #12]	; (8011a24 <USBD_HS_LangIDStrDescriptor+0x20>)
}
 8011a18:	4618      	mov	r0, r3
 8011a1a:	370c      	adds	r7, #12
 8011a1c:	46bd      	mov	sp, r7
 8011a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011a22:	4770      	bx	lr
 8011a24:	20000168 	.word	0x20000168

08011a28 <USBD_HS_ProductStrDescriptor>:
  * @param  speed : current device speed
  * @param  length : pointer to data length variable
  * @retval pointer to descriptor buffer
  */
uint8_t * USBD_HS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8011a28:	b580      	push	{r7, lr}
 8011a2a:	b082      	sub	sp, #8
 8011a2c:	af00      	add	r7, sp, #0
 8011a2e:	4603      	mov	r3, r0
 8011a30:	6039      	str	r1, [r7, #0]
 8011a32:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8011a34:	79fb      	ldrb	r3, [r7, #7]
 8011a36:	2b00      	cmp	r3, #0
 8011a38:	d105      	bne.n	8011a46 <USBD_HS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_HS, USBD_StrDesc, length);
 8011a3a:	683a      	ldr	r2, [r7, #0]
 8011a3c:	4907      	ldr	r1, [pc, #28]	; (8011a5c <USBD_HS_ProductStrDescriptor+0x34>)
 8011a3e:	4808      	ldr	r0, [pc, #32]	; (8011a60 <USBD_HS_ProductStrDescriptor+0x38>)
 8011a40:	f7fc fe53 	bl	800e6ea <USBD_GetString>
 8011a44:	e004      	b.n	8011a50 <USBD_HS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_HS, USBD_StrDesc, length);
 8011a46:	683a      	ldr	r2, [r7, #0]
 8011a48:	4904      	ldr	r1, [pc, #16]	; (8011a5c <USBD_HS_ProductStrDescriptor+0x34>)
 8011a4a:	4805      	ldr	r0, [pc, #20]	; (8011a60 <USBD_HS_ProductStrDescriptor+0x38>)
 8011a4c:	f7fc fe4d 	bl	800e6ea <USBD_GetString>
  }
  return USBD_StrDesc;
 8011a50:	4b02      	ldr	r3, [pc, #8]	; (8011a5c <USBD_HS_ProductStrDescriptor+0x34>)
}
 8011a52:	4618      	mov	r0, r3
 8011a54:	3708      	adds	r7, #8
 8011a56:	46bd      	mov	sp, r7
 8011a58:	bd80      	pop	{r7, pc}
 8011a5a:	bf00      	nop
 8011a5c:	200067dc 	.word	0x200067dc
 8011a60:	08012424 	.word	0x08012424

08011a64 <USBD_HS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8011a64:	b580      	push	{r7, lr}
 8011a66:	b082      	sub	sp, #8
 8011a68:	af00      	add	r7, sp, #0
 8011a6a:	4603      	mov	r3, r0
 8011a6c:	6039      	str	r1, [r7, #0]
 8011a6e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8011a70:	683a      	ldr	r2, [r7, #0]
 8011a72:	4904      	ldr	r1, [pc, #16]	; (8011a84 <USBD_HS_ManufacturerStrDescriptor+0x20>)
 8011a74:	4804      	ldr	r0, [pc, #16]	; (8011a88 <USBD_HS_ManufacturerStrDescriptor+0x24>)
 8011a76:	f7fc fe38 	bl	800e6ea <USBD_GetString>
  return USBD_StrDesc;
 8011a7a:	4b02      	ldr	r3, [pc, #8]	; (8011a84 <USBD_HS_ManufacturerStrDescriptor+0x20>)
}
 8011a7c:	4618      	mov	r0, r3
 8011a7e:	3708      	adds	r7, #8
 8011a80:	46bd      	mov	sp, r7
 8011a82:	bd80      	pop	{r7, pc}
 8011a84:	200067dc 	.word	0x200067dc
 8011a88:	0801243c 	.word	0x0801243c

08011a8c <USBD_HS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8011a8c:	b580      	push	{r7, lr}
 8011a8e:	b082      	sub	sp, #8
 8011a90:	af00      	add	r7, sp, #0
 8011a92:	4603      	mov	r3, r0
 8011a94:	6039      	str	r1, [r7, #0]
 8011a96:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8011a98:	683b      	ldr	r3, [r7, #0]
 8011a9a:	221a      	movs	r2, #26
 8011a9c:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8011a9e:	f000 f843 	bl	8011b28 <Get_SerialNum>
  /* USER CODE BEGIN USBD_HS_SerialStrDescriptor */

  /* USER CODE END USBD_HS_SerialStrDescriptor */

  return (uint8_t *) USBD_StringSerial;
 8011aa2:	4b02      	ldr	r3, [pc, #8]	; (8011aac <USBD_HS_SerialStrDescriptor+0x20>)
}
 8011aa4:	4618      	mov	r0, r3
 8011aa6:	3708      	adds	r7, #8
 8011aa8:	46bd      	mov	sp, r7
 8011aaa:	bd80      	pop	{r7, pc}
 8011aac:	2000016c 	.word	0x2000016c

08011ab0 <USBD_HS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8011ab0:	b580      	push	{r7, lr}
 8011ab2:	b082      	sub	sp, #8
 8011ab4:	af00      	add	r7, sp, #0
 8011ab6:	4603      	mov	r3, r0
 8011ab8:	6039      	str	r1, [r7, #0]
 8011aba:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8011abc:	79fb      	ldrb	r3, [r7, #7]
 8011abe:	2b00      	cmp	r3, #0
 8011ac0:	d105      	bne.n	8011ace <USBD_HS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_HS, USBD_StrDesc, length);
 8011ac2:	683a      	ldr	r2, [r7, #0]
 8011ac4:	4907      	ldr	r1, [pc, #28]	; (8011ae4 <USBD_HS_ConfigStrDescriptor+0x34>)
 8011ac6:	4808      	ldr	r0, [pc, #32]	; (8011ae8 <USBD_HS_ConfigStrDescriptor+0x38>)
 8011ac8:	f7fc fe0f 	bl	800e6ea <USBD_GetString>
 8011acc:	e004      	b.n	8011ad8 <USBD_HS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_HS, USBD_StrDesc, length);
 8011ace:	683a      	ldr	r2, [r7, #0]
 8011ad0:	4904      	ldr	r1, [pc, #16]	; (8011ae4 <USBD_HS_ConfigStrDescriptor+0x34>)
 8011ad2:	4805      	ldr	r0, [pc, #20]	; (8011ae8 <USBD_HS_ConfigStrDescriptor+0x38>)
 8011ad4:	f7fc fe09 	bl	800e6ea <USBD_GetString>
  }
  return USBD_StrDesc;
 8011ad8:	4b02      	ldr	r3, [pc, #8]	; (8011ae4 <USBD_HS_ConfigStrDescriptor+0x34>)
}
 8011ada:	4618      	mov	r0, r3
 8011adc:	3708      	adds	r7, #8
 8011ade:	46bd      	mov	sp, r7
 8011ae0:	bd80      	pop	{r7, pc}
 8011ae2:	bf00      	nop
 8011ae4:	200067dc 	.word	0x200067dc
 8011ae8:	08012450 	.word	0x08012450

08011aec <USBD_HS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8011aec:	b580      	push	{r7, lr}
 8011aee:	b082      	sub	sp, #8
 8011af0:	af00      	add	r7, sp, #0
 8011af2:	4603      	mov	r3, r0
 8011af4:	6039      	str	r1, [r7, #0]
 8011af6:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8011af8:	79fb      	ldrb	r3, [r7, #7]
 8011afa:	2b00      	cmp	r3, #0
 8011afc:	d105      	bne.n	8011b0a <USBD_HS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_HS, USBD_StrDesc, length);
 8011afe:	683a      	ldr	r2, [r7, #0]
 8011b00:	4907      	ldr	r1, [pc, #28]	; (8011b20 <USBD_HS_InterfaceStrDescriptor+0x34>)
 8011b02:	4808      	ldr	r0, [pc, #32]	; (8011b24 <USBD_HS_InterfaceStrDescriptor+0x38>)
 8011b04:	f7fc fdf1 	bl	800e6ea <USBD_GetString>
 8011b08:	e004      	b.n	8011b14 <USBD_HS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_HS, USBD_StrDesc, length);
 8011b0a:	683a      	ldr	r2, [r7, #0]
 8011b0c:	4904      	ldr	r1, [pc, #16]	; (8011b20 <USBD_HS_InterfaceStrDescriptor+0x34>)
 8011b0e:	4805      	ldr	r0, [pc, #20]	; (8011b24 <USBD_HS_InterfaceStrDescriptor+0x38>)
 8011b10:	f7fc fdeb 	bl	800e6ea <USBD_GetString>
  }
  return USBD_StrDesc;
 8011b14:	4b02      	ldr	r3, [pc, #8]	; (8011b20 <USBD_HS_InterfaceStrDescriptor+0x34>)
}
 8011b16:	4618      	mov	r0, r3
 8011b18:	3708      	adds	r7, #8
 8011b1a:	46bd      	mov	sp, r7
 8011b1c:	bd80      	pop	{r7, pc}
 8011b1e:	bf00      	nop
 8011b20:	200067dc 	.word	0x200067dc
 8011b24:	0801245c 	.word	0x0801245c

08011b28 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8011b28:	b580      	push	{r7, lr}
 8011b2a:	b084      	sub	sp, #16
 8011b2c:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8011b2e:	4b0f      	ldr	r3, [pc, #60]	; (8011b6c <Get_SerialNum+0x44>)
 8011b30:	681b      	ldr	r3, [r3, #0]
 8011b32:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8011b34:	4b0e      	ldr	r3, [pc, #56]	; (8011b70 <Get_SerialNum+0x48>)
 8011b36:	681b      	ldr	r3, [r3, #0]
 8011b38:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8011b3a:	4b0e      	ldr	r3, [pc, #56]	; (8011b74 <Get_SerialNum+0x4c>)
 8011b3c:	681b      	ldr	r3, [r3, #0]
 8011b3e:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8011b40:	68fa      	ldr	r2, [r7, #12]
 8011b42:	687b      	ldr	r3, [r7, #4]
 8011b44:	4413      	add	r3, r2
 8011b46:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8011b48:	68fb      	ldr	r3, [r7, #12]
 8011b4a:	2b00      	cmp	r3, #0
 8011b4c:	d009      	beq.n	8011b62 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8011b4e:	2208      	movs	r2, #8
 8011b50:	4909      	ldr	r1, [pc, #36]	; (8011b78 <Get_SerialNum+0x50>)
 8011b52:	68f8      	ldr	r0, [r7, #12]
 8011b54:	f000 f814 	bl	8011b80 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8011b58:	2204      	movs	r2, #4
 8011b5a:	4908      	ldr	r1, [pc, #32]	; (8011b7c <Get_SerialNum+0x54>)
 8011b5c:	68b8      	ldr	r0, [r7, #8]
 8011b5e:	f000 f80f 	bl	8011b80 <IntToUnicode>
  }
}
 8011b62:	bf00      	nop
 8011b64:	3710      	adds	r7, #16
 8011b66:	46bd      	mov	sp, r7
 8011b68:	bd80      	pop	{r7, pc}
 8011b6a:	bf00      	nop
 8011b6c:	1ff1e800 	.word	0x1ff1e800
 8011b70:	1ff1e804 	.word	0x1ff1e804
 8011b74:	1ff1e808 	.word	0x1ff1e808
 8011b78:	2000016e 	.word	0x2000016e
 8011b7c:	2000017e 	.word	0x2000017e

08011b80 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8011b80:	b480      	push	{r7}
 8011b82:	b087      	sub	sp, #28
 8011b84:	af00      	add	r7, sp, #0
 8011b86:	60f8      	str	r0, [r7, #12]
 8011b88:	60b9      	str	r1, [r7, #8]
 8011b8a:	4613      	mov	r3, r2
 8011b8c:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8011b8e:	2300      	movs	r3, #0
 8011b90:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8011b92:	2300      	movs	r3, #0
 8011b94:	75fb      	strb	r3, [r7, #23]
 8011b96:	e027      	b.n	8011be8 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8011b98:	68fb      	ldr	r3, [r7, #12]
 8011b9a:	0f1b      	lsrs	r3, r3, #28
 8011b9c:	2b09      	cmp	r3, #9
 8011b9e:	d80b      	bhi.n	8011bb8 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8011ba0:	68fb      	ldr	r3, [r7, #12]
 8011ba2:	0f1b      	lsrs	r3, r3, #28
 8011ba4:	b2da      	uxtb	r2, r3
 8011ba6:	7dfb      	ldrb	r3, [r7, #23]
 8011ba8:	005b      	lsls	r3, r3, #1
 8011baa:	4619      	mov	r1, r3
 8011bac:	68bb      	ldr	r3, [r7, #8]
 8011bae:	440b      	add	r3, r1
 8011bb0:	3230      	adds	r2, #48	; 0x30
 8011bb2:	b2d2      	uxtb	r2, r2
 8011bb4:	701a      	strb	r2, [r3, #0]
 8011bb6:	e00a      	b.n	8011bce <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8011bb8:	68fb      	ldr	r3, [r7, #12]
 8011bba:	0f1b      	lsrs	r3, r3, #28
 8011bbc:	b2da      	uxtb	r2, r3
 8011bbe:	7dfb      	ldrb	r3, [r7, #23]
 8011bc0:	005b      	lsls	r3, r3, #1
 8011bc2:	4619      	mov	r1, r3
 8011bc4:	68bb      	ldr	r3, [r7, #8]
 8011bc6:	440b      	add	r3, r1
 8011bc8:	3237      	adds	r2, #55	; 0x37
 8011bca:	b2d2      	uxtb	r2, r2
 8011bcc:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8011bce:	68fb      	ldr	r3, [r7, #12]
 8011bd0:	011b      	lsls	r3, r3, #4
 8011bd2:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8011bd4:	7dfb      	ldrb	r3, [r7, #23]
 8011bd6:	005b      	lsls	r3, r3, #1
 8011bd8:	3301      	adds	r3, #1
 8011bda:	68ba      	ldr	r2, [r7, #8]
 8011bdc:	4413      	add	r3, r2
 8011bde:	2200      	movs	r2, #0
 8011be0:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8011be2:	7dfb      	ldrb	r3, [r7, #23]
 8011be4:	3301      	adds	r3, #1
 8011be6:	75fb      	strb	r3, [r7, #23]
 8011be8:	7dfa      	ldrb	r2, [r7, #23]
 8011bea:	79fb      	ldrb	r3, [r7, #7]
 8011bec:	429a      	cmp	r2, r3
 8011bee:	d3d3      	bcc.n	8011b98 <IntToUnicode+0x18>
  }
}
 8011bf0:	bf00      	nop
 8011bf2:	bf00      	nop
 8011bf4:	371c      	adds	r7, #28
 8011bf6:	46bd      	mov	sp, r7
 8011bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011bfc:	4770      	bx	lr
	...

08011c00 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8011c00:	b580      	push	{r7, lr}
 8011c02:	b0ba      	sub	sp, #232	; 0xe8
 8011c04:	af00      	add	r7, sp, #0
 8011c06:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8011c08:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8011c0c:	2200      	movs	r2, #0
 8011c0e:	601a      	str	r2, [r3, #0]
 8011c10:	605a      	str	r2, [r3, #4]
 8011c12:	609a      	str	r2, [r3, #8]
 8011c14:	60da      	str	r2, [r3, #12]
 8011c16:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8011c18:	f107 0320 	add.w	r3, r7, #32
 8011c1c:	22b4      	movs	r2, #180	; 0xb4
 8011c1e:	2100      	movs	r1, #0
 8011c20:	4618      	mov	r0, r3
 8011c22:	f000 fbb3 	bl	801238c <memset>
  if(pcdHandle->Instance==USB_OTG_HS)
 8011c26:	687b      	ldr	r3, [r7, #4]
 8011c28:	681b      	ldr	r3, [r3, #0]
 8011c2a:	4a57      	ldr	r2, [pc, #348]	; (8011d88 <HAL_PCD_MspInit+0x188>)
 8011c2c:	4293      	cmp	r3, r2
 8011c2e:	f040 80a6 	bne.w	8011d7e <HAL_PCD_MspInit+0x17e>
  /* USER CODE BEGIN USB_OTG_HS_MspInit 0 */

  /* USER CODE END USB_OTG_HS_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8011c32:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8011c36:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_PLL;
 8011c38:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8011c3c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8011c40:	f107 0320 	add.w	r3, r7, #32
 8011c44:	4618      	mov	r0, r3
 8011c46:	f7f3 fc7f 	bl	8005548 <HAL_RCCEx_PeriphCLKConfig>
 8011c4a:	4603      	mov	r3, r0
 8011c4c:	2b00      	cmp	r3, #0
 8011c4e:	d001      	beq.n	8011c54 <HAL_PCD_MspInit+0x54>
    {
      Error_Handler();
 8011c50:	f7ef f886 	bl	8000d60 <Error_Handler>
    }
  /** Enable USB Voltage detector
  */
    HAL_PWREx_EnableUSBVoltageDetector();
 8011c54:	f7f2 fd0c 	bl	8004670 <HAL_PWREx_EnableUSBVoltageDetector>

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8011c58:	4b4c      	ldr	r3, [pc, #304]	; (8011d8c <HAL_PCD_MspInit+0x18c>)
 8011c5a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8011c5e:	4a4b      	ldr	r2, [pc, #300]	; (8011d8c <HAL_PCD_MspInit+0x18c>)
 8011c60:	f043 0304 	orr.w	r3, r3, #4
 8011c64:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8011c68:	4b48      	ldr	r3, [pc, #288]	; (8011d8c <HAL_PCD_MspInit+0x18c>)
 8011c6a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8011c6e:	f003 0304 	and.w	r3, r3, #4
 8011c72:	61fb      	str	r3, [r7, #28]
 8011c74:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8011c76:	4b45      	ldr	r3, [pc, #276]	; (8011d8c <HAL_PCD_MspInit+0x18c>)
 8011c78:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8011c7c:	4a43      	ldr	r2, [pc, #268]	; (8011d8c <HAL_PCD_MspInit+0x18c>)
 8011c7e:	f043 0301 	orr.w	r3, r3, #1
 8011c82:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8011c86:	4b41      	ldr	r3, [pc, #260]	; (8011d8c <HAL_PCD_MspInit+0x18c>)
 8011c88:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8011c8c:	f003 0301 	and.w	r3, r3, #1
 8011c90:	61bb      	str	r3, [r7, #24]
 8011c92:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8011c94:	4b3d      	ldr	r3, [pc, #244]	; (8011d8c <HAL_PCD_MspInit+0x18c>)
 8011c96:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8011c9a:	4a3c      	ldr	r2, [pc, #240]	; (8011d8c <HAL_PCD_MspInit+0x18c>)
 8011c9c:	f043 0302 	orr.w	r3, r3, #2
 8011ca0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8011ca4:	4b39      	ldr	r3, [pc, #228]	; (8011d8c <HAL_PCD_MspInit+0x18c>)
 8011ca6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8011caa:	f003 0302 	and.w	r3, r3, #2
 8011cae:	617b      	str	r3, [r7, #20]
 8011cb0:	697b      	ldr	r3, [r7, #20]
    PB11     ------> USB_OTG_HS_ULPI_D4
    PB12     ------> USB_OTG_HS_ULPI_D5
    PB13     ------> USB_OTG_HS_ULPI_D6
    PB5     ------> USB_OTG_HS_ULPI_D7
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_2|GPIO_PIN_3;
 8011cb2:	230d      	movs	r3, #13
 8011cb4:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8011cb8:	2302      	movs	r3, #2
 8011cba:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8011cbe:	2300      	movs	r3, #0
 8011cc0:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8011cc4:	2302      	movs	r3, #2
 8011cc6:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_HS;
 8011cca:	230a      	movs	r3, #10
 8011ccc:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8011cd0:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8011cd4:	4619      	mov	r1, r3
 8011cd6:	482e      	ldr	r0, [pc, #184]	; (8011d90 <HAL_PCD_MspInit+0x190>)
 8011cd8:	f7f0 f9a2 	bl	8002020 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_5;
 8011cdc:	2328      	movs	r3, #40	; 0x28
 8011cde:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8011ce2:	2302      	movs	r3, #2
 8011ce4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8011ce8:	2300      	movs	r3, #0
 8011cea:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8011cee:	2302      	movs	r3, #2
 8011cf0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_HS;
 8011cf4:	230a      	movs	r3, #10
 8011cf6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8011cfa:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8011cfe:	4619      	mov	r1, r3
 8011d00:	4824      	ldr	r0, [pc, #144]	; (8011d94 <HAL_PCD_MspInit+0x194>)
 8011d02:	f7f0 f98d 	bl	8002020 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_10|GPIO_PIN_11
 8011d06:	f643 4323 	movw	r3, #15395	; 0x3c23
 8011d0a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
                          |GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_5;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8011d0e:	2302      	movs	r3, #2
 8011d10:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8011d14:	2300      	movs	r3, #0
 8011d16:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8011d1a:	2302      	movs	r3, #2
 8011d1c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_HS;
 8011d20:	230a      	movs	r3, #10
 8011d22:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8011d26:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8011d2a:	4619      	mov	r1, r3
 8011d2c:	481a      	ldr	r0, [pc, #104]	; (8011d98 <HAL_PCD_MspInit+0x198>)
 8011d2e:	f7f0 f977 	bl	8002020 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_HS_CLK_ENABLE();
 8011d32:	4b16      	ldr	r3, [pc, #88]	; (8011d8c <HAL_PCD_MspInit+0x18c>)
 8011d34:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8011d38:	4a14      	ldr	r2, [pc, #80]	; (8011d8c <HAL_PCD_MspInit+0x18c>)
 8011d3a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8011d3e:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8011d42:	4b12      	ldr	r3, [pc, #72]	; (8011d8c <HAL_PCD_MspInit+0x18c>)
 8011d44:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8011d48:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8011d4c:	613b      	str	r3, [r7, #16]
 8011d4e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_USB_OTG_HS_ULPI_CLK_ENABLE();
 8011d50:	4b0e      	ldr	r3, [pc, #56]	; (8011d8c <HAL_PCD_MspInit+0x18c>)
 8011d52:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8011d56:	4a0d      	ldr	r2, [pc, #52]	; (8011d8c <HAL_PCD_MspInit+0x18c>)
 8011d58:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8011d5c:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8011d60:	4b0a      	ldr	r3, [pc, #40]	; (8011d8c <HAL_PCD_MspInit+0x18c>)
 8011d62:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8011d66:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8011d6a:	60fb      	str	r3, [r7, #12]
 8011d6c:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_HS_IRQn, 5, 0);
 8011d6e:	2200      	movs	r2, #0
 8011d70:	2105      	movs	r1, #5
 8011d72:	204d      	movs	r0, #77	; 0x4d
 8011d74:	f7ef fdc4 	bl	8001900 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_HS_IRQn);
 8011d78:	204d      	movs	r0, #77	; 0x4d
 8011d7a:	f7ef fddb 	bl	8001934 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_HS_MspInit 1 */

  /* USER CODE END USB_OTG_HS_MspInit 1 */
  }
}
 8011d7e:	bf00      	nop
 8011d80:	37e8      	adds	r7, #232	; 0xe8
 8011d82:	46bd      	mov	sp, r7
 8011d84:	bd80      	pop	{r7, pc}
 8011d86:	bf00      	nop
 8011d88:	40040000 	.word	0x40040000
 8011d8c:	58024400 	.word	0x58024400
 8011d90:	58020800 	.word	0x58020800
 8011d94:	58020000 	.word	0x58020000
 8011d98:	58020400 	.word	0x58020400

08011d9c <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8011d9c:	b580      	push	{r7, lr}
 8011d9e:	b082      	sub	sp, #8
 8011da0:	af00      	add	r7, sp, #0
 8011da2:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8011da4:	687b      	ldr	r3, [r7, #4]
 8011da6:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 8011daa:	687b      	ldr	r3, [r7, #4]
 8011dac:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8011db0:	4619      	mov	r1, r3
 8011db2:	4610      	mov	r0, r2
 8011db4:	f7fb fcb2 	bl	800d71c <USBD_LL_SetupStage>
}
 8011db8:	bf00      	nop
 8011dba:	3708      	adds	r7, #8
 8011dbc:	46bd      	mov	sp, r7
 8011dbe:	bd80      	pop	{r7, pc}

08011dc0 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8011dc0:	b580      	push	{r7, lr}
 8011dc2:	b082      	sub	sp, #8
 8011dc4:	af00      	add	r7, sp, #0
 8011dc6:	6078      	str	r0, [r7, #4]
 8011dc8:	460b      	mov	r3, r1
 8011dca:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8011dcc:	687b      	ldr	r3, [r7, #4]
 8011dce:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 8011dd2:	78fa      	ldrb	r2, [r7, #3]
 8011dd4:	6879      	ldr	r1, [r7, #4]
 8011dd6:	4613      	mov	r3, r2
 8011dd8:	00db      	lsls	r3, r3, #3
 8011dda:	1a9b      	subs	r3, r3, r2
 8011ddc:	009b      	lsls	r3, r3, #2
 8011dde:	440b      	add	r3, r1
 8011de0:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8011de4:	681a      	ldr	r2, [r3, #0]
 8011de6:	78fb      	ldrb	r3, [r7, #3]
 8011de8:	4619      	mov	r1, r3
 8011dea:	f7fb fcec 	bl	800d7c6 <USBD_LL_DataOutStage>
}
 8011dee:	bf00      	nop
 8011df0:	3708      	adds	r7, #8
 8011df2:	46bd      	mov	sp, r7
 8011df4:	bd80      	pop	{r7, pc}

08011df6 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8011df6:	b580      	push	{r7, lr}
 8011df8:	b082      	sub	sp, #8
 8011dfa:	af00      	add	r7, sp, #0
 8011dfc:	6078      	str	r0, [r7, #4]
 8011dfe:	460b      	mov	r3, r1
 8011e00:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8011e02:	687b      	ldr	r3, [r7, #4]
 8011e04:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 8011e08:	78fa      	ldrb	r2, [r7, #3]
 8011e0a:	6879      	ldr	r1, [r7, #4]
 8011e0c:	4613      	mov	r3, r2
 8011e0e:	00db      	lsls	r3, r3, #3
 8011e10:	1a9b      	subs	r3, r3, r2
 8011e12:	009b      	lsls	r3, r3, #2
 8011e14:	440b      	add	r3, r1
 8011e16:	3348      	adds	r3, #72	; 0x48
 8011e18:	681a      	ldr	r2, [r3, #0]
 8011e1a:	78fb      	ldrb	r3, [r7, #3]
 8011e1c:	4619      	mov	r1, r3
 8011e1e:	f7fb fd35 	bl	800d88c <USBD_LL_DataInStage>
}
 8011e22:	bf00      	nop
 8011e24:	3708      	adds	r7, #8
 8011e26:	46bd      	mov	sp, r7
 8011e28:	bd80      	pop	{r7, pc}

08011e2a <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8011e2a:	b580      	push	{r7, lr}
 8011e2c:	b082      	sub	sp, #8
 8011e2e:	af00      	add	r7, sp, #0
 8011e30:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8011e32:	687b      	ldr	r3, [r7, #4]
 8011e34:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8011e38:	4618      	mov	r0, r3
 8011e3a:	f7fb fe49 	bl	800dad0 <USBD_LL_SOF>
}
 8011e3e:	bf00      	nop
 8011e40:	3708      	adds	r7, #8
 8011e42:	46bd      	mov	sp, r7
 8011e44:	bd80      	pop	{r7, pc}

08011e46 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8011e46:	b580      	push	{r7, lr}
 8011e48:	b084      	sub	sp, #16
 8011e4a:	af00      	add	r7, sp, #0
 8011e4c:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8011e4e:	2301      	movs	r3, #1
 8011e50:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 8011e52:	687b      	ldr	r3, [r7, #4]
 8011e54:	68db      	ldr	r3, [r3, #12]
 8011e56:	2b00      	cmp	r3, #0
 8011e58:	d102      	bne.n	8011e60 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 8011e5a:	2300      	movs	r3, #0
 8011e5c:	73fb      	strb	r3, [r7, #15]
 8011e5e:	e008      	b.n	8011e72 <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 8011e60:	687b      	ldr	r3, [r7, #4]
 8011e62:	68db      	ldr	r3, [r3, #12]
 8011e64:	2b02      	cmp	r3, #2
 8011e66:	d102      	bne.n	8011e6e <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 8011e68:	2301      	movs	r3, #1
 8011e6a:	73fb      	strb	r3, [r7, #15]
 8011e6c:	e001      	b.n	8011e72 <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 8011e6e:	f7ee ff77 	bl	8000d60 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8011e72:	687b      	ldr	r3, [r7, #4]
 8011e74:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8011e78:	7bfa      	ldrb	r2, [r7, #15]
 8011e7a:	4611      	mov	r1, r2
 8011e7c:	4618      	mov	r0, r3
 8011e7e:	f7fb fde9 	bl	800da54 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8011e82:	687b      	ldr	r3, [r7, #4]
 8011e84:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8011e88:	4618      	mov	r0, r3
 8011e8a:	f7fb fd95 	bl	800d9b8 <USBD_LL_Reset>
}
 8011e8e:	bf00      	nop
 8011e90:	3710      	adds	r7, #16
 8011e92:	46bd      	mov	sp, r7
 8011e94:	bd80      	pop	{r7, pc}
	...

08011e98 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8011e98:	b580      	push	{r7, lr}
 8011e9a:	b082      	sub	sp, #8
 8011e9c:	af00      	add	r7, sp, #0
 8011e9e:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8011ea0:	687b      	ldr	r3, [r7, #4]
 8011ea2:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8011ea6:	4618      	mov	r0, r3
 8011ea8:	f7fb fde4 	bl	800da74 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8011eac:	687b      	ldr	r3, [r7, #4]
 8011eae:	681b      	ldr	r3, [r3, #0]
 8011eb0:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8011eb4:	681b      	ldr	r3, [r3, #0]
 8011eb6:	687a      	ldr	r2, [r7, #4]
 8011eb8:	6812      	ldr	r2, [r2, #0]
 8011eba:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8011ebe:	f043 0301 	orr.w	r3, r3, #1
 8011ec2:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8011ec4:	687b      	ldr	r3, [r7, #4]
 8011ec6:	6a1b      	ldr	r3, [r3, #32]
 8011ec8:	2b00      	cmp	r3, #0
 8011eca:	d005      	beq.n	8011ed8 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8011ecc:	4b04      	ldr	r3, [pc, #16]	; (8011ee0 <HAL_PCD_SuspendCallback+0x48>)
 8011ece:	691b      	ldr	r3, [r3, #16]
 8011ed0:	4a03      	ldr	r2, [pc, #12]	; (8011ee0 <HAL_PCD_SuspendCallback+0x48>)
 8011ed2:	f043 0306 	orr.w	r3, r3, #6
 8011ed6:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8011ed8:	bf00      	nop
 8011eda:	3708      	adds	r7, #8
 8011edc:	46bd      	mov	sp, r7
 8011ede:	bd80      	pop	{r7, pc}
 8011ee0:	e000ed00 	.word	0xe000ed00

08011ee4 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8011ee4:	b580      	push	{r7, lr}
 8011ee6:	b082      	sub	sp, #8
 8011ee8:	af00      	add	r7, sp, #0
 8011eea:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8011eec:	687b      	ldr	r3, [r7, #4]
 8011eee:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8011ef2:	4618      	mov	r0, r3
 8011ef4:	f7fb fdd4 	bl	800daa0 <USBD_LL_Resume>
}
 8011ef8:	bf00      	nop
 8011efa:	3708      	adds	r7, #8
 8011efc:	46bd      	mov	sp, r7
 8011efe:	bd80      	pop	{r7, pc}

08011f00 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8011f00:	b580      	push	{r7, lr}
 8011f02:	b082      	sub	sp, #8
 8011f04:	af00      	add	r7, sp, #0
 8011f06:	6078      	str	r0, [r7, #4]
 8011f08:	460b      	mov	r3, r1
 8011f0a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8011f0c:	687b      	ldr	r3, [r7, #4]
 8011f0e:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8011f12:	78fa      	ldrb	r2, [r7, #3]
 8011f14:	4611      	mov	r1, r2
 8011f16:	4618      	mov	r0, r3
 8011f18:	f7fb fe22 	bl	800db60 <USBD_LL_IsoOUTIncomplete>
}
 8011f1c:	bf00      	nop
 8011f1e:	3708      	adds	r7, #8
 8011f20:	46bd      	mov	sp, r7
 8011f22:	bd80      	pop	{r7, pc}

08011f24 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8011f24:	b580      	push	{r7, lr}
 8011f26:	b082      	sub	sp, #8
 8011f28:	af00      	add	r7, sp, #0
 8011f2a:	6078      	str	r0, [r7, #4]
 8011f2c:	460b      	mov	r3, r1
 8011f2e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8011f30:	687b      	ldr	r3, [r7, #4]
 8011f32:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8011f36:	78fa      	ldrb	r2, [r7, #3]
 8011f38:	4611      	mov	r1, r2
 8011f3a:	4618      	mov	r0, r3
 8011f3c:	f7fb fdea 	bl	800db14 <USBD_LL_IsoINIncomplete>
}
 8011f40:	bf00      	nop
 8011f42:	3708      	adds	r7, #8
 8011f44:	46bd      	mov	sp, r7
 8011f46:	bd80      	pop	{r7, pc}

08011f48 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8011f48:	b580      	push	{r7, lr}
 8011f4a:	b082      	sub	sp, #8
 8011f4c:	af00      	add	r7, sp, #0
 8011f4e:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8011f50:	687b      	ldr	r3, [r7, #4]
 8011f52:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8011f56:	4618      	mov	r0, r3
 8011f58:	f7fb fe28 	bl	800dbac <USBD_LL_DevConnected>
}
 8011f5c:	bf00      	nop
 8011f5e:	3708      	adds	r7, #8
 8011f60:	46bd      	mov	sp, r7
 8011f62:	bd80      	pop	{r7, pc}

08011f64 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8011f64:	b580      	push	{r7, lr}
 8011f66:	b082      	sub	sp, #8
 8011f68:	af00      	add	r7, sp, #0
 8011f6a:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8011f6c:	687b      	ldr	r3, [r7, #4]
 8011f6e:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8011f72:	4618      	mov	r0, r3
 8011f74:	f7fb fe25 	bl	800dbc2 <USBD_LL_DevDisconnected>
}
 8011f78:	bf00      	nop
 8011f7a:	3708      	adds	r7, #8
 8011f7c:	46bd      	mov	sp, r7
 8011f7e:	bd80      	pop	{r7, pc}

08011f80 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8011f80:	b580      	push	{r7, lr}
 8011f82:	b082      	sub	sp, #8
 8011f84:	af00      	add	r7, sp, #0
 8011f86:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_HS) {
 8011f88:	687b      	ldr	r3, [r7, #4]
 8011f8a:	781b      	ldrb	r3, [r3, #0]
 8011f8c:	2b01      	cmp	r3, #1
 8011f8e:	d140      	bne.n	8012012 <USBD_LL_Init+0x92>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_HS.pData = pdev;
 8011f90:	4a22      	ldr	r2, [pc, #136]	; (801201c <USBD_LL_Init+0x9c>)
 8011f92:	687b      	ldr	r3, [r7, #4]
 8011f94:	f8c2 3404 	str.w	r3, [r2, #1028]	; 0x404
  pdev->pData = &hpcd_USB_OTG_HS;
 8011f98:	687b      	ldr	r3, [r7, #4]
 8011f9a:	4a20      	ldr	r2, [pc, #128]	; (801201c <USBD_LL_Init+0x9c>)
 8011f9c:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4

  hpcd_USB_OTG_HS.Instance = USB_OTG_HS;
 8011fa0:	4b1e      	ldr	r3, [pc, #120]	; (801201c <USBD_LL_Init+0x9c>)
 8011fa2:	4a1f      	ldr	r2, [pc, #124]	; (8012020 <USBD_LL_Init+0xa0>)
 8011fa4:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_HS.Init.dev_endpoints = 9;
 8011fa6:	4b1d      	ldr	r3, [pc, #116]	; (801201c <USBD_LL_Init+0x9c>)
 8011fa8:	2209      	movs	r2, #9
 8011faa:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_HS.Init.speed = PCD_SPEED_HIGH;
 8011fac:	4b1b      	ldr	r3, [pc, #108]	; (801201c <USBD_LL_Init+0x9c>)
 8011fae:	2200      	movs	r2, #0
 8011fb0:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_HS.Init.dma_enable = DISABLE;
 8011fb2:	4b1a      	ldr	r3, [pc, #104]	; (801201c <USBD_LL_Init+0x9c>)
 8011fb4:	2200      	movs	r2, #0
 8011fb6:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_HS.Init.phy_itface = USB_OTG_ULPI_PHY;
 8011fb8:	4b18      	ldr	r3, [pc, #96]	; (801201c <USBD_LL_Init+0x9c>)
 8011fba:	2201      	movs	r2, #1
 8011fbc:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_HS.Init.Sof_enable = DISABLE;
 8011fbe:	4b17      	ldr	r3, [pc, #92]	; (801201c <USBD_LL_Init+0x9c>)
 8011fc0:	2200      	movs	r2, #0
 8011fc2:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_HS.Init.low_power_enable = DISABLE;
 8011fc4:	4b15      	ldr	r3, [pc, #84]	; (801201c <USBD_LL_Init+0x9c>)
 8011fc6:	2200      	movs	r2, #0
 8011fc8:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_HS.Init.lpm_enable = DISABLE;
 8011fca:	4b14      	ldr	r3, [pc, #80]	; (801201c <USBD_LL_Init+0x9c>)
 8011fcc:	2200      	movs	r2, #0
 8011fce:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_HS.Init.vbus_sensing_enable = DISABLE;
 8011fd0:	4b12      	ldr	r3, [pc, #72]	; (801201c <USBD_LL_Init+0x9c>)
 8011fd2:	2200      	movs	r2, #0
 8011fd4:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_HS.Init.use_dedicated_ep1 = DISABLE;
 8011fd6:	4b11      	ldr	r3, [pc, #68]	; (801201c <USBD_LL_Init+0x9c>)
 8011fd8:	2200      	movs	r2, #0
 8011fda:	631a      	str	r2, [r3, #48]	; 0x30
  hpcd_USB_OTG_HS.Init.use_external_vbus = DISABLE;
 8011fdc:	4b0f      	ldr	r3, [pc, #60]	; (801201c <USBD_LL_Init+0x9c>)
 8011fde:	2200      	movs	r2, #0
 8011fe0:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_PCD_Init(&hpcd_USB_OTG_HS) != HAL_OK)
 8011fe2:	480e      	ldr	r0, [pc, #56]	; (801201c <USBD_LL_Init+0x9c>)
 8011fe4:	f7f1 f90e 	bl	8003204 <HAL_PCD_Init>
 8011fe8:	4603      	mov	r3, r0
 8011fea:	2b00      	cmp	r3, #0
 8011fec:	d001      	beq.n	8011ff2 <USBD_LL_Init+0x72>
  {
    Error_Handler( );
 8011fee:	f7ee feb7 	bl	8000d60 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_HS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_HS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_HS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_HS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_HS, 0x200);
 8011ff2:	f44f 7100 	mov.w	r1, #512	; 0x200
 8011ff6:	4809      	ldr	r0, [pc, #36]	; (801201c <USBD_LL_Init+0x9c>)
 8011ff8:	f7f2 fa9f 	bl	800453a <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_HS, 0, 0x80);
 8011ffc:	2280      	movs	r2, #128	; 0x80
 8011ffe:	2100      	movs	r1, #0
 8012000:	4806      	ldr	r0, [pc, #24]	; (801201c <USBD_LL_Init+0x9c>)
 8012002:	f7f2 fa53 	bl	80044ac <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_HS, 1, 0x174);
 8012006:	f44f 72ba 	mov.w	r2, #372	; 0x174
 801200a:	2101      	movs	r1, #1
 801200c:	4803      	ldr	r0, [pc, #12]	; (801201c <USBD_LL_Init+0x9c>)
 801200e:	f7f2 fa4d 	bl	80044ac <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 8012012:	2300      	movs	r3, #0
}
 8012014:	4618      	mov	r0, r3
 8012016:	3708      	adds	r7, #8
 8012018:	46bd      	mov	sp, r7
 801201a:	bd80      	pop	{r7, pc}
 801201c:	200069dc 	.word	0x200069dc
 8012020:	40040000 	.word	0x40040000

08012024 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8012024:	b580      	push	{r7, lr}
 8012026:	b084      	sub	sp, #16
 8012028:	af00      	add	r7, sp, #0
 801202a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801202c:	2300      	movs	r3, #0
 801202e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8012030:	2300      	movs	r3, #0
 8012032:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8012034:	687b      	ldr	r3, [r7, #4]
 8012036:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 801203a:	4618      	mov	r0, r3
 801203c:	f7f1 fa06 	bl	800344c <HAL_PCD_Start>
 8012040:	4603      	mov	r3, r0
 8012042:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8012044:	7bfb      	ldrb	r3, [r7, #15]
 8012046:	4618      	mov	r0, r3
 8012048:	f000 f942 	bl	80122d0 <USBD_Get_USB_Status>
 801204c:	4603      	mov	r3, r0
 801204e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8012050:	7bbb      	ldrb	r3, [r7, #14]
}
 8012052:	4618      	mov	r0, r3
 8012054:	3710      	adds	r7, #16
 8012056:	46bd      	mov	sp, r7
 8012058:	bd80      	pop	{r7, pc}

0801205a <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 801205a:	b580      	push	{r7, lr}
 801205c:	b084      	sub	sp, #16
 801205e:	af00      	add	r7, sp, #0
 8012060:	6078      	str	r0, [r7, #4]
 8012062:	4608      	mov	r0, r1
 8012064:	4611      	mov	r1, r2
 8012066:	461a      	mov	r2, r3
 8012068:	4603      	mov	r3, r0
 801206a:	70fb      	strb	r3, [r7, #3]
 801206c:	460b      	mov	r3, r1
 801206e:	70bb      	strb	r3, [r7, #2]
 8012070:	4613      	mov	r3, r2
 8012072:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8012074:	2300      	movs	r3, #0
 8012076:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8012078:	2300      	movs	r3, #0
 801207a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 801207c:	687b      	ldr	r3, [r7, #4]
 801207e:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8012082:	78bb      	ldrb	r3, [r7, #2]
 8012084:	883a      	ldrh	r2, [r7, #0]
 8012086:	78f9      	ldrb	r1, [r7, #3]
 8012088:	f7f1 fe17 	bl	8003cba <HAL_PCD_EP_Open>
 801208c:	4603      	mov	r3, r0
 801208e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8012090:	7bfb      	ldrb	r3, [r7, #15]
 8012092:	4618      	mov	r0, r3
 8012094:	f000 f91c 	bl	80122d0 <USBD_Get_USB_Status>
 8012098:	4603      	mov	r3, r0
 801209a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801209c:	7bbb      	ldrb	r3, [r7, #14]
}
 801209e:	4618      	mov	r0, r3
 80120a0:	3710      	adds	r7, #16
 80120a2:	46bd      	mov	sp, r7
 80120a4:	bd80      	pop	{r7, pc}

080120a6 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80120a6:	b580      	push	{r7, lr}
 80120a8:	b084      	sub	sp, #16
 80120aa:	af00      	add	r7, sp, #0
 80120ac:	6078      	str	r0, [r7, #4]
 80120ae:	460b      	mov	r3, r1
 80120b0:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80120b2:	2300      	movs	r3, #0
 80120b4:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80120b6:	2300      	movs	r3, #0
 80120b8:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 80120ba:	687b      	ldr	r3, [r7, #4]
 80120bc:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80120c0:	78fa      	ldrb	r2, [r7, #3]
 80120c2:	4611      	mov	r1, r2
 80120c4:	4618      	mov	r0, r3
 80120c6:	f7f1 fe60 	bl	8003d8a <HAL_PCD_EP_Close>
 80120ca:	4603      	mov	r3, r0
 80120cc:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80120ce:	7bfb      	ldrb	r3, [r7, #15]
 80120d0:	4618      	mov	r0, r3
 80120d2:	f000 f8fd 	bl	80122d0 <USBD_Get_USB_Status>
 80120d6:	4603      	mov	r3, r0
 80120d8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80120da:	7bbb      	ldrb	r3, [r7, #14]
}
 80120dc:	4618      	mov	r0, r3
 80120de:	3710      	adds	r7, #16
 80120e0:	46bd      	mov	sp, r7
 80120e2:	bd80      	pop	{r7, pc}

080120e4 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80120e4:	b580      	push	{r7, lr}
 80120e6:	b084      	sub	sp, #16
 80120e8:	af00      	add	r7, sp, #0
 80120ea:	6078      	str	r0, [r7, #4]
 80120ec:	460b      	mov	r3, r1
 80120ee:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80120f0:	2300      	movs	r3, #0
 80120f2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80120f4:	2300      	movs	r3, #0
 80120f6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 80120f8:	687b      	ldr	r3, [r7, #4]
 80120fa:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80120fe:	78fa      	ldrb	r2, [r7, #3]
 8012100:	4611      	mov	r1, r2
 8012102:	4618      	mov	r0, r3
 8012104:	f7f1 ff38 	bl	8003f78 <HAL_PCD_EP_SetStall>
 8012108:	4603      	mov	r3, r0
 801210a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801210c:	7bfb      	ldrb	r3, [r7, #15]
 801210e:	4618      	mov	r0, r3
 8012110:	f000 f8de 	bl	80122d0 <USBD_Get_USB_Status>
 8012114:	4603      	mov	r3, r0
 8012116:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8012118:	7bbb      	ldrb	r3, [r7, #14]
}
 801211a:	4618      	mov	r0, r3
 801211c:	3710      	adds	r7, #16
 801211e:	46bd      	mov	sp, r7
 8012120:	bd80      	pop	{r7, pc}

08012122 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8012122:	b580      	push	{r7, lr}
 8012124:	b084      	sub	sp, #16
 8012126:	af00      	add	r7, sp, #0
 8012128:	6078      	str	r0, [r7, #4]
 801212a:	460b      	mov	r3, r1
 801212c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801212e:	2300      	movs	r3, #0
 8012130:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8012132:	2300      	movs	r3, #0
 8012134:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8012136:	687b      	ldr	r3, [r7, #4]
 8012138:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 801213c:	78fa      	ldrb	r2, [r7, #3]
 801213e:	4611      	mov	r1, r2
 8012140:	4618      	mov	r0, r3
 8012142:	f7f1 ff7d 	bl	8004040 <HAL_PCD_EP_ClrStall>
 8012146:	4603      	mov	r3, r0
 8012148:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801214a:	7bfb      	ldrb	r3, [r7, #15]
 801214c:	4618      	mov	r0, r3
 801214e:	f000 f8bf 	bl	80122d0 <USBD_Get_USB_Status>
 8012152:	4603      	mov	r3, r0
 8012154:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8012156:	7bbb      	ldrb	r3, [r7, #14]
}
 8012158:	4618      	mov	r0, r3
 801215a:	3710      	adds	r7, #16
 801215c:	46bd      	mov	sp, r7
 801215e:	bd80      	pop	{r7, pc}

08012160 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8012160:	b480      	push	{r7}
 8012162:	b085      	sub	sp, #20
 8012164:	af00      	add	r7, sp, #0
 8012166:	6078      	str	r0, [r7, #4]
 8012168:	460b      	mov	r3, r1
 801216a:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 801216c:	687b      	ldr	r3, [r7, #4]
 801216e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8012172:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8012174:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8012178:	2b00      	cmp	r3, #0
 801217a:	da0b      	bge.n	8012194 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 801217c:	78fb      	ldrb	r3, [r7, #3]
 801217e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8012182:	68f9      	ldr	r1, [r7, #12]
 8012184:	4613      	mov	r3, r2
 8012186:	00db      	lsls	r3, r3, #3
 8012188:	1a9b      	subs	r3, r3, r2
 801218a:	009b      	lsls	r3, r3, #2
 801218c:	440b      	add	r3, r1
 801218e:	333e      	adds	r3, #62	; 0x3e
 8012190:	781b      	ldrb	r3, [r3, #0]
 8012192:	e00b      	b.n	80121ac <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8012194:	78fb      	ldrb	r3, [r7, #3]
 8012196:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 801219a:	68f9      	ldr	r1, [r7, #12]
 801219c:	4613      	mov	r3, r2
 801219e:	00db      	lsls	r3, r3, #3
 80121a0:	1a9b      	subs	r3, r3, r2
 80121a2:	009b      	lsls	r3, r3, #2
 80121a4:	440b      	add	r3, r1
 80121a6:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 80121aa:	781b      	ldrb	r3, [r3, #0]
  }
}
 80121ac:	4618      	mov	r0, r3
 80121ae:	3714      	adds	r7, #20
 80121b0:	46bd      	mov	sp, r7
 80121b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80121b6:	4770      	bx	lr

080121b8 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 80121b8:	b580      	push	{r7, lr}
 80121ba:	b084      	sub	sp, #16
 80121bc:	af00      	add	r7, sp, #0
 80121be:	6078      	str	r0, [r7, #4]
 80121c0:	460b      	mov	r3, r1
 80121c2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80121c4:	2300      	movs	r3, #0
 80121c6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80121c8:	2300      	movs	r3, #0
 80121ca:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 80121cc:	687b      	ldr	r3, [r7, #4]
 80121ce:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80121d2:	78fa      	ldrb	r2, [r7, #3]
 80121d4:	4611      	mov	r1, r2
 80121d6:	4618      	mov	r0, r3
 80121d8:	f7f1 fd4a 	bl	8003c70 <HAL_PCD_SetAddress>
 80121dc:	4603      	mov	r3, r0
 80121de:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80121e0:	7bfb      	ldrb	r3, [r7, #15]
 80121e2:	4618      	mov	r0, r3
 80121e4:	f000 f874 	bl	80122d0 <USBD_Get_USB_Status>
 80121e8:	4603      	mov	r3, r0
 80121ea:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80121ec:	7bbb      	ldrb	r3, [r7, #14]
}
 80121ee:	4618      	mov	r0, r3
 80121f0:	3710      	adds	r7, #16
 80121f2:	46bd      	mov	sp, r7
 80121f4:	bd80      	pop	{r7, pc}

080121f6 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 80121f6:	b580      	push	{r7, lr}
 80121f8:	b086      	sub	sp, #24
 80121fa:	af00      	add	r7, sp, #0
 80121fc:	60f8      	str	r0, [r7, #12]
 80121fe:	607a      	str	r2, [r7, #4]
 8012200:	603b      	str	r3, [r7, #0]
 8012202:	460b      	mov	r3, r1
 8012204:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8012206:	2300      	movs	r3, #0
 8012208:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801220a:	2300      	movs	r3, #0
 801220c:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 801220e:	68fb      	ldr	r3, [r7, #12]
 8012210:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8012214:	7af9      	ldrb	r1, [r7, #11]
 8012216:	683b      	ldr	r3, [r7, #0]
 8012218:	687a      	ldr	r2, [r7, #4]
 801221a:	f7f1 fe63 	bl	8003ee4 <HAL_PCD_EP_Transmit>
 801221e:	4603      	mov	r3, r0
 8012220:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8012222:	7dfb      	ldrb	r3, [r7, #23]
 8012224:	4618      	mov	r0, r3
 8012226:	f000 f853 	bl	80122d0 <USBD_Get_USB_Status>
 801222a:	4603      	mov	r3, r0
 801222c:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 801222e:	7dbb      	ldrb	r3, [r7, #22]
}
 8012230:	4618      	mov	r0, r3
 8012232:	3718      	adds	r7, #24
 8012234:	46bd      	mov	sp, r7
 8012236:	bd80      	pop	{r7, pc}

08012238 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8012238:	b580      	push	{r7, lr}
 801223a:	b086      	sub	sp, #24
 801223c:	af00      	add	r7, sp, #0
 801223e:	60f8      	str	r0, [r7, #12]
 8012240:	607a      	str	r2, [r7, #4]
 8012242:	603b      	str	r3, [r7, #0]
 8012244:	460b      	mov	r3, r1
 8012246:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8012248:	2300      	movs	r3, #0
 801224a:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801224c:	2300      	movs	r3, #0
 801224e:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8012250:	68fb      	ldr	r3, [r7, #12]
 8012252:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8012256:	7af9      	ldrb	r1, [r7, #11]
 8012258:	683b      	ldr	r3, [r7, #0]
 801225a:	687a      	ldr	r2, [r7, #4]
 801225c:	f7f1 fddf 	bl	8003e1e <HAL_PCD_EP_Receive>
 8012260:	4603      	mov	r3, r0
 8012262:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8012264:	7dfb      	ldrb	r3, [r7, #23]
 8012266:	4618      	mov	r0, r3
 8012268:	f000 f832 	bl	80122d0 <USBD_Get_USB_Status>
 801226c:	4603      	mov	r3, r0
 801226e:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8012270:	7dbb      	ldrb	r3, [r7, #22]
}
 8012272:	4618      	mov	r0, r3
 8012274:	3718      	adds	r7, #24
 8012276:	46bd      	mov	sp, r7
 8012278:	bd80      	pop	{r7, pc}

0801227a <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801227a:	b580      	push	{r7, lr}
 801227c:	b082      	sub	sp, #8
 801227e:	af00      	add	r7, sp, #0
 8012280:	6078      	str	r0, [r7, #4]
 8012282:	460b      	mov	r3, r1
 8012284:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8012286:	687b      	ldr	r3, [r7, #4]
 8012288:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 801228c:	78fa      	ldrb	r2, [r7, #3]
 801228e:	4611      	mov	r1, r2
 8012290:	4618      	mov	r0, r3
 8012292:	f7f1 fe0f 	bl	8003eb4 <HAL_PCD_EP_GetRxCount>
 8012296:	4603      	mov	r3, r0
}
 8012298:	4618      	mov	r0, r3
 801229a:	3708      	adds	r7, #8
 801229c:	46bd      	mov	sp, r7
 801229e:	bd80      	pop	{r7, pc}

080122a0 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 80122a0:	b480      	push	{r7}
 80122a2:	b083      	sub	sp, #12
 80122a4:	af00      	add	r7, sp, #0
 80122a6:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 80122a8:	4b03      	ldr	r3, [pc, #12]	; (80122b8 <USBD_static_malloc+0x18>)
}
 80122aa:	4618      	mov	r0, r3
 80122ac:	370c      	adds	r7, #12
 80122ae:	46bd      	mov	sp, r7
 80122b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80122b4:	4770      	bx	lr
 80122b6:	bf00      	nop
 80122b8:	20004acc 	.word	0x20004acc

080122bc <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 80122bc:	b480      	push	{r7}
 80122be:	b083      	sub	sp, #12
 80122c0:	af00      	add	r7, sp, #0
 80122c2:	6078      	str	r0, [r7, #4]

}
 80122c4:	bf00      	nop
 80122c6:	370c      	adds	r7, #12
 80122c8:	46bd      	mov	sp, r7
 80122ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80122ce:	4770      	bx	lr

080122d0 <USBD_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 80122d0:	b480      	push	{r7}
 80122d2:	b085      	sub	sp, #20
 80122d4:	af00      	add	r7, sp, #0
 80122d6:	4603      	mov	r3, r0
 80122d8:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80122da:	2300      	movs	r3, #0
 80122dc:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 80122de:	79fb      	ldrb	r3, [r7, #7]
 80122e0:	2b03      	cmp	r3, #3
 80122e2:	d817      	bhi.n	8012314 <USBD_Get_USB_Status+0x44>
 80122e4:	a201      	add	r2, pc, #4	; (adr r2, 80122ec <USBD_Get_USB_Status+0x1c>)
 80122e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80122ea:	bf00      	nop
 80122ec:	080122fd 	.word	0x080122fd
 80122f0:	08012303 	.word	0x08012303
 80122f4:	08012309 	.word	0x08012309
 80122f8:	0801230f 	.word	0x0801230f
  {
    case HAL_OK :
      usb_status = USBD_OK;
 80122fc:	2300      	movs	r3, #0
 80122fe:	73fb      	strb	r3, [r7, #15]
    break;
 8012300:	e00b      	b.n	801231a <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8012302:	2303      	movs	r3, #3
 8012304:	73fb      	strb	r3, [r7, #15]
    break;
 8012306:	e008      	b.n	801231a <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8012308:	2301      	movs	r3, #1
 801230a:	73fb      	strb	r3, [r7, #15]
    break;
 801230c:	e005      	b.n	801231a <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 801230e:	2303      	movs	r3, #3
 8012310:	73fb      	strb	r3, [r7, #15]
    break;
 8012312:	e002      	b.n	801231a <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8012314:	2303      	movs	r3, #3
 8012316:	73fb      	strb	r3, [r7, #15]
    break;
 8012318:	bf00      	nop
  }
  return usb_status;
 801231a:	7bfb      	ldrb	r3, [r7, #15]
}
 801231c:	4618      	mov	r0, r3
 801231e:	3714      	adds	r7, #20
 8012320:	46bd      	mov	sp, r7
 8012322:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012326:	4770      	bx	lr

08012328 <__libc_init_array>:
 8012328:	b570      	push	{r4, r5, r6, lr}
 801232a:	4d0d      	ldr	r5, [pc, #52]	; (8012360 <__libc_init_array+0x38>)
 801232c:	4c0d      	ldr	r4, [pc, #52]	; (8012364 <__libc_init_array+0x3c>)
 801232e:	1b64      	subs	r4, r4, r5
 8012330:	10a4      	asrs	r4, r4, #2
 8012332:	2600      	movs	r6, #0
 8012334:	42a6      	cmp	r6, r4
 8012336:	d109      	bne.n	801234c <__libc_init_array+0x24>
 8012338:	4d0b      	ldr	r5, [pc, #44]	; (8012368 <__libc_init_array+0x40>)
 801233a:	4c0c      	ldr	r4, [pc, #48]	; (801236c <__libc_init_array+0x44>)
 801233c:	f000 f82e 	bl	801239c <_init>
 8012340:	1b64      	subs	r4, r4, r5
 8012342:	10a4      	asrs	r4, r4, #2
 8012344:	2600      	movs	r6, #0
 8012346:	42a6      	cmp	r6, r4
 8012348:	d105      	bne.n	8012356 <__libc_init_array+0x2e>
 801234a:	bd70      	pop	{r4, r5, r6, pc}
 801234c:	f855 3b04 	ldr.w	r3, [r5], #4
 8012350:	4798      	blx	r3
 8012352:	3601      	adds	r6, #1
 8012354:	e7ee      	b.n	8012334 <__libc_init_array+0xc>
 8012356:	f855 3b04 	ldr.w	r3, [r5], #4
 801235a:	4798      	blx	r3
 801235c:	3601      	adds	r6, #1
 801235e:	e7f2      	b.n	8012346 <__libc_init_array+0x1e>
 8012360:	080124e4 	.word	0x080124e4
 8012364:	080124e4 	.word	0x080124e4
 8012368:	080124e4 	.word	0x080124e4
 801236c:	080124e8 	.word	0x080124e8

08012370 <memcpy>:
 8012370:	440a      	add	r2, r1
 8012372:	4291      	cmp	r1, r2
 8012374:	f100 33ff 	add.w	r3, r0, #4294967295
 8012378:	d100      	bne.n	801237c <memcpy+0xc>
 801237a:	4770      	bx	lr
 801237c:	b510      	push	{r4, lr}
 801237e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8012382:	f803 4f01 	strb.w	r4, [r3, #1]!
 8012386:	4291      	cmp	r1, r2
 8012388:	d1f9      	bne.n	801237e <memcpy+0xe>
 801238a:	bd10      	pop	{r4, pc}

0801238c <memset>:
 801238c:	4402      	add	r2, r0
 801238e:	4603      	mov	r3, r0
 8012390:	4293      	cmp	r3, r2
 8012392:	d100      	bne.n	8012396 <memset+0xa>
 8012394:	4770      	bx	lr
 8012396:	f803 1b01 	strb.w	r1, [r3], #1
 801239a:	e7f9      	b.n	8012390 <memset+0x4>

0801239c <_init>:
 801239c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801239e:	bf00      	nop
 80123a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80123a2:	bc08      	pop	{r3}
 80123a4:	469e      	mov	lr, r3
 80123a6:	4770      	bx	lr

080123a8 <_fini>:
 80123a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80123aa:	bf00      	nop
 80123ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80123ae:	bc08      	pop	{r3}
 80123b0:	469e      	mov	lr, r3
 80123b2:	4770      	bx	lr
