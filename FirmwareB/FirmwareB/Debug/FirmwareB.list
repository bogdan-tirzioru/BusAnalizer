
FirmwareB.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002cc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00012114  080002d0  080002d0  000102d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000128  080123e4  080123e4  000223e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0801250c  0801250c  0002250c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08012514  08012514  00022514  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08012518  08012518  00022518  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000188  20000000  0801251c  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00006eec  20000188  080126a4  00030188  2**3
                  ALLOC
  8 ._user_heap_stack 00000604  20007074  080126a4  00037074  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  00030188  2**0
                  CONTENTS, READONLY
 10 .debug_info   0004e7d2  00000000  00000000  000301b6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00007ebd  00000000  00000000  0007e988  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 000029f0  00000000  00000000  00086848  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 00002768  00000000  00000000  00089238  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  0000adaf  00000000  00000000  0008b9a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   00032f2d  00000000  00000000  0009674f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    0017a10e  00000000  00000000  000c967c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000053  00000000  00000000  0024378a  2**0
                  CONTENTS, READONLY
 18 .debug_frame  0000b35c  00000000  00000000  002437e0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002d0 <__do_global_dtors_aux>:
 80002d0:	b510      	push	{r4, lr}
 80002d2:	4c05      	ldr	r4, [pc, #20]	; (80002e8 <__do_global_dtors_aux+0x18>)
 80002d4:	7823      	ldrb	r3, [r4, #0]
 80002d6:	b933      	cbnz	r3, 80002e6 <__do_global_dtors_aux+0x16>
 80002d8:	4b04      	ldr	r3, [pc, #16]	; (80002ec <__do_global_dtors_aux+0x1c>)
 80002da:	b113      	cbz	r3, 80002e2 <__do_global_dtors_aux+0x12>
 80002dc:	4804      	ldr	r0, [pc, #16]	; (80002f0 <__do_global_dtors_aux+0x20>)
 80002de:	f3af 8000 	nop.w
 80002e2:	2301      	movs	r3, #1
 80002e4:	7023      	strb	r3, [r4, #0]
 80002e6:	bd10      	pop	{r4, pc}
 80002e8:	20000188 	.word	0x20000188
 80002ec:	00000000 	.word	0x00000000
 80002f0:	080123cc 	.word	0x080123cc

080002f4 <frame_dummy>:
 80002f4:	b508      	push	{r3, lr}
 80002f6:	4b03      	ldr	r3, [pc, #12]	; (8000304 <frame_dummy+0x10>)
 80002f8:	b11b      	cbz	r3, 8000302 <frame_dummy+0xe>
 80002fa:	4903      	ldr	r1, [pc, #12]	; (8000308 <frame_dummy+0x14>)
 80002fc:	4803      	ldr	r0, [pc, #12]	; (800030c <frame_dummy+0x18>)
 80002fe:	f3af 8000 	nop.w
 8000302:	bd08      	pop	{r3, pc}
 8000304:	00000000 	.word	0x00000000
 8000308:	2000018c 	.word	0x2000018c
 800030c:	080123cc 	.word	0x080123cc

08000310 <__aeabi_uldivmod>:
 8000310:	b953      	cbnz	r3, 8000328 <__aeabi_uldivmod+0x18>
 8000312:	b94a      	cbnz	r2, 8000328 <__aeabi_uldivmod+0x18>
 8000314:	2900      	cmp	r1, #0
 8000316:	bf08      	it	eq
 8000318:	2800      	cmpeq	r0, #0
 800031a:	bf1c      	itt	ne
 800031c:	f04f 31ff 	movne.w	r1, #4294967295
 8000320:	f04f 30ff 	movne.w	r0, #4294967295
 8000324:	f000 b96e 	b.w	8000604 <__aeabi_idiv0>
 8000328:	f1ad 0c08 	sub.w	ip, sp, #8
 800032c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000330:	f000 f806 	bl	8000340 <__udivmoddi4>
 8000334:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000338:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800033c:	b004      	add	sp, #16
 800033e:	4770      	bx	lr

08000340 <__udivmoddi4>:
 8000340:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000344:	9d08      	ldr	r5, [sp, #32]
 8000346:	4604      	mov	r4, r0
 8000348:	468c      	mov	ip, r1
 800034a:	2b00      	cmp	r3, #0
 800034c:	f040 8083 	bne.w	8000456 <__udivmoddi4+0x116>
 8000350:	428a      	cmp	r2, r1
 8000352:	4617      	mov	r7, r2
 8000354:	d947      	bls.n	80003e6 <__udivmoddi4+0xa6>
 8000356:	fab2 f282 	clz	r2, r2
 800035a:	b142      	cbz	r2, 800036e <__udivmoddi4+0x2e>
 800035c:	f1c2 0020 	rsb	r0, r2, #32
 8000360:	fa24 f000 	lsr.w	r0, r4, r0
 8000364:	4091      	lsls	r1, r2
 8000366:	4097      	lsls	r7, r2
 8000368:	ea40 0c01 	orr.w	ip, r0, r1
 800036c:	4094      	lsls	r4, r2
 800036e:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000372:	0c23      	lsrs	r3, r4, #16
 8000374:	fbbc f6f8 	udiv	r6, ip, r8
 8000378:	fa1f fe87 	uxth.w	lr, r7
 800037c:	fb08 c116 	mls	r1, r8, r6, ip
 8000380:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000384:	fb06 f10e 	mul.w	r1, r6, lr
 8000388:	4299      	cmp	r1, r3
 800038a:	d909      	bls.n	80003a0 <__udivmoddi4+0x60>
 800038c:	18fb      	adds	r3, r7, r3
 800038e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000392:	f080 8119 	bcs.w	80005c8 <__udivmoddi4+0x288>
 8000396:	4299      	cmp	r1, r3
 8000398:	f240 8116 	bls.w	80005c8 <__udivmoddi4+0x288>
 800039c:	3e02      	subs	r6, #2
 800039e:	443b      	add	r3, r7
 80003a0:	1a5b      	subs	r3, r3, r1
 80003a2:	b2a4      	uxth	r4, r4
 80003a4:	fbb3 f0f8 	udiv	r0, r3, r8
 80003a8:	fb08 3310 	mls	r3, r8, r0, r3
 80003ac:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80003b0:	fb00 fe0e 	mul.w	lr, r0, lr
 80003b4:	45a6      	cmp	lr, r4
 80003b6:	d909      	bls.n	80003cc <__udivmoddi4+0x8c>
 80003b8:	193c      	adds	r4, r7, r4
 80003ba:	f100 33ff 	add.w	r3, r0, #4294967295
 80003be:	f080 8105 	bcs.w	80005cc <__udivmoddi4+0x28c>
 80003c2:	45a6      	cmp	lr, r4
 80003c4:	f240 8102 	bls.w	80005cc <__udivmoddi4+0x28c>
 80003c8:	3802      	subs	r0, #2
 80003ca:	443c      	add	r4, r7
 80003cc:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003d0:	eba4 040e 	sub.w	r4, r4, lr
 80003d4:	2600      	movs	r6, #0
 80003d6:	b11d      	cbz	r5, 80003e0 <__udivmoddi4+0xa0>
 80003d8:	40d4      	lsrs	r4, r2
 80003da:	2300      	movs	r3, #0
 80003dc:	e9c5 4300 	strd	r4, r3, [r5]
 80003e0:	4631      	mov	r1, r6
 80003e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003e6:	b902      	cbnz	r2, 80003ea <__udivmoddi4+0xaa>
 80003e8:	deff      	udf	#255	; 0xff
 80003ea:	fab2 f282 	clz	r2, r2
 80003ee:	2a00      	cmp	r2, #0
 80003f0:	d150      	bne.n	8000494 <__udivmoddi4+0x154>
 80003f2:	1bcb      	subs	r3, r1, r7
 80003f4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003f8:	fa1f f887 	uxth.w	r8, r7
 80003fc:	2601      	movs	r6, #1
 80003fe:	fbb3 fcfe 	udiv	ip, r3, lr
 8000402:	0c21      	lsrs	r1, r4, #16
 8000404:	fb0e 331c 	mls	r3, lr, ip, r3
 8000408:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800040c:	fb08 f30c 	mul.w	r3, r8, ip
 8000410:	428b      	cmp	r3, r1
 8000412:	d907      	bls.n	8000424 <__udivmoddi4+0xe4>
 8000414:	1879      	adds	r1, r7, r1
 8000416:	f10c 30ff 	add.w	r0, ip, #4294967295
 800041a:	d202      	bcs.n	8000422 <__udivmoddi4+0xe2>
 800041c:	428b      	cmp	r3, r1
 800041e:	f200 80e9 	bhi.w	80005f4 <__udivmoddi4+0x2b4>
 8000422:	4684      	mov	ip, r0
 8000424:	1ac9      	subs	r1, r1, r3
 8000426:	b2a3      	uxth	r3, r4
 8000428:	fbb1 f0fe 	udiv	r0, r1, lr
 800042c:	fb0e 1110 	mls	r1, lr, r0, r1
 8000430:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000434:	fb08 f800 	mul.w	r8, r8, r0
 8000438:	45a0      	cmp	r8, r4
 800043a:	d907      	bls.n	800044c <__udivmoddi4+0x10c>
 800043c:	193c      	adds	r4, r7, r4
 800043e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000442:	d202      	bcs.n	800044a <__udivmoddi4+0x10a>
 8000444:	45a0      	cmp	r8, r4
 8000446:	f200 80d9 	bhi.w	80005fc <__udivmoddi4+0x2bc>
 800044a:	4618      	mov	r0, r3
 800044c:	eba4 0408 	sub.w	r4, r4, r8
 8000450:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000454:	e7bf      	b.n	80003d6 <__udivmoddi4+0x96>
 8000456:	428b      	cmp	r3, r1
 8000458:	d909      	bls.n	800046e <__udivmoddi4+0x12e>
 800045a:	2d00      	cmp	r5, #0
 800045c:	f000 80b1 	beq.w	80005c2 <__udivmoddi4+0x282>
 8000460:	2600      	movs	r6, #0
 8000462:	e9c5 0100 	strd	r0, r1, [r5]
 8000466:	4630      	mov	r0, r6
 8000468:	4631      	mov	r1, r6
 800046a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800046e:	fab3 f683 	clz	r6, r3
 8000472:	2e00      	cmp	r6, #0
 8000474:	d14a      	bne.n	800050c <__udivmoddi4+0x1cc>
 8000476:	428b      	cmp	r3, r1
 8000478:	d302      	bcc.n	8000480 <__udivmoddi4+0x140>
 800047a:	4282      	cmp	r2, r0
 800047c:	f200 80b8 	bhi.w	80005f0 <__udivmoddi4+0x2b0>
 8000480:	1a84      	subs	r4, r0, r2
 8000482:	eb61 0103 	sbc.w	r1, r1, r3
 8000486:	2001      	movs	r0, #1
 8000488:	468c      	mov	ip, r1
 800048a:	2d00      	cmp	r5, #0
 800048c:	d0a8      	beq.n	80003e0 <__udivmoddi4+0xa0>
 800048e:	e9c5 4c00 	strd	r4, ip, [r5]
 8000492:	e7a5      	b.n	80003e0 <__udivmoddi4+0xa0>
 8000494:	f1c2 0320 	rsb	r3, r2, #32
 8000498:	fa20 f603 	lsr.w	r6, r0, r3
 800049c:	4097      	lsls	r7, r2
 800049e:	fa01 f002 	lsl.w	r0, r1, r2
 80004a2:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80004a6:	40d9      	lsrs	r1, r3
 80004a8:	4330      	orrs	r0, r6
 80004aa:	0c03      	lsrs	r3, r0, #16
 80004ac:	fbb1 f6fe 	udiv	r6, r1, lr
 80004b0:	fa1f f887 	uxth.w	r8, r7
 80004b4:	fb0e 1116 	mls	r1, lr, r6, r1
 80004b8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004bc:	fb06 f108 	mul.w	r1, r6, r8
 80004c0:	4299      	cmp	r1, r3
 80004c2:	fa04 f402 	lsl.w	r4, r4, r2
 80004c6:	d909      	bls.n	80004dc <__udivmoddi4+0x19c>
 80004c8:	18fb      	adds	r3, r7, r3
 80004ca:	f106 3cff 	add.w	ip, r6, #4294967295
 80004ce:	f080 808d 	bcs.w	80005ec <__udivmoddi4+0x2ac>
 80004d2:	4299      	cmp	r1, r3
 80004d4:	f240 808a 	bls.w	80005ec <__udivmoddi4+0x2ac>
 80004d8:	3e02      	subs	r6, #2
 80004da:	443b      	add	r3, r7
 80004dc:	1a5b      	subs	r3, r3, r1
 80004de:	b281      	uxth	r1, r0
 80004e0:	fbb3 f0fe 	udiv	r0, r3, lr
 80004e4:	fb0e 3310 	mls	r3, lr, r0, r3
 80004e8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004ec:	fb00 f308 	mul.w	r3, r0, r8
 80004f0:	428b      	cmp	r3, r1
 80004f2:	d907      	bls.n	8000504 <__udivmoddi4+0x1c4>
 80004f4:	1879      	adds	r1, r7, r1
 80004f6:	f100 3cff 	add.w	ip, r0, #4294967295
 80004fa:	d273      	bcs.n	80005e4 <__udivmoddi4+0x2a4>
 80004fc:	428b      	cmp	r3, r1
 80004fe:	d971      	bls.n	80005e4 <__udivmoddi4+0x2a4>
 8000500:	3802      	subs	r0, #2
 8000502:	4439      	add	r1, r7
 8000504:	1acb      	subs	r3, r1, r3
 8000506:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800050a:	e778      	b.n	80003fe <__udivmoddi4+0xbe>
 800050c:	f1c6 0c20 	rsb	ip, r6, #32
 8000510:	fa03 f406 	lsl.w	r4, r3, r6
 8000514:	fa22 f30c 	lsr.w	r3, r2, ip
 8000518:	431c      	orrs	r4, r3
 800051a:	fa20 f70c 	lsr.w	r7, r0, ip
 800051e:	fa01 f306 	lsl.w	r3, r1, r6
 8000522:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000526:	fa21 f10c 	lsr.w	r1, r1, ip
 800052a:	431f      	orrs	r7, r3
 800052c:	0c3b      	lsrs	r3, r7, #16
 800052e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000532:	fa1f f884 	uxth.w	r8, r4
 8000536:	fb0e 1119 	mls	r1, lr, r9, r1
 800053a:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 800053e:	fb09 fa08 	mul.w	sl, r9, r8
 8000542:	458a      	cmp	sl, r1
 8000544:	fa02 f206 	lsl.w	r2, r2, r6
 8000548:	fa00 f306 	lsl.w	r3, r0, r6
 800054c:	d908      	bls.n	8000560 <__udivmoddi4+0x220>
 800054e:	1861      	adds	r1, r4, r1
 8000550:	f109 30ff 	add.w	r0, r9, #4294967295
 8000554:	d248      	bcs.n	80005e8 <__udivmoddi4+0x2a8>
 8000556:	458a      	cmp	sl, r1
 8000558:	d946      	bls.n	80005e8 <__udivmoddi4+0x2a8>
 800055a:	f1a9 0902 	sub.w	r9, r9, #2
 800055e:	4421      	add	r1, r4
 8000560:	eba1 010a 	sub.w	r1, r1, sl
 8000564:	b2bf      	uxth	r7, r7
 8000566:	fbb1 f0fe 	udiv	r0, r1, lr
 800056a:	fb0e 1110 	mls	r1, lr, r0, r1
 800056e:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000572:	fb00 f808 	mul.w	r8, r0, r8
 8000576:	45b8      	cmp	r8, r7
 8000578:	d907      	bls.n	800058a <__udivmoddi4+0x24a>
 800057a:	19e7      	adds	r7, r4, r7
 800057c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000580:	d22e      	bcs.n	80005e0 <__udivmoddi4+0x2a0>
 8000582:	45b8      	cmp	r8, r7
 8000584:	d92c      	bls.n	80005e0 <__udivmoddi4+0x2a0>
 8000586:	3802      	subs	r0, #2
 8000588:	4427      	add	r7, r4
 800058a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800058e:	eba7 0708 	sub.w	r7, r7, r8
 8000592:	fba0 8902 	umull	r8, r9, r0, r2
 8000596:	454f      	cmp	r7, r9
 8000598:	46c6      	mov	lr, r8
 800059a:	4649      	mov	r1, r9
 800059c:	d31a      	bcc.n	80005d4 <__udivmoddi4+0x294>
 800059e:	d017      	beq.n	80005d0 <__udivmoddi4+0x290>
 80005a0:	b15d      	cbz	r5, 80005ba <__udivmoddi4+0x27a>
 80005a2:	ebb3 020e 	subs.w	r2, r3, lr
 80005a6:	eb67 0701 	sbc.w	r7, r7, r1
 80005aa:	fa07 fc0c 	lsl.w	ip, r7, ip
 80005ae:	40f2      	lsrs	r2, r6
 80005b0:	ea4c 0202 	orr.w	r2, ip, r2
 80005b4:	40f7      	lsrs	r7, r6
 80005b6:	e9c5 2700 	strd	r2, r7, [r5]
 80005ba:	2600      	movs	r6, #0
 80005bc:	4631      	mov	r1, r6
 80005be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80005c2:	462e      	mov	r6, r5
 80005c4:	4628      	mov	r0, r5
 80005c6:	e70b      	b.n	80003e0 <__udivmoddi4+0xa0>
 80005c8:	4606      	mov	r6, r0
 80005ca:	e6e9      	b.n	80003a0 <__udivmoddi4+0x60>
 80005cc:	4618      	mov	r0, r3
 80005ce:	e6fd      	b.n	80003cc <__udivmoddi4+0x8c>
 80005d0:	4543      	cmp	r3, r8
 80005d2:	d2e5      	bcs.n	80005a0 <__udivmoddi4+0x260>
 80005d4:	ebb8 0e02 	subs.w	lr, r8, r2
 80005d8:	eb69 0104 	sbc.w	r1, r9, r4
 80005dc:	3801      	subs	r0, #1
 80005de:	e7df      	b.n	80005a0 <__udivmoddi4+0x260>
 80005e0:	4608      	mov	r0, r1
 80005e2:	e7d2      	b.n	800058a <__udivmoddi4+0x24a>
 80005e4:	4660      	mov	r0, ip
 80005e6:	e78d      	b.n	8000504 <__udivmoddi4+0x1c4>
 80005e8:	4681      	mov	r9, r0
 80005ea:	e7b9      	b.n	8000560 <__udivmoddi4+0x220>
 80005ec:	4666      	mov	r6, ip
 80005ee:	e775      	b.n	80004dc <__udivmoddi4+0x19c>
 80005f0:	4630      	mov	r0, r6
 80005f2:	e74a      	b.n	800048a <__udivmoddi4+0x14a>
 80005f4:	f1ac 0c02 	sub.w	ip, ip, #2
 80005f8:	4439      	add	r1, r7
 80005fa:	e713      	b.n	8000424 <__udivmoddi4+0xe4>
 80005fc:	3802      	subs	r0, #2
 80005fe:	443c      	add	r4, r7
 8000600:	e724      	b.n	800044c <__udivmoddi4+0x10c>
 8000602:	bf00      	nop

08000604 <__aeabi_idiv0>:
 8000604:	4770      	bx	lr
 8000606:	bf00      	nop

08000608 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000608:	b580      	push	{r7, lr}
 800060a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800060c:	f001 f84a 	bl	80016a4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000610:	f000 f826 	bl	8000660 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000614:	f000 face 	bl	8000bb4 <MX_GPIO_Init>
  MX_FDCAN1_Init();
 8000618:	f000 f89c 	bl	8000754 <MX_FDCAN1_Init>
  MX_FDCAN3_Init();
 800061c:	f000 f8fe 	bl	800081c <MX_FDCAN3_Init>
  MX_OCTOSPI1_Init();
 8000620:	f000 f960 	bl	80008e4 <MX_OCTOSPI1_Init>
  MX_SDMMC1_SD_Init();
 8000624:	f000 fa0a 	bl	8000a3c <MX_SDMMC1_SD_Init>
  MX_USART1_UART_Init();
 8000628:	f000 fa78 	bl	8000b1c <MX_USART1_UART_Init>
  MX_RTC_Init();
 800062c:	f000 f9de 	bl	80009ec <MX_RTC_Init>
  MX_FATFS_Init();
 8000630:	f00c faea 	bl	800cc08 <MX_FATFS_Init>
  MX_TIM2_Init();
 8000634:	f000 fa24 	bl	8000a80 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000638:	f00e f9f2 	bl	800ea20 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 800063c:	4a05      	ldr	r2, [pc, #20]	; (8000654 <main+0x4c>)
 800063e:	2100      	movs	r1, #0
 8000640:	4805      	ldr	r0, [pc, #20]	; (8000658 <main+0x50>)
 8000642:	f00e fa6e 	bl	800eb22 <osThreadNew>
 8000646:	4603      	mov	r3, r0
 8000648:	4a04      	ldr	r2, [pc, #16]	; (800065c <main+0x54>)
 800064a:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 800064c:	f00e fa2e 	bl	800eaac <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000650:	e7fe      	b.n	8000650 <main+0x48>
 8000652:	bf00      	nop
 8000654:	0801249c 	.word	0x0801249c
 8000658:	08000d31 	.word	0x08000d31
 800065c:	20004cec 	.word	0x20004cec

08000660 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000660:	b580      	push	{r7, lr}
 8000662:	b09c      	sub	sp, #112	; 0x70
 8000664:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000666:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800066a:	224c      	movs	r2, #76	; 0x4c
 800066c:	2100      	movs	r1, #0
 800066e:	4618      	mov	r0, r3
 8000670:	f011 fea4 	bl	80123bc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000674:	1d3b      	adds	r3, r7, #4
 8000676:	2220      	movs	r2, #32
 8000678:	2100      	movs	r1, #0
 800067a:	4618      	mov	r0, r3
 800067c:	f011 fe9e 	bl	80123bc <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8000680:	2002      	movs	r0, #2
 8000682:	f003 ffb5 	bl	80045f0 <HAL_PWREx_ConfigSupply>
  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8000686:	2300      	movs	r3, #0
 8000688:	603b      	str	r3, [r7, #0]
 800068a:	4b30      	ldr	r3, [pc, #192]	; (800074c <SystemClock_Config+0xec>)
 800068c:	699b      	ldr	r3, [r3, #24]
 800068e:	4a2f      	ldr	r2, [pc, #188]	; (800074c <SystemClock_Config+0xec>)
 8000690:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000694:	6193      	str	r3, [r2, #24]
 8000696:	4b2d      	ldr	r3, [pc, #180]	; (800074c <SystemClock_Config+0xec>)
 8000698:	699b      	ldr	r3, [r3, #24]
 800069a:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800069e:	603b      	str	r3, [r7, #0]
 80006a0:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 80006a2:	bf00      	nop
 80006a4:	4b29      	ldr	r3, [pc, #164]	; (800074c <SystemClock_Config+0xec>)
 80006a6:	699b      	ldr	r3, [r3, #24]
 80006a8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80006ac:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80006b0:	d1f8      	bne.n	80006a4 <SystemClock_Config+0x44>
  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 80006b2:	f003 ff8d 	bl	80045d0 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 80006b6:	4b26      	ldr	r3, [pc, #152]	; (8000750 <SystemClock_Config+0xf0>)
 80006b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80006ba:	4a25      	ldr	r2, [pc, #148]	; (8000750 <SystemClock_Config+0xf0>)
 80006bc:	f023 0318 	bic.w	r3, r3, #24
 80006c0:	6713      	str	r3, [r2, #112]	; 0x70
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE|RCC_OSCILLATORTYPE_LSE;
 80006c2:	2305      	movs	r3, #5
 80006c4:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80006c6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80006ca:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 80006cc:	2301      	movs	r3, #1
 80006ce:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006d0:	2302      	movs	r3, #2
 80006d2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80006d4:	2302      	movs	r3, #2
 80006d6:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 1;
 80006d8:	2301      	movs	r3, #1
 80006da:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 68;
 80006dc:	2344      	movs	r3, #68	; 0x44
 80006de:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 1;
 80006e0:	2301      	movs	r3, #1
 80006e2:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 5;
 80006e4:	2305      	movs	r3, #5
 80006e6:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 80006e8:	2302      	movs	r3, #2
 80006ea:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 80006ec:	230c      	movs	r3, #12
 80006ee:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 80006f0:	2300      	movs	r3, #0
 80006f2:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 6144;
 80006f4:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80006f8:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006fa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80006fe:	4618      	mov	r0, r3
 8000700:	f003 ffe0 	bl	80046c4 <HAL_RCC_OscConfig>
 8000704:	4603      	mov	r3, r0
 8000706:	2b00      	cmp	r3, #0
 8000708:	d001      	beq.n	800070e <SystemClock_Config+0xae>
  {
    Error_Handler();
 800070a:	f000 fb33 	bl	8000d74 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800070e:	233f      	movs	r3, #63	; 0x3f
 8000710:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000712:	2303      	movs	r3, #3
 8000714:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000716:	2300      	movs	r3, #0
 8000718:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 800071a:	2308      	movs	r3, #8
 800071c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 800071e:	2340      	movs	r3, #64	; 0x40
 8000720:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000722:	2340      	movs	r3, #64	; 0x40
 8000724:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8000726:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800072a:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 800072c:	2340      	movs	r3, #64	; 0x40
 800072e:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000730:	1d3b      	adds	r3, r7, #4
 8000732:	2103      	movs	r1, #3
 8000734:	4618      	mov	r0, r3
 8000736:	f004 fb53 	bl	8004de0 <HAL_RCC_ClockConfig>
 800073a:	4603      	mov	r3, r0
 800073c:	2b00      	cmp	r3, #0
 800073e:	d001      	beq.n	8000744 <SystemClock_Config+0xe4>
  {
    Error_Handler();
 8000740:	f000 fb18 	bl	8000d74 <Error_Handler>
  }
}
 8000744:	bf00      	nop
 8000746:	3770      	adds	r7, #112	; 0x70
 8000748:	46bd      	mov	sp, r7
 800074a:	bd80      	pop	{r7, pc}
 800074c:	58024800 	.word	0x58024800
 8000750:	58024400 	.word	0x58024400

08000754 <MX_FDCAN1_Init>:
  * @brief FDCAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_FDCAN1_Init(void)
{
 8000754:	b580      	push	{r7, lr}
 8000756:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN1_Init 0 */

  /* USER CODE BEGIN FDCAN1_Init 1 */

  /* USER CODE END FDCAN1_Init 1 */
  hfdcan1.Instance = FDCAN1;
 8000758:	4b2e      	ldr	r3, [pc, #184]	; (8000814 <MX_FDCAN1_Init+0xc0>)
 800075a:	4a2f      	ldr	r2, [pc, #188]	; (8000818 <MX_FDCAN1_Init+0xc4>)
 800075c:	601a      	str	r2, [r3, #0]
  hfdcan1.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 800075e:	4b2d      	ldr	r3, [pc, #180]	; (8000814 <MX_FDCAN1_Init+0xc0>)
 8000760:	2200      	movs	r2, #0
 8000762:	609a      	str	r2, [r3, #8]
  hfdcan1.Init.Mode = FDCAN_MODE_NORMAL;
 8000764:	4b2b      	ldr	r3, [pc, #172]	; (8000814 <MX_FDCAN1_Init+0xc0>)
 8000766:	2200      	movs	r2, #0
 8000768:	60da      	str	r2, [r3, #12]
  hfdcan1.Init.AutoRetransmission = DISABLE;
 800076a:	4b2a      	ldr	r3, [pc, #168]	; (8000814 <MX_FDCAN1_Init+0xc0>)
 800076c:	2200      	movs	r2, #0
 800076e:	741a      	strb	r2, [r3, #16]
  hfdcan1.Init.TransmitPause = DISABLE;
 8000770:	4b28      	ldr	r3, [pc, #160]	; (8000814 <MX_FDCAN1_Init+0xc0>)
 8000772:	2200      	movs	r2, #0
 8000774:	745a      	strb	r2, [r3, #17]
  hfdcan1.Init.ProtocolException = DISABLE;
 8000776:	4b27      	ldr	r3, [pc, #156]	; (8000814 <MX_FDCAN1_Init+0xc0>)
 8000778:	2200      	movs	r2, #0
 800077a:	749a      	strb	r2, [r3, #18]
  hfdcan1.Init.NominalPrescaler = 1;
 800077c:	4b25      	ldr	r3, [pc, #148]	; (8000814 <MX_FDCAN1_Init+0xc0>)
 800077e:	2201      	movs	r2, #1
 8000780:	615a      	str	r2, [r3, #20]
  hfdcan1.Init.NominalSyncJumpWidth = 1;
 8000782:	4b24      	ldr	r3, [pc, #144]	; (8000814 <MX_FDCAN1_Init+0xc0>)
 8000784:	2201      	movs	r2, #1
 8000786:	619a      	str	r2, [r3, #24]
  hfdcan1.Init.NominalTimeSeg1 = 2;
 8000788:	4b22      	ldr	r3, [pc, #136]	; (8000814 <MX_FDCAN1_Init+0xc0>)
 800078a:	2202      	movs	r2, #2
 800078c:	61da      	str	r2, [r3, #28]
  hfdcan1.Init.NominalTimeSeg2 = 2;
 800078e:	4b21      	ldr	r3, [pc, #132]	; (8000814 <MX_FDCAN1_Init+0xc0>)
 8000790:	2202      	movs	r2, #2
 8000792:	621a      	str	r2, [r3, #32]
  hfdcan1.Init.DataPrescaler = 1;
 8000794:	4b1f      	ldr	r3, [pc, #124]	; (8000814 <MX_FDCAN1_Init+0xc0>)
 8000796:	2201      	movs	r2, #1
 8000798:	625a      	str	r2, [r3, #36]	; 0x24
  hfdcan1.Init.DataSyncJumpWidth = 1;
 800079a:	4b1e      	ldr	r3, [pc, #120]	; (8000814 <MX_FDCAN1_Init+0xc0>)
 800079c:	2201      	movs	r2, #1
 800079e:	629a      	str	r2, [r3, #40]	; 0x28
  hfdcan1.Init.DataTimeSeg1 = 1;
 80007a0:	4b1c      	ldr	r3, [pc, #112]	; (8000814 <MX_FDCAN1_Init+0xc0>)
 80007a2:	2201      	movs	r2, #1
 80007a4:	62da      	str	r2, [r3, #44]	; 0x2c
  hfdcan1.Init.DataTimeSeg2 = 1;
 80007a6:	4b1b      	ldr	r3, [pc, #108]	; (8000814 <MX_FDCAN1_Init+0xc0>)
 80007a8:	2201      	movs	r2, #1
 80007aa:	631a      	str	r2, [r3, #48]	; 0x30
  hfdcan1.Init.MessageRAMOffset = 0;
 80007ac:	4b19      	ldr	r3, [pc, #100]	; (8000814 <MX_FDCAN1_Init+0xc0>)
 80007ae:	2200      	movs	r2, #0
 80007b0:	635a      	str	r2, [r3, #52]	; 0x34
  hfdcan1.Init.StdFiltersNbr = 0;
 80007b2:	4b18      	ldr	r3, [pc, #96]	; (8000814 <MX_FDCAN1_Init+0xc0>)
 80007b4:	2200      	movs	r2, #0
 80007b6:	639a      	str	r2, [r3, #56]	; 0x38
  hfdcan1.Init.ExtFiltersNbr = 0;
 80007b8:	4b16      	ldr	r3, [pc, #88]	; (8000814 <MX_FDCAN1_Init+0xc0>)
 80007ba:	2200      	movs	r2, #0
 80007bc:	63da      	str	r2, [r3, #60]	; 0x3c
  hfdcan1.Init.RxFifo0ElmtsNbr = 0;
 80007be:	4b15      	ldr	r3, [pc, #84]	; (8000814 <MX_FDCAN1_Init+0xc0>)
 80007c0:	2200      	movs	r2, #0
 80007c2:	641a      	str	r2, [r3, #64]	; 0x40
  hfdcan1.Init.RxFifo0ElmtSize = FDCAN_DATA_BYTES_8;
 80007c4:	4b13      	ldr	r3, [pc, #76]	; (8000814 <MX_FDCAN1_Init+0xc0>)
 80007c6:	2204      	movs	r2, #4
 80007c8:	645a      	str	r2, [r3, #68]	; 0x44
  hfdcan1.Init.RxFifo1ElmtsNbr = 0;
 80007ca:	4b12      	ldr	r3, [pc, #72]	; (8000814 <MX_FDCAN1_Init+0xc0>)
 80007cc:	2200      	movs	r2, #0
 80007ce:	649a      	str	r2, [r3, #72]	; 0x48
  hfdcan1.Init.RxFifo1ElmtSize = FDCAN_DATA_BYTES_8;
 80007d0:	4b10      	ldr	r3, [pc, #64]	; (8000814 <MX_FDCAN1_Init+0xc0>)
 80007d2:	2204      	movs	r2, #4
 80007d4:	64da      	str	r2, [r3, #76]	; 0x4c
  hfdcan1.Init.RxBuffersNbr = 0;
 80007d6:	4b0f      	ldr	r3, [pc, #60]	; (8000814 <MX_FDCAN1_Init+0xc0>)
 80007d8:	2200      	movs	r2, #0
 80007da:	651a      	str	r2, [r3, #80]	; 0x50
  hfdcan1.Init.RxBufferSize = FDCAN_DATA_BYTES_8;
 80007dc:	4b0d      	ldr	r3, [pc, #52]	; (8000814 <MX_FDCAN1_Init+0xc0>)
 80007de:	2204      	movs	r2, #4
 80007e0:	655a      	str	r2, [r3, #84]	; 0x54
  hfdcan1.Init.TxEventsNbr = 0;
 80007e2:	4b0c      	ldr	r3, [pc, #48]	; (8000814 <MX_FDCAN1_Init+0xc0>)
 80007e4:	2200      	movs	r2, #0
 80007e6:	659a      	str	r2, [r3, #88]	; 0x58
  hfdcan1.Init.TxBuffersNbr = 0;
 80007e8:	4b0a      	ldr	r3, [pc, #40]	; (8000814 <MX_FDCAN1_Init+0xc0>)
 80007ea:	2200      	movs	r2, #0
 80007ec:	65da      	str	r2, [r3, #92]	; 0x5c
  hfdcan1.Init.TxFifoQueueElmtsNbr = 0;
 80007ee:	4b09      	ldr	r3, [pc, #36]	; (8000814 <MX_FDCAN1_Init+0xc0>)
 80007f0:	2200      	movs	r2, #0
 80007f2:	661a      	str	r2, [r3, #96]	; 0x60
  hfdcan1.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 80007f4:	4b07      	ldr	r3, [pc, #28]	; (8000814 <MX_FDCAN1_Init+0xc0>)
 80007f6:	2200      	movs	r2, #0
 80007f8:	665a      	str	r2, [r3, #100]	; 0x64
  hfdcan1.Init.TxElmtSize = FDCAN_DATA_BYTES_8;
 80007fa:	4b06      	ldr	r3, [pc, #24]	; (8000814 <MX_FDCAN1_Init+0xc0>)
 80007fc:	2204      	movs	r2, #4
 80007fe:	669a      	str	r2, [r3, #104]	; 0x68
  if (HAL_FDCAN_Init(&hfdcan1) != HAL_OK)
 8000800:	4804      	ldr	r0, [pc, #16]	; (8000814 <MX_FDCAN1_Init+0xc0>)
 8000802:	f001 f8af 	bl	8001964 <HAL_FDCAN_Init>
 8000806:	4603      	mov	r3, r0
 8000808:	2b00      	cmp	r3, #0
 800080a:	d001      	beq.n	8000810 <MX_FDCAN1_Init+0xbc>
  {
    Error_Handler();
 800080c:	f000 fab2 	bl	8000d74 <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN1_Init 2 */

  /* USER CODE END FDCAN1_Init 2 */

}
 8000810:	bf00      	nop
 8000812:	bd80      	pop	{r7, pc}
 8000814:	20004f24 	.word	0x20004f24
 8000818:	4000a000 	.word	0x4000a000

0800081c <MX_FDCAN3_Init>:
  * @brief FDCAN3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_FDCAN3_Init(void)
{
 800081c:	b580      	push	{r7, lr}
 800081e:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN3_Init 0 */

  /* USER CODE BEGIN FDCAN3_Init 1 */

  /* USER CODE END FDCAN3_Init 1 */
  hfdcan3.Instance = FDCAN3;
 8000820:	4b2e      	ldr	r3, [pc, #184]	; (80008dc <MX_FDCAN3_Init+0xc0>)
 8000822:	4a2f      	ldr	r2, [pc, #188]	; (80008e0 <MX_FDCAN3_Init+0xc4>)
 8000824:	601a      	str	r2, [r3, #0]
  hfdcan3.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 8000826:	4b2d      	ldr	r3, [pc, #180]	; (80008dc <MX_FDCAN3_Init+0xc0>)
 8000828:	2200      	movs	r2, #0
 800082a:	609a      	str	r2, [r3, #8]
  hfdcan3.Init.Mode = FDCAN_MODE_NORMAL;
 800082c:	4b2b      	ldr	r3, [pc, #172]	; (80008dc <MX_FDCAN3_Init+0xc0>)
 800082e:	2200      	movs	r2, #0
 8000830:	60da      	str	r2, [r3, #12]
  hfdcan3.Init.AutoRetransmission = DISABLE;
 8000832:	4b2a      	ldr	r3, [pc, #168]	; (80008dc <MX_FDCAN3_Init+0xc0>)
 8000834:	2200      	movs	r2, #0
 8000836:	741a      	strb	r2, [r3, #16]
  hfdcan3.Init.TransmitPause = DISABLE;
 8000838:	4b28      	ldr	r3, [pc, #160]	; (80008dc <MX_FDCAN3_Init+0xc0>)
 800083a:	2200      	movs	r2, #0
 800083c:	745a      	strb	r2, [r3, #17]
  hfdcan3.Init.ProtocolException = DISABLE;
 800083e:	4b27      	ldr	r3, [pc, #156]	; (80008dc <MX_FDCAN3_Init+0xc0>)
 8000840:	2200      	movs	r2, #0
 8000842:	749a      	strb	r2, [r3, #18]
  hfdcan3.Init.NominalPrescaler = 1;
 8000844:	4b25      	ldr	r3, [pc, #148]	; (80008dc <MX_FDCAN3_Init+0xc0>)
 8000846:	2201      	movs	r2, #1
 8000848:	615a      	str	r2, [r3, #20]
  hfdcan3.Init.NominalSyncJumpWidth = 1;
 800084a:	4b24      	ldr	r3, [pc, #144]	; (80008dc <MX_FDCAN3_Init+0xc0>)
 800084c:	2201      	movs	r2, #1
 800084e:	619a      	str	r2, [r3, #24]
  hfdcan3.Init.NominalTimeSeg1 = 2;
 8000850:	4b22      	ldr	r3, [pc, #136]	; (80008dc <MX_FDCAN3_Init+0xc0>)
 8000852:	2202      	movs	r2, #2
 8000854:	61da      	str	r2, [r3, #28]
  hfdcan3.Init.NominalTimeSeg2 = 2;
 8000856:	4b21      	ldr	r3, [pc, #132]	; (80008dc <MX_FDCAN3_Init+0xc0>)
 8000858:	2202      	movs	r2, #2
 800085a:	621a      	str	r2, [r3, #32]
  hfdcan3.Init.DataPrescaler = 1;
 800085c:	4b1f      	ldr	r3, [pc, #124]	; (80008dc <MX_FDCAN3_Init+0xc0>)
 800085e:	2201      	movs	r2, #1
 8000860:	625a      	str	r2, [r3, #36]	; 0x24
  hfdcan3.Init.DataSyncJumpWidth = 1;
 8000862:	4b1e      	ldr	r3, [pc, #120]	; (80008dc <MX_FDCAN3_Init+0xc0>)
 8000864:	2201      	movs	r2, #1
 8000866:	629a      	str	r2, [r3, #40]	; 0x28
  hfdcan3.Init.DataTimeSeg1 = 1;
 8000868:	4b1c      	ldr	r3, [pc, #112]	; (80008dc <MX_FDCAN3_Init+0xc0>)
 800086a:	2201      	movs	r2, #1
 800086c:	62da      	str	r2, [r3, #44]	; 0x2c
  hfdcan3.Init.DataTimeSeg2 = 1;
 800086e:	4b1b      	ldr	r3, [pc, #108]	; (80008dc <MX_FDCAN3_Init+0xc0>)
 8000870:	2201      	movs	r2, #1
 8000872:	631a      	str	r2, [r3, #48]	; 0x30
  hfdcan3.Init.MessageRAMOffset = 0;
 8000874:	4b19      	ldr	r3, [pc, #100]	; (80008dc <MX_FDCAN3_Init+0xc0>)
 8000876:	2200      	movs	r2, #0
 8000878:	635a      	str	r2, [r3, #52]	; 0x34
  hfdcan3.Init.StdFiltersNbr = 0;
 800087a:	4b18      	ldr	r3, [pc, #96]	; (80008dc <MX_FDCAN3_Init+0xc0>)
 800087c:	2200      	movs	r2, #0
 800087e:	639a      	str	r2, [r3, #56]	; 0x38
  hfdcan3.Init.ExtFiltersNbr = 0;
 8000880:	4b16      	ldr	r3, [pc, #88]	; (80008dc <MX_FDCAN3_Init+0xc0>)
 8000882:	2200      	movs	r2, #0
 8000884:	63da      	str	r2, [r3, #60]	; 0x3c
  hfdcan3.Init.RxFifo0ElmtsNbr = 0;
 8000886:	4b15      	ldr	r3, [pc, #84]	; (80008dc <MX_FDCAN3_Init+0xc0>)
 8000888:	2200      	movs	r2, #0
 800088a:	641a      	str	r2, [r3, #64]	; 0x40
  hfdcan3.Init.RxFifo0ElmtSize = FDCAN_DATA_BYTES_8;
 800088c:	4b13      	ldr	r3, [pc, #76]	; (80008dc <MX_FDCAN3_Init+0xc0>)
 800088e:	2204      	movs	r2, #4
 8000890:	645a      	str	r2, [r3, #68]	; 0x44
  hfdcan3.Init.RxFifo1ElmtsNbr = 0;
 8000892:	4b12      	ldr	r3, [pc, #72]	; (80008dc <MX_FDCAN3_Init+0xc0>)
 8000894:	2200      	movs	r2, #0
 8000896:	649a      	str	r2, [r3, #72]	; 0x48
  hfdcan3.Init.RxFifo1ElmtSize = FDCAN_DATA_BYTES_8;
 8000898:	4b10      	ldr	r3, [pc, #64]	; (80008dc <MX_FDCAN3_Init+0xc0>)
 800089a:	2204      	movs	r2, #4
 800089c:	64da      	str	r2, [r3, #76]	; 0x4c
  hfdcan3.Init.RxBuffersNbr = 0;
 800089e:	4b0f      	ldr	r3, [pc, #60]	; (80008dc <MX_FDCAN3_Init+0xc0>)
 80008a0:	2200      	movs	r2, #0
 80008a2:	651a      	str	r2, [r3, #80]	; 0x50
  hfdcan3.Init.RxBufferSize = FDCAN_DATA_BYTES_8;
 80008a4:	4b0d      	ldr	r3, [pc, #52]	; (80008dc <MX_FDCAN3_Init+0xc0>)
 80008a6:	2204      	movs	r2, #4
 80008a8:	655a      	str	r2, [r3, #84]	; 0x54
  hfdcan3.Init.TxEventsNbr = 0;
 80008aa:	4b0c      	ldr	r3, [pc, #48]	; (80008dc <MX_FDCAN3_Init+0xc0>)
 80008ac:	2200      	movs	r2, #0
 80008ae:	659a      	str	r2, [r3, #88]	; 0x58
  hfdcan3.Init.TxBuffersNbr = 0;
 80008b0:	4b0a      	ldr	r3, [pc, #40]	; (80008dc <MX_FDCAN3_Init+0xc0>)
 80008b2:	2200      	movs	r2, #0
 80008b4:	65da      	str	r2, [r3, #92]	; 0x5c
  hfdcan3.Init.TxFifoQueueElmtsNbr = 0;
 80008b6:	4b09      	ldr	r3, [pc, #36]	; (80008dc <MX_FDCAN3_Init+0xc0>)
 80008b8:	2200      	movs	r2, #0
 80008ba:	661a      	str	r2, [r3, #96]	; 0x60
  hfdcan3.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 80008bc:	4b07      	ldr	r3, [pc, #28]	; (80008dc <MX_FDCAN3_Init+0xc0>)
 80008be:	2200      	movs	r2, #0
 80008c0:	665a      	str	r2, [r3, #100]	; 0x64
  hfdcan3.Init.TxElmtSize = FDCAN_DATA_BYTES_8;
 80008c2:	4b06      	ldr	r3, [pc, #24]	; (80008dc <MX_FDCAN3_Init+0xc0>)
 80008c4:	2204      	movs	r2, #4
 80008c6:	669a      	str	r2, [r3, #104]	; 0x68
  if (HAL_FDCAN_Init(&hfdcan3) != HAL_OK)
 80008c8:	4804      	ldr	r0, [pc, #16]	; (80008dc <MX_FDCAN3_Init+0xc0>)
 80008ca:	f001 f84b 	bl	8001964 <HAL_FDCAN_Init>
 80008ce:	4603      	mov	r3, r0
 80008d0:	2b00      	cmp	r3, #0
 80008d2:	d001      	beq.n	80008d8 <MX_FDCAN3_Init+0xbc>
  {
    Error_Handler();
 80008d4:	f000 fa4e 	bl	8000d74 <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN3_Init 2 */

  /* USER CODE END FDCAN3_Init 2 */

}
 80008d8:	bf00      	nop
 80008da:	bd80      	pop	{r7, pc}
 80008dc:	20004dd0 	.word	0x20004dd0
 80008e0:	4000d400 	.word	0x4000d400

080008e4 <MX_OCTOSPI1_Init>:
  * @brief OCTOSPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_OCTOSPI1_Init(void)
{
 80008e4:	b580      	push	{r7, lr}
 80008e6:	b08a      	sub	sp, #40	; 0x28
 80008e8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN OCTOSPI1_Init 0 */

  /* USER CODE END OCTOSPI1_Init 0 */

  OSPIM_CfgTypeDef sOspiManagerCfg = {0};
 80008ea:	f107 0310 	add.w	r3, r7, #16
 80008ee:	2200      	movs	r2, #0
 80008f0:	601a      	str	r2, [r3, #0]
 80008f2:	605a      	str	r2, [r3, #4]
 80008f4:	609a      	str	r2, [r3, #8]
 80008f6:	60da      	str	r2, [r3, #12]
 80008f8:	611a      	str	r2, [r3, #16]
 80008fa:	615a      	str	r2, [r3, #20]
  OSPI_HyperbusCfgTypeDef sHyperBusCfg = {0};
 80008fc:	463b      	mov	r3, r7
 80008fe:	2200      	movs	r2, #0
 8000900:	601a      	str	r2, [r3, #0]
 8000902:	605a      	str	r2, [r3, #4]
 8000904:	609a      	str	r2, [r3, #8]
 8000906:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN OCTOSPI1_Init 1 */

  /* USER CODE END OCTOSPI1_Init 1 */
  /* OCTOSPI1 parameter configuration*/
  hospi1.Instance = OCTOSPI1;
 8000908:	4b35      	ldr	r3, [pc, #212]	; (80009e0 <MX_OCTOSPI1_Init+0xfc>)
 800090a:	4a36      	ldr	r2, [pc, #216]	; (80009e4 <MX_OCTOSPI1_Init+0x100>)
 800090c:	601a      	str	r2, [r3, #0]
  hospi1.Init.FifoThreshold = 1;
 800090e:	4b34      	ldr	r3, [pc, #208]	; (80009e0 <MX_OCTOSPI1_Init+0xfc>)
 8000910:	2201      	movs	r2, #1
 8000912:	605a      	str	r2, [r3, #4]
  hospi1.Init.DualQuad = HAL_OSPI_DUALQUAD_DISABLE;
 8000914:	4b32      	ldr	r3, [pc, #200]	; (80009e0 <MX_OCTOSPI1_Init+0xfc>)
 8000916:	2200      	movs	r2, #0
 8000918:	609a      	str	r2, [r3, #8]
  hospi1.Init.MemoryType = HAL_OSPI_MEMTYPE_HYPERBUS;
 800091a:	4b31      	ldr	r3, [pc, #196]	; (80009e0 <MX_OCTOSPI1_Init+0xfc>)
 800091c:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8000920:	60da      	str	r2, [r3, #12]
  hospi1.Init.DeviceSize = 32;
 8000922:	4b2f      	ldr	r3, [pc, #188]	; (80009e0 <MX_OCTOSPI1_Init+0xfc>)
 8000924:	2220      	movs	r2, #32
 8000926:	611a      	str	r2, [r3, #16]
  hospi1.Init.ChipSelectHighTime = 1;
 8000928:	4b2d      	ldr	r3, [pc, #180]	; (80009e0 <MX_OCTOSPI1_Init+0xfc>)
 800092a:	2201      	movs	r2, #1
 800092c:	615a      	str	r2, [r3, #20]
  hospi1.Init.FreeRunningClock = HAL_OSPI_FREERUNCLK_DISABLE;
 800092e:	4b2c      	ldr	r3, [pc, #176]	; (80009e0 <MX_OCTOSPI1_Init+0xfc>)
 8000930:	2200      	movs	r2, #0
 8000932:	619a      	str	r2, [r3, #24]
  hospi1.Init.ClockMode = HAL_OSPI_CLOCK_MODE_0;
 8000934:	4b2a      	ldr	r3, [pc, #168]	; (80009e0 <MX_OCTOSPI1_Init+0xfc>)
 8000936:	2200      	movs	r2, #0
 8000938:	61da      	str	r2, [r3, #28]
  hospi1.Init.WrapSize = HAL_OSPI_WRAP_NOT_SUPPORTED;
 800093a:	4b29      	ldr	r3, [pc, #164]	; (80009e0 <MX_OCTOSPI1_Init+0xfc>)
 800093c:	2200      	movs	r2, #0
 800093e:	621a      	str	r2, [r3, #32]
  hospi1.Init.ClockPrescaler = 1;
 8000940:	4b27      	ldr	r3, [pc, #156]	; (80009e0 <MX_OCTOSPI1_Init+0xfc>)
 8000942:	2201      	movs	r2, #1
 8000944:	625a      	str	r2, [r3, #36]	; 0x24
  hospi1.Init.SampleShifting = HAL_OSPI_SAMPLE_SHIFTING_NONE;
 8000946:	4b26      	ldr	r3, [pc, #152]	; (80009e0 <MX_OCTOSPI1_Init+0xfc>)
 8000948:	2200      	movs	r2, #0
 800094a:	629a      	str	r2, [r3, #40]	; 0x28
  hospi1.Init.DelayHoldQuarterCycle = HAL_OSPI_DHQC_DISABLE;
 800094c:	4b24      	ldr	r3, [pc, #144]	; (80009e0 <MX_OCTOSPI1_Init+0xfc>)
 800094e:	2200      	movs	r2, #0
 8000950:	62da      	str	r2, [r3, #44]	; 0x2c
  hospi1.Init.ChipSelectBoundary = 1;
 8000952:	4b23      	ldr	r3, [pc, #140]	; (80009e0 <MX_OCTOSPI1_Init+0xfc>)
 8000954:	2201      	movs	r2, #1
 8000956:	631a      	str	r2, [r3, #48]	; 0x30
  hospi1.Init.ClkChipSelectHighTime = 0;
 8000958:	4b21      	ldr	r3, [pc, #132]	; (80009e0 <MX_OCTOSPI1_Init+0xfc>)
 800095a:	2200      	movs	r2, #0
 800095c:	635a      	str	r2, [r3, #52]	; 0x34
  hospi1.Init.DelayBlockBypass = HAL_OSPI_DELAY_BLOCK_BYPASSED;
 800095e:	4b20      	ldr	r3, [pc, #128]	; (80009e0 <MX_OCTOSPI1_Init+0xfc>)
 8000960:	2208      	movs	r2, #8
 8000962:	639a      	str	r2, [r3, #56]	; 0x38
  hospi1.Init.MaxTran = 0;
 8000964:	4b1e      	ldr	r3, [pc, #120]	; (80009e0 <MX_OCTOSPI1_Init+0xfc>)
 8000966:	2200      	movs	r2, #0
 8000968:	63da      	str	r2, [r3, #60]	; 0x3c
  hospi1.Init.Refresh = 0;
 800096a:	4b1d      	ldr	r3, [pc, #116]	; (80009e0 <MX_OCTOSPI1_Init+0xfc>)
 800096c:	2200      	movs	r2, #0
 800096e:	641a      	str	r2, [r3, #64]	; 0x40
  if (HAL_OSPI_Init(&hospi1) != HAL_OK)
 8000970:	481b      	ldr	r0, [pc, #108]	; (80009e0 <MX_OCTOSPI1_Init+0xfc>)
 8000972:	f001 fd3b 	bl	80023ec <HAL_OSPI_Init>
 8000976:	4603      	mov	r3, r0
 8000978:	2b00      	cmp	r3, #0
 800097a:	d001      	beq.n	8000980 <MX_OCTOSPI1_Init+0x9c>
  {
    Error_Handler();
 800097c:	f000 f9fa 	bl	8000d74 <Error_Handler>
  }
  sOspiManagerCfg.ClkPort = 1;
 8000980:	2301      	movs	r3, #1
 8000982:	613b      	str	r3, [r7, #16]
  sOspiManagerCfg.DQSPort = 1;
 8000984:	2301      	movs	r3, #1
 8000986:	617b      	str	r3, [r7, #20]
  sOspiManagerCfg.NCSPort = 1;
 8000988:	2301      	movs	r3, #1
 800098a:	61bb      	str	r3, [r7, #24]
  sOspiManagerCfg.IOLowPort = HAL_OSPIM_IOPORT_1_LOW;
 800098c:	f04f 1301 	mov.w	r3, #65537	; 0x10001
 8000990:	61fb      	str	r3, [r7, #28]
  sOspiManagerCfg.IOHighPort = HAL_OSPIM_IOPORT_1_HIGH;
 8000992:	4b15      	ldr	r3, [pc, #84]	; (80009e8 <MX_OCTOSPI1_Init+0x104>)
 8000994:	623b      	str	r3, [r7, #32]
  if (HAL_OSPIM_Config(&hospi1, &sOspiManagerCfg, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8000996:	f107 0310 	add.w	r3, r7, #16
 800099a:	f241 3288 	movw	r2, #5000	; 0x1388
 800099e:	4619      	mov	r1, r3
 80009a0:	480f      	ldr	r0, [pc, #60]	; (80009e0 <MX_OCTOSPI1_Init+0xfc>)
 80009a2:	f001 fe31 	bl	8002608 <HAL_OSPIM_Config>
 80009a6:	4603      	mov	r3, r0
 80009a8:	2b00      	cmp	r3, #0
 80009aa:	d001      	beq.n	80009b0 <MX_OCTOSPI1_Init+0xcc>
  {
    Error_Handler();
 80009ac:	f000 f9e2 	bl	8000d74 <Error_Handler>
  }
  sHyperBusCfg.RWRecoveryTime = 0;
 80009b0:	2300      	movs	r3, #0
 80009b2:	603b      	str	r3, [r7, #0]
  sHyperBusCfg.AccessTime = 0;
 80009b4:	2300      	movs	r3, #0
 80009b6:	607b      	str	r3, [r7, #4]
  sHyperBusCfg.WriteZeroLatency = HAL_OSPI_NO_LATENCY_ON_WRITE;
 80009b8:	2302      	movs	r3, #2
 80009ba:	60bb      	str	r3, [r7, #8]
  sHyperBusCfg.LatencyMode = HAL_OSPI_VARIABLE_LATENCY;
 80009bc:	2300      	movs	r3, #0
 80009be:	60fb      	str	r3, [r7, #12]
  if (HAL_OSPI_HyperbusCfg(&hospi1, &sHyperBusCfg, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80009c0:	463b      	mov	r3, r7
 80009c2:	f241 3288 	movw	r2, #5000	; 0x1388
 80009c6:	4619      	mov	r1, r3
 80009c8:	4805      	ldr	r0, [pc, #20]	; (80009e0 <MX_OCTOSPI1_Init+0xfc>)
 80009ca:	f001 fdcf 	bl	800256c <HAL_OSPI_HyperbusCfg>
 80009ce:	4603      	mov	r3, r0
 80009d0:	2b00      	cmp	r3, #0
 80009d2:	d001      	beq.n	80009d8 <MX_OCTOSPI1_Init+0xf4>
  {
    Error_Handler();
 80009d4:	f000 f9ce 	bl	8000d74 <Error_Handler>
  }
  /* USER CODE BEGIN OCTOSPI1_Init 2 */

  /* USER CODE END OCTOSPI1_Init 2 */

}
 80009d8:	bf00      	nop
 80009da:	3728      	adds	r7, #40	; 0x28
 80009dc:	46bd      	mov	sp, r7
 80009de:	bd80      	pop	{r7, pc}
 80009e0:	20004cf0 	.word	0x20004cf0
 80009e4:	52005000 	.word	0x52005000
 80009e8:	01000001 	.word	0x01000001

080009ec <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 80009ec:	b580      	push	{r7, lr}
 80009ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 80009f0:	4b10      	ldr	r3, [pc, #64]	; (8000a34 <MX_RTC_Init+0x48>)
 80009f2:	4a11      	ldr	r2, [pc, #68]	; (8000a38 <MX_RTC_Init+0x4c>)
 80009f4:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 80009f6:	4b0f      	ldr	r3, [pc, #60]	; (8000a34 <MX_RTC_Init+0x48>)
 80009f8:	2200      	movs	r2, #0
 80009fa:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 80009fc:	4b0d      	ldr	r3, [pc, #52]	; (8000a34 <MX_RTC_Init+0x48>)
 80009fe:	227f      	movs	r2, #127	; 0x7f
 8000a00:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8000a02:	4b0c      	ldr	r3, [pc, #48]	; (8000a34 <MX_RTC_Init+0x48>)
 8000a04:	22ff      	movs	r2, #255	; 0xff
 8000a06:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8000a08:	4b0a      	ldr	r3, [pc, #40]	; (8000a34 <MX_RTC_Init+0x48>)
 8000a0a:	2200      	movs	r2, #0
 8000a0c:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8000a0e:	4b09      	ldr	r3, [pc, #36]	; (8000a34 <MX_RTC_Init+0x48>)
 8000a10:	2200      	movs	r2, #0
 8000a12:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8000a14:	4b07      	ldr	r3, [pc, #28]	; (8000a34 <MX_RTC_Init+0x48>)
 8000a16:	2200      	movs	r2, #0
 8000a18:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8000a1a:	4b06      	ldr	r3, [pc, #24]	; (8000a34 <MX_RTC_Init+0x48>)
 8000a1c:	2200      	movs	r2, #0
 8000a1e:	615a      	str	r2, [r3, #20]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8000a20:	4804      	ldr	r0, [pc, #16]	; (8000a34 <MX_RTC_Init+0x48>)
 8000a22:	f006 fe3d 	bl	80076a0 <HAL_RTC_Init>
 8000a26:	4603      	mov	r3, r0
 8000a28:	2b00      	cmp	r3, #0
 8000a2a:	d001      	beq.n	8000a30 <MX_RTC_Init+0x44>
  {
    Error_Handler();
 8000a2c:	f000 f9a2 	bl	8000d74 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8000a30:	bf00      	nop
 8000a32:	bd80      	pop	{r7, pc}
 8000a34:	20004f00 	.word	0x20004f00
 8000a38:	58004000 	.word	0x58004000

08000a3c <MX_SDMMC1_SD_Init>:
  * @brief SDMMC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDMMC1_SD_Init(void)
{
 8000a3c:	b480      	push	{r7}
 8000a3e:	af00      	add	r7, sp, #0
  /* USER CODE END SDMMC1_Init 0 */

  /* USER CODE BEGIN SDMMC1_Init 1 */

  /* USER CODE END SDMMC1_Init 1 */
  hsd1.Instance = SDMMC1;
 8000a40:	4b0d      	ldr	r3, [pc, #52]	; (8000a78 <MX_SDMMC1_SD_Init+0x3c>)
 8000a42:	4a0e      	ldr	r2, [pc, #56]	; (8000a7c <MX_SDMMC1_SD_Init+0x40>)
 8000a44:	601a      	str	r2, [r3, #0]
  hsd1.Init.ClockEdge = SDMMC_CLOCK_EDGE_RISING;
 8000a46:	4b0c      	ldr	r3, [pc, #48]	; (8000a78 <MX_SDMMC1_SD_Init+0x3c>)
 8000a48:	2200      	movs	r2, #0
 8000a4a:	605a      	str	r2, [r3, #4]
  hsd1.Init.ClockPowerSave = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 8000a4c:	4b0a      	ldr	r3, [pc, #40]	; (8000a78 <MX_SDMMC1_SD_Init+0x3c>)
 8000a4e:	2200      	movs	r2, #0
 8000a50:	609a      	str	r2, [r3, #8]
  hsd1.Init.BusWide = SDMMC_BUS_WIDE_4B;
 8000a52:	4b09      	ldr	r3, [pc, #36]	; (8000a78 <MX_SDMMC1_SD_Init+0x3c>)
 8000a54:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000a58:	60da      	str	r2, [r3, #12]
  hsd1.Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 8000a5a:	4b07      	ldr	r3, [pc, #28]	; (8000a78 <MX_SDMMC1_SD_Init+0x3c>)
 8000a5c:	2200      	movs	r2, #0
 8000a5e:	611a      	str	r2, [r3, #16]
  hsd1.Init.ClockDiv = 0;
 8000a60:	4b05      	ldr	r3, [pc, #20]	; (8000a78 <MX_SDMMC1_SD_Init+0x3c>)
 8000a62:	2200      	movs	r2, #0
 8000a64:	615a      	str	r2, [r3, #20]
  hsd1.Init.TranceiverPresent = SDMMC_TRANSCEIVER_NOT_PRESENT;
 8000a66:	4b04      	ldr	r3, [pc, #16]	; (8000a78 <MX_SDMMC1_SD_Init+0x3c>)
 8000a68:	2201      	movs	r2, #1
 8000a6a:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN SDMMC1_Init 2 */

  /* USER CODE END SDMMC1_Init 2 */

}
 8000a6c:	bf00      	nop
 8000a6e:	46bd      	mov	sp, r7
 8000a70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a74:	4770      	bx	lr
 8000a76:	bf00      	nop
 8000a78:	20004d50 	.word	0x20004d50
 8000a7c:	52007000 	.word	0x52007000

08000a80 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000a80:	b580      	push	{r7, lr}
 8000a82:	b088      	sub	sp, #32
 8000a84:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000a86:	f107 0310 	add.w	r3, r7, #16
 8000a8a:	2200      	movs	r2, #0
 8000a8c:	601a      	str	r2, [r3, #0]
 8000a8e:	605a      	str	r2, [r3, #4]
 8000a90:	609a      	str	r2, [r3, #8]
 8000a92:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000a94:	1d3b      	adds	r3, r7, #4
 8000a96:	2200      	movs	r2, #0
 8000a98:	601a      	str	r2, [r3, #0]
 8000a9a:	605a      	str	r2, [r3, #4]
 8000a9c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000a9e:	4b1e      	ldr	r3, [pc, #120]	; (8000b18 <MX_TIM2_Init+0x98>)
 8000aa0:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000aa4:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8000aa6:	4b1c      	ldr	r3, [pc, #112]	; (8000b18 <MX_TIM2_Init+0x98>)
 8000aa8:	2200      	movs	r2, #0
 8000aaa:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000aac:	4b1a      	ldr	r3, [pc, #104]	; (8000b18 <MX_TIM2_Init+0x98>)
 8000aae:	2200      	movs	r2, #0
 8000ab0:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8000ab2:	4b19      	ldr	r3, [pc, #100]	; (8000b18 <MX_TIM2_Init+0x98>)
 8000ab4:	f04f 32ff 	mov.w	r2, #4294967295
 8000ab8:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000aba:	4b17      	ldr	r3, [pc, #92]	; (8000b18 <MX_TIM2_Init+0x98>)
 8000abc:	2200      	movs	r2, #0
 8000abe:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000ac0:	4b15      	ldr	r3, [pc, #84]	; (8000b18 <MX_TIM2_Init+0x98>)
 8000ac2:	2200      	movs	r2, #0
 8000ac4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000ac6:	4814      	ldr	r0, [pc, #80]	; (8000b18 <MX_TIM2_Init+0x98>)
 8000ac8:	f008 f95a 	bl	8008d80 <HAL_TIM_Base_Init>
 8000acc:	4603      	mov	r3, r0
 8000ace:	2b00      	cmp	r3, #0
 8000ad0:	d001      	beq.n	8000ad6 <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8000ad2:	f000 f94f 	bl	8000d74 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000ad6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000ada:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000adc:	f107 0310 	add.w	r3, r7, #16
 8000ae0:	4619      	mov	r1, r3
 8000ae2:	480d      	ldr	r0, [pc, #52]	; (8000b18 <MX_TIM2_Init+0x98>)
 8000ae4:	f008 fb4a 	bl	800917c <HAL_TIM_ConfigClockSource>
 8000ae8:	4603      	mov	r3, r0
 8000aea:	2b00      	cmp	r3, #0
 8000aec:	d001      	beq.n	8000af2 <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8000aee:	f000 f941 	bl	8000d74 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000af2:	2300      	movs	r3, #0
 8000af4:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000af6:	2300      	movs	r3, #0
 8000af8:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000afa:	1d3b      	adds	r3, r7, #4
 8000afc:	4619      	mov	r1, r3
 8000afe:	4806      	ldr	r0, [pc, #24]	; (8000b18 <MX_TIM2_Init+0x98>)
 8000b00:	f008 fd9c 	bl	800963c <HAL_TIMEx_MasterConfigSynchronization>
 8000b04:	4603      	mov	r3, r0
 8000b06:	2b00      	cmp	r3, #0
 8000b08:	d001      	beq.n	8000b0e <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8000b0a:	f000 f933 	bl	8000d74 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000b0e:	bf00      	nop
 8000b10:	3720      	adds	r7, #32
 8000b12:	46bd      	mov	sp, r7
 8000b14:	bd80      	pop	{r7, pc}
 8000b16:	bf00      	nop
 8000b18:	20005220 	.word	0x20005220

08000b1c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000b1c:	b580      	push	{r7, lr}
 8000b1e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000b20:	4b22      	ldr	r3, [pc, #136]	; (8000bac <MX_USART1_UART_Init+0x90>)
 8000b22:	4a23      	ldr	r2, [pc, #140]	; (8000bb0 <MX_USART1_UART_Init+0x94>)
 8000b24:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000b26:	4b21      	ldr	r3, [pc, #132]	; (8000bac <MX_USART1_UART_Init+0x90>)
 8000b28:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000b2c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000b2e:	4b1f      	ldr	r3, [pc, #124]	; (8000bac <MX_USART1_UART_Init+0x90>)
 8000b30:	2200      	movs	r2, #0
 8000b32:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000b34:	4b1d      	ldr	r3, [pc, #116]	; (8000bac <MX_USART1_UART_Init+0x90>)
 8000b36:	2200      	movs	r2, #0
 8000b38:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000b3a:	4b1c      	ldr	r3, [pc, #112]	; (8000bac <MX_USART1_UART_Init+0x90>)
 8000b3c:	2200      	movs	r2, #0
 8000b3e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000b40:	4b1a      	ldr	r3, [pc, #104]	; (8000bac <MX_USART1_UART_Init+0x90>)
 8000b42:	220c      	movs	r2, #12
 8000b44:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000b46:	4b19      	ldr	r3, [pc, #100]	; (8000bac <MX_USART1_UART_Init+0x90>)
 8000b48:	2200      	movs	r2, #0
 8000b4a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000b4c:	4b17      	ldr	r3, [pc, #92]	; (8000bac <MX_USART1_UART_Init+0x90>)
 8000b4e:	2200      	movs	r2, #0
 8000b50:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000b52:	4b16      	ldr	r3, [pc, #88]	; (8000bac <MX_USART1_UART_Init+0x90>)
 8000b54:	2200      	movs	r2, #0
 8000b56:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000b58:	4b14      	ldr	r3, [pc, #80]	; (8000bac <MX_USART1_UART_Init+0x90>)
 8000b5a:	2200      	movs	r2, #0
 8000b5c:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000b5e:	4b13      	ldr	r3, [pc, #76]	; (8000bac <MX_USART1_UART_Init+0x90>)
 8000b60:	2200      	movs	r2, #0
 8000b62:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000b64:	4811      	ldr	r0, [pc, #68]	; (8000bac <MX_USART1_UART_Init+0x90>)
 8000b66:	f008 fe23 	bl	80097b0 <HAL_UART_Init>
 8000b6a:	4603      	mov	r3, r0
 8000b6c:	2b00      	cmp	r3, #0
 8000b6e:	d001      	beq.n	8000b74 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8000b70:	f000 f900 	bl	8000d74 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000b74:	2100      	movs	r1, #0
 8000b76:	480d      	ldr	r0, [pc, #52]	; (8000bac <MX_USART1_UART_Init+0x90>)
 8000b78:	f009 fe6e 	bl	800a858 <HAL_UARTEx_SetTxFifoThreshold>
 8000b7c:	4603      	mov	r3, r0
 8000b7e:	2b00      	cmp	r3, #0
 8000b80:	d001      	beq.n	8000b86 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8000b82:	f000 f8f7 	bl	8000d74 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000b86:	2100      	movs	r1, #0
 8000b88:	4808      	ldr	r0, [pc, #32]	; (8000bac <MX_USART1_UART_Init+0x90>)
 8000b8a:	f009 fea3 	bl	800a8d4 <HAL_UARTEx_SetRxFifoThreshold>
 8000b8e:	4603      	mov	r3, r0
 8000b90:	2b00      	cmp	r3, #0
 8000b92:	d001      	beq.n	8000b98 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8000b94:	f000 f8ee 	bl	8000d74 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8000b98:	4804      	ldr	r0, [pc, #16]	; (8000bac <MX_USART1_UART_Init+0x90>)
 8000b9a:	f009 fe24 	bl	800a7e6 <HAL_UARTEx_DisableFifoMode>
 8000b9e:	4603      	mov	r3, r0
 8000ba0:	2b00      	cmp	r3, #0
 8000ba2:	d001      	beq.n	8000ba8 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8000ba4:	f000 f8e6 	bl	8000d74 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000ba8:	bf00      	nop
 8000baa:	bd80      	pop	{r7, pc}
 8000bac:	20004e70 	.word	0x20004e70
 8000bb0:	40011000 	.word	0x40011000

08000bb4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000bb4:	b580      	push	{r7, lr}
 8000bb6:	b08c      	sub	sp, #48	; 0x30
 8000bb8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bba:	f107 031c 	add.w	r3, r7, #28
 8000bbe:	2200      	movs	r2, #0
 8000bc0:	601a      	str	r2, [r3, #0]
 8000bc2:	605a      	str	r2, [r3, #4]
 8000bc4:	609a      	str	r2, [r3, #8]
 8000bc6:	60da      	str	r2, [r3, #12]
 8000bc8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000bca:	4b55      	ldr	r3, [pc, #340]	; (8000d20 <MX_GPIO_Init+0x16c>)
 8000bcc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000bd0:	4a53      	ldr	r2, [pc, #332]	; (8000d20 <MX_GPIO_Init+0x16c>)
 8000bd2:	f043 0310 	orr.w	r3, r3, #16
 8000bd6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000bda:	4b51      	ldr	r3, [pc, #324]	; (8000d20 <MX_GPIO_Init+0x16c>)
 8000bdc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000be0:	f003 0310 	and.w	r3, r3, #16
 8000be4:	61bb      	str	r3, [r7, #24]
 8000be6:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000be8:	4b4d      	ldr	r3, [pc, #308]	; (8000d20 <MX_GPIO_Init+0x16c>)
 8000bea:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000bee:	4a4c      	ldr	r2, [pc, #304]	; (8000d20 <MX_GPIO_Init+0x16c>)
 8000bf0:	f043 0304 	orr.w	r3, r3, #4
 8000bf4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000bf8:	4b49      	ldr	r3, [pc, #292]	; (8000d20 <MX_GPIO_Init+0x16c>)
 8000bfa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000bfe:	f003 0304 	and.w	r3, r3, #4
 8000c02:	617b      	str	r3, [r7, #20]
 8000c04:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000c06:	4b46      	ldr	r3, [pc, #280]	; (8000d20 <MX_GPIO_Init+0x16c>)
 8000c08:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c0c:	4a44      	ldr	r2, [pc, #272]	; (8000d20 <MX_GPIO_Init+0x16c>)
 8000c0e:	f043 0320 	orr.w	r3, r3, #32
 8000c12:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000c16:	4b42      	ldr	r3, [pc, #264]	; (8000d20 <MX_GPIO_Init+0x16c>)
 8000c18:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c1c:	f003 0320 	and.w	r3, r3, #32
 8000c20:	613b      	str	r3, [r7, #16]
 8000c22:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000c24:	4b3e      	ldr	r3, [pc, #248]	; (8000d20 <MX_GPIO_Init+0x16c>)
 8000c26:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c2a:	4a3d      	ldr	r2, [pc, #244]	; (8000d20 <MX_GPIO_Init+0x16c>)
 8000c2c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000c30:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000c34:	4b3a      	ldr	r3, [pc, #232]	; (8000d20 <MX_GPIO_Init+0x16c>)
 8000c36:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c3a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000c3e:	60fb      	str	r3, [r7, #12]
 8000c40:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c42:	4b37      	ldr	r3, [pc, #220]	; (8000d20 <MX_GPIO_Init+0x16c>)
 8000c44:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c48:	4a35      	ldr	r2, [pc, #212]	; (8000d20 <MX_GPIO_Init+0x16c>)
 8000c4a:	f043 0301 	orr.w	r3, r3, #1
 8000c4e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000c52:	4b33      	ldr	r3, [pc, #204]	; (8000d20 <MX_GPIO_Init+0x16c>)
 8000c54:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c58:	f003 0301 	and.w	r3, r3, #1
 8000c5c:	60bb      	str	r3, [r7, #8]
 8000c5e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c60:	4b2f      	ldr	r3, [pc, #188]	; (8000d20 <MX_GPIO_Init+0x16c>)
 8000c62:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c66:	4a2e      	ldr	r2, [pc, #184]	; (8000d20 <MX_GPIO_Init+0x16c>)
 8000c68:	f043 0302 	orr.w	r3, r3, #2
 8000c6c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000c70:	4b2b      	ldr	r3, [pc, #172]	; (8000d20 <MX_GPIO_Init+0x16c>)
 8000c72:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c76:	f003 0302 	and.w	r3, r3, #2
 8000c7a:	607b      	str	r3, [r7, #4]
 8000c7c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000c7e:	4b28      	ldr	r3, [pc, #160]	; (8000d20 <MX_GPIO_Init+0x16c>)
 8000c80:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c84:	4a26      	ldr	r2, [pc, #152]	; (8000d20 <MX_GPIO_Init+0x16c>)
 8000c86:	f043 0308 	orr.w	r3, r3, #8
 8000c8a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000c8e:	4b24      	ldr	r3, [pc, #144]	; (8000d20 <MX_GPIO_Init+0x16c>)
 8000c90:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c94:	f003 0308 	and.w	r3, r3, #8
 8000c98:	603b      	str	r3, [r7, #0]
 8000c9a:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, LED1_Pin|LED0_Pin, GPIO_PIN_RESET);
 8000c9c:	2200      	movs	r2, #0
 8000c9e:	2118      	movs	r1, #24
 8000ca0:	4820      	ldr	r0, [pc, #128]	; (8000d24 <MX_GPIO_Init+0x170>)
 8000ca2:	f001 fb6f 	bl	8002384 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(FD_CAN3_STB_GPIO_Port, FD_CAN3_STB_Pin, GPIO_PIN_RESET);
 8000ca6:	2200      	movs	r2, #0
 8000ca8:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000cac:	481e      	ldr	r0, [pc, #120]	; (8000d28 <MX_GPIO_Init+0x174>)
 8000cae:	f001 fb69 	bl	8002384 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(FDCAN1_STB_GPIO_Port, FDCAN1_STB_Pin, GPIO_PIN_RESET);
 8000cb2:	2200      	movs	r2, #0
 8000cb4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000cb8:	481c      	ldr	r0, [pc, #112]	; (8000d2c <MX_GPIO_Init+0x178>)
 8000cba:	f001 fb63 	bl	8002384 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : LED1_Pin LED0_Pin */
  GPIO_InitStruct.Pin = LED1_Pin|LED0_Pin;
 8000cbe:	2318      	movs	r3, #24
 8000cc0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000cc2:	2301      	movs	r3, #1
 8000cc4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cc6:	2300      	movs	r3, #0
 8000cc8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cca:	2300      	movs	r3, #0
 8000ccc:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000cce:	f107 031c 	add.w	r3, r7, #28
 8000cd2:	4619      	mov	r1, r3
 8000cd4:	4813      	ldr	r0, [pc, #76]	; (8000d24 <MX_GPIO_Init+0x170>)
 8000cd6:	f001 f9ad 	bl	8002034 <HAL_GPIO_Init>

  /*Configure GPIO pin : FD_CAN3_STB_Pin */
  GPIO_InitStruct.Pin = FD_CAN3_STB_Pin;
 8000cda:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000cde:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ce0:	2301      	movs	r3, #1
 8000ce2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ce4:	2300      	movs	r3, #0
 8000ce6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ce8:	2300      	movs	r3, #0
 8000cea:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(FD_CAN3_STB_GPIO_Port, &GPIO_InitStruct);
 8000cec:	f107 031c 	add.w	r3, r7, #28
 8000cf0:	4619      	mov	r1, r3
 8000cf2:	480d      	ldr	r0, [pc, #52]	; (8000d28 <MX_GPIO_Init+0x174>)
 8000cf4:	f001 f99e 	bl	8002034 <HAL_GPIO_Init>

  /*Configure GPIO pin : FDCAN1_STB_Pin */
  GPIO_InitStruct.Pin = FDCAN1_STB_Pin;
 8000cf8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000cfc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000cfe:	2301      	movs	r3, #1
 8000d00:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d02:	2300      	movs	r3, #0
 8000d04:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d06:	2300      	movs	r3, #0
 8000d08:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(FDCAN1_STB_GPIO_Port, &GPIO_InitStruct);
 8000d0a:	f107 031c 	add.w	r3, r7, #28
 8000d0e:	4619      	mov	r1, r3
 8000d10:	4806      	ldr	r0, [pc, #24]	; (8000d2c <MX_GPIO_Init+0x178>)
 8000d12:	f001 f98f 	bl	8002034 <HAL_GPIO_Init>

}
 8000d16:	bf00      	nop
 8000d18:	3730      	adds	r7, #48	; 0x30
 8000d1a:	46bd      	mov	sp, r7
 8000d1c:	bd80      	pop	{r7, pc}
 8000d1e:	bf00      	nop
 8000d20:	58024400 	.word	0x58024400
 8000d24:	58021000 	.word	0x58021000
 8000d28:	58021400 	.word	0x58021400
 8000d2c:	58020000 	.word	0x58020000

08000d30 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8000d30:	b580      	push	{r7, lr}
 8000d32:	b082      	sub	sp, #8
 8000d34:	af00      	add	r7, sp, #0
 8000d36:	6078      	str	r0, [r7, #4]
  /* init code for USB_DEVICE */
  MX_USB_DEVICE_Init();
 8000d38:	f010 fd98 	bl	801186c <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(200);
 8000d3c:	20c8      	movs	r0, #200	; 0xc8
 8000d3e:	f00d ff82 	bl	800ec46 <osDelay>
    HAL_GPIO_TogglePin(LED1_GPIO_Port,LED1_Pin);
 8000d42:	2108      	movs	r1, #8
 8000d44:	4801      	ldr	r0, [pc, #4]	; (8000d4c <StartDefaultTask+0x1c>)
 8000d46:	f001 fb36 	bl	80023b6 <HAL_GPIO_TogglePin>
    osDelay(200);
 8000d4a:	e7f7      	b.n	8000d3c <StartDefaultTask+0xc>
 8000d4c:	58021000 	.word	0x58021000

08000d50 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000d50:	b580      	push	{r7, lr}
 8000d52:	b082      	sub	sp, #8
 8000d54:	af00      	add	r7, sp, #0
 8000d56:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8000d58:	687b      	ldr	r3, [r7, #4]
 8000d5a:	681b      	ldr	r3, [r3, #0]
 8000d5c:	4a04      	ldr	r2, [pc, #16]	; (8000d70 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000d5e:	4293      	cmp	r3, r2
 8000d60:	d101      	bne.n	8000d66 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000d62:	f000 fcdb 	bl	800171c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000d66:	bf00      	nop
 8000d68:	3708      	adds	r7, #8
 8000d6a:	46bd      	mov	sp, r7
 8000d6c:	bd80      	pop	{r7, pc}
 8000d6e:	bf00      	nop
 8000d70:	40010000 	.word	0x40010000

08000d74 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000d74:	b580      	push	{r7, lr}
 8000d76:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000d78:	b672      	cpsid	i
}
 8000d7a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  HAL_GPIO_WritePin(LED0_GPIO_Port,LED0_Pin,GPIO_PIN_SET);
 8000d7c:	2201      	movs	r2, #1
 8000d7e:	2110      	movs	r1, #16
 8000d80:	4801      	ldr	r0, [pc, #4]	; (8000d88 <Error_Handler+0x14>)
 8000d82:	f001 faff 	bl	8002384 <HAL_GPIO_WritePin>
  while (1)
 8000d86:	e7fe      	b.n	8000d86 <Error_Handler+0x12>
 8000d88:	58021000 	.word	0x58021000

08000d8c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000d8c:	b580      	push	{r7, lr}
 8000d8e:	b082      	sub	sp, #8
 8000d90:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d92:	4b0c      	ldr	r3, [pc, #48]	; (8000dc4 <HAL_MspInit+0x38>)
 8000d94:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000d98:	4a0a      	ldr	r2, [pc, #40]	; (8000dc4 <HAL_MspInit+0x38>)
 8000d9a:	f043 0302 	orr.w	r3, r3, #2
 8000d9e:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8000da2:	4b08      	ldr	r3, [pc, #32]	; (8000dc4 <HAL_MspInit+0x38>)
 8000da4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000da8:	f003 0302 	and.w	r3, r3, #2
 8000dac:	607b      	str	r3, [r7, #4]
 8000dae:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000db0:	2200      	movs	r2, #0
 8000db2:	210f      	movs	r1, #15
 8000db4:	f06f 0001 	mvn.w	r0, #1
 8000db8:	f000 fdac 	bl	8001914 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000dbc:	bf00      	nop
 8000dbe:	3708      	adds	r7, #8
 8000dc0:	46bd      	mov	sp, r7
 8000dc2:	bd80      	pop	{r7, pc}
 8000dc4:	58024400 	.word	0x58024400

08000dc8 <HAL_FDCAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hfdcan: FDCAN handle pointer
* @retval None
*/
void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* hfdcan)
{
 8000dc8:	b580      	push	{r7, lr}
 8000dca:	b0b8      	sub	sp, #224	; 0xe0
 8000dcc:	af00      	add	r7, sp, #0
 8000dce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000dd0:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8000dd4:	2200      	movs	r2, #0
 8000dd6:	601a      	str	r2, [r3, #0]
 8000dd8:	605a      	str	r2, [r3, #4]
 8000dda:	609a      	str	r2, [r3, #8]
 8000ddc:	60da      	str	r2, [r3, #12]
 8000dde:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000de0:	f107 0318 	add.w	r3, r7, #24
 8000de4:	22b4      	movs	r2, #180	; 0xb4
 8000de6:	2100      	movs	r1, #0
 8000de8:	4618      	mov	r0, r3
 8000dea:	f011 fae7 	bl	80123bc <memset>
  if(hfdcan->Instance==FDCAN1)
 8000dee:	687b      	ldr	r3, [r7, #4]
 8000df0:	681b      	ldr	r3, [r3, #0]
 8000df2:	4a54      	ldr	r2, [pc, #336]	; (8000f44 <HAL_FDCAN_MspInit+0x17c>)
 8000df4:	4293      	cmp	r3, r2
 8000df6:	d14e      	bne.n	8000e96 <HAL_FDCAN_MspInit+0xce>
  /* USER CODE BEGIN FDCAN1_MspInit 0 */

  /* USER CODE END FDCAN1_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 8000df8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000dfc:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.FdcanClockSelection = RCC_FDCANCLKSOURCE_PLL;
 8000dfe:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000e02:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000e06:	f107 0318 	add.w	r3, r7, #24
 8000e0a:	4618      	mov	r0, r3
 8000e0c:	f004 fbb6 	bl	800557c <HAL_RCCEx_PeriphCLKConfig>
 8000e10:	4603      	mov	r3, r0
 8000e12:	2b00      	cmp	r3, #0
 8000e14:	d001      	beq.n	8000e1a <HAL_FDCAN_MspInit+0x52>
    {
      Error_Handler();
 8000e16:	f7ff ffad 	bl	8000d74 <Error_Handler>
    }

    /* Peripheral clock enable */
    HAL_RCC_FDCAN_CLK_ENABLED++;
 8000e1a:	4b4b      	ldr	r3, [pc, #300]	; (8000f48 <HAL_FDCAN_MspInit+0x180>)
 8000e1c:	681b      	ldr	r3, [r3, #0]
 8000e1e:	3301      	adds	r3, #1
 8000e20:	4a49      	ldr	r2, [pc, #292]	; (8000f48 <HAL_FDCAN_MspInit+0x180>)
 8000e22:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_FDCAN_CLK_ENABLED==1){
 8000e24:	4b48      	ldr	r3, [pc, #288]	; (8000f48 <HAL_FDCAN_MspInit+0x180>)
 8000e26:	681b      	ldr	r3, [r3, #0]
 8000e28:	2b01      	cmp	r3, #1
 8000e2a:	d10e      	bne.n	8000e4a <HAL_FDCAN_MspInit+0x82>
      __HAL_RCC_FDCAN_CLK_ENABLE();
 8000e2c:	4b47      	ldr	r3, [pc, #284]	; (8000f4c <HAL_FDCAN_MspInit+0x184>)
 8000e2e:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8000e32:	4a46      	ldr	r2, [pc, #280]	; (8000f4c <HAL_FDCAN_MspInit+0x184>)
 8000e34:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000e38:	f8c2 30ec 	str.w	r3, [r2, #236]	; 0xec
 8000e3c:	4b43      	ldr	r3, [pc, #268]	; (8000f4c <HAL_FDCAN_MspInit+0x184>)
 8000e3e:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8000e42:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000e46:	617b      	str	r3, [r7, #20]
 8000e48:	697b      	ldr	r3, [r7, #20]
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e4a:	4b40      	ldr	r3, [pc, #256]	; (8000f4c <HAL_FDCAN_MspInit+0x184>)
 8000e4c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e50:	4a3e      	ldr	r2, [pc, #248]	; (8000f4c <HAL_FDCAN_MspInit+0x184>)
 8000e52:	f043 0301 	orr.w	r3, r3, #1
 8000e56:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000e5a:	4b3c      	ldr	r3, [pc, #240]	; (8000f4c <HAL_FDCAN_MspInit+0x184>)
 8000e5c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e60:	f003 0301 	and.w	r3, r3, #1
 8000e64:	613b      	str	r3, [r7, #16]
 8000e66:	693b      	ldr	r3, [r7, #16]
    /**FDCAN1 GPIO Configuration
    PA11     ------> FDCAN1_RX
    PA12     ------> FDCAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8000e68:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8000e6c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e70:	2302      	movs	r3, #2
 8000e72:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e76:	2300      	movs	r3, #0
 8000e78:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e7c:	2300      	movs	r3, #0
 8000e7e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN1;
 8000e82:	2309      	movs	r3, #9
 8000e84:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e88:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8000e8c:	4619      	mov	r1, r3
 8000e8e:	4830      	ldr	r0, [pc, #192]	; (8000f50 <HAL_FDCAN_MspInit+0x188>)
 8000e90:	f001 f8d0 	bl	8002034 <HAL_GPIO_Init>
  /* USER CODE BEGIN FDCAN3_MspInit 1 */

  /* USER CODE END FDCAN3_MspInit 1 */
  }

}
 8000e94:	e051      	b.n	8000f3a <HAL_FDCAN_MspInit+0x172>
  else if(hfdcan->Instance==FDCAN3)
 8000e96:	687b      	ldr	r3, [r7, #4]
 8000e98:	681b      	ldr	r3, [r3, #0]
 8000e9a:	4a2e      	ldr	r2, [pc, #184]	; (8000f54 <HAL_FDCAN_MspInit+0x18c>)
 8000e9c:	4293      	cmp	r3, r2
 8000e9e:	d14c      	bne.n	8000f3a <HAL_FDCAN_MspInit+0x172>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 8000ea0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000ea4:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.FdcanClockSelection = RCC_FDCANCLKSOURCE_PLL;
 8000ea6:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000eaa:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000eae:	f107 0318 	add.w	r3, r7, #24
 8000eb2:	4618      	mov	r0, r3
 8000eb4:	f004 fb62 	bl	800557c <HAL_RCCEx_PeriphCLKConfig>
 8000eb8:	4603      	mov	r3, r0
 8000eba:	2b00      	cmp	r3, #0
 8000ebc:	d001      	beq.n	8000ec2 <HAL_FDCAN_MspInit+0xfa>
      Error_Handler();
 8000ebe:	f7ff ff59 	bl	8000d74 <Error_Handler>
    HAL_RCC_FDCAN_CLK_ENABLED++;
 8000ec2:	4b21      	ldr	r3, [pc, #132]	; (8000f48 <HAL_FDCAN_MspInit+0x180>)
 8000ec4:	681b      	ldr	r3, [r3, #0]
 8000ec6:	3301      	adds	r3, #1
 8000ec8:	4a1f      	ldr	r2, [pc, #124]	; (8000f48 <HAL_FDCAN_MspInit+0x180>)
 8000eca:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_FDCAN_CLK_ENABLED==1){
 8000ecc:	4b1e      	ldr	r3, [pc, #120]	; (8000f48 <HAL_FDCAN_MspInit+0x180>)
 8000ece:	681b      	ldr	r3, [r3, #0]
 8000ed0:	2b01      	cmp	r3, #1
 8000ed2:	d10e      	bne.n	8000ef2 <HAL_FDCAN_MspInit+0x12a>
      __HAL_RCC_FDCAN_CLK_ENABLE();
 8000ed4:	4b1d      	ldr	r3, [pc, #116]	; (8000f4c <HAL_FDCAN_MspInit+0x184>)
 8000ed6:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8000eda:	4a1c      	ldr	r2, [pc, #112]	; (8000f4c <HAL_FDCAN_MspInit+0x184>)
 8000edc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000ee0:	f8c2 30ec 	str.w	r3, [r2, #236]	; 0xec
 8000ee4:	4b19      	ldr	r3, [pc, #100]	; (8000f4c <HAL_FDCAN_MspInit+0x184>)
 8000ee6:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8000eea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000eee:	60fb      	str	r3, [r7, #12]
 8000ef0:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8000ef2:	4b16      	ldr	r3, [pc, #88]	; (8000f4c <HAL_FDCAN_MspInit+0x184>)
 8000ef4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ef8:	4a14      	ldr	r2, [pc, #80]	; (8000f4c <HAL_FDCAN_MspInit+0x184>)
 8000efa:	f043 0320 	orr.w	r3, r3, #32
 8000efe:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000f02:	4b12      	ldr	r3, [pc, #72]	; (8000f4c <HAL_FDCAN_MspInit+0x184>)
 8000f04:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000f08:	f003 0320 	and.w	r3, r3, #32
 8000f0c:	60bb      	str	r3, [r7, #8]
 8000f0e:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000f10:	23c0      	movs	r3, #192	; 0xc0
 8000f12:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f16:	2302      	movs	r3, #2
 8000f18:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f1c:	2300      	movs	r3, #0
 8000f1e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f22:	2300      	movs	r3, #0
 8000f24:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF2_FDCAN3;
 8000f28:	2302      	movs	r3, #2
 8000f2a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000f2e:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8000f32:	4619      	mov	r1, r3
 8000f34:	4808      	ldr	r0, [pc, #32]	; (8000f58 <HAL_FDCAN_MspInit+0x190>)
 8000f36:	f001 f87d 	bl	8002034 <HAL_GPIO_Init>
}
 8000f3a:	bf00      	nop
 8000f3c:	37e0      	adds	r7, #224	; 0xe0
 8000f3e:	46bd      	mov	sp, r7
 8000f40:	bd80      	pop	{r7, pc}
 8000f42:	bf00      	nop
 8000f44:	4000a000 	.word	0x4000a000
 8000f48:	200001a4 	.word	0x200001a4
 8000f4c:	58024400 	.word	0x58024400
 8000f50:	58020000 	.word	0x58020000
 8000f54:	4000d400 	.word	0x4000d400
 8000f58:	58021400 	.word	0x58021400

08000f5c <HAL_OSPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hospi: OSPI handle pointer
* @retval None
*/
void HAL_OSPI_MspInit(OSPI_HandleTypeDef* hospi)
{
 8000f5c:	b580      	push	{r7, lr}
 8000f5e:	b0ba      	sub	sp, #232	; 0xe8
 8000f60:	af00      	add	r7, sp, #0
 8000f62:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f64:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8000f68:	2200      	movs	r2, #0
 8000f6a:	601a      	str	r2, [r3, #0]
 8000f6c:	605a      	str	r2, [r3, #4]
 8000f6e:	609a      	str	r2, [r3, #8]
 8000f70:	60da      	str	r2, [r3, #12]
 8000f72:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000f74:	f107 0320 	add.w	r3, r7, #32
 8000f78:	22b4      	movs	r2, #180	; 0xb4
 8000f7a:	2100      	movs	r1, #0
 8000f7c:	4618      	mov	r0, r3
 8000f7e:	f011 fa1d 	bl	80123bc <memset>
  if(hospi->Instance==OCTOSPI1)
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	681b      	ldr	r3, [r3, #0]
 8000f86:	4a87      	ldr	r2, [pc, #540]	; (80011a4 <HAL_OSPI_MspInit+0x248>)
 8000f88:	4293      	cmp	r3, r2
 8000f8a:	f040 8106 	bne.w	800119a <HAL_OSPI_MspInit+0x23e>
  /* USER CODE BEGIN OCTOSPI1_MspInit 0 */

  /* USER CODE END OCTOSPI1_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_OSPI;
 8000f8e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8000f92:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.OspiClockSelection = RCC_OSPICLKSOURCE_D1HCLK;
 8000f94:	2300      	movs	r3, #0
 8000f96:	66bb      	str	r3, [r7, #104]	; 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000f98:	f107 0320 	add.w	r3, r7, #32
 8000f9c:	4618      	mov	r0, r3
 8000f9e:	f004 faed 	bl	800557c <HAL_RCCEx_PeriphCLKConfig>
 8000fa2:	4603      	mov	r3, r0
 8000fa4:	2b00      	cmp	r3, #0
 8000fa6:	d001      	beq.n	8000fac <HAL_OSPI_MspInit+0x50>
    {
      Error_Handler();
 8000fa8:	f7ff fee4 	bl	8000d74 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_OSPI1_CLK_ENABLE();
 8000fac:	4b7e      	ldr	r3, [pc, #504]	; (80011a8 <HAL_OSPI_MspInit+0x24c>)
 8000fae:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8000fb2:	4a7d      	ldr	r2, [pc, #500]	; (80011a8 <HAL_OSPI_MspInit+0x24c>)
 8000fb4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000fb8:	f8c2 30d4 	str.w	r3, [r2, #212]	; 0xd4
 8000fbc:	4b7a      	ldr	r3, [pc, #488]	; (80011a8 <HAL_OSPI_MspInit+0x24c>)
 8000fbe:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8000fc2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000fc6:	61fb      	str	r3, [r7, #28]
 8000fc8:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8000fca:	4b77      	ldr	r3, [pc, #476]	; (80011a8 <HAL_OSPI_MspInit+0x24c>)
 8000fcc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000fd0:	4a75      	ldr	r2, [pc, #468]	; (80011a8 <HAL_OSPI_MspInit+0x24c>)
 8000fd2:	f043 0310 	orr.w	r3, r3, #16
 8000fd6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000fda:	4b73      	ldr	r3, [pc, #460]	; (80011a8 <HAL_OSPI_MspInit+0x24c>)
 8000fdc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000fe0:	f003 0310 	and.w	r3, r3, #16
 8000fe4:	61bb      	str	r3, [r7, #24]
 8000fe6:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8000fe8:	4b6f      	ldr	r3, [pc, #444]	; (80011a8 <HAL_OSPI_MspInit+0x24c>)
 8000fea:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000fee:	4a6e      	ldr	r2, [pc, #440]	; (80011a8 <HAL_OSPI_MspInit+0x24c>)
 8000ff0:	f043 0320 	orr.w	r3, r3, #32
 8000ff4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000ff8:	4b6b      	ldr	r3, [pc, #428]	; (80011a8 <HAL_OSPI_MspInit+0x24c>)
 8000ffa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ffe:	f003 0320 	and.w	r3, r3, #32
 8001002:	617b      	str	r3, [r7, #20]
 8001004:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001006:	4b68      	ldr	r3, [pc, #416]	; (80011a8 <HAL_OSPI_MspInit+0x24c>)
 8001008:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800100c:	4a66      	ldr	r2, [pc, #408]	; (80011a8 <HAL_OSPI_MspInit+0x24c>)
 800100e:	f043 0304 	orr.w	r3, r3, #4
 8001012:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001016:	4b64      	ldr	r3, [pc, #400]	; (80011a8 <HAL_OSPI_MspInit+0x24c>)
 8001018:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800101c:	f003 0304 	and.w	r3, r3, #4
 8001020:	613b      	str	r3, [r7, #16]
 8001022:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001024:	4b60      	ldr	r3, [pc, #384]	; (80011a8 <HAL_OSPI_MspInit+0x24c>)
 8001026:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800102a:	4a5f      	ldr	r2, [pc, #380]	; (80011a8 <HAL_OSPI_MspInit+0x24c>)
 800102c:	f043 0301 	orr.w	r3, r3, #1
 8001030:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001034:	4b5c      	ldr	r3, [pc, #368]	; (80011a8 <HAL_OSPI_MspInit+0x24c>)
 8001036:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800103a:	f003 0301 	and.w	r3, r3, #1
 800103e:	60fb      	str	r3, [r7, #12]
 8001040:	68fb      	ldr	r3, [r7, #12]
    PE8     ------> OCTOSPIM_P1_IO5
    PE9     ------> OCTOSPIM_P1_IO6
    PE10     ------> OCTOSPIM_P1_IO7
    PE11     ------> OCTOSPIM_P1_NCS
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001042:	2304      	movs	r3, #4
 8001044:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001048:	2302      	movs	r3, #2
 800104a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800104e:	2300      	movs	r3, #0
 8001050:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001054:	2303      	movs	r3, #3
 8001056:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF9_OCTOSPIM_P1;
 800105a:	2309      	movs	r3, #9
 800105c:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001060:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8001064:	4619      	mov	r1, r3
 8001066:	4851      	ldr	r0, [pc, #324]	; (80011ac <HAL_OSPI_MspInit+0x250>)
 8001068:	f000 ffe4 	bl	8002034 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800106c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001070:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001074:	2302      	movs	r3, #2
 8001076:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800107a:	2300      	movs	r3, #0
 800107c:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001080:	2303      	movs	r3, #3
 8001082:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF10_OCTOSPIM_P1;
 8001086:	230a      	movs	r3, #10
 8001088:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800108c:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8001090:	4619      	mov	r1, r3
 8001092:	4847      	ldr	r0, [pc, #284]	; (80011b0 <HAL_OSPI_MspInit+0x254>)
 8001094:	f000 ffce 	bl	8002034 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001098:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800109c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010a0:	2302      	movs	r3, #2
 80010a2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010a6:	2300      	movs	r3, #0
 80010a8:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80010ac:	2303      	movs	r3, #3
 80010ae:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF9_OCTOSPIM_P1;
 80010b2:	2309      	movs	r3, #9
 80010b4:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80010b8:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80010bc:	4619      	mov	r1, r3
 80010be:	483c      	ldr	r0, [pc, #240]	; (80011b0 <HAL_OSPI_MspInit+0x254>)
 80010c0:	f000 ffb8 	bl	8002034 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_5;
 80010c4:	2322      	movs	r3, #34	; 0x22
 80010c6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010ca:	2302      	movs	r3, #2
 80010cc:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010d0:	2300      	movs	r3, #0
 80010d2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80010d6:	2303      	movs	r3, #3
 80010d8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF10_OCTOSPIM_P1;
 80010dc:	230a      	movs	r3, #10
 80010de:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80010e2:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80010e6:	4619      	mov	r1, r3
 80010e8:	4832      	ldr	r0, [pc, #200]	; (80011b4 <HAL_OSPI_MspInit+0x258>)
 80010ea:	f000 ffa3 	bl	8002034 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1;
 80010ee:	2302      	movs	r3, #2
 80010f0:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010f4:	2302      	movs	r3, #2
 80010f6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010fa:	2300      	movs	r3, #0
 80010fc:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001100:	2303      	movs	r3, #3
 8001102:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF9_OCTOSPIM_P1;
 8001106:	2309      	movs	r3, #9
 8001108:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800110c:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8001110:	4619      	mov	r1, r3
 8001112:	4829      	ldr	r0, [pc, #164]	; (80011b8 <HAL_OSPI_MspInit+0x25c>)
 8001114:	f000 ff8e 	bl	8002034 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001118:	2304      	movs	r3, #4
 800111a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800111e:	2302      	movs	r3, #2
 8001120:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001124:	2300      	movs	r3, #0
 8001126:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800112a:	2303      	movs	r3, #3
 800112c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF6_OCTOSPIM_P1;
 8001130:	2306      	movs	r3, #6
 8001132:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001136:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 800113a:	4619      	mov	r1, r3
 800113c:	481e      	ldr	r0, [pc, #120]	; (80011b8 <HAL_OSPI_MspInit+0x25c>)
 800113e:	f000 ff79 	bl	8002034 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10;
 8001142:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 8001146:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800114a:	2302      	movs	r3, #2
 800114c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001150:	2300      	movs	r3, #0
 8001152:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001156:	2303      	movs	r3, #3
 8001158:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF10_OCTOSPIM_P1;
 800115c:	230a      	movs	r3, #10
 800115e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001162:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8001166:	4619      	mov	r1, r3
 8001168:	4810      	ldr	r0, [pc, #64]	; (80011ac <HAL_OSPI_MspInit+0x250>)
 800116a:	f000 ff63 	bl	8002034 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11;
 800116e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001172:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001176:	2302      	movs	r3, #2
 8001178:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800117c:	2300      	movs	r3, #0
 800117e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001182:	2303      	movs	r3, #3
 8001184:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF11_OCTOSPIM_P1;
 8001188:	230b      	movs	r3, #11
 800118a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800118e:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8001192:	4619      	mov	r1, r3
 8001194:	4805      	ldr	r0, [pc, #20]	; (80011ac <HAL_OSPI_MspInit+0x250>)
 8001196:	f000 ff4d 	bl	8002034 <HAL_GPIO_Init>
  /* USER CODE BEGIN OCTOSPI1_MspInit 1 */

  /* USER CODE END OCTOSPI1_MspInit 1 */
  }

}
 800119a:	bf00      	nop
 800119c:	37e8      	adds	r7, #232	; 0xe8
 800119e:	46bd      	mov	sp, r7
 80011a0:	bd80      	pop	{r7, pc}
 80011a2:	bf00      	nop
 80011a4:	52005000 	.word	0x52005000
 80011a8:	58024400 	.word	0x58024400
 80011ac:	58021000 	.word	0x58021000
 80011b0:	58021400 	.word	0x58021400
 80011b4:	58020800 	.word	0x58020800
 80011b8:	58020000 	.word	0x58020000

080011bc <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 80011bc:	b580      	push	{r7, lr}
 80011be:	b0b0      	sub	sp, #192	; 0xc0
 80011c0:	af00      	add	r7, sp, #0
 80011c2:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80011c4:	f107 030c 	add.w	r3, r7, #12
 80011c8:	22b4      	movs	r2, #180	; 0xb4
 80011ca:	2100      	movs	r1, #0
 80011cc:	4618      	mov	r0, r3
 80011ce:	f011 f8f5 	bl	80123bc <memset>
  if(hrtc->Instance==RTC)
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	681b      	ldr	r3, [r3, #0]
 80011d6:	4a0f      	ldr	r2, [pc, #60]	; (8001214 <HAL_RTC_MspInit+0x58>)
 80011d8:	4293      	cmp	r3, r2
 80011da:	d116      	bne.n	800120a <HAL_RTC_MspInit+0x4e>
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 80011dc:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80011e0:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 80011e2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80011e6:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80011ea:	f107 030c 	add.w	r3, r7, #12
 80011ee:	4618      	mov	r0, r3
 80011f0:	f004 f9c4 	bl	800557c <HAL_RCCEx_PeriphCLKConfig>
 80011f4:	4603      	mov	r3, r0
 80011f6:	2b00      	cmp	r3, #0
 80011f8:	d001      	beq.n	80011fe <HAL_RTC_MspInit+0x42>
    {
      Error_Handler();
 80011fa:	f7ff fdbb 	bl	8000d74 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 80011fe:	4b06      	ldr	r3, [pc, #24]	; (8001218 <HAL_RTC_MspInit+0x5c>)
 8001200:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001202:	4a05      	ldr	r2, [pc, #20]	; (8001218 <HAL_RTC_MspInit+0x5c>)
 8001204:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001208:	6713      	str	r3, [r2, #112]	; 0x70
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 800120a:	bf00      	nop
 800120c:	37c0      	adds	r7, #192	; 0xc0
 800120e:	46bd      	mov	sp, r7
 8001210:	bd80      	pop	{r7, pc}
 8001212:	bf00      	nop
 8001214:	58004000 	.word	0x58004000
 8001218:	58024400 	.word	0x58024400

0800121c <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 800121c:	b580      	push	{r7, lr}
 800121e:	b0b8      	sub	sp, #224	; 0xe0
 8001220:	af00      	add	r7, sp, #0
 8001222:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001224:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001228:	2200      	movs	r2, #0
 800122a:	601a      	str	r2, [r3, #0]
 800122c:	605a      	str	r2, [r3, #4]
 800122e:	609a      	str	r2, [r3, #8]
 8001230:	60da      	str	r2, [r3, #12]
 8001232:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001234:	f107 0318 	add.w	r3, r7, #24
 8001238:	22b4      	movs	r2, #180	; 0xb4
 800123a:	2100      	movs	r1, #0
 800123c:	4618      	mov	r0, r3
 800123e:	f011 f8bd 	bl	80123bc <memset>
  if(hsd->Instance==SDMMC1)
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	681b      	ldr	r3, [r3, #0]
 8001246:	4a37      	ldr	r2, [pc, #220]	; (8001324 <HAL_SD_MspInit+0x108>)
 8001248:	4293      	cmp	r3, r2
 800124a:	d166      	bne.n	800131a <HAL_SD_MspInit+0xfe>
  /* USER CODE BEGIN SDMMC1_MspInit 0 */

  /* USER CODE END SDMMC1_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SDMMC;
 800124c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001250:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.SdmmcClockSelection = RCC_SDMMCCLKSOURCE_PLL;
 8001252:	2300      	movs	r3, #0
 8001254:	667b      	str	r3, [r7, #100]	; 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001256:	f107 0318 	add.w	r3, r7, #24
 800125a:	4618      	mov	r0, r3
 800125c:	f004 f98e 	bl	800557c <HAL_RCCEx_PeriphCLKConfig>
 8001260:	4603      	mov	r3, r0
 8001262:	2b00      	cmp	r3, #0
 8001264:	d001      	beq.n	800126a <HAL_SD_MspInit+0x4e>
    {
      Error_Handler();
 8001266:	f7ff fd85 	bl	8000d74 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SDMMC1_CLK_ENABLE();
 800126a:	4b2f      	ldr	r3, [pc, #188]	; (8001328 <HAL_SD_MspInit+0x10c>)
 800126c:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8001270:	4a2d      	ldr	r2, [pc, #180]	; (8001328 <HAL_SD_MspInit+0x10c>)
 8001272:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001276:	f8c2 30d4 	str.w	r3, [r2, #212]	; 0xd4
 800127a:	4b2b      	ldr	r3, [pc, #172]	; (8001328 <HAL_SD_MspInit+0x10c>)
 800127c:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8001280:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001284:	617b      	str	r3, [r7, #20]
 8001286:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001288:	4b27      	ldr	r3, [pc, #156]	; (8001328 <HAL_SD_MspInit+0x10c>)
 800128a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800128e:	4a26      	ldr	r2, [pc, #152]	; (8001328 <HAL_SD_MspInit+0x10c>)
 8001290:	f043 0304 	orr.w	r3, r3, #4
 8001294:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001298:	4b23      	ldr	r3, [pc, #140]	; (8001328 <HAL_SD_MspInit+0x10c>)
 800129a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800129e:	f003 0304 	and.w	r3, r3, #4
 80012a2:	613b      	str	r3, [r7, #16]
 80012a4:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80012a6:	4b20      	ldr	r3, [pc, #128]	; (8001328 <HAL_SD_MspInit+0x10c>)
 80012a8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80012ac:	4a1e      	ldr	r2, [pc, #120]	; (8001328 <HAL_SD_MspInit+0x10c>)
 80012ae:	f043 0308 	orr.w	r3, r3, #8
 80012b2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80012b6:	4b1c      	ldr	r3, [pc, #112]	; (8001328 <HAL_SD_MspInit+0x10c>)
 80012b8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80012bc:	f003 0308 	and.w	r3, r3, #8
 80012c0:	60fb      	str	r3, [r7, #12]
 80012c2:	68fb      	ldr	r3, [r7, #12]
    PC10     ------> SDMMC1_D2
    PC11     ------> SDMMC1_D3
    PC12     ------> SDMMC1_CK
    PD2     ------> SDMMC1_CMD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 80012c4:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 80012c8:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
                          |GPIO_PIN_12;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012cc:	2302      	movs	r3, #2
 80012ce:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012d2:	2300      	movs	r3, #0
 80012d4:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80012d8:	2303      	movs	r3, #3
 80012da:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 80012de:	230c      	movs	r3, #12
 80012e0:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80012e4:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80012e8:	4619      	mov	r1, r3
 80012ea:	4810      	ldr	r0, [pc, #64]	; (800132c <HAL_SD_MspInit+0x110>)
 80012ec:	f000 fea2 	bl	8002034 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80012f0:	2304      	movs	r3, #4
 80012f2:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012f6:	2302      	movs	r3, #2
 80012f8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012fc:	2300      	movs	r3, #0
 80012fe:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001302:	2303      	movs	r3, #3
 8001304:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8001308:	230c      	movs	r3, #12
 800130a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800130e:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001312:	4619      	mov	r1, r3
 8001314:	4806      	ldr	r0, [pc, #24]	; (8001330 <HAL_SD_MspInit+0x114>)
 8001316:	f000 fe8d 	bl	8002034 <HAL_GPIO_Init>
  /* USER CODE BEGIN SDMMC1_MspInit 1 */

  /* USER CODE END SDMMC1_MspInit 1 */
  }

}
 800131a:	bf00      	nop
 800131c:	37e0      	adds	r7, #224	; 0xe0
 800131e:	46bd      	mov	sp, r7
 8001320:	bd80      	pop	{r7, pc}
 8001322:	bf00      	nop
 8001324:	52007000 	.word	0x52007000
 8001328:	58024400 	.word	0x58024400
 800132c:	58020800 	.word	0x58020800
 8001330:	58020c00 	.word	0x58020c00

08001334 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001334:	b480      	push	{r7}
 8001336:	b085      	sub	sp, #20
 8001338:	af00      	add	r7, sp, #0
 800133a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	681b      	ldr	r3, [r3, #0]
 8001340:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001344:	d10e      	bne.n	8001364 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001346:	4b0a      	ldr	r3, [pc, #40]	; (8001370 <HAL_TIM_Base_MspInit+0x3c>)
 8001348:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800134c:	4a08      	ldr	r2, [pc, #32]	; (8001370 <HAL_TIM_Base_MspInit+0x3c>)
 800134e:	f043 0301 	orr.w	r3, r3, #1
 8001352:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8001356:	4b06      	ldr	r3, [pc, #24]	; (8001370 <HAL_TIM_Base_MspInit+0x3c>)
 8001358:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800135c:	f003 0301 	and.w	r3, r3, #1
 8001360:	60fb      	str	r3, [r7, #12]
 8001362:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8001364:	bf00      	nop
 8001366:	3714      	adds	r7, #20
 8001368:	46bd      	mov	sp, r7
 800136a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800136e:	4770      	bx	lr
 8001370:	58024400 	.word	0x58024400

08001374 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001374:	b580      	push	{r7, lr}
 8001376:	b0b6      	sub	sp, #216	; 0xd8
 8001378:	af00      	add	r7, sp, #0
 800137a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800137c:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8001380:	2200      	movs	r2, #0
 8001382:	601a      	str	r2, [r3, #0]
 8001384:	605a      	str	r2, [r3, #4]
 8001386:	609a      	str	r2, [r3, #8]
 8001388:	60da      	str	r2, [r3, #12]
 800138a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800138c:	f107 0310 	add.w	r3, r7, #16
 8001390:	22b4      	movs	r2, #180	; 0xb4
 8001392:	2100      	movs	r1, #0
 8001394:	4618      	mov	r0, r3
 8001396:	f011 f811 	bl	80123bc <memset>
  if(huart->Instance==USART1)
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	681b      	ldr	r3, [r3, #0]
 800139e:	4a25      	ldr	r2, [pc, #148]	; (8001434 <HAL_UART_MspInit+0xc0>)
 80013a0:	4293      	cmp	r3, r2
 80013a2:	d142      	bne.n	800142a <HAL_UART_MspInit+0xb6>
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80013a4:	2301      	movs	r3, #1
 80013a6:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16910CLKSOURCE_D2PCLK2;
 80013a8:	2300      	movs	r3, #0
 80013aa:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80013ae:	f107 0310 	add.w	r3, r7, #16
 80013b2:	4618      	mov	r0, r3
 80013b4:	f004 f8e2 	bl	800557c <HAL_RCCEx_PeriphCLKConfig>
 80013b8:	4603      	mov	r3, r0
 80013ba:	2b00      	cmp	r3, #0
 80013bc:	d001      	beq.n	80013c2 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 80013be:	f7ff fcd9 	bl	8000d74 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80013c2:	4b1d      	ldr	r3, [pc, #116]	; (8001438 <HAL_UART_MspInit+0xc4>)
 80013c4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80013c8:	4a1b      	ldr	r2, [pc, #108]	; (8001438 <HAL_UART_MspInit+0xc4>)
 80013ca:	f043 0310 	orr.w	r3, r3, #16
 80013ce:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 80013d2:	4b19      	ldr	r3, [pc, #100]	; (8001438 <HAL_UART_MspInit+0xc4>)
 80013d4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80013d8:	f003 0310 	and.w	r3, r3, #16
 80013dc:	60fb      	str	r3, [r7, #12]
 80013de:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80013e0:	4b15      	ldr	r3, [pc, #84]	; (8001438 <HAL_UART_MspInit+0xc4>)
 80013e2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80013e6:	4a14      	ldr	r2, [pc, #80]	; (8001438 <HAL_UART_MspInit+0xc4>)
 80013e8:	f043 0302 	orr.w	r3, r3, #2
 80013ec:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80013f0:	4b11      	ldr	r3, [pc, #68]	; (8001438 <HAL_UART_MspInit+0xc4>)
 80013f2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80013f6:	f003 0302 	and.w	r3, r3, #2
 80013fa:	60bb      	str	r3, [r7, #8]
 80013fc:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PB14     ------> USART1_TX
    PB15     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 80013fe:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8001402:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001406:	2302      	movs	r3, #2
 8001408:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800140c:	2300      	movs	r3, #0
 800140e:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001412:	2300      	movs	r3, #0
 8001414:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Alternate = GPIO_AF4_USART1;
 8001418:	2304      	movs	r3, #4
 800141a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800141e:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8001422:	4619      	mov	r1, r3
 8001424:	4805      	ldr	r0, [pc, #20]	; (800143c <HAL_UART_MspInit+0xc8>)
 8001426:	f000 fe05 	bl	8002034 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 800142a:	bf00      	nop
 800142c:	37d8      	adds	r7, #216	; 0xd8
 800142e:	46bd      	mov	sp, r7
 8001430:	bd80      	pop	{r7, pc}
 8001432:	bf00      	nop
 8001434:	40011000 	.word	0x40011000
 8001438:	58024400 	.word	0x58024400
 800143c:	58020400 	.word	0x58020400

08001440 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001440:	b580      	push	{r7, lr}
 8001442:	b08e      	sub	sp, #56	; 0x38
 8001444:	af00      	add	r7, sp, #0
 8001446:	6078      	str	r0, [r7, #4]
  uint32_t              uwTimclock;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
/*Configure the TIM1 IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	2b0f      	cmp	r3, #15
 800144c:	d844      	bhi.n	80014d8 <HAL_InitTick+0x98>
  {
  HAL_NVIC_SetPriority(TIM1_UP_IRQn, TickPriority ,0U);
 800144e:	2200      	movs	r2, #0
 8001450:	6879      	ldr	r1, [r7, #4]
 8001452:	2019      	movs	r0, #25
 8001454:	f000 fa5e 	bl	8001914 <HAL_NVIC_SetPriority>

  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 8001458:	2019      	movs	r0, #25
 800145a:	f000 fa75 	bl	8001948 <HAL_NVIC_EnableIRQ>
    uwTickPrio = TickPriority;
 800145e:	4a24      	ldr	r2, [pc, #144]	; (80014f0 <HAL_InitTick+0xb0>)
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8001464:	4b23      	ldr	r3, [pc, #140]	; (80014f4 <HAL_InitTick+0xb4>)
 8001466:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800146a:	4a22      	ldr	r2, [pc, #136]	; (80014f4 <HAL_InitTick+0xb4>)
 800146c:	f043 0301 	orr.w	r3, r3, #1
 8001470:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8001474:	4b1f      	ldr	r3, [pc, #124]	; (80014f4 <HAL_InitTick+0xb4>)
 8001476:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800147a:	f003 0301 	and.w	r3, r3, #1
 800147e:	60bb      	str	r3, [r7, #8]
 8001480:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001482:	f107 020c 	add.w	r2, r7, #12
 8001486:	f107 0310 	add.w	r3, r7, #16
 800148a:	4611      	mov	r1, r2
 800148c:	4618      	mov	r0, r3
 800148e:	f004 f833 	bl	80054f8 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */

  uwTimclock = 2*HAL_RCC_GetPCLK2Freq();
 8001492:	f004 f81b 	bl	80054cc <HAL_RCC_GetPCLK2Freq>
 8001496:	4603      	mov	r3, r0
 8001498:	005b      	lsls	r3, r3, #1
 800149a:	637b      	str	r3, [r7, #52]	; 0x34

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800149c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800149e:	4a16      	ldr	r2, [pc, #88]	; (80014f8 <HAL_InitTick+0xb8>)
 80014a0:	fba2 2303 	umull	r2, r3, r2, r3
 80014a4:	0c9b      	lsrs	r3, r3, #18
 80014a6:	3b01      	subs	r3, #1
 80014a8:	633b      	str	r3, [r7, #48]	; 0x30

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 80014aa:	4b14      	ldr	r3, [pc, #80]	; (80014fc <HAL_InitTick+0xbc>)
 80014ac:	4a14      	ldr	r2, [pc, #80]	; (8001500 <HAL_InitTick+0xc0>)
 80014ae:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 80014b0:	4b12      	ldr	r3, [pc, #72]	; (80014fc <HAL_InitTick+0xbc>)
 80014b2:	f240 32e7 	movw	r2, #999	; 0x3e7
 80014b6:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 80014b8:	4a10      	ldr	r2, [pc, #64]	; (80014fc <HAL_InitTick+0xbc>)
 80014ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80014bc:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 80014be:	4b0f      	ldr	r3, [pc, #60]	; (80014fc <HAL_InitTick+0xbc>)
 80014c0:	2200      	movs	r2, #0
 80014c2:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80014c4:	4b0d      	ldr	r3, [pc, #52]	; (80014fc <HAL_InitTick+0xbc>)
 80014c6:	2200      	movs	r2, #0
 80014c8:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 80014ca:	480c      	ldr	r0, [pc, #48]	; (80014fc <HAL_InitTick+0xbc>)
 80014cc:	f007 fc58 	bl	8008d80 <HAL_TIM_Base_Init>
 80014d0:	4603      	mov	r3, r0
 80014d2:	2b00      	cmp	r3, #0
 80014d4:	d107      	bne.n	80014e6 <HAL_InitTick+0xa6>
 80014d6:	e001      	b.n	80014dc <HAL_InitTick+0x9c>
    return HAL_ERROR;
 80014d8:	2301      	movs	r3, #1
 80014da:	e005      	b.n	80014e8 <HAL_InitTick+0xa8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 80014dc:	4807      	ldr	r0, [pc, #28]	; (80014fc <HAL_InitTick+0xbc>)
 80014de:	f007 fca7 	bl	8008e30 <HAL_TIM_Base_Start_IT>
 80014e2:	4603      	mov	r3, r0
 80014e4:	e000      	b.n	80014e8 <HAL_InitTick+0xa8>
  }

  /* Return function status */
  return HAL_ERROR;
 80014e6:	2301      	movs	r3, #1
}
 80014e8:	4618      	mov	r0, r3
 80014ea:	3738      	adds	r7, #56	; 0x38
 80014ec:	46bd      	mov	sp, r7
 80014ee:	bd80      	pop	{r7, pc}
 80014f0:	20000008 	.word	0x20000008
 80014f4:	58024400 	.word	0x58024400
 80014f8:	431bde83 	.word	0x431bde83
 80014fc:	2000526c 	.word	0x2000526c
 8001500:	40010000 	.word	0x40010000

08001504 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001504:	b480      	push	{r7}
 8001506:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001508:	e7fe      	b.n	8001508 <NMI_Handler+0x4>

0800150a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800150a:	b480      	push	{r7}
 800150c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800150e:	e7fe      	b.n	800150e <HardFault_Handler+0x4>

08001510 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001510:	b480      	push	{r7}
 8001512:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001514:	e7fe      	b.n	8001514 <MemManage_Handler+0x4>

08001516 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001516:	b480      	push	{r7}
 8001518:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800151a:	e7fe      	b.n	800151a <BusFault_Handler+0x4>

0800151c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800151c:	b480      	push	{r7}
 800151e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001520:	e7fe      	b.n	8001520 <UsageFault_Handler+0x4>

08001522 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001522:	b480      	push	{r7}
 8001524:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001526:	bf00      	nop
 8001528:	46bd      	mov	sp, r7
 800152a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800152e:	4770      	bx	lr

08001530 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 8001530:	b580      	push	{r7, lr}
 8001532:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001534:	4802      	ldr	r0, [pc, #8]	; (8001540 <TIM1_UP_IRQHandler+0x10>)
 8001536:	f007 fd01 	bl	8008f3c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 800153a:	bf00      	nop
 800153c:	bd80      	pop	{r7, pc}
 800153e:	bf00      	nop
 8001540:	2000526c 	.word	0x2000526c

08001544 <OTG_HS_IRQHandler>:

/**
  * @brief This function handles USB On The Go HS global interrupt.
  */
void OTG_HS_IRQHandler(void)
{
 8001544:	b580      	push	{r7, lr}
 8001546:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_HS_IRQn 0 */

  /* USER CODE END OTG_HS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_HS);
 8001548:	4802      	ldr	r0, [pc, #8]	; (8001554 <OTG_HS_IRQHandler+0x10>)
 800154a:	f001 ffbc 	bl	80034c6 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_HS_IRQn 1 */

  /* USER CODE END OTG_HS_IRQn 1 */
}
 800154e:	bf00      	nop
 8001550:	bd80      	pop	{r7, pc}
 8001552:	bf00      	nop
 8001554:	20006c6c 	.word	0x20006c6c

08001558 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001558:	b480      	push	{r7}
 800155a:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 800155c:	4b34      	ldr	r3, [pc, #208]	; (8001630 <SystemInit+0xd8>)
 800155e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001562:	4a33      	ldr	r2, [pc, #204]	; (8001630 <SystemInit+0xd8>)
 8001564:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001568:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800156c:	4b31      	ldr	r3, [pc, #196]	; (8001634 <SystemInit+0xdc>)
 800156e:	681b      	ldr	r3, [r3, #0]
 8001570:	f003 030f 	and.w	r3, r3, #15
 8001574:	2b06      	cmp	r3, #6
 8001576:	d807      	bhi.n	8001588 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001578:	4b2e      	ldr	r3, [pc, #184]	; (8001634 <SystemInit+0xdc>)
 800157a:	681b      	ldr	r3, [r3, #0]
 800157c:	f023 030f 	bic.w	r3, r3, #15
 8001580:	4a2c      	ldr	r2, [pc, #176]	; (8001634 <SystemInit+0xdc>)
 8001582:	f043 0307 	orr.w	r3, r3, #7
 8001586:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8001588:	4b2b      	ldr	r3, [pc, #172]	; (8001638 <SystemInit+0xe0>)
 800158a:	681b      	ldr	r3, [r3, #0]
 800158c:	4a2a      	ldr	r2, [pc, #168]	; (8001638 <SystemInit+0xe0>)
 800158e:	f043 0301 	orr.w	r3, r3, #1
 8001592:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8001594:	4b28      	ldr	r3, [pc, #160]	; (8001638 <SystemInit+0xe0>)
 8001596:	2200      	movs	r2, #0
 8001598:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 800159a:	4b27      	ldr	r3, [pc, #156]	; (8001638 <SystemInit+0xe0>)
 800159c:	681a      	ldr	r2, [r3, #0]
 800159e:	4926      	ldr	r1, [pc, #152]	; (8001638 <SystemInit+0xe0>)
 80015a0:	4b26      	ldr	r3, [pc, #152]	; (800163c <SystemInit+0xe4>)
 80015a2:	4013      	ands	r3, r2
 80015a4:	600b      	str	r3, [r1, #0]
  
   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80015a6:	4b23      	ldr	r3, [pc, #140]	; (8001634 <SystemInit+0xdc>)
 80015a8:	681b      	ldr	r3, [r3, #0]
 80015aa:	f003 0308 	and.w	r3, r3, #8
 80015ae:	2b00      	cmp	r3, #0
 80015b0:	d007      	beq.n	80015c2 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80015b2:	4b20      	ldr	r3, [pc, #128]	; (8001634 <SystemInit+0xdc>)
 80015b4:	681b      	ldr	r3, [r3, #0]
 80015b6:	f023 030f 	bic.w	r3, r3, #15
 80015ba:	4a1e      	ldr	r2, [pc, #120]	; (8001634 <SystemInit+0xdc>)
 80015bc:	f043 0307 	orr.w	r3, r3, #7
 80015c0:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 80015c2:	4b1d      	ldr	r3, [pc, #116]	; (8001638 <SystemInit+0xe0>)
 80015c4:	2200      	movs	r2, #0
 80015c6:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 80015c8:	4b1b      	ldr	r3, [pc, #108]	; (8001638 <SystemInit+0xe0>)
 80015ca:	2200      	movs	r2, #0
 80015cc:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 80015ce:	4b1a      	ldr	r3, [pc, #104]	; (8001638 <SystemInit+0xe0>)
 80015d0:	2200      	movs	r2, #0
 80015d2:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 80015d4:	4b18      	ldr	r3, [pc, #96]	; (8001638 <SystemInit+0xe0>)
 80015d6:	4a1a      	ldr	r2, [pc, #104]	; (8001640 <SystemInit+0xe8>)
 80015d8:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 80015da:	4b17      	ldr	r3, [pc, #92]	; (8001638 <SystemInit+0xe0>)
 80015dc:	4a19      	ldr	r2, [pc, #100]	; (8001644 <SystemInit+0xec>)
 80015de:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 80015e0:	4b15      	ldr	r3, [pc, #84]	; (8001638 <SystemInit+0xe0>)
 80015e2:	4a19      	ldr	r2, [pc, #100]	; (8001648 <SystemInit+0xf0>)
 80015e4:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 80015e6:	4b14      	ldr	r3, [pc, #80]	; (8001638 <SystemInit+0xe0>)
 80015e8:	2200      	movs	r2, #0
 80015ea:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 80015ec:	4b12      	ldr	r3, [pc, #72]	; (8001638 <SystemInit+0xe0>)
 80015ee:	4a16      	ldr	r2, [pc, #88]	; (8001648 <SystemInit+0xf0>)
 80015f0:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 80015f2:	4b11      	ldr	r3, [pc, #68]	; (8001638 <SystemInit+0xe0>)
 80015f4:	2200      	movs	r2, #0
 80015f6:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 80015f8:	4b0f      	ldr	r3, [pc, #60]	; (8001638 <SystemInit+0xe0>)
 80015fa:	4a13      	ldr	r2, [pc, #76]	; (8001648 <SystemInit+0xf0>)
 80015fc:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 80015fe:	4b0e      	ldr	r3, [pc, #56]	; (8001638 <SystemInit+0xe0>)
 8001600:	2200      	movs	r2, #0
 8001602:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001604:	4b0c      	ldr	r3, [pc, #48]	; (8001638 <SystemInit+0xe0>)
 8001606:	681b      	ldr	r3, [r3, #0]
 8001608:	4a0b      	ldr	r2, [pc, #44]	; (8001638 <SystemInit+0xe0>)
 800160a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800160e:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8001610:	4b09      	ldr	r3, [pc, #36]	; (8001638 <SystemInit+0xe0>)
 8001612:	2200      	movs	r2, #0
 8001614:	661a      	str	r2, [r3, #96]	; 0x60
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8001616:	4b0d      	ldr	r3, [pc, #52]	; (800164c <SystemInit+0xf4>)
 8001618:	f243 02d2 	movw	r2, #12498	; 0x30d2
 800161c:	601a      	str	r2, [r3, #0]

  /* Configure the Vector Table location add offset address for cortex-M7 ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D1_AXISRAM_BASE  | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal AXI-RAM */
#else
  SCB->VTOR = FLASH_BANK1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800161e:	4b04      	ldr	r3, [pc, #16]	; (8001630 <SystemInit+0xd8>)
 8001620:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001624:	609a      	str	r2, [r3, #8]
#endif

#endif /*DUAL_CORE && CORE_CM4*/

}
 8001626:	bf00      	nop
 8001628:	46bd      	mov	sp, r7
 800162a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800162e:	4770      	bx	lr
 8001630:	e000ed00 	.word	0xe000ed00
 8001634:	52002000 	.word	0x52002000
 8001638:	58024400 	.word	0x58024400
 800163c:	eaf6ed7f 	.word	0xeaf6ed7f
 8001640:	02020200 	.word	0x02020200
 8001644:	01ff0000 	.word	0x01ff0000
 8001648:	01010280 	.word	0x01010280
 800164c:	52004000 	.word	0x52004000

08001650 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8001650:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001688 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8001654:	f7ff ff80 	bl	8001558 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001658:	480c      	ldr	r0, [pc, #48]	; (800168c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800165a:	490d      	ldr	r1, [pc, #52]	; (8001690 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800165c:	4a0d      	ldr	r2, [pc, #52]	; (8001694 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800165e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001660:	e002      	b.n	8001668 <LoopCopyDataInit>

08001662 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001662:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001664:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001666:	3304      	adds	r3, #4

08001668 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001668:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800166a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800166c:	d3f9      	bcc.n	8001662 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800166e:	4a0a      	ldr	r2, [pc, #40]	; (8001698 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001670:	4c0a      	ldr	r4, [pc, #40]	; (800169c <LoopFillZerobss+0x22>)
  movs r3, #0
 8001672:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001674:	e001      	b.n	800167a <LoopFillZerobss>

08001676 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001676:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001678:	3204      	adds	r2, #4

0800167a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800167a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800167c:	d3fb      	bcc.n	8001676 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800167e:	f010 fe6b 	bl	8012358 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001682:	f7fe ffc1 	bl	8000608 <main>
  bx  lr
 8001686:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001688:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800168c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001690:	20000188 	.word	0x20000188
  ldr r2, =_sidata
 8001694:	0801251c 	.word	0x0801251c
  ldr r2, =_sbss
 8001698:	20000188 	.word	0x20000188
  ldr r4, =_ebss
 800169c:	20007074 	.word	0x20007074

080016a0 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80016a0:	e7fe      	b.n	80016a0 <ADC3_IRQHandler>
	...

080016a4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80016a4:	b580      	push	{r7, lr}
 80016a6:	b082      	sub	sp, #8
 80016a8:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80016aa:	2003      	movs	r0, #3
 80016ac:	f000 f927 	bl	80018fe <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80016b0:	f003 fd4c 	bl	800514c <HAL_RCC_GetSysClockFreq>
 80016b4:	4602      	mov	r2, r0
 80016b6:	4b15      	ldr	r3, [pc, #84]	; (800170c <HAL_Init+0x68>)
 80016b8:	699b      	ldr	r3, [r3, #24]
 80016ba:	0a1b      	lsrs	r3, r3, #8
 80016bc:	f003 030f 	and.w	r3, r3, #15
 80016c0:	4913      	ldr	r1, [pc, #76]	; (8001710 <HAL_Init+0x6c>)
 80016c2:	5ccb      	ldrb	r3, [r1, r3]
 80016c4:	f003 031f 	and.w	r3, r3, #31
 80016c8:	fa22 f303 	lsr.w	r3, r2, r3
 80016cc:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80016ce:	4b0f      	ldr	r3, [pc, #60]	; (800170c <HAL_Init+0x68>)
 80016d0:	699b      	ldr	r3, [r3, #24]
 80016d2:	f003 030f 	and.w	r3, r3, #15
 80016d6:	4a0e      	ldr	r2, [pc, #56]	; (8001710 <HAL_Init+0x6c>)
 80016d8:	5cd3      	ldrb	r3, [r2, r3]
 80016da:	f003 031f 	and.w	r3, r3, #31
 80016de:	687a      	ldr	r2, [r7, #4]
 80016e0:	fa22 f303 	lsr.w	r3, r2, r3
 80016e4:	4a0b      	ldr	r2, [pc, #44]	; (8001714 <HAL_Init+0x70>)
 80016e6:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80016e8:	4a0b      	ldr	r2, [pc, #44]	; (8001718 <HAL_Init+0x74>)
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80016ee:	2000      	movs	r0, #0
 80016f0:	f7ff fea6 	bl	8001440 <HAL_InitTick>
 80016f4:	4603      	mov	r3, r0
 80016f6:	2b00      	cmp	r3, #0
 80016f8:	d001      	beq.n	80016fe <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 80016fa:	2301      	movs	r3, #1
 80016fc:	e002      	b.n	8001704 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 80016fe:	f7ff fb45 	bl	8000d8c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001702:	2300      	movs	r3, #0
}
 8001704:	4618      	mov	r0, r3
 8001706:	3708      	adds	r7, #8
 8001708:	46bd      	mov	sp, r7
 800170a:	bd80      	pop	{r7, pc}
 800170c:	58024400 	.word	0x58024400
 8001710:	080124c0 	.word	0x080124c0
 8001714:	20000004 	.word	0x20000004
 8001718:	20000000 	.word	0x20000000

0800171c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800171c:	b480      	push	{r7}
 800171e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001720:	4b06      	ldr	r3, [pc, #24]	; (800173c <HAL_IncTick+0x20>)
 8001722:	781b      	ldrb	r3, [r3, #0]
 8001724:	461a      	mov	r2, r3
 8001726:	4b06      	ldr	r3, [pc, #24]	; (8001740 <HAL_IncTick+0x24>)
 8001728:	681b      	ldr	r3, [r3, #0]
 800172a:	4413      	add	r3, r2
 800172c:	4a04      	ldr	r2, [pc, #16]	; (8001740 <HAL_IncTick+0x24>)
 800172e:	6013      	str	r3, [r2, #0]
}
 8001730:	bf00      	nop
 8001732:	46bd      	mov	sp, r7
 8001734:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001738:	4770      	bx	lr
 800173a:	bf00      	nop
 800173c:	2000000c 	.word	0x2000000c
 8001740:	200052b8 	.word	0x200052b8

08001744 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001744:	b480      	push	{r7}
 8001746:	af00      	add	r7, sp, #0
  return uwTick;
 8001748:	4b03      	ldr	r3, [pc, #12]	; (8001758 <HAL_GetTick+0x14>)
 800174a:	681b      	ldr	r3, [r3, #0]
}
 800174c:	4618      	mov	r0, r3
 800174e:	46bd      	mov	sp, r7
 8001750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001754:	4770      	bx	lr
 8001756:	bf00      	nop
 8001758:	200052b8 	.word	0x200052b8

0800175c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800175c:	b580      	push	{r7, lr}
 800175e:	b084      	sub	sp, #16
 8001760:	af00      	add	r7, sp, #0
 8001762:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001764:	f7ff ffee 	bl	8001744 <HAL_GetTick>
 8001768:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800176e:	68fb      	ldr	r3, [r7, #12]
 8001770:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001774:	d005      	beq.n	8001782 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001776:	4b0a      	ldr	r3, [pc, #40]	; (80017a0 <HAL_Delay+0x44>)
 8001778:	781b      	ldrb	r3, [r3, #0]
 800177a:	461a      	mov	r2, r3
 800177c:	68fb      	ldr	r3, [r7, #12]
 800177e:	4413      	add	r3, r2
 8001780:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001782:	bf00      	nop
 8001784:	f7ff ffde 	bl	8001744 <HAL_GetTick>
 8001788:	4602      	mov	r2, r0
 800178a:	68bb      	ldr	r3, [r7, #8]
 800178c:	1ad3      	subs	r3, r2, r3
 800178e:	68fa      	ldr	r2, [r7, #12]
 8001790:	429a      	cmp	r2, r3
 8001792:	d8f7      	bhi.n	8001784 <HAL_Delay+0x28>
  {
  }
}
 8001794:	bf00      	nop
 8001796:	bf00      	nop
 8001798:	3710      	adds	r7, #16
 800179a:	46bd      	mov	sp, r7
 800179c:	bd80      	pop	{r7, pc}
 800179e:	bf00      	nop
 80017a0:	2000000c 	.word	0x2000000c

080017a4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80017a4:	b480      	push	{r7}
 80017a6:	b085      	sub	sp, #20
 80017a8:	af00      	add	r7, sp, #0
 80017aa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	f003 0307 	and.w	r3, r3, #7
 80017b2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80017b4:	4b0b      	ldr	r3, [pc, #44]	; (80017e4 <__NVIC_SetPriorityGrouping+0x40>)
 80017b6:	68db      	ldr	r3, [r3, #12]
 80017b8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80017ba:	68ba      	ldr	r2, [r7, #8]
 80017bc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80017c0:	4013      	ands	r3, r2
 80017c2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80017c4:	68fb      	ldr	r3, [r7, #12]
 80017c6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80017c8:	68bb      	ldr	r3, [r7, #8]
 80017ca:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80017cc:	4b06      	ldr	r3, [pc, #24]	; (80017e8 <__NVIC_SetPriorityGrouping+0x44>)
 80017ce:	4313      	orrs	r3, r2
 80017d0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80017d2:	4a04      	ldr	r2, [pc, #16]	; (80017e4 <__NVIC_SetPriorityGrouping+0x40>)
 80017d4:	68bb      	ldr	r3, [r7, #8]
 80017d6:	60d3      	str	r3, [r2, #12]
}
 80017d8:	bf00      	nop
 80017da:	3714      	adds	r7, #20
 80017dc:	46bd      	mov	sp, r7
 80017de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017e2:	4770      	bx	lr
 80017e4:	e000ed00 	.word	0xe000ed00
 80017e8:	05fa0000 	.word	0x05fa0000

080017ec <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80017ec:	b480      	push	{r7}
 80017ee:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80017f0:	4b04      	ldr	r3, [pc, #16]	; (8001804 <__NVIC_GetPriorityGrouping+0x18>)
 80017f2:	68db      	ldr	r3, [r3, #12]
 80017f4:	0a1b      	lsrs	r3, r3, #8
 80017f6:	f003 0307 	and.w	r3, r3, #7
}
 80017fa:	4618      	mov	r0, r3
 80017fc:	46bd      	mov	sp, r7
 80017fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001802:	4770      	bx	lr
 8001804:	e000ed00 	.word	0xe000ed00

08001808 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001808:	b480      	push	{r7}
 800180a:	b083      	sub	sp, #12
 800180c:	af00      	add	r7, sp, #0
 800180e:	4603      	mov	r3, r0
 8001810:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001812:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001816:	2b00      	cmp	r3, #0
 8001818:	db0b      	blt.n	8001832 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800181a:	88fb      	ldrh	r3, [r7, #6]
 800181c:	f003 021f 	and.w	r2, r3, #31
 8001820:	4907      	ldr	r1, [pc, #28]	; (8001840 <__NVIC_EnableIRQ+0x38>)
 8001822:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001826:	095b      	lsrs	r3, r3, #5
 8001828:	2001      	movs	r0, #1
 800182a:	fa00 f202 	lsl.w	r2, r0, r2
 800182e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001832:	bf00      	nop
 8001834:	370c      	adds	r7, #12
 8001836:	46bd      	mov	sp, r7
 8001838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800183c:	4770      	bx	lr
 800183e:	bf00      	nop
 8001840:	e000e100 	.word	0xe000e100

08001844 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001844:	b480      	push	{r7}
 8001846:	b083      	sub	sp, #12
 8001848:	af00      	add	r7, sp, #0
 800184a:	4603      	mov	r3, r0
 800184c:	6039      	str	r1, [r7, #0]
 800184e:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001850:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001854:	2b00      	cmp	r3, #0
 8001856:	db0a      	blt.n	800186e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001858:	683b      	ldr	r3, [r7, #0]
 800185a:	b2da      	uxtb	r2, r3
 800185c:	490c      	ldr	r1, [pc, #48]	; (8001890 <__NVIC_SetPriority+0x4c>)
 800185e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001862:	0112      	lsls	r2, r2, #4
 8001864:	b2d2      	uxtb	r2, r2
 8001866:	440b      	add	r3, r1
 8001868:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800186c:	e00a      	b.n	8001884 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800186e:	683b      	ldr	r3, [r7, #0]
 8001870:	b2da      	uxtb	r2, r3
 8001872:	4908      	ldr	r1, [pc, #32]	; (8001894 <__NVIC_SetPriority+0x50>)
 8001874:	88fb      	ldrh	r3, [r7, #6]
 8001876:	f003 030f 	and.w	r3, r3, #15
 800187a:	3b04      	subs	r3, #4
 800187c:	0112      	lsls	r2, r2, #4
 800187e:	b2d2      	uxtb	r2, r2
 8001880:	440b      	add	r3, r1
 8001882:	761a      	strb	r2, [r3, #24]
}
 8001884:	bf00      	nop
 8001886:	370c      	adds	r7, #12
 8001888:	46bd      	mov	sp, r7
 800188a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800188e:	4770      	bx	lr
 8001890:	e000e100 	.word	0xe000e100
 8001894:	e000ed00 	.word	0xe000ed00

08001898 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001898:	b480      	push	{r7}
 800189a:	b089      	sub	sp, #36	; 0x24
 800189c:	af00      	add	r7, sp, #0
 800189e:	60f8      	str	r0, [r7, #12]
 80018a0:	60b9      	str	r1, [r7, #8]
 80018a2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80018a4:	68fb      	ldr	r3, [r7, #12]
 80018a6:	f003 0307 	and.w	r3, r3, #7
 80018aa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80018ac:	69fb      	ldr	r3, [r7, #28]
 80018ae:	f1c3 0307 	rsb	r3, r3, #7
 80018b2:	2b04      	cmp	r3, #4
 80018b4:	bf28      	it	cs
 80018b6:	2304      	movcs	r3, #4
 80018b8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80018ba:	69fb      	ldr	r3, [r7, #28]
 80018bc:	3304      	adds	r3, #4
 80018be:	2b06      	cmp	r3, #6
 80018c0:	d902      	bls.n	80018c8 <NVIC_EncodePriority+0x30>
 80018c2:	69fb      	ldr	r3, [r7, #28]
 80018c4:	3b03      	subs	r3, #3
 80018c6:	e000      	b.n	80018ca <NVIC_EncodePriority+0x32>
 80018c8:	2300      	movs	r3, #0
 80018ca:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80018cc:	f04f 32ff 	mov.w	r2, #4294967295
 80018d0:	69bb      	ldr	r3, [r7, #24]
 80018d2:	fa02 f303 	lsl.w	r3, r2, r3
 80018d6:	43da      	mvns	r2, r3
 80018d8:	68bb      	ldr	r3, [r7, #8]
 80018da:	401a      	ands	r2, r3
 80018dc:	697b      	ldr	r3, [r7, #20]
 80018de:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80018e0:	f04f 31ff 	mov.w	r1, #4294967295
 80018e4:	697b      	ldr	r3, [r7, #20]
 80018e6:	fa01 f303 	lsl.w	r3, r1, r3
 80018ea:	43d9      	mvns	r1, r3
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80018f0:	4313      	orrs	r3, r2
         );
}
 80018f2:	4618      	mov	r0, r3
 80018f4:	3724      	adds	r7, #36	; 0x24
 80018f6:	46bd      	mov	sp, r7
 80018f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018fc:	4770      	bx	lr

080018fe <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80018fe:	b580      	push	{r7, lr}
 8001900:	b082      	sub	sp, #8
 8001902:	af00      	add	r7, sp, #0
 8001904:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001906:	6878      	ldr	r0, [r7, #4]
 8001908:	f7ff ff4c 	bl	80017a4 <__NVIC_SetPriorityGrouping>
}
 800190c:	bf00      	nop
 800190e:	3708      	adds	r7, #8
 8001910:	46bd      	mov	sp, r7
 8001912:	bd80      	pop	{r7, pc}

08001914 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001914:	b580      	push	{r7, lr}
 8001916:	b086      	sub	sp, #24
 8001918:	af00      	add	r7, sp, #0
 800191a:	4603      	mov	r3, r0
 800191c:	60b9      	str	r1, [r7, #8]
 800191e:	607a      	str	r2, [r7, #4]
 8001920:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001922:	f7ff ff63 	bl	80017ec <__NVIC_GetPriorityGrouping>
 8001926:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001928:	687a      	ldr	r2, [r7, #4]
 800192a:	68b9      	ldr	r1, [r7, #8]
 800192c:	6978      	ldr	r0, [r7, #20]
 800192e:	f7ff ffb3 	bl	8001898 <NVIC_EncodePriority>
 8001932:	4602      	mov	r2, r0
 8001934:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001938:	4611      	mov	r1, r2
 800193a:	4618      	mov	r0, r3
 800193c:	f7ff ff82 	bl	8001844 <__NVIC_SetPriority>
}
 8001940:	bf00      	nop
 8001942:	3718      	adds	r7, #24
 8001944:	46bd      	mov	sp, r7
 8001946:	bd80      	pop	{r7, pc}

08001948 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001948:	b580      	push	{r7, lr}
 800194a:	b082      	sub	sp, #8
 800194c:	af00      	add	r7, sp, #0
 800194e:	4603      	mov	r3, r0
 8001950:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001952:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001956:	4618      	mov	r0, r3
 8001958:	f7ff ff56 	bl	8001808 <__NVIC_EnableIRQ>
}
 800195c:	bf00      	nop
 800195e:	3708      	adds	r7, #8
 8001960:	46bd      	mov	sp, r7
 8001962:	bd80      	pop	{r7, pc}

08001964 <HAL_FDCAN_Init>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
 8001964:	b580      	push	{r7, lr}
 8001966:	b098      	sub	sp, #96	; 0x60
 8001968:	af00      	add	r7, sp, #0
 800196a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  const uint32_t CvtEltSize[] = {0, 0, 0, 0, 0, 1, 2, 3, 4, 0, 5, 0, 0, 0, 6, 0, 0, 0, 7};
 800196c:	4a84      	ldr	r2, [pc, #528]	; (8001b80 <HAL_FDCAN_Init+0x21c>)
 800196e:	f107 030c 	add.w	r3, r7, #12
 8001972:	4611      	mov	r1, r2
 8001974:	224c      	movs	r2, #76	; 0x4c
 8001976:	4618      	mov	r0, r3
 8001978:	f010 fd12 	bl	80123a0 <memcpy>

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	2b00      	cmp	r3, #0
 8001980:	d101      	bne.n	8001986 <HAL_FDCAN_Init+0x22>
  {
    return HAL_ERROR;
 8001982:	2301      	movs	r3, #1
 8001984:	e1ca      	b.n	8001d1c <HAL_FDCAN_Init+0x3b8>
  }

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	4a7e      	ldr	r2, [pc, #504]	; (8001b84 <HAL_FDCAN_Init+0x220>)
 800198c:	4293      	cmp	r3, r2
 800198e:	d106      	bne.n	800199e <HAL_FDCAN_Init+0x3a>
  {
    hfdcan->ttcan = (TTCAN_TypeDef *)((uint32_t)hfdcan->Instance + 0x100U);
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8001998:	461a      	mov	r2, r3
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	605a      	str	r2, [r3, #4]

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 80019a4:	b2db      	uxtb	r3, r3
 80019a6:	2b00      	cmp	r3, #0
 80019a8:	d106      	bne.n	80019b8 <HAL_FDCAN_Init+0x54>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	2200      	movs	r2, #0
 80019ae:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99

    /* Init the low level hardware: CLOCK, NVIC */
    HAL_FDCAN_MspInit(hfdcan);
 80019b2:	6878      	ldr	r0, [r7, #4]
 80019b4:	f7ff fa08 	bl	8000dc8 <HAL_FDCAN_MspInit>
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	699a      	ldr	r2, [r3, #24]
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	f022 0210 	bic.w	r2, r2, #16
 80019c6:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 80019c8:	f7ff febc 	bl	8001744 <HAL_GetTick>
 80019cc:	65f8      	str	r0, [r7, #92]	; 0x5c

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 80019ce:	e014      	b.n	80019fa <HAL_FDCAN_Init+0x96>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 80019d0:	f7ff feb8 	bl	8001744 <HAL_GetTick>
 80019d4:	4602      	mov	r2, r0
 80019d6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80019d8:	1ad3      	subs	r3, r2, r3
 80019da:	2b0a      	cmp	r3, #10
 80019dc:	d90d      	bls.n	80019fa <HAL_FDCAN_Init+0x96>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80019e4:	f043 0201 	orr.w	r2, r3, #1
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	2203      	movs	r2, #3
 80019f2:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

      return HAL_ERROR;
 80019f6:	2301      	movs	r3, #1
 80019f8:	e190      	b.n	8001d1c <HAL_FDCAN_Init+0x3b8>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	699b      	ldr	r3, [r3, #24]
 8001a00:	f003 0308 	and.w	r3, r3, #8
 8001a04:	2b08      	cmp	r3, #8
 8001a06:	d0e3      	beq.n	80019d0 <HAL_FDCAN_Init+0x6c>
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	699a      	ldr	r2, [r3, #24]
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	f042 0201 	orr.w	r2, r2, #1
 8001a16:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001a18:	f7ff fe94 	bl	8001744 <HAL_GetTick>
 8001a1c:	65f8      	str	r0, [r7, #92]	; 0x5c

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8001a1e:	e014      	b.n	8001a4a <HAL_FDCAN_Init+0xe6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8001a20:	f7ff fe90 	bl	8001744 <HAL_GetTick>
 8001a24:	4602      	mov	r2, r0
 8001a26:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001a28:	1ad3      	subs	r3, r2, r3
 8001a2a:	2b0a      	cmp	r3, #10
 8001a2c:	d90d      	bls.n	8001a4a <HAL_FDCAN_Init+0xe6>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8001a34:	f043 0201 	orr.w	r2, r3, #1
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	2203      	movs	r2, #3
 8001a42:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

      return HAL_ERROR;
 8001a46:	2301      	movs	r3, #1
 8001a48:	e168      	b.n	8001d1c <HAL_FDCAN_Init+0x3b8>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	699b      	ldr	r3, [r3, #24]
 8001a50:	f003 0301 	and.w	r3, r3, #1
 8001a54:	2b00      	cmp	r3, #0
 8001a56:	d0e3      	beq.n	8001a20 <HAL_FDCAN_Init+0xbc>
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	699a      	ldr	r2, [r3, #24]
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	f042 0202 	orr.w	r2, r2, #2
 8001a66:	619a      	str	r2, [r3, #24]

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	7c1b      	ldrb	r3, [r3, #16]
 8001a6c:	2b01      	cmp	r3, #1
 8001a6e:	d108      	bne.n	8001a82 <HAL_FDCAN_Init+0x11e>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	699a      	ldr	r2, [r3, #24]
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001a7e:	619a      	str	r2, [r3, #24]
 8001a80:	e007      	b.n	8001a92 <HAL_FDCAN_Init+0x12e>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	699a      	ldr	r2, [r3, #24]
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001a90:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	7c5b      	ldrb	r3, [r3, #17]
 8001a96:	2b01      	cmp	r3, #1
 8001a98:	d108      	bne.n	8001aac <HAL_FDCAN_Init+0x148>
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	699a      	ldr	r2, [r3, #24]
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001aa8:	619a      	str	r2, [r3, #24]
 8001aaa:	e007      	b.n	8001abc <HAL_FDCAN_Init+0x158>
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	699a      	ldr	r2, [r3, #24]
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8001aba:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	7c9b      	ldrb	r3, [r3, #18]
 8001ac0:	2b01      	cmp	r3, #1
 8001ac2:	d108      	bne.n	8001ad6 <HAL_FDCAN_Init+0x172>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	699a      	ldr	r2, [r3, #24]
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8001ad2:	619a      	str	r2, [r3, #24]
 8001ad4:	e007      	b.n	8001ae6 <HAL_FDCAN_Init+0x182>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	699a      	ldr	r2, [r3, #24]
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8001ae4:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	699b      	ldr	r3, [r3, #24]
 8001aec:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	689a      	ldr	r2, [r3, #8]
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	430a      	orrs	r2, r1
 8001afa:	619a      	str	r2, [r3, #24]

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	699a      	ldr	r2, [r3, #24]
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	f022 02a4 	bic.w	r2, r2, #164	; 0xa4
 8001b0a:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	691a      	ldr	r2, [r3, #16]
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	f022 0210 	bic.w	r2, r2, #16
 8001b1a:	611a      	str	r2, [r3, #16]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	68db      	ldr	r3, [r3, #12]
 8001b20:	2b01      	cmp	r3, #1
 8001b22:	d108      	bne.n	8001b36 <HAL_FDCAN_Init+0x1d2>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	699a      	ldr	r2, [r3, #24]
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	f042 0204 	orr.w	r2, r2, #4
 8001b32:	619a      	str	r2, [r3, #24]
 8001b34:	e030      	b.n	8001b98 <HAL_FDCAN_Init+0x234>
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	68db      	ldr	r3, [r3, #12]
 8001b3a:	2b00      	cmp	r3, #0
 8001b3c:	d02c      	beq.n	8001b98 <HAL_FDCAN_Init+0x234>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	68db      	ldr	r3, [r3, #12]
 8001b42:	2b02      	cmp	r3, #2
 8001b44:	d020      	beq.n	8001b88 <HAL_FDCAN_Init+0x224>
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	699a      	ldr	r2, [r3, #24]
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001b54:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	691a      	ldr	r2, [r3, #16]
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	f042 0210 	orr.w	r2, r2, #16
 8001b64:	611a      	str	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	68db      	ldr	r3, [r3, #12]
 8001b6a:	2b03      	cmp	r3, #3
 8001b6c:	d114      	bne.n	8001b98 <HAL_FDCAN_Init+0x234>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	699a      	ldr	r2, [r3, #24]
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	f042 0220 	orr.w	r2, r2, #32
 8001b7c:	619a      	str	r2, [r3, #24]
 8001b7e:	e00b      	b.n	8001b98 <HAL_FDCAN_Init+0x234>
 8001b80:	080123f0 	.word	0x080123f0
 8001b84:	4000a000 	.word	0x4000a000
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	699a      	ldr	r2, [r3, #24]
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	f042 0220 	orr.w	r2, r2, #32
 8001b96:	619a      	str	r2, [r3, #24]
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	699b      	ldr	r3, [r3, #24]
 8001b9c:	3b01      	subs	r3, #1
 8001b9e:	065a      	lsls	r2, r3, #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	69db      	ldr	r3, [r3, #28]
 8001ba4:	3b01      	subs	r3, #1
 8001ba6:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8001ba8:	431a      	orrs	r2, r3
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	6a1b      	ldr	r3, [r3, #32]
 8001bae:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8001bb0:	ea42 0103 	orr.w	r1, r2, r3
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	695b      	ldr	r3, [r3, #20]
 8001bb8:	3b01      	subs	r3, #1
 8001bba:	041a      	lsls	r2, r3, #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	681b      	ldr	r3, [r3, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8001bc0:	430a      	orrs	r2, r1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8001bc2:	61da      	str	r2, [r3, #28]

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	689b      	ldr	r3, [r3, #8]
 8001bc8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8001bcc:	d115      	bne.n	8001bfa <HAL_FDCAN_Init+0x296>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001bd2:	1e5a      	subs	r2, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)    | \
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001bd8:	3b01      	subs	r3, #1
 8001bda:	021b      	lsls	r3, r3, #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 8001bdc:	431a      	orrs	r2, r3
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)    | \
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001be2:	3b01      	subs	r3, #1
 8001be4:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)    | \
 8001be6:	ea42 0103 	orr.w	r1, r2, r3
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bee:	3b01      	subs	r3, #1
 8001bf0:	041a      	lsls	r2, r3, #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	681b      	ldr	r3, [r3, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)    | \
 8001bf6:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 8001bf8:	60da      	str	r2, [r3, #12]
  }

  if (hfdcan->Init.TxFifoQueueElmtsNbr > 0U)
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001bfe:	2b00      	cmp	r3, #0
 8001c00:	d00a      	beq.n	8001c18 <HAL_FDCAN_Init+0x2b4>
  {
    /* Select between Tx FIFO and Tx Queue operation modes */
    SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	f8d3 10c0 	ldr.w	r1, [r3, #192]	; 0xc0
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	430a      	orrs	r2, r1
 8001c14:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
  }

  /* Configure Tx element size */
  if ((hfdcan->Init.TxBuffersNbr + hfdcan->Init.TxFifoQueueElmtsNbr) > 0U)
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001c20:	4413      	add	r3, r2
 8001c22:	2b00      	cmp	r3, #0
 8001c24:	d012      	beq.n	8001c4c <HAL_FDCAN_Init+0x2e8>
  {
    MODIFY_REG(hfdcan->Instance->TXESC, FDCAN_TXESC_TBDS, CvtEltSize[hfdcan->Init.TxElmtSize]);
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 8001c2e:	f023 0107 	bic.w	r1, r3, #7
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8001c36:	009b      	lsls	r3, r3, #2
 8001c38:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8001c3c:	4413      	add	r3, r2
 8001c3e:	f853 2c54 	ldr.w	r2, [r3, #-84]
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	430a      	orrs	r2, r1
 8001c48:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  /* Configure Rx FIFO 0 element size */
  if (hfdcan->Init.RxFifo0ElmtsNbr > 0U)
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c50:	2b00      	cmp	r3, #0
 8001c52:	d012      	beq.n	8001c7a <HAL_FDCAN_Init+0x316>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_F0DS, (CvtEltSize[hfdcan->Init.RxFifo0ElmtSize] << FDCAN_RXESC_F0DS_Pos));
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8001c5c:	f023 0107 	bic.w	r1, r3, #7
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c64:	009b      	lsls	r3, r3, #2
 8001c66:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8001c6a:	4413      	add	r3, r2
 8001c6c:	f853 2c54 	ldr.w	r2, [r3, #-84]
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	430a      	orrs	r2, r1
 8001c76:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  }

  /* Configure Rx FIFO 1 element size */
  if (hfdcan->Init.RxFifo1ElmtsNbr > 0U)
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001c7e:	2b00      	cmp	r3, #0
 8001c80:	d013      	beq.n	8001caa <HAL_FDCAN_Init+0x346>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_F1DS, (CvtEltSize[hfdcan->Init.RxFifo1ElmtSize] << FDCAN_RXESC_F1DS_Pos));
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8001c8a:	f023 0170 	bic.w	r1, r3, #112	; 0x70
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c92:	009b      	lsls	r3, r3, #2
 8001c94:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8001c98:	4413      	add	r3, r2
 8001c9a:	f853 3c54 	ldr.w	r3, [r3, #-84]
 8001c9e:	011a      	lsls	r2, r3, #4
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	430a      	orrs	r2, r1
 8001ca6:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  }

  /* Configure Rx buffer element size */
  if (hfdcan->Init.RxBuffersNbr > 0U)
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001cae:	2b00      	cmp	r3, #0
 8001cb0:	d013      	beq.n	8001cda <HAL_FDCAN_Init+0x376>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_RBDS, (CvtEltSize[hfdcan->Init.RxBufferSize] << FDCAN_RXESC_RBDS_Pos));
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8001cba:	f423 61e0 	bic.w	r1, r3, #1792	; 0x700
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001cc2:	009b      	lsls	r3, r3, #2
 8001cc4:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8001cc8:	4413      	add	r3, r2
 8001cca:	f853 3c54 	ldr.w	r3, [r3, #-84]
 8001cce:	021a      	lsls	r2, r3, #8
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	430a      	orrs	r2, r1
 8001cd6:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  }

  /* By default operation mode is set to Event-driven communication.
     If Time-triggered communication is needed, user should call the
     HAL_FDCAN_TT_ConfigOperation function just after the HAL_FDCAN_Init */
  if (hfdcan->Instance == FDCAN1)
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	4a11      	ldr	r2, [pc, #68]	; (8001d24 <HAL_FDCAN_Init+0x3c0>)
 8001ce0:	4293      	cmp	r3, r2
 8001ce2:	d107      	bne.n	8001cf4 <HAL_FDCAN_Init+0x390>
  {
    CLEAR_BIT(hfdcan->ttcan->TTOCF, FDCAN_TTOCF_OM);
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	685b      	ldr	r3, [r3, #4]
 8001ce8:	689a      	ldr	r2, [r3, #8]
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	685b      	ldr	r3, [r3, #4]
 8001cee:	f022 0203 	bic.w	r2, r2, #3
 8001cf2:	609a      	str	r2, [r3, #8]
  }

  /* Initialize the Latest Tx FIFO/Queue request buffer index */
  hfdcan->LatestTxFifoQRequest = 0U;
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	2200      	movs	r2, #0
 8001cf8:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

  /* Initialize the error code */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	2200      	movs	r2, #0
 8001d00:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	2201      	movs	r2, #1
 8001d08:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

  /* Calculate each RAM block address */
  status = FDCAN_CalcultateRamBlockAddresses(hfdcan);
 8001d0c:	6878      	ldr	r0, [r7, #4]
 8001d0e:	f000 f80b 	bl	8001d28 <FDCAN_CalcultateRamBlockAddresses>
 8001d12:	4603      	mov	r3, r0
 8001d14:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b

  /* Return function status */
  return status;
 8001d18:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
}
 8001d1c:	4618      	mov	r0, r3
 8001d1e:	3760      	adds	r7, #96	; 0x60
 8001d20:	46bd      	mov	sp, r7
 8001d22:	bd80      	pop	{r7, pc}
 8001d24:	4000a000 	.word	0x4000a000

08001d28 <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
 */
static HAL_StatusTypeDef FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 8001d28:	b480      	push	{r7}
 8001d2a:	b085      	sub	sp, #20
 8001d2c:	af00      	add	r7, sp, #0
 8001d2e:	6078      	str	r0, [r7, #4]
  uint32_t RAMcounter;
  uint32_t StartAddress;

  StartAddress = hfdcan->Init.MessageRAMOffset;
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001d34:	60bb      	str	r3, [r7, #8]

  /* Standard filter list start address */
  MODIFY_REG(hfdcan->Instance->SIDFC, FDCAN_SIDFC_FLSSA, (StartAddress << FDCAN_SIDFC_FLSSA_Pos));
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 8001d3e:	4ba7      	ldr	r3, [pc, #668]	; (8001fdc <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8001d40:	4013      	ands	r3, r2
 8001d42:	68ba      	ldr	r2, [r7, #8]
 8001d44:	0091      	lsls	r1, r2, #2
 8001d46:	687a      	ldr	r2, [r7, #4]
 8001d48:	6812      	ldr	r2, [r2, #0]
 8001d4a:	430b      	orrs	r3, r1
 8001d4c:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->SIDFC, FDCAN_SIDFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_SIDFC_LSS_Pos));
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001d58:	f423 017f 	bic.w	r1, r3, #16711680	; 0xff0000
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001d60:	041a      	lsls	r2, r3, #16
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	430a      	orrs	r2, r1
 8001d68:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Extended filter list start address */
  StartAddress += hfdcan->Init.StdFiltersNbr;
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001d70:	68ba      	ldr	r2, [r7, #8]
 8001d72:	4413      	add	r3, r2
 8001d74:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->XIDFC, FDCAN_XIDFC_FLESA, (StartAddress << FDCAN_XIDFC_FLESA_Pos));
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8001d7e:	4b97      	ldr	r3, [pc, #604]	; (8001fdc <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8001d80:	4013      	ands	r3, r2
 8001d82:	68ba      	ldr	r2, [r7, #8]
 8001d84:	0091      	lsls	r1, r2, #2
 8001d86:	687a      	ldr	r2, [r7, #4]
 8001d88:	6812      	ldr	r2, [r2, #0]
 8001d8a:	430b      	orrs	r3, r1
 8001d8c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->XIDFC, FDCAN_XIDFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_XIDFC_LSE_Pos));
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001d98:	f423 01fe 	bic.w	r1, r3, #8323072	; 0x7f0000
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001da0:	041a      	lsls	r2, r3, #16
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	430a      	orrs	r2, r1
 8001da8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Rx FIFO 0 start address */
  StartAddress += (hfdcan->Init.ExtFiltersNbr * 2U);
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001db0:	005b      	lsls	r3, r3, #1
 8001db2:	68ba      	ldr	r2, [r7, #8]
 8001db4:	4413      	add	r3, r2
 8001db6:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXF0C, FDCAN_RXF0C_F0SA, (StartAddress << FDCAN_RXF0C_F0SA_Pos));
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 8001dc0:	4b86      	ldr	r3, [pc, #536]	; (8001fdc <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8001dc2:	4013      	ands	r3, r2
 8001dc4:	68ba      	ldr	r2, [r7, #8]
 8001dc6:	0091      	lsls	r1, r2, #2
 8001dc8:	687a      	ldr	r2, [r7, #4]
 8001dca:	6812      	ldr	r2, [r2, #0]
 8001dcc:	430b      	orrs	r3, r1
 8001dce:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0

  /* Rx FIFO 0 elements number */
  MODIFY_REG(hfdcan->Instance->RXF0C, FDCAN_RXF0C_F0S, (hfdcan->Init.RxFifo0ElmtsNbr << FDCAN_RXF0C_F0S_Pos));
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8001dda:	f423 01fe 	bic.w	r1, r3, #8323072	; 0x7f0000
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001de2:	041a      	lsls	r2, r3, #16
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	430a      	orrs	r2, r1
 8001dea:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0

  /* Rx FIFO 1 start address */
  StartAddress += (hfdcan->Init.RxFifo0ElmtsNbr * hfdcan->Init.RxFifo0ElmtSize);
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001df2:	687a      	ldr	r2, [r7, #4]
 8001df4:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8001df6:	fb02 f303 	mul.w	r3, r2, r3
 8001dfa:	68ba      	ldr	r2, [r7, #8]
 8001dfc:	4413      	add	r3, r2
 8001dfe:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXF1C, FDCAN_RXF1C_F1SA, (StartAddress << FDCAN_RXF1C_F1SA_Pos));
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8001e08:	4b74      	ldr	r3, [pc, #464]	; (8001fdc <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8001e0a:	4013      	ands	r3, r2
 8001e0c:	68ba      	ldr	r2, [r7, #8]
 8001e0e:	0091      	lsls	r1, r2, #2
 8001e10:	687a      	ldr	r2, [r7, #4]
 8001e12:	6812      	ldr	r2, [r2, #0]
 8001e14:	430b      	orrs	r3, r1
 8001e16:	f8c2 30b0 	str.w	r3, [r2, #176]	; 0xb0

  /* Rx FIFO 1 elements number */
  MODIFY_REG(hfdcan->Instance->RXF1C, FDCAN_RXF1C_F1S, (hfdcan->Init.RxFifo1ElmtsNbr << FDCAN_RXF1C_F1S_Pos));
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8001e22:	f423 01fe 	bic.w	r1, r3, #8323072	; 0x7f0000
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001e2a:	041a      	lsls	r2, r3, #16
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	430a      	orrs	r2, r1
 8001e32:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0

  /* Rx buffer list start address */
  StartAddress += (hfdcan->Init.RxFifo1ElmtsNbr * hfdcan->Init.RxFifo1ElmtSize);
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001e3a:	687a      	ldr	r2, [r7, #4]
 8001e3c:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8001e3e:	fb02 f303 	mul.w	r3, r2, r3
 8001e42:	68ba      	ldr	r2, [r7, #8]
 8001e44:	4413      	add	r3, r2
 8001e46:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXBC, FDCAN_RXBC_RBSA, (StartAddress << FDCAN_RXBC_RBSA_Pos));
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	f8d3 20ac 	ldr.w	r2, [r3, #172]	; 0xac
 8001e50:	4b62      	ldr	r3, [pc, #392]	; (8001fdc <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8001e52:	4013      	ands	r3, r2
 8001e54:	68ba      	ldr	r2, [r7, #8]
 8001e56:	0091      	lsls	r1, r2, #2
 8001e58:	687a      	ldr	r2, [r7, #4]
 8001e5a:	6812      	ldr	r2, [r2, #0]
 8001e5c:	430b      	orrs	r3, r1
 8001e5e:	f8c2 30ac 	str.w	r3, [r2, #172]	; 0xac

  /* Tx event FIFO start address */
  StartAddress += (hfdcan->Init.RxBuffersNbr * hfdcan->Init.RxBufferSize);
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001e66:	687a      	ldr	r2, [r7, #4]
 8001e68:	6d52      	ldr	r2, [r2, #84]	; 0x54
 8001e6a:	fb02 f303 	mul.w	r3, r2, r3
 8001e6e:	68ba      	ldr	r2, [r7, #8]
 8001e70:	4413      	add	r3, r2
 8001e72:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->TXEFC, FDCAN_TXEFC_EFSA, (StartAddress << FDCAN_TXEFC_EFSA_Pos));
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	f8d3 20f0 	ldr.w	r2, [r3, #240]	; 0xf0
 8001e7c:	4b57      	ldr	r3, [pc, #348]	; (8001fdc <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8001e7e:	4013      	ands	r3, r2
 8001e80:	68ba      	ldr	r2, [r7, #8]
 8001e82:	0091      	lsls	r1, r2, #2
 8001e84:	687a      	ldr	r2, [r7, #4]
 8001e86:	6812      	ldr	r2, [r2, #0]
 8001e88:	430b      	orrs	r3, r1
 8001e8a:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

  /* Tx event FIFO elements number */
  MODIFY_REG(hfdcan->Instance->TXEFC, FDCAN_TXEFC_EFS, (hfdcan->Init.TxEventsNbr << FDCAN_TXEFC_EFS_Pos));
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001e96:	f423 117c 	bic.w	r1, r3, #4128768	; 0x3f0000
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e9e:	041a      	lsls	r2, r3, #16
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	430a      	orrs	r2, r1
 8001ea6:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0

  /* Tx buffer list start address */
  StartAddress += (hfdcan->Init.TxEventsNbr * 2U);
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001eae:	005b      	lsls	r3, r3, #1
 8001eb0:	68ba      	ldr	r2, [r7, #8]
 8001eb2:	4413      	add	r3, r2
 8001eb4:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_TBSA, (StartAddress << FDCAN_TXBC_TBSA_Pos));
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 8001ebe:	4b47      	ldr	r3, [pc, #284]	; (8001fdc <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8001ec0:	4013      	ands	r3, r2
 8001ec2:	68ba      	ldr	r2, [r7, #8]
 8001ec4:	0091      	lsls	r1, r2, #2
 8001ec6:	687a      	ldr	r2, [r7, #4]
 8001ec8:	6812      	ldr	r2, [r2, #0]
 8001eca:	430b      	orrs	r3, r1
 8001ecc:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0

  /* Dedicated Tx buffers number */
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_NDTB, (hfdcan->Init.TxBuffersNbr << FDCAN_TXBC_NDTB_Pos));
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8001ed8:	f423 117c 	bic.w	r1, r3, #4128768	; 0x3f0000
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001ee0:	041a      	lsls	r2, r3, #16
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	430a      	orrs	r2, r1
 8001ee8:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0

  /* Tx FIFO/queue elements number */
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_TFQS, (hfdcan->Init.TxFifoQueueElmtsNbr << FDCAN_TXBC_TFQS_Pos));
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8001ef4:	f023 517c 	bic.w	r1, r3, #1056964608	; 0x3f000000
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001efc:	061a      	lsls	r2, r3, #24
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	430a      	orrs	r2, r1
 8001f04:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0

  hfdcan->msgRam.StandardFilterSA = SRAMCAN_BASE + (hfdcan->Init.MessageRAMOffset * 4U);
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001f0c:	4b34      	ldr	r3, [pc, #208]	; (8001fe0 <FDCAN_CalcultateRamBlockAddresses+0x2b8>)
 8001f0e:	4413      	add	r3, r2
 8001f10:	009a      	lsls	r2, r3, #2
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	66da      	str	r2, [r3, #108]	; 0x6c
  hfdcan->msgRam.ExtendedFilterSA = hfdcan->msgRam.StandardFilterSA + (hfdcan->Init.StdFiltersNbr * 4U);
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001f1e:	009b      	lsls	r3, r3, #2
 8001f20:	441a      	add	r2, r3
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	671a      	str	r2, [r3, #112]	; 0x70
  hfdcan->msgRam.RxFIFO0SA = hfdcan->msgRam.ExtendedFilterSA + (hfdcan->Init.ExtFiltersNbr * 2U * 4U);
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001f2e:	00db      	lsls	r3, r3, #3
 8001f30:	441a      	add	r2, r3
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	675a      	str	r2, [r3, #116]	; 0x74
  hfdcan->msgRam.RxFIFO1SA = hfdcan->msgRam.RxFIFO0SA + (hfdcan->Init.RxFifo0ElmtsNbr * hfdcan->Init.RxFifo0ElmtSize * 4U);
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f3e:	6879      	ldr	r1, [r7, #4]
 8001f40:	6c49      	ldr	r1, [r1, #68]	; 0x44
 8001f42:	fb01 f303 	mul.w	r3, r1, r3
 8001f46:	009b      	lsls	r3, r3, #2
 8001f48:	441a      	add	r2, r3
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	679a      	str	r2, [r3, #120]	; 0x78
  hfdcan->msgRam.RxBufferSA = hfdcan->msgRam.RxFIFO1SA + (hfdcan->Init.RxFifo1ElmtsNbr * hfdcan->Init.RxFifo1ElmtSize * 4U);
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	6f9a      	ldr	r2, [r3, #120]	; 0x78
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001f56:	6879      	ldr	r1, [r7, #4]
 8001f58:	6cc9      	ldr	r1, [r1, #76]	; 0x4c
 8001f5a:	fb01 f303 	mul.w	r3, r1, r3
 8001f5e:	009b      	lsls	r3, r3, #2
 8001f60:	441a      	add	r2, r3
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	67da      	str	r2, [r3, #124]	; 0x7c
  hfdcan->msgRam.TxEventFIFOSA = hfdcan->msgRam.RxBufferSA + (hfdcan->Init.RxBuffersNbr * hfdcan->Init.RxBufferSize * 4U);
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001f6e:	6879      	ldr	r1, [r7, #4]
 8001f70:	6d49      	ldr	r1, [r1, #84]	; 0x54
 8001f72:	fb01 f303 	mul.w	r3, r1, r3
 8001f76:	009b      	lsls	r3, r3, #2
 8001f78:	441a      	add	r2, r3
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  hfdcan->msgRam.TxBufferSA = hfdcan->msgRam.TxEventFIFOSA + (hfdcan->Init.TxEventsNbr * 2U * 4U);
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f8a:	00db      	lsls	r3, r3, #3
 8001f8c:	441a      	add	r2, r3
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hfdcan->msgRam.TxFIFOQSA = hfdcan->msgRam.TxBufferSA + (hfdcan->Init.TxBuffersNbr * hfdcan->Init.TxElmtSize * 4U);
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f9e:	6879      	ldr	r1, [r7, #4]
 8001fa0:	6e89      	ldr	r1, [r1, #104]	; 0x68
 8001fa2:	fb01 f303 	mul.w	r3, r1, r3
 8001fa6:	009b      	lsls	r3, r3, #2
 8001fa8:	441a      	add	r2, r3
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  hfdcan->msgRam.EndAddress = hfdcan->msgRam.TxFIFOQSA + (hfdcan->Init.TxFifoQueueElmtsNbr * hfdcan->Init.TxElmtSize * 4U);
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001fba:	6879      	ldr	r1, [r7, #4]
 8001fbc:	6e89      	ldr	r1, [r1, #104]	; 0x68
 8001fbe:	fb01 f303 	mul.w	r3, r1, r3
 8001fc2:	009b      	lsls	r3, r3, #2
 8001fc4:	441a      	add	r2, r3
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  if (hfdcan->msgRam.EndAddress > FDCAN_MESSAGE_RAM_END_ADDRESS) /* Last address of the Message RAM */
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001fd2:	4a04      	ldr	r2, [pc, #16]	; (8001fe4 <FDCAN_CalcultateRamBlockAddresses+0x2bc>)
 8001fd4:	4293      	cmp	r3, r2
 8001fd6:	d915      	bls.n	8002004 <FDCAN_CalcultateRamBlockAddresses+0x2dc>
 8001fd8:	e006      	b.n	8001fe8 <FDCAN_CalcultateRamBlockAddresses+0x2c0>
 8001fda:	bf00      	nop
 8001fdc:	ffff0003 	.word	0xffff0003
 8001fe0:	10002b00 	.word	0x10002b00
 8001fe4:	4000d3fc 	.word	0x4000d3fc
  {
    /* Update error code.
       Message RAM overflow */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8001fee:	f043 0220 	orr.w	r2, r3, #32
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    /* Change FDCAN state */
    hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	2203      	movs	r2, #3
 8001ffc:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

    return HAL_ERROR;
 8002000:	2301      	movs	r3, #1
 8002002:	e010      	b.n	8002026 <FDCAN_CalcultateRamBlockAddresses+0x2fe>
  }
  else
  {
    /* Flush the allocated Message RAM area */
    for (RAMcounter = hfdcan->msgRam.StandardFilterSA; RAMcounter < hfdcan->msgRam.EndAddress; RAMcounter += 4U)
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002008:	60fb      	str	r3, [r7, #12]
 800200a:	e005      	b.n	8002018 <FDCAN_CalcultateRamBlockAddresses+0x2f0>
    {
      *(uint32_t *)(RAMcounter) = 0x00000000;
 800200c:	68fb      	ldr	r3, [r7, #12]
 800200e:	2200      	movs	r2, #0
 8002010:	601a      	str	r2, [r3, #0]
    for (RAMcounter = hfdcan->msgRam.StandardFilterSA; RAMcounter < hfdcan->msgRam.EndAddress; RAMcounter += 4U)
 8002012:	68fb      	ldr	r3, [r7, #12]
 8002014:	3304      	adds	r3, #4
 8002016:	60fb      	str	r3, [r7, #12]
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800201e:	68fa      	ldr	r2, [r7, #12]
 8002020:	429a      	cmp	r2, r3
 8002022:	d3f3      	bcc.n	800200c <FDCAN_CalcultateRamBlockAddresses+0x2e4>
    }
  }

  /* Return function status */
  return HAL_OK;
 8002024:	2300      	movs	r3, #0
}
 8002026:	4618      	mov	r0, r3
 8002028:	3714      	adds	r7, #20
 800202a:	46bd      	mov	sp, r7
 800202c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002030:	4770      	bx	lr
 8002032:	bf00      	nop

08002034 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002034:	b480      	push	{r7}
 8002036:	b089      	sub	sp, #36	; 0x24
 8002038:	af00      	add	r7, sp, #0
 800203a:	6078      	str	r0, [r7, #4]
 800203c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800203e:	2300      	movs	r3, #0
 8002040:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8002042:	4b86      	ldr	r3, [pc, #536]	; (800225c <HAL_GPIO_Init+0x228>)
 8002044:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8002046:	e18c      	b.n	8002362 <HAL_GPIO_Init+0x32e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8002048:	683b      	ldr	r3, [r7, #0]
 800204a:	681a      	ldr	r2, [r3, #0]
 800204c:	2101      	movs	r1, #1
 800204e:	69fb      	ldr	r3, [r7, #28]
 8002050:	fa01 f303 	lsl.w	r3, r1, r3
 8002054:	4013      	ands	r3, r2
 8002056:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8002058:	693b      	ldr	r3, [r7, #16]
 800205a:	2b00      	cmp	r3, #0
 800205c:	f000 817e 	beq.w	800235c <HAL_GPIO_Init+0x328>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002060:	683b      	ldr	r3, [r7, #0]
 8002062:	685b      	ldr	r3, [r3, #4]
 8002064:	2b01      	cmp	r3, #1
 8002066:	d00b      	beq.n	8002080 <HAL_GPIO_Init+0x4c>
 8002068:	683b      	ldr	r3, [r7, #0]
 800206a:	685b      	ldr	r3, [r3, #4]
 800206c:	2b02      	cmp	r3, #2
 800206e:	d007      	beq.n	8002080 <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002070:	683b      	ldr	r3, [r7, #0]
 8002072:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002074:	2b11      	cmp	r3, #17
 8002076:	d003      	beq.n	8002080 <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002078:	683b      	ldr	r3, [r7, #0]
 800207a:	685b      	ldr	r3, [r3, #4]
 800207c:	2b12      	cmp	r3, #18
 800207e:	d130      	bne.n	80020e2 <HAL_GPIO_Init+0xae>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	689b      	ldr	r3, [r3, #8]
 8002084:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8002086:	69fb      	ldr	r3, [r7, #28]
 8002088:	005b      	lsls	r3, r3, #1
 800208a:	2203      	movs	r2, #3
 800208c:	fa02 f303 	lsl.w	r3, r2, r3
 8002090:	43db      	mvns	r3, r3
 8002092:	69ba      	ldr	r2, [r7, #24]
 8002094:	4013      	ands	r3, r2
 8002096:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002098:	683b      	ldr	r3, [r7, #0]
 800209a:	68da      	ldr	r2, [r3, #12]
 800209c:	69fb      	ldr	r3, [r7, #28]
 800209e:	005b      	lsls	r3, r3, #1
 80020a0:	fa02 f303 	lsl.w	r3, r2, r3
 80020a4:	69ba      	ldr	r2, [r7, #24]
 80020a6:	4313      	orrs	r3, r2
 80020a8:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	69ba      	ldr	r2, [r7, #24]
 80020ae:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	685b      	ldr	r3, [r3, #4]
 80020b4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80020b6:	2201      	movs	r2, #1
 80020b8:	69fb      	ldr	r3, [r7, #28]
 80020ba:	fa02 f303 	lsl.w	r3, r2, r3
 80020be:	43db      	mvns	r3, r3
 80020c0:	69ba      	ldr	r2, [r7, #24]
 80020c2:	4013      	ands	r3, r2
 80020c4:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80020c6:	683b      	ldr	r3, [r7, #0]
 80020c8:	685b      	ldr	r3, [r3, #4]
 80020ca:	091b      	lsrs	r3, r3, #4
 80020cc:	f003 0201 	and.w	r2, r3, #1
 80020d0:	69fb      	ldr	r3, [r7, #28]
 80020d2:	fa02 f303 	lsl.w	r3, r2, r3
 80020d6:	69ba      	ldr	r2, [r7, #24]
 80020d8:	4313      	orrs	r3, r2
 80020da:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	69ba      	ldr	r2, [r7, #24]
 80020e0:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	68db      	ldr	r3, [r3, #12]
 80020e6:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80020e8:	69fb      	ldr	r3, [r7, #28]
 80020ea:	005b      	lsls	r3, r3, #1
 80020ec:	2203      	movs	r2, #3
 80020ee:	fa02 f303 	lsl.w	r3, r2, r3
 80020f2:	43db      	mvns	r3, r3
 80020f4:	69ba      	ldr	r2, [r7, #24]
 80020f6:	4013      	ands	r3, r2
 80020f8:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80020fa:	683b      	ldr	r3, [r7, #0]
 80020fc:	689a      	ldr	r2, [r3, #8]
 80020fe:	69fb      	ldr	r3, [r7, #28]
 8002100:	005b      	lsls	r3, r3, #1
 8002102:	fa02 f303 	lsl.w	r3, r2, r3
 8002106:	69ba      	ldr	r2, [r7, #24]
 8002108:	4313      	orrs	r3, r2
 800210a:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	69ba      	ldr	r2, [r7, #24]
 8002110:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002112:	683b      	ldr	r3, [r7, #0]
 8002114:	685b      	ldr	r3, [r3, #4]
 8002116:	2b02      	cmp	r3, #2
 8002118:	d003      	beq.n	8002122 <HAL_GPIO_Init+0xee>
 800211a:	683b      	ldr	r3, [r7, #0]
 800211c:	685b      	ldr	r3, [r3, #4]
 800211e:	2b12      	cmp	r3, #18
 8002120:	d123      	bne.n	800216a <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002122:	69fb      	ldr	r3, [r7, #28]
 8002124:	08da      	lsrs	r2, r3, #3
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	3208      	adds	r2, #8
 800212a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800212e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8002130:	69fb      	ldr	r3, [r7, #28]
 8002132:	f003 0307 	and.w	r3, r3, #7
 8002136:	009b      	lsls	r3, r3, #2
 8002138:	220f      	movs	r2, #15
 800213a:	fa02 f303 	lsl.w	r3, r2, r3
 800213e:	43db      	mvns	r3, r3
 8002140:	69ba      	ldr	r2, [r7, #24]
 8002142:	4013      	ands	r3, r2
 8002144:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8002146:	683b      	ldr	r3, [r7, #0]
 8002148:	691a      	ldr	r2, [r3, #16]
 800214a:	69fb      	ldr	r3, [r7, #28]
 800214c:	f003 0307 	and.w	r3, r3, #7
 8002150:	009b      	lsls	r3, r3, #2
 8002152:	fa02 f303 	lsl.w	r3, r2, r3
 8002156:	69ba      	ldr	r2, [r7, #24]
 8002158:	4313      	orrs	r3, r2
 800215a:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800215c:	69fb      	ldr	r3, [r7, #28]
 800215e:	08da      	lsrs	r2, r3, #3
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	3208      	adds	r2, #8
 8002164:	69b9      	ldr	r1, [r7, #24]
 8002166:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8002170:	69fb      	ldr	r3, [r7, #28]
 8002172:	005b      	lsls	r3, r3, #1
 8002174:	2203      	movs	r2, #3
 8002176:	fa02 f303 	lsl.w	r3, r2, r3
 800217a:	43db      	mvns	r3, r3
 800217c:	69ba      	ldr	r2, [r7, #24]
 800217e:	4013      	ands	r3, r2
 8002180:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002182:	683b      	ldr	r3, [r7, #0]
 8002184:	685b      	ldr	r3, [r3, #4]
 8002186:	f003 0203 	and.w	r2, r3, #3
 800218a:	69fb      	ldr	r3, [r7, #28]
 800218c:	005b      	lsls	r3, r3, #1
 800218e:	fa02 f303 	lsl.w	r3, r2, r3
 8002192:	69ba      	ldr	r2, [r7, #24]
 8002194:	4313      	orrs	r3, r2
 8002196:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	69ba      	ldr	r2, [r7, #24]
 800219c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800219e:	683b      	ldr	r3, [r7, #0]
 80021a0:	685b      	ldr	r3, [r3, #4]
 80021a2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80021a6:	2b00      	cmp	r3, #0
 80021a8:	f000 80d8 	beq.w	800235c <HAL_GPIO_Init+0x328>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80021ac:	4b2c      	ldr	r3, [pc, #176]	; (8002260 <HAL_GPIO_Init+0x22c>)
 80021ae:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80021b2:	4a2b      	ldr	r2, [pc, #172]	; (8002260 <HAL_GPIO_Init+0x22c>)
 80021b4:	f043 0302 	orr.w	r3, r3, #2
 80021b8:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 80021bc:	4b28      	ldr	r3, [pc, #160]	; (8002260 <HAL_GPIO_Init+0x22c>)
 80021be:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80021c2:	f003 0302 	and.w	r3, r3, #2
 80021c6:	60fb      	str	r3, [r7, #12]
 80021c8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80021ca:	4a26      	ldr	r2, [pc, #152]	; (8002264 <HAL_GPIO_Init+0x230>)
 80021cc:	69fb      	ldr	r3, [r7, #28]
 80021ce:	089b      	lsrs	r3, r3, #2
 80021d0:	3302      	adds	r3, #2
 80021d2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80021d6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80021d8:	69fb      	ldr	r3, [r7, #28]
 80021da:	f003 0303 	and.w	r3, r3, #3
 80021de:	009b      	lsls	r3, r3, #2
 80021e0:	220f      	movs	r2, #15
 80021e2:	fa02 f303 	lsl.w	r3, r2, r3
 80021e6:	43db      	mvns	r3, r3
 80021e8:	69ba      	ldr	r2, [r7, #24]
 80021ea:	4013      	ands	r3, r2
 80021ec:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	4a1d      	ldr	r2, [pc, #116]	; (8002268 <HAL_GPIO_Init+0x234>)
 80021f2:	4293      	cmp	r3, r2
 80021f4:	d04a      	beq.n	800228c <HAL_GPIO_Init+0x258>
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	4a1c      	ldr	r2, [pc, #112]	; (800226c <HAL_GPIO_Init+0x238>)
 80021fa:	4293      	cmp	r3, r2
 80021fc:	d02b      	beq.n	8002256 <HAL_GPIO_Init+0x222>
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	4a1b      	ldr	r2, [pc, #108]	; (8002270 <HAL_GPIO_Init+0x23c>)
 8002202:	4293      	cmp	r3, r2
 8002204:	d025      	beq.n	8002252 <HAL_GPIO_Init+0x21e>
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	4a1a      	ldr	r2, [pc, #104]	; (8002274 <HAL_GPIO_Init+0x240>)
 800220a:	4293      	cmp	r3, r2
 800220c:	d01f      	beq.n	800224e <HAL_GPIO_Init+0x21a>
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	4a19      	ldr	r2, [pc, #100]	; (8002278 <HAL_GPIO_Init+0x244>)
 8002212:	4293      	cmp	r3, r2
 8002214:	d019      	beq.n	800224a <HAL_GPIO_Init+0x216>
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	4a18      	ldr	r2, [pc, #96]	; (800227c <HAL_GPIO_Init+0x248>)
 800221a:	4293      	cmp	r3, r2
 800221c:	d013      	beq.n	8002246 <HAL_GPIO_Init+0x212>
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	4a17      	ldr	r2, [pc, #92]	; (8002280 <HAL_GPIO_Init+0x24c>)
 8002222:	4293      	cmp	r3, r2
 8002224:	d00d      	beq.n	8002242 <HAL_GPIO_Init+0x20e>
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	4a16      	ldr	r2, [pc, #88]	; (8002284 <HAL_GPIO_Init+0x250>)
 800222a:	4293      	cmp	r3, r2
 800222c:	d007      	beq.n	800223e <HAL_GPIO_Init+0x20a>
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	4a15      	ldr	r2, [pc, #84]	; (8002288 <HAL_GPIO_Init+0x254>)
 8002232:	4293      	cmp	r3, r2
 8002234:	d101      	bne.n	800223a <HAL_GPIO_Init+0x206>
 8002236:	2309      	movs	r3, #9
 8002238:	e029      	b.n	800228e <HAL_GPIO_Init+0x25a>
 800223a:	230a      	movs	r3, #10
 800223c:	e027      	b.n	800228e <HAL_GPIO_Init+0x25a>
 800223e:	2307      	movs	r3, #7
 8002240:	e025      	b.n	800228e <HAL_GPIO_Init+0x25a>
 8002242:	2306      	movs	r3, #6
 8002244:	e023      	b.n	800228e <HAL_GPIO_Init+0x25a>
 8002246:	2305      	movs	r3, #5
 8002248:	e021      	b.n	800228e <HAL_GPIO_Init+0x25a>
 800224a:	2304      	movs	r3, #4
 800224c:	e01f      	b.n	800228e <HAL_GPIO_Init+0x25a>
 800224e:	2303      	movs	r3, #3
 8002250:	e01d      	b.n	800228e <HAL_GPIO_Init+0x25a>
 8002252:	2302      	movs	r3, #2
 8002254:	e01b      	b.n	800228e <HAL_GPIO_Init+0x25a>
 8002256:	2301      	movs	r3, #1
 8002258:	e019      	b.n	800228e <HAL_GPIO_Init+0x25a>
 800225a:	bf00      	nop
 800225c:	58000080 	.word	0x58000080
 8002260:	58024400 	.word	0x58024400
 8002264:	58000400 	.word	0x58000400
 8002268:	58020000 	.word	0x58020000
 800226c:	58020400 	.word	0x58020400
 8002270:	58020800 	.word	0x58020800
 8002274:	58020c00 	.word	0x58020c00
 8002278:	58021000 	.word	0x58021000
 800227c:	58021400 	.word	0x58021400
 8002280:	58021800 	.word	0x58021800
 8002284:	58021c00 	.word	0x58021c00
 8002288:	58022400 	.word	0x58022400
 800228c:	2300      	movs	r3, #0
 800228e:	69fa      	ldr	r2, [r7, #28]
 8002290:	f002 0203 	and.w	r2, r2, #3
 8002294:	0092      	lsls	r2, r2, #2
 8002296:	4093      	lsls	r3, r2
 8002298:	69ba      	ldr	r2, [r7, #24]
 800229a:	4313      	orrs	r3, r2
 800229c:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800229e:	4938      	ldr	r1, [pc, #224]	; (8002380 <HAL_GPIO_Init+0x34c>)
 80022a0:	69fb      	ldr	r3, [r7, #28]
 80022a2:	089b      	lsrs	r3, r3, #2
 80022a4:	3302      	adds	r3, #2
 80022a6:	69ba      	ldr	r2, [r7, #24]
 80022a8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 80022ac:	697b      	ldr	r3, [r7, #20]
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80022b2:	693b      	ldr	r3, [r7, #16]
 80022b4:	43db      	mvns	r3, r3
 80022b6:	69ba      	ldr	r2, [r7, #24]
 80022b8:	4013      	ands	r3, r2
 80022ba:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80022bc:	683b      	ldr	r3, [r7, #0]
 80022be:	685b      	ldr	r3, [r3, #4]
 80022c0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80022c4:	2b00      	cmp	r3, #0
 80022c6:	d003      	beq.n	80022d0 <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 80022c8:	69ba      	ldr	r2, [r7, #24]
 80022ca:	693b      	ldr	r3, [r7, #16]
 80022cc:	4313      	orrs	r3, r2
 80022ce:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 80022d0:	697b      	ldr	r3, [r7, #20]
 80022d2:	69ba      	ldr	r2, [r7, #24]
 80022d4:	601a      	str	r2, [r3, #0]

        temp = EXTI_CurrentCPU->EMR1;
 80022d6:	697b      	ldr	r3, [r7, #20]
 80022d8:	685b      	ldr	r3, [r3, #4]
 80022da:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80022dc:	693b      	ldr	r3, [r7, #16]
 80022de:	43db      	mvns	r3, r3
 80022e0:	69ba      	ldr	r2, [r7, #24]
 80022e2:	4013      	ands	r3, r2
 80022e4:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80022e6:	683b      	ldr	r3, [r7, #0]
 80022e8:	685b      	ldr	r3, [r3, #4]
 80022ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80022ee:	2b00      	cmp	r3, #0
 80022f0:	d003      	beq.n	80022fa <HAL_GPIO_Init+0x2c6>
        {
          temp |= iocurrent;
 80022f2:	69ba      	ldr	r2, [r7, #24]
 80022f4:	693b      	ldr	r3, [r7, #16]
 80022f6:	4313      	orrs	r3, r2
 80022f8:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 80022fa:	697b      	ldr	r3, [r7, #20]
 80022fc:	69ba      	ldr	r2, [r7, #24]
 80022fe:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002300:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002308:	693b      	ldr	r3, [r7, #16]
 800230a:	43db      	mvns	r3, r3
 800230c:	69ba      	ldr	r2, [r7, #24]
 800230e:	4013      	ands	r3, r2
 8002310:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002312:	683b      	ldr	r3, [r7, #0]
 8002314:	685b      	ldr	r3, [r3, #4]
 8002316:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800231a:	2b00      	cmp	r3, #0
 800231c:	d003      	beq.n	8002326 <HAL_GPIO_Init+0x2f2>
        {
          temp |= iocurrent;
 800231e:	69ba      	ldr	r2, [r7, #24]
 8002320:	693b      	ldr	r3, [r7, #16]
 8002322:	4313      	orrs	r3, r2
 8002324:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8002326:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800232a:	69bb      	ldr	r3, [r7, #24]
 800232c:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 800232e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002332:	685b      	ldr	r3, [r3, #4]
 8002334:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002336:	693b      	ldr	r3, [r7, #16]
 8002338:	43db      	mvns	r3, r3
 800233a:	69ba      	ldr	r2, [r7, #24]
 800233c:	4013      	ands	r3, r2
 800233e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002340:	683b      	ldr	r3, [r7, #0]
 8002342:	685b      	ldr	r3, [r3, #4]
 8002344:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002348:	2b00      	cmp	r3, #0
 800234a:	d003      	beq.n	8002354 <HAL_GPIO_Init+0x320>
        {
          temp |= iocurrent;
 800234c:	69ba      	ldr	r2, [r7, #24]
 800234e:	693b      	ldr	r3, [r7, #16]
 8002350:	4313      	orrs	r3, r2
 8002352:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8002354:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002358:	69bb      	ldr	r3, [r7, #24]
 800235a:	6053      	str	r3, [r2, #4]
      }
    }

    position++;
 800235c:	69fb      	ldr	r3, [r7, #28]
 800235e:	3301      	adds	r3, #1
 8002360:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8002362:	683b      	ldr	r3, [r7, #0]
 8002364:	681a      	ldr	r2, [r3, #0]
 8002366:	69fb      	ldr	r3, [r7, #28]
 8002368:	fa22 f303 	lsr.w	r3, r2, r3
 800236c:	2b00      	cmp	r3, #0
 800236e:	f47f ae6b 	bne.w	8002048 <HAL_GPIO_Init+0x14>
  }
}
 8002372:	bf00      	nop
 8002374:	bf00      	nop
 8002376:	3724      	adds	r7, #36	; 0x24
 8002378:	46bd      	mov	sp, r7
 800237a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800237e:	4770      	bx	lr
 8002380:	58000400 	.word	0x58000400

08002384 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002384:	b480      	push	{r7}
 8002386:	b083      	sub	sp, #12
 8002388:	af00      	add	r7, sp, #0
 800238a:	6078      	str	r0, [r7, #4]
 800238c:	460b      	mov	r3, r1
 800238e:	807b      	strh	r3, [r7, #2]
 8002390:	4613      	mov	r3, r2
 8002392:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002394:	787b      	ldrb	r3, [r7, #1]
 8002396:	2b00      	cmp	r3, #0
 8002398:	d003      	beq.n	80023a2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800239a:	887a      	ldrh	r2, [r7, #2]
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 80023a0:	e003      	b.n	80023aa <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 80023a2:	887b      	ldrh	r3, [r7, #2]
 80023a4:	041a      	lsls	r2, r3, #16
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	619a      	str	r2, [r3, #24]
}
 80023aa:	bf00      	nop
 80023ac:	370c      	adds	r7, #12
 80023ae:	46bd      	mov	sp, r7
 80023b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023b4:	4770      	bx	lr

080023b6 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80023b6:	b480      	push	{r7}
 80023b8:	b085      	sub	sp, #20
 80023ba:	af00      	add	r7, sp, #0
 80023bc:	6078      	str	r0, [r7, #4]
 80023be:	460b      	mov	r3, r1
 80023c0:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	695b      	ldr	r3, [r3, #20]
 80023c6:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80023c8:	887a      	ldrh	r2, [r7, #2]
 80023ca:	68fb      	ldr	r3, [r7, #12]
 80023cc:	4013      	ands	r3, r2
 80023ce:	041a      	lsls	r2, r3, #16
 80023d0:	68fb      	ldr	r3, [r7, #12]
 80023d2:	43d9      	mvns	r1, r3
 80023d4:	887b      	ldrh	r3, [r7, #2]
 80023d6:	400b      	ands	r3, r1
 80023d8:	431a      	orrs	r2, r3
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	619a      	str	r2, [r3, #24]
}
 80023de:	bf00      	nop
 80023e0:	3714      	adds	r7, #20
 80023e2:	46bd      	mov	sp, r7
 80023e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023e8:	4770      	bx	lr
	...

080023ec <HAL_OSPI_Init>:
  *         in the OSPI_InitTypeDef and initialize the associated handle.
  * @param  hospi : OSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_OSPI_Init (OSPI_HandleTypeDef *hospi)
{
 80023ec:	b580      	push	{r7, lr}
 80023ee:	b086      	sub	sp, #24
 80023f0:	af02      	add	r7, sp, #8
 80023f2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80023f4:	2300      	movs	r3, #0
 80023f6:	73fb      	strb	r3, [r7, #15]
  uint32_t tickstart = HAL_GetTick();
 80023f8:	f7ff f9a4 	bl	8001744 <HAL_GetTick>
 80023fc:	60b8      	str	r0, [r7, #8]

  /* Check the OSPI handle allocation */
  if (hospi == NULL)
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	2b00      	cmp	r3, #0
 8002402:	d102      	bne.n	800240a <HAL_OSPI_Init+0x1e>
  {
    status = HAL_ERROR;
 8002404:	2301      	movs	r3, #1
 8002406:	73fb      	strb	r3, [r7, #15]
 8002408:	e0a9      	b.n	800255e <HAL_OSPI_Init+0x172>
    assert_param(IS_OSPI_CKCSHT         (hospi->Init.ClkChipSelectHighTime));
    assert_param(IS_OSPI_DLYBYP         (hospi->Init.DelayBlockBypass));
    assert_param(IS_OSPI_MAXTRAN        (hospi->Init.MaxTran));

    /* Initialize error code */
    hospi->ErrorCode = HAL_OSPI_ERROR_NONE;
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	2200      	movs	r2, #0
 800240e:	659a      	str	r2, [r3, #88]	; 0x58

    /* Check if the state is the reset state */
    if (hospi->State == HAL_OSPI_STATE_RESET)
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002414:	2b00      	cmp	r3, #0
 8002416:	f040 80a2 	bne.w	800255e <HAL_OSPI_Init+0x172>

      /* Init the low level hardware */
      hospi->MspInitCallback(hospi);
#else
      /* Initialization of the low level hardware */
      HAL_OSPI_MspInit(hospi);
 800241a:	6878      	ldr	r0, [r7, #4]
 800241c:	f7fe fd9e 	bl	8000f5c <HAL_OSPI_MspInit>
#endif /* defined (USE_HAL_OSPI_REGISTER_CALLBACKS) && (USE_HAL_OSPI_REGISTER_CALLBACKS == 1U) */

      /* Configure the default timeout for the OSPI memory access */
      (void)HAL_OSPI_SetTimeout(hospi, HAL_OSPI_TIMEOUT_DEFAULT_VALUE);
 8002420:	f241 3188 	movw	r1, #5000	; 0x1388
 8002424:	6878      	ldr	r0, [r7, #4]
 8002426:	f000 f8e0 	bl	80025ea <HAL_OSPI_SetTimeout>

      /* Configure memory type, device size, chip select high time, clocked chip select high time, delay block bypass, free running clock, clock mode */
      MODIFY_REG(hospi->Instance->DCR1,
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	689a      	ldr	r2, [r3, #8]
 8002430:	4b4d      	ldr	r3, [pc, #308]	; (8002568 <HAL_OSPI_Init+0x17c>)
 8002432:	4013      	ands	r3, r2
 8002434:	687a      	ldr	r2, [r7, #4]
 8002436:	68d1      	ldr	r1, [r2, #12]
 8002438:	687a      	ldr	r2, [r7, #4]
 800243a:	6912      	ldr	r2, [r2, #16]
 800243c:	3a01      	subs	r2, #1
 800243e:	0412      	lsls	r2, r2, #16
 8002440:	4311      	orrs	r1, r2
 8002442:	687a      	ldr	r2, [r7, #4]
 8002444:	6952      	ldr	r2, [r2, #20]
 8002446:	3a01      	subs	r2, #1
 8002448:	0212      	lsls	r2, r2, #8
 800244a:	4311      	orrs	r1, r2
 800244c:	687a      	ldr	r2, [r7, #4]
 800244e:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002450:	0112      	lsls	r2, r2, #4
 8002452:	4311      	orrs	r1, r2
 8002454:	687a      	ldr	r2, [r7, #4]
 8002456:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002458:	4311      	orrs	r1, r2
 800245a:	687a      	ldr	r2, [r7, #4]
 800245c:	69d2      	ldr	r2, [r2, #28]
 800245e:	4311      	orrs	r1, r2
 8002460:	687a      	ldr	r2, [r7, #4]
 8002462:	6812      	ldr	r2, [r2, #0]
 8002464:	430b      	orrs	r3, r1
 8002466:	6093      	str	r3, [r2, #8]
                  ((hospi->Init.ChipSelectHighTime - 1U) << OCTOSPI_DCR1_CSHT_Pos) |
                  (hospi->Init.ClkChipSelectHighTime << OCTOSPI_DCR1_CKCSHT_Pos) |
                  hospi->Init.DelayBlockBypass | hospi->Init.ClockMode));

      /* Configure wrap size */
      MODIFY_REG(hospi->Instance->DCR2, OCTOSPI_DCR2_WRAPSIZE, hospi->Init.WrapSize);
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	68db      	ldr	r3, [r3, #12]
 800246e:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	6a1a      	ldr	r2, [r3, #32]
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	430a      	orrs	r2, r1
 800247c:	60da      	str	r2, [r3, #12]

      /* Configure chip select boundary and maximum transfer */
      hospi->Instance->DCR3 = ((hospi->Init.ChipSelectBoundary << OCTOSPI_DCR3_CSBOUND_Pos) |
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002482:	0419      	lsls	r1, r3, #16
                               (hospi->Init.MaxTran << OCTOSPI_DCR3_MAXTRAN_Pos));
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	6bda      	ldr	r2, [r3, #60]	; 0x3c
      hospi->Instance->DCR3 = ((hospi->Init.ChipSelectBoundary << OCTOSPI_DCR3_CSBOUND_Pos) |
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	430a      	orrs	r2, r1
 800248e:	611a      	str	r2, [r3, #16]

      /* Configure refresh */
      hospi->Instance->DCR4 = hospi->Init.Refresh;
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	687a      	ldr	r2, [r7, #4]
 8002496:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8002498:	615a      	str	r2, [r3, #20]

      /* Configure FIFO threshold */
      MODIFY_REG(hospi->Instance->CR, OCTOSPI_CR_FTHRES, ((hospi->Init.FifoThreshold - 1U) << OCTOSPI_CR_FTHRES_Pos));
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	f423 51f8 	bic.w	r1, r3, #7936	; 0x1f00
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	685b      	ldr	r3, [r3, #4]
 80024a8:	3b01      	subs	r3, #1
 80024aa:	021a      	lsls	r2, r3, #8
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	430a      	orrs	r2, r1
 80024b2:	601a      	str	r2, [r3, #0]

      /* Wait till busy flag is reset */
      status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_BUSY, RESET, tickstart, hospi->Timeout);
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80024b8:	9300      	str	r3, [sp, #0]
 80024ba:	68bb      	ldr	r3, [r7, #8]
 80024bc:	2200      	movs	r2, #0
 80024be:	2120      	movs	r1, #32
 80024c0:	6878      	ldr	r0, [r7, #4]
 80024c2:	f000 fdb7 	bl	8003034 <OSPI_WaitFlagStateUntilTimeout>
 80024c6:	4603      	mov	r3, r0
 80024c8:	73fb      	strb	r3, [r7, #15]

      if (status == HAL_OK)
 80024ca:	7bfb      	ldrb	r3, [r7, #15]
 80024cc:	2b00      	cmp	r3, #0
 80024ce:	d146      	bne.n	800255e <HAL_OSPI_Init+0x172>
      {
        /* Configure clock prescaler */
        MODIFY_REG(hospi->Instance->DCR2, OCTOSPI_DCR2_PRESCALER, 
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	68db      	ldr	r3, [r3, #12]
 80024d6:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024de:	1e5a      	subs	r2, r3, #1
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	430a      	orrs	r2, r1
 80024e6:	60da      	str	r2, [r3, #12]
                  ((hospi->Init.ClockPrescaler - 1U) << OCTOSPI_DCR2_PRESCALER_Pos));

        /* Configure Dual Quad mode */
        MODIFY_REG(hospi->Instance->CR, OCTOSPI_CR_DQM, hospi->Init.DualQuad);
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	f023 0140 	bic.w	r1, r3, #64	; 0x40
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	689a      	ldr	r2, [r3, #8]
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	430a      	orrs	r2, r1
 80024fc:	601a      	str	r2, [r3, #0]

        /* Configure sample shifting and delay hold quarter cycle */
        MODIFY_REG(hospi->Instance->TCR, (OCTOSPI_TCR_SSHIFT | OCTOSPI_TCR_DHQC),
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8002506:	f023 41a0 	bic.w	r1, r3, #1342177280	; 0x50000000
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002512:	431a      	orrs	r2, r3
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	430a      	orrs	r2, r1
 800251a:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
                  (hospi->Init.SampleShifting | hospi->Init.DelayHoldQuarterCycle));

        /* Enable OctoSPI */
        __HAL_OSPI_ENABLE(hospi);
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	681a      	ldr	r2, [r3, #0]
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	f042 0201 	orr.w	r2, r2, #1
 800252c:	601a      	str	r2, [r3, #0]

        /* Enable free running clock if needed : must be done after OSPI enable */
        if (hospi->Init.FreeRunningClock == HAL_OSPI_FREERUNCLK_ENABLE)
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	699b      	ldr	r3, [r3, #24]
 8002532:	2b02      	cmp	r3, #2
 8002534:	d107      	bne.n	8002546 <HAL_OSPI_Init+0x15a>
        {
          SET_BIT(hospi->Instance->DCR1, OCTOSPI_DCR1_FRCK);
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	689a      	ldr	r2, [r3, #8]
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	f042 0202 	orr.w	r2, r2, #2
 8002544:	609a      	str	r2, [r3, #8]
        }

        /* Initialize the OSPI state */
        if (hospi->Init.MemoryType == HAL_OSPI_MEMTYPE_HYPERBUS)
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	68db      	ldr	r3, [r3, #12]
 800254a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800254e:	d103      	bne.n	8002558 <HAL_OSPI_Init+0x16c>
        {
          hospi->State = HAL_OSPI_STATE_HYPERBUS_INIT;
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	2201      	movs	r2, #1
 8002554:	655a      	str	r2, [r3, #84]	; 0x54
 8002556:	e002      	b.n	800255e <HAL_OSPI_Init+0x172>
        }
        else
        {
          hospi->State = HAL_OSPI_STATE_READY;
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	2202      	movs	r2, #2
 800255c:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
  }

  /* Return function status */
  return status;
 800255e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002560:	4618      	mov	r0, r3
 8002562:	3710      	adds	r7, #16
 8002564:	46bd      	mov	sp, r7
 8002566:	bd80      	pop	{r7, pc}
 8002568:	f8e0f884 	.word	0xf8e0f884

0800256c <HAL_OSPI_HyperbusCfg>:
  * @param  cfg     : Structure containing the Hyperbus configuration
  * @param  Timeout : Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_OSPI_HyperbusCfg(OSPI_HandleTypeDef *hospi, OSPI_HyperbusCfgTypeDef *cfg, uint32_t Timeout)
{
 800256c:	b580      	push	{r7, lr}
 800256e:	b08a      	sub	sp, #40	; 0x28
 8002570:	af02      	add	r7, sp, #8
 8002572:	60f8      	str	r0, [r7, #12]
 8002574:	60b9      	str	r1, [r7, #8]
 8002576:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t state;
  uint32_t tickstart = HAL_GetTick();
 8002578:	f7ff f8e4 	bl	8001744 <HAL_GetTick>
 800257c:	61b8      	str	r0, [r7, #24]
  assert_param(IS_OSPI_ACCESS_TIME       (cfg->AccessTime));
  assert_param(IS_OSPI_WRITE_ZERO_LATENCY(cfg->WriteZeroLatency));
  assert_param(IS_OSPI_LATENCY_MODE      (cfg->LatencyMode));

  /* Check the state of the driver */
  state = hospi->State;
 800257e:	68fb      	ldr	r3, [r7, #12]
 8002580:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002582:	617b      	str	r3, [r7, #20]
  if ((state == HAL_OSPI_STATE_HYPERBUS_INIT) || (state == HAL_OSPI_STATE_READY))
 8002584:	697b      	ldr	r3, [r7, #20]
 8002586:	2b01      	cmp	r3, #1
 8002588:	d002      	beq.n	8002590 <HAL_OSPI_HyperbusCfg+0x24>
 800258a:	697b      	ldr	r3, [r7, #20]
 800258c:	2b02      	cmp	r3, #2
 800258e:	d122      	bne.n	80025d6 <HAL_OSPI_HyperbusCfg+0x6a>
  {
    /* Wait till busy flag is reset */
    status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_BUSY, RESET, tickstart, Timeout);
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	9300      	str	r3, [sp, #0]
 8002594:	69bb      	ldr	r3, [r7, #24]
 8002596:	2200      	movs	r2, #0
 8002598:	2120      	movs	r1, #32
 800259a:	68f8      	ldr	r0, [r7, #12]
 800259c:	f000 fd4a 	bl	8003034 <OSPI_WaitFlagStateUntilTimeout>
 80025a0:	4603      	mov	r3, r0
 80025a2:	77fb      	strb	r3, [r7, #31]

    if (status == HAL_OK)
 80025a4:	7ffb      	ldrb	r3, [r7, #31]
 80025a6:	2b00      	cmp	r3, #0
 80025a8:	d11a      	bne.n	80025e0 <HAL_OSPI_HyperbusCfg+0x74>
    {
      /* Configure Hyperbus configuration Latency register */
      WRITE_REG(hospi->Instance->HLCR, ((cfg->RWRecoveryTime << OCTOSPI_HLCR_TRWR_Pos) |
 80025aa:	68bb      	ldr	r3, [r7, #8]
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	041a      	lsls	r2, r3, #16
 80025b0:	68bb      	ldr	r3, [r7, #8]
 80025b2:	685b      	ldr	r3, [r3, #4]
 80025b4:	021b      	lsls	r3, r3, #8
 80025b6:	431a      	orrs	r2, r3
 80025b8:	68bb      	ldr	r3, [r7, #8]
 80025ba:	689b      	ldr	r3, [r3, #8]
 80025bc:	ea42 0103 	orr.w	r1, r2, r3
 80025c0:	68bb      	ldr	r3, [r7, #8]
 80025c2:	68da      	ldr	r2, [r3, #12]
 80025c4:	68fb      	ldr	r3, [r7, #12]
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	430a      	orrs	r2, r1
 80025ca:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
                                        (cfg->AccessTime << OCTOSPI_HLCR_TACC_Pos)     |
                                        cfg->WriteZeroLatency | cfg->LatencyMode));

      /* Update the state */
      hospi->State = HAL_OSPI_STATE_READY;
 80025ce:	68fb      	ldr	r3, [r7, #12]
 80025d0:	2202      	movs	r2, #2
 80025d2:	655a      	str	r2, [r3, #84]	; 0x54
    if (status == HAL_OK)
 80025d4:	e004      	b.n	80025e0 <HAL_OSPI_HyperbusCfg+0x74>
    }
  }
  else
  {
    status = HAL_ERROR;
 80025d6:	2301      	movs	r3, #1
 80025d8:	77fb      	strb	r3, [r7, #31]
    hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_SEQUENCE;
 80025da:	68fb      	ldr	r3, [r7, #12]
 80025dc:	2210      	movs	r2, #16
 80025de:	659a      	str	r2, [r3, #88]	; 0x58
  }

  /* Return function status */
  return status;
 80025e0:	7ffb      	ldrb	r3, [r7, #31]
}
 80025e2:	4618      	mov	r0, r3
 80025e4:	3720      	adds	r7, #32
 80025e6:	46bd      	mov	sp, r7
 80025e8:	bd80      	pop	{r7, pc}

080025ea <HAL_OSPI_SetTimeout>:
  * @param  hospi   : OSPI handle.
  * @param  Timeout : Timeout for the memory access.
  * @retval None
  */
HAL_StatusTypeDef HAL_OSPI_SetTimeout(OSPI_HandleTypeDef *hospi, uint32_t Timeout)
{
 80025ea:	b480      	push	{r7}
 80025ec:	b083      	sub	sp, #12
 80025ee:	af00      	add	r7, sp, #0
 80025f0:	6078      	str	r0, [r7, #4]
 80025f2:	6039      	str	r1, [r7, #0]
  hospi->Timeout = Timeout;
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	683a      	ldr	r2, [r7, #0]
 80025f8:	65da      	str	r2, [r3, #92]	; 0x5c
  return HAL_OK;
 80025fa:	2300      	movs	r3, #0
}
 80025fc:	4618      	mov	r0, r3
 80025fe:	370c      	adds	r7, #12
 8002600:	46bd      	mov	sp, r7
 8002602:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002606:	4770      	bx	lr

08002608 <HAL_OSPIM_Config>:
  * @param  cfg     : Configuration of the IO Manager for the instance
  * @param  Timeout : Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_OSPIM_Config(OSPI_HandleTypeDef *hospi, OSPIM_CfgTypeDef *cfg, uint32_t Timeout)
{
 8002608:	b580      	push	{r7, lr}
 800260a:	b094      	sub	sp, #80	; 0x50
 800260c:	af00      	add	r7, sp, #0
 800260e:	60f8      	str	r0, [r7, #12]
 8002610:	60b9      	str	r1, [r7, #8]
 8002612:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002614:	2300      	movs	r3, #0
 8002616:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
  uint32_t instance;
  uint8_t index;
  uint8_t ospi_enabled = 0U;
 800261a:	2300      	movs	r3, #0
 800261c:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
  assert_param(IS_OSPIM_PORT(cfg->NCSPort));
  assert_param(IS_OSPIM_IO_PORT(cfg->IOLowPort));
  assert_param(IS_OSPIM_IO_PORT(cfg->IOHighPort));
  assert_param(IS_OSPIM_REQ2ACKTIME(cfg->Req2AckTime));

  if (hospi->Instance == OCTOSPI1)
 8002620:	68fb      	ldr	r3, [r7, #12]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	4aa3      	ldr	r2, [pc, #652]	; (80028b4 <HAL_OSPIM_Config+0x2ac>)
 8002626:	4293      	cmp	r3, r2
 8002628:	d105      	bne.n	8002636 <HAL_OSPIM_Config+0x2e>
  {
    instance = 0U;
 800262a:	2300      	movs	r3, #0
 800262c:	64bb      	str	r3, [r7, #72]	; 0x48
    other_instance = 1U;
 800262e:	2301      	movs	r3, #1
 8002630:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
 8002634:	e004      	b.n	8002640 <HAL_OSPIM_Config+0x38>
  }
  else
  {
    instance = 1U;
 8002636:	2301      	movs	r3, #1
 8002638:	64bb      	str	r3, [r7, #72]	; 0x48
    other_instance = 0U;
 800263a:	2300      	movs	r3, #0
 800263c:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
  }

  /**************** Get current configuration of the instances ****************/
  for (index = 0U; index < OSPI_NB_INSTANCE; index++)
 8002640:	2300      	movs	r3, #0
 8002642:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 8002646:	e01d      	b.n	8002684 <HAL_OSPIM_Config+0x7c>
  {
    if (OSPIM_GetConfig(index+1U, &(IOM_cfg[index])) != HAL_OK)
 8002648:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800264c:	3301      	adds	r3, #1
 800264e:	b2d8      	uxtb	r0, r3
 8002650:	f897 2047 	ldrb.w	r2, [r7, #71]	; 0x47
 8002654:	f107 0114 	add.w	r1, r7, #20
 8002658:	4613      	mov	r3, r2
 800265a:	005b      	lsls	r3, r3, #1
 800265c:	4413      	add	r3, r2
 800265e:	00db      	lsls	r3, r3, #3
 8002660:	440b      	add	r3, r1
 8002662:	4619      	mov	r1, r3
 8002664:	f000 fd1e 	bl	80030a4 <OSPIM_GetConfig>
 8002668:	4603      	mov	r3, r0
 800266a:	2b00      	cmp	r3, #0
 800266c:	d005      	beq.n	800267a <HAL_OSPIM_Config+0x72>
    {
      status = HAL_ERROR;
 800266e:	2301      	movs	r3, #1
 8002670:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
      hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_PARAM;
 8002674:	68fb      	ldr	r3, [r7, #12]
 8002676:	2208      	movs	r2, #8
 8002678:	659a      	str	r2, [r3, #88]	; 0x58
  for (index = 0U; index < OSPI_NB_INSTANCE; index++)
 800267a:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800267e:	3301      	adds	r3, #1
 8002680:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 8002684:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8002688:	2b01      	cmp	r3, #1
 800268a:	d9dd      	bls.n	8002648 <HAL_OSPIM_Config+0x40>
    }
  }

  if (status == HAL_OK)
 800268c:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8002690:	2b00      	cmp	r3, #0
 8002692:	f040 84c3 	bne.w	800301c <HAL_OSPIM_Config+0xa14>
  {
    /********** Disable both OctoSPI to configure OctoSPI IO Manager **********/
    if ((OCTOSPI1->CR & OCTOSPI_CR_EN) != 0U)
 8002696:	4b87      	ldr	r3, [pc, #540]	; (80028b4 <HAL_OSPIM_Config+0x2ac>)
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	f003 0301 	and.w	r3, r3, #1
 800269e:	2b00      	cmp	r3, #0
 80026a0:	d00b      	beq.n	80026ba <HAL_OSPIM_Config+0xb2>
    {
      CLEAR_BIT(OCTOSPI1->CR, OCTOSPI_CR_EN);
 80026a2:	4b84      	ldr	r3, [pc, #528]	; (80028b4 <HAL_OSPIM_Config+0x2ac>)
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	4a83      	ldr	r2, [pc, #524]	; (80028b4 <HAL_OSPIM_Config+0x2ac>)
 80026a8:	f023 0301 	bic.w	r3, r3, #1
 80026ac:	6013      	str	r3, [r2, #0]
      ospi_enabled |= 0x1U;
 80026ae:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 80026b2:	f043 0301 	orr.w	r3, r3, #1
 80026b6:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
    }
    if ((OCTOSPI2->CR & OCTOSPI_CR_EN) != 0U)
 80026ba:	4b7f      	ldr	r3, [pc, #508]	; (80028b8 <HAL_OSPIM_Config+0x2b0>)
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	f003 0301 	and.w	r3, r3, #1
 80026c2:	2b00      	cmp	r3, #0
 80026c4:	d00b      	beq.n	80026de <HAL_OSPIM_Config+0xd6>
    {
      CLEAR_BIT(OCTOSPI2->CR, OCTOSPI_CR_EN);
 80026c6:	4b7c      	ldr	r3, [pc, #496]	; (80028b8 <HAL_OSPIM_Config+0x2b0>)
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	4a7b      	ldr	r2, [pc, #492]	; (80028b8 <HAL_OSPIM_Config+0x2b0>)
 80026cc:	f023 0301 	bic.w	r3, r3, #1
 80026d0:	6013      	str	r3, [r2, #0]
      ospi_enabled |= 0x2U;
 80026d2:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 80026d6:	f043 0302 	orr.w	r3, r3, #2
 80026da:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
    }

    /***************** Deactivation of previous configuration *****************/
    CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[instance].NCSPort-1U)], OCTOSPIM_PCR_NCSEN);
 80026de:	4977      	ldr	r1, [pc, #476]	; (80028bc <HAL_OSPIM_Config+0x2b4>)
 80026e0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80026e2:	4613      	mov	r3, r2
 80026e4:	005b      	lsls	r3, r3, #1
 80026e6:	4413      	add	r3, r2
 80026e8:	00db      	lsls	r3, r3, #3
 80026ea:	f107 0250 	add.w	r2, r7, #80	; 0x50
 80026ee:	4413      	add	r3, r2
 80026f0:	3b34      	subs	r3, #52	; 0x34
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	3b01      	subs	r3, #1
 80026f6:	009b      	lsls	r3, r3, #2
 80026f8:	440b      	add	r3, r1
 80026fa:	6859      	ldr	r1, [r3, #4]
 80026fc:	486f      	ldr	r0, [pc, #444]	; (80028bc <HAL_OSPIM_Config+0x2b4>)
 80026fe:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002700:	4613      	mov	r3, r2
 8002702:	005b      	lsls	r3, r3, #1
 8002704:	4413      	add	r3, r2
 8002706:	00db      	lsls	r3, r3, #3
 8002708:	f107 0250 	add.w	r2, r7, #80	; 0x50
 800270c:	4413      	add	r3, r2
 800270e:	3b34      	subs	r3, #52	; 0x34
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	3b01      	subs	r3, #1
 8002714:	f421 7280 	bic.w	r2, r1, #256	; 0x100
 8002718:	009b      	lsls	r3, r3, #2
 800271a:	4403      	add	r3, r0
 800271c:	605a      	str	r2, [r3, #4]
    if ((OCTOSPIM->CR & OCTOSPIM_CR_MUXEN) != 0U)
 800271e:	4b67      	ldr	r3, [pc, #412]	; (80028bc <HAL_OSPIM_Config+0x2b4>)
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	f003 0301 	and.w	r3, r3, #1
 8002726:	2b00      	cmp	r3, #0
 8002728:	f000 80ca 	beq.w	80028c0 <HAL_OSPIM_Config+0x2b8>
    {
      /* De-multiplexing should be performed */
      CLEAR_BIT(OCTOSPIM->CR, OCTOSPIM_CR_MUXEN);
 800272c:	4b63      	ldr	r3, [pc, #396]	; (80028bc <HAL_OSPIM_Config+0x2b4>)
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	4a62      	ldr	r2, [pc, #392]	; (80028bc <HAL_OSPIM_Config+0x2b4>)
 8002732:	f023 0301 	bic.w	r3, r3, #1
 8002736:	6013      	str	r3, [r2, #0]

      if (other_instance == 1U)
 8002738:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 800273c:	2b01      	cmp	r3, #1
 800273e:	f040 8178 	bne.w	8002a32 <HAL_OSPIM_Config+0x42a>
      {
        SET_BIT(OCTOSPIM->PCR[(IOM_cfg[other_instance].ClkPort-1U)], OCTOSPIM_PCR_CLKSRC);
 8002742:	495e      	ldr	r1, [pc, #376]	; (80028bc <HAL_OSPIM_Config+0x2b4>)
 8002744:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 8002748:	4613      	mov	r3, r2
 800274a:	005b      	lsls	r3, r3, #1
 800274c:	4413      	add	r3, r2
 800274e:	00db      	lsls	r3, r3, #3
 8002750:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8002754:	4413      	add	r3, r2
 8002756:	3b3c      	subs	r3, #60	; 0x3c
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	3b01      	subs	r3, #1
 800275c:	009b      	lsls	r3, r3, #2
 800275e:	440b      	add	r3, r1
 8002760:	6859      	ldr	r1, [r3, #4]
 8002762:	4856      	ldr	r0, [pc, #344]	; (80028bc <HAL_OSPIM_Config+0x2b4>)
 8002764:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 8002768:	4613      	mov	r3, r2
 800276a:	005b      	lsls	r3, r3, #1
 800276c:	4413      	add	r3, r2
 800276e:	00db      	lsls	r3, r3, #3
 8002770:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8002774:	4413      	add	r3, r2
 8002776:	3b3c      	subs	r3, #60	; 0x3c
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	3b01      	subs	r3, #1
 800277c:	f041 0202 	orr.w	r2, r1, #2
 8002780:	009b      	lsls	r3, r3, #2
 8002782:	4403      	add	r3, r0
 8002784:	605a      	str	r2, [r3, #4]
        if (IOM_cfg[other_instance].DQSPort != 0U)
 8002786:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 800278a:	4613      	mov	r3, r2
 800278c:	005b      	lsls	r3, r3, #1
 800278e:	4413      	add	r3, r2
 8002790:	00db      	lsls	r3, r3, #3
 8002792:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8002796:	4413      	add	r3, r2
 8002798:	3b38      	subs	r3, #56	; 0x38
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	2b00      	cmp	r3, #0
 800279e:	d021      	beq.n	80027e4 <HAL_OSPIM_Config+0x1dc>
        {
          SET_BIT(OCTOSPIM->PCR[(IOM_cfg[other_instance].DQSPort-1U)], OCTOSPIM_PCR_DQSSRC);
 80027a0:	4946      	ldr	r1, [pc, #280]	; (80028bc <HAL_OSPIM_Config+0x2b4>)
 80027a2:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 80027a6:	4613      	mov	r3, r2
 80027a8:	005b      	lsls	r3, r3, #1
 80027aa:	4413      	add	r3, r2
 80027ac:	00db      	lsls	r3, r3, #3
 80027ae:	f107 0250 	add.w	r2, r7, #80	; 0x50
 80027b2:	4413      	add	r3, r2
 80027b4:	3b38      	subs	r3, #56	; 0x38
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	3b01      	subs	r3, #1
 80027ba:	009b      	lsls	r3, r3, #2
 80027bc:	440b      	add	r3, r1
 80027be:	6859      	ldr	r1, [r3, #4]
 80027c0:	483e      	ldr	r0, [pc, #248]	; (80028bc <HAL_OSPIM_Config+0x2b4>)
 80027c2:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 80027c6:	4613      	mov	r3, r2
 80027c8:	005b      	lsls	r3, r3, #1
 80027ca:	4413      	add	r3, r2
 80027cc:	00db      	lsls	r3, r3, #3
 80027ce:	f107 0250 	add.w	r2, r7, #80	; 0x50
 80027d2:	4413      	add	r3, r2
 80027d4:	3b38      	subs	r3, #56	; 0x38
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	3b01      	subs	r3, #1
 80027da:	f041 0220 	orr.w	r2, r1, #32
 80027de:	009b      	lsls	r3, r3, #2
 80027e0:	4403      	add	r3, r0
 80027e2:	605a      	str	r2, [r3, #4]
        }
        if (IOM_cfg[other_instance].IOLowPort != HAL_OSPIM_IOPORT_NONE)
 80027e4:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 80027e8:	4613      	mov	r3, r2
 80027ea:	005b      	lsls	r3, r3, #1
 80027ec:	4413      	add	r3, r2
 80027ee:	00db      	lsls	r3, r3, #3
 80027f0:	f107 0250 	add.w	r2, r7, #80	; 0x50
 80027f4:	4413      	add	r3, r2
 80027f6:	3b30      	subs	r3, #48	; 0x30
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	2b00      	cmp	r3, #0
 80027fc:	d025      	beq.n	800284a <HAL_OSPIM_Config+0x242>
        {
          SET_BIT(OCTOSPIM->PCR[((IOM_cfg[other_instance].IOLowPort-1U)& OSPI_IOM_PORT_MASK)], OCTOSPIM_PCR_IOLSRC_1);
 80027fe:	492f      	ldr	r1, [pc, #188]	; (80028bc <HAL_OSPIM_Config+0x2b4>)
 8002800:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 8002804:	4613      	mov	r3, r2
 8002806:	005b      	lsls	r3, r3, #1
 8002808:	4413      	add	r3, r2
 800280a:	00db      	lsls	r3, r3, #3
 800280c:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8002810:	4413      	add	r3, r2
 8002812:	3b30      	subs	r3, #48	; 0x30
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	3b01      	subs	r3, #1
 8002818:	f003 0301 	and.w	r3, r3, #1
 800281c:	009b      	lsls	r3, r3, #2
 800281e:	440b      	add	r3, r1
 8002820:	6859      	ldr	r1, [r3, #4]
 8002822:	4826      	ldr	r0, [pc, #152]	; (80028bc <HAL_OSPIM_Config+0x2b4>)
 8002824:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 8002828:	4613      	mov	r3, r2
 800282a:	005b      	lsls	r3, r3, #1
 800282c:	4413      	add	r3, r2
 800282e:	00db      	lsls	r3, r3, #3
 8002830:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8002834:	4413      	add	r3, r2
 8002836:	3b30      	subs	r3, #48	; 0x30
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	3b01      	subs	r3, #1
 800283c:	f003 0301 	and.w	r3, r3, #1
 8002840:	f441 2280 	orr.w	r2, r1, #262144	; 0x40000
 8002844:	009b      	lsls	r3, r3, #2
 8002846:	4403      	add	r3, r0
 8002848:	605a      	str	r2, [r3, #4]
        }
        if (IOM_cfg[other_instance].IOHighPort != HAL_OSPIM_IOPORT_NONE)
 800284a:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 800284e:	4613      	mov	r3, r2
 8002850:	005b      	lsls	r3, r3, #1
 8002852:	4413      	add	r3, r2
 8002854:	00db      	lsls	r3, r3, #3
 8002856:	f107 0250 	add.w	r2, r7, #80	; 0x50
 800285a:	4413      	add	r3, r2
 800285c:	3b2c      	subs	r3, #44	; 0x2c
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	2b00      	cmp	r3, #0
 8002862:	f000 80e6 	beq.w	8002a32 <HAL_OSPIM_Config+0x42a>
        {
          SET_BIT(OCTOSPIM->PCR[((IOM_cfg[other_instance].IOHighPort-1U)& OSPI_IOM_PORT_MASK)], OCTOSPIM_PCR_IOHSRC_1);
 8002866:	4915      	ldr	r1, [pc, #84]	; (80028bc <HAL_OSPIM_Config+0x2b4>)
 8002868:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 800286c:	4613      	mov	r3, r2
 800286e:	005b      	lsls	r3, r3, #1
 8002870:	4413      	add	r3, r2
 8002872:	00db      	lsls	r3, r3, #3
 8002874:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8002878:	4413      	add	r3, r2
 800287a:	3b2c      	subs	r3, #44	; 0x2c
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	3b01      	subs	r3, #1
 8002880:	f003 0301 	and.w	r3, r3, #1
 8002884:	009b      	lsls	r3, r3, #2
 8002886:	440b      	add	r3, r1
 8002888:	6859      	ldr	r1, [r3, #4]
 800288a:	480c      	ldr	r0, [pc, #48]	; (80028bc <HAL_OSPIM_Config+0x2b4>)
 800288c:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 8002890:	4613      	mov	r3, r2
 8002892:	005b      	lsls	r3, r3, #1
 8002894:	4413      	add	r3, r2
 8002896:	00db      	lsls	r3, r3, #3
 8002898:	f107 0250 	add.w	r2, r7, #80	; 0x50
 800289c:	4413      	add	r3, r2
 800289e:	3b2c      	subs	r3, #44	; 0x2c
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	3b01      	subs	r3, #1
 80028a4:	f003 0301 	and.w	r3, r3, #1
 80028a8:	f041 6280 	orr.w	r2, r1, #67108864	; 0x4000000
 80028ac:	009b      	lsls	r3, r3, #2
 80028ae:	4403      	add	r3, r0
 80028b0:	605a      	str	r2, [r3, #4]
 80028b2:	e0be      	b.n	8002a32 <HAL_OSPIM_Config+0x42a>
 80028b4:	52005000 	.word	0x52005000
 80028b8:	5200a000 	.word	0x5200a000
 80028bc:	5200b400 	.word	0x5200b400
        }
      }
    }
    else
    {
      if (IOM_cfg[instance].ClkPort != 0U)
 80028c0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80028c2:	4613      	mov	r3, r2
 80028c4:	005b      	lsls	r3, r3, #1
 80028c6:	4413      	add	r3, r2
 80028c8:	00db      	lsls	r3, r3, #3
 80028ca:	f107 0250 	add.w	r2, r7, #80	; 0x50
 80028ce:	4413      	add	r3, r2
 80028d0:	3b3c      	subs	r3, #60	; 0x3c
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	2b00      	cmp	r3, #0
 80028d6:	f000 80ac 	beq.w	8002a32 <HAL_OSPIM_Config+0x42a>
      {
        CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[instance].ClkPort-1U)], OCTOSPIM_PCR_CLKEN);
 80028da:	499d      	ldr	r1, [pc, #628]	; (8002b50 <HAL_OSPIM_Config+0x548>)
 80028dc:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80028de:	4613      	mov	r3, r2
 80028e0:	005b      	lsls	r3, r3, #1
 80028e2:	4413      	add	r3, r2
 80028e4:	00db      	lsls	r3, r3, #3
 80028e6:	f107 0250 	add.w	r2, r7, #80	; 0x50
 80028ea:	4413      	add	r3, r2
 80028ec:	3b3c      	subs	r3, #60	; 0x3c
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	3b01      	subs	r3, #1
 80028f2:	009b      	lsls	r3, r3, #2
 80028f4:	440b      	add	r3, r1
 80028f6:	6859      	ldr	r1, [r3, #4]
 80028f8:	4895      	ldr	r0, [pc, #596]	; (8002b50 <HAL_OSPIM_Config+0x548>)
 80028fa:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80028fc:	4613      	mov	r3, r2
 80028fe:	005b      	lsls	r3, r3, #1
 8002900:	4413      	add	r3, r2
 8002902:	00db      	lsls	r3, r3, #3
 8002904:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8002908:	4413      	add	r3, r2
 800290a:	3b3c      	subs	r3, #60	; 0x3c
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	3b01      	subs	r3, #1
 8002910:	f021 0201 	bic.w	r2, r1, #1
 8002914:	009b      	lsls	r3, r3, #2
 8002916:	4403      	add	r3, r0
 8002918:	605a      	str	r2, [r3, #4]
        if (IOM_cfg[instance].DQSPort != 0U)
 800291a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800291c:	4613      	mov	r3, r2
 800291e:	005b      	lsls	r3, r3, #1
 8002920:	4413      	add	r3, r2
 8002922:	00db      	lsls	r3, r3, #3
 8002924:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8002928:	4413      	add	r3, r2
 800292a:	3b38      	subs	r3, #56	; 0x38
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	2b00      	cmp	r3, #0
 8002930:	d01f      	beq.n	8002972 <HAL_OSPIM_Config+0x36a>
        {
          CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[instance].DQSPort-1U)], OCTOSPIM_PCR_DQSEN);
 8002932:	4987      	ldr	r1, [pc, #540]	; (8002b50 <HAL_OSPIM_Config+0x548>)
 8002934:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002936:	4613      	mov	r3, r2
 8002938:	005b      	lsls	r3, r3, #1
 800293a:	4413      	add	r3, r2
 800293c:	00db      	lsls	r3, r3, #3
 800293e:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8002942:	4413      	add	r3, r2
 8002944:	3b38      	subs	r3, #56	; 0x38
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	3b01      	subs	r3, #1
 800294a:	009b      	lsls	r3, r3, #2
 800294c:	440b      	add	r3, r1
 800294e:	6859      	ldr	r1, [r3, #4]
 8002950:	487f      	ldr	r0, [pc, #508]	; (8002b50 <HAL_OSPIM_Config+0x548>)
 8002952:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002954:	4613      	mov	r3, r2
 8002956:	005b      	lsls	r3, r3, #1
 8002958:	4413      	add	r3, r2
 800295a:	00db      	lsls	r3, r3, #3
 800295c:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8002960:	4413      	add	r3, r2
 8002962:	3b38      	subs	r3, #56	; 0x38
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	3b01      	subs	r3, #1
 8002968:	f021 0210 	bic.w	r2, r1, #16
 800296c:	009b      	lsls	r3, r3, #2
 800296e:	4403      	add	r3, r0
 8002970:	605a      	str	r2, [r3, #4]
        }
        if (IOM_cfg[instance].IOLowPort != HAL_OSPIM_IOPORT_NONE)
 8002972:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002974:	4613      	mov	r3, r2
 8002976:	005b      	lsls	r3, r3, #1
 8002978:	4413      	add	r3, r2
 800297a:	00db      	lsls	r3, r3, #3
 800297c:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8002980:	4413      	add	r3, r2
 8002982:	3b30      	subs	r3, #48	; 0x30
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	2b00      	cmp	r3, #0
 8002988:	d023      	beq.n	80029d2 <HAL_OSPIM_Config+0x3ca>
        {
          CLEAR_BIT(OCTOSPIM->PCR[((IOM_cfg[instance].IOLowPort-1U)& OSPI_IOM_PORT_MASK)], OCTOSPIM_PCR_IOLEN);
 800298a:	4971      	ldr	r1, [pc, #452]	; (8002b50 <HAL_OSPIM_Config+0x548>)
 800298c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800298e:	4613      	mov	r3, r2
 8002990:	005b      	lsls	r3, r3, #1
 8002992:	4413      	add	r3, r2
 8002994:	00db      	lsls	r3, r3, #3
 8002996:	f107 0250 	add.w	r2, r7, #80	; 0x50
 800299a:	4413      	add	r3, r2
 800299c:	3b30      	subs	r3, #48	; 0x30
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	3b01      	subs	r3, #1
 80029a2:	f003 0301 	and.w	r3, r3, #1
 80029a6:	009b      	lsls	r3, r3, #2
 80029a8:	440b      	add	r3, r1
 80029aa:	6859      	ldr	r1, [r3, #4]
 80029ac:	4868      	ldr	r0, [pc, #416]	; (8002b50 <HAL_OSPIM_Config+0x548>)
 80029ae:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80029b0:	4613      	mov	r3, r2
 80029b2:	005b      	lsls	r3, r3, #1
 80029b4:	4413      	add	r3, r2
 80029b6:	00db      	lsls	r3, r3, #3
 80029b8:	f107 0250 	add.w	r2, r7, #80	; 0x50
 80029bc:	4413      	add	r3, r2
 80029be:	3b30      	subs	r3, #48	; 0x30
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	3b01      	subs	r3, #1
 80029c4:	f003 0301 	and.w	r3, r3, #1
 80029c8:	f421 3280 	bic.w	r2, r1, #65536	; 0x10000
 80029cc:	009b      	lsls	r3, r3, #2
 80029ce:	4403      	add	r3, r0
 80029d0:	605a      	str	r2, [r3, #4]
        }
        if (IOM_cfg[instance].IOHighPort != HAL_OSPIM_IOPORT_NONE)
 80029d2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80029d4:	4613      	mov	r3, r2
 80029d6:	005b      	lsls	r3, r3, #1
 80029d8:	4413      	add	r3, r2
 80029da:	00db      	lsls	r3, r3, #3
 80029dc:	f107 0250 	add.w	r2, r7, #80	; 0x50
 80029e0:	4413      	add	r3, r2
 80029e2:	3b2c      	subs	r3, #44	; 0x2c
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	2b00      	cmp	r3, #0
 80029e8:	d023      	beq.n	8002a32 <HAL_OSPIM_Config+0x42a>
        {
          CLEAR_BIT(OCTOSPIM->PCR[((IOM_cfg[instance].IOHighPort-1U)& OSPI_IOM_PORT_MASK)], OCTOSPIM_PCR_IOHEN);
 80029ea:	4959      	ldr	r1, [pc, #356]	; (8002b50 <HAL_OSPIM_Config+0x548>)
 80029ec:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80029ee:	4613      	mov	r3, r2
 80029f0:	005b      	lsls	r3, r3, #1
 80029f2:	4413      	add	r3, r2
 80029f4:	00db      	lsls	r3, r3, #3
 80029f6:	f107 0250 	add.w	r2, r7, #80	; 0x50
 80029fa:	4413      	add	r3, r2
 80029fc:	3b2c      	subs	r3, #44	; 0x2c
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	3b01      	subs	r3, #1
 8002a02:	f003 0301 	and.w	r3, r3, #1
 8002a06:	009b      	lsls	r3, r3, #2
 8002a08:	440b      	add	r3, r1
 8002a0a:	6859      	ldr	r1, [r3, #4]
 8002a0c:	4850      	ldr	r0, [pc, #320]	; (8002b50 <HAL_OSPIM_Config+0x548>)
 8002a0e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002a10:	4613      	mov	r3, r2
 8002a12:	005b      	lsls	r3, r3, #1
 8002a14:	4413      	add	r3, r2
 8002a16:	00db      	lsls	r3, r3, #3
 8002a18:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8002a1c:	4413      	add	r3, r2
 8002a1e:	3b2c      	subs	r3, #44	; 0x2c
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	3b01      	subs	r3, #1
 8002a24:	f003 0301 	and.w	r3, r3, #1
 8002a28:	f021 7280 	bic.w	r2, r1, #16777216	; 0x1000000
 8002a2c:	009b      	lsls	r3, r3, #2
 8002a2e:	4403      	add	r3, r0
 8002a30:	605a      	str	r2, [r3, #4]
        }
      }
    }

    /********************* Deactivation of other instance *********************/
    if ((cfg->ClkPort == IOM_cfg[other_instance].ClkPort) || (cfg->DQSPort == IOM_cfg[other_instance].DQSPort)     ||
 8002a32:	68bb      	ldr	r3, [r7, #8]
 8002a34:	6819      	ldr	r1, [r3, #0]
 8002a36:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 8002a3a:	4613      	mov	r3, r2
 8002a3c:	005b      	lsls	r3, r3, #1
 8002a3e:	4413      	add	r3, r2
 8002a40:	00db      	lsls	r3, r3, #3
 8002a42:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8002a46:	4413      	add	r3, r2
 8002a48:	3b3c      	subs	r3, #60	; 0x3c
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	4299      	cmp	r1, r3
 8002a4e:	d03c      	beq.n	8002aca <HAL_OSPIM_Config+0x4c2>
 8002a50:	68bb      	ldr	r3, [r7, #8]
 8002a52:	6859      	ldr	r1, [r3, #4]
 8002a54:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 8002a58:	4613      	mov	r3, r2
 8002a5a:	005b      	lsls	r3, r3, #1
 8002a5c:	4413      	add	r3, r2
 8002a5e:	00db      	lsls	r3, r3, #3
 8002a60:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8002a64:	4413      	add	r3, r2
 8002a66:	3b38      	subs	r3, #56	; 0x38
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	4299      	cmp	r1, r3
 8002a6c:	d02d      	beq.n	8002aca <HAL_OSPIM_Config+0x4c2>
        (cfg->NCSPort == IOM_cfg[other_instance].NCSPort) || (cfg->IOLowPort == IOM_cfg[other_instance].IOLowPort) ||
 8002a6e:	68bb      	ldr	r3, [r7, #8]
 8002a70:	6899      	ldr	r1, [r3, #8]
 8002a72:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 8002a76:	4613      	mov	r3, r2
 8002a78:	005b      	lsls	r3, r3, #1
 8002a7a:	4413      	add	r3, r2
 8002a7c:	00db      	lsls	r3, r3, #3
 8002a7e:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8002a82:	4413      	add	r3, r2
 8002a84:	3b34      	subs	r3, #52	; 0x34
 8002a86:	681b      	ldr	r3, [r3, #0]
    if ((cfg->ClkPort == IOM_cfg[other_instance].ClkPort) || (cfg->DQSPort == IOM_cfg[other_instance].DQSPort)     ||
 8002a88:	4299      	cmp	r1, r3
 8002a8a:	d01e      	beq.n	8002aca <HAL_OSPIM_Config+0x4c2>
        (cfg->NCSPort == IOM_cfg[other_instance].NCSPort) || (cfg->IOLowPort == IOM_cfg[other_instance].IOLowPort) ||
 8002a8c:	68bb      	ldr	r3, [r7, #8]
 8002a8e:	68d9      	ldr	r1, [r3, #12]
 8002a90:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 8002a94:	4613      	mov	r3, r2
 8002a96:	005b      	lsls	r3, r3, #1
 8002a98:	4413      	add	r3, r2
 8002a9a:	00db      	lsls	r3, r3, #3
 8002a9c:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8002aa0:	4413      	add	r3, r2
 8002aa2:	3b30      	subs	r3, #48	; 0x30
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	4299      	cmp	r1, r3
 8002aa8:	d00f      	beq.n	8002aca <HAL_OSPIM_Config+0x4c2>
        (cfg->IOHighPort == IOM_cfg[other_instance].IOHighPort))
 8002aaa:	68bb      	ldr	r3, [r7, #8]
 8002aac:	6919      	ldr	r1, [r3, #16]
 8002aae:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 8002ab2:	4613      	mov	r3, r2
 8002ab4:	005b      	lsls	r3, r3, #1
 8002ab6:	4413      	add	r3, r2
 8002ab8:	00db      	lsls	r3, r3, #3
 8002aba:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8002abe:	4413      	add	r3, r2
 8002ac0:	3b2c      	subs	r3, #44	; 0x2c
 8002ac2:	681b      	ldr	r3, [r3, #0]
        (cfg->NCSPort == IOM_cfg[other_instance].NCSPort) || (cfg->IOLowPort == IOM_cfg[other_instance].IOLowPort) ||
 8002ac4:	4299      	cmp	r1, r3
 8002ac6:	f040 811e 	bne.w	8002d06 <HAL_OSPIM_Config+0x6fe>
    {
      if ((cfg->ClkPort   == IOM_cfg[other_instance].ClkPort)   && 
 8002aca:	68bb      	ldr	r3, [r7, #8]
 8002acc:	6819      	ldr	r1, [r3, #0]
 8002ace:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 8002ad2:	4613      	mov	r3, r2
 8002ad4:	005b      	lsls	r3, r3, #1
 8002ad6:	4413      	add	r3, r2
 8002ad8:	00db      	lsls	r3, r3, #3
 8002ada:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8002ade:	4413      	add	r3, r2
 8002ae0:	3b3c      	subs	r3, #60	; 0x3c
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	4299      	cmp	r1, r3
 8002ae6:	d135      	bne.n	8002b54 <HAL_OSPIM_Config+0x54c>
          (cfg->DQSPort    == IOM_cfg[other_instance].DQSPort)  &&
 8002ae8:	68bb      	ldr	r3, [r7, #8]
 8002aea:	6859      	ldr	r1, [r3, #4]
 8002aec:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 8002af0:	4613      	mov	r3, r2
 8002af2:	005b      	lsls	r3, r3, #1
 8002af4:	4413      	add	r3, r2
 8002af6:	00db      	lsls	r3, r3, #3
 8002af8:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8002afc:	4413      	add	r3, r2
 8002afe:	3b38      	subs	r3, #56	; 0x38
 8002b00:	681b      	ldr	r3, [r3, #0]
      if ((cfg->ClkPort   == IOM_cfg[other_instance].ClkPort)   && 
 8002b02:	4299      	cmp	r1, r3
 8002b04:	d126      	bne.n	8002b54 <HAL_OSPIM_Config+0x54c>
          (cfg->IOLowPort == IOM_cfg[other_instance].IOLowPort) && 
 8002b06:	68bb      	ldr	r3, [r7, #8]
 8002b08:	68d9      	ldr	r1, [r3, #12]
 8002b0a:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 8002b0e:	4613      	mov	r3, r2
 8002b10:	005b      	lsls	r3, r3, #1
 8002b12:	4413      	add	r3, r2
 8002b14:	00db      	lsls	r3, r3, #3
 8002b16:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8002b1a:	4413      	add	r3, r2
 8002b1c:	3b30      	subs	r3, #48	; 0x30
 8002b1e:	681b      	ldr	r3, [r3, #0]
          (cfg->DQSPort    == IOM_cfg[other_instance].DQSPort)  &&
 8002b20:	4299      	cmp	r1, r3
 8002b22:	d117      	bne.n	8002b54 <HAL_OSPIM_Config+0x54c>
          (cfg->IOHighPort == IOM_cfg[other_instance].IOHighPort))
 8002b24:	68bb      	ldr	r3, [r7, #8]
 8002b26:	6919      	ldr	r1, [r3, #16]
 8002b28:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 8002b2c:	4613      	mov	r3, r2
 8002b2e:	005b      	lsls	r3, r3, #1
 8002b30:	4413      	add	r3, r2
 8002b32:	00db      	lsls	r3, r3, #3
 8002b34:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8002b38:	4413      	add	r3, r2
 8002b3a:	3b2c      	subs	r3, #44	; 0x2c
 8002b3c:	681b      	ldr	r3, [r3, #0]
          (cfg->IOLowPort == IOM_cfg[other_instance].IOLowPort) && 
 8002b3e:	4299      	cmp	r1, r3
 8002b40:	d108      	bne.n	8002b54 <HAL_OSPIM_Config+0x54c>
      {
        /* Multiplexing should be performed */
        SET_BIT(OCTOSPIM->CR, OCTOSPIM_CR_MUXEN);
 8002b42:	4b03      	ldr	r3, [pc, #12]	; (8002b50 <HAL_OSPIM_Config+0x548>)
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	4a02      	ldr	r2, [pc, #8]	; (8002b50 <HAL_OSPIM_Config+0x548>)
 8002b48:	f043 0301 	orr.w	r3, r3, #1
 8002b4c:	6013      	str	r3, [r2, #0]
 8002b4e:	e0da      	b.n	8002d06 <HAL_OSPIM_Config+0x6fe>
 8002b50:	5200b400 	.word	0x5200b400
      }
      else
      {
        CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[other_instance].ClkPort-1U)], OCTOSPIM_PCR_CLKEN);
 8002b54:	49c2      	ldr	r1, [pc, #776]	; (8002e60 <HAL_OSPIM_Config+0x858>)
 8002b56:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 8002b5a:	4613      	mov	r3, r2
 8002b5c:	005b      	lsls	r3, r3, #1
 8002b5e:	4413      	add	r3, r2
 8002b60:	00db      	lsls	r3, r3, #3
 8002b62:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8002b66:	4413      	add	r3, r2
 8002b68:	3b3c      	subs	r3, #60	; 0x3c
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	3b01      	subs	r3, #1
 8002b6e:	009b      	lsls	r3, r3, #2
 8002b70:	440b      	add	r3, r1
 8002b72:	6859      	ldr	r1, [r3, #4]
 8002b74:	48ba      	ldr	r0, [pc, #744]	; (8002e60 <HAL_OSPIM_Config+0x858>)
 8002b76:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 8002b7a:	4613      	mov	r3, r2
 8002b7c:	005b      	lsls	r3, r3, #1
 8002b7e:	4413      	add	r3, r2
 8002b80:	00db      	lsls	r3, r3, #3
 8002b82:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8002b86:	4413      	add	r3, r2
 8002b88:	3b3c      	subs	r3, #60	; 0x3c
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	3b01      	subs	r3, #1
 8002b8e:	f021 0201 	bic.w	r2, r1, #1
 8002b92:	009b      	lsls	r3, r3, #2
 8002b94:	4403      	add	r3, r0
 8002b96:	605a      	str	r2, [r3, #4]
        if (IOM_cfg[other_instance].DQSPort != 0U)
 8002b98:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 8002b9c:	4613      	mov	r3, r2
 8002b9e:	005b      	lsls	r3, r3, #1
 8002ba0:	4413      	add	r3, r2
 8002ba2:	00db      	lsls	r3, r3, #3
 8002ba4:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8002ba8:	4413      	add	r3, r2
 8002baa:	3b38      	subs	r3, #56	; 0x38
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	2b00      	cmp	r3, #0
 8002bb0:	d021      	beq.n	8002bf6 <HAL_OSPIM_Config+0x5ee>
        {
          CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[other_instance].DQSPort-1U)], OCTOSPIM_PCR_DQSEN);
 8002bb2:	49ab      	ldr	r1, [pc, #684]	; (8002e60 <HAL_OSPIM_Config+0x858>)
 8002bb4:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 8002bb8:	4613      	mov	r3, r2
 8002bba:	005b      	lsls	r3, r3, #1
 8002bbc:	4413      	add	r3, r2
 8002bbe:	00db      	lsls	r3, r3, #3
 8002bc0:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8002bc4:	4413      	add	r3, r2
 8002bc6:	3b38      	subs	r3, #56	; 0x38
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	3b01      	subs	r3, #1
 8002bcc:	009b      	lsls	r3, r3, #2
 8002bce:	440b      	add	r3, r1
 8002bd0:	6859      	ldr	r1, [r3, #4]
 8002bd2:	48a3      	ldr	r0, [pc, #652]	; (8002e60 <HAL_OSPIM_Config+0x858>)
 8002bd4:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 8002bd8:	4613      	mov	r3, r2
 8002bda:	005b      	lsls	r3, r3, #1
 8002bdc:	4413      	add	r3, r2
 8002bde:	00db      	lsls	r3, r3, #3
 8002be0:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8002be4:	4413      	add	r3, r2
 8002be6:	3b38      	subs	r3, #56	; 0x38
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	3b01      	subs	r3, #1
 8002bec:	f021 0210 	bic.w	r2, r1, #16
 8002bf0:	009b      	lsls	r3, r3, #2
 8002bf2:	4403      	add	r3, r0
 8002bf4:	605a      	str	r2, [r3, #4]
        }
        CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[other_instance].NCSPort-1U)], OCTOSPIM_PCR_NCSEN);
 8002bf6:	499a      	ldr	r1, [pc, #616]	; (8002e60 <HAL_OSPIM_Config+0x858>)
 8002bf8:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 8002bfc:	4613      	mov	r3, r2
 8002bfe:	005b      	lsls	r3, r3, #1
 8002c00:	4413      	add	r3, r2
 8002c02:	00db      	lsls	r3, r3, #3
 8002c04:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8002c08:	4413      	add	r3, r2
 8002c0a:	3b34      	subs	r3, #52	; 0x34
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	3b01      	subs	r3, #1
 8002c10:	009b      	lsls	r3, r3, #2
 8002c12:	440b      	add	r3, r1
 8002c14:	6859      	ldr	r1, [r3, #4]
 8002c16:	4892      	ldr	r0, [pc, #584]	; (8002e60 <HAL_OSPIM_Config+0x858>)
 8002c18:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 8002c1c:	4613      	mov	r3, r2
 8002c1e:	005b      	lsls	r3, r3, #1
 8002c20:	4413      	add	r3, r2
 8002c22:	00db      	lsls	r3, r3, #3
 8002c24:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8002c28:	4413      	add	r3, r2
 8002c2a:	3b34      	subs	r3, #52	; 0x34
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	3b01      	subs	r3, #1
 8002c30:	f421 7280 	bic.w	r2, r1, #256	; 0x100
 8002c34:	009b      	lsls	r3, r3, #2
 8002c36:	4403      	add	r3, r0
 8002c38:	605a      	str	r2, [r3, #4]
        if (IOM_cfg[other_instance].IOLowPort != HAL_OSPIM_IOPORT_NONE)
 8002c3a:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 8002c3e:	4613      	mov	r3, r2
 8002c40:	005b      	lsls	r3, r3, #1
 8002c42:	4413      	add	r3, r2
 8002c44:	00db      	lsls	r3, r3, #3
 8002c46:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8002c4a:	4413      	add	r3, r2
 8002c4c:	3b30      	subs	r3, #48	; 0x30
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	2b00      	cmp	r3, #0
 8002c52:	d025      	beq.n	8002ca0 <HAL_OSPIM_Config+0x698>
        {
          CLEAR_BIT(OCTOSPIM->PCR[((IOM_cfg[other_instance].IOLowPort-1U)& OSPI_IOM_PORT_MASK)],
 8002c54:	4982      	ldr	r1, [pc, #520]	; (8002e60 <HAL_OSPIM_Config+0x858>)
 8002c56:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 8002c5a:	4613      	mov	r3, r2
 8002c5c:	005b      	lsls	r3, r3, #1
 8002c5e:	4413      	add	r3, r2
 8002c60:	00db      	lsls	r3, r3, #3
 8002c62:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8002c66:	4413      	add	r3, r2
 8002c68:	3b30      	subs	r3, #48	; 0x30
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	3b01      	subs	r3, #1
 8002c6e:	f003 0301 	and.w	r3, r3, #1
 8002c72:	009b      	lsls	r3, r3, #2
 8002c74:	440b      	add	r3, r1
 8002c76:	6859      	ldr	r1, [r3, #4]
 8002c78:	4879      	ldr	r0, [pc, #484]	; (8002e60 <HAL_OSPIM_Config+0x858>)
 8002c7a:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 8002c7e:	4613      	mov	r3, r2
 8002c80:	005b      	lsls	r3, r3, #1
 8002c82:	4413      	add	r3, r2
 8002c84:	00db      	lsls	r3, r3, #3
 8002c86:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8002c8a:	4413      	add	r3, r2
 8002c8c:	3b30      	subs	r3, #48	; 0x30
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	3b01      	subs	r3, #1
 8002c92:	f003 0301 	and.w	r3, r3, #1
 8002c96:	f421 3280 	bic.w	r2, r1, #65536	; 0x10000
 8002c9a:	009b      	lsls	r3, r3, #2
 8002c9c:	4403      	add	r3, r0
 8002c9e:	605a      	str	r2, [r3, #4]
                    OCTOSPIM_PCR_IOLEN);
        }
        if (IOM_cfg[other_instance].IOHighPort != HAL_OSPIM_IOPORT_NONE)
 8002ca0:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 8002ca4:	4613      	mov	r3, r2
 8002ca6:	005b      	lsls	r3, r3, #1
 8002ca8:	4413      	add	r3, r2
 8002caa:	00db      	lsls	r3, r3, #3
 8002cac:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8002cb0:	4413      	add	r3, r2
 8002cb2:	3b2c      	subs	r3, #44	; 0x2c
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	2b00      	cmp	r3, #0
 8002cb8:	d025      	beq.n	8002d06 <HAL_OSPIM_Config+0x6fe>
        {
          CLEAR_BIT(OCTOSPIM->PCR[((IOM_cfg[other_instance].IOHighPort-1U)& OSPI_IOM_PORT_MASK)],
 8002cba:	4969      	ldr	r1, [pc, #420]	; (8002e60 <HAL_OSPIM_Config+0x858>)
 8002cbc:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 8002cc0:	4613      	mov	r3, r2
 8002cc2:	005b      	lsls	r3, r3, #1
 8002cc4:	4413      	add	r3, r2
 8002cc6:	00db      	lsls	r3, r3, #3
 8002cc8:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8002ccc:	4413      	add	r3, r2
 8002cce:	3b2c      	subs	r3, #44	; 0x2c
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	3b01      	subs	r3, #1
 8002cd4:	f003 0301 	and.w	r3, r3, #1
 8002cd8:	009b      	lsls	r3, r3, #2
 8002cda:	440b      	add	r3, r1
 8002cdc:	6859      	ldr	r1, [r3, #4]
 8002cde:	4860      	ldr	r0, [pc, #384]	; (8002e60 <HAL_OSPIM_Config+0x858>)
 8002ce0:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 8002ce4:	4613      	mov	r3, r2
 8002ce6:	005b      	lsls	r3, r3, #1
 8002ce8:	4413      	add	r3, r2
 8002cea:	00db      	lsls	r3, r3, #3
 8002cec:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8002cf0:	4413      	add	r3, r2
 8002cf2:	3b2c      	subs	r3, #44	; 0x2c
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	3b01      	subs	r3, #1
 8002cf8:	f003 0301 	and.w	r3, r3, #1
 8002cfc:	f021 7280 	bic.w	r2, r1, #16777216	; 0x1000000
 8002d00:	009b      	lsls	r3, r3, #2
 8002d02:	4403      	add	r3, r0
 8002d04:	605a      	str	r2, [r3, #4]
        }
      }
    }

    /******************** Activation of new configuration *********************/
        MODIFY_REG(OCTOSPIM->PCR[(cfg->NCSPort - 1U)], (OCTOSPIM_PCR_NCSEN | OCTOSPIM_PCR_NCSSRC),
 8002d06:	4a56      	ldr	r2, [pc, #344]	; (8002e60 <HAL_OSPIM_Config+0x858>)
 8002d08:	68bb      	ldr	r3, [r7, #8]
 8002d0a:	689b      	ldr	r3, [r3, #8]
 8002d0c:	3b01      	subs	r3, #1
 8002d0e:	009b      	lsls	r3, r3, #2
 8002d10:	4413      	add	r3, r2
 8002d12:	685b      	ldr	r3, [r3, #4]
 8002d14:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002d18:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002d1a:	025b      	lsls	r3, r3, #9
 8002d1c:	431a      	orrs	r2, r3
 8002d1e:	4950      	ldr	r1, [pc, #320]	; (8002e60 <HAL_OSPIM_Config+0x858>)
 8002d20:	68bb      	ldr	r3, [r7, #8]
 8002d22:	689b      	ldr	r3, [r3, #8]
 8002d24:	3b01      	subs	r3, #1
 8002d26:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002d2a:	009b      	lsls	r3, r3, #2
 8002d2c:	440b      	add	r3, r1
 8002d2e:	605a      	str	r2, [r3, #4]
                  (OCTOSPIM_PCR_NCSEN | (instance << OCTOSPIM_PCR_NCSSRC_Pos)));

    if ((cfg->Req2AckTime - 1U) > ((OCTOSPIM->CR & OCTOSPIM_CR_REQ2ACK_TIME) >> OCTOSPIM_CR_REQ2ACK_TIME_Pos))
 8002d30:	68bb      	ldr	r3, [r7, #8]
 8002d32:	695b      	ldr	r3, [r3, #20]
 8002d34:	1e5a      	subs	r2, r3, #1
 8002d36:	4b4a      	ldr	r3, [pc, #296]	; (8002e60 <HAL_OSPIM_Config+0x858>)
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	0c1b      	lsrs	r3, r3, #16
 8002d3c:	b2db      	uxtb	r3, r3
 8002d3e:	429a      	cmp	r2, r3
 8002d40:	d90a      	bls.n	8002d58 <HAL_OSPIM_Config+0x750>
    {
      MODIFY_REG(OCTOSPIM->CR, OCTOSPIM_CR_REQ2ACK_TIME, ((cfg->Req2AckTime - 1U) << OCTOSPIM_CR_REQ2ACK_TIME_Pos));
 8002d42:	4b47      	ldr	r3, [pc, #284]	; (8002e60 <HAL_OSPIM_Config+0x858>)
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	f423 027f 	bic.w	r2, r3, #16711680	; 0xff0000
 8002d4a:	68bb      	ldr	r3, [r7, #8]
 8002d4c:	695b      	ldr	r3, [r3, #20]
 8002d4e:	3b01      	subs	r3, #1
 8002d50:	041b      	lsls	r3, r3, #16
 8002d52:	4943      	ldr	r1, [pc, #268]	; (8002e60 <HAL_OSPIM_Config+0x858>)
 8002d54:	4313      	orrs	r3, r2
 8002d56:	600b      	str	r3, [r1, #0]
    }

    if ((OCTOSPIM->CR & OCTOSPIM_CR_MUXEN) != 0U)
 8002d58:	4b41      	ldr	r3, [pc, #260]	; (8002e60 <HAL_OSPIM_Config+0x858>)
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	f003 0301 	and.w	r3, r3, #1
 8002d60:	2b00      	cmp	r3, #0
 8002d62:	f000 809b 	beq.w	8002e9c <HAL_OSPIM_Config+0x894>
    {
      MODIFY_REG(OCTOSPIM->PCR[(cfg->ClkPort-1U)], (OCTOSPIM_PCR_CLKEN | OCTOSPIM_PCR_CLKSRC), OCTOSPIM_PCR_CLKEN);
 8002d66:	4a3e      	ldr	r2, [pc, #248]	; (8002e60 <HAL_OSPIM_Config+0x858>)
 8002d68:	68bb      	ldr	r3, [r7, #8]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	3b01      	subs	r3, #1
 8002d6e:	009b      	lsls	r3, r3, #2
 8002d70:	4413      	add	r3, r2
 8002d72:	685b      	ldr	r3, [r3, #4]
 8002d74:	f023 0203 	bic.w	r2, r3, #3
 8002d78:	4939      	ldr	r1, [pc, #228]	; (8002e60 <HAL_OSPIM_Config+0x858>)
 8002d7a:	68bb      	ldr	r3, [r7, #8]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	3b01      	subs	r3, #1
 8002d80:	f042 0201 	orr.w	r2, r2, #1
 8002d84:	009b      	lsls	r3, r3, #2
 8002d86:	440b      	add	r3, r1
 8002d88:	605a      	str	r2, [r3, #4]
      if (cfg->DQSPort != 0U)
 8002d8a:	68bb      	ldr	r3, [r7, #8]
 8002d8c:	685b      	ldr	r3, [r3, #4]
 8002d8e:	2b00      	cmp	r3, #0
 8002d90:	d011      	beq.n	8002db6 <HAL_OSPIM_Config+0x7ae>
      {
        MODIFY_REG(OCTOSPIM->PCR[(cfg->DQSPort-1U)], (OCTOSPIM_PCR_DQSEN | OCTOSPIM_PCR_DQSSRC), OCTOSPIM_PCR_DQSEN);
 8002d92:	4a33      	ldr	r2, [pc, #204]	; (8002e60 <HAL_OSPIM_Config+0x858>)
 8002d94:	68bb      	ldr	r3, [r7, #8]
 8002d96:	685b      	ldr	r3, [r3, #4]
 8002d98:	3b01      	subs	r3, #1
 8002d9a:	009b      	lsls	r3, r3, #2
 8002d9c:	4413      	add	r3, r2
 8002d9e:	685b      	ldr	r3, [r3, #4]
 8002da0:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8002da4:	492e      	ldr	r1, [pc, #184]	; (8002e60 <HAL_OSPIM_Config+0x858>)
 8002da6:	68bb      	ldr	r3, [r7, #8]
 8002da8:	685b      	ldr	r3, [r3, #4]
 8002daa:	3b01      	subs	r3, #1
 8002dac:	f042 0210 	orr.w	r2, r2, #16
 8002db0:	009b      	lsls	r3, r3, #2
 8002db2:	440b      	add	r3, r1
 8002db4:	605a      	str	r2, [r3, #4]
      }

      if ((cfg->IOLowPort & OCTOSPIM_PCR_IOLEN) != 0U)
 8002db6:	68bb      	ldr	r3, [r7, #8]
 8002db8:	68db      	ldr	r3, [r3, #12]
 8002dba:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002dbe:	2b00      	cmp	r3, #0
 8002dc0:	d016      	beq.n	8002df0 <HAL_OSPIM_Config+0x7e8>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOLowPort-1U)& OSPI_IOM_PORT_MASK)], 
 8002dc2:	4a27      	ldr	r2, [pc, #156]	; (8002e60 <HAL_OSPIM_Config+0x858>)
 8002dc4:	68bb      	ldr	r3, [r7, #8]
 8002dc6:	68db      	ldr	r3, [r3, #12]
 8002dc8:	3b01      	subs	r3, #1
 8002dca:	f003 0301 	and.w	r3, r3, #1
 8002dce:	009b      	lsls	r3, r3, #2
 8002dd0:	4413      	add	r3, r2
 8002dd2:	685b      	ldr	r3, [r3, #4]
 8002dd4:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8002dd8:	4921      	ldr	r1, [pc, #132]	; (8002e60 <HAL_OSPIM_Config+0x858>)
 8002dda:	68bb      	ldr	r3, [r7, #8]
 8002ddc:	68db      	ldr	r3, [r3, #12]
 8002dde:	3b01      	subs	r3, #1
 8002de0:	f003 0301 	and.w	r3, r3, #1
 8002de4:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8002de8:	009b      	lsls	r3, r3, #2
 8002dea:	440b      	add	r3, r1
 8002dec:	605a      	str	r2, [r3, #4]
 8002dee:	e019      	b.n	8002e24 <HAL_OSPIM_Config+0x81c>
                  (OCTOSPIM_PCR_IOLEN | OCTOSPIM_PCR_IOLSRC), OCTOSPIM_PCR_IOLEN);
      }
      else if (cfg->IOLowPort != HAL_OSPIM_IOPORT_NONE)
 8002df0:	68bb      	ldr	r3, [r7, #8]
 8002df2:	68db      	ldr	r3, [r3, #12]
 8002df4:	2b00      	cmp	r3, #0
 8002df6:	d015      	beq.n	8002e24 <HAL_OSPIM_Config+0x81c>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOLowPort-1U)& OSPI_IOM_PORT_MASK)], 
 8002df8:	4a19      	ldr	r2, [pc, #100]	; (8002e60 <HAL_OSPIM_Config+0x858>)
 8002dfa:	68bb      	ldr	r3, [r7, #8]
 8002dfc:	68db      	ldr	r3, [r3, #12]
 8002dfe:	3b01      	subs	r3, #1
 8002e00:	f003 0301 	and.w	r3, r3, #1
 8002e04:	009b      	lsls	r3, r3, #2
 8002e06:	4413      	add	r3, r2
 8002e08:	685b      	ldr	r3, [r3, #4]
 8002e0a:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 8002e0e:	4914      	ldr	r1, [pc, #80]	; (8002e60 <HAL_OSPIM_Config+0x858>)
 8002e10:	68bb      	ldr	r3, [r7, #8]
 8002e12:	68db      	ldr	r3, [r3, #12]
 8002e14:	3b01      	subs	r3, #1
 8002e16:	f003 0301 	and.w	r3, r3, #1
 8002e1a:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 8002e1e:	009b      	lsls	r3, r3, #2
 8002e20:	440b      	add	r3, r1
 8002e22:	605a      	str	r2, [r3, #4]
      else
      {
         /* Nothing to do */
      }

      if ((cfg->IOHighPort & OCTOSPIM_PCR_IOLEN) != 0U)
 8002e24:	68bb      	ldr	r3, [r7, #8]
 8002e26:	691b      	ldr	r3, [r3, #16]
 8002e28:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002e2c:	2b00      	cmp	r3, #0
 8002e2e:	d019      	beq.n	8002e64 <HAL_OSPIM_Config+0x85c>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOHighPort-1U)& OSPI_IOM_PORT_MASK)], 
 8002e30:	4a0b      	ldr	r2, [pc, #44]	; (8002e60 <HAL_OSPIM_Config+0x858>)
 8002e32:	68bb      	ldr	r3, [r7, #8]
 8002e34:	691b      	ldr	r3, [r3, #16]
 8002e36:	3b01      	subs	r3, #1
 8002e38:	f003 0301 	and.w	r3, r3, #1
 8002e3c:	009b      	lsls	r3, r3, #2
 8002e3e:	4413      	add	r3, r2
 8002e40:	685b      	ldr	r3, [r3, #4]
 8002e42:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8002e46:	4906      	ldr	r1, [pc, #24]	; (8002e60 <HAL_OSPIM_Config+0x858>)
 8002e48:	68bb      	ldr	r3, [r7, #8]
 8002e4a:	691b      	ldr	r3, [r3, #16]
 8002e4c:	3b01      	subs	r3, #1
 8002e4e:	f003 0301 	and.w	r3, r3, #1
 8002e52:	f442 3240 	orr.w	r2, r2, #196608	; 0x30000
 8002e56:	009b      	lsls	r3, r3, #2
 8002e58:	440b      	add	r3, r1
 8002e5a:	605a      	str	r2, [r3, #4]
 8002e5c:	e0c6      	b.n	8002fec <HAL_OSPIM_Config+0x9e4>
 8002e5e:	bf00      	nop
 8002e60:	5200b400 	.word	0x5200b400
                  (OCTOSPIM_PCR_IOLEN | OCTOSPIM_PCR_IOLSRC), (OCTOSPIM_PCR_IOLEN | OCTOSPIM_PCR_IOLSRC_0));
      }
      else if (cfg->IOHighPort != HAL_OSPIM_IOPORT_NONE)
 8002e64:	68bb      	ldr	r3, [r7, #8]
 8002e66:	691b      	ldr	r3, [r3, #16]
 8002e68:	2b00      	cmp	r3, #0
 8002e6a:	f000 80bf 	beq.w	8002fec <HAL_OSPIM_Config+0x9e4>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOHighPort-1U)& OSPI_IOM_PORT_MASK)], 
 8002e6e:	4a6e      	ldr	r2, [pc, #440]	; (8003028 <HAL_OSPIM_Config+0xa20>)
 8002e70:	68bb      	ldr	r3, [r7, #8]
 8002e72:	691b      	ldr	r3, [r3, #16]
 8002e74:	3b01      	subs	r3, #1
 8002e76:	f003 0301 	and.w	r3, r3, #1
 8002e7a:	009b      	lsls	r3, r3, #2
 8002e7c:	4413      	add	r3, r2
 8002e7e:	685b      	ldr	r3, [r3, #4]
 8002e80:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 8002e84:	4968      	ldr	r1, [pc, #416]	; (8003028 <HAL_OSPIM_Config+0xa20>)
 8002e86:	68bb      	ldr	r3, [r7, #8]
 8002e88:	691b      	ldr	r3, [r3, #16]
 8002e8a:	3b01      	subs	r3, #1
 8002e8c:	f003 0301 	and.w	r3, r3, #1
 8002e90:	f042 7240 	orr.w	r2, r2, #50331648	; 0x3000000
 8002e94:	009b      	lsls	r3, r3, #2
 8002e96:	440b      	add	r3, r1
 8002e98:	605a      	str	r2, [r3, #4]
 8002e9a:	e0a7      	b.n	8002fec <HAL_OSPIM_Config+0x9e4>
         /* Nothing to do */
      }
    }
    else
    {
      MODIFY_REG(OCTOSPIM->PCR[(cfg->ClkPort-1U)], (OCTOSPIM_PCR_CLKEN | OCTOSPIM_PCR_CLKSRC), 
 8002e9c:	4a62      	ldr	r2, [pc, #392]	; (8003028 <HAL_OSPIM_Config+0xa20>)
 8002e9e:	68bb      	ldr	r3, [r7, #8]
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	3b01      	subs	r3, #1
 8002ea4:	009b      	lsls	r3, r3, #2
 8002ea6:	4413      	add	r3, r2
 8002ea8:	685b      	ldr	r3, [r3, #4]
 8002eaa:	f023 0203 	bic.w	r2, r3, #3
 8002eae:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002eb0:	005b      	lsls	r3, r3, #1
 8002eb2:	431a      	orrs	r2, r3
 8002eb4:	495c      	ldr	r1, [pc, #368]	; (8003028 <HAL_OSPIM_Config+0xa20>)
 8002eb6:	68bb      	ldr	r3, [r7, #8]
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	3b01      	subs	r3, #1
 8002ebc:	f042 0201 	orr.w	r2, r2, #1
 8002ec0:	009b      	lsls	r3, r3, #2
 8002ec2:	440b      	add	r3, r1
 8002ec4:	605a      	str	r2, [r3, #4]
                (OCTOSPIM_PCR_CLKEN | (instance << OCTOSPIM_PCR_CLKSRC_Pos)));
      if (cfg->DQSPort != 0U)
 8002ec6:	68bb      	ldr	r3, [r7, #8]
 8002ec8:	685b      	ldr	r3, [r3, #4]
 8002eca:	2b00      	cmp	r3, #0
 8002ecc:	d014      	beq.n	8002ef8 <HAL_OSPIM_Config+0x8f0>
      {
        MODIFY_REG(OCTOSPIM->PCR[(cfg->DQSPort-1U)], (OCTOSPIM_PCR_DQSEN | OCTOSPIM_PCR_DQSSRC), 
 8002ece:	4a56      	ldr	r2, [pc, #344]	; (8003028 <HAL_OSPIM_Config+0xa20>)
 8002ed0:	68bb      	ldr	r3, [r7, #8]
 8002ed2:	685b      	ldr	r3, [r3, #4]
 8002ed4:	3b01      	subs	r3, #1
 8002ed6:	009b      	lsls	r3, r3, #2
 8002ed8:	4413      	add	r3, r2
 8002eda:	685b      	ldr	r3, [r3, #4]
 8002edc:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8002ee0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002ee2:	015b      	lsls	r3, r3, #5
 8002ee4:	431a      	orrs	r2, r3
 8002ee6:	4950      	ldr	r1, [pc, #320]	; (8003028 <HAL_OSPIM_Config+0xa20>)
 8002ee8:	68bb      	ldr	r3, [r7, #8]
 8002eea:	685b      	ldr	r3, [r3, #4]
 8002eec:	3b01      	subs	r3, #1
 8002eee:	f042 0210 	orr.w	r2, r2, #16
 8002ef2:	009b      	lsls	r3, r3, #2
 8002ef4:	440b      	add	r3, r1
 8002ef6:	605a      	str	r2, [r3, #4]
                  (OCTOSPIM_PCR_DQSEN | (instance << OCTOSPIM_PCR_DQSSRC_Pos)));
      }

      if ((cfg->IOLowPort & OCTOSPIM_PCR_IOLEN) != 0U)
 8002ef8:	68bb      	ldr	r3, [r7, #8]
 8002efa:	68db      	ldr	r3, [r3, #12]
 8002efc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002f00:	2b00      	cmp	r3, #0
 8002f02:	d019      	beq.n	8002f38 <HAL_OSPIM_Config+0x930>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOLowPort-1U)& OSPI_IOM_PORT_MASK)], 
 8002f04:	4a48      	ldr	r2, [pc, #288]	; (8003028 <HAL_OSPIM_Config+0xa20>)
 8002f06:	68bb      	ldr	r3, [r7, #8]
 8002f08:	68db      	ldr	r3, [r3, #12]
 8002f0a:	3b01      	subs	r3, #1
 8002f0c:	f003 0301 	and.w	r3, r3, #1
 8002f10:	009b      	lsls	r3, r3, #2
 8002f12:	4413      	add	r3, r2
 8002f14:	685b      	ldr	r3, [r3, #4]
 8002f16:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8002f1a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002f1c:	049b      	lsls	r3, r3, #18
 8002f1e:	431a      	orrs	r2, r3
 8002f20:	4941      	ldr	r1, [pc, #260]	; (8003028 <HAL_OSPIM_Config+0xa20>)
 8002f22:	68bb      	ldr	r3, [r7, #8]
 8002f24:	68db      	ldr	r3, [r3, #12]
 8002f26:	3b01      	subs	r3, #1
 8002f28:	f003 0301 	and.w	r3, r3, #1
 8002f2c:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8002f30:	009b      	lsls	r3, r3, #2
 8002f32:	440b      	add	r3, r1
 8002f34:	605a      	str	r2, [r3, #4]
 8002f36:	e01c      	b.n	8002f72 <HAL_OSPIM_Config+0x96a>
                  (OCTOSPIM_PCR_IOLEN | OCTOSPIM_PCR_IOLSRC),
                  (OCTOSPIM_PCR_IOLEN | (instance << (OCTOSPIM_PCR_IOLSRC_Pos+1U))));
      }
      else if (cfg->IOLowPort != HAL_OSPIM_IOPORT_NONE)
 8002f38:	68bb      	ldr	r3, [r7, #8]
 8002f3a:	68db      	ldr	r3, [r3, #12]
 8002f3c:	2b00      	cmp	r3, #0
 8002f3e:	d018      	beq.n	8002f72 <HAL_OSPIM_Config+0x96a>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOLowPort-1U)& OSPI_IOM_PORT_MASK)], 
 8002f40:	4a39      	ldr	r2, [pc, #228]	; (8003028 <HAL_OSPIM_Config+0xa20>)
 8002f42:	68bb      	ldr	r3, [r7, #8]
 8002f44:	68db      	ldr	r3, [r3, #12]
 8002f46:	3b01      	subs	r3, #1
 8002f48:	f003 0301 	and.w	r3, r3, #1
 8002f4c:	009b      	lsls	r3, r3, #2
 8002f4e:	4413      	add	r3, r2
 8002f50:	685b      	ldr	r3, [r3, #4]
 8002f52:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 8002f56:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002f58:	069b      	lsls	r3, r3, #26
 8002f5a:	431a      	orrs	r2, r3
 8002f5c:	4932      	ldr	r1, [pc, #200]	; (8003028 <HAL_OSPIM_Config+0xa20>)
 8002f5e:	68bb      	ldr	r3, [r7, #8]
 8002f60:	68db      	ldr	r3, [r3, #12]
 8002f62:	3b01      	subs	r3, #1
 8002f64:	f003 0301 	and.w	r3, r3, #1
 8002f68:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 8002f6c:	009b      	lsls	r3, r3, #2
 8002f6e:	440b      	add	r3, r1
 8002f70:	605a      	str	r2, [r3, #4]
      else
      {
         /* Nothing to do */
      }

      if ((cfg->IOHighPort & OCTOSPIM_PCR_IOLEN) != 0U)
 8002f72:	68bb      	ldr	r3, [r7, #8]
 8002f74:	691b      	ldr	r3, [r3, #16]
 8002f76:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002f7a:	2b00      	cmp	r3, #0
 8002f7c:	d019      	beq.n	8002fb2 <HAL_OSPIM_Config+0x9aa>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOHighPort-1U)& OSPI_IOM_PORT_MASK)], 
 8002f7e:	4a2a      	ldr	r2, [pc, #168]	; (8003028 <HAL_OSPIM_Config+0xa20>)
 8002f80:	68bb      	ldr	r3, [r7, #8]
 8002f82:	691b      	ldr	r3, [r3, #16]
 8002f84:	3b01      	subs	r3, #1
 8002f86:	f003 0301 	and.w	r3, r3, #1
 8002f8a:	009b      	lsls	r3, r3, #2
 8002f8c:	4413      	add	r3, r2
 8002f8e:	685b      	ldr	r3, [r3, #4]
 8002f90:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8002f94:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002f96:	049b      	lsls	r3, r3, #18
 8002f98:	431a      	orrs	r2, r3
 8002f9a:	4923      	ldr	r1, [pc, #140]	; (8003028 <HAL_OSPIM_Config+0xa20>)
 8002f9c:	68bb      	ldr	r3, [r7, #8]
 8002f9e:	691b      	ldr	r3, [r3, #16]
 8002fa0:	3b01      	subs	r3, #1
 8002fa2:	f003 0301 	and.w	r3, r3, #1
 8002fa6:	f442 3240 	orr.w	r2, r2, #196608	; 0x30000
 8002faa:	009b      	lsls	r3, r3, #2
 8002fac:	440b      	add	r3, r1
 8002fae:	605a      	str	r2, [r3, #4]
 8002fb0:	e01c      	b.n	8002fec <HAL_OSPIM_Config+0x9e4>
                  (OCTOSPIM_PCR_IOLEN | OCTOSPIM_PCR_IOLSRC),
                  (OCTOSPIM_PCR_IOLEN | OCTOSPIM_PCR_IOLSRC_0 | (instance << (OCTOSPIM_PCR_IOLSRC_Pos+1U))));
      }
      else if (cfg->IOHighPort != HAL_OSPIM_IOPORT_NONE)
 8002fb2:	68bb      	ldr	r3, [r7, #8]
 8002fb4:	691b      	ldr	r3, [r3, #16]
 8002fb6:	2b00      	cmp	r3, #0
 8002fb8:	d018      	beq.n	8002fec <HAL_OSPIM_Config+0x9e4>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOHighPort-1U)& OSPI_IOM_PORT_MASK)], 
 8002fba:	4a1b      	ldr	r2, [pc, #108]	; (8003028 <HAL_OSPIM_Config+0xa20>)
 8002fbc:	68bb      	ldr	r3, [r7, #8]
 8002fbe:	691b      	ldr	r3, [r3, #16]
 8002fc0:	3b01      	subs	r3, #1
 8002fc2:	f003 0301 	and.w	r3, r3, #1
 8002fc6:	009b      	lsls	r3, r3, #2
 8002fc8:	4413      	add	r3, r2
 8002fca:	685b      	ldr	r3, [r3, #4]
 8002fcc:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 8002fd0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002fd2:	069b      	lsls	r3, r3, #26
 8002fd4:	431a      	orrs	r2, r3
 8002fd6:	4914      	ldr	r1, [pc, #80]	; (8003028 <HAL_OSPIM_Config+0xa20>)
 8002fd8:	68bb      	ldr	r3, [r7, #8]
 8002fda:	691b      	ldr	r3, [r3, #16]
 8002fdc:	3b01      	subs	r3, #1
 8002fde:	f003 0301 	and.w	r3, r3, #1
 8002fe2:	f042 7240 	orr.w	r2, r2, #50331648	; 0x3000000
 8002fe6:	009b      	lsls	r3, r3, #2
 8002fe8:	440b      	add	r3, r1
 8002fea:	605a      	str	r2, [r3, #4]
         /* Nothing to do */
      }
    }

    /******* Re-enable both OctoSPI after configure OctoSPI IO Manager ********/
    if ((ospi_enabled & 0x1U) != 0U)
 8002fec:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8002ff0:	f003 0301 	and.w	r3, r3, #1
 8002ff4:	2b00      	cmp	r3, #0
 8002ff6:	d005      	beq.n	8003004 <HAL_OSPIM_Config+0x9fc>
    {
      SET_BIT(OCTOSPI1->CR, OCTOSPI_CR_EN);
 8002ff8:	4b0c      	ldr	r3, [pc, #48]	; (800302c <HAL_OSPIM_Config+0xa24>)
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	4a0b      	ldr	r2, [pc, #44]	; (800302c <HAL_OSPIM_Config+0xa24>)
 8002ffe:	f043 0301 	orr.w	r3, r3, #1
 8003002:	6013      	str	r3, [r2, #0]
    }
    if ((ospi_enabled & 0x2U) != 0U)
 8003004:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8003008:	f003 0302 	and.w	r3, r3, #2
 800300c:	2b00      	cmp	r3, #0
 800300e:	d005      	beq.n	800301c <HAL_OSPIM_Config+0xa14>
    {
      SET_BIT(OCTOSPI2->CR, OCTOSPI_CR_EN);
 8003010:	4b07      	ldr	r3, [pc, #28]	; (8003030 <HAL_OSPIM_Config+0xa28>)
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	4a06      	ldr	r2, [pc, #24]	; (8003030 <HAL_OSPIM_Config+0xa28>)
 8003016:	f043 0301 	orr.w	r3, r3, #1
 800301a:	6013      	str	r3, [r2, #0]
    }
  }

  /* Return function status */
  return status;
 800301c:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
}
 8003020:	4618      	mov	r0, r3
 8003022:	3750      	adds	r7, #80	; 0x50
 8003024:	46bd      	mov	sp, r7
 8003026:	bd80      	pop	{r7, pc}
 8003028:	5200b400 	.word	0x5200b400
 800302c:	52005000 	.word	0x52005000
 8003030:	5200a000 	.word	0x5200a000

08003034 <OSPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart : Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef OSPI_WaitFlagStateUntilTimeout(OSPI_HandleTypeDef *hospi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 8003034:	b580      	push	{r7, lr}
 8003036:	b084      	sub	sp, #16
 8003038:	af00      	add	r7, sp, #0
 800303a:	60f8      	str	r0, [r7, #12]
 800303c:	60b9      	str	r1, [r7, #8]
 800303e:	603b      	str	r3, [r7, #0]
 8003040:	4613      	mov	r3, r2
 8003042:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while((__HAL_OSPI_GET_FLAG(hospi, Flag)) != State)
 8003044:	e01a      	b.n	800307c <OSPI_WaitFlagStateUntilTimeout+0x48>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003046:	69bb      	ldr	r3, [r7, #24]
 8003048:	f1b3 3fff 	cmp.w	r3, #4294967295
 800304c:	d016      	beq.n	800307c <OSPI_WaitFlagStateUntilTimeout+0x48>
    {
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800304e:	f7fe fb79 	bl	8001744 <HAL_GetTick>
 8003052:	4602      	mov	r2, r0
 8003054:	683b      	ldr	r3, [r7, #0]
 8003056:	1ad3      	subs	r3, r2, r3
 8003058:	69ba      	ldr	r2, [r7, #24]
 800305a:	429a      	cmp	r2, r3
 800305c:	d302      	bcc.n	8003064 <OSPI_WaitFlagStateUntilTimeout+0x30>
 800305e:	69bb      	ldr	r3, [r7, #24]
 8003060:	2b00      	cmp	r3, #0
 8003062:	d10b      	bne.n	800307c <OSPI_WaitFlagStateUntilTimeout+0x48>
      {
        hospi->State     = HAL_OSPI_STATE_ERROR;
 8003064:	68fb      	ldr	r3, [r7, #12]
 8003066:	f44f 7200 	mov.w	r2, #512	; 0x200
 800306a:	655a      	str	r2, [r3, #84]	; 0x54
        hospi->ErrorCode |= HAL_OSPI_ERROR_TIMEOUT;
 800306c:	68fb      	ldr	r3, [r7, #12]
 800306e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003070:	f043 0201 	orr.w	r2, r3, #1
 8003074:	68fb      	ldr	r3, [r7, #12]
 8003076:	659a      	str	r2, [r3, #88]	; 0x58

        return HAL_ERROR;
 8003078:	2301      	movs	r3, #1
 800307a:	e00e      	b.n	800309a <OSPI_WaitFlagStateUntilTimeout+0x66>
  while((__HAL_OSPI_GET_FLAG(hospi, Flag)) != State)
 800307c:	68fb      	ldr	r3, [r7, #12]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	6a1a      	ldr	r2, [r3, #32]
 8003082:	68bb      	ldr	r3, [r7, #8]
 8003084:	4013      	ands	r3, r2
 8003086:	2b00      	cmp	r3, #0
 8003088:	bf14      	ite	ne
 800308a:	2301      	movne	r3, #1
 800308c:	2300      	moveq	r3, #0
 800308e:	b2db      	uxtb	r3, r3
 8003090:	461a      	mov	r2, r3
 8003092:	79fb      	ldrb	r3, [r7, #7]
 8003094:	429a      	cmp	r2, r3
 8003096:	d1d6      	bne.n	8003046 <OSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003098:	2300      	movs	r3, #0
}
 800309a:	4618      	mov	r0, r3
 800309c:	3710      	adds	r7, #16
 800309e:	46bd      	mov	sp, r7
 80030a0:	bd80      	pop	{r7, pc}
	...

080030a4 <OSPIM_GetConfig>:
  * @param  instance_nb : number of the instance
  * @param  cfg         : configuration of the IO Manager for the instance
  * @retval HAL status
  */
static HAL_StatusTypeDef OSPIM_GetConfig(uint8_t instance_nb, OSPIM_CfgTypeDef *cfg)
{
 80030a4:	b480      	push	{r7}
 80030a6:	b087      	sub	sp, #28
 80030a8:	af00      	add	r7, sp, #0
 80030aa:	4603      	mov	r3, r0
 80030ac:	6039      	str	r1, [r7, #0]
 80030ae:	71fb      	strb	r3, [r7, #7]
  HAL_StatusTypeDef status = HAL_OK;
 80030b0:	2300      	movs	r3, #0
 80030b2:	75fb      	strb	r3, [r7, #23]
  uint32_t reg; 
  uint32_t value = 0U;
 80030b4:	2300      	movs	r3, #0
 80030b6:	613b      	str	r3, [r7, #16]
  uint32_t index;

  if ((instance_nb == 0U) || (instance_nb > OSPI_NB_INSTANCE) || (cfg == NULL))
 80030b8:	79fb      	ldrb	r3, [r7, #7]
 80030ba:	2b00      	cmp	r3, #0
 80030bc:	d005      	beq.n	80030ca <OSPIM_GetConfig+0x26>
 80030be:	79fb      	ldrb	r3, [r7, #7]
 80030c0:	2b02      	cmp	r3, #2
 80030c2:	d802      	bhi.n	80030ca <OSPIM_GetConfig+0x26>
 80030c4:	683b      	ldr	r3, [r7, #0]
 80030c6:	2b00      	cmp	r3, #0
 80030c8:	d102      	bne.n	80030d0 <OSPIM_GetConfig+0x2c>
  {
    /* Invalid parameter -> error returned */
    status = HAL_ERROR;
 80030ca:	2301      	movs	r3, #1
 80030cc:	75fb      	strb	r3, [r7, #23]
 80030ce:	e098      	b.n	8003202 <OSPIM_GetConfig+0x15e>
  }
  else
  {
    /* Initialize the structure */
    cfg->ClkPort    = 0U;
 80030d0:	683b      	ldr	r3, [r7, #0]
 80030d2:	2200      	movs	r2, #0
 80030d4:	601a      	str	r2, [r3, #0]
    cfg->DQSPort    = 0U;
 80030d6:	683b      	ldr	r3, [r7, #0]
 80030d8:	2200      	movs	r2, #0
 80030da:	605a      	str	r2, [r3, #4]
    cfg->NCSPort    = 0U;
 80030dc:	683b      	ldr	r3, [r7, #0]
 80030de:	2200      	movs	r2, #0
 80030e0:	609a      	str	r2, [r3, #8]
    cfg->IOLowPort  = 0U;
 80030e2:	683b      	ldr	r3, [r7, #0]
 80030e4:	2200      	movs	r2, #0
 80030e6:	60da      	str	r2, [r3, #12]
    cfg->IOHighPort = 0U;
 80030e8:	683b      	ldr	r3, [r7, #0]
 80030ea:	2200      	movs	r2, #0
 80030ec:	611a      	str	r2, [r3, #16]

    if (instance_nb == 2U)
 80030ee:	79fb      	ldrb	r3, [r7, #7]
 80030f0:	2b02      	cmp	r3, #2
 80030f2:	d10b      	bne.n	800310c <OSPIM_GetConfig+0x68>
    {
      if ((OCTOSPIM->CR & OCTOSPIM_CR_MUXEN) == 0U)
 80030f4:	4b46      	ldr	r3, [pc, #280]	; (8003210 <OSPIM_GetConfig+0x16c>)
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	f003 0301 	and.w	r3, r3, #1
 80030fc:	2b00      	cmp	r3, #0
 80030fe:	d102      	bne.n	8003106 <OSPIM_GetConfig+0x62>
      {
        value = (OCTOSPIM_PCR_CLKSRC | OCTOSPIM_PCR_DQSSRC | OCTOSPIM_PCR_NCSSRC 
 8003100:	4b44      	ldr	r3, [pc, #272]	; (8003214 <OSPIM_GetConfig+0x170>)
 8003102:	613b      	str	r3, [r7, #16]
 8003104:	e002      	b.n	800310c <OSPIM_GetConfig+0x68>
               | OCTOSPIM_PCR_IOLSRC_1 | OCTOSPIM_PCR_IOHSRC_1);
      }
      else
      {
        value = OCTOSPIM_PCR_NCSSRC;
 8003106:	f44f 7300 	mov.w	r3, #512	; 0x200
 800310a:	613b      	str	r3, [r7, #16]
      }
    }

    /* Get the information about the instance */
    for (index = 0U; index < OSPI_IOM_NB_PORTS; index ++)
 800310c:	2300      	movs	r3, #0
 800310e:	60fb      	str	r3, [r7, #12]
 8003110:	e074      	b.n	80031fc <OSPIM_GetConfig+0x158>
    {
      reg = OCTOSPIM->PCR[index];
 8003112:	4a3f      	ldr	r2, [pc, #252]	; (8003210 <OSPIM_GetConfig+0x16c>)
 8003114:	68fb      	ldr	r3, [r7, #12]
 8003116:	009b      	lsls	r3, r3, #2
 8003118:	4413      	add	r3, r2
 800311a:	685b      	ldr	r3, [r3, #4]
 800311c:	60bb      	str	r3, [r7, #8]

      if ((reg & OCTOSPIM_PCR_CLKEN) != 0U)
 800311e:	68bb      	ldr	r3, [r7, #8]
 8003120:	f003 0301 	and.w	r3, r3, #1
 8003124:	2b00      	cmp	r3, #0
 8003126:	d00a      	beq.n	800313e <OSPIM_GetConfig+0x9a>
      {
        /* The clock is enabled on this port */
        if ((reg & OCTOSPIM_PCR_CLKSRC) == (value & OCTOSPIM_PCR_CLKSRC))
 8003128:	68ba      	ldr	r2, [r7, #8]
 800312a:	693b      	ldr	r3, [r7, #16]
 800312c:	4053      	eors	r3, r2
 800312e:	f003 0302 	and.w	r3, r3, #2
 8003132:	2b00      	cmp	r3, #0
 8003134:	d103      	bne.n	800313e <OSPIM_GetConfig+0x9a>
        {
          /* The clock correspond to the instance passed as parameter */
          cfg->ClkPort = index+1U;
 8003136:	68fb      	ldr	r3, [r7, #12]
 8003138:	1c5a      	adds	r2, r3, #1
 800313a:	683b      	ldr	r3, [r7, #0]
 800313c:	601a      	str	r2, [r3, #0]
        }
      }

      if ((reg & OCTOSPIM_PCR_DQSEN) != 0U)
 800313e:	68bb      	ldr	r3, [r7, #8]
 8003140:	f003 0310 	and.w	r3, r3, #16
 8003144:	2b00      	cmp	r3, #0
 8003146:	d00a      	beq.n	800315e <OSPIM_GetConfig+0xba>
      {
        /* The DQS is enabled on this port */
        if ((reg & OCTOSPIM_PCR_DQSSRC) == (value & OCTOSPIM_PCR_DQSSRC))
 8003148:	68ba      	ldr	r2, [r7, #8]
 800314a:	693b      	ldr	r3, [r7, #16]
 800314c:	4053      	eors	r3, r2
 800314e:	f003 0320 	and.w	r3, r3, #32
 8003152:	2b00      	cmp	r3, #0
 8003154:	d103      	bne.n	800315e <OSPIM_GetConfig+0xba>
        {
          /* The DQS correspond to the instance passed as parameter */
          cfg->DQSPort = index+1U;
 8003156:	68fb      	ldr	r3, [r7, #12]
 8003158:	1c5a      	adds	r2, r3, #1
 800315a:	683b      	ldr	r3, [r7, #0]
 800315c:	605a      	str	r2, [r3, #4]
        }
      }

      if ((reg & OCTOSPIM_PCR_NCSEN) != 0U)
 800315e:	68bb      	ldr	r3, [r7, #8]
 8003160:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003164:	2b00      	cmp	r3, #0
 8003166:	d00a      	beq.n	800317e <OSPIM_GetConfig+0xda>
      {
        /* The nCS is enabled on this port */
        if ((reg & OCTOSPIM_PCR_NCSSRC) == (value & OCTOSPIM_PCR_NCSSRC))
 8003168:	68ba      	ldr	r2, [r7, #8]
 800316a:	693b      	ldr	r3, [r7, #16]
 800316c:	4053      	eors	r3, r2
 800316e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003172:	2b00      	cmp	r3, #0
 8003174:	d103      	bne.n	800317e <OSPIM_GetConfig+0xda>
        {
          /* The nCS correspond to the instance passed as parameter */
          cfg->NCSPort = index+1U;
 8003176:	68fb      	ldr	r3, [r7, #12]
 8003178:	1c5a      	adds	r2, r3, #1
 800317a:	683b      	ldr	r3, [r7, #0]
 800317c:	609a      	str	r2, [r3, #8]
        }
      }

      if ((reg & OCTOSPIM_PCR_IOLEN) != 0U)
 800317e:	68bb      	ldr	r3, [r7, #8]
 8003180:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003184:	2b00      	cmp	r3, #0
 8003186:	d018      	beq.n	80031ba <OSPIM_GetConfig+0x116>
      {
        /* The IO Low is enabled on this port */
        if ((reg & OCTOSPIM_PCR_IOLSRC_1) == (value & OCTOSPIM_PCR_IOLSRC_1))
 8003188:	68ba      	ldr	r2, [r7, #8]
 800318a:	693b      	ldr	r3, [r7, #16]
 800318c:	4053      	eors	r3, r2
 800318e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003192:	2b00      	cmp	r3, #0
 8003194:	d111      	bne.n	80031ba <OSPIM_GetConfig+0x116>
        {
          /* The IO Low correspond to the instance passed as parameter */
          if ((reg & OCTOSPIM_PCR_IOLSRC_0) == 0U)
 8003196:	68bb      	ldr	r3, [r7, #8]
 8003198:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800319c:	2b00      	cmp	r3, #0
 800319e:	d106      	bne.n	80031ae <OSPIM_GetConfig+0x10a>
          {
            cfg->IOLowPort = (OCTOSPIM_PCR_IOLEN | (index+1U));
 80031a0:	68fb      	ldr	r3, [r7, #12]
 80031a2:	3301      	adds	r3, #1
 80031a4:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80031a8:	683b      	ldr	r3, [r7, #0]
 80031aa:	60da      	str	r2, [r3, #12]
 80031ac:	e005      	b.n	80031ba <OSPIM_GetConfig+0x116>
          }
          else
          {
            cfg->IOLowPort = (OCTOSPIM_PCR_IOHEN | (index+1U));
 80031ae:	68fb      	ldr	r3, [r7, #12]
 80031b0:	3301      	adds	r3, #1
 80031b2:	f043 7280 	orr.w	r2, r3, #16777216	; 0x1000000
 80031b6:	683b      	ldr	r3, [r7, #0]
 80031b8:	60da      	str	r2, [r3, #12]
          }
        }
      }

      if ((reg & OCTOSPIM_PCR_IOHEN) != 0U)
 80031ba:	68bb      	ldr	r3, [r7, #8]
 80031bc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80031c0:	2b00      	cmp	r3, #0
 80031c2:	d018      	beq.n	80031f6 <OSPIM_GetConfig+0x152>
      {
        /* The IO High is enabled on this port */
        if ((reg & OCTOSPIM_PCR_IOHSRC_1) == (value & OCTOSPIM_PCR_IOHSRC_1))
 80031c4:	68ba      	ldr	r2, [r7, #8]
 80031c6:	693b      	ldr	r3, [r7, #16]
 80031c8:	4053      	eors	r3, r2
 80031ca:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80031ce:	2b00      	cmp	r3, #0
 80031d0:	d111      	bne.n	80031f6 <OSPIM_GetConfig+0x152>
        {
          /* The IO High correspond to the instance passed as parameter */
          if ((reg & OCTOSPIM_PCR_IOHSRC_0) == 0U)
 80031d2:	68bb      	ldr	r3, [r7, #8]
 80031d4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80031d8:	2b00      	cmp	r3, #0
 80031da:	d106      	bne.n	80031ea <OSPIM_GetConfig+0x146>
          {
            cfg->IOHighPort = (OCTOSPIM_PCR_IOLEN | (index+1U));
 80031dc:	68fb      	ldr	r3, [r7, #12]
 80031de:	3301      	adds	r3, #1
 80031e0:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80031e4:	683b      	ldr	r3, [r7, #0]
 80031e6:	611a      	str	r2, [r3, #16]
 80031e8:	e005      	b.n	80031f6 <OSPIM_GetConfig+0x152>
          }
          else
          {
            cfg->IOHighPort = (OCTOSPIM_PCR_IOHEN | (index+1U));
 80031ea:	68fb      	ldr	r3, [r7, #12]
 80031ec:	3301      	adds	r3, #1
 80031ee:	f043 7280 	orr.w	r2, r3, #16777216	; 0x1000000
 80031f2:	683b      	ldr	r3, [r7, #0]
 80031f4:	611a      	str	r2, [r3, #16]
    for (index = 0U; index < OSPI_IOM_NB_PORTS; index ++)
 80031f6:	68fb      	ldr	r3, [r7, #12]
 80031f8:	3301      	adds	r3, #1
 80031fa:	60fb      	str	r3, [r7, #12]
 80031fc:	68fb      	ldr	r3, [r7, #12]
 80031fe:	2b01      	cmp	r3, #1
 8003200:	d987      	bls.n	8003112 <OSPIM_GetConfig+0x6e>
      }
    }
  }

  /* Return function status */
  return status;
 8003202:	7dfb      	ldrb	r3, [r7, #23]
}
 8003204:	4618      	mov	r0, r3
 8003206:	371c      	adds	r7, #28
 8003208:	46bd      	mov	sp, r7
 800320a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800320e:	4770      	bx	lr
 8003210:	5200b400 	.word	0x5200b400
 8003214:	04040222 	.word	0x04040222

08003218 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8003218:	b5f0      	push	{r4, r5, r6, r7, lr}
 800321a:	b08f      	sub	sp, #60	; 0x3c
 800321c:	af0a      	add	r7, sp, #40	; 0x28
 800321e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	2b00      	cmp	r3, #0
 8003224:	d101      	bne.n	800322a <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8003226:	2301      	movs	r3, #1
 8003228:	e116      	b.n	8003458 <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 8003236:	b2db      	uxtb	r3, r3
 8003238:	2b00      	cmp	r3, #0
 800323a:	d106      	bne.n	800324a <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	2200      	movs	r2, #0
 8003240:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8003244:	6878      	ldr	r0, [r7, #4]
 8003246:	f00e fcf3 	bl	8011c30 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	2203      	movs	r2, #3
 800324e:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8003252:	68bb      	ldr	r3, [r7, #8]
 8003254:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003256:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800325a:	2b00      	cmp	r3, #0
 800325c:	d102      	bne.n	8003264 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	2200      	movs	r2, #0
 8003262:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	4618      	mov	r0, r3
 800326a:	f008 fa7c 	bl	800b766 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	603b      	str	r3, [r7, #0]
 8003274:	687e      	ldr	r6, [r7, #4]
 8003276:	466d      	mov	r5, sp
 8003278:	f106 0410 	add.w	r4, r6, #16
 800327c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800327e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003280:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003282:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003284:	e894 0003 	ldmia.w	r4, {r0, r1}
 8003288:	e885 0003 	stmia.w	r5, {r0, r1}
 800328c:	1d33      	adds	r3, r6, #4
 800328e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003290:	6838      	ldr	r0, [r7, #0]
 8003292:	f008 f947 	bl	800b524 <USB_CoreInit>
 8003296:	4603      	mov	r3, r0
 8003298:	2b00      	cmp	r3, #0
 800329a:	d005      	beq.n	80032a8 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	2202      	movs	r2, #2
 80032a0:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 80032a4:	2301      	movs	r3, #1
 80032a6:	e0d7      	b.n	8003458 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	2100      	movs	r1, #0
 80032ae:	4618      	mov	r0, r3
 80032b0:	f008 fa6a 	bl	800b788 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80032b4:	2300      	movs	r3, #0
 80032b6:	73fb      	strb	r3, [r7, #15]
 80032b8:	e04a      	b.n	8003350 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80032ba:	7bfa      	ldrb	r2, [r7, #15]
 80032bc:	6879      	ldr	r1, [r7, #4]
 80032be:	4613      	mov	r3, r2
 80032c0:	00db      	lsls	r3, r3, #3
 80032c2:	1a9b      	subs	r3, r3, r2
 80032c4:	009b      	lsls	r3, r3, #2
 80032c6:	440b      	add	r3, r1
 80032c8:	333d      	adds	r3, #61	; 0x3d
 80032ca:	2201      	movs	r2, #1
 80032cc:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80032ce:	7bfa      	ldrb	r2, [r7, #15]
 80032d0:	6879      	ldr	r1, [r7, #4]
 80032d2:	4613      	mov	r3, r2
 80032d4:	00db      	lsls	r3, r3, #3
 80032d6:	1a9b      	subs	r3, r3, r2
 80032d8:	009b      	lsls	r3, r3, #2
 80032da:	440b      	add	r3, r1
 80032dc:	333c      	adds	r3, #60	; 0x3c
 80032de:	7bfa      	ldrb	r2, [r7, #15]
 80032e0:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80032e2:	7bfa      	ldrb	r2, [r7, #15]
 80032e4:	7bfb      	ldrb	r3, [r7, #15]
 80032e6:	b298      	uxth	r0, r3
 80032e8:	6879      	ldr	r1, [r7, #4]
 80032ea:	4613      	mov	r3, r2
 80032ec:	00db      	lsls	r3, r3, #3
 80032ee:	1a9b      	subs	r3, r3, r2
 80032f0:	009b      	lsls	r3, r3, #2
 80032f2:	440b      	add	r3, r1
 80032f4:	3342      	adds	r3, #66	; 0x42
 80032f6:	4602      	mov	r2, r0
 80032f8:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80032fa:	7bfa      	ldrb	r2, [r7, #15]
 80032fc:	6879      	ldr	r1, [r7, #4]
 80032fe:	4613      	mov	r3, r2
 8003300:	00db      	lsls	r3, r3, #3
 8003302:	1a9b      	subs	r3, r3, r2
 8003304:	009b      	lsls	r3, r3, #2
 8003306:	440b      	add	r3, r1
 8003308:	333f      	adds	r3, #63	; 0x3f
 800330a:	2200      	movs	r2, #0
 800330c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800330e:	7bfa      	ldrb	r2, [r7, #15]
 8003310:	6879      	ldr	r1, [r7, #4]
 8003312:	4613      	mov	r3, r2
 8003314:	00db      	lsls	r3, r3, #3
 8003316:	1a9b      	subs	r3, r3, r2
 8003318:	009b      	lsls	r3, r3, #2
 800331a:	440b      	add	r3, r1
 800331c:	3344      	adds	r3, #68	; 0x44
 800331e:	2200      	movs	r2, #0
 8003320:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8003322:	7bfa      	ldrb	r2, [r7, #15]
 8003324:	6879      	ldr	r1, [r7, #4]
 8003326:	4613      	mov	r3, r2
 8003328:	00db      	lsls	r3, r3, #3
 800332a:	1a9b      	subs	r3, r3, r2
 800332c:	009b      	lsls	r3, r3, #2
 800332e:	440b      	add	r3, r1
 8003330:	3348      	adds	r3, #72	; 0x48
 8003332:	2200      	movs	r2, #0
 8003334:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8003336:	7bfa      	ldrb	r2, [r7, #15]
 8003338:	6879      	ldr	r1, [r7, #4]
 800333a:	4613      	mov	r3, r2
 800333c:	00db      	lsls	r3, r3, #3
 800333e:	1a9b      	subs	r3, r3, r2
 8003340:	009b      	lsls	r3, r3, #2
 8003342:	440b      	add	r3, r1
 8003344:	3350      	adds	r3, #80	; 0x50
 8003346:	2200      	movs	r2, #0
 8003348:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800334a:	7bfb      	ldrb	r3, [r7, #15]
 800334c:	3301      	adds	r3, #1
 800334e:	73fb      	strb	r3, [r7, #15]
 8003350:	7bfa      	ldrb	r2, [r7, #15]
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	685b      	ldr	r3, [r3, #4]
 8003356:	429a      	cmp	r2, r3
 8003358:	d3af      	bcc.n	80032ba <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800335a:	2300      	movs	r3, #0
 800335c:	73fb      	strb	r3, [r7, #15]
 800335e:	e044      	b.n	80033ea <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8003360:	7bfa      	ldrb	r2, [r7, #15]
 8003362:	6879      	ldr	r1, [r7, #4]
 8003364:	4613      	mov	r3, r2
 8003366:	00db      	lsls	r3, r3, #3
 8003368:	1a9b      	subs	r3, r3, r2
 800336a:	009b      	lsls	r3, r3, #2
 800336c:	440b      	add	r3, r1
 800336e:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 8003372:	2200      	movs	r2, #0
 8003374:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8003376:	7bfa      	ldrb	r2, [r7, #15]
 8003378:	6879      	ldr	r1, [r7, #4]
 800337a:	4613      	mov	r3, r2
 800337c:	00db      	lsls	r3, r3, #3
 800337e:	1a9b      	subs	r3, r3, r2
 8003380:	009b      	lsls	r3, r3, #2
 8003382:	440b      	add	r3, r1
 8003384:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 8003388:	7bfa      	ldrb	r2, [r7, #15]
 800338a:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800338c:	7bfa      	ldrb	r2, [r7, #15]
 800338e:	6879      	ldr	r1, [r7, #4]
 8003390:	4613      	mov	r3, r2
 8003392:	00db      	lsls	r3, r3, #3
 8003394:	1a9b      	subs	r3, r3, r2
 8003396:	009b      	lsls	r3, r3, #2
 8003398:	440b      	add	r3, r1
 800339a:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 800339e:	2200      	movs	r2, #0
 80033a0:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80033a2:	7bfa      	ldrb	r2, [r7, #15]
 80033a4:	6879      	ldr	r1, [r7, #4]
 80033a6:	4613      	mov	r3, r2
 80033a8:	00db      	lsls	r3, r3, #3
 80033aa:	1a9b      	subs	r3, r3, r2
 80033ac:	009b      	lsls	r3, r3, #2
 80033ae:	440b      	add	r3, r1
 80033b0:	f503 7301 	add.w	r3, r3, #516	; 0x204
 80033b4:	2200      	movs	r2, #0
 80033b6:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80033b8:	7bfa      	ldrb	r2, [r7, #15]
 80033ba:	6879      	ldr	r1, [r7, #4]
 80033bc:	4613      	mov	r3, r2
 80033be:	00db      	lsls	r3, r3, #3
 80033c0:	1a9b      	subs	r3, r3, r2
 80033c2:	009b      	lsls	r3, r3, #2
 80033c4:	440b      	add	r3, r1
 80033c6:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80033ca:	2200      	movs	r2, #0
 80033cc:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80033ce:	7bfa      	ldrb	r2, [r7, #15]
 80033d0:	6879      	ldr	r1, [r7, #4]
 80033d2:	4613      	mov	r3, r2
 80033d4:	00db      	lsls	r3, r3, #3
 80033d6:	1a9b      	subs	r3, r3, r2
 80033d8:	009b      	lsls	r3, r3, #2
 80033da:	440b      	add	r3, r1
 80033dc:	f503 7304 	add.w	r3, r3, #528	; 0x210
 80033e0:	2200      	movs	r2, #0
 80033e2:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80033e4:	7bfb      	ldrb	r3, [r7, #15]
 80033e6:	3301      	adds	r3, #1
 80033e8:	73fb      	strb	r3, [r7, #15]
 80033ea:	7bfa      	ldrb	r2, [r7, #15]
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	685b      	ldr	r3, [r3, #4]
 80033f0:	429a      	cmp	r2, r3
 80033f2:	d3b5      	bcc.n	8003360 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	603b      	str	r3, [r7, #0]
 80033fa:	687e      	ldr	r6, [r7, #4]
 80033fc:	466d      	mov	r5, sp
 80033fe:	f106 0410 	add.w	r4, r6, #16
 8003402:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003404:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003406:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003408:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800340a:	e894 0003 	ldmia.w	r4, {r0, r1}
 800340e:	e885 0003 	stmia.w	r5, {r0, r1}
 8003412:	1d33      	adds	r3, r6, #4
 8003414:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003416:	6838      	ldr	r0, [r7, #0]
 8003418:	f008 f9e0 	bl	800b7dc <USB_DevInit>
 800341c:	4603      	mov	r3, r0
 800341e:	2b00      	cmp	r3, #0
 8003420:	d005      	beq.n	800342e <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	2202      	movs	r2, #2
 8003426:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 800342a:	2301      	movs	r3, #1
 800342c:	e014      	b.n	8003458 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	2200      	movs	r2, #0
 8003432:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	2201      	movs	r2, #1
 800343a:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003442:	2b01      	cmp	r3, #1
 8003444:	d102      	bne.n	800344c <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8003446:	6878      	ldr	r0, [r7, #4]
 8003448:	f001 f892 	bl	8004570 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	4618      	mov	r0, r3
 8003452:	f009 fa60 	bl	800c916 <USB_DevDisconnect>

  return HAL_OK;
 8003456:	2300      	movs	r3, #0
}
 8003458:	4618      	mov	r0, r3
 800345a:	3714      	adds	r7, #20
 800345c:	46bd      	mov	sp, r7
 800345e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003460 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8003460:	b580      	push	{r7, lr}
 8003462:	b084      	sub	sp, #16
 8003464:	af00      	add	r7, sp, #0
 8003466:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8003474:	2b01      	cmp	r3, #1
 8003476:	d101      	bne.n	800347c <HAL_PCD_Start+0x1c>
 8003478:	2302      	movs	r3, #2
 800347a:	e020      	b.n	80034be <HAL_PCD_Start+0x5e>
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	2201      	movs	r2, #1
 8003480:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003488:	2b01      	cmp	r3, #1
 800348a:	d109      	bne.n	80034a0 <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8003490:	2b01      	cmp	r3, #1
 8003492:	d005      	beq.n	80034a0 <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8003494:	68fb      	ldr	r3, [r7, #12]
 8003496:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003498:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800349c:	68fb      	ldr	r3, [r7, #12]
 800349e:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	4618      	mov	r0, r3
 80034a6:	f008 f94d 	bl	800b744 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	4618      	mov	r0, r3
 80034b0:	f009 fa10 	bl	800c8d4 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	2200      	movs	r2, #0
 80034b8:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 80034bc:	2300      	movs	r3, #0
}
 80034be:	4618      	mov	r0, r3
 80034c0:	3710      	adds	r7, #16
 80034c2:	46bd      	mov	sp, r7
 80034c4:	bd80      	pop	{r7, pc}

080034c6 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80034c6:	b590      	push	{r4, r7, lr}
 80034c8:	b08d      	sub	sp, #52	; 0x34
 80034ca:	af00      	add	r7, sp, #0
 80034cc:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80034d4:	6a3b      	ldr	r3, [r7, #32]
 80034d6:	61fb      	str	r3, [r7, #28]
  uint32_t i, ep_intr, epint, epnum;
  uint32_t fifoemptymsk, temp;
  USB_OTG_EPTypeDef *ep;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	4618      	mov	r0, r3
 80034de:	f009 face 	bl	800ca7e <USB_GetMode>
 80034e2:	4603      	mov	r3, r0
 80034e4:	2b00      	cmp	r3, #0
 80034e6:	f040 83ca 	bne.w	8003c7e <HAL_PCD_IRQHandler+0x7b8>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	4618      	mov	r0, r3
 80034f0:	f009 fa32 	bl	800c958 <USB_ReadInterrupts>
 80034f4:	4603      	mov	r3, r0
 80034f6:	2b00      	cmp	r3, #0
 80034f8:	f000 83c0 	beq.w	8003c7c <HAL_PCD_IRQHandler+0x7b6>
    {
      return;
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	4618      	mov	r0, r3
 8003502:	f009 fa29 	bl	800c958 <USB_ReadInterrupts>
 8003506:	4603      	mov	r3, r0
 8003508:	f003 0302 	and.w	r3, r3, #2
 800350c:	2b02      	cmp	r3, #2
 800350e:	d107      	bne.n	8003520 <HAL_PCD_IRQHandler+0x5a>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	695a      	ldr	r2, [r3, #20]
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	f002 0202 	and.w	r2, r2, #2
 800351e:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	4618      	mov	r0, r3
 8003526:	f009 fa17 	bl	800c958 <USB_ReadInterrupts>
 800352a:	4603      	mov	r3, r0
 800352c:	f003 0310 	and.w	r3, r3, #16
 8003530:	2b10      	cmp	r3, #16
 8003532:	d161      	bne.n	80035f8 <HAL_PCD_IRQHandler+0x132>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	699a      	ldr	r2, [r3, #24]
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	f022 0210 	bic.w	r2, r2, #16
 8003542:	619a      	str	r2, [r3, #24]

      temp = USBx->GRXSTSP;
 8003544:	6a3b      	ldr	r3, [r7, #32]
 8003546:	6a1b      	ldr	r3, [r3, #32]
 8003548:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 800354a:	69bb      	ldr	r3, [r7, #24]
 800354c:	f003 020f 	and.w	r2, r3, #15
 8003550:	4613      	mov	r3, r2
 8003552:	00db      	lsls	r3, r3, #3
 8003554:	1a9b      	subs	r3, r3, r2
 8003556:	009b      	lsls	r3, r3, #2
 8003558:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800355c:	687a      	ldr	r2, [r7, #4]
 800355e:	4413      	add	r3, r2
 8003560:	3304      	adds	r3, #4
 8003562:	617b      	str	r3, [r7, #20]

      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8003564:	69bb      	ldr	r3, [r7, #24]
 8003566:	0c5b      	lsrs	r3, r3, #17
 8003568:	f003 030f 	and.w	r3, r3, #15
 800356c:	2b02      	cmp	r3, #2
 800356e:	d124      	bne.n	80035ba <HAL_PCD_IRQHandler+0xf4>
      {
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 8003570:	69ba      	ldr	r2, [r7, #24]
 8003572:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8003576:	4013      	ands	r3, r2
 8003578:	2b00      	cmp	r3, #0
 800357a:	d035      	beq.n	80035e8 <HAL_PCD_IRQHandler+0x122>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800357c:	697b      	ldr	r3, [r7, #20]
 800357e:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));
 8003580:	69bb      	ldr	r3, [r7, #24]
 8003582:	091b      	lsrs	r3, r3, #4
 8003584:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8003586:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800358a:	b29b      	uxth	r3, r3
 800358c:	461a      	mov	r2, r3
 800358e:	6a38      	ldr	r0, [r7, #32]
 8003590:	f009 f84e 	bl	800c630 <USB_ReadPacket>

          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003594:	697b      	ldr	r3, [r7, #20]
 8003596:	68da      	ldr	r2, [r3, #12]
 8003598:	69bb      	ldr	r3, [r7, #24]
 800359a:	091b      	lsrs	r3, r3, #4
 800359c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80035a0:	441a      	add	r2, r3
 80035a2:	697b      	ldr	r3, [r7, #20]
 80035a4:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 80035a6:	697b      	ldr	r3, [r7, #20]
 80035a8:	699a      	ldr	r2, [r3, #24]
 80035aa:	69bb      	ldr	r3, [r7, #24]
 80035ac:	091b      	lsrs	r3, r3, #4
 80035ae:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80035b2:	441a      	add	r2, r3
 80035b4:	697b      	ldr	r3, [r7, #20]
 80035b6:	619a      	str	r2, [r3, #24]
 80035b8:	e016      	b.n	80035e8 <HAL_PCD_IRQHandler+0x122>
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 80035ba:	69bb      	ldr	r3, [r7, #24]
 80035bc:	0c5b      	lsrs	r3, r3, #17
 80035be:	f003 030f 	and.w	r3, r3, #15
 80035c2:	2b06      	cmp	r3, #6
 80035c4:	d110      	bne.n	80035e8 <HAL_PCD_IRQHandler+0x122>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80035cc:	2208      	movs	r2, #8
 80035ce:	4619      	mov	r1, r3
 80035d0:	6a38      	ldr	r0, [r7, #32]
 80035d2:	f009 f82d 	bl	800c630 <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 80035d6:	697b      	ldr	r3, [r7, #20]
 80035d8:	699a      	ldr	r2, [r3, #24]
 80035da:	69bb      	ldr	r3, [r7, #24]
 80035dc:	091b      	lsrs	r3, r3, #4
 80035de:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80035e2:	441a      	add	r2, r3
 80035e4:	697b      	ldr	r3, [r7, #20]
 80035e6:	619a      	str	r2, [r3, #24]
      }
      else
      {
        /* ... */
      }
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	699a      	ldr	r2, [r3, #24]
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	f042 0210 	orr.w	r2, r2, #16
 80035f6:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	4618      	mov	r0, r3
 80035fe:	f009 f9ab 	bl	800c958 <USB_ReadInterrupts>
 8003602:	4603      	mov	r3, r0
 8003604:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003608:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800360c:	d16e      	bne.n	80036ec <HAL_PCD_IRQHandler+0x226>
    {
      epnum = 0U;
 800360e:	2300      	movs	r3, #0
 8003610:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	4618      	mov	r0, r3
 8003618:	f009 f9b1 	bl	800c97e <USB_ReadDevAllOutEpInterrupt>
 800361c:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 800361e:	e062      	b.n	80036e6 <HAL_PCD_IRQHandler+0x220>
      {
        if ((ep_intr & 0x1U) != 0U)
 8003620:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003622:	f003 0301 	and.w	r3, r3, #1
 8003626:	2b00      	cmp	r3, #0
 8003628:	d057      	beq.n	80036da <HAL_PCD_IRQHandler+0x214>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003630:	b2d2      	uxtb	r2, r2
 8003632:	4611      	mov	r1, r2
 8003634:	4618      	mov	r0, r3
 8003636:	f009 f9d6 	bl	800c9e6 <USB_ReadDevOutEPInterrupt>
 800363a:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 800363c:	693b      	ldr	r3, [r7, #16]
 800363e:	f003 0301 	and.w	r3, r3, #1
 8003642:	2b00      	cmp	r3, #0
 8003644:	d00c      	beq.n	8003660 <HAL_PCD_IRQHandler+0x19a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8003646:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003648:	015a      	lsls	r2, r3, #5
 800364a:	69fb      	ldr	r3, [r7, #28]
 800364c:	4413      	add	r3, r2
 800364e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003652:	461a      	mov	r2, r3
 8003654:	2301      	movs	r3, #1
 8003656:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8003658:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800365a:	6878      	ldr	r0, [r7, #4]
 800365c:	f000 fdde 	bl	800421c <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8003660:	693b      	ldr	r3, [r7, #16]
 8003662:	f003 0308 	and.w	r3, r3, #8
 8003666:	2b00      	cmp	r3, #0
 8003668:	d00c      	beq.n	8003684 <HAL_PCD_IRQHandler+0x1be>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 800366a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800366c:	015a      	lsls	r2, r3, #5
 800366e:	69fb      	ldr	r3, [r7, #28]
 8003670:	4413      	add	r3, r2
 8003672:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003676:	461a      	mov	r2, r3
 8003678:	2308      	movs	r3, #8
 800367a:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 800367c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800367e:	6878      	ldr	r0, [r7, #4]
 8003680:	f000 fed8 	bl	8004434 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8003684:	693b      	ldr	r3, [r7, #16]
 8003686:	f003 0310 	and.w	r3, r3, #16
 800368a:	2b00      	cmp	r3, #0
 800368c:	d008      	beq.n	80036a0 <HAL_PCD_IRQHandler+0x1da>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 800368e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003690:	015a      	lsls	r2, r3, #5
 8003692:	69fb      	ldr	r3, [r7, #28]
 8003694:	4413      	add	r3, r2
 8003696:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800369a:	461a      	mov	r2, r3
 800369c:	2310      	movs	r3, #16
 800369e:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80036a0:	693b      	ldr	r3, [r7, #16]
 80036a2:	f003 0320 	and.w	r3, r3, #32
 80036a6:	2b00      	cmp	r3, #0
 80036a8:	d008      	beq.n	80036bc <HAL_PCD_IRQHandler+0x1f6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80036aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036ac:	015a      	lsls	r2, r3, #5
 80036ae:	69fb      	ldr	r3, [r7, #28]
 80036b0:	4413      	add	r3, r2
 80036b2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80036b6:	461a      	mov	r2, r3
 80036b8:	2320      	movs	r3, #32
 80036ba:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 80036bc:	693b      	ldr	r3, [r7, #16]
 80036be:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80036c2:	2b00      	cmp	r3, #0
 80036c4:	d009      	beq.n	80036da <HAL_PCD_IRQHandler+0x214>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 80036c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036c8:	015a      	lsls	r2, r3, #5
 80036ca:	69fb      	ldr	r3, [r7, #28]
 80036cc:	4413      	add	r3, r2
 80036ce:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80036d2:	461a      	mov	r2, r3
 80036d4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80036d8:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 80036da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036dc:	3301      	adds	r3, #1
 80036de:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 80036e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80036e2:	085b      	lsrs	r3, r3, #1
 80036e4:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 80036e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80036e8:	2b00      	cmp	r3, #0
 80036ea:	d199      	bne.n	8003620 <HAL_PCD_IRQHandler+0x15a>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	4618      	mov	r0, r3
 80036f2:	f009 f931 	bl	800c958 <USB_ReadInterrupts>
 80036f6:	4603      	mov	r3, r0
 80036f8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80036fc:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003700:	f040 80c0 	bne.w	8003884 <HAL_PCD_IRQHandler+0x3be>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	4618      	mov	r0, r3
 800370a:	f009 f952 	bl	800c9b2 <USB_ReadDevAllInEpInterrupt>
 800370e:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8003710:	2300      	movs	r3, #0
 8003712:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8003714:	e0b2      	b.n	800387c <HAL_PCD_IRQHandler+0x3b6>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8003716:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003718:	f003 0301 	and.w	r3, r3, #1
 800371c:	2b00      	cmp	r3, #0
 800371e:	f000 80a7 	beq.w	8003870 <HAL_PCD_IRQHandler+0x3aa>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003728:	b2d2      	uxtb	r2, r2
 800372a:	4611      	mov	r1, r2
 800372c:	4618      	mov	r0, r3
 800372e:	f009 f978 	bl	800ca22 <USB_ReadDevInEPInterrupt>
 8003732:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8003734:	693b      	ldr	r3, [r7, #16]
 8003736:	f003 0301 	and.w	r3, r3, #1
 800373a:	2b00      	cmp	r3, #0
 800373c:	d057      	beq.n	80037ee <HAL_PCD_IRQHandler+0x328>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800373e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003740:	f003 030f 	and.w	r3, r3, #15
 8003744:	2201      	movs	r2, #1
 8003746:	fa02 f303 	lsl.w	r3, r2, r3
 800374a:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800374c:	69fb      	ldr	r3, [r7, #28]
 800374e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003752:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003754:	68fb      	ldr	r3, [r7, #12]
 8003756:	43db      	mvns	r3, r3
 8003758:	69f9      	ldr	r1, [r7, #28]
 800375a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800375e:	4013      	ands	r3, r2
 8003760:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8003762:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003764:	015a      	lsls	r2, r3, #5
 8003766:	69fb      	ldr	r3, [r7, #28]
 8003768:	4413      	add	r3, r2
 800376a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800376e:	461a      	mov	r2, r3
 8003770:	2301      	movs	r3, #1
 8003772:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	691b      	ldr	r3, [r3, #16]
 8003778:	2b01      	cmp	r3, #1
 800377a:	d132      	bne.n	80037e2 <HAL_PCD_IRQHandler+0x31c>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 800377c:	6879      	ldr	r1, [r7, #4]
 800377e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003780:	4613      	mov	r3, r2
 8003782:	00db      	lsls	r3, r3, #3
 8003784:	1a9b      	subs	r3, r3, r2
 8003786:	009b      	lsls	r3, r3, #2
 8003788:	440b      	add	r3, r1
 800378a:	3348      	adds	r3, #72	; 0x48
 800378c:	6819      	ldr	r1, [r3, #0]
 800378e:	6878      	ldr	r0, [r7, #4]
 8003790:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003792:	4613      	mov	r3, r2
 8003794:	00db      	lsls	r3, r3, #3
 8003796:	1a9b      	subs	r3, r3, r2
 8003798:	009b      	lsls	r3, r3, #2
 800379a:	4403      	add	r3, r0
 800379c:	3344      	adds	r3, #68	; 0x44
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	4419      	add	r1, r3
 80037a2:	6878      	ldr	r0, [r7, #4]
 80037a4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80037a6:	4613      	mov	r3, r2
 80037a8:	00db      	lsls	r3, r3, #3
 80037aa:	1a9b      	subs	r3, r3, r2
 80037ac:	009b      	lsls	r3, r3, #2
 80037ae:	4403      	add	r3, r0
 80037b0:	3348      	adds	r3, #72	; 0x48
 80037b2:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 80037b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037b6:	2b00      	cmp	r3, #0
 80037b8:	d113      	bne.n	80037e2 <HAL_PCD_IRQHandler+0x31c>
 80037ba:	6879      	ldr	r1, [r7, #4]
 80037bc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80037be:	4613      	mov	r3, r2
 80037c0:	00db      	lsls	r3, r3, #3
 80037c2:	1a9b      	subs	r3, r3, r2
 80037c4:	009b      	lsls	r3, r3, #2
 80037c6:	440b      	add	r3, r1
 80037c8:	3350      	adds	r3, #80	; 0x50
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	2b00      	cmp	r3, #0
 80037ce:	d108      	bne.n	80037e2 <HAL_PCD_IRQHandler+0x31c>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	6818      	ldr	r0, [r3, #0]
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80037da:	461a      	mov	r2, r3
 80037dc:	2101      	movs	r1, #1
 80037de:	f009 f981 	bl	800cae4 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 80037e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037e4:	b2db      	uxtb	r3, r3
 80037e6:	4619      	mov	r1, r3
 80037e8:	6878      	ldr	r0, [r7, #4]
 80037ea:	f00e fb1c 	bl	8011e26 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 80037ee:	693b      	ldr	r3, [r7, #16]
 80037f0:	f003 0308 	and.w	r3, r3, #8
 80037f4:	2b00      	cmp	r3, #0
 80037f6:	d008      	beq.n	800380a <HAL_PCD_IRQHandler+0x344>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 80037f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037fa:	015a      	lsls	r2, r3, #5
 80037fc:	69fb      	ldr	r3, [r7, #28]
 80037fe:	4413      	add	r3, r2
 8003800:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003804:	461a      	mov	r2, r3
 8003806:	2308      	movs	r3, #8
 8003808:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 800380a:	693b      	ldr	r3, [r7, #16]
 800380c:	f003 0310 	and.w	r3, r3, #16
 8003810:	2b00      	cmp	r3, #0
 8003812:	d008      	beq.n	8003826 <HAL_PCD_IRQHandler+0x360>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8003814:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003816:	015a      	lsls	r2, r3, #5
 8003818:	69fb      	ldr	r3, [r7, #28]
 800381a:	4413      	add	r3, r2
 800381c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003820:	461a      	mov	r2, r3
 8003822:	2310      	movs	r3, #16
 8003824:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8003826:	693b      	ldr	r3, [r7, #16]
 8003828:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800382c:	2b00      	cmp	r3, #0
 800382e:	d008      	beq.n	8003842 <HAL_PCD_IRQHandler+0x37c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8003830:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003832:	015a      	lsls	r2, r3, #5
 8003834:	69fb      	ldr	r3, [r7, #28]
 8003836:	4413      	add	r3, r2
 8003838:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800383c:	461a      	mov	r2, r3
 800383e:	2340      	movs	r3, #64	; 0x40
 8003840:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8003842:	693b      	ldr	r3, [r7, #16]
 8003844:	f003 0302 	and.w	r3, r3, #2
 8003848:	2b00      	cmp	r3, #0
 800384a:	d008      	beq.n	800385e <HAL_PCD_IRQHandler+0x398>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 800384c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800384e:	015a      	lsls	r2, r3, #5
 8003850:	69fb      	ldr	r3, [r7, #28]
 8003852:	4413      	add	r3, r2
 8003854:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003858:	461a      	mov	r2, r3
 800385a:	2302      	movs	r3, #2
 800385c:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 800385e:	693b      	ldr	r3, [r7, #16]
 8003860:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003864:	2b00      	cmp	r3, #0
 8003866:	d003      	beq.n	8003870 <HAL_PCD_IRQHandler+0x3aa>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8003868:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800386a:	6878      	ldr	r0, [r7, #4]
 800386c:	f000 fc48 	bl	8004100 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8003870:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003872:	3301      	adds	r3, #1
 8003874:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8003876:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003878:	085b      	lsrs	r3, r3, #1
 800387a:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 800387c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800387e:	2b00      	cmp	r3, #0
 8003880:	f47f af49 	bne.w	8003716 <HAL_PCD_IRQHandler+0x250>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	4618      	mov	r0, r3
 800388a:	f009 f865 	bl	800c958 <USB_ReadInterrupts>
 800388e:	4603      	mov	r3, r0
 8003890:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003894:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003898:	d122      	bne.n	80038e0 <HAL_PCD_IRQHandler+0x41a>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800389a:	69fb      	ldr	r3, [r7, #28]
 800389c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80038a0:	685b      	ldr	r3, [r3, #4]
 80038a2:	69fa      	ldr	r2, [r7, #28]
 80038a4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80038a8:	f023 0301 	bic.w	r3, r3, #1
 80038ac:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 80038b4:	2b01      	cmp	r3, #1
 80038b6:	d108      	bne.n	80038ca <HAL_PCD_IRQHandler+0x404>
      {
        hpcd->LPM_State = LPM_L0;
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	2200      	movs	r2, #0
 80038bc:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 80038c0:	2100      	movs	r1, #0
 80038c2:	6878      	ldr	r0, [r7, #4]
 80038c4:	f000 fe78 	bl	80045b8 <HAL_PCDEx_LPM_Callback>
 80038c8:	e002      	b.n	80038d0 <HAL_PCD_IRQHandler+0x40a>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 80038ca:	6878      	ldr	r0, [r7, #4]
 80038cc:	f00e fb22 	bl	8011f14 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	695a      	ldr	r2, [r3, #20]
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 80038de:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	4618      	mov	r0, r3
 80038e6:	f009 f837 	bl	800c958 <USB_ReadInterrupts>
 80038ea:	4603      	mov	r3, r0
 80038ec:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80038f0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80038f4:	d112      	bne.n	800391c <HAL_PCD_IRQHandler+0x456>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 80038f6:	69fb      	ldr	r3, [r7, #28]
 80038f8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80038fc:	689b      	ldr	r3, [r3, #8]
 80038fe:	f003 0301 	and.w	r3, r3, #1
 8003902:	2b01      	cmp	r3, #1
 8003904:	d102      	bne.n	800390c <HAL_PCD_IRQHandler+0x446>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8003906:	6878      	ldr	r0, [r7, #4]
 8003908:	f00e fade 	bl	8011ec8 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	695a      	ldr	r2, [r3, #20]
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 800391a:	615a      	str	r2, [r3, #20]
    }

    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	4618      	mov	r0, r3
 8003922:	f009 f819 	bl	800c958 <USB_ReadInterrupts>
 8003926:	4603      	mov	r3, r0
 8003928:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800392c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003930:	d121      	bne.n	8003976 <HAL_PCD_IRQHandler+0x4b0>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	695a      	ldr	r2, [r3, #20]
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	f002 6200 	and.w	r2, r2, #134217728	; 0x8000000
 8003940:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 8003948:	2b00      	cmp	r3, #0
 800394a:	d111      	bne.n	8003970 <HAL_PCD_IRQHandler+0x4aa>
      {
        hpcd->LPM_State = LPM_L1;
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	2201      	movs	r2, #1
 8003950:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800395a:	089b      	lsrs	r3, r3, #2
 800395c:	f003 020f 	and.w	r2, r3, #15
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	f8c3 23f8 	str.w	r2, [r3, #1016]	; 0x3f8

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8003966:	2101      	movs	r1, #1
 8003968:	6878      	ldr	r0, [r7, #4]
 800396a:	f000 fe25 	bl	80045b8 <HAL_PCDEx_LPM_Callback>
 800396e:	e002      	b.n	8003976 <HAL_PCD_IRQHandler+0x4b0>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8003970:	6878      	ldr	r0, [r7, #4]
 8003972:	f00e faa9 	bl	8011ec8 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	4618      	mov	r0, r3
 800397c:	f008 ffec 	bl	800c958 <USB_ReadInterrupts>
 8003980:	4603      	mov	r3, r0
 8003982:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003986:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800398a:	f040 80c7 	bne.w	8003b1c <HAL_PCD_IRQHandler+0x656>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800398e:	69fb      	ldr	r3, [r7, #28]
 8003990:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003994:	685b      	ldr	r3, [r3, #4]
 8003996:	69fa      	ldr	r2, [r7, #28]
 8003998:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800399c:	f023 0301 	bic.w	r3, r3, #1
 80039a0:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	2110      	movs	r1, #16
 80039a8:	4618      	mov	r0, r3
 80039aa:	f008 f875 	bl	800ba98 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80039ae:	2300      	movs	r3, #0
 80039b0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80039b2:	e056      	b.n	8003a62 <HAL_PCD_IRQHandler+0x59c>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 80039b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80039b6:	015a      	lsls	r2, r3, #5
 80039b8:	69fb      	ldr	r3, [r7, #28]
 80039ba:	4413      	add	r3, r2
 80039bc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80039c0:	461a      	mov	r2, r3
 80039c2:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80039c6:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80039c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80039ca:	015a      	lsls	r2, r3, #5
 80039cc:	69fb      	ldr	r3, [r7, #28]
 80039ce:	4413      	add	r3, r2
 80039d0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80039d8:	0151      	lsls	r1, r2, #5
 80039da:	69fa      	ldr	r2, [r7, #28]
 80039dc:	440a      	add	r2, r1
 80039de:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80039e2:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80039e6:	6013      	str	r3, [r2, #0]
        USBx_INEP(i)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 80039e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80039ea:	015a      	lsls	r2, r3, #5
 80039ec:	69fb      	ldr	r3, [r7, #28]
 80039ee:	4413      	add	r3, r2
 80039f0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80039f8:	0151      	lsls	r1, r2, #5
 80039fa:	69fa      	ldr	r2, [r7, #28]
 80039fc:	440a      	add	r2, r1
 80039fe:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003a02:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8003a06:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8003a08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003a0a:	015a      	lsls	r2, r3, #5
 8003a0c:	69fb      	ldr	r3, [r7, #28]
 8003a0e:	4413      	add	r3, r2
 8003a10:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003a14:	461a      	mov	r2, r3
 8003a16:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8003a1a:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8003a1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003a1e:	015a      	lsls	r2, r3, #5
 8003a20:	69fb      	ldr	r3, [r7, #28]
 8003a22:	4413      	add	r3, r2
 8003a24:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003a2c:	0151      	lsls	r1, r2, #5
 8003a2e:	69fa      	ldr	r2, [r7, #28]
 8003a30:	440a      	add	r2, r1
 8003a32:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003a36:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8003a3a:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8003a3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003a3e:	015a      	lsls	r2, r3, #5
 8003a40:	69fb      	ldr	r3, [r7, #28]
 8003a42:	4413      	add	r3, r2
 8003a44:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003a4c:	0151      	lsls	r1, r2, #5
 8003a4e:	69fa      	ldr	r2, [r7, #28]
 8003a50:	440a      	add	r2, r1
 8003a52:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003a56:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8003a5a:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003a5c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003a5e:	3301      	adds	r3, #1
 8003a60:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	685b      	ldr	r3, [r3, #4]
 8003a66:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003a68:	429a      	cmp	r2, r3
 8003a6a:	d3a3      	bcc.n	80039b4 <HAL_PCD_IRQHandler+0x4ee>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8003a6c:	69fb      	ldr	r3, [r7, #28]
 8003a6e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003a72:	69db      	ldr	r3, [r3, #28]
 8003a74:	69fa      	ldr	r2, [r7, #28]
 8003a76:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003a7a:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8003a7e:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a84:	2b00      	cmp	r3, #0
 8003a86:	d016      	beq.n	8003ab6 <HAL_PCD_IRQHandler+0x5f0>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8003a88:	69fb      	ldr	r3, [r7, #28]
 8003a8a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003a8e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003a92:	69fa      	ldr	r2, [r7, #28]
 8003a94:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003a98:	f043 030b 	orr.w	r3, r3, #11
 8003a9c:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8003aa0:	69fb      	ldr	r3, [r7, #28]
 8003aa2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003aa6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003aa8:	69fa      	ldr	r2, [r7, #28]
 8003aaa:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003aae:	f043 030b 	orr.w	r3, r3, #11
 8003ab2:	6453      	str	r3, [r2, #68]	; 0x44
 8003ab4:	e015      	b.n	8003ae2 <HAL_PCD_IRQHandler+0x61c>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8003ab6:	69fb      	ldr	r3, [r7, #28]
 8003ab8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003abc:	695a      	ldr	r2, [r3, #20]
 8003abe:	69fb      	ldr	r3, [r7, #28]
 8003ac0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003ac4:	4619      	mov	r1, r3
 8003ac6:	f242 032b 	movw	r3, #8235	; 0x202b
 8003aca:	4313      	orrs	r3, r2
 8003acc:	614b      	str	r3, [r1, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8003ace:	69fb      	ldr	r3, [r7, #28]
 8003ad0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003ad4:	691b      	ldr	r3, [r3, #16]
 8003ad6:	69fa      	ldr	r2, [r7, #28]
 8003ad8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003adc:	f043 030b 	orr.w	r3, r3, #11
 8003ae0:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8003ae2:	69fb      	ldr	r3, [r7, #28]
 8003ae4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	69fa      	ldr	r2, [r7, #28]
 8003aec:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003af0:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8003af4:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	6818      	ldr	r0, [r3, #0]
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	691b      	ldr	r3, [r3, #16]
 8003afe:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8003b06:	461a      	mov	r2, r3
 8003b08:	f008 ffec 	bl	800cae4 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	695a      	ldr	r2, [r3, #20]
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8003b1a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	4618      	mov	r0, r3
 8003b22:	f008 ff19 	bl	800c958 <USB_ReadInterrupts>
 8003b26:	4603      	mov	r3, r0
 8003b28:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003b2c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003b30:	d124      	bne.n	8003b7c <HAL_PCD_IRQHandler+0x6b6>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	4618      	mov	r0, r3
 8003b38:	f008 ffb0 	bl	800ca9c <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	4618      	mov	r0, r3
 8003b42:	f008 f80a 	bl	800bb5a <USB_GetDevSpeed>
 8003b46:	4603      	mov	r3, r0
 8003b48:	461a      	mov	r2, r3
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	681c      	ldr	r4, [r3, #0]
 8003b52:	f001 fc75 	bl	8005440 <HAL_RCC_GetHCLKFreq>
 8003b56:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8003b5c:	b2db      	uxtb	r3, r3
 8003b5e:	461a      	mov	r2, r3
 8003b60:	4620      	mov	r0, r4
 8003b62:	f007 fd4d 	bl	800b600 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8003b66:	6878      	ldr	r0, [r7, #4]
 8003b68:	f00e f985 	bl	8011e76 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	695a      	ldr	r2, [r3, #20]
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8003b7a:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	4618      	mov	r0, r3
 8003b82:	f008 fee9 	bl	800c958 <USB_ReadInterrupts>
 8003b86:	4603      	mov	r3, r0
 8003b88:	f003 0308 	and.w	r3, r3, #8
 8003b8c:	2b08      	cmp	r3, #8
 8003b8e:	d10a      	bne.n	8003ba6 <HAL_PCD_IRQHandler+0x6e0>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8003b90:	6878      	ldr	r0, [r7, #4]
 8003b92:	f00e f962 	bl	8011e5a <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	695a      	ldr	r2, [r3, #20]
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	f002 0208 	and.w	r2, r2, #8
 8003ba4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	4618      	mov	r0, r3
 8003bac:	f008 fed4 	bl	800c958 <USB_ReadInterrupts>
 8003bb0:	4603      	mov	r3, r0
 8003bb2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003bb6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003bba:	d10f      	bne.n	8003bdc <HAL_PCD_IRQHandler+0x716>
    {
      /* Keep application checking the corresponding Iso IN endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8003bbc:	2300      	movs	r3, #0
 8003bbe:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8003bc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bc2:	b2db      	uxtb	r3, r3
 8003bc4:	4619      	mov	r1, r3
 8003bc6:	6878      	ldr	r0, [r7, #4]
 8003bc8:	f00e f9c4 	bl	8011f54 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	695a      	ldr	r2, [r3, #20]
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8003bda:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	4618      	mov	r0, r3
 8003be2:	f008 feb9 	bl	800c958 <USB_ReadInterrupts>
 8003be6:	4603      	mov	r3, r0
 8003be8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003bec:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003bf0:	d10f      	bne.n	8003c12 <HAL_PCD_IRQHandler+0x74c>
    {
      /* Keep application checking the corresponding Iso OUT endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8003bf2:	2300      	movs	r3, #0
 8003bf4:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8003bf6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bf8:	b2db      	uxtb	r3, r3
 8003bfa:	4619      	mov	r1, r3
 8003bfc:	6878      	ldr	r0, [r7, #4]
 8003bfe:	f00e f997 	bl	8011f30 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	695a      	ldr	r2, [r3, #20]
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8003c10:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	4618      	mov	r0, r3
 8003c18:	f008 fe9e 	bl	800c958 <USB_ReadInterrupts>
 8003c1c:	4603      	mov	r3, r0
 8003c1e:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8003c22:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003c26:	d10a      	bne.n	8003c3e <HAL_PCD_IRQHandler+0x778>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8003c28:	6878      	ldr	r0, [r7, #4]
 8003c2a:	f00e f9a5 	bl	8011f78 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	695a      	ldr	r2, [r3, #20]
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8003c3c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	4618      	mov	r0, r3
 8003c44:	f008 fe88 	bl	800c958 <USB_ReadInterrupts>
 8003c48:	4603      	mov	r3, r0
 8003c4a:	f003 0304 	and.w	r3, r3, #4
 8003c4e:	2b04      	cmp	r3, #4
 8003c50:	d115      	bne.n	8003c7e <HAL_PCD_IRQHandler+0x7b8>
    {
      temp = hpcd->Instance->GOTGINT;
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	685b      	ldr	r3, [r3, #4]
 8003c58:	61bb      	str	r3, [r7, #24]

      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8003c5a:	69bb      	ldr	r3, [r7, #24]
 8003c5c:	f003 0304 	and.w	r3, r3, #4
 8003c60:	2b00      	cmp	r3, #0
 8003c62:	d002      	beq.n	8003c6a <HAL_PCD_IRQHandler+0x7a4>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8003c64:	6878      	ldr	r0, [r7, #4]
 8003c66:	f00e f995 	bl	8011f94 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	6859      	ldr	r1, [r3, #4]
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	69ba      	ldr	r2, [r7, #24]
 8003c76:	430a      	orrs	r2, r1
 8003c78:	605a      	str	r2, [r3, #4]
 8003c7a:	e000      	b.n	8003c7e <HAL_PCD_IRQHandler+0x7b8>
      return;
 8003c7c:	bf00      	nop
    }
  }
}
 8003c7e:	3734      	adds	r7, #52	; 0x34
 8003c80:	46bd      	mov	sp, r7
 8003c82:	bd90      	pop	{r4, r7, pc}

08003c84 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8003c84:	b580      	push	{r7, lr}
 8003c86:	b082      	sub	sp, #8
 8003c88:	af00      	add	r7, sp, #0
 8003c8a:	6078      	str	r0, [r7, #4]
 8003c8c:	460b      	mov	r3, r1
 8003c8e:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8003c96:	2b01      	cmp	r3, #1
 8003c98:	d101      	bne.n	8003c9e <HAL_PCD_SetAddress+0x1a>
 8003c9a:	2302      	movs	r3, #2
 8003c9c:	e013      	b.n	8003cc6 <HAL_PCD_SetAddress+0x42>
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	2201      	movs	r2, #1
 8003ca2:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  hpcd->USB_Address = address;
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	78fa      	ldrb	r2, [r7, #3]
 8003caa:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	78fa      	ldrb	r2, [r7, #3]
 8003cb4:	4611      	mov	r1, r2
 8003cb6:	4618      	mov	r0, r3
 8003cb8:	f008 fde6 	bl	800c888 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	2200      	movs	r2, #0
 8003cc0:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8003cc4:	2300      	movs	r3, #0
}
 8003cc6:	4618      	mov	r0, r3
 8003cc8:	3708      	adds	r7, #8
 8003cca:	46bd      	mov	sp, r7
 8003ccc:	bd80      	pop	{r7, pc}

08003cce <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8003cce:	b580      	push	{r7, lr}
 8003cd0:	b084      	sub	sp, #16
 8003cd2:	af00      	add	r7, sp, #0
 8003cd4:	6078      	str	r0, [r7, #4]
 8003cd6:	4608      	mov	r0, r1
 8003cd8:	4611      	mov	r1, r2
 8003cda:	461a      	mov	r2, r3
 8003cdc:	4603      	mov	r3, r0
 8003cde:	70fb      	strb	r3, [r7, #3]
 8003ce0:	460b      	mov	r3, r1
 8003ce2:	803b      	strh	r3, [r7, #0]
 8003ce4:	4613      	mov	r3, r2
 8003ce6:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8003ce8:	2300      	movs	r3, #0
 8003cea:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003cec:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003cf0:	2b00      	cmp	r3, #0
 8003cf2:	da0f      	bge.n	8003d14 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003cf4:	78fb      	ldrb	r3, [r7, #3]
 8003cf6:	f003 020f 	and.w	r2, r3, #15
 8003cfa:	4613      	mov	r3, r2
 8003cfc:	00db      	lsls	r3, r3, #3
 8003cfe:	1a9b      	subs	r3, r3, r2
 8003d00:	009b      	lsls	r3, r3, #2
 8003d02:	3338      	adds	r3, #56	; 0x38
 8003d04:	687a      	ldr	r2, [r7, #4]
 8003d06:	4413      	add	r3, r2
 8003d08:	3304      	adds	r3, #4
 8003d0a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003d0c:	68fb      	ldr	r3, [r7, #12]
 8003d0e:	2201      	movs	r2, #1
 8003d10:	705a      	strb	r2, [r3, #1]
 8003d12:	e00f      	b.n	8003d34 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003d14:	78fb      	ldrb	r3, [r7, #3]
 8003d16:	f003 020f 	and.w	r2, r3, #15
 8003d1a:	4613      	mov	r3, r2
 8003d1c:	00db      	lsls	r3, r3, #3
 8003d1e:	1a9b      	subs	r3, r3, r2
 8003d20:	009b      	lsls	r3, r3, #2
 8003d22:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8003d26:	687a      	ldr	r2, [r7, #4]
 8003d28:	4413      	add	r3, r2
 8003d2a:	3304      	adds	r3, #4
 8003d2c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003d2e:	68fb      	ldr	r3, [r7, #12]
 8003d30:	2200      	movs	r2, #0
 8003d32:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8003d34:	78fb      	ldrb	r3, [r7, #3]
 8003d36:	f003 030f 	and.w	r3, r3, #15
 8003d3a:	b2da      	uxtb	r2, r3
 8003d3c:	68fb      	ldr	r3, [r7, #12]
 8003d3e:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8003d40:	883a      	ldrh	r2, [r7, #0]
 8003d42:	68fb      	ldr	r3, [r7, #12]
 8003d44:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8003d46:	68fb      	ldr	r3, [r7, #12]
 8003d48:	78ba      	ldrb	r2, [r7, #2]
 8003d4a:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8003d4c:	68fb      	ldr	r3, [r7, #12]
 8003d4e:	785b      	ldrb	r3, [r3, #1]
 8003d50:	2b00      	cmp	r3, #0
 8003d52:	d004      	beq.n	8003d5e <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8003d54:	68fb      	ldr	r3, [r7, #12]
 8003d56:	781b      	ldrb	r3, [r3, #0]
 8003d58:	b29a      	uxth	r2, r3
 8003d5a:	68fb      	ldr	r3, [r7, #12]
 8003d5c:	80da      	strh	r2, [r3, #6]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8003d5e:	78bb      	ldrb	r3, [r7, #2]
 8003d60:	2b02      	cmp	r3, #2
 8003d62:	d102      	bne.n	8003d6a <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8003d64:	68fb      	ldr	r3, [r7, #12]
 8003d66:	2200      	movs	r2, #0
 8003d68:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8003d70:	2b01      	cmp	r3, #1
 8003d72:	d101      	bne.n	8003d78 <HAL_PCD_EP_Open+0xaa>
 8003d74:	2302      	movs	r3, #2
 8003d76:	e00e      	b.n	8003d96 <HAL_PCD_EP_Open+0xc8>
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	2201      	movs	r2, #1
 8003d7c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	68f9      	ldr	r1, [r7, #12]
 8003d86:	4618      	mov	r0, r3
 8003d88:	f007 ff0c 	bl	800bba4 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	2200      	movs	r2, #0
 8003d90:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return ret;
 8003d94:	7afb      	ldrb	r3, [r7, #11]
}
 8003d96:	4618      	mov	r0, r3
 8003d98:	3710      	adds	r7, #16
 8003d9a:	46bd      	mov	sp, r7
 8003d9c:	bd80      	pop	{r7, pc}

08003d9e <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003d9e:	b580      	push	{r7, lr}
 8003da0:	b084      	sub	sp, #16
 8003da2:	af00      	add	r7, sp, #0
 8003da4:	6078      	str	r0, [r7, #4]
 8003da6:	460b      	mov	r3, r1
 8003da8:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003daa:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003dae:	2b00      	cmp	r3, #0
 8003db0:	da0f      	bge.n	8003dd2 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003db2:	78fb      	ldrb	r3, [r7, #3]
 8003db4:	f003 020f 	and.w	r2, r3, #15
 8003db8:	4613      	mov	r3, r2
 8003dba:	00db      	lsls	r3, r3, #3
 8003dbc:	1a9b      	subs	r3, r3, r2
 8003dbe:	009b      	lsls	r3, r3, #2
 8003dc0:	3338      	adds	r3, #56	; 0x38
 8003dc2:	687a      	ldr	r2, [r7, #4]
 8003dc4:	4413      	add	r3, r2
 8003dc6:	3304      	adds	r3, #4
 8003dc8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003dca:	68fb      	ldr	r3, [r7, #12]
 8003dcc:	2201      	movs	r2, #1
 8003dce:	705a      	strb	r2, [r3, #1]
 8003dd0:	e00f      	b.n	8003df2 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003dd2:	78fb      	ldrb	r3, [r7, #3]
 8003dd4:	f003 020f 	and.w	r2, r3, #15
 8003dd8:	4613      	mov	r3, r2
 8003dda:	00db      	lsls	r3, r3, #3
 8003ddc:	1a9b      	subs	r3, r3, r2
 8003dde:	009b      	lsls	r3, r3, #2
 8003de0:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8003de4:	687a      	ldr	r2, [r7, #4]
 8003de6:	4413      	add	r3, r2
 8003de8:	3304      	adds	r3, #4
 8003dea:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003dec:	68fb      	ldr	r3, [r7, #12]
 8003dee:	2200      	movs	r2, #0
 8003df0:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8003df2:	78fb      	ldrb	r3, [r7, #3]
 8003df4:	f003 030f 	and.w	r3, r3, #15
 8003df8:	b2da      	uxtb	r2, r3
 8003dfa:	68fb      	ldr	r3, [r7, #12]
 8003dfc:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8003e04:	2b01      	cmp	r3, #1
 8003e06:	d101      	bne.n	8003e0c <HAL_PCD_EP_Close+0x6e>
 8003e08:	2302      	movs	r3, #2
 8003e0a:	e00e      	b.n	8003e2a <HAL_PCD_EP_Close+0x8c>
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	2201      	movs	r2, #1
 8003e10:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	68f9      	ldr	r1, [r7, #12]
 8003e1a:	4618      	mov	r0, r3
 8003e1c:	f007 ff4a 	bl	800bcb4 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	2200      	movs	r2, #0
 8003e24:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 8003e28:	2300      	movs	r3, #0
}
 8003e2a:	4618      	mov	r0, r3
 8003e2c:	3710      	adds	r7, #16
 8003e2e:	46bd      	mov	sp, r7
 8003e30:	bd80      	pop	{r7, pc}

08003e32 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003e32:	b580      	push	{r7, lr}
 8003e34:	b086      	sub	sp, #24
 8003e36:	af00      	add	r7, sp, #0
 8003e38:	60f8      	str	r0, [r7, #12]
 8003e3a:	607a      	str	r2, [r7, #4]
 8003e3c:	603b      	str	r3, [r7, #0]
 8003e3e:	460b      	mov	r3, r1
 8003e40:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003e42:	7afb      	ldrb	r3, [r7, #11]
 8003e44:	f003 020f 	and.w	r2, r3, #15
 8003e48:	4613      	mov	r3, r2
 8003e4a:	00db      	lsls	r3, r3, #3
 8003e4c:	1a9b      	subs	r3, r3, r2
 8003e4e:	009b      	lsls	r3, r3, #2
 8003e50:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8003e54:	68fa      	ldr	r2, [r7, #12]
 8003e56:	4413      	add	r3, r2
 8003e58:	3304      	adds	r3, #4
 8003e5a:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003e5c:	697b      	ldr	r3, [r7, #20]
 8003e5e:	687a      	ldr	r2, [r7, #4]
 8003e60:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8003e62:	697b      	ldr	r3, [r7, #20]
 8003e64:	683a      	ldr	r2, [r7, #0]
 8003e66:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8003e68:	697b      	ldr	r3, [r7, #20]
 8003e6a:	2200      	movs	r2, #0
 8003e6c:	619a      	str	r2, [r3, #24]
  ep->is_in = 0U;
 8003e6e:	697b      	ldr	r3, [r7, #20]
 8003e70:	2200      	movs	r2, #0
 8003e72:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003e74:	7afb      	ldrb	r3, [r7, #11]
 8003e76:	f003 030f 	and.w	r3, r3, #15
 8003e7a:	b2da      	uxtb	r2, r3
 8003e7c:	697b      	ldr	r3, [r7, #20]
 8003e7e:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8003e80:	68fb      	ldr	r3, [r7, #12]
 8003e82:	691b      	ldr	r3, [r3, #16]
 8003e84:	2b01      	cmp	r3, #1
 8003e86:	d102      	bne.n	8003e8e <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8003e88:	687a      	ldr	r2, [r7, #4]
 8003e8a:	697b      	ldr	r3, [r7, #20]
 8003e8c:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003e8e:	7afb      	ldrb	r3, [r7, #11]
 8003e90:	f003 030f 	and.w	r3, r3, #15
 8003e94:	2b00      	cmp	r3, #0
 8003e96:	d109      	bne.n	8003eac <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003e98:	68fb      	ldr	r3, [r7, #12]
 8003e9a:	6818      	ldr	r0, [r3, #0]
 8003e9c:	68fb      	ldr	r3, [r7, #12]
 8003e9e:	691b      	ldr	r3, [r3, #16]
 8003ea0:	b2db      	uxtb	r3, r3
 8003ea2:	461a      	mov	r2, r3
 8003ea4:	6979      	ldr	r1, [r7, #20]
 8003ea6:	f008 fa2d 	bl	800c304 <USB_EP0StartXfer>
 8003eaa:	e008      	b.n	8003ebe <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003eac:	68fb      	ldr	r3, [r7, #12]
 8003eae:	6818      	ldr	r0, [r3, #0]
 8003eb0:	68fb      	ldr	r3, [r7, #12]
 8003eb2:	691b      	ldr	r3, [r3, #16]
 8003eb4:	b2db      	uxtb	r3, r3
 8003eb6:	461a      	mov	r2, r3
 8003eb8:	6979      	ldr	r1, [r7, #20]
 8003eba:	f007 ffd7 	bl	800be6c <USB_EPStartXfer>
  }

  return HAL_OK;
 8003ebe:	2300      	movs	r3, #0
}
 8003ec0:	4618      	mov	r0, r3
 8003ec2:	3718      	adds	r7, #24
 8003ec4:	46bd      	mov	sp, r7
 8003ec6:	bd80      	pop	{r7, pc}

08003ec8 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003ec8:	b480      	push	{r7}
 8003eca:	b083      	sub	sp, #12
 8003ecc:	af00      	add	r7, sp, #0
 8003ece:	6078      	str	r0, [r7, #4]
 8003ed0:	460b      	mov	r3, r1
 8003ed2:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8003ed4:	78fb      	ldrb	r3, [r7, #3]
 8003ed6:	f003 020f 	and.w	r2, r3, #15
 8003eda:	6879      	ldr	r1, [r7, #4]
 8003edc:	4613      	mov	r3, r2
 8003ede:	00db      	lsls	r3, r3, #3
 8003ee0:	1a9b      	subs	r3, r3, r2
 8003ee2:	009b      	lsls	r3, r3, #2
 8003ee4:	440b      	add	r3, r1
 8003ee6:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8003eea:	681b      	ldr	r3, [r3, #0]
}
 8003eec:	4618      	mov	r0, r3
 8003eee:	370c      	adds	r7, #12
 8003ef0:	46bd      	mov	sp, r7
 8003ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ef6:	4770      	bx	lr

08003ef8 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003ef8:	b580      	push	{r7, lr}
 8003efa:	b086      	sub	sp, #24
 8003efc:	af00      	add	r7, sp, #0
 8003efe:	60f8      	str	r0, [r7, #12]
 8003f00:	607a      	str	r2, [r7, #4]
 8003f02:	603b      	str	r3, [r7, #0]
 8003f04:	460b      	mov	r3, r1
 8003f06:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003f08:	7afb      	ldrb	r3, [r7, #11]
 8003f0a:	f003 020f 	and.w	r2, r3, #15
 8003f0e:	4613      	mov	r3, r2
 8003f10:	00db      	lsls	r3, r3, #3
 8003f12:	1a9b      	subs	r3, r3, r2
 8003f14:	009b      	lsls	r3, r3, #2
 8003f16:	3338      	adds	r3, #56	; 0x38
 8003f18:	68fa      	ldr	r2, [r7, #12]
 8003f1a:	4413      	add	r3, r2
 8003f1c:	3304      	adds	r3, #4
 8003f1e:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003f20:	697b      	ldr	r3, [r7, #20]
 8003f22:	687a      	ldr	r2, [r7, #4]
 8003f24:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8003f26:	697b      	ldr	r3, [r7, #20]
 8003f28:	683a      	ldr	r2, [r7, #0]
 8003f2a:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8003f2c:	697b      	ldr	r3, [r7, #20]
 8003f2e:	2200      	movs	r2, #0
 8003f30:	619a      	str	r2, [r3, #24]
  ep->is_in = 1U;
 8003f32:	697b      	ldr	r3, [r7, #20]
 8003f34:	2201      	movs	r2, #1
 8003f36:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003f38:	7afb      	ldrb	r3, [r7, #11]
 8003f3a:	f003 030f 	and.w	r3, r3, #15
 8003f3e:	b2da      	uxtb	r2, r3
 8003f40:	697b      	ldr	r3, [r7, #20]
 8003f42:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8003f44:	68fb      	ldr	r3, [r7, #12]
 8003f46:	691b      	ldr	r3, [r3, #16]
 8003f48:	2b01      	cmp	r3, #1
 8003f4a:	d102      	bne.n	8003f52 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8003f4c:	687a      	ldr	r2, [r7, #4]
 8003f4e:	697b      	ldr	r3, [r7, #20]
 8003f50:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003f52:	7afb      	ldrb	r3, [r7, #11]
 8003f54:	f003 030f 	and.w	r3, r3, #15
 8003f58:	2b00      	cmp	r3, #0
 8003f5a:	d109      	bne.n	8003f70 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003f5c:	68fb      	ldr	r3, [r7, #12]
 8003f5e:	6818      	ldr	r0, [r3, #0]
 8003f60:	68fb      	ldr	r3, [r7, #12]
 8003f62:	691b      	ldr	r3, [r3, #16]
 8003f64:	b2db      	uxtb	r3, r3
 8003f66:	461a      	mov	r2, r3
 8003f68:	6979      	ldr	r1, [r7, #20]
 8003f6a:	f008 f9cb 	bl	800c304 <USB_EP0StartXfer>
 8003f6e:	e008      	b.n	8003f82 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003f70:	68fb      	ldr	r3, [r7, #12]
 8003f72:	6818      	ldr	r0, [r3, #0]
 8003f74:	68fb      	ldr	r3, [r7, #12]
 8003f76:	691b      	ldr	r3, [r3, #16]
 8003f78:	b2db      	uxtb	r3, r3
 8003f7a:	461a      	mov	r2, r3
 8003f7c:	6979      	ldr	r1, [r7, #20]
 8003f7e:	f007 ff75 	bl	800be6c <USB_EPStartXfer>
  }

  return HAL_OK;
 8003f82:	2300      	movs	r3, #0
}
 8003f84:	4618      	mov	r0, r3
 8003f86:	3718      	adds	r7, #24
 8003f88:	46bd      	mov	sp, r7
 8003f8a:	bd80      	pop	{r7, pc}

08003f8c <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003f8c:	b580      	push	{r7, lr}
 8003f8e:	b084      	sub	sp, #16
 8003f90:	af00      	add	r7, sp, #0
 8003f92:	6078      	str	r0, [r7, #4]
 8003f94:	460b      	mov	r3, r1
 8003f96:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8003f98:	78fb      	ldrb	r3, [r7, #3]
 8003f9a:	f003 020f 	and.w	r2, r3, #15
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	685b      	ldr	r3, [r3, #4]
 8003fa2:	429a      	cmp	r2, r3
 8003fa4:	d901      	bls.n	8003faa <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8003fa6:	2301      	movs	r3, #1
 8003fa8:	e050      	b.n	800404c <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003faa:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003fae:	2b00      	cmp	r3, #0
 8003fb0:	da0f      	bge.n	8003fd2 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003fb2:	78fb      	ldrb	r3, [r7, #3]
 8003fb4:	f003 020f 	and.w	r2, r3, #15
 8003fb8:	4613      	mov	r3, r2
 8003fba:	00db      	lsls	r3, r3, #3
 8003fbc:	1a9b      	subs	r3, r3, r2
 8003fbe:	009b      	lsls	r3, r3, #2
 8003fc0:	3338      	adds	r3, #56	; 0x38
 8003fc2:	687a      	ldr	r2, [r7, #4]
 8003fc4:	4413      	add	r3, r2
 8003fc6:	3304      	adds	r3, #4
 8003fc8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003fca:	68fb      	ldr	r3, [r7, #12]
 8003fcc:	2201      	movs	r2, #1
 8003fce:	705a      	strb	r2, [r3, #1]
 8003fd0:	e00d      	b.n	8003fee <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8003fd2:	78fa      	ldrb	r2, [r7, #3]
 8003fd4:	4613      	mov	r3, r2
 8003fd6:	00db      	lsls	r3, r3, #3
 8003fd8:	1a9b      	subs	r3, r3, r2
 8003fda:	009b      	lsls	r3, r3, #2
 8003fdc:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8003fe0:	687a      	ldr	r2, [r7, #4]
 8003fe2:	4413      	add	r3, r2
 8003fe4:	3304      	adds	r3, #4
 8003fe6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003fe8:	68fb      	ldr	r3, [r7, #12]
 8003fea:	2200      	movs	r2, #0
 8003fec:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8003fee:	68fb      	ldr	r3, [r7, #12]
 8003ff0:	2201      	movs	r2, #1
 8003ff2:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003ff4:	78fb      	ldrb	r3, [r7, #3]
 8003ff6:	f003 030f 	and.w	r3, r3, #15
 8003ffa:	b2da      	uxtb	r2, r3
 8003ffc:	68fb      	ldr	r3, [r7, #12]
 8003ffe:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8004006:	2b01      	cmp	r3, #1
 8004008:	d101      	bne.n	800400e <HAL_PCD_EP_SetStall+0x82>
 800400a:	2302      	movs	r3, #2
 800400c:	e01e      	b.n	800404c <HAL_PCD_EP_SetStall+0xc0>
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	2201      	movs	r2, #1
 8004012:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	68f9      	ldr	r1, [r7, #12]
 800401c:	4618      	mov	r0, r3
 800401e:	f008 fb5f 	bl	800c6e0 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8004022:	78fb      	ldrb	r3, [r7, #3]
 8004024:	f003 030f 	and.w	r3, r3, #15
 8004028:	2b00      	cmp	r3, #0
 800402a:	d10a      	bne.n	8004042 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	6818      	ldr	r0, [r3, #0]
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	691b      	ldr	r3, [r3, #16]
 8004034:	b2d9      	uxtb	r1, r3
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800403c:	461a      	mov	r2, r3
 800403e:	f008 fd51 	bl	800cae4 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	2200      	movs	r2, #0
 8004046:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 800404a:	2300      	movs	r3, #0
}
 800404c:	4618      	mov	r0, r3
 800404e:	3710      	adds	r7, #16
 8004050:	46bd      	mov	sp, r7
 8004052:	bd80      	pop	{r7, pc}

08004054 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004054:	b580      	push	{r7, lr}
 8004056:	b084      	sub	sp, #16
 8004058:	af00      	add	r7, sp, #0
 800405a:	6078      	str	r0, [r7, #4]
 800405c:	460b      	mov	r3, r1
 800405e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8004060:	78fb      	ldrb	r3, [r7, #3]
 8004062:	f003 020f 	and.w	r2, r3, #15
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	685b      	ldr	r3, [r3, #4]
 800406a:	429a      	cmp	r2, r3
 800406c:	d901      	bls.n	8004072 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 800406e:	2301      	movs	r3, #1
 8004070:	e042      	b.n	80040f8 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8004072:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004076:	2b00      	cmp	r3, #0
 8004078:	da0f      	bge.n	800409a <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800407a:	78fb      	ldrb	r3, [r7, #3]
 800407c:	f003 020f 	and.w	r2, r3, #15
 8004080:	4613      	mov	r3, r2
 8004082:	00db      	lsls	r3, r3, #3
 8004084:	1a9b      	subs	r3, r3, r2
 8004086:	009b      	lsls	r3, r3, #2
 8004088:	3338      	adds	r3, #56	; 0x38
 800408a:	687a      	ldr	r2, [r7, #4]
 800408c:	4413      	add	r3, r2
 800408e:	3304      	adds	r3, #4
 8004090:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004092:	68fb      	ldr	r3, [r7, #12]
 8004094:	2201      	movs	r2, #1
 8004096:	705a      	strb	r2, [r3, #1]
 8004098:	e00f      	b.n	80040ba <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800409a:	78fb      	ldrb	r3, [r7, #3]
 800409c:	f003 020f 	and.w	r2, r3, #15
 80040a0:	4613      	mov	r3, r2
 80040a2:	00db      	lsls	r3, r3, #3
 80040a4:	1a9b      	subs	r3, r3, r2
 80040a6:	009b      	lsls	r3, r3, #2
 80040a8:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80040ac:	687a      	ldr	r2, [r7, #4]
 80040ae:	4413      	add	r3, r2
 80040b0:	3304      	adds	r3, #4
 80040b2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80040b4:	68fb      	ldr	r3, [r7, #12]
 80040b6:	2200      	movs	r2, #0
 80040b8:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 80040ba:	68fb      	ldr	r3, [r7, #12]
 80040bc:	2200      	movs	r2, #0
 80040be:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80040c0:	78fb      	ldrb	r3, [r7, #3]
 80040c2:	f003 030f 	and.w	r3, r3, #15
 80040c6:	b2da      	uxtb	r2, r3
 80040c8:	68fb      	ldr	r3, [r7, #12]
 80040ca:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80040d2:	2b01      	cmp	r3, #1
 80040d4:	d101      	bne.n	80040da <HAL_PCD_EP_ClrStall+0x86>
 80040d6:	2302      	movs	r3, #2
 80040d8:	e00e      	b.n	80040f8 <HAL_PCD_EP_ClrStall+0xa4>
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	2201      	movs	r2, #1
 80040de:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	68f9      	ldr	r1, [r7, #12]
 80040e8:	4618      	mov	r0, r3
 80040ea:	f008 fb67 	bl	800c7bc <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	2200      	movs	r2, #0
 80040f2:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 80040f6:	2300      	movs	r3, #0
}
 80040f8:	4618      	mov	r0, r3
 80040fa:	3710      	adds	r7, #16
 80040fc:	46bd      	mov	sp, r7
 80040fe:	bd80      	pop	{r7, pc}

08004100 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8004100:	b580      	push	{r7, lr}
 8004102:	b08a      	sub	sp, #40	; 0x28
 8004104:	af02      	add	r7, sp, #8
 8004106:	6078      	str	r0, [r7, #4]
 8004108:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004110:	697b      	ldr	r3, [r7, #20]
 8004112:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8004114:	683a      	ldr	r2, [r7, #0]
 8004116:	4613      	mov	r3, r2
 8004118:	00db      	lsls	r3, r3, #3
 800411a:	1a9b      	subs	r3, r3, r2
 800411c:	009b      	lsls	r3, r3, #2
 800411e:	3338      	adds	r3, #56	; 0x38
 8004120:	687a      	ldr	r2, [r7, #4]
 8004122:	4413      	add	r3, r2
 8004124:	3304      	adds	r3, #4
 8004126:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8004128:	68fb      	ldr	r3, [r7, #12]
 800412a:	699a      	ldr	r2, [r3, #24]
 800412c:	68fb      	ldr	r3, [r7, #12]
 800412e:	695b      	ldr	r3, [r3, #20]
 8004130:	429a      	cmp	r2, r3
 8004132:	d901      	bls.n	8004138 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8004134:	2301      	movs	r3, #1
 8004136:	e06c      	b.n	8004212 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8004138:	68fb      	ldr	r3, [r7, #12]
 800413a:	695a      	ldr	r2, [r3, #20]
 800413c:	68fb      	ldr	r3, [r7, #12]
 800413e:	699b      	ldr	r3, [r3, #24]
 8004140:	1ad3      	subs	r3, r2, r3
 8004142:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8004144:	68fb      	ldr	r3, [r7, #12]
 8004146:	689b      	ldr	r3, [r3, #8]
 8004148:	69fa      	ldr	r2, [r7, #28]
 800414a:	429a      	cmp	r2, r3
 800414c:	d902      	bls.n	8004154 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 800414e:	68fb      	ldr	r3, [r7, #12]
 8004150:	689b      	ldr	r3, [r3, #8]
 8004152:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8004154:	69fb      	ldr	r3, [r7, #28]
 8004156:	3303      	adds	r3, #3
 8004158:	089b      	lsrs	r3, r3, #2
 800415a:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800415c:	e02b      	b.n	80041b6 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 800415e:	68fb      	ldr	r3, [r7, #12]
 8004160:	695a      	ldr	r2, [r3, #20]
 8004162:	68fb      	ldr	r3, [r7, #12]
 8004164:	699b      	ldr	r3, [r3, #24]
 8004166:	1ad3      	subs	r3, r2, r3
 8004168:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 800416a:	68fb      	ldr	r3, [r7, #12]
 800416c:	689b      	ldr	r3, [r3, #8]
 800416e:	69fa      	ldr	r2, [r7, #28]
 8004170:	429a      	cmp	r2, r3
 8004172:	d902      	bls.n	800417a <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8004174:	68fb      	ldr	r3, [r7, #12]
 8004176:	689b      	ldr	r3, [r3, #8]
 8004178:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 800417a:	69fb      	ldr	r3, [r7, #28]
 800417c:	3303      	adds	r3, #3
 800417e:	089b      	lsrs	r3, r3, #2
 8004180:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8004182:	68fb      	ldr	r3, [r7, #12]
 8004184:	68d9      	ldr	r1, [r3, #12]
 8004186:	683b      	ldr	r3, [r7, #0]
 8004188:	b2da      	uxtb	r2, r3
 800418a:	69fb      	ldr	r3, [r7, #28]
 800418c:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8004192:	b2db      	uxtb	r3, r3
 8004194:	9300      	str	r3, [sp, #0]
 8004196:	4603      	mov	r3, r0
 8004198:	6978      	ldr	r0, [r7, #20]
 800419a:	f008 fa0b 	bl	800c5b4 <USB_WritePacket>

    ep->xfer_buff  += len;
 800419e:	68fb      	ldr	r3, [r7, #12]
 80041a0:	68da      	ldr	r2, [r3, #12]
 80041a2:	69fb      	ldr	r3, [r7, #28]
 80041a4:	441a      	add	r2, r3
 80041a6:	68fb      	ldr	r3, [r7, #12]
 80041a8:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 80041aa:	68fb      	ldr	r3, [r7, #12]
 80041ac:	699a      	ldr	r2, [r3, #24]
 80041ae:	69fb      	ldr	r3, [r7, #28]
 80041b0:	441a      	add	r2, r3
 80041b2:	68fb      	ldr	r3, [r7, #12]
 80041b4:	619a      	str	r2, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80041b6:	683b      	ldr	r3, [r7, #0]
 80041b8:	015a      	lsls	r2, r3, #5
 80041ba:	693b      	ldr	r3, [r7, #16]
 80041bc:	4413      	add	r3, r2
 80041be:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80041c2:	699b      	ldr	r3, [r3, #24]
 80041c4:	b29b      	uxth	r3, r3
 80041c6:	69ba      	ldr	r2, [r7, #24]
 80041c8:	429a      	cmp	r2, r3
 80041ca:	d809      	bhi.n	80041e0 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80041cc:	68fb      	ldr	r3, [r7, #12]
 80041ce:	699a      	ldr	r2, [r3, #24]
 80041d0:	68fb      	ldr	r3, [r7, #12]
 80041d2:	695b      	ldr	r3, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80041d4:	429a      	cmp	r2, r3
 80041d6:	d203      	bcs.n	80041e0 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80041d8:	68fb      	ldr	r3, [r7, #12]
 80041da:	695b      	ldr	r3, [r3, #20]
 80041dc:	2b00      	cmp	r3, #0
 80041de:	d1be      	bne.n	800415e <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 80041e0:	68fb      	ldr	r3, [r7, #12]
 80041e2:	695a      	ldr	r2, [r3, #20]
 80041e4:	68fb      	ldr	r3, [r7, #12]
 80041e6:	699b      	ldr	r3, [r3, #24]
 80041e8:	429a      	cmp	r2, r3
 80041ea:	d811      	bhi.n	8004210 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80041ec:	683b      	ldr	r3, [r7, #0]
 80041ee:	f003 030f 	and.w	r3, r3, #15
 80041f2:	2201      	movs	r2, #1
 80041f4:	fa02 f303 	lsl.w	r3, r2, r3
 80041f8:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80041fa:	693b      	ldr	r3, [r7, #16]
 80041fc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004200:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004202:	68bb      	ldr	r3, [r7, #8]
 8004204:	43db      	mvns	r3, r3
 8004206:	6939      	ldr	r1, [r7, #16]
 8004208:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800420c:	4013      	ands	r3, r2
 800420e:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8004210:	2300      	movs	r3, #0
}
 8004212:	4618      	mov	r0, r3
 8004214:	3720      	adds	r7, #32
 8004216:	46bd      	mov	sp, r7
 8004218:	bd80      	pop	{r7, pc}
	...

0800421c <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800421c:	b580      	push	{r7, lr}
 800421e:	b086      	sub	sp, #24
 8004220:	af00      	add	r7, sp, #0
 8004222:	6078      	str	r0, [r7, #4]
 8004224:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800422c:	697b      	ldr	r3, [r7, #20]
 800422e:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8004230:	697b      	ldr	r3, [r7, #20]
 8004232:	333c      	adds	r3, #60	; 0x3c
 8004234:	3304      	adds	r3, #4
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800423a:	683b      	ldr	r3, [r7, #0]
 800423c:	015a      	lsls	r2, r3, #5
 800423e:	693b      	ldr	r3, [r7, #16]
 8004240:	4413      	add	r3, r2
 8004242:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004246:	689b      	ldr	r3, [r3, #8]
 8004248:	60bb      	str	r3, [r7, #8]

  if (hpcd->Init.dma_enable == 1U)
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	691b      	ldr	r3, [r3, #16]
 800424e:	2b01      	cmp	r3, #1
 8004250:	f040 80a0 	bne.w	8004394 <PCD_EP_OutXfrComplete_int+0x178>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8004254:	68bb      	ldr	r3, [r7, #8]
 8004256:	f003 0308 	and.w	r3, r3, #8
 800425a:	2b00      	cmp	r3, #0
 800425c:	d015      	beq.n	800428a <PCD_EP_OutXfrComplete_int+0x6e>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800425e:	68fb      	ldr	r3, [r7, #12]
 8004260:	4a72      	ldr	r2, [pc, #456]	; (800442c <PCD_EP_OutXfrComplete_int+0x210>)
 8004262:	4293      	cmp	r3, r2
 8004264:	f240 80dd 	bls.w	8004422 <PCD_EP_OutXfrComplete_int+0x206>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8004268:	68bb      	ldr	r3, [r7, #8]
 800426a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800426e:	2b00      	cmp	r3, #0
 8004270:	f000 80d7 	beq.w	8004422 <PCD_EP_OutXfrComplete_int+0x206>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004274:	683b      	ldr	r3, [r7, #0]
 8004276:	015a      	lsls	r2, r3, #5
 8004278:	693b      	ldr	r3, [r7, #16]
 800427a:	4413      	add	r3, r2
 800427c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004280:	461a      	mov	r2, r3
 8004282:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004286:	6093      	str	r3, [r2, #8]
 8004288:	e0cb      	b.n	8004422 <PCD_EP_OutXfrComplete_int+0x206>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 800428a:	68bb      	ldr	r3, [r7, #8]
 800428c:	f003 0320 	and.w	r3, r3, #32
 8004290:	2b00      	cmp	r3, #0
 8004292:	d009      	beq.n	80042a8 <PCD_EP_OutXfrComplete_int+0x8c>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8004294:	683b      	ldr	r3, [r7, #0]
 8004296:	015a      	lsls	r2, r3, #5
 8004298:	693b      	ldr	r3, [r7, #16]
 800429a:	4413      	add	r3, r2
 800429c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80042a0:	461a      	mov	r2, r3
 80042a2:	2320      	movs	r3, #32
 80042a4:	6093      	str	r3, [r2, #8]
 80042a6:	e0bc      	b.n	8004422 <PCD_EP_OutXfrComplete_int+0x206>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 80042a8:	68bb      	ldr	r3, [r7, #8]
 80042aa:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80042ae:	2b00      	cmp	r3, #0
 80042b0:	f040 80b7 	bne.w	8004422 <PCD_EP_OutXfrComplete_int+0x206>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80042b4:	68fb      	ldr	r3, [r7, #12]
 80042b6:	4a5d      	ldr	r2, [pc, #372]	; (800442c <PCD_EP_OutXfrComplete_int+0x210>)
 80042b8:	4293      	cmp	r3, r2
 80042ba:	d90f      	bls.n	80042dc <PCD_EP_OutXfrComplete_int+0xc0>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80042bc:	68bb      	ldr	r3, [r7, #8]
 80042be:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80042c2:	2b00      	cmp	r3, #0
 80042c4:	d00a      	beq.n	80042dc <PCD_EP_OutXfrComplete_int+0xc0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80042c6:	683b      	ldr	r3, [r7, #0]
 80042c8:	015a      	lsls	r2, r3, #5
 80042ca:	693b      	ldr	r3, [r7, #16]
 80042cc:	4413      	add	r3, r2
 80042ce:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80042d2:	461a      	mov	r2, r3
 80042d4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80042d8:	6093      	str	r3, [r2, #8]
 80042da:	e0a2      	b.n	8004422 <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        /* out data packet received over EP0 */
        hpcd->OUT_ep[epnum].xfer_count =
          hpcd->OUT_ep[epnum].maxpacket -
 80042dc:	6879      	ldr	r1, [r7, #4]
 80042de:	683a      	ldr	r2, [r7, #0]
 80042e0:	4613      	mov	r3, r2
 80042e2:	00db      	lsls	r3, r3, #3
 80042e4:	1a9b      	subs	r3, r3, r2
 80042e6:	009b      	lsls	r3, r3, #2
 80042e8:	440b      	add	r3, r1
 80042ea:	f503 7301 	add.w	r3, r3, #516	; 0x204
 80042ee:	681a      	ldr	r2, [r3, #0]
          (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 80042f0:	683b      	ldr	r3, [r7, #0]
 80042f2:	0159      	lsls	r1, r3, #5
 80042f4:	693b      	ldr	r3, [r7, #16]
 80042f6:	440b      	add	r3, r1
 80042f8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80042fc:	691b      	ldr	r3, [r3, #16]
 80042fe:	f3c3 0312 	ubfx	r3, r3, #0, #19
          hpcd->OUT_ep[epnum].maxpacket -
 8004302:	1ad1      	subs	r1, r2, r3
        hpcd->OUT_ep[epnum].xfer_count =
 8004304:	6878      	ldr	r0, [r7, #4]
 8004306:	683a      	ldr	r2, [r7, #0]
 8004308:	4613      	mov	r3, r2
 800430a:	00db      	lsls	r3, r3, #3
 800430c:	1a9b      	subs	r3, r3, r2
 800430e:	009b      	lsls	r3, r3, #2
 8004310:	4403      	add	r3, r0
 8004312:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8004316:	6019      	str	r1, [r3, #0]

        hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;
 8004318:	6879      	ldr	r1, [r7, #4]
 800431a:	683a      	ldr	r2, [r7, #0]
 800431c:	4613      	mov	r3, r2
 800431e:	00db      	lsls	r3, r3, #3
 8004320:	1a9b      	subs	r3, r3, r2
 8004322:	009b      	lsls	r3, r3, #2
 8004324:	440b      	add	r3, r1
 8004326:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800432a:	6819      	ldr	r1, [r3, #0]
 800432c:	6878      	ldr	r0, [r7, #4]
 800432e:	683a      	ldr	r2, [r7, #0]
 8004330:	4613      	mov	r3, r2
 8004332:	00db      	lsls	r3, r3, #3
 8004334:	1a9b      	subs	r3, r3, r2
 8004336:	009b      	lsls	r3, r3, #2
 8004338:	4403      	add	r3, r0
 800433a:	f503 7301 	add.w	r3, r3, #516	; 0x204
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	4419      	add	r1, r3
 8004342:	6878      	ldr	r0, [r7, #4]
 8004344:	683a      	ldr	r2, [r7, #0]
 8004346:	4613      	mov	r3, r2
 8004348:	00db      	lsls	r3, r3, #3
 800434a:	1a9b      	subs	r3, r3, r2
 800434c:	009b      	lsls	r3, r3, #2
 800434e:	4403      	add	r3, r0
 8004350:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8004354:	6019      	str	r1, [r3, #0]

        if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8004356:	683b      	ldr	r3, [r7, #0]
 8004358:	2b00      	cmp	r3, #0
 800435a:	d114      	bne.n	8004386 <PCD_EP_OutXfrComplete_int+0x16a>
 800435c:	6879      	ldr	r1, [r7, #4]
 800435e:	683a      	ldr	r2, [r7, #0]
 8004360:	4613      	mov	r3, r2
 8004362:	00db      	lsls	r3, r3, #3
 8004364:	1a9b      	subs	r3, r3, r2
 8004366:	009b      	lsls	r3, r3, #2
 8004368:	440b      	add	r3, r1
 800436a:	f503 7304 	add.w	r3, r3, #528	; 0x210
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	2b00      	cmp	r3, #0
 8004372:	d108      	bne.n	8004386 <PCD_EP_OutXfrComplete_int+0x16a>
        {
          /* this is ZLP, so prepare EP0 for next setup */
          (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	6818      	ldr	r0, [r3, #0]
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800437e:	461a      	mov	r2, r3
 8004380:	2101      	movs	r1, #1
 8004382:	f008 fbaf 	bl	800cae4 <USB_EP0_OutStart>
        }
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8004386:	683b      	ldr	r3, [r7, #0]
 8004388:	b2db      	uxtb	r3, r3
 800438a:	4619      	mov	r1, r3
 800438c:	6878      	ldr	r0, [r7, #4]
 800438e:	f00d fd2f 	bl	8011df0 <HAL_PCD_DataOutStageCallback>
 8004392:	e046      	b.n	8004422 <PCD_EP_OutXfrComplete_int+0x206>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8004394:	68fb      	ldr	r3, [r7, #12]
 8004396:	4a26      	ldr	r2, [pc, #152]	; (8004430 <PCD_EP_OutXfrComplete_int+0x214>)
 8004398:	4293      	cmp	r3, r2
 800439a:	d124      	bne.n	80043e6 <PCD_EP_OutXfrComplete_int+0x1ca>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 800439c:	68bb      	ldr	r3, [r7, #8]
 800439e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80043a2:	2b00      	cmp	r3, #0
 80043a4:	d00a      	beq.n	80043bc <PCD_EP_OutXfrComplete_int+0x1a0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80043a6:	683b      	ldr	r3, [r7, #0]
 80043a8:	015a      	lsls	r2, r3, #5
 80043aa:	693b      	ldr	r3, [r7, #16]
 80043ac:	4413      	add	r3, r2
 80043ae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80043b2:	461a      	mov	r2, r3
 80043b4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80043b8:	6093      	str	r3, [r2, #8]
 80043ba:	e032      	b.n	8004422 <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80043bc:	68bb      	ldr	r3, [r7, #8]
 80043be:	f003 0320 	and.w	r3, r3, #32
 80043c2:	2b00      	cmp	r3, #0
 80043c4:	d008      	beq.n	80043d8 <PCD_EP_OutXfrComplete_int+0x1bc>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80043c6:	683b      	ldr	r3, [r7, #0]
 80043c8:	015a      	lsls	r2, r3, #5
 80043ca:	693b      	ldr	r3, [r7, #16]
 80043cc:	4413      	add	r3, r2
 80043ce:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80043d2:	461a      	mov	r2, r3
 80043d4:	2320      	movs	r3, #32
 80043d6:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80043d8:	683b      	ldr	r3, [r7, #0]
 80043da:	b2db      	uxtb	r3, r3
 80043dc:	4619      	mov	r1, r3
 80043de:	6878      	ldr	r0, [r7, #4]
 80043e0:	f00d fd06 	bl	8011df0 <HAL_PCD_DataOutStageCallback>
 80043e4:	e01d      	b.n	8004422 <PCD_EP_OutXfrComplete_int+0x206>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 80043e6:	683b      	ldr	r3, [r7, #0]
 80043e8:	2b00      	cmp	r3, #0
 80043ea:	d114      	bne.n	8004416 <PCD_EP_OutXfrComplete_int+0x1fa>
 80043ec:	6879      	ldr	r1, [r7, #4]
 80043ee:	683a      	ldr	r2, [r7, #0]
 80043f0:	4613      	mov	r3, r2
 80043f2:	00db      	lsls	r3, r3, #3
 80043f4:	1a9b      	subs	r3, r3, r2
 80043f6:	009b      	lsls	r3, r3, #2
 80043f8:	440b      	add	r3, r1
 80043fa:	f503 7304 	add.w	r3, r3, #528	; 0x210
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	2b00      	cmp	r3, #0
 8004402:	d108      	bne.n	8004416 <PCD_EP_OutXfrComplete_int+0x1fa>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	6818      	ldr	r0, [r3, #0]
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800440e:	461a      	mov	r2, r3
 8004410:	2100      	movs	r1, #0
 8004412:	f008 fb67 	bl	800cae4 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8004416:	683b      	ldr	r3, [r7, #0]
 8004418:	b2db      	uxtb	r3, r3
 800441a:	4619      	mov	r1, r3
 800441c:	6878      	ldr	r0, [r7, #4]
 800441e:	f00d fce7 	bl	8011df0 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8004422:	2300      	movs	r3, #0
}
 8004424:	4618      	mov	r0, r3
 8004426:	3718      	adds	r7, #24
 8004428:	46bd      	mov	sp, r7
 800442a:	bd80      	pop	{r7, pc}
 800442c:	4f54300a 	.word	0x4f54300a
 8004430:	4f54310a 	.word	0x4f54310a

08004434 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8004434:	b580      	push	{r7, lr}
 8004436:	b086      	sub	sp, #24
 8004438:	af00      	add	r7, sp, #0
 800443a:	6078      	str	r0, [r7, #4]
 800443c:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004444:	697b      	ldr	r3, [r7, #20]
 8004446:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8004448:	697b      	ldr	r3, [r7, #20]
 800444a:	333c      	adds	r3, #60	; 0x3c
 800444c:	3304      	adds	r3, #4
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8004452:	683b      	ldr	r3, [r7, #0]
 8004454:	015a      	lsls	r2, r3, #5
 8004456:	693b      	ldr	r3, [r7, #16]
 8004458:	4413      	add	r3, r2
 800445a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800445e:	689b      	ldr	r3, [r3, #8]
 8004460:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004462:	68fb      	ldr	r3, [r7, #12]
 8004464:	4a15      	ldr	r2, [pc, #84]	; (80044bc <PCD_EP_OutSetupPacket_int+0x88>)
 8004466:	4293      	cmp	r3, r2
 8004468:	d90e      	bls.n	8004488 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800446a:	68bb      	ldr	r3, [r7, #8]
 800446c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004470:	2b00      	cmp	r3, #0
 8004472:	d009      	beq.n	8004488 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004474:	683b      	ldr	r3, [r7, #0]
 8004476:	015a      	lsls	r2, r3, #5
 8004478:	693b      	ldr	r3, [r7, #16]
 800447a:	4413      	add	r3, r2
 800447c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004480:	461a      	mov	r2, r3
 8004482:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004486:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8004488:	6878      	ldr	r0, [r7, #4]
 800448a:	f00d fc9f 	bl	8011dcc <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 800448e:	68fb      	ldr	r3, [r7, #12]
 8004490:	4a0a      	ldr	r2, [pc, #40]	; (80044bc <PCD_EP_OutSetupPacket_int+0x88>)
 8004492:	4293      	cmp	r3, r2
 8004494:	d90c      	bls.n	80044b0 <PCD_EP_OutSetupPacket_int+0x7c>
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	691b      	ldr	r3, [r3, #16]
 800449a:	2b01      	cmp	r3, #1
 800449c:	d108      	bne.n	80044b0 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	6818      	ldr	r0, [r3, #0]
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80044a8:	461a      	mov	r2, r3
 80044aa:	2101      	movs	r1, #1
 80044ac:	f008 fb1a 	bl	800cae4 <USB_EP0_OutStart>
  }

  return HAL_OK;
 80044b0:	2300      	movs	r3, #0
}
 80044b2:	4618      	mov	r0, r3
 80044b4:	3718      	adds	r7, #24
 80044b6:	46bd      	mov	sp, r7
 80044b8:	bd80      	pop	{r7, pc}
 80044ba:	bf00      	nop
 80044bc:	4f54300a 	.word	0x4f54300a

080044c0 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 80044c0:	b480      	push	{r7}
 80044c2:	b085      	sub	sp, #20
 80044c4:	af00      	add	r7, sp, #0
 80044c6:	6078      	str	r0, [r7, #4]
 80044c8:	460b      	mov	r3, r1
 80044ca:	70fb      	strb	r3, [r7, #3]
 80044cc:	4613      	mov	r3, r2
 80044ce:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044d6:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 80044d8:	78fb      	ldrb	r3, [r7, #3]
 80044da:	2b00      	cmp	r3, #0
 80044dc:	d107      	bne.n	80044ee <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 80044de:	883b      	ldrh	r3, [r7, #0]
 80044e0:	0419      	lsls	r1, r3, #16
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	68ba      	ldr	r2, [r7, #8]
 80044e8:	430a      	orrs	r2, r1
 80044ea:	629a      	str	r2, [r3, #40]	; 0x28
 80044ec:	e028      	b.n	8004540 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80044f4:	0c1b      	lsrs	r3, r3, #16
 80044f6:	68ba      	ldr	r2, [r7, #8]
 80044f8:	4413      	add	r3, r2
 80044fa:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80044fc:	2300      	movs	r3, #0
 80044fe:	73fb      	strb	r3, [r7, #15]
 8004500:	e00d      	b.n	800451e <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	681a      	ldr	r2, [r3, #0]
 8004506:	7bfb      	ldrb	r3, [r7, #15]
 8004508:	3340      	adds	r3, #64	; 0x40
 800450a:	009b      	lsls	r3, r3, #2
 800450c:	4413      	add	r3, r2
 800450e:	685b      	ldr	r3, [r3, #4]
 8004510:	0c1b      	lsrs	r3, r3, #16
 8004512:	68ba      	ldr	r2, [r7, #8]
 8004514:	4413      	add	r3, r2
 8004516:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8004518:	7bfb      	ldrb	r3, [r7, #15]
 800451a:	3301      	adds	r3, #1
 800451c:	73fb      	strb	r3, [r7, #15]
 800451e:	7bfa      	ldrb	r2, [r7, #15]
 8004520:	78fb      	ldrb	r3, [r7, #3]
 8004522:	3b01      	subs	r3, #1
 8004524:	429a      	cmp	r2, r3
 8004526:	d3ec      	bcc.n	8004502 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8004528:	883b      	ldrh	r3, [r7, #0]
 800452a:	0418      	lsls	r0, r3, #16
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	6819      	ldr	r1, [r3, #0]
 8004530:	78fb      	ldrb	r3, [r7, #3]
 8004532:	3b01      	subs	r3, #1
 8004534:	68ba      	ldr	r2, [r7, #8]
 8004536:	4302      	orrs	r2, r0
 8004538:	3340      	adds	r3, #64	; 0x40
 800453a:	009b      	lsls	r3, r3, #2
 800453c:	440b      	add	r3, r1
 800453e:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8004540:	2300      	movs	r3, #0
}
 8004542:	4618      	mov	r0, r3
 8004544:	3714      	adds	r7, #20
 8004546:	46bd      	mov	sp, r7
 8004548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800454c:	4770      	bx	lr

0800454e <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 800454e:	b480      	push	{r7}
 8004550:	b083      	sub	sp, #12
 8004552:	af00      	add	r7, sp, #0
 8004554:	6078      	str	r0, [r7, #4]
 8004556:	460b      	mov	r3, r1
 8004558:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	887a      	ldrh	r2, [r7, #2]
 8004560:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8004562:	2300      	movs	r3, #0
}
 8004564:	4618      	mov	r0, r3
 8004566:	370c      	adds	r7, #12
 8004568:	46bd      	mov	sp, r7
 800456a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800456e:	4770      	bx	lr

08004570 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8004570:	b480      	push	{r7}
 8004572:	b085      	sub	sp, #20
 8004574:	af00      	add	r7, sp, #0
 8004576:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	2201      	movs	r2, #1
 8004582:	f8c3 23fc 	str.w	r2, [r3, #1020]	; 0x3fc
  hpcd->LPM_State = LPM_L0;
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	2200      	movs	r2, #0
 800458a:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 800458e:	68fb      	ldr	r3, [r7, #12]
 8004590:	699b      	ldr	r3, [r3, #24]
 8004592:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8004596:	68fb      	ldr	r3, [r7, #12]
 8004598:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 800459a:	68fb      	ldr	r3, [r7, #12]
 800459c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800459e:	4b05      	ldr	r3, [pc, #20]	; (80045b4 <HAL_PCDEx_ActivateLPM+0x44>)
 80045a0:	4313      	orrs	r3, r2
 80045a2:	68fa      	ldr	r2, [r7, #12]
 80045a4:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 80045a6:	2300      	movs	r3, #0
}
 80045a8:	4618      	mov	r0, r3
 80045aa:	3714      	adds	r7, #20
 80045ac:	46bd      	mov	sp, r7
 80045ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045b2:	4770      	bx	lr
 80045b4:	10000003 	.word	0x10000003

080045b8 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 80045b8:	b480      	push	{r7}
 80045ba:	b083      	sub	sp, #12
 80045bc:	af00      	add	r7, sp, #0
 80045be:	6078      	str	r0, [r7, #4]
 80045c0:	460b      	mov	r3, r1
 80045c2:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 80045c4:	bf00      	nop
 80045c6:	370c      	adds	r7, #12
 80045c8:	46bd      	mov	sp, r7
 80045ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045ce:	4770      	bx	lr

080045d0 <HAL_PWR_EnableBkUpAccess>:
  * @note   If the HSE divided by 2, 3, ..31 is used as the RTC clock, the
  *         Backup Domain Access should be kept enabled.
  * @retval None.
  */
void HAL_PWR_EnableBkUpAccess (void)
{
 80045d0:	b480      	push	{r7}
 80045d2:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT (PWR->CR1, PWR_CR1_DBP);
 80045d4:	4b05      	ldr	r3, [pc, #20]	; (80045ec <HAL_PWR_EnableBkUpAccess+0x1c>)
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	4a04      	ldr	r2, [pc, #16]	; (80045ec <HAL_PWR_EnableBkUpAccess+0x1c>)
 80045da:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80045de:	6013      	str	r3, [r2, #0]
}
 80045e0:	bf00      	nop
 80045e2:	46bd      	mov	sp, r7
 80045e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045e8:	4770      	bx	lr
 80045ea:	bf00      	nop
 80045ec:	58024800 	.word	0x58024800

080045f0 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 80045f0:	b580      	push	{r7, lr}
 80045f2:	b084      	sub	sp, #16
 80045f4:	af00      	add	r7, sp, #0
 80045f6:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 80045f8:	4b29      	ldr	r3, [pc, #164]	; (80046a0 <HAL_PWREx_ConfigSupply+0xb0>)
 80045fa:	68db      	ldr	r3, [r3, #12]
 80045fc:	f003 0307 	and.w	r3, r3, #7
 8004600:	2b06      	cmp	r3, #6
 8004602:	d00a      	beq.n	800461a <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8004604:	4b26      	ldr	r3, [pc, #152]	; (80046a0 <HAL_PWREx_ConfigSupply+0xb0>)
 8004606:	68db      	ldr	r3, [r3, #12]
 8004608:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800460c:	687a      	ldr	r2, [r7, #4]
 800460e:	429a      	cmp	r2, r3
 8004610:	d001      	beq.n	8004616 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8004612:	2301      	movs	r3, #1
 8004614:	e03f      	b.n	8004696 <HAL_PWREx_ConfigSupply+0xa6>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8004616:	2300      	movs	r3, #0
 8004618:	e03d      	b.n	8004696 <HAL_PWREx_ConfigSupply+0xa6>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 800461a:	4b21      	ldr	r3, [pc, #132]	; (80046a0 <HAL_PWREx_ConfigSupply+0xb0>)
 800461c:	68db      	ldr	r3, [r3, #12]
 800461e:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
 8004622:	491f      	ldr	r1, [pc, #124]	; (80046a0 <HAL_PWREx_ConfigSupply+0xb0>)
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	4313      	orrs	r3, r2
 8004628:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 800462a:	f7fd f88b 	bl	8001744 <HAL_GetTick>
 800462e:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8004630:	e009      	b.n	8004646 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8004632:	f7fd f887 	bl	8001744 <HAL_GetTick>
 8004636:	4602      	mov	r2, r0
 8004638:	68fb      	ldr	r3, [r7, #12]
 800463a:	1ad3      	subs	r3, r2, r3
 800463c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004640:	d901      	bls.n	8004646 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8004642:	2301      	movs	r3, #1
 8004644:	e027      	b.n	8004696 <HAL_PWREx_ConfigSupply+0xa6>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8004646:	4b16      	ldr	r3, [pc, #88]	; (80046a0 <HAL_PWREx_ConfigSupply+0xb0>)
 8004648:	685b      	ldr	r3, [r3, #4]
 800464a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800464e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004652:	d1ee      	bne.n	8004632 <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	2b1e      	cmp	r3, #30
 8004658:	d008      	beq.n	800466c <HAL_PWREx_ConfigSupply+0x7c>
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	2b2e      	cmp	r3, #46	; 0x2e
 800465e:	d005      	beq.n	800466c <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	2b1d      	cmp	r3, #29
 8004664:	d002      	beq.n	800466c <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	2b2d      	cmp	r3, #45	; 0x2d
 800466a:	d113      	bne.n	8004694 <HAL_PWREx_ConfigSupply+0xa4>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 800466c:	f7fd f86a 	bl	8001744 <HAL_GetTick>
 8004670:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8004672:	e009      	b.n	8004688 <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8004674:	f7fd f866 	bl	8001744 <HAL_GetTick>
 8004678:	4602      	mov	r2, r0
 800467a:	68fb      	ldr	r3, [r7, #12]
 800467c:	1ad3      	subs	r3, r2, r3
 800467e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004682:	d901      	bls.n	8004688 <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 8004684:	2301      	movs	r3, #1
 8004686:	e006      	b.n	8004696 <HAL_PWREx_ConfigSupply+0xa6>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8004688:	4b05      	ldr	r3, [pc, #20]	; (80046a0 <HAL_PWREx_ConfigSupply+0xb0>)
 800468a:	68db      	ldr	r3, [r3, #12]
 800468c:	f003 0311 	and.w	r3, r3, #17
 8004690:	2b11      	cmp	r3, #17
 8004692:	d1ef      	bne.n	8004674 <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8004694:	2300      	movs	r3, #0
}
 8004696:	4618      	mov	r0, r3
 8004698:	3710      	adds	r7, #16
 800469a:	46bd      	mov	sp, r7
 800469c:	bd80      	pop	{r7, pc}
 800469e:	bf00      	nop
 80046a0:	58024800 	.word	0x58024800

080046a4 <HAL_PWREx_EnableUSBVoltageDetector>:
/**
  * @brief Enable the USB voltage level detector.
  * @retval None.
  */
void HAL_PWREx_EnableUSBVoltageDetector (void)
{
 80046a4:	b480      	push	{r7}
 80046a6:	af00      	add	r7, sp, #0
  /* Enable the USB voltage detector */
  SET_BIT (PWR->CR3, PWR_CR3_USB33DEN);
 80046a8:	4b05      	ldr	r3, [pc, #20]	; (80046c0 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 80046aa:	68db      	ldr	r3, [r3, #12]
 80046ac:	4a04      	ldr	r2, [pc, #16]	; (80046c0 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 80046ae:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80046b2:	60d3      	str	r3, [r2, #12]
}
 80046b4:	bf00      	nop
 80046b6:	46bd      	mov	sp, r7
 80046b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046bc:	4770      	bx	lr
 80046be:	bf00      	nop
 80046c0:	58024800 	.word	0x58024800

080046c4 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80046c4:	b580      	push	{r7, lr}
 80046c6:	b08c      	sub	sp, #48	; 0x30
 80046c8:	af00      	add	r7, sp, #0
 80046ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	2b00      	cmp	r3, #0
 80046d0:	d101      	bne.n	80046d6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80046d2:	2301      	movs	r3, #1
 80046d4:	e37a      	b.n	8004dcc <HAL_RCC_OscConfig+0x708>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	f003 0301 	and.w	r3, r3, #1
 80046de:	2b00      	cmp	r3, #0
 80046e0:	f000 8087 	beq.w	80047f2 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80046e4:	4ba0      	ldr	r3, [pc, #640]	; (8004968 <HAL_RCC_OscConfig+0x2a4>)
 80046e6:	691b      	ldr	r3, [r3, #16]
 80046e8:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80046ec:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80046ee:	4b9e      	ldr	r3, [pc, #632]	; (8004968 <HAL_RCC_OscConfig+0x2a4>)
 80046f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80046f2:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 80046f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80046f6:	2b10      	cmp	r3, #16
 80046f8:	d007      	beq.n	800470a <HAL_RCC_OscConfig+0x46>
 80046fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80046fc:	2b18      	cmp	r3, #24
 80046fe:	d110      	bne.n	8004722 <HAL_RCC_OscConfig+0x5e>
 8004700:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004702:	f003 0303 	and.w	r3, r3, #3
 8004706:	2b02      	cmp	r3, #2
 8004708:	d10b      	bne.n	8004722 <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800470a:	4b97      	ldr	r3, [pc, #604]	; (8004968 <HAL_RCC_OscConfig+0x2a4>)
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004712:	2b00      	cmp	r3, #0
 8004714:	d06c      	beq.n	80047f0 <HAL_RCC_OscConfig+0x12c>
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	685b      	ldr	r3, [r3, #4]
 800471a:	2b00      	cmp	r3, #0
 800471c:	d168      	bne.n	80047f0 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800471e:	2301      	movs	r3, #1
 8004720:	e354      	b.n	8004dcc <HAL_RCC_OscConfig+0x708>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	685b      	ldr	r3, [r3, #4]
 8004726:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800472a:	d106      	bne.n	800473a <HAL_RCC_OscConfig+0x76>
 800472c:	4b8e      	ldr	r3, [pc, #568]	; (8004968 <HAL_RCC_OscConfig+0x2a4>)
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	4a8d      	ldr	r2, [pc, #564]	; (8004968 <HAL_RCC_OscConfig+0x2a4>)
 8004732:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004736:	6013      	str	r3, [r2, #0]
 8004738:	e02e      	b.n	8004798 <HAL_RCC_OscConfig+0xd4>
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	685b      	ldr	r3, [r3, #4]
 800473e:	2b00      	cmp	r3, #0
 8004740:	d10c      	bne.n	800475c <HAL_RCC_OscConfig+0x98>
 8004742:	4b89      	ldr	r3, [pc, #548]	; (8004968 <HAL_RCC_OscConfig+0x2a4>)
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	4a88      	ldr	r2, [pc, #544]	; (8004968 <HAL_RCC_OscConfig+0x2a4>)
 8004748:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800474c:	6013      	str	r3, [r2, #0]
 800474e:	4b86      	ldr	r3, [pc, #536]	; (8004968 <HAL_RCC_OscConfig+0x2a4>)
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	4a85      	ldr	r2, [pc, #532]	; (8004968 <HAL_RCC_OscConfig+0x2a4>)
 8004754:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004758:	6013      	str	r3, [r2, #0]
 800475a:	e01d      	b.n	8004798 <HAL_RCC_OscConfig+0xd4>
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	685b      	ldr	r3, [r3, #4]
 8004760:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004764:	d10c      	bne.n	8004780 <HAL_RCC_OscConfig+0xbc>
 8004766:	4b80      	ldr	r3, [pc, #512]	; (8004968 <HAL_RCC_OscConfig+0x2a4>)
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	4a7f      	ldr	r2, [pc, #508]	; (8004968 <HAL_RCC_OscConfig+0x2a4>)
 800476c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004770:	6013      	str	r3, [r2, #0]
 8004772:	4b7d      	ldr	r3, [pc, #500]	; (8004968 <HAL_RCC_OscConfig+0x2a4>)
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	4a7c      	ldr	r2, [pc, #496]	; (8004968 <HAL_RCC_OscConfig+0x2a4>)
 8004778:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800477c:	6013      	str	r3, [r2, #0]
 800477e:	e00b      	b.n	8004798 <HAL_RCC_OscConfig+0xd4>
 8004780:	4b79      	ldr	r3, [pc, #484]	; (8004968 <HAL_RCC_OscConfig+0x2a4>)
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	4a78      	ldr	r2, [pc, #480]	; (8004968 <HAL_RCC_OscConfig+0x2a4>)
 8004786:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800478a:	6013      	str	r3, [r2, #0]
 800478c:	4b76      	ldr	r3, [pc, #472]	; (8004968 <HAL_RCC_OscConfig+0x2a4>)
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	4a75      	ldr	r2, [pc, #468]	; (8004968 <HAL_RCC_OscConfig+0x2a4>)
 8004792:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004796:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	685b      	ldr	r3, [r3, #4]
 800479c:	2b00      	cmp	r3, #0
 800479e:	d013      	beq.n	80047c8 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80047a0:	f7fc ffd0 	bl	8001744 <HAL_GetTick>
 80047a4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80047a6:	e008      	b.n	80047ba <HAL_RCC_OscConfig+0xf6>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80047a8:	f7fc ffcc 	bl	8001744 <HAL_GetTick>
 80047ac:	4602      	mov	r2, r0
 80047ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047b0:	1ad3      	subs	r3, r2, r3
 80047b2:	2b64      	cmp	r3, #100	; 0x64
 80047b4:	d901      	bls.n	80047ba <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80047b6:	2303      	movs	r3, #3
 80047b8:	e308      	b.n	8004dcc <HAL_RCC_OscConfig+0x708>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80047ba:	4b6b      	ldr	r3, [pc, #428]	; (8004968 <HAL_RCC_OscConfig+0x2a4>)
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80047c2:	2b00      	cmp	r3, #0
 80047c4:	d0f0      	beq.n	80047a8 <HAL_RCC_OscConfig+0xe4>
 80047c6:	e014      	b.n	80047f2 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80047c8:	f7fc ffbc 	bl	8001744 <HAL_GetTick>
 80047cc:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80047ce:	e008      	b.n	80047e2 <HAL_RCC_OscConfig+0x11e>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80047d0:	f7fc ffb8 	bl	8001744 <HAL_GetTick>
 80047d4:	4602      	mov	r2, r0
 80047d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047d8:	1ad3      	subs	r3, r2, r3
 80047da:	2b64      	cmp	r3, #100	; 0x64
 80047dc:	d901      	bls.n	80047e2 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80047de:	2303      	movs	r3, #3
 80047e0:	e2f4      	b.n	8004dcc <HAL_RCC_OscConfig+0x708>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80047e2:	4b61      	ldr	r3, [pc, #388]	; (8004968 <HAL_RCC_OscConfig+0x2a4>)
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80047ea:	2b00      	cmp	r3, #0
 80047ec:	d1f0      	bne.n	80047d0 <HAL_RCC_OscConfig+0x10c>
 80047ee:	e000      	b.n	80047f2 <HAL_RCC_OscConfig+0x12e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80047f0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	f003 0302 	and.w	r3, r3, #2
 80047fa:	2b00      	cmp	r3, #0
 80047fc:	d06d      	beq.n	80048da <HAL_RCC_OscConfig+0x216>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80047fe:	4b5a      	ldr	r3, [pc, #360]	; (8004968 <HAL_RCC_OscConfig+0x2a4>)
 8004800:	691b      	ldr	r3, [r3, #16]
 8004802:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004806:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8004808:	4b57      	ldr	r3, [pc, #348]	; (8004968 <HAL_RCC_OscConfig+0x2a4>)
 800480a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800480c:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 800480e:	6a3b      	ldr	r3, [r7, #32]
 8004810:	2b00      	cmp	r3, #0
 8004812:	d007      	beq.n	8004824 <HAL_RCC_OscConfig+0x160>
 8004814:	6a3b      	ldr	r3, [r7, #32]
 8004816:	2b18      	cmp	r3, #24
 8004818:	d11b      	bne.n	8004852 <HAL_RCC_OscConfig+0x18e>
 800481a:	69fb      	ldr	r3, [r7, #28]
 800481c:	f003 0303 	and.w	r3, r3, #3
 8004820:	2b00      	cmp	r3, #0
 8004822:	d116      	bne.n	8004852 <HAL_RCC_OscConfig+0x18e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004824:	4b50      	ldr	r3, [pc, #320]	; (8004968 <HAL_RCC_OscConfig+0x2a4>)
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	f003 0304 	and.w	r3, r3, #4
 800482c:	2b00      	cmp	r3, #0
 800482e:	d005      	beq.n	800483c <HAL_RCC_OscConfig+0x178>
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	68db      	ldr	r3, [r3, #12]
 8004834:	2b00      	cmp	r3, #0
 8004836:	d101      	bne.n	800483c <HAL_RCC_OscConfig+0x178>
      {
        return HAL_ERROR;
 8004838:	2301      	movs	r3, #1
 800483a:	e2c7      	b.n	8004dcc <HAL_RCC_OscConfig+0x708>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800483c:	4b4a      	ldr	r3, [pc, #296]	; (8004968 <HAL_RCC_OscConfig+0x2a4>)
 800483e:	685b      	ldr	r3, [r3, #4]
 8004840:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	691b      	ldr	r3, [r3, #16]
 8004848:	061b      	lsls	r3, r3, #24
 800484a:	4947      	ldr	r1, [pc, #284]	; (8004968 <HAL_RCC_OscConfig+0x2a4>)
 800484c:	4313      	orrs	r3, r2
 800484e:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004850:	e043      	b.n	80048da <HAL_RCC_OscConfig+0x216>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	68db      	ldr	r3, [r3, #12]
 8004856:	2b00      	cmp	r3, #0
 8004858:	d026      	beq.n	80048a8 <HAL_RCC_OscConfig+0x1e4>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800485a:	4b43      	ldr	r3, [pc, #268]	; (8004968 <HAL_RCC_OscConfig+0x2a4>)
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	f023 0219 	bic.w	r2, r3, #25
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	68db      	ldr	r3, [r3, #12]
 8004866:	4940      	ldr	r1, [pc, #256]	; (8004968 <HAL_RCC_OscConfig+0x2a4>)
 8004868:	4313      	orrs	r3, r2
 800486a:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800486c:	f7fc ff6a 	bl	8001744 <HAL_GetTick>
 8004870:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004872:	e008      	b.n	8004886 <HAL_RCC_OscConfig+0x1c2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004874:	f7fc ff66 	bl	8001744 <HAL_GetTick>
 8004878:	4602      	mov	r2, r0
 800487a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800487c:	1ad3      	subs	r3, r2, r3
 800487e:	2b02      	cmp	r3, #2
 8004880:	d901      	bls.n	8004886 <HAL_RCC_OscConfig+0x1c2>
          {
            return HAL_TIMEOUT;
 8004882:	2303      	movs	r3, #3
 8004884:	e2a2      	b.n	8004dcc <HAL_RCC_OscConfig+0x708>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004886:	4b38      	ldr	r3, [pc, #224]	; (8004968 <HAL_RCC_OscConfig+0x2a4>)
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	f003 0304 	and.w	r3, r3, #4
 800488e:	2b00      	cmp	r3, #0
 8004890:	d0f0      	beq.n	8004874 <HAL_RCC_OscConfig+0x1b0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004892:	4b35      	ldr	r3, [pc, #212]	; (8004968 <HAL_RCC_OscConfig+0x2a4>)
 8004894:	685b      	ldr	r3, [r3, #4]
 8004896:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	691b      	ldr	r3, [r3, #16]
 800489e:	061b      	lsls	r3, r3, #24
 80048a0:	4931      	ldr	r1, [pc, #196]	; (8004968 <HAL_RCC_OscConfig+0x2a4>)
 80048a2:	4313      	orrs	r3, r2
 80048a4:	604b      	str	r3, [r1, #4]
 80048a6:	e018      	b.n	80048da <HAL_RCC_OscConfig+0x216>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80048a8:	4b2f      	ldr	r3, [pc, #188]	; (8004968 <HAL_RCC_OscConfig+0x2a4>)
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	4a2e      	ldr	r2, [pc, #184]	; (8004968 <HAL_RCC_OscConfig+0x2a4>)
 80048ae:	f023 0301 	bic.w	r3, r3, #1
 80048b2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80048b4:	f7fc ff46 	bl	8001744 <HAL_GetTick>
 80048b8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80048ba:	e008      	b.n	80048ce <HAL_RCC_OscConfig+0x20a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80048bc:	f7fc ff42 	bl	8001744 <HAL_GetTick>
 80048c0:	4602      	mov	r2, r0
 80048c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048c4:	1ad3      	subs	r3, r2, r3
 80048c6:	2b02      	cmp	r3, #2
 80048c8:	d901      	bls.n	80048ce <HAL_RCC_OscConfig+0x20a>
          {
            return HAL_TIMEOUT;
 80048ca:	2303      	movs	r3, #3
 80048cc:	e27e      	b.n	8004dcc <HAL_RCC_OscConfig+0x708>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80048ce:	4b26      	ldr	r3, [pc, #152]	; (8004968 <HAL_RCC_OscConfig+0x2a4>)
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	f003 0304 	and.w	r3, r3, #4
 80048d6:	2b00      	cmp	r3, #0
 80048d8:	d1f0      	bne.n	80048bc <HAL_RCC_OscConfig+0x1f8>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	f003 0310 	and.w	r3, r3, #16
 80048e2:	2b00      	cmp	r3, #0
 80048e4:	d06c      	beq.n	80049c0 <HAL_RCC_OscConfig+0x2fc>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80048e6:	4b20      	ldr	r3, [pc, #128]	; (8004968 <HAL_RCC_OscConfig+0x2a4>)
 80048e8:	691b      	ldr	r3, [r3, #16]
 80048ea:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80048ee:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80048f0:	4b1d      	ldr	r3, [pc, #116]	; (8004968 <HAL_RCC_OscConfig+0x2a4>)
 80048f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80048f4:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 80048f6:	69bb      	ldr	r3, [r7, #24]
 80048f8:	2b08      	cmp	r3, #8
 80048fa:	d007      	beq.n	800490c <HAL_RCC_OscConfig+0x248>
 80048fc:	69bb      	ldr	r3, [r7, #24]
 80048fe:	2b18      	cmp	r3, #24
 8004900:	d11b      	bne.n	800493a <HAL_RCC_OscConfig+0x276>
 8004902:	697b      	ldr	r3, [r7, #20]
 8004904:	f003 0303 	and.w	r3, r3, #3
 8004908:	2b01      	cmp	r3, #1
 800490a:	d116      	bne.n	800493a <HAL_RCC_OscConfig+0x276>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800490c:	4b16      	ldr	r3, [pc, #88]	; (8004968 <HAL_RCC_OscConfig+0x2a4>)
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004914:	2b00      	cmp	r3, #0
 8004916:	d005      	beq.n	8004924 <HAL_RCC_OscConfig+0x260>
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	69db      	ldr	r3, [r3, #28]
 800491c:	2b80      	cmp	r3, #128	; 0x80
 800491e:	d001      	beq.n	8004924 <HAL_RCC_OscConfig+0x260>
      {
        return HAL_ERROR;
 8004920:	2301      	movs	r3, #1
 8004922:	e253      	b.n	8004dcc <HAL_RCC_OscConfig+0x708>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8004924:	4b10      	ldr	r3, [pc, #64]	; (8004968 <HAL_RCC_OscConfig+0x2a4>)
 8004926:	68db      	ldr	r3, [r3, #12]
 8004928:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	6a1b      	ldr	r3, [r3, #32]
 8004930:	061b      	lsls	r3, r3, #24
 8004932:	490d      	ldr	r1, [pc, #52]	; (8004968 <HAL_RCC_OscConfig+0x2a4>)
 8004934:	4313      	orrs	r3, r2
 8004936:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8004938:	e042      	b.n	80049c0 <HAL_RCC_OscConfig+0x2fc>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	69db      	ldr	r3, [r3, #28]
 800493e:	2b00      	cmp	r3, #0
 8004940:	d025      	beq.n	800498e <HAL_RCC_OscConfig+0x2ca>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8004942:	4b09      	ldr	r3, [pc, #36]	; (8004968 <HAL_RCC_OscConfig+0x2a4>)
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	4a08      	ldr	r2, [pc, #32]	; (8004968 <HAL_RCC_OscConfig+0x2a4>)
 8004948:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800494c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800494e:	f7fc fef9 	bl	8001744 <HAL_GetTick>
 8004952:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8004954:	e00a      	b.n	800496c <HAL_RCC_OscConfig+0x2a8>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8004956:	f7fc fef5 	bl	8001744 <HAL_GetTick>
 800495a:	4602      	mov	r2, r0
 800495c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800495e:	1ad3      	subs	r3, r2, r3
 8004960:	2b02      	cmp	r3, #2
 8004962:	d903      	bls.n	800496c <HAL_RCC_OscConfig+0x2a8>
          {
            return HAL_TIMEOUT;
 8004964:	2303      	movs	r3, #3
 8004966:	e231      	b.n	8004dcc <HAL_RCC_OscConfig+0x708>
 8004968:	58024400 	.word	0x58024400
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800496c:	4ba3      	ldr	r3, [pc, #652]	; (8004bfc <HAL_RCC_OscConfig+0x538>)
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004974:	2b00      	cmp	r3, #0
 8004976:	d0ee      	beq.n	8004956 <HAL_RCC_OscConfig+0x292>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8004978:	4ba0      	ldr	r3, [pc, #640]	; (8004bfc <HAL_RCC_OscConfig+0x538>)
 800497a:	68db      	ldr	r3, [r3, #12]
 800497c:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	6a1b      	ldr	r3, [r3, #32]
 8004984:	061b      	lsls	r3, r3, #24
 8004986:	499d      	ldr	r1, [pc, #628]	; (8004bfc <HAL_RCC_OscConfig+0x538>)
 8004988:	4313      	orrs	r3, r2
 800498a:	60cb      	str	r3, [r1, #12]
 800498c:	e018      	b.n	80049c0 <HAL_RCC_OscConfig+0x2fc>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 800498e:	4b9b      	ldr	r3, [pc, #620]	; (8004bfc <HAL_RCC_OscConfig+0x538>)
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	4a9a      	ldr	r2, [pc, #616]	; (8004bfc <HAL_RCC_OscConfig+0x538>)
 8004994:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004998:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800499a:	f7fc fed3 	bl	8001744 <HAL_GetTick>
 800499e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80049a0:	e008      	b.n	80049b4 <HAL_RCC_OscConfig+0x2f0>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 80049a2:	f7fc fecf 	bl	8001744 <HAL_GetTick>
 80049a6:	4602      	mov	r2, r0
 80049a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049aa:	1ad3      	subs	r3, r2, r3
 80049ac:	2b02      	cmp	r3, #2
 80049ae:	d901      	bls.n	80049b4 <HAL_RCC_OscConfig+0x2f0>
          {
            return HAL_TIMEOUT;
 80049b0:	2303      	movs	r3, #3
 80049b2:	e20b      	b.n	8004dcc <HAL_RCC_OscConfig+0x708>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80049b4:	4b91      	ldr	r3, [pc, #580]	; (8004bfc <HAL_RCC_OscConfig+0x538>)
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80049bc:	2b00      	cmp	r3, #0
 80049be:	d1f0      	bne.n	80049a2 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	f003 0308 	and.w	r3, r3, #8
 80049c8:	2b00      	cmp	r3, #0
 80049ca:	d036      	beq.n	8004a3a <HAL_RCC_OscConfig+0x376>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	695b      	ldr	r3, [r3, #20]
 80049d0:	2b00      	cmp	r3, #0
 80049d2:	d019      	beq.n	8004a08 <HAL_RCC_OscConfig+0x344>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80049d4:	4b89      	ldr	r3, [pc, #548]	; (8004bfc <HAL_RCC_OscConfig+0x538>)
 80049d6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80049d8:	4a88      	ldr	r2, [pc, #544]	; (8004bfc <HAL_RCC_OscConfig+0x538>)
 80049da:	f043 0301 	orr.w	r3, r3, #1
 80049de:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80049e0:	f7fc feb0 	bl	8001744 <HAL_GetTick>
 80049e4:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80049e6:	e008      	b.n	80049fa <HAL_RCC_OscConfig+0x336>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80049e8:	f7fc feac 	bl	8001744 <HAL_GetTick>
 80049ec:	4602      	mov	r2, r0
 80049ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049f0:	1ad3      	subs	r3, r2, r3
 80049f2:	2b02      	cmp	r3, #2
 80049f4:	d901      	bls.n	80049fa <HAL_RCC_OscConfig+0x336>
        {
          return HAL_TIMEOUT;
 80049f6:	2303      	movs	r3, #3
 80049f8:	e1e8      	b.n	8004dcc <HAL_RCC_OscConfig+0x708>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80049fa:	4b80      	ldr	r3, [pc, #512]	; (8004bfc <HAL_RCC_OscConfig+0x538>)
 80049fc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80049fe:	f003 0302 	and.w	r3, r3, #2
 8004a02:	2b00      	cmp	r3, #0
 8004a04:	d0f0      	beq.n	80049e8 <HAL_RCC_OscConfig+0x324>
 8004a06:	e018      	b.n	8004a3a <HAL_RCC_OscConfig+0x376>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004a08:	4b7c      	ldr	r3, [pc, #496]	; (8004bfc <HAL_RCC_OscConfig+0x538>)
 8004a0a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004a0c:	4a7b      	ldr	r2, [pc, #492]	; (8004bfc <HAL_RCC_OscConfig+0x538>)
 8004a0e:	f023 0301 	bic.w	r3, r3, #1
 8004a12:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004a14:	f7fc fe96 	bl	8001744 <HAL_GetTick>
 8004a18:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8004a1a:	e008      	b.n	8004a2e <HAL_RCC_OscConfig+0x36a>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004a1c:	f7fc fe92 	bl	8001744 <HAL_GetTick>
 8004a20:	4602      	mov	r2, r0
 8004a22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a24:	1ad3      	subs	r3, r2, r3
 8004a26:	2b02      	cmp	r3, #2
 8004a28:	d901      	bls.n	8004a2e <HAL_RCC_OscConfig+0x36a>
        {
          return HAL_TIMEOUT;
 8004a2a:	2303      	movs	r3, #3
 8004a2c:	e1ce      	b.n	8004dcc <HAL_RCC_OscConfig+0x708>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8004a2e:	4b73      	ldr	r3, [pc, #460]	; (8004bfc <HAL_RCC_OscConfig+0x538>)
 8004a30:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004a32:	f003 0302 	and.w	r3, r3, #2
 8004a36:	2b00      	cmp	r3, #0
 8004a38:	d1f0      	bne.n	8004a1c <HAL_RCC_OscConfig+0x358>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	f003 0320 	and.w	r3, r3, #32
 8004a42:	2b00      	cmp	r3, #0
 8004a44:	d036      	beq.n	8004ab4 <HAL_RCC_OscConfig+0x3f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	699b      	ldr	r3, [r3, #24]
 8004a4a:	2b00      	cmp	r3, #0
 8004a4c:	d019      	beq.n	8004a82 <HAL_RCC_OscConfig+0x3be>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8004a4e:	4b6b      	ldr	r3, [pc, #428]	; (8004bfc <HAL_RCC_OscConfig+0x538>)
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	4a6a      	ldr	r2, [pc, #424]	; (8004bfc <HAL_RCC_OscConfig+0x538>)
 8004a54:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8004a58:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8004a5a:	f7fc fe73 	bl	8001744 <HAL_GetTick>
 8004a5e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8004a60:	e008      	b.n	8004a74 <HAL_RCC_OscConfig+0x3b0>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8004a62:	f7fc fe6f 	bl	8001744 <HAL_GetTick>
 8004a66:	4602      	mov	r2, r0
 8004a68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a6a:	1ad3      	subs	r3, r2, r3
 8004a6c:	2b02      	cmp	r3, #2
 8004a6e:	d901      	bls.n	8004a74 <HAL_RCC_OscConfig+0x3b0>
        {
          return HAL_TIMEOUT;
 8004a70:	2303      	movs	r3, #3
 8004a72:	e1ab      	b.n	8004dcc <HAL_RCC_OscConfig+0x708>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8004a74:	4b61      	ldr	r3, [pc, #388]	; (8004bfc <HAL_RCC_OscConfig+0x538>)
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004a7c:	2b00      	cmp	r3, #0
 8004a7e:	d0f0      	beq.n	8004a62 <HAL_RCC_OscConfig+0x39e>
 8004a80:	e018      	b.n	8004ab4 <HAL_RCC_OscConfig+0x3f0>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8004a82:	4b5e      	ldr	r3, [pc, #376]	; (8004bfc <HAL_RCC_OscConfig+0x538>)
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	4a5d      	ldr	r2, [pc, #372]	; (8004bfc <HAL_RCC_OscConfig+0x538>)
 8004a88:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004a8c:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8004a8e:	f7fc fe59 	bl	8001744 <HAL_GetTick>
 8004a92:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8004a94:	e008      	b.n	8004aa8 <HAL_RCC_OscConfig+0x3e4>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8004a96:	f7fc fe55 	bl	8001744 <HAL_GetTick>
 8004a9a:	4602      	mov	r2, r0
 8004a9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a9e:	1ad3      	subs	r3, r2, r3
 8004aa0:	2b02      	cmp	r3, #2
 8004aa2:	d901      	bls.n	8004aa8 <HAL_RCC_OscConfig+0x3e4>
        {
          return HAL_TIMEOUT;
 8004aa4:	2303      	movs	r3, #3
 8004aa6:	e191      	b.n	8004dcc <HAL_RCC_OscConfig+0x708>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8004aa8:	4b54      	ldr	r3, [pc, #336]	; (8004bfc <HAL_RCC_OscConfig+0x538>)
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004ab0:	2b00      	cmp	r3, #0
 8004ab2:	d1f0      	bne.n	8004a96 <HAL_RCC_OscConfig+0x3d2>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	f003 0304 	and.w	r3, r3, #4
 8004abc:	2b00      	cmp	r3, #0
 8004abe:	f000 8081 	beq.w	8004bc4 <HAL_RCC_OscConfig+0x500>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8004ac2:	4b4f      	ldr	r3, [pc, #316]	; (8004c00 <HAL_RCC_OscConfig+0x53c>)
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	4a4e      	ldr	r2, [pc, #312]	; (8004c00 <HAL_RCC_OscConfig+0x53c>)
 8004ac8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004acc:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004ace:	f7fc fe39 	bl	8001744 <HAL_GetTick>
 8004ad2:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004ad4:	e008      	b.n	8004ae8 <HAL_RCC_OscConfig+0x424>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8004ad6:	f7fc fe35 	bl	8001744 <HAL_GetTick>
 8004ada:	4602      	mov	r2, r0
 8004adc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ade:	1ad3      	subs	r3, r2, r3
 8004ae0:	2b64      	cmp	r3, #100	; 0x64
 8004ae2:	d901      	bls.n	8004ae8 <HAL_RCC_OscConfig+0x424>
      {
        return HAL_TIMEOUT;
 8004ae4:	2303      	movs	r3, #3
 8004ae6:	e171      	b.n	8004dcc <HAL_RCC_OscConfig+0x708>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004ae8:	4b45      	ldr	r3, [pc, #276]	; (8004c00 <HAL_RCC_OscConfig+0x53c>)
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004af0:	2b00      	cmp	r3, #0
 8004af2:	d0f0      	beq.n	8004ad6 <HAL_RCC_OscConfig+0x412>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	689b      	ldr	r3, [r3, #8]
 8004af8:	2b01      	cmp	r3, #1
 8004afa:	d106      	bne.n	8004b0a <HAL_RCC_OscConfig+0x446>
 8004afc:	4b3f      	ldr	r3, [pc, #252]	; (8004bfc <HAL_RCC_OscConfig+0x538>)
 8004afe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004b00:	4a3e      	ldr	r2, [pc, #248]	; (8004bfc <HAL_RCC_OscConfig+0x538>)
 8004b02:	f043 0301 	orr.w	r3, r3, #1
 8004b06:	6713      	str	r3, [r2, #112]	; 0x70
 8004b08:	e02d      	b.n	8004b66 <HAL_RCC_OscConfig+0x4a2>
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	689b      	ldr	r3, [r3, #8]
 8004b0e:	2b00      	cmp	r3, #0
 8004b10:	d10c      	bne.n	8004b2c <HAL_RCC_OscConfig+0x468>
 8004b12:	4b3a      	ldr	r3, [pc, #232]	; (8004bfc <HAL_RCC_OscConfig+0x538>)
 8004b14:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004b16:	4a39      	ldr	r2, [pc, #228]	; (8004bfc <HAL_RCC_OscConfig+0x538>)
 8004b18:	f023 0301 	bic.w	r3, r3, #1
 8004b1c:	6713      	str	r3, [r2, #112]	; 0x70
 8004b1e:	4b37      	ldr	r3, [pc, #220]	; (8004bfc <HAL_RCC_OscConfig+0x538>)
 8004b20:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004b22:	4a36      	ldr	r2, [pc, #216]	; (8004bfc <HAL_RCC_OscConfig+0x538>)
 8004b24:	f023 0304 	bic.w	r3, r3, #4
 8004b28:	6713      	str	r3, [r2, #112]	; 0x70
 8004b2a:	e01c      	b.n	8004b66 <HAL_RCC_OscConfig+0x4a2>
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	689b      	ldr	r3, [r3, #8]
 8004b30:	2b05      	cmp	r3, #5
 8004b32:	d10c      	bne.n	8004b4e <HAL_RCC_OscConfig+0x48a>
 8004b34:	4b31      	ldr	r3, [pc, #196]	; (8004bfc <HAL_RCC_OscConfig+0x538>)
 8004b36:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004b38:	4a30      	ldr	r2, [pc, #192]	; (8004bfc <HAL_RCC_OscConfig+0x538>)
 8004b3a:	f043 0304 	orr.w	r3, r3, #4
 8004b3e:	6713      	str	r3, [r2, #112]	; 0x70
 8004b40:	4b2e      	ldr	r3, [pc, #184]	; (8004bfc <HAL_RCC_OscConfig+0x538>)
 8004b42:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004b44:	4a2d      	ldr	r2, [pc, #180]	; (8004bfc <HAL_RCC_OscConfig+0x538>)
 8004b46:	f043 0301 	orr.w	r3, r3, #1
 8004b4a:	6713      	str	r3, [r2, #112]	; 0x70
 8004b4c:	e00b      	b.n	8004b66 <HAL_RCC_OscConfig+0x4a2>
 8004b4e:	4b2b      	ldr	r3, [pc, #172]	; (8004bfc <HAL_RCC_OscConfig+0x538>)
 8004b50:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004b52:	4a2a      	ldr	r2, [pc, #168]	; (8004bfc <HAL_RCC_OscConfig+0x538>)
 8004b54:	f023 0301 	bic.w	r3, r3, #1
 8004b58:	6713      	str	r3, [r2, #112]	; 0x70
 8004b5a:	4b28      	ldr	r3, [pc, #160]	; (8004bfc <HAL_RCC_OscConfig+0x538>)
 8004b5c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004b5e:	4a27      	ldr	r2, [pc, #156]	; (8004bfc <HAL_RCC_OscConfig+0x538>)
 8004b60:	f023 0304 	bic.w	r3, r3, #4
 8004b64:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	689b      	ldr	r3, [r3, #8]
 8004b6a:	2b00      	cmp	r3, #0
 8004b6c:	d015      	beq.n	8004b9a <HAL_RCC_OscConfig+0x4d6>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004b6e:	f7fc fde9 	bl	8001744 <HAL_GetTick>
 8004b72:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004b74:	e00a      	b.n	8004b8c <HAL_RCC_OscConfig+0x4c8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004b76:	f7fc fde5 	bl	8001744 <HAL_GetTick>
 8004b7a:	4602      	mov	r2, r0
 8004b7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b7e:	1ad3      	subs	r3, r2, r3
 8004b80:	f241 3288 	movw	r2, #5000	; 0x1388
 8004b84:	4293      	cmp	r3, r2
 8004b86:	d901      	bls.n	8004b8c <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_TIMEOUT;
 8004b88:	2303      	movs	r3, #3
 8004b8a:	e11f      	b.n	8004dcc <HAL_RCC_OscConfig+0x708>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004b8c:	4b1b      	ldr	r3, [pc, #108]	; (8004bfc <HAL_RCC_OscConfig+0x538>)
 8004b8e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004b90:	f003 0302 	and.w	r3, r3, #2
 8004b94:	2b00      	cmp	r3, #0
 8004b96:	d0ee      	beq.n	8004b76 <HAL_RCC_OscConfig+0x4b2>
 8004b98:	e014      	b.n	8004bc4 <HAL_RCC_OscConfig+0x500>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004b9a:	f7fc fdd3 	bl	8001744 <HAL_GetTick>
 8004b9e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8004ba0:	e00a      	b.n	8004bb8 <HAL_RCC_OscConfig+0x4f4>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004ba2:	f7fc fdcf 	bl	8001744 <HAL_GetTick>
 8004ba6:	4602      	mov	r2, r0
 8004ba8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004baa:	1ad3      	subs	r3, r2, r3
 8004bac:	f241 3288 	movw	r2, #5000	; 0x1388
 8004bb0:	4293      	cmp	r3, r2
 8004bb2:	d901      	bls.n	8004bb8 <HAL_RCC_OscConfig+0x4f4>
        {
          return HAL_TIMEOUT;
 8004bb4:	2303      	movs	r3, #3
 8004bb6:	e109      	b.n	8004dcc <HAL_RCC_OscConfig+0x708>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8004bb8:	4b10      	ldr	r3, [pc, #64]	; (8004bfc <HAL_RCC_OscConfig+0x538>)
 8004bba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004bbc:	f003 0302 	and.w	r3, r3, #2
 8004bc0:	2b00      	cmp	r3, #0
 8004bc2:	d1ee      	bne.n	8004ba2 <HAL_RCC_OscConfig+0x4de>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bc8:	2b00      	cmp	r3, #0
 8004bca:	f000 80fe 	beq.w	8004dca <HAL_RCC_OscConfig+0x706>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8004bce:	4b0b      	ldr	r3, [pc, #44]	; (8004bfc <HAL_RCC_OscConfig+0x538>)
 8004bd0:	691b      	ldr	r3, [r3, #16]
 8004bd2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004bd6:	2b18      	cmp	r3, #24
 8004bd8:	f000 80b9 	beq.w	8004d4e <HAL_RCC_OscConfig+0x68a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004be0:	2b02      	cmp	r3, #2
 8004be2:	f040 809a 	bne.w	8004d1a <HAL_RCC_OscConfig+0x656>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004be6:	4b05      	ldr	r3, [pc, #20]	; (8004bfc <HAL_RCC_OscConfig+0x538>)
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	4a04      	ldr	r2, [pc, #16]	; (8004bfc <HAL_RCC_OscConfig+0x538>)
 8004bec:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004bf0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004bf2:	f7fc fda7 	bl	8001744 <HAL_GetTick>
 8004bf6:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004bf8:	e00d      	b.n	8004c16 <HAL_RCC_OscConfig+0x552>
 8004bfa:	bf00      	nop
 8004bfc:	58024400 	.word	0x58024400
 8004c00:	58024800 	.word	0x58024800
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004c04:	f7fc fd9e 	bl	8001744 <HAL_GetTick>
 8004c08:	4602      	mov	r2, r0
 8004c0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c0c:	1ad3      	subs	r3, r2, r3
 8004c0e:	2b02      	cmp	r3, #2
 8004c10:	d901      	bls.n	8004c16 <HAL_RCC_OscConfig+0x552>
          {
            return HAL_TIMEOUT;
 8004c12:	2303      	movs	r3, #3
 8004c14:	e0da      	b.n	8004dcc <HAL_RCC_OscConfig+0x708>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004c16:	4b6f      	ldr	r3, [pc, #444]	; (8004dd4 <HAL_RCC_OscConfig+0x710>)
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004c1e:	2b00      	cmp	r3, #0
 8004c20:	d1f0      	bne.n	8004c04 <HAL_RCC_OscConfig+0x540>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004c22:	4b6c      	ldr	r3, [pc, #432]	; (8004dd4 <HAL_RCC_OscConfig+0x710>)
 8004c24:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004c26:	4b6c      	ldr	r3, [pc, #432]	; (8004dd8 <HAL_RCC_OscConfig+0x714>)
 8004c28:	4013      	ands	r3, r2
 8004c2a:	687a      	ldr	r2, [r7, #4]
 8004c2c:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8004c2e:	687a      	ldr	r2, [r7, #4]
 8004c30:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8004c32:	0112      	lsls	r2, r2, #4
 8004c34:	430a      	orrs	r2, r1
 8004c36:	4967      	ldr	r1, [pc, #412]	; (8004dd4 <HAL_RCC_OscConfig+0x710>)
 8004c38:	4313      	orrs	r3, r2
 8004c3a:	628b      	str	r3, [r1, #40]	; 0x28
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c40:	3b01      	subs	r3, #1
 8004c42:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004c4a:	3b01      	subs	r3, #1
 8004c4c:	025b      	lsls	r3, r3, #9
 8004c4e:	b29b      	uxth	r3, r3
 8004c50:	431a      	orrs	r2, r3
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c56:	3b01      	subs	r3, #1
 8004c58:	041b      	lsls	r3, r3, #16
 8004c5a:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8004c5e:	431a      	orrs	r2, r3
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004c64:	3b01      	subs	r3, #1
 8004c66:	061b      	lsls	r3, r3, #24
 8004c68:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8004c6c:	4959      	ldr	r1, [pc, #356]	; (8004dd4 <HAL_RCC_OscConfig+0x710>)
 8004c6e:	4313      	orrs	r3, r2
 8004c70:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 8004c72:	4b58      	ldr	r3, [pc, #352]	; (8004dd4 <HAL_RCC_OscConfig+0x710>)
 8004c74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c76:	4a57      	ldr	r2, [pc, #348]	; (8004dd4 <HAL_RCC_OscConfig+0x710>)
 8004c78:	f023 0301 	bic.w	r3, r3, #1
 8004c7c:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8004c7e:	4b55      	ldr	r3, [pc, #340]	; (8004dd4 <HAL_RCC_OscConfig+0x710>)
 8004c80:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004c82:	4b56      	ldr	r3, [pc, #344]	; (8004ddc <HAL_RCC_OscConfig+0x718>)
 8004c84:	4013      	ands	r3, r2
 8004c86:	687a      	ldr	r2, [r7, #4]
 8004c88:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8004c8a:	00d2      	lsls	r2, r2, #3
 8004c8c:	4951      	ldr	r1, [pc, #324]	; (8004dd4 <HAL_RCC_OscConfig+0x710>)
 8004c8e:	4313      	orrs	r3, r2
 8004c90:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8004c92:	4b50      	ldr	r3, [pc, #320]	; (8004dd4 <HAL_RCC_OscConfig+0x710>)
 8004c94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c96:	f023 020c 	bic.w	r2, r3, #12
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c9e:	494d      	ldr	r1, [pc, #308]	; (8004dd4 <HAL_RCC_OscConfig+0x710>)
 8004ca0:	4313      	orrs	r3, r2
 8004ca2:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8004ca4:	4b4b      	ldr	r3, [pc, #300]	; (8004dd4 <HAL_RCC_OscConfig+0x710>)
 8004ca6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ca8:	f023 0202 	bic.w	r2, r3, #2
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004cb0:	4948      	ldr	r1, [pc, #288]	; (8004dd4 <HAL_RCC_OscConfig+0x710>)
 8004cb2:	4313      	orrs	r3, r2
 8004cb4:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8004cb6:	4b47      	ldr	r3, [pc, #284]	; (8004dd4 <HAL_RCC_OscConfig+0x710>)
 8004cb8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004cba:	4a46      	ldr	r2, [pc, #280]	; (8004dd4 <HAL_RCC_OscConfig+0x710>)
 8004cbc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004cc0:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004cc2:	4b44      	ldr	r3, [pc, #272]	; (8004dd4 <HAL_RCC_OscConfig+0x710>)
 8004cc4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004cc6:	4a43      	ldr	r2, [pc, #268]	; (8004dd4 <HAL_RCC_OscConfig+0x710>)
 8004cc8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004ccc:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8004cce:	4b41      	ldr	r3, [pc, #260]	; (8004dd4 <HAL_RCC_OscConfig+0x710>)
 8004cd0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004cd2:	4a40      	ldr	r2, [pc, #256]	; (8004dd4 <HAL_RCC_OscConfig+0x710>)
 8004cd4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004cd8:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 8004cda:	4b3e      	ldr	r3, [pc, #248]	; (8004dd4 <HAL_RCC_OscConfig+0x710>)
 8004cdc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004cde:	4a3d      	ldr	r2, [pc, #244]	; (8004dd4 <HAL_RCC_OscConfig+0x710>)
 8004ce0:	f043 0301 	orr.w	r3, r3, #1
 8004ce4:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004ce6:	4b3b      	ldr	r3, [pc, #236]	; (8004dd4 <HAL_RCC_OscConfig+0x710>)
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	4a3a      	ldr	r2, [pc, #232]	; (8004dd4 <HAL_RCC_OscConfig+0x710>)
 8004cec:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004cf0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004cf2:	f7fc fd27 	bl	8001744 <HAL_GetTick>
 8004cf6:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8004cf8:	e008      	b.n	8004d0c <HAL_RCC_OscConfig+0x648>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004cfa:	f7fc fd23 	bl	8001744 <HAL_GetTick>
 8004cfe:	4602      	mov	r2, r0
 8004d00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d02:	1ad3      	subs	r3, r2, r3
 8004d04:	2b02      	cmp	r3, #2
 8004d06:	d901      	bls.n	8004d0c <HAL_RCC_OscConfig+0x648>
          {
            return HAL_TIMEOUT;
 8004d08:	2303      	movs	r3, #3
 8004d0a:	e05f      	b.n	8004dcc <HAL_RCC_OscConfig+0x708>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8004d0c:	4b31      	ldr	r3, [pc, #196]	; (8004dd4 <HAL_RCC_OscConfig+0x710>)
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004d14:	2b00      	cmp	r3, #0
 8004d16:	d0f0      	beq.n	8004cfa <HAL_RCC_OscConfig+0x636>
 8004d18:	e057      	b.n	8004dca <HAL_RCC_OscConfig+0x706>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004d1a:	4b2e      	ldr	r3, [pc, #184]	; (8004dd4 <HAL_RCC_OscConfig+0x710>)
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	4a2d      	ldr	r2, [pc, #180]	; (8004dd4 <HAL_RCC_OscConfig+0x710>)
 8004d20:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004d24:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004d26:	f7fc fd0d 	bl	8001744 <HAL_GetTick>
 8004d2a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004d2c:	e008      	b.n	8004d40 <HAL_RCC_OscConfig+0x67c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004d2e:	f7fc fd09 	bl	8001744 <HAL_GetTick>
 8004d32:	4602      	mov	r2, r0
 8004d34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d36:	1ad3      	subs	r3, r2, r3
 8004d38:	2b02      	cmp	r3, #2
 8004d3a:	d901      	bls.n	8004d40 <HAL_RCC_OscConfig+0x67c>
          {
            return HAL_TIMEOUT;
 8004d3c:	2303      	movs	r3, #3
 8004d3e:	e045      	b.n	8004dcc <HAL_RCC_OscConfig+0x708>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004d40:	4b24      	ldr	r3, [pc, #144]	; (8004dd4 <HAL_RCC_OscConfig+0x710>)
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004d48:	2b00      	cmp	r3, #0
 8004d4a:	d1f0      	bne.n	8004d2e <HAL_RCC_OscConfig+0x66a>
 8004d4c:	e03d      	b.n	8004dca <HAL_RCC_OscConfig+0x706>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8004d4e:	4b21      	ldr	r3, [pc, #132]	; (8004dd4 <HAL_RCC_OscConfig+0x710>)
 8004d50:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d52:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8004d54:	4b1f      	ldr	r3, [pc, #124]	; (8004dd4 <HAL_RCC_OscConfig+0x710>)
 8004d56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d58:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d5e:	2b01      	cmp	r3, #1
 8004d60:	d031      	beq.n	8004dc6 <HAL_RCC_OscConfig+0x702>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004d62:	693b      	ldr	r3, [r7, #16]
 8004d64:	f003 0203 	and.w	r2, r3, #3
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004d6c:	429a      	cmp	r2, r3
 8004d6e:	d12a      	bne.n	8004dc6 <HAL_RCC_OscConfig+0x702>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8004d70:	693b      	ldr	r3, [r7, #16]
 8004d72:	091b      	lsrs	r3, r3, #4
 8004d74:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004d7c:	429a      	cmp	r2, r3
 8004d7e:	d122      	bne.n	8004dc6 <HAL_RCC_OscConfig+0x702>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8004d80:	68fb      	ldr	r3, [r7, #12]
 8004d82:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d8a:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8004d8c:	429a      	cmp	r2, r3
 8004d8e:	d11a      	bne.n	8004dc6 <HAL_RCC_OscConfig+0x702>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8004d90:	68fb      	ldr	r3, [r7, #12]
 8004d92:	0a5b      	lsrs	r3, r3, #9
 8004d94:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004d9c:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8004d9e:	429a      	cmp	r2, r3
 8004da0:	d111      	bne.n	8004dc6 <HAL_RCC_OscConfig+0x702>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8004da2:	68fb      	ldr	r3, [r7, #12]
 8004da4:	0c1b      	lsrs	r3, r3, #16
 8004da6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004dae:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8004db0:	429a      	cmp	r2, r3
 8004db2:	d108      	bne.n	8004dc6 <HAL_RCC_OscConfig+0x702>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8004db4:	68fb      	ldr	r3, [r7, #12]
 8004db6:	0e1b      	lsrs	r3, r3, #24
 8004db8:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004dc0:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8004dc2:	429a      	cmp	r2, r3
 8004dc4:	d001      	beq.n	8004dca <HAL_RCC_OscConfig+0x706>
      {
        return HAL_ERROR;
 8004dc6:	2301      	movs	r3, #1
 8004dc8:	e000      	b.n	8004dcc <HAL_RCC_OscConfig+0x708>
      }
    }
  }
  return HAL_OK;
 8004dca:	2300      	movs	r3, #0
}
 8004dcc:	4618      	mov	r0, r3
 8004dce:	3730      	adds	r7, #48	; 0x30
 8004dd0:	46bd      	mov	sp, r7
 8004dd2:	bd80      	pop	{r7, pc}
 8004dd4:	58024400 	.word	0x58024400
 8004dd8:	fffffc0c 	.word	0xfffffc0c
 8004ddc:	ffff0007 	.word	0xffff0007

08004de0 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004de0:	b580      	push	{r7, lr}
 8004de2:	b086      	sub	sp, #24
 8004de4:	af00      	add	r7, sp, #0
 8004de6:	6078      	str	r0, [r7, #4]
 8004de8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	2b00      	cmp	r3, #0
 8004dee:	d101      	bne.n	8004df4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004df0:	2301      	movs	r3, #1
 8004df2:	e19c      	b.n	800512e <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004df4:	4b8a      	ldr	r3, [pc, #552]	; (8005020 <HAL_RCC_ClockConfig+0x240>)
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	f003 030f 	and.w	r3, r3, #15
 8004dfc:	683a      	ldr	r2, [r7, #0]
 8004dfe:	429a      	cmp	r2, r3
 8004e00:	d910      	bls.n	8004e24 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004e02:	4b87      	ldr	r3, [pc, #540]	; (8005020 <HAL_RCC_ClockConfig+0x240>)
 8004e04:	681b      	ldr	r3, [r3, #0]
 8004e06:	f023 020f 	bic.w	r2, r3, #15
 8004e0a:	4985      	ldr	r1, [pc, #532]	; (8005020 <HAL_RCC_ClockConfig+0x240>)
 8004e0c:	683b      	ldr	r3, [r7, #0]
 8004e0e:	4313      	orrs	r3, r2
 8004e10:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004e12:	4b83      	ldr	r3, [pc, #524]	; (8005020 <HAL_RCC_ClockConfig+0x240>)
 8004e14:	681b      	ldr	r3, [r3, #0]
 8004e16:	f003 030f 	and.w	r3, r3, #15
 8004e1a:	683a      	ldr	r2, [r7, #0]
 8004e1c:	429a      	cmp	r2, r3
 8004e1e:	d001      	beq.n	8004e24 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8004e20:	2301      	movs	r3, #1
 8004e22:	e184      	b.n	800512e <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	f003 0304 	and.w	r3, r3, #4
 8004e2c:	2b00      	cmp	r3, #0
 8004e2e:	d010      	beq.n	8004e52 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	691a      	ldr	r2, [r3, #16]
 8004e34:	4b7b      	ldr	r3, [pc, #492]	; (8005024 <HAL_RCC_ClockConfig+0x244>)
 8004e36:	699b      	ldr	r3, [r3, #24]
 8004e38:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004e3c:	429a      	cmp	r2, r3
 8004e3e:	d908      	bls.n	8004e52 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8004e40:	4b78      	ldr	r3, [pc, #480]	; (8005024 <HAL_RCC_ClockConfig+0x244>)
 8004e42:	699b      	ldr	r3, [r3, #24]
 8004e44:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	691b      	ldr	r3, [r3, #16]
 8004e4c:	4975      	ldr	r1, [pc, #468]	; (8005024 <HAL_RCC_ClockConfig+0x244>)
 8004e4e:	4313      	orrs	r3, r2
 8004e50:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	f003 0308 	and.w	r3, r3, #8
 8004e5a:	2b00      	cmp	r3, #0
 8004e5c:	d010      	beq.n	8004e80 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	695a      	ldr	r2, [r3, #20]
 8004e62:	4b70      	ldr	r3, [pc, #448]	; (8005024 <HAL_RCC_ClockConfig+0x244>)
 8004e64:	69db      	ldr	r3, [r3, #28]
 8004e66:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004e6a:	429a      	cmp	r2, r3
 8004e6c:	d908      	bls.n	8004e80 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8004e6e:	4b6d      	ldr	r3, [pc, #436]	; (8005024 <HAL_RCC_ClockConfig+0x244>)
 8004e70:	69db      	ldr	r3, [r3, #28]
 8004e72:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	695b      	ldr	r3, [r3, #20]
 8004e7a:	496a      	ldr	r1, [pc, #424]	; (8005024 <HAL_RCC_ClockConfig+0x244>)
 8004e7c:	4313      	orrs	r3, r2
 8004e7e:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	f003 0310 	and.w	r3, r3, #16
 8004e88:	2b00      	cmp	r3, #0
 8004e8a:	d010      	beq.n	8004eae <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	699a      	ldr	r2, [r3, #24]
 8004e90:	4b64      	ldr	r3, [pc, #400]	; (8005024 <HAL_RCC_ClockConfig+0x244>)
 8004e92:	69db      	ldr	r3, [r3, #28]
 8004e94:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004e98:	429a      	cmp	r2, r3
 8004e9a:	d908      	bls.n	8004eae <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8004e9c:	4b61      	ldr	r3, [pc, #388]	; (8005024 <HAL_RCC_ClockConfig+0x244>)
 8004e9e:	69db      	ldr	r3, [r3, #28]
 8004ea0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	699b      	ldr	r3, [r3, #24]
 8004ea8:	495e      	ldr	r1, [pc, #376]	; (8005024 <HAL_RCC_ClockConfig+0x244>)
 8004eaa:	4313      	orrs	r3, r2
 8004eac:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	681b      	ldr	r3, [r3, #0]
 8004eb2:	f003 0320 	and.w	r3, r3, #32
 8004eb6:	2b00      	cmp	r3, #0
 8004eb8:	d010      	beq.n	8004edc <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	69da      	ldr	r2, [r3, #28]
 8004ebe:	4b59      	ldr	r3, [pc, #356]	; (8005024 <HAL_RCC_ClockConfig+0x244>)
 8004ec0:	6a1b      	ldr	r3, [r3, #32]
 8004ec2:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004ec6:	429a      	cmp	r2, r3
 8004ec8:	d908      	bls.n	8004edc <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8004eca:	4b56      	ldr	r3, [pc, #344]	; (8005024 <HAL_RCC_ClockConfig+0x244>)
 8004ecc:	6a1b      	ldr	r3, [r3, #32]
 8004ece:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	69db      	ldr	r3, [r3, #28]
 8004ed6:	4953      	ldr	r1, [pc, #332]	; (8005024 <HAL_RCC_ClockConfig+0x244>)
 8004ed8:	4313      	orrs	r3, r2
 8004eda:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	f003 0302 	and.w	r3, r3, #2
 8004ee4:	2b00      	cmp	r3, #0
 8004ee6:	d010      	beq.n	8004f0a <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	68da      	ldr	r2, [r3, #12]
 8004eec:	4b4d      	ldr	r3, [pc, #308]	; (8005024 <HAL_RCC_ClockConfig+0x244>)
 8004eee:	699b      	ldr	r3, [r3, #24]
 8004ef0:	f003 030f 	and.w	r3, r3, #15
 8004ef4:	429a      	cmp	r2, r3
 8004ef6:	d908      	bls.n	8004f0a <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004ef8:	4b4a      	ldr	r3, [pc, #296]	; (8005024 <HAL_RCC_ClockConfig+0x244>)
 8004efa:	699b      	ldr	r3, [r3, #24]
 8004efc:	f023 020f 	bic.w	r2, r3, #15
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	68db      	ldr	r3, [r3, #12]
 8004f04:	4947      	ldr	r1, [pc, #284]	; (8005024 <HAL_RCC_ClockConfig+0x244>)
 8004f06:	4313      	orrs	r3, r2
 8004f08:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	681b      	ldr	r3, [r3, #0]
 8004f0e:	f003 0301 	and.w	r3, r3, #1
 8004f12:	2b00      	cmp	r3, #0
 8004f14:	d055      	beq.n	8004fc2 <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8004f16:	4b43      	ldr	r3, [pc, #268]	; (8005024 <HAL_RCC_ClockConfig+0x244>)
 8004f18:	699b      	ldr	r3, [r3, #24]
 8004f1a:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	689b      	ldr	r3, [r3, #8]
 8004f22:	4940      	ldr	r1, [pc, #256]	; (8005024 <HAL_RCC_ClockConfig+0x244>)
 8004f24:	4313      	orrs	r3, r2
 8004f26:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	685b      	ldr	r3, [r3, #4]
 8004f2c:	2b02      	cmp	r3, #2
 8004f2e:	d107      	bne.n	8004f40 <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004f30:	4b3c      	ldr	r3, [pc, #240]	; (8005024 <HAL_RCC_ClockConfig+0x244>)
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004f38:	2b00      	cmp	r3, #0
 8004f3a:	d121      	bne.n	8004f80 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8004f3c:	2301      	movs	r3, #1
 8004f3e:	e0f6      	b.n	800512e <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	685b      	ldr	r3, [r3, #4]
 8004f44:	2b03      	cmp	r3, #3
 8004f46:	d107      	bne.n	8004f58 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8004f48:	4b36      	ldr	r3, [pc, #216]	; (8005024 <HAL_RCC_ClockConfig+0x244>)
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004f50:	2b00      	cmp	r3, #0
 8004f52:	d115      	bne.n	8004f80 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8004f54:	2301      	movs	r3, #1
 8004f56:	e0ea      	b.n	800512e <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	685b      	ldr	r3, [r3, #4]
 8004f5c:	2b01      	cmp	r3, #1
 8004f5e:	d107      	bne.n	8004f70 <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8004f60:	4b30      	ldr	r3, [pc, #192]	; (8005024 <HAL_RCC_ClockConfig+0x244>)
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004f68:	2b00      	cmp	r3, #0
 8004f6a:	d109      	bne.n	8004f80 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8004f6c:	2301      	movs	r3, #1
 8004f6e:	e0de      	b.n	800512e <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004f70:	4b2c      	ldr	r3, [pc, #176]	; (8005024 <HAL_RCC_ClockConfig+0x244>)
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	f003 0304 	and.w	r3, r3, #4
 8004f78:	2b00      	cmp	r3, #0
 8004f7a:	d101      	bne.n	8004f80 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8004f7c:	2301      	movs	r3, #1
 8004f7e:	e0d6      	b.n	800512e <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004f80:	4b28      	ldr	r3, [pc, #160]	; (8005024 <HAL_RCC_ClockConfig+0x244>)
 8004f82:	691b      	ldr	r3, [r3, #16]
 8004f84:	f023 0207 	bic.w	r2, r3, #7
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	685b      	ldr	r3, [r3, #4]
 8004f8c:	4925      	ldr	r1, [pc, #148]	; (8005024 <HAL_RCC_ClockConfig+0x244>)
 8004f8e:	4313      	orrs	r3, r2
 8004f90:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004f92:	f7fc fbd7 	bl	8001744 <HAL_GetTick>
 8004f96:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004f98:	e00a      	b.n	8004fb0 <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004f9a:	f7fc fbd3 	bl	8001744 <HAL_GetTick>
 8004f9e:	4602      	mov	r2, r0
 8004fa0:	697b      	ldr	r3, [r7, #20]
 8004fa2:	1ad3      	subs	r3, r2, r3
 8004fa4:	f241 3288 	movw	r2, #5000	; 0x1388
 8004fa8:	4293      	cmp	r3, r2
 8004faa:	d901      	bls.n	8004fb0 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8004fac:	2303      	movs	r3, #3
 8004fae:	e0be      	b.n	800512e <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004fb0:	4b1c      	ldr	r3, [pc, #112]	; (8005024 <HAL_RCC_ClockConfig+0x244>)
 8004fb2:	691b      	ldr	r3, [r3, #16]
 8004fb4:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	685b      	ldr	r3, [r3, #4]
 8004fbc:	00db      	lsls	r3, r3, #3
 8004fbe:	429a      	cmp	r2, r3
 8004fc0:	d1eb      	bne.n	8004f9a <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	681b      	ldr	r3, [r3, #0]
 8004fc6:	f003 0302 	and.w	r3, r3, #2
 8004fca:	2b00      	cmp	r3, #0
 8004fcc:	d010      	beq.n	8004ff0 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	68da      	ldr	r2, [r3, #12]
 8004fd2:	4b14      	ldr	r3, [pc, #80]	; (8005024 <HAL_RCC_ClockConfig+0x244>)
 8004fd4:	699b      	ldr	r3, [r3, #24]
 8004fd6:	f003 030f 	and.w	r3, r3, #15
 8004fda:	429a      	cmp	r2, r3
 8004fdc:	d208      	bcs.n	8004ff0 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004fde:	4b11      	ldr	r3, [pc, #68]	; (8005024 <HAL_RCC_ClockConfig+0x244>)
 8004fe0:	699b      	ldr	r3, [r3, #24]
 8004fe2:	f023 020f 	bic.w	r2, r3, #15
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	68db      	ldr	r3, [r3, #12]
 8004fea:	490e      	ldr	r1, [pc, #56]	; (8005024 <HAL_RCC_ClockConfig+0x244>)
 8004fec:	4313      	orrs	r3, r2
 8004fee:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004ff0:	4b0b      	ldr	r3, [pc, #44]	; (8005020 <HAL_RCC_ClockConfig+0x240>)
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	f003 030f 	and.w	r3, r3, #15
 8004ff8:	683a      	ldr	r2, [r7, #0]
 8004ffa:	429a      	cmp	r2, r3
 8004ffc:	d214      	bcs.n	8005028 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004ffe:	4b08      	ldr	r3, [pc, #32]	; (8005020 <HAL_RCC_ClockConfig+0x240>)
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	f023 020f 	bic.w	r2, r3, #15
 8005006:	4906      	ldr	r1, [pc, #24]	; (8005020 <HAL_RCC_ClockConfig+0x240>)
 8005008:	683b      	ldr	r3, [r7, #0]
 800500a:	4313      	orrs	r3, r2
 800500c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800500e:	4b04      	ldr	r3, [pc, #16]	; (8005020 <HAL_RCC_ClockConfig+0x240>)
 8005010:	681b      	ldr	r3, [r3, #0]
 8005012:	f003 030f 	and.w	r3, r3, #15
 8005016:	683a      	ldr	r2, [r7, #0]
 8005018:	429a      	cmp	r2, r3
 800501a:	d005      	beq.n	8005028 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 800501c:	2301      	movs	r3, #1
 800501e:	e086      	b.n	800512e <HAL_RCC_ClockConfig+0x34e>
 8005020:	52002000 	.word	0x52002000
 8005024:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	681b      	ldr	r3, [r3, #0]
 800502c:	f003 0304 	and.w	r3, r3, #4
 8005030:	2b00      	cmp	r3, #0
 8005032:	d010      	beq.n	8005056 <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	691a      	ldr	r2, [r3, #16]
 8005038:	4b3f      	ldr	r3, [pc, #252]	; (8005138 <HAL_RCC_ClockConfig+0x358>)
 800503a:	699b      	ldr	r3, [r3, #24]
 800503c:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8005040:	429a      	cmp	r2, r3
 8005042:	d208      	bcs.n	8005056 <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8005044:	4b3c      	ldr	r3, [pc, #240]	; (8005138 <HAL_RCC_ClockConfig+0x358>)
 8005046:	699b      	ldr	r3, [r3, #24]
 8005048:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	691b      	ldr	r3, [r3, #16]
 8005050:	4939      	ldr	r1, [pc, #228]	; (8005138 <HAL_RCC_ClockConfig+0x358>)
 8005052:	4313      	orrs	r3, r2
 8005054:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	681b      	ldr	r3, [r3, #0]
 800505a:	f003 0308 	and.w	r3, r3, #8
 800505e:	2b00      	cmp	r3, #0
 8005060:	d010      	beq.n	8005084 <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	695a      	ldr	r2, [r3, #20]
 8005066:	4b34      	ldr	r3, [pc, #208]	; (8005138 <HAL_RCC_ClockConfig+0x358>)
 8005068:	69db      	ldr	r3, [r3, #28]
 800506a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800506e:	429a      	cmp	r2, r3
 8005070:	d208      	bcs.n	8005084 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8005072:	4b31      	ldr	r3, [pc, #196]	; (8005138 <HAL_RCC_ClockConfig+0x358>)
 8005074:	69db      	ldr	r3, [r3, #28]
 8005076:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	695b      	ldr	r3, [r3, #20]
 800507e:	492e      	ldr	r1, [pc, #184]	; (8005138 <HAL_RCC_ClockConfig+0x358>)
 8005080:	4313      	orrs	r3, r2
 8005082:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	f003 0310 	and.w	r3, r3, #16
 800508c:	2b00      	cmp	r3, #0
 800508e:	d010      	beq.n	80050b2 <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	699a      	ldr	r2, [r3, #24]
 8005094:	4b28      	ldr	r3, [pc, #160]	; (8005138 <HAL_RCC_ClockConfig+0x358>)
 8005096:	69db      	ldr	r3, [r3, #28]
 8005098:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800509c:	429a      	cmp	r2, r3
 800509e:	d208      	bcs.n	80050b2 <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80050a0:	4b25      	ldr	r3, [pc, #148]	; (8005138 <HAL_RCC_ClockConfig+0x358>)
 80050a2:	69db      	ldr	r3, [r3, #28]
 80050a4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	699b      	ldr	r3, [r3, #24]
 80050ac:	4922      	ldr	r1, [pc, #136]	; (8005138 <HAL_RCC_ClockConfig+0x358>)
 80050ae:	4313      	orrs	r3, r2
 80050b0:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	f003 0320 	and.w	r3, r3, #32
 80050ba:	2b00      	cmp	r3, #0
 80050bc:	d010      	beq.n	80050e0 <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	69da      	ldr	r2, [r3, #28]
 80050c2:	4b1d      	ldr	r3, [pc, #116]	; (8005138 <HAL_RCC_ClockConfig+0x358>)
 80050c4:	6a1b      	ldr	r3, [r3, #32]
 80050c6:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80050ca:	429a      	cmp	r2, r3
 80050cc:	d208      	bcs.n	80050e0 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 80050ce:	4b1a      	ldr	r3, [pc, #104]	; (8005138 <HAL_RCC_ClockConfig+0x358>)
 80050d0:	6a1b      	ldr	r3, [r3, #32]
 80050d2:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	69db      	ldr	r3, [r3, #28]
 80050da:	4917      	ldr	r1, [pc, #92]	; (8005138 <HAL_RCC_ClockConfig+0x358>)
 80050dc:	4313      	orrs	r3, r2
 80050de:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80050e0:	f000 f834 	bl	800514c <HAL_RCC_GetSysClockFreq>
 80050e4:	4602      	mov	r2, r0
 80050e6:	4b14      	ldr	r3, [pc, #80]	; (8005138 <HAL_RCC_ClockConfig+0x358>)
 80050e8:	699b      	ldr	r3, [r3, #24]
 80050ea:	0a1b      	lsrs	r3, r3, #8
 80050ec:	f003 030f 	and.w	r3, r3, #15
 80050f0:	4912      	ldr	r1, [pc, #72]	; (800513c <HAL_RCC_ClockConfig+0x35c>)
 80050f2:	5ccb      	ldrb	r3, [r1, r3]
 80050f4:	f003 031f 	and.w	r3, r3, #31
 80050f8:	fa22 f303 	lsr.w	r3, r2, r3
 80050fc:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80050fe:	4b0e      	ldr	r3, [pc, #56]	; (8005138 <HAL_RCC_ClockConfig+0x358>)
 8005100:	699b      	ldr	r3, [r3, #24]
 8005102:	f003 030f 	and.w	r3, r3, #15
 8005106:	4a0d      	ldr	r2, [pc, #52]	; (800513c <HAL_RCC_ClockConfig+0x35c>)
 8005108:	5cd3      	ldrb	r3, [r2, r3]
 800510a:	f003 031f 	and.w	r3, r3, #31
 800510e:	693a      	ldr	r2, [r7, #16]
 8005110:	fa22 f303 	lsr.w	r3, r2, r3
 8005114:	4a0a      	ldr	r2, [pc, #40]	; (8005140 <HAL_RCC_ClockConfig+0x360>)
 8005116:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8005118:	4a0a      	ldr	r2, [pc, #40]	; (8005144 <HAL_RCC_ClockConfig+0x364>)
 800511a:	693b      	ldr	r3, [r7, #16]
 800511c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 800511e:	4b0a      	ldr	r3, [pc, #40]	; (8005148 <HAL_RCC_ClockConfig+0x368>)
 8005120:	681b      	ldr	r3, [r3, #0]
 8005122:	4618      	mov	r0, r3
 8005124:	f7fc f98c 	bl	8001440 <HAL_InitTick>
 8005128:	4603      	mov	r3, r0
 800512a:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 800512c:	7bfb      	ldrb	r3, [r7, #15]
}
 800512e:	4618      	mov	r0, r3
 8005130:	3718      	adds	r7, #24
 8005132:	46bd      	mov	sp, r7
 8005134:	bd80      	pop	{r7, pc}
 8005136:	bf00      	nop
 8005138:	58024400 	.word	0x58024400
 800513c:	080124c0 	.word	0x080124c0
 8005140:	20000004 	.word	0x20000004
 8005144:	20000000 	.word	0x20000000
 8005148:	20000008 	.word	0x20000008

0800514c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800514c:	b480      	push	{r7}
 800514e:	b089      	sub	sp, #36	; 0x24
 8005150:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005152:	4bb3      	ldr	r3, [pc, #716]	; (8005420 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005154:	691b      	ldr	r3, [r3, #16]
 8005156:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800515a:	2b18      	cmp	r3, #24
 800515c:	f200 8155 	bhi.w	800540a <HAL_RCC_GetSysClockFreq+0x2be>
 8005160:	a201      	add	r2, pc, #4	; (adr r2, 8005168 <HAL_RCC_GetSysClockFreq+0x1c>)
 8005162:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005166:	bf00      	nop
 8005168:	080051cd 	.word	0x080051cd
 800516c:	0800540b 	.word	0x0800540b
 8005170:	0800540b 	.word	0x0800540b
 8005174:	0800540b 	.word	0x0800540b
 8005178:	0800540b 	.word	0x0800540b
 800517c:	0800540b 	.word	0x0800540b
 8005180:	0800540b 	.word	0x0800540b
 8005184:	0800540b 	.word	0x0800540b
 8005188:	080051f3 	.word	0x080051f3
 800518c:	0800540b 	.word	0x0800540b
 8005190:	0800540b 	.word	0x0800540b
 8005194:	0800540b 	.word	0x0800540b
 8005198:	0800540b 	.word	0x0800540b
 800519c:	0800540b 	.word	0x0800540b
 80051a0:	0800540b 	.word	0x0800540b
 80051a4:	0800540b 	.word	0x0800540b
 80051a8:	080051f9 	.word	0x080051f9
 80051ac:	0800540b 	.word	0x0800540b
 80051b0:	0800540b 	.word	0x0800540b
 80051b4:	0800540b 	.word	0x0800540b
 80051b8:	0800540b 	.word	0x0800540b
 80051bc:	0800540b 	.word	0x0800540b
 80051c0:	0800540b 	.word	0x0800540b
 80051c4:	0800540b 	.word	0x0800540b
 80051c8:	080051ff 	.word	0x080051ff
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80051cc:	4b94      	ldr	r3, [pc, #592]	; (8005420 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	f003 0320 	and.w	r3, r3, #32
 80051d4:	2b00      	cmp	r3, #0
 80051d6:	d009      	beq.n	80051ec <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80051d8:	4b91      	ldr	r3, [pc, #580]	; (8005420 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	08db      	lsrs	r3, r3, #3
 80051de:	f003 0303 	and.w	r3, r3, #3
 80051e2:	4a90      	ldr	r2, [pc, #576]	; (8005424 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80051e4:	fa22 f303 	lsr.w	r3, r2, r3
 80051e8:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 80051ea:	e111      	b.n	8005410 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 80051ec:	4b8d      	ldr	r3, [pc, #564]	; (8005424 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80051ee:	61bb      	str	r3, [r7, #24]
    break;
 80051f0:	e10e      	b.n	8005410 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 80051f2:	4b8d      	ldr	r3, [pc, #564]	; (8005428 <HAL_RCC_GetSysClockFreq+0x2dc>)
 80051f4:	61bb      	str	r3, [r7, #24]
    break;
 80051f6:	e10b      	b.n	8005410 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 80051f8:	4b8c      	ldr	r3, [pc, #560]	; (800542c <HAL_RCC_GetSysClockFreq+0x2e0>)
 80051fa:	61bb      	str	r3, [r7, #24]
    break;
 80051fc:	e108      	b.n	8005410 <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80051fe:	4b88      	ldr	r3, [pc, #544]	; (8005420 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005200:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005202:	f003 0303 	and.w	r3, r3, #3
 8005206:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8005208:	4b85      	ldr	r3, [pc, #532]	; (8005420 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800520a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800520c:	091b      	lsrs	r3, r3, #4
 800520e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005212:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8005214:	4b82      	ldr	r3, [pc, #520]	; (8005420 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005216:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005218:	f003 0301 	and.w	r3, r3, #1
 800521c:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 800521e:	4b80      	ldr	r3, [pc, #512]	; (8005420 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005220:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005222:	08db      	lsrs	r3, r3, #3
 8005224:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005228:	68fa      	ldr	r2, [r7, #12]
 800522a:	fb02 f303 	mul.w	r3, r2, r3
 800522e:	ee07 3a90 	vmov	s15, r3
 8005232:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005236:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 800523a:	693b      	ldr	r3, [r7, #16]
 800523c:	2b00      	cmp	r3, #0
 800523e:	f000 80e1 	beq.w	8005404 <HAL_RCC_GetSysClockFreq+0x2b8>
 8005242:	697b      	ldr	r3, [r7, #20]
 8005244:	2b02      	cmp	r3, #2
 8005246:	f000 8083 	beq.w	8005350 <HAL_RCC_GetSysClockFreq+0x204>
 800524a:	697b      	ldr	r3, [r7, #20]
 800524c:	2b02      	cmp	r3, #2
 800524e:	f200 80a1 	bhi.w	8005394 <HAL_RCC_GetSysClockFreq+0x248>
 8005252:	697b      	ldr	r3, [r7, #20]
 8005254:	2b00      	cmp	r3, #0
 8005256:	d003      	beq.n	8005260 <HAL_RCC_GetSysClockFreq+0x114>
 8005258:	697b      	ldr	r3, [r7, #20]
 800525a:	2b01      	cmp	r3, #1
 800525c:	d056      	beq.n	800530c <HAL_RCC_GetSysClockFreq+0x1c0>
 800525e:	e099      	b.n	8005394 <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005260:	4b6f      	ldr	r3, [pc, #444]	; (8005420 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	f003 0320 	and.w	r3, r3, #32
 8005268:	2b00      	cmp	r3, #0
 800526a:	d02d      	beq.n	80052c8 <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800526c:	4b6c      	ldr	r3, [pc, #432]	; (8005420 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	08db      	lsrs	r3, r3, #3
 8005272:	f003 0303 	and.w	r3, r3, #3
 8005276:	4a6b      	ldr	r2, [pc, #428]	; (8005424 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8005278:	fa22 f303 	lsr.w	r3, r2, r3
 800527c:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	ee07 3a90 	vmov	s15, r3
 8005284:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005288:	693b      	ldr	r3, [r7, #16]
 800528a:	ee07 3a90 	vmov	s15, r3
 800528e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005292:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005296:	4b62      	ldr	r3, [pc, #392]	; (8005420 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005298:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800529a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800529e:	ee07 3a90 	vmov	s15, r3
 80052a2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80052a6:	ed97 6a02 	vldr	s12, [r7, #8]
 80052aa:	eddf 5a61 	vldr	s11, [pc, #388]	; 8005430 <HAL_RCC_GetSysClockFreq+0x2e4>
 80052ae:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80052b2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80052b6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80052ba:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80052be:	ee67 7a27 	vmul.f32	s15, s14, s15
 80052c2:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 80052c6:	e087      	b.n	80053d8 <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80052c8:	693b      	ldr	r3, [r7, #16]
 80052ca:	ee07 3a90 	vmov	s15, r3
 80052ce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80052d2:	eddf 6a58 	vldr	s13, [pc, #352]	; 8005434 <HAL_RCC_GetSysClockFreq+0x2e8>
 80052d6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80052da:	4b51      	ldr	r3, [pc, #324]	; (8005420 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80052dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80052de:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80052e2:	ee07 3a90 	vmov	s15, r3
 80052e6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80052ea:	ed97 6a02 	vldr	s12, [r7, #8]
 80052ee:	eddf 5a50 	vldr	s11, [pc, #320]	; 8005430 <HAL_RCC_GetSysClockFreq+0x2e4>
 80052f2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80052f6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80052fa:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80052fe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005302:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005306:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800530a:	e065      	b.n	80053d8 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800530c:	693b      	ldr	r3, [r7, #16]
 800530e:	ee07 3a90 	vmov	s15, r3
 8005312:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005316:	eddf 6a48 	vldr	s13, [pc, #288]	; 8005438 <HAL_RCC_GetSysClockFreq+0x2ec>
 800531a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800531e:	4b40      	ldr	r3, [pc, #256]	; (8005420 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005320:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005322:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005326:	ee07 3a90 	vmov	s15, r3
 800532a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800532e:	ed97 6a02 	vldr	s12, [r7, #8]
 8005332:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8005430 <HAL_RCC_GetSysClockFreq+0x2e4>
 8005336:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800533a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800533e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005342:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005346:	ee67 7a27 	vmul.f32	s15, s14, s15
 800534a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800534e:	e043      	b.n	80053d8 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8005350:	693b      	ldr	r3, [r7, #16]
 8005352:	ee07 3a90 	vmov	s15, r3
 8005356:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800535a:	eddf 6a38 	vldr	s13, [pc, #224]	; 800543c <HAL_RCC_GetSysClockFreq+0x2f0>
 800535e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005362:	4b2f      	ldr	r3, [pc, #188]	; (8005420 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005364:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005366:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800536a:	ee07 3a90 	vmov	s15, r3
 800536e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005372:	ed97 6a02 	vldr	s12, [r7, #8]
 8005376:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8005430 <HAL_RCC_GetSysClockFreq+0x2e4>
 800537a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800537e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005382:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005386:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800538a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800538e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005392:	e021      	b.n	80053d8 <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8005394:	693b      	ldr	r3, [r7, #16]
 8005396:	ee07 3a90 	vmov	s15, r3
 800539a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800539e:	eddf 6a26 	vldr	s13, [pc, #152]	; 8005438 <HAL_RCC_GetSysClockFreq+0x2ec>
 80053a2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80053a6:	4b1e      	ldr	r3, [pc, #120]	; (8005420 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80053a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80053aa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80053ae:	ee07 3a90 	vmov	s15, r3
 80053b2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80053b6:	ed97 6a02 	vldr	s12, [r7, #8]
 80053ba:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8005430 <HAL_RCC_GetSysClockFreq+0x2e4>
 80053be:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80053c2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80053c6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80053ca:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80053ce:	ee67 7a27 	vmul.f32	s15, s14, s15
 80053d2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80053d6:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 80053d8:	4b11      	ldr	r3, [pc, #68]	; (8005420 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80053da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80053dc:	0a5b      	lsrs	r3, r3, #9
 80053de:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80053e2:	3301      	adds	r3, #1
 80053e4:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 80053e6:	683b      	ldr	r3, [r7, #0]
 80053e8:	ee07 3a90 	vmov	s15, r3
 80053ec:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80053f0:	edd7 6a07 	vldr	s13, [r7, #28]
 80053f4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80053f8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80053fc:	ee17 3a90 	vmov	r3, s15
 8005400:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 8005402:	e005      	b.n	8005410 <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 8005404:	2300      	movs	r3, #0
 8005406:	61bb      	str	r3, [r7, #24]
    break;
 8005408:	e002      	b.n	8005410 <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 800540a:	4b07      	ldr	r3, [pc, #28]	; (8005428 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800540c:	61bb      	str	r3, [r7, #24]
    break;
 800540e:	bf00      	nop
  }

  return sysclockfreq;
 8005410:	69bb      	ldr	r3, [r7, #24]
}
 8005412:	4618      	mov	r0, r3
 8005414:	3724      	adds	r7, #36	; 0x24
 8005416:	46bd      	mov	sp, r7
 8005418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800541c:	4770      	bx	lr
 800541e:	bf00      	nop
 8005420:	58024400 	.word	0x58024400
 8005424:	03d09000 	.word	0x03d09000
 8005428:	003d0900 	.word	0x003d0900
 800542c:	007a1200 	.word	0x007a1200
 8005430:	46000000 	.word	0x46000000
 8005434:	4c742400 	.word	0x4c742400
 8005438:	4a742400 	.word	0x4a742400
 800543c:	4af42400 	.word	0x4af42400

08005440 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005440:	b580      	push	{r7, lr}
 8005442:	b082      	sub	sp, #8
 8005444:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8005446:	f7ff fe81 	bl	800514c <HAL_RCC_GetSysClockFreq>
 800544a:	4602      	mov	r2, r0
 800544c:	4b10      	ldr	r3, [pc, #64]	; (8005490 <HAL_RCC_GetHCLKFreq+0x50>)
 800544e:	699b      	ldr	r3, [r3, #24]
 8005450:	0a1b      	lsrs	r3, r3, #8
 8005452:	f003 030f 	and.w	r3, r3, #15
 8005456:	490f      	ldr	r1, [pc, #60]	; (8005494 <HAL_RCC_GetHCLKFreq+0x54>)
 8005458:	5ccb      	ldrb	r3, [r1, r3]
 800545a:	f003 031f 	and.w	r3, r3, #31
 800545e:	fa22 f303 	lsr.w	r3, r2, r3
 8005462:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8005464:	4b0a      	ldr	r3, [pc, #40]	; (8005490 <HAL_RCC_GetHCLKFreq+0x50>)
 8005466:	699b      	ldr	r3, [r3, #24]
 8005468:	f003 030f 	and.w	r3, r3, #15
 800546c:	4a09      	ldr	r2, [pc, #36]	; (8005494 <HAL_RCC_GetHCLKFreq+0x54>)
 800546e:	5cd3      	ldrb	r3, [r2, r3]
 8005470:	f003 031f 	and.w	r3, r3, #31
 8005474:	687a      	ldr	r2, [r7, #4]
 8005476:	fa22 f303 	lsr.w	r3, r2, r3
 800547a:	4a07      	ldr	r2, [pc, #28]	; (8005498 <HAL_RCC_GetHCLKFreq+0x58>)
 800547c:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800547e:	4a07      	ldr	r2, [pc, #28]	; (800549c <HAL_RCC_GetHCLKFreq+0x5c>)
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8005484:	4b04      	ldr	r3, [pc, #16]	; (8005498 <HAL_RCC_GetHCLKFreq+0x58>)
 8005486:	681b      	ldr	r3, [r3, #0]
}
 8005488:	4618      	mov	r0, r3
 800548a:	3708      	adds	r7, #8
 800548c:	46bd      	mov	sp, r7
 800548e:	bd80      	pop	{r7, pc}
 8005490:	58024400 	.word	0x58024400
 8005494:	080124c0 	.word	0x080124c0
 8005498:	20000004 	.word	0x20000004
 800549c:	20000000 	.word	0x20000000

080054a0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80054a0:	b580      	push	{r7, lr}
 80054a2:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 80054a4:	f7ff ffcc 	bl	8005440 <HAL_RCC_GetHCLKFreq>
 80054a8:	4602      	mov	r2, r0
 80054aa:	4b06      	ldr	r3, [pc, #24]	; (80054c4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80054ac:	69db      	ldr	r3, [r3, #28]
 80054ae:	091b      	lsrs	r3, r3, #4
 80054b0:	f003 0307 	and.w	r3, r3, #7
 80054b4:	4904      	ldr	r1, [pc, #16]	; (80054c8 <HAL_RCC_GetPCLK1Freq+0x28>)
 80054b6:	5ccb      	ldrb	r3, [r1, r3]
 80054b8:	f003 031f 	and.w	r3, r3, #31
 80054bc:	fa22 f303 	lsr.w	r3, r2, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 80054c0:	4618      	mov	r0, r3
 80054c2:	bd80      	pop	{r7, pc}
 80054c4:	58024400 	.word	0x58024400
 80054c8:	080124c0 	.word	0x080124c0

080054cc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80054cc:	b580      	push	{r7, lr}
 80054ce:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 80054d0:	f7ff ffb6 	bl	8005440 <HAL_RCC_GetHCLKFreq>
 80054d4:	4602      	mov	r2, r0
 80054d6:	4b06      	ldr	r3, [pc, #24]	; (80054f0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80054d8:	69db      	ldr	r3, [r3, #28]
 80054da:	0a1b      	lsrs	r3, r3, #8
 80054dc:	f003 0307 	and.w	r3, r3, #7
 80054e0:	4904      	ldr	r1, [pc, #16]	; (80054f4 <HAL_RCC_GetPCLK2Freq+0x28>)
 80054e2:	5ccb      	ldrb	r3, [r1, r3]
 80054e4:	f003 031f 	and.w	r3, r3, #31
 80054e8:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 80054ec:	4618      	mov	r0, r3
 80054ee:	bd80      	pop	{r7, pc}
 80054f0:	58024400 	.word	0x58024400
 80054f4:	080124c0 	.word	0x080124c0

080054f8 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency: Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80054f8:	b480      	push	{r7}
 80054fa:	b083      	sub	sp, #12
 80054fc:	af00      	add	r7, sp, #0
 80054fe:	6078      	str	r0, [r7, #4]
 8005500:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 | RCC_CLOCKTYPE_PCLK1 |
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	223f      	movs	r2, #63	; 0x3f
 8005506:	601a      	str	r2, [r3, #0]
                                 RCC_CLOCKTYPE_PCLK2 |  RCC_CLOCKTYPE_D3PCLK1  ;

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8005508:	4b1a      	ldr	r3, [pc, #104]	; (8005574 <HAL_RCC_GetClockConfig+0x7c>)
 800550a:	691b      	ldr	r3, [r3, #16]
 800550c:	f003 0207 	and.w	r2, r3, #7
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	605a      	str	r2, [r3, #4]

#if defined(RCC_D1CFGR_D1CPRE)
  /* Get the SYSCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1CPRE);
 8005514:	4b17      	ldr	r3, [pc, #92]	; (8005574 <HAL_RCC_GetClockConfig+0x7c>)
 8005516:	699b      	ldr	r3, [r3, #24]
 8005518:	f403 6270 	and.w	r2, r3, #3840	; 0xf00
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	609a      	str	r2, [r3, #8]

  /* Get the D1HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_HPRE);
 8005520:	4b14      	ldr	r3, [pc, #80]	; (8005574 <HAL_RCC_GetClockConfig+0x7c>)
 8005522:	699b      	ldr	r3, [r3, #24]
 8005524:	f003 020f 	and.w	r2, r3, #15
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	60da      	str	r2, [r3, #12]

  /* Get the APB3 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB3CLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1PPRE);
 800552c:	4b11      	ldr	r3, [pc, #68]	; (8005574 <HAL_RCC_GetClockConfig+0x7c>)
 800552e:	699b      	ldr	r3, [r3, #24]
 8005530:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	611a      	str	r2, [r3, #16]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1);
 8005538:	4b0e      	ldr	r3, [pc, #56]	; (8005574 <HAL_RCC_GetClockConfig+0x7c>)
 800553a:	69db      	ldr	r3, [r3, #28]
 800553c:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	615a      	str	r2, [r3, #20]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2);
 8005544:	4b0b      	ldr	r3, [pc, #44]	; (8005574 <HAL_RCC_GetClockConfig+0x7c>)
 8005546:	69db      	ldr	r3, [r3, #28]
 8005548:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	619a      	str	r2, [r3, #24]

  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->D3CFGR & RCC_D3CFGR_D3PPRE);
 8005550:	4b08      	ldr	r3, [pc, #32]	; (8005574 <HAL_RCC_GetClockConfig+0x7c>)
 8005552:	6a1b      	ldr	r3, [r3, #32]
 8005554:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	61da      	str	r2, [r3, #28]
  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE);
#endif

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800555c:	4b06      	ldr	r3, [pc, #24]	; (8005578 <HAL_RCC_GetClockConfig+0x80>)
 800555e:	681b      	ldr	r3, [r3, #0]
 8005560:	f003 020f 	and.w	r2, r3, #15
 8005564:	683b      	ldr	r3, [r7, #0]
 8005566:	601a      	str	r2, [r3, #0]
}
 8005568:	bf00      	nop
 800556a:	370c      	adds	r7, #12
 800556c:	46bd      	mov	sp, r7
 800556e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005572:	4770      	bx	lr
 8005574:	58024400 	.word	0x58024400
 8005578:	52002000 	.word	0x52002000

0800557c <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800557c:	b580      	push	{r7, lr}
 800557e:	b086      	sub	sp, #24
 8005580:	af00      	add	r7, sp, #0
 8005582:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8005584:	2300      	movs	r3, #0
 8005586:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8005588:	2300      	movs	r3, #0
 800558a:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005594:	2b00      	cmp	r3, #0
 8005596:	d03f      	beq.n	8005618 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800559c:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80055a0:	d02a      	beq.n	80055f8 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 80055a2:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80055a6:	d824      	bhi.n	80055f2 <HAL_RCCEx_PeriphCLKConfig+0x76>
 80055a8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80055ac:	d018      	beq.n	80055e0 <HAL_RCCEx_PeriphCLKConfig+0x64>
 80055ae:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80055b2:	d81e      	bhi.n	80055f2 <HAL_RCCEx_PeriphCLKConfig+0x76>
 80055b4:	2b00      	cmp	r3, #0
 80055b6:	d003      	beq.n	80055c0 <HAL_RCCEx_PeriphCLKConfig+0x44>
 80055b8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80055bc:	d007      	beq.n	80055ce <HAL_RCCEx_PeriphCLKConfig+0x52>
 80055be:	e018      	b.n	80055f2 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80055c0:	4bab      	ldr	r3, [pc, #684]	; (8005870 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80055c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80055c4:	4aaa      	ldr	r2, [pc, #680]	; (8005870 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80055c6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80055ca:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 80055cc:	e015      	b.n	80055fa <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	3304      	adds	r3, #4
 80055d2:	2102      	movs	r1, #2
 80055d4:	4618      	mov	r0, r3
 80055d6:	f001 feff 	bl	80073d8 <RCCEx_PLL2_Config>
 80055da:	4603      	mov	r3, r0
 80055dc:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 80055de:	e00c      	b.n	80055fa <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	3324      	adds	r3, #36	; 0x24
 80055e4:	2102      	movs	r1, #2
 80055e6:	4618      	mov	r0, r3
 80055e8:	f001 ffa8 	bl	800753c <RCCEx_PLL3_Config>
 80055ec:	4603      	mov	r3, r0
 80055ee:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 80055f0:	e003      	b.n	80055fa <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80055f2:	2301      	movs	r3, #1
 80055f4:	75fb      	strb	r3, [r7, #23]
      break;
 80055f6:	e000      	b.n	80055fa <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 80055f8:	bf00      	nop
    }

    if(ret == HAL_OK)
 80055fa:	7dfb      	ldrb	r3, [r7, #23]
 80055fc:	2b00      	cmp	r3, #0
 80055fe:	d109      	bne.n	8005614 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8005600:	4b9b      	ldr	r3, [pc, #620]	; (8005870 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8005602:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005604:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800560c:	4998      	ldr	r1, [pc, #608]	; (8005870 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800560e:	4313      	orrs	r3, r2
 8005610:	650b      	str	r3, [r1, #80]	; 0x50
 8005612:	e001      	b.n	8005618 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005614:	7dfb      	ldrb	r3, [r7, #23]
 8005616:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	681b      	ldr	r3, [r3, #0]
 800561c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005620:	2b00      	cmp	r3, #0
 8005622:	d03d      	beq.n	80056a0 <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005628:	2b04      	cmp	r3, #4
 800562a:	d826      	bhi.n	800567a <HAL_RCCEx_PeriphCLKConfig+0xfe>
 800562c:	a201      	add	r2, pc, #4	; (adr r2, 8005634 <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 800562e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005632:	bf00      	nop
 8005634:	08005649 	.word	0x08005649
 8005638:	08005657 	.word	0x08005657
 800563c:	08005669 	.word	0x08005669
 8005640:	08005681 	.word	0x08005681
 8005644:	08005681 	.word	0x08005681
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005648:	4b89      	ldr	r3, [pc, #548]	; (8005870 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800564a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800564c:	4a88      	ldr	r2, [pc, #544]	; (8005870 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800564e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005652:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8005654:	e015      	b.n	8005682 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	3304      	adds	r3, #4
 800565a:	2100      	movs	r1, #0
 800565c:	4618      	mov	r0, r3
 800565e:	f001 febb 	bl	80073d8 <RCCEx_PLL2_Config>
 8005662:	4603      	mov	r3, r0
 8005664:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8005666:	e00c      	b.n	8005682 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	3324      	adds	r3, #36	; 0x24
 800566c:	2100      	movs	r1, #0
 800566e:	4618      	mov	r0, r3
 8005670:	f001 ff64 	bl	800753c <RCCEx_PLL3_Config>
 8005674:	4603      	mov	r3, r0
 8005676:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8005678:	e003      	b.n	8005682 <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800567a:	2301      	movs	r3, #1
 800567c:	75fb      	strb	r3, [r7, #23]
      break;
 800567e:	e000      	b.n	8005682 <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 8005680:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005682:	7dfb      	ldrb	r3, [r7, #23]
 8005684:	2b00      	cmp	r3, #0
 8005686:	d109      	bne.n	800569c <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005688:	4b79      	ldr	r3, [pc, #484]	; (8005870 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800568a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800568c:	f023 0207 	bic.w	r2, r3, #7
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005694:	4976      	ldr	r1, [pc, #472]	; (8005870 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8005696:	4313      	orrs	r3, r2
 8005698:	650b      	str	r3, [r1, #80]	; 0x50
 800569a:	e001      	b.n	80056a0 <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800569c:	7dfb      	ldrb	r3, [r7, #23]
 800569e:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	681b      	ldr	r3, [r3, #0]
 80056a4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80056a8:	2b00      	cmp	r3, #0
 80056aa:	d051      	beq.n	8005750 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80056b2:	f5b3 0f20 	cmp.w	r3, #10485760	; 0xa00000
 80056b6:	d036      	beq.n	8005726 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 80056b8:	f5b3 0f20 	cmp.w	r3, #10485760	; 0xa00000
 80056bc:	d830      	bhi.n	8005720 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
 80056be:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80056c2:	d032      	beq.n	800572a <HAL_RCCEx_PeriphCLKConfig+0x1ae>
 80056c4:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80056c8:	d82a      	bhi.n	8005720 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
 80056ca:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80056ce:	d02e      	beq.n	800572e <HAL_RCCEx_PeriphCLKConfig+0x1b2>
 80056d0:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80056d4:	d824      	bhi.n	8005720 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
 80056d6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80056da:	d018      	beq.n	800570e <HAL_RCCEx_PeriphCLKConfig+0x192>
 80056dc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80056e0:	d81e      	bhi.n	8005720 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
 80056e2:	2b00      	cmp	r3, #0
 80056e4:	d003      	beq.n	80056ee <HAL_RCCEx_PeriphCLKConfig+0x172>
 80056e6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80056ea:	d007      	beq.n	80056fc <HAL_RCCEx_PeriphCLKConfig+0x180>
 80056ec:	e018      	b.n	8005720 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80056ee:	4b60      	ldr	r3, [pc, #384]	; (8005870 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80056f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80056f2:	4a5f      	ldr	r2, [pc, #380]	; (8005870 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80056f4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80056f8:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80056fa:	e019      	b.n	8005730 <HAL_RCCEx_PeriphCLKConfig+0x1b4>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	3304      	adds	r3, #4
 8005700:	2100      	movs	r1, #0
 8005702:	4618      	mov	r0, r3
 8005704:	f001 fe68 	bl	80073d8 <RCCEx_PLL2_Config>
 8005708:	4603      	mov	r3, r0
 800570a:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 800570c:	e010      	b.n	8005730 <HAL_RCCEx_PeriphCLKConfig+0x1b4>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	3324      	adds	r3, #36	; 0x24
 8005712:	2100      	movs	r1, #0
 8005714:	4618      	mov	r0, r3
 8005716:	f001 ff11 	bl	800753c <RCCEx_PLL3_Config>
 800571a:	4603      	mov	r3, r0
 800571c:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800571e:	e007      	b.n	8005730 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8005720:	2301      	movs	r3, #1
 8005722:	75fb      	strb	r3, [r7, #23]
      break;
 8005724:	e004      	b.n	8005730 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
      break;
 8005726:	bf00      	nop
 8005728:	e002      	b.n	8005730 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
      break;
 800572a:	bf00      	nop
 800572c:	e000      	b.n	8005730 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
      break;
 800572e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005730:	7dfb      	ldrb	r3, [r7, #23]
 8005732:	2b00      	cmp	r3, #0
 8005734:	d10a      	bne.n	800574c <HAL_RCCEx_PeriphCLKConfig+0x1d0>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8005736:	4b4e      	ldr	r3, [pc, #312]	; (8005870 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8005738:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800573a:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8005744:	494a      	ldr	r1, [pc, #296]	; (8005870 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8005746:	4313      	orrs	r3, r2
 8005748:	658b      	str	r3, [r1, #88]	; 0x58
 800574a:	e001      	b.n	8005750 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800574c:	7dfb      	ldrb	r3, [r7, #23]
 800574e:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	681b      	ldr	r3, [r3, #0]
 8005754:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005758:	2b00      	cmp	r3, #0
 800575a:	d051      	beq.n	8005800 <HAL_RCCEx_PeriphCLKConfig+0x284>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8005762:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 8005766:	d036      	beq.n	80057d6 <HAL_RCCEx_PeriphCLKConfig+0x25a>
 8005768:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 800576c:	d830      	bhi.n	80057d0 <HAL_RCCEx_PeriphCLKConfig+0x254>
 800576e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005772:	d032      	beq.n	80057da <HAL_RCCEx_PeriphCLKConfig+0x25e>
 8005774:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005778:	d82a      	bhi.n	80057d0 <HAL_RCCEx_PeriphCLKConfig+0x254>
 800577a:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800577e:	d02e      	beq.n	80057de <HAL_RCCEx_PeriphCLKConfig+0x262>
 8005780:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8005784:	d824      	bhi.n	80057d0 <HAL_RCCEx_PeriphCLKConfig+0x254>
 8005786:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800578a:	d018      	beq.n	80057be <HAL_RCCEx_PeriphCLKConfig+0x242>
 800578c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005790:	d81e      	bhi.n	80057d0 <HAL_RCCEx_PeriphCLKConfig+0x254>
 8005792:	2b00      	cmp	r3, #0
 8005794:	d003      	beq.n	800579e <HAL_RCCEx_PeriphCLKConfig+0x222>
 8005796:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800579a:	d007      	beq.n	80057ac <HAL_RCCEx_PeriphCLKConfig+0x230>
 800579c:	e018      	b.n	80057d0 <HAL_RCCEx_PeriphCLKConfig+0x254>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800579e:	4b34      	ldr	r3, [pc, #208]	; (8005870 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80057a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80057a2:	4a33      	ldr	r2, [pc, #204]	; (8005870 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80057a4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80057a8:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80057aa:	e019      	b.n	80057e0 <HAL_RCCEx_PeriphCLKConfig+0x264>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	3304      	adds	r3, #4
 80057b0:	2100      	movs	r1, #0
 80057b2:	4618      	mov	r0, r3
 80057b4:	f001 fe10 	bl	80073d8 <RCCEx_PLL2_Config>
 80057b8:	4603      	mov	r3, r0
 80057ba:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 80057bc:	e010      	b.n	80057e0 <HAL_RCCEx_PeriphCLKConfig+0x264>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	3324      	adds	r3, #36	; 0x24
 80057c2:	2100      	movs	r1, #0
 80057c4:	4618      	mov	r0, r3
 80057c6:	f001 feb9 	bl	800753c <RCCEx_PLL3_Config>
 80057ca:	4603      	mov	r3, r0
 80057cc:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80057ce:	e007      	b.n	80057e0 <HAL_RCCEx_PeriphCLKConfig+0x264>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 80057d0:	2301      	movs	r3, #1
 80057d2:	75fb      	strb	r3, [r7, #23]
      break;
 80057d4:	e004      	b.n	80057e0 <HAL_RCCEx_PeriphCLKConfig+0x264>
      break;
 80057d6:	bf00      	nop
 80057d8:	e002      	b.n	80057e0 <HAL_RCCEx_PeriphCLKConfig+0x264>
      break;
 80057da:	bf00      	nop
 80057dc:	e000      	b.n	80057e0 <HAL_RCCEx_PeriphCLKConfig+0x264>
      break;
 80057de:	bf00      	nop
    }

    if(ret == HAL_OK)
 80057e0:	7dfb      	ldrb	r3, [r7, #23]
 80057e2:	2b00      	cmp	r3, #0
 80057e4:	d10a      	bne.n	80057fc <HAL_RCCEx_PeriphCLKConfig+0x280>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 80057e6:	4b22      	ldr	r3, [pc, #136]	; (8005870 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80057e8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80057ea:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80057f4:	491e      	ldr	r1, [pc, #120]	; (8005870 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80057f6:	4313      	orrs	r3, r2
 80057f8:	658b      	str	r3, [r1, #88]	; 0x58
 80057fa:	e001      	b.n	8005800 <HAL_RCCEx_PeriphCLKConfig+0x284>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80057fc:	7dfb      	ldrb	r3, [r7, #23]
 80057fe:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	681b      	ldr	r3, [r3, #0]
 8005804:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005808:	2b00      	cmp	r3, #0
 800580a:	d035      	beq.n	8005878 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    switch(PeriphClkInit->OspiClockSelection)
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005810:	2b30      	cmp	r3, #48	; 0x30
 8005812:	d01c      	beq.n	800584e <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8005814:	2b30      	cmp	r3, #48	; 0x30
 8005816:	d817      	bhi.n	8005848 <HAL_RCCEx_PeriphCLKConfig+0x2cc>
 8005818:	2b20      	cmp	r3, #32
 800581a:	d00c      	beq.n	8005836 <HAL_RCCEx_PeriphCLKConfig+0x2ba>
 800581c:	2b20      	cmp	r3, #32
 800581e:	d813      	bhi.n	8005848 <HAL_RCCEx_PeriphCLKConfig+0x2cc>
 8005820:	2b00      	cmp	r3, #0
 8005822:	d016      	beq.n	8005852 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
 8005824:	2b10      	cmp	r3, #16
 8005826:	d10f      	bne.n	8005848 <HAL_RCCEx_PeriphCLKConfig+0x2cc>
    {
    case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
      /* Enable OSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005828:	4b11      	ldr	r3, [pc, #68]	; (8005870 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800582a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800582c:	4a10      	ldr	r2, [pc, #64]	; (8005870 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800582e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005832:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* OSPI clock source configuration done later after clock selection check */
      break;
 8005834:	e00e      	b.n	8005854 <HAL_RCCEx_PeriphCLKConfig+0x2d8>

    case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	3304      	adds	r3, #4
 800583a:	2102      	movs	r1, #2
 800583c:	4618      	mov	r0, r3
 800583e:	f001 fdcb 	bl	80073d8 <RCCEx_PLL2_Config>
 8005842:	4603      	mov	r3, r0
 8005844:	75fb      	strb	r3, [r7, #23]

      /* OSPI clock source configuration done later after clock selection check */
      break;
 8005846:	e005      	b.n	8005854 <HAL_RCCEx_PeriphCLKConfig+0x2d8>
    case RCC_OSPICLKSOURCE_HCLK:
      /* HCLK clock selected as OSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8005848:	2301      	movs	r3, #1
 800584a:	75fb      	strb	r3, [r7, #23]
      break;
 800584c:	e002      	b.n	8005854 <HAL_RCCEx_PeriphCLKConfig+0x2d8>
      break;
 800584e:	bf00      	nop
 8005850:	e000      	b.n	8005854 <HAL_RCCEx_PeriphCLKConfig+0x2d8>
      break;
 8005852:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005854:	7dfb      	ldrb	r3, [r7, #23]
 8005856:	2b00      	cmp	r3, #0
 8005858:	d10c      	bne.n	8005874 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 800585a:	4b05      	ldr	r3, [pc, #20]	; (8005870 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800585c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800585e:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005866:	4902      	ldr	r1, [pc, #8]	; (8005870 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8005868:	4313      	orrs	r3, r2
 800586a:	64cb      	str	r3, [r1, #76]	; 0x4c
 800586c:	e004      	b.n	8005878 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
 800586e:	bf00      	nop
 8005870:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005874:	7dfb      	ldrb	r3, [r7, #23]
 8005876:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	681b      	ldr	r3, [r3, #0]
 800587c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005880:	2b00      	cmp	r3, #0
 8005882:	d047      	beq.n	8005914 <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005888:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800588c:	d030      	beq.n	80058f0 <HAL_RCCEx_PeriphCLKConfig+0x374>
 800588e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005892:	d82a      	bhi.n	80058ea <HAL_RCCEx_PeriphCLKConfig+0x36e>
 8005894:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8005898:	d02c      	beq.n	80058f4 <HAL_RCCEx_PeriphCLKConfig+0x378>
 800589a:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800589e:	d824      	bhi.n	80058ea <HAL_RCCEx_PeriphCLKConfig+0x36e>
 80058a0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80058a4:	d018      	beq.n	80058d8 <HAL_RCCEx_PeriphCLKConfig+0x35c>
 80058a6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80058aa:	d81e      	bhi.n	80058ea <HAL_RCCEx_PeriphCLKConfig+0x36e>
 80058ac:	2b00      	cmp	r3, #0
 80058ae:	d003      	beq.n	80058b8 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 80058b0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80058b4:	d007      	beq.n	80058c6 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 80058b6:	e018      	b.n	80058ea <HAL_RCCEx_PeriphCLKConfig+0x36e>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80058b8:	4bac      	ldr	r3, [pc, #688]	; (8005b6c <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 80058ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80058bc:	4aab      	ldr	r2, [pc, #684]	; (8005b6c <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 80058be:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80058c2:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 80058c4:	e017      	b.n	80058f6 <HAL_RCCEx_PeriphCLKConfig+0x37a>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	3304      	adds	r3, #4
 80058ca:	2100      	movs	r1, #0
 80058cc:	4618      	mov	r0, r3
 80058ce:	f001 fd83 	bl	80073d8 <RCCEx_PLL2_Config>
 80058d2:	4603      	mov	r3, r0
 80058d4:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 80058d6:	e00e      	b.n	80058f6 <HAL_RCCEx_PeriphCLKConfig+0x37a>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	3324      	adds	r3, #36	; 0x24
 80058dc:	2100      	movs	r1, #0
 80058de:	4618      	mov	r0, r3
 80058e0:	f001 fe2c 	bl	800753c <RCCEx_PLL3_Config>
 80058e4:	4603      	mov	r3, r0
 80058e6:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 80058e8:	e005      	b.n	80058f6 <HAL_RCCEx_PeriphCLKConfig+0x37a>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80058ea:	2301      	movs	r3, #1
 80058ec:	75fb      	strb	r3, [r7, #23]
      break;
 80058ee:	e002      	b.n	80058f6 <HAL_RCCEx_PeriphCLKConfig+0x37a>
      break;
 80058f0:	bf00      	nop
 80058f2:	e000      	b.n	80058f6 <HAL_RCCEx_PeriphCLKConfig+0x37a>
      break;
 80058f4:	bf00      	nop
    }

    if(ret == HAL_OK)
 80058f6:	7dfb      	ldrb	r3, [r7, #23]
 80058f8:	2b00      	cmp	r3, #0
 80058fa:	d109      	bne.n	8005910 <HAL_RCCEx_PeriphCLKConfig+0x394>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 80058fc:	4b9b      	ldr	r3, [pc, #620]	; (8005b6c <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 80058fe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005900:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005908:	4998      	ldr	r1, [pc, #608]	; (8005b6c <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 800590a:	4313      	orrs	r3, r2
 800590c:	650b      	str	r3, [r1, #80]	; 0x50
 800590e:	e001      	b.n	8005914 <HAL_RCCEx_PeriphCLKConfig+0x398>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005910:	7dfb      	ldrb	r3, [r7, #23]
 8005912:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	681b      	ldr	r3, [r3, #0]
 8005918:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800591c:	2b00      	cmp	r3, #0
 800591e:	d049      	beq.n	80059b4 <HAL_RCCEx_PeriphCLKConfig+0x438>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005924:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005928:	d02e      	beq.n	8005988 <HAL_RCCEx_PeriphCLKConfig+0x40c>
 800592a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800592e:	d828      	bhi.n	8005982 <HAL_RCCEx_PeriphCLKConfig+0x406>
 8005930:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8005934:	d02a      	beq.n	800598c <HAL_RCCEx_PeriphCLKConfig+0x410>
 8005936:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800593a:	d822      	bhi.n	8005982 <HAL_RCCEx_PeriphCLKConfig+0x406>
 800593c:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8005940:	d026      	beq.n	8005990 <HAL_RCCEx_PeriphCLKConfig+0x414>
 8005942:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8005946:	d81c      	bhi.n	8005982 <HAL_RCCEx_PeriphCLKConfig+0x406>
 8005948:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800594c:	d010      	beq.n	8005970 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
 800594e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005952:	d816      	bhi.n	8005982 <HAL_RCCEx_PeriphCLKConfig+0x406>
 8005954:	2b00      	cmp	r3, #0
 8005956:	d01d      	beq.n	8005994 <HAL_RCCEx_PeriphCLKConfig+0x418>
 8005958:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800595c:	d111      	bne.n	8005982 <HAL_RCCEx_PeriphCLKConfig+0x406>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	3304      	adds	r3, #4
 8005962:	2101      	movs	r1, #1
 8005964:	4618      	mov	r0, r3
 8005966:	f001 fd37 	bl	80073d8 <RCCEx_PLL2_Config>
 800596a:	4603      	mov	r3, r0
 800596c:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 800596e:	e012      	b.n	8005996 <HAL_RCCEx_PeriphCLKConfig+0x41a>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	3324      	adds	r3, #36	; 0x24
 8005974:	2101      	movs	r1, #1
 8005976:	4618      	mov	r0, r3
 8005978:	f001 fde0 	bl	800753c <RCCEx_PLL3_Config>
 800597c:	4603      	mov	r3, r0
 800597e:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8005980:	e009      	b.n	8005996 <HAL_RCCEx_PeriphCLKConfig+0x41a>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005982:	2301      	movs	r3, #1
 8005984:	75fb      	strb	r3, [r7, #23]
      break;
 8005986:	e006      	b.n	8005996 <HAL_RCCEx_PeriphCLKConfig+0x41a>
      break;
 8005988:	bf00      	nop
 800598a:	e004      	b.n	8005996 <HAL_RCCEx_PeriphCLKConfig+0x41a>
      break;
 800598c:	bf00      	nop
 800598e:	e002      	b.n	8005996 <HAL_RCCEx_PeriphCLKConfig+0x41a>
      break;
 8005990:	bf00      	nop
 8005992:	e000      	b.n	8005996 <HAL_RCCEx_PeriphCLKConfig+0x41a>
      break;
 8005994:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005996:	7dfb      	ldrb	r3, [r7, #23]
 8005998:	2b00      	cmp	r3, #0
 800599a:	d109      	bne.n	80059b0 <HAL_RCCEx_PeriphCLKConfig+0x434>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 800599c:	4b73      	ldr	r3, [pc, #460]	; (8005b6c <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 800599e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80059a0:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80059a8:	4970      	ldr	r1, [pc, #448]	; (8005b6c <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 80059aa:	4313      	orrs	r3, r2
 80059ac:	650b      	str	r3, [r1, #80]	; 0x50
 80059ae:	e001      	b.n	80059b4 <HAL_RCCEx_PeriphCLKConfig+0x438>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80059b0:	7dfb      	ldrb	r3, [r7, #23]
 80059b2:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	681b      	ldr	r3, [r3, #0]
 80059b8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80059bc:	2b00      	cmp	r3, #0
 80059be:	d04b      	beq.n	8005a58 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80059c6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80059ca:	d02e      	beq.n	8005a2a <HAL_RCCEx_PeriphCLKConfig+0x4ae>
 80059cc:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80059d0:	d828      	bhi.n	8005a24 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 80059d2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80059d6:	d02a      	beq.n	8005a2e <HAL_RCCEx_PeriphCLKConfig+0x4b2>
 80059d8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80059dc:	d822      	bhi.n	8005a24 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 80059de:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80059e2:	d026      	beq.n	8005a32 <HAL_RCCEx_PeriphCLKConfig+0x4b6>
 80059e4:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80059e8:	d81c      	bhi.n	8005a24 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 80059ea:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80059ee:	d010      	beq.n	8005a12 <HAL_RCCEx_PeriphCLKConfig+0x496>
 80059f0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80059f4:	d816      	bhi.n	8005a24 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 80059f6:	2b00      	cmp	r3, #0
 80059f8:	d01d      	beq.n	8005a36 <HAL_RCCEx_PeriphCLKConfig+0x4ba>
 80059fa:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80059fe:	d111      	bne.n	8005a24 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	3304      	adds	r3, #4
 8005a04:	2101      	movs	r1, #1
 8005a06:	4618      	mov	r0, r3
 8005a08:	f001 fce6 	bl	80073d8 <RCCEx_PLL2_Config>
 8005a0c:	4603      	mov	r3, r0
 8005a0e:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8005a10:	e012      	b.n	8005a38 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	3324      	adds	r3, #36	; 0x24
 8005a16:	2101      	movs	r1, #1
 8005a18:	4618      	mov	r0, r3
 8005a1a:	f001 fd8f 	bl	800753c <RCCEx_PLL3_Config>
 8005a1e:	4603      	mov	r3, r0
 8005a20:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8005a22:	e009      	b.n	8005a38 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 8005a24:	2301      	movs	r3, #1
 8005a26:	75fb      	strb	r3, [r7, #23]
      break;
 8005a28:	e006      	b.n	8005a38 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      break;
 8005a2a:	bf00      	nop
 8005a2c:	e004      	b.n	8005a38 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      break;
 8005a2e:	bf00      	nop
 8005a30:	e002      	b.n	8005a38 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      break;
 8005a32:	bf00      	nop
 8005a34:	e000      	b.n	8005a38 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      break;
 8005a36:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005a38:	7dfb      	ldrb	r3, [r7, #23]
 8005a3a:	2b00      	cmp	r3, #0
 8005a3c:	d10a      	bne.n	8005a54 <HAL_RCCEx_PeriphCLKConfig+0x4d8>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8005a3e:	4b4b      	ldr	r3, [pc, #300]	; (8005b6c <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 8005a40:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005a42:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8005a4c:	4947      	ldr	r1, [pc, #284]	; (8005b6c <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 8005a4e:	4313      	orrs	r3, r2
 8005a50:	658b      	str	r3, [r1, #88]	; 0x58
 8005a52:	e001      	b.n	8005a58 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005a54:	7dfb      	ldrb	r3, [r7, #23]
 8005a56:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	681b      	ldr	r3, [r3, #0]
 8005a5c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005a60:	2b00      	cmp	r3, #0
 8005a62:	d02f      	beq.n	8005ac4 <HAL_RCCEx_PeriphCLKConfig+0x548>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005a68:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005a6c:	d00e      	beq.n	8005a8c <HAL_RCCEx_PeriphCLKConfig+0x510>
 8005a6e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005a72:	d814      	bhi.n	8005a9e <HAL_RCCEx_PeriphCLKConfig+0x522>
 8005a74:	2b00      	cmp	r3, #0
 8005a76:	d015      	beq.n	8005aa4 <HAL_RCCEx_PeriphCLKConfig+0x528>
 8005a78:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005a7c:	d10f      	bne.n	8005a9e <HAL_RCCEx_PeriphCLKConfig+0x522>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005a7e:	4b3b      	ldr	r3, [pc, #236]	; (8005b6c <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 8005a80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a82:	4a3a      	ldr	r2, [pc, #232]	; (8005b6c <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 8005a84:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005a88:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8005a8a:	e00c      	b.n	8005aa6 <HAL_RCCEx_PeriphCLKConfig+0x52a>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	3304      	adds	r3, #4
 8005a90:	2101      	movs	r1, #1
 8005a92:	4618      	mov	r0, r3
 8005a94:	f001 fca0 	bl	80073d8 <RCCEx_PLL2_Config>
 8005a98:	4603      	mov	r3, r0
 8005a9a:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8005a9c:	e003      	b.n	8005aa6 <HAL_RCCEx_PeriphCLKConfig+0x52a>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005a9e:	2301      	movs	r3, #1
 8005aa0:	75fb      	strb	r3, [r7, #23]
      break;
 8005aa2:	e000      	b.n	8005aa6 <HAL_RCCEx_PeriphCLKConfig+0x52a>
      break;
 8005aa4:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005aa6:	7dfb      	ldrb	r3, [r7, #23]
 8005aa8:	2b00      	cmp	r3, #0
 8005aaa:	d109      	bne.n	8005ac0 <HAL_RCCEx_PeriphCLKConfig+0x544>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8005aac:	4b2f      	ldr	r3, [pc, #188]	; (8005b6c <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 8005aae:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005ab0:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005ab8:	492c      	ldr	r1, [pc, #176]	; (8005b6c <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 8005aba:	4313      	orrs	r3, r2
 8005abc:	650b      	str	r3, [r1, #80]	; 0x50
 8005abe:	e001      	b.n	8005ac4 <HAL_RCCEx_PeriphCLKConfig+0x548>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005ac0:	7dfb      	ldrb	r3, [r7, #23]
 8005ac2:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	681b      	ldr	r3, [r3, #0]
 8005ac8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005acc:	2b00      	cmp	r3, #0
 8005ace:	d032      	beq.n	8005b36 <HAL_RCCEx_PeriphCLKConfig+0x5ba>
  {
    switch(PeriphClkInit->FmcClockSelection)
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005ad4:	2b03      	cmp	r3, #3
 8005ad6:	d81b      	bhi.n	8005b10 <HAL_RCCEx_PeriphCLKConfig+0x594>
 8005ad8:	a201      	add	r2, pc, #4	; (adr r2, 8005ae0 <HAL_RCCEx_PeriphCLKConfig+0x564>)
 8005ada:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005ade:	bf00      	nop
 8005ae0:	08005b17 	.word	0x08005b17
 8005ae4:	08005af1 	.word	0x08005af1
 8005ae8:	08005aff 	.word	0x08005aff
 8005aec:	08005b17 	.word	0x08005b17
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005af0:	4b1e      	ldr	r3, [pc, #120]	; (8005b6c <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 8005af2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005af4:	4a1d      	ldr	r2, [pc, #116]	; (8005b6c <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 8005af6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005afa:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 8005afc:	e00c      	b.n	8005b18 <HAL_RCCEx_PeriphCLKConfig+0x59c>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	3304      	adds	r3, #4
 8005b02:	2102      	movs	r1, #2
 8005b04:	4618      	mov	r0, r3
 8005b06:	f001 fc67 	bl	80073d8 <RCCEx_PLL2_Config>
 8005b0a:	4603      	mov	r3, r0
 8005b0c:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 8005b0e:	e003      	b.n	8005b18 <HAL_RCCEx_PeriphCLKConfig+0x59c>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8005b10:	2301      	movs	r3, #1
 8005b12:	75fb      	strb	r3, [r7, #23]
      break;
 8005b14:	e000      	b.n	8005b18 <HAL_RCCEx_PeriphCLKConfig+0x59c>
      break;
 8005b16:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005b18:	7dfb      	ldrb	r3, [r7, #23]
 8005b1a:	2b00      	cmp	r3, #0
 8005b1c:	d109      	bne.n	8005b32 <HAL_RCCEx_PeriphCLKConfig+0x5b6>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8005b1e:	4b13      	ldr	r3, [pc, #76]	; (8005b6c <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 8005b20:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005b22:	f023 0203 	bic.w	r2, r3, #3
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005b2a:	4910      	ldr	r1, [pc, #64]	; (8005b6c <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 8005b2c:	4313      	orrs	r3, r2
 8005b2e:	64cb      	str	r3, [r1, #76]	; 0x4c
 8005b30:	e001      	b.n	8005b36 <HAL_RCCEx_PeriphCLKConfig+0x5ba>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005b32:	7dfb      	ldrb	r3, [r7, #23]
 8005b34:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	681b      	ldr	r3, [r3, #0]
 8005b3a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005b3e:	2b00      	cmp	r3, #0
 8005b40:	f000 808a 	beq.w	8005c58 <HAL_RCCEx_PeriphCLKConfig+0x6dc>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005b44:	4b0a      	ldr	r3, [pc, #40]	; (8005b70 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 8005b46:	681b      	ldr	r3, [r3, #0]
 8005b48:	4a09      	ldr	r2, [pc, #36]	; (8005b70 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 8005b4a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005b4e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005b50:	f7fb fdf8 	bl	8001744 <HAL_GetTick>
 8005b54:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005b56:	e00d      	b.n	8005b74 <HAL_RCCEx_PeriphCLKConfig+0x5f8>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005b58:	f7fb fdf4 	bl	8001744 <HAL_GetTick>
 8005b5c:	4602      	mov	r2, r0
 8005b5e:	693b      	ldr	r3, [r7, #16]
 8005b60:	1ad3      	subs	r3, r2, r3
 8005b62:	2b64      	cmp	r3, #100	; 0x64
 8005b64:	d906      	bls.n	8005b74 <HAL_RCCEx_PeriphCLKConfig+0x5f8>
      {
        ret = HAL_TIMEOUT;
 8005b66:	2303      	movs	r3, #3
 8005b68:	75fb      	strb	r3, [r7, #23]
        break;
 8005b6a:	e009      	b.n	8005b80 <HAL_RCCEx_PeriphCLKConfig+0x604>
 8005b6c:	58024400 	.word	0x58024400
 8005b70:	58024800 	.word	0x58024800
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005b74:	4bb9      	ldr	r3, [pc, #740]	; (8005e5c <HAL_RCCEx_PeriphCLKConfig+0x8e0>)
 8005b76:	681b      	ldr	r3, [r3, #0]
 8005b78:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005b7c:	2b00      	cmp	r3, #0
 8005b7e:	d0eb      	beq.n	8005b58 <HAL_RCCEx_PeriphCLKConfig+0x5dc>
      }
    }

    if(ret == HAL_OK)
 8005b80:	7dfb      	ldrb	r3, [r7, #23]
 8005b82:	2b00      	cmp	r3, #0
 8005b84:	d166      	bne.n	8005c54 <HAL_RCCEx_PeriphCLKConfig+0x6d8>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8005b86:	4bb6      	ldr	r3, [pc, #728]	; (8005e60 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8005b88:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8005b90:	4053      	eors	r3, r2
 8005b92:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005b96:	2b00      	cmp	r3, #0
 8005b98:	d013      	beq.n	8005bc2 <HAL_RCCEx_PeriphCLKConfig+0x646>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005b9a:	4bb1      	ldr	r3, [pc, #708]	; (8005e60 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8005b9c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005b9e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005ba2:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8005ba4:	4bae      	ldr	r3, [pc, #696]	; (8005e60 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8005ba6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005ba8:	4aad      	ldr	r2, [pc, #692]	; (8005e60 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8005baa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005bae:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8005bb0:	4bab      	ldr	r3, [pc, #684]	; (8005e60 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8005bb2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005bb4:	4aaa      	ldr	r2, [pc, #680]	; (8005e60 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8005bb6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005bba:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8005bbc:	4aa8      	ldr	r2, [pc, #672]	; (8005e60 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8005bbe:	68fb      	ldr	r3, [r7, #12]
 8005bc0:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8005bc8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005bcc:	d115      	bne.n	8005bfa <HAL_RCCEx_PeriphCLKConfig+0x67e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005bce:	f7fb fdb9 	bl	8001744 <HAL_GetTick>
 8005bd2:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005bd4:	e00b      	b.n	8005bee <HAL_RCCEx_PeriphCLKConfig+0x672>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005bd6:	f7fb fdb5 	bl	8001744 <HAL_GetTick>
 8005bda:	4602      	mov	r2, r0
 8005bdc:	693b      	ldr	r3, [r7, #16]
 8005bde:	1ad3      	subs	r3, r2, r3
 8005be0:	f241 3288 	movw	r2, #5000	; 0x1388
 8005be4:	4293      	cmp	r3, r2
 8005be6:	d902      	bls.n	8005bee <HAL_RCCEx_PeriphCLKConfig+0x672>
          {
            ret = HAL_TIMEOUT;
 8005be8:	2303      	movs	r3, #3
 8005bea:	75fb      	strb	r3, [r7, #23]
            break;
 8005bec:	e005      	b.n	8005bfa <HAL_RCCEx_PeriphCLKConfig+0x67e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005bee:	4b9c      	ldr	r3, [pc, #624]	; (8005e60 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8005bf0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005bf2:	f003 0302 	and.w	r3, r3, #2
 8005bf6:	2b00      	cmp	r3, #0
 8005bf8:	d0ed      	beq.n	8005bd6 <HAL_RCCEx_PeriphCLKConfig+0x65a>
          }
        }
      }

      if(ret == HAL_OK)
 8005bfa:	7dfb      	ldrb	r3, [r7, #23]
 8005bfc:	2b00      	cmp	r3, #0
 8005bfe:	d126      	bne.n	8005c4e <HAL_RCCEx_PeriphCLKConfig+0x6d2>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8005c06:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005c0a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005c0e:	d10d      	bne.n	8005c2c <HAL_RCCEx_PeriphCLKConfig+0x6b0>
 8005c10:	4b93      	ldr	r3, [pc, #588]	; (8005e60 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8005c12:	691b      	ldr	r3, [r3, #16]
 8005c14:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8005c1e:	0919      	lsrs	r1, r3, #4
 8005c20:	4b90      	ldr	r3, [pc, #576]	; (8005e64 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 8005c22:	400b      	ands	r3, r1
 8005c24:	498e      	ldr	r1, [pc, #568]	; (8005e60 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8005c26:	4313      	orrs	r3, r2
 8005c28:	610b      	str	r3, [r1, #16]
 8005c2a:	e005      	b.n	8005c38 <HAL_RCCEx_PeriphCLKConfig+0x6bc>
 8005c2c:	4b8c      	ldr	r3, [pc, #560]	; (8005e60 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8005c2e:	691b      	ldr	r3, [r3, #16]
 8005c30:	4a8b      	ldr	r2, [pc, #556]	; (8005e60 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8005c32:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8005c36:	6113      	str	r3, [r2, #16]
 8005c38:	4b89      	ldr	r3, [pc, #548]	; (8005e60 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8005c3a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8005c42:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005c46:	4986      	ldr	r1, [pc, #536]	; (8005e60 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8005c48:	4313      	orrs	r3, r2
 8005c4a:	670b      	str	r3, [r1, #112]	; 0x70
 8005c4c:	e004      	b.n	8005c58 <HAL_RCCEx_PeriphCLKConfig+0x6dc>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8005c4e:	7dfb      	ldrb	r3, [r7, #23]
 8005c50:	75bb      	strb	r3, [r7, #22]
 8005c52:	e001      	b.n	8005c58 <HAL_RCCEx_PeriphCLKConfig+0x6dc>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005c54:	7dfb      	ldrb	r3, [r7, #23]
 8005c56:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	681b      	ldr	r3, [r3, #0]
 8005c5c:	f003 0301 	and.w	r3, r3, #1
 8005c60:	2b00      	cmp	r3, #0
 8005c62:	d07e      	beq.n	8005d62 <HAL_RCCEx_PeriphCLKConfig+0x7e6>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005c68:	2b28      	cmp	r3, #40	; 0x28
 8005c6a:	d867      	bhi.n	8005d3c <HAL_RCCEx_PeriphCLKConfig+0x7c0>
 8005c6c:	a201      	add	r2, pc, #4	; (adr r2, 8005c74 <HAL_RCCEx_PeriphCLKConfig+0x6f8>)
 8005c6e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005c72:	bf00      	nop
 8005c74:	08005d43 	.word	0x08005d43
 8005c78:	08005d3d 	.word	0x08005d3d
 8005c7c:	08005d3d 	.word	0x08005d3d
 8005c80:	08005d3d 	.word	0x08005d3d
 8005c84:	08005d3d 	.word	0x08005d3d
 8005c88:	08005d3d 	.word	0x08005d3d
 8005c8c:	08005d3d 	.word	0x08005d3d
 8005c90:	08005d3d 	.word	0x08005d3d
 8005c94:	08005d19 	.word	0x08005d19
 8005c98:	08005d3d 	.word	0x08005d3d
 8005c9c:	08005d3d 	.word	0x08005d3d
 8005ca0:	08005d3d 	.word	0x08005d3d
 8005ca4:	08005d3d 	.word	0x08005d3d
 8005ca8:	08005d3d 	.word	0x08005d3d
 8005cac:	08005d3d 	.word	0x08005d3d
 8005cb0:	08005d3d 	.word	0x08005d3d
 8005cb4:	08005d2b 	.word	0x08005d2b
 8005cb8:	08005d3d 	.word	0x08005d3d
 8005cbc:	08005d3d 	.word	0x08005d3d
 8005cc0:	08005d3d 	.word	0x08005d3d
 8005cc4:	08005d3d 	.word	0x08005d3d
 8005cc8:	08005d3d 	.word	0x08005d3d
 8005ccc:	08005d3d 	.word	0x08005d3d
 8005cd0:	08005d3d 	.word	0x08005d3d
 8005cd4:	08005d43 	.word	0x08005d43
 8005cd8:	08005d3d 	.word	0x08005d3d
 8005cdc:	08005d3d 	.word	0x08005d3d
 8005ce0:	08005d3d 	.word	0x08005d3d
 8005ce4:	08005d3d 	.word	0x08005d3d
 8005ce8:	08005d3d 	.word	0x08005d3d
 8005cec:	08005d3d 	.word	0x08005d3d
 8005cf0:	08005d3d 	.word	0x08005d3d
 8005cf4:	08005d43 	.word	0x08005d43
 8005cf8:	08005d3d 	.word	0x08005d3d
 8005cfc:	08005d3d 	.word	0x08005d3d
 8005d00:	08005d3d 	.word	0x08005d3d
 8005d04:	08005d3d 	.word	0x08005d3d
 8005d08:	08005d3d 	.word	0x08005d3d
 8005d0c:	08005d3d 	.word	0x08005d3d
 8005d10:	08005d3d 	.word	0x08005d3d
 8005d14:	08005d43 	.word	0x08005d43
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	3304      	adds	r3, #4
 8005d1c:	2101      	movs	r1, #1
 8005d1e:	4618      	mov	r0, r3
 8005d20:	f001 fb5a 	bl	80073d8 <RCCEx_PLL2_Config>
 8005d24:	4603      	mov	r3, r0
 8005d26:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8005d28:	e00c      	b.n	8005d44 <HAL_RCCEx_PeriphCLKConfig+0x7c8>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	3324      	adds	r3, #36	; 0x24
 8005d2e:	2101      	movs	r1, #1
 8005d30:	4618      	mov	r0, r3
 8005d32:	f001 fc03 	bl	800753c <RCCEx_PLL3_Config>
 8005d36:	4603      	mov	r3, r0
 8005d38:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8005d3a:	e003      	b.n	8005d44 <HAL_RCCEx_PeriphCLKConfig+0x7c8>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005d3c:	2301      	movs	r3, #1
 8005d3e:	75fb      	strb	r3, [r7, #23]
      break;
 8005d40:	e000      	b.n	8005d44 <HAL_RCCEx_PeriphCLKConfig+0x7c8>
      break;
 8005d42:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005d44:	7dfb      	ldrb	r3, [r7, #23]
 8005d46:	2b00      	cmp	r3, #0
 8005d48:	d109      	bne.n	8005d5e <HAL_RCCEx_PeriphCLKConfig+0x7e2>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8005d4a:	4b45      	ldr	r3, [pc, #276]	; (8005e60 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8005d4c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005d4e:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005d56:	4942      	ldr	r1, [pc, #264]	; (8005e60 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8005d58:	4313      	orrs	r3, r2
 8005d5a:	654b      	str	r3, [r1, #84]	; 0x54
 8005d5c:	e001      	b.n	8005d62 <HAL_RCCEx_PeriphCLKConfig+0x7e6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005d5e:	7dfb      	ldrb	r3, [r7, #23]
 8005d60:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	681b      	ldr	r3, [r3, #0]
 8005d66:	f003 0302 	and.w	r3, r3, #2
 8005d6a:	2b00      	cmp	r3, #0
 8005d6c:	d037      	beq.n	8005dde <HAL_RCCEx_PeriphCLKConfig+0x862>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005d72:	2b05      	cmp	r3, #5
 8005d74:	d820      	bhi.n	8005db8 <HAL_RCCEx_PeriphCLKConfig+0x83c>
 8005d76:	a201      	add	r2, pc, #4	; (adr r2, 8005d7c <HAL_RCCEx_PeriphCLKConfig+0x800>)
 8005d78:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005d7c:	08005dbf 	.word	0x08005dbf
 8005d80:	08005d95 	.word	0x08005d95
 8005d84:	08005da7 	.word	0x08005da7
 8005d88:	08005dbf 	.word	0x08005dbf
 8005d8c:	08005dbf 	.word	0x08005dbf
 8005d90:	08005dbf 	.word	0x08005dbf
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	3304      	adds	r3, #4
 8005d98:	2101      	movs	r1, #1
 8005d9a:	4618      	mov	r0, r3
 8005d9c:	f001 fb1c 	bl	80073d8 <RCCEx_PLL2_Config>
 8005da0:	4603      	mov	r3, r0
 8005da2:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8005da4:	e00c      	b.n	8005dc0 <HAL_RCCEx_PeriphCLKConfig+0x844>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	3324      	adds	r3, #36	; 0x24
 8005daa:	2101      	movs	r1, #1
 8005dac:	4618      	mov	r0, r3
 8005dae:	f001 fbc5 	bl	800753c <RCCEx_PLL3_Config>
 8005db2:	4603      	mov	r3, r0
 8005db4:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8005db6:	e003      	b.n	8005dc0 <HAL_RCCEx_PeriphCLKConfig+0x844>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005db8:	2301      	movs	r3, #1
 8005dba:	75fb      	strb	r3, [r7, #23]
      break;
 8005dbc:	e000      	b.n	8005dc0 <HAL_RCCEx_PeriphCLKConfig+0x844>
      break;
 8005dbe:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005dc0:	7dfb      	ldrb	r3, [r7, #23]
 8005dc2:	2b00      	cmp	r3, #0
 8005dc4:	d109      	bne.n	8005dda <HAL_RCCEx_PeriphCLKConfig+0x85e>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8005dc6:	4b26      	ldr	r3, [pc, #152]	; (8005e60 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8005dc8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005dca:	f023 0207 	bic.w	r2, r3, #7
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005dd2:	4923      	ldr	r1, [pc, #140]	; (8005e60 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8005dd4:	4313      	orrs	r3, r2
 8005dd6:	654b      	str	r3, [r1, #84]	; 0x54
 8005dd8:	e001      	b.n	8005dde <HAL_RCCEx_PeriphCLKConfig+0x862>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005dda:	7dfb      	ldrb	r3, [r7, #23]
 8005ddc:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	681b      	ldr	r3, [r3, #0]
 8005de2:	f003 0304 	and.w	r3, r3, #4
 8005de6:	2b00      	cmp	r3, #0
 8005de8:	d040      	beq.n	8005e6c <HAL_RCCEx_PeriphCLKConfig+0x8f0>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005df0:	2b05      	cmp	r3, #5
 8005df2:	d821      	bhi.n	8005e38 <HAL_RCCEx_PeriphCLKConfig+0x8bc>
 8005df4:	a201      	add	r2, pc, #4	; (adr r2, 8005dfc <HAL_RCCEx_PeriphCLKConfig+0x880>)
 8005df6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005dfa:	bf00      	nop
 8005dfc:	08005e3f 	.word	0x08005e3f
 8005e00:	08005e15 	.word	0x08005e15
 8005e04:	08005e27 	.word	0x08005e27
 8005e08:	08005e3f 	.word	0x08005e3f
 8005e0c:	08005e3f 	.word	0x08005e3f
 8005e10:	08005e3f 	.word	0x08005e3f
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	3304      	adds	r3, #4
 8005e18:	2101      	movs	r1, #1
 8005e1a:	4618      	mov	r0, r3
 8005e1c:	f001 fadc 	bl	80073d8 <RCCEx_PLL2_Config>
 8005e20:	4603      	mov	r3, r0
 8005e22:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8005e24:	e00c      	b.n	8005e40 <HAL_RCCEx_PeriphCLKConfig+0x8c4>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	3324      	adds	r3, #36	; 0x24
 8005e2a:	2101      	movs	r1, #1
 8005e2c:	4618      	mov	r0, r3
 8005e2e:	f001 fb85 	bl	800753c <RCCEx_PLL3_Config>
 8005e32:	4603      	mov	r3, r0
 8005e34:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8005e36:	e003      	b.n	8005e40 <HAL_RCCEx_PeriphCLKConfig+0x8c4>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005e38:	2301      	movs	r3, #1
 8005e3a:	75fb      	strb	r3, [r7, #23]
      break;
 8005e3c:	e000      	b.n	8005e40 <HAL_RCCEx_PeriphCLKConfig+0x8c4>
      break;
 8005e3e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005e40:	7dfb      	ldrb	r3, [r7, #23]
 8005e42:	2b00      	cmp	r3, #0
 8005e44:	d110      	bne.n	8005e68 <HAL_RCCEx_PeriphCLKConfig+0x8ec>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8005e46:	4b06      	ldr	r3, [pc, #24]	; (8005e60 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8005e48:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005e4a:	f023 0207 	bic.w	r2, r3, #7
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005e54:	4902      	ldr	r1, [pc, #8]	; (8005e60 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8005e56:	4313      	orrs	r3, r2
 8005e58:	658b      	str	r3, [r1, #88]	; 0x58
 8005e5a:	e007      	b.n	8005e6c <HAL_RCCEx_PeriphCLKConfig+0x8f0>
 8005e5c:	58024800 	.word	0x58024800
 8005e60:	58024400 	.word	0x58024400
 8005e64:	00ffffcf 	.word	0x00ffffcf
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005e68:	7dfb      	ldrb	r3, [r7, #23]
 8005e6a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	681b      	ldr	r3, [r3, #0]
 8005e70:	f003 0320 	and.w	r3, r3, #32
 8005e74:	2b00      	cmp	r3, #0
 8005e76:	d04b      	beq.n	8005f10 <HAL_RCCEx_PeriphCLKConfig+0x994>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005e7e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005e82:	d02e      	beq.n	8005ee2 <HAL_RCCEx_PeriphCLKConfig+0x966>
 8005e84:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005e88:	d828      	bhi.n	8005edc <HAL_RCCEx_PeriphCLKConfig+0x960>
 8005e8a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005e8e:	d02a      	beq.n	8005ee6 <HAL_RCCEx_PeriphCLKConfig+0x96a>
 8005e90:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005e94:	d822      	bhi.n	8005edc <HAL_RCCEx_PeriphCLKConfig+0x960>
 8005e96:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8005e9a:	d026      	beq.n	8005eea <HAL_RCCEx_PeriphCLKConfig+0x96e>
 8005e9c:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8005ea0:	d81c      	bhi.n	8005edc <HAL_RCCEx_PeriphCLKConfig+0x960>
 8005ea2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005ea6:	d010      	beq.n	8005eca <HAL_RCCEx_PeriphCLKConfig+0x94e>
 8005ea8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005eac:	d816      	bhi.n	8005edc <HAL_RCCEx_PeriphCLKConfig+0x960>
 8005eae:	2b00      	cmp	r3, #0
 8005eb0:	d01d      	beq.n	8005eee <HAL_RCCEx_PeriphCLKConfig+0x972>
 8005eb2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005eb6:	d111      	bne.n	8005edc <HAL_RCCEx_PeriphCLKConfig+0x960>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	3304      	adds	r3, #4
 8005ebc:	2100      	movs	r1, #0
 8005ebe:	4618      	mov	r0, r3
 8005ec0:	f001 fa8a 	bl	80073d8 <RCCEx_PLL2_Config>
 8005ec4:	4603      	mov	r3, r0
 8005ec6:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8005ec8:	e012      	b.n	8005ef0 <HAL_RCCEx_PeriphCLKConfig+0x974>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	3324      	adds	r3, #36	; 0x24
 8005ece:	2102      	movs	r1, #2
 8005ed0:	4618      	mov	r0, r3
 8005ed2:	f001 fb33 	bl	800753c <RCCEx_PLL3_Config>
 8005ed6:	4603      	mov	r3, r0
 8005ed8:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8005eda:	e009      	b.n	8005ef0 <HAL_RCCEx_PeriphCLKConfig+0x974>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005edc:	2301      	movs	r3, #1
 8005ede:	75fb      	strb	r3, [r7, #23]
      break;
 8005ee0:	e006      	b.n	8005ef0 <HAL_RCCEx_PeriphCLKConfig+0x974>
      break;
 8005ee2:	bf00      	nop
 8005ee4:	e004      	b.n	8005ef0 <HAL_RCCEx_PeriphCLKConfig+0x974>
      break;
 8005ee6:	bf00      	nop
 8005ee8:	e002      	b.n	8005ef0 <HAL_RCCEx_PeriphCLKConfig+0x974>
      break;
 8005eea:	bf00      	nop
 8005eec:	e000      	b.n	8005ef0 <HAL_RCCEx_PeriphCLKConfig+0x974>
      break;
 8005eee:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005ef0:	7dfb      	ldrb	r3, [r7, #23]
 8005ef2:	2b00      	cmp	r3, #0
 8005ef4:	d10a      	bne.n	8005f0c <HAL_RCCEx_PeriphCLKConfig+0x990>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8005ef6:	4bb2      	ldr	r3, [pc, #712]	; (80061c0 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8005ef8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005efa:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005f04:	49ae      	ldr	r1, [pc, #696]	; (80061c0 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8005f06:	4313      	orrs	r3, r2
 8005f08:	654b      	str	r3, [r1, #84]	; 0x54
 8005f0a:	e001      	b.n	8005f10 <HAL_RCCEx_PeriphCLKConfig+0x994>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005f0c:	7dfb      	ldrb	r3, [r7, #23]
 8005f0e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	681b      	ldr	r3, [r3, #0]
 8005f14:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005f18:	2b00      	cmp	r3, #0
 8005f1a:	d04b      	beq.n	8005fb4 <HAL_RCCEx_PeriphCLKConfig+0xa38>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005f22:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8005f26:	d02e      	beq.n	8005f86 <HAL_RCCEx_PeriphCLKConfig+0xa0a>
 8005f28:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8005f2c:	d828      	bhi.n	8005f80 <HAL_RCCEx_PeriphCLKConfig+0xa04>
 8005f2e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005f32:	d02a      	beq.n	8005f8a <HAL_RCCEx_PeriphCLKConfig+0xa0e>
 8005f34:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005f38:	d822      	bhi.n	8005f80 <HAL_RCCEx_PeriphCLKConfig+0xa04>
 8005f3a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005f3e:	d026      	beq.n	8005f8e <HAL_RCCEx_PeriphCLKConfig+0xa12>
 8005f40:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005f44:	d81c      	bhi.n	8005f80 <HAL_RCCEx_PeriphCLKConfig+0xa04>
 8005f46:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005f4a:	d010      	beq.n	8005f6e <HAL_RCCEx_PeriphCLKConfig+0x9f2>
 8005f4c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005f50:	d816      	bhi.n	8005f80 <HAL_RCCEx_PeriphCLKConfig+0xa04>
 8005f52:	2b00      	cmp	r3, #0
 8005f54:	d01d      	beq.n	8005f92 <HAL_RCCEx_PeriphCLKConfig+0xa16>
 8005f56:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005f5a:	d111      	bne.n	8005f80 <HAL_RCCEx_PeriphCLKConfig+0xa04>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	3304      	adds	r3, #4
 8005f60:	2100      	movs	r1, #0
 8005f62:	4618      	mov	r0, r3
 8005f64:	f001 fa38 	bl	80073d8 <RCCEx_PLL2_Config>
 8005f68:	4603      	mov	r3, r0
 8005f6a:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8005f6c:	e012      	b.n	8005f94 <HAL_RCCEx_PeriphCLKConfig+0xa18>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	3324      	adds	r3, #36	; 0x24
 8005f72:	2102      	movs	r1, #2
 8005f74:	4618      	mov	r0, r3
 8005f76:	f001 fae1 	bl	800753c <RCCEx_PLL3_Config>
 8005f7a:	4603      	mov	r3, r0
 8005f7c:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8005f7e:	e009      	b.n	8005f94 <HAL_RCCEx_PeriphCLKConfig+0xa18>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005f80:	2301      	movs	r3, #1
 8005f82:	75fb      	strb	r3, [r7, #23]
      break;
 8005f84:	e006      	b.n	8005f94 <HAL_RCCEx_PeriphCLKConfig+0xa18>
      break;
 8005f86:	bf00      	nop
 8005f88:	e004      	b.n	8005f94 <HAL_RCCEx_PeriphCLKConfig+0xa18>
      break;
 8005f8a:	bf00      	nop
 8005f8c:	e002      	b.n	8005f94 <HAL_RCCEx_PeriphCLKConfig+0xa18>
      break;
 8005f8e:	bf00      	nop
 8005f90:	e000      	b.n	8005f94 <HAL_RCCEx_PeriphCLKConfig+0xa18>
      break;
 8005f92:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005f94:	7dfb      	ldrb	r3, [r7, #23]
 8005f96:	2b00      	cmp	r3, #0
 8005f98:	d10a      	bne.n	8005fb0 <HAL_RCCEx_PeriphCLKConfig+0xa34>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8005f9a:	4b89      	ldr	r3, [pc, #548]	; (80061c0 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8005f9c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005f9e:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005fa8:	4985      	ldr	r1, [pc, #532]	; (80061c0 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8005faa:	4313      	orrs	r3, r2
 8005fac:	658b      	str	r3, [r1, #88]	; 0x58
 8005fae:	e001      	b.n	8005fb4 <HAL_RCCEx_PeriphCLKConfig+0xa38>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005fb0:	7dfb      	ldrb	r3, [r7, #23]
 8005fb2:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	681b      	ldr	r3, [r3, #0]
 8005fb8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005fbc:	2b00      	cmp	r3, #0
 8005fbe:	d04b      	beq.n	8006058 <HAL_RCCEx_PeriphCLKConfig+0xadc>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005fc6:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8005fca:	d02e      	beq.n	800602a <HAL_RCCEx_PeriphCLKConfig+0xaae>
 8005fcc:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8005fd0:	d828      	bhi.n	8006024 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
 8005fd2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005fd6:	d02a      	beq.n	800602e <HAL_RCCEx_PeriphCLKConfig+0xab2>
 8005fd8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005fdc:	d822      	bhi.n	8006024 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
 8005fde:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8005fe2:	d026      	beq.n	8006032 <HAL_RCCEx_PeriphCLKConfig+0xab6>
 8005fe4:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8005fe8:	d81c      	bhi.n	8006024 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
 8005fea:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005fee:	d010      	beq.n	8006012 <HAL_RCCEx_PeriphCLKConfig+0xa96>
 8005ff0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005ff4:	d816      	bhi.n	8006024 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
 8005ff6:	2b00      	cmp	r3, #0
 8005ff8:	d01d      	beq.n	8006036 <HAL_RCCEx_PeriphCLKConfig+0xaba>
 8005ffa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005ffe:	d111      	bne.n	8006024 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	3304      	adds	r3, #4
 8006004:	2100      	movs	r1, #0
 8006006:	4618      	mov	r0, r3
 8006008:	f001 f9e6 	bl	80073d8 <RCCEx_PLL2_Config>
 800600c:	4603      	mov	r3, r0
 800600e:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8006010:	e012      	b.n	8006038 <HAL_RCCEx_PeriphCLKConfig+0xabc>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	3324      	adds	r3, #36	; 0x24
 8006016:	2102      	movs	r1, #2
 8006018:	4618      	mov	r0, r3
 800601a:	f001 fa8f 	bl	800753c <RCCEx_PLL3_Config>
 800601e:	4603      	mov	r3, r0
 8006020:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8006022:	e009      	b.n	8006038 <HAL_RCCEx_PeriphCLKConfig+0xabc>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006024:	2301      	movs	r3, #1
 8006026:	75fb      	strb	r3, [r7, #23]
      break;
 8006028:	e006      	b.n	8006038 <HAL_RCCEx_PeriphCLKConfig+0xabc>
      break;
 800602a:	bf00      	nop
 800602c:	e004      	b.n	8006038 <HAL_RCCEx_PeriphCLKConfig+0xabc>
      break;
 800602e:	bf00      	nop
 8006030:	e002      	b.n	8006038 <HAL_RCCEx_PeriphCLKConfig+0xabc>
      break;
 8006032:	bf00      	nop
 8006034:	e000      	b.n	8006038 <HAL_RCCEx_PeriphCLKConfig+0xabc>
      break;
 8006036:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006038:	7dfb      	ldrb	r3, [r7, #23]
 800603a:	2b00      	cmp	r3, #0
 800603c:	d10a      	bne.n	8006054 <HAL_RCCEx_PeriphCLKConfig+0xad8>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 800603e:	4b60      	ldr	r3, [pc, #384]	; (80061c0 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8006040:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006042:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800604c:	495c      	ldr	r1, [pc, #368]	; (80061c0 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 800604e:	4313      	orrs	r3, r2
 8006050:	658b      	str	r3, [r1, #88]	; 0x58
 8006052:	e001      	b.n	8006058 <HAL_RCCEx_PeriphCLKConfig+0xadc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006054:	7dfb      	ldrb	r3, [r7, #23]
 8006056:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ I2C1/2/3/5* Configuration ------------------------*/
#if defined(I2C5)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1235) == RCC_PERIPHCLK_I2C1235)
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	681b      	ldr	r3, [r3, #0]
 800605c:	f003 0308 	and.w	r3, r3, #8
 8006060:	2b00      	cmp	r3, #0
 8006062:	d018      	beq.n	8006096 <HAL_RCCEx_PeriphCLKConfig+0xb1a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1235CLKSOURCE(PeriphClkInit->I2c1235ClockSelection));

    if ((PeriphClkInit->I2c1235ClockSelection )== RCC_I2C1235CLKSOURCE_PLL3 )
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006068:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800606c:	d10a      	bne.n	8006084 <HAL_RCCEx_PeriphCLKConfig+0xb08>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	3324      	adds	r3, #36	; 0x24
 8006072:	2102      	movs	r1, #2
 8006074:	4618      	mov	r0, r3
 8006076:	f001 fa61 	bl	800753c <RCCEx_PLL3_Config>
 800607a:	4603      	mov	r3, r0
 800607c:	2b00      	cmp	r3, #0
 800607e:	d001      	beq.n	8006084 <HAL_RCCEx_PeriphCLKConfig+0xb08>
        {
          status = HAL_ERROR;
 8006080:	2301      	movs	r3, #1
 8006082:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);
 8006084:	4b4e      	ldr	r3, [pc, #312]	; (80061c0 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8006086:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006088:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006090:	494b      	ldr	r1, [pc, #300]	; (80061c0 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8006092:	4313      	orrs	r3, r2
 8006094:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	681b      	ldr	r3, [r3, #0]
 800609a:	f003 0310 	and.w	r3, r3, #16
 800609e:	2b00      	cmp	r3, #0
 80060a0:	d01a      	beq.n	80060d8 <HAL_RCCEx_PeriphCLKConfig+0xb5c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80060a8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80060ac:	d10a      	bne.n	80060c4 <HAL_RCCEx_PeriphCLKConfig+0xb48>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	3324      	adds	r3, #36	; 0x24
 80060b2:	2102      	movs	r1, #2
 80060b4:	4618      	mov	r0, r3
 80060b6:	f001 fa41 	bl	800753c <RCCEx_PLL3_Config>
 80060ba:	4603      	mov	r3, r0
 80060bc:	2b00      	cmp	r3, #0
 80060be:	d001      	beq.n	80060c4 <HAL_RCCEx_PeriphCLKConfig+0xb48>
      {
        status = HAL_ERROR;
 80060c0:	2301      	movs	r3, #1
 80060c2:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80060c4:	4b3e      	ldr	r3, [pc, #248]	; (80061c0 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 80060c6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80060c8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80060d2:	493b      	ldr	r1, [pc, #236]	; (80061c0 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 80060d4:	4313      	orrs	r3, r2
 80060d6:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	681b      	ldr	r3, [r3, #0]
 80060dc:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80060e0:	2b00      	cmp	r3, #0
 80060e2:	d034      	beq.n	800614e <HAL_RCCEx_PeriphCLKConfig+0xbd2>
  {
    switch(PeriphClkInit->AdcClockSelection)
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80060ea:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80060ee:	d01d      	beq.n	800612c <HAL_RCCEx_PeriphCLKConfig+0xbb0>
 80060f0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80060f4:	d817      	bhi.n	8006126 <HAL_RCCEx_PeriphCLKConfig+0xbaa>
 80060f6:	2b00      	cmp	r3, #0
 80060f8:	d003      	beq.n	8006102 <HAL_RCCEx_PeriphCLKConfig+0xb86>
 80060fa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80060fe:	d009      	beq.n	8006114 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 8006100:	e011      	b.n	8006126 <HAL_RCCEx_PeriphCLKConfig+0xbaa>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	3304      	adds	r3, #4
 8006106:	2100      	movs	r1, #0
 8006108:	4618      	mov	r0, r3
 800610a:	f001 f965 	bl	80073d8 <RCCEx_PLL2_Config>
 800610e:	4603      	mov	r3, r0
 8006110:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8006112:	e00c      	b.n	800612e <HAL_RCCEx_PeriphCLKConfig+0xbb2>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	3324      	adds	r3, #36	; 0x24
 8006118:	2102      	movs	r1, #2
 800611a:	4618      	mov	r0, r3
 800611c:	f001 fa0e 	bl	800753c <RCCEx_PLL3_Config>
 8006120:	4603      	mov	r3, r0
 8006122:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8006124:	e003      	b.n	800612e <HAL_RCCEx_PeriphCLKConfig+0xbb2>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006126:	2301      	movs	r3, #1
 8006128:	75fb      	strb	r3, [r7, #23]
      break;
 800612a:	e000      	b.n	800612e <HAL_RCCEx_PeriphCLKConfig+0xbb2>
      break;
 800612c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800612e:	7dfb      	ldrb	r3, [r7, #23]
 8006130:	2b00      	cmp	r3, #0
 8006132:	d10a      	bne.n	800614a <HAL_RCCEx_PeriphCLKConfig+0xbce>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8006134:	4b22      	ldr	r3, [pc, #136]	; (80061c0 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8006136:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006138:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8006142:	491f      	ldr	r1, [pc, #124]	; (80061c0 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8006144:	4313      	orrs	r3, r2
 8006146:	658b      	str	r3, [r1, #88]	; 0x58
 8006148:	e001      	b.n	800614e <HAL_RCCEx_PeriphCLKConfig+0xbd2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800614a:	7dfb      	ldrb	r3, [r7, #23]
 800614c:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	681b      	ldr	r3, [r3, #0]
 8006152:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006156:	2b00      	cmp	r3, #0
 8006158:	d036      	beq.n	80061c8 <HAL_RCCEx_PeriphCLKConfig+0xc4c>
  {

    switch(PeriphClkInit->UsbClockSelection)
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006160:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8006164:	d01c      	beq.n	80061a0 <HAL_RCCEx_PeriphCLKConfig+0xc24>
 8006166:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800616a:	d816      	bhi.n	800619a <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 800616c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006170:	d003      	beq.n	800617a <HAL_RCCEx_PeriphCLKConfig+0xbfe>
 8006172:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006176:	d007      	beq.n	8006188 <HAL_RCCEx_PeriphCLKConfig+0xc0c>
 8006178:	e00f      	b.n	800619a <HAL_RCCEx_PeriphCLKConfig+0xc1e>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800617a:	4b11      	ldr	r3, [pc, #68]	; (80061c0 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 800617c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800617e:	4a10      	ldr	r2, [pc, #64]	; (80061c0 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8006180:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006184:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 8006186:	e00c      	b.n	80061a2 <HAL_RCCEx_PeriphCLKConfig+0xc26>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	3324      	adds	r3, #36	; 0x24
 800618c:	2101      	movs	r1, #1
 800618e:	4618      	mov	r0, r3
 8006190:	f001 f9d4 	bl	800753c <RCCEx_PLL3_Config>
 8006194:	4603      	mov	r3, r0
 8006196:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 8006198:	e003      	b.n	80061a2 <HAL_RCCEx_PeriphCLKConfig+0xc26>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800619a:	2301      	movs	r3, #1
 800619c:	75fb      	strb	r3, [r7, #23]
      break;
 800619e:	e000      	b.n	80061a2 <HAL_RCCEx_PeriphCLKConfig+0xc26>
      break;
 80061a0:	bf00      	nop
    }

    if(ret == HAL_OK)
 80061a2:	7dfb      	ldrb	r3, [r7, #23]
 80061a4:	2b00      	cmp	r3, #0
 80061a6:	d10d      	bne.n	80061c4 <HAL_RCCEx_PeriphCLKConfig+0xc48>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80061a8:	4b05      	ldr	r3, [pc, #20]	; (80061c0 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 80061aa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80061ac:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80061b6:	4902      	ldr	r1, [pc, #8]	; (80061c0 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 80061b8:	4313      	orrs	r3, r2
 80061ba:	654b      	str	r3, [r1, #84]	; 0x54
 80061bc:	e004      	b.n	80061c8 <HAL_RCCEx_PeriphCLKConfig+0xc4c>
 80061be:	bf00      	nop
 80061c0:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80061c4:	7dfb      	ldrb	r3, [r7, #23]
 80061c6:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	681b      	ldr	r3, [r3, #0]
 80061cc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80061d0:	2b00      	cmp	r3, #0
 80061d2:	d029      	beq.n	8006228 <HAL_RCCEx_PeriphCLKConfig+0xcac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80061d8:	2b00      	cmp	r3, #0
 80061da:	d003      	beq.n	80061e4 <HAL_RCCEx_PeriphCLKConfig+0xc68>
 80061dc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80061e0:	d007      	beq.n	80061f2 <HAL_RCCEx_PeriphCLKConfig+0xc76>
 80061e2:	e00f      	b.n	8006204 <HAL_RCCEx_PeriphCLKConfig+0xc88>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80061e4:	4b61      	ldr	r3, [pc, #388]	; (800636c <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 80061e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80061e8:	4a60      	ldr	r2, [pc, #384]	; (800636c <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 80061ea:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80061ee:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 80061f0:	e00b      	b.n	800620a <HAL_RCCEx_PeriphCLKConfig+0xc8e>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	3304      	adds	r3, #4
 80061f6:	2102      	movs	r1, #2
 80061f8:	4618      	mov	r0, r3
 80061fa:	f001 f8ed 	bl	80073d8 <RCCEx_PLL2_Config>
 80061fe:	4603      	mov	r3, r0
 8006200:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8006202:	e002      	b.n	800620a <HAL_RCCEx_PeriphCLKConfig+0xc8e>

    default:
      ret = HAL_ERROR;
 8006204:	2301      	movs	r3, #1
 8006206:	75fb      	strb	r3, [r7, #23]
      break;
 8006208:	bf00      	nop
    }

    if(ret == HAL_OK)
 800620a:	7dfb      	ldrb	r3, [r7, #23]
 800620c:	2b00      	cmp	r3, #0
 800620e:	d109      	bne.n	8006224 <HAL_RCCEx_PeriphCLKConfig+0xca8>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8006210:	4b56      	ldr	r3, [pc, #344]	; (800636c <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8006212:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006214:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800621c:	4953      	ldr	r1, [pc, #332]	; (800636c <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800621e:	4313      	orrs	r3, r2
 8006220:	64cb      	str	r3, [r1, #76]	; 0x4c
 8006222:	e001      	b.n	8006228 <HAL_RCCEx_PeriphCLKConfig+0xcac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006224:	7dfb      	ldrb	r3, [r7, #23]
 8006226:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	681b      	ldr	r3, [r3, #0]
 800622c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006230:	2b00      	cmp	r3, #0
 8006232:	d00a      	beq.n	800624a <HAL_RCCEx_PeriphCLKConfig+0xcce>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	3324      	adds	r3, #36	; 0x24
 8006238:	2102      	movs	r1, #2
 800623a:	4618      	mov	r0, r3
 800623c:	f001 f97e 	bl	800753c <RCCEx_PLL3_Config>
 8006240:	4603      	mov	r3, r0
 8006242:	2b00      	cmp	r3, #0
 8006244:	d001      	beq.n	800624a <HAL_RCCEx_PeriphCLKConfig+0xcce>
    {
      status=HAL_ERROR;
 8006246:	2301      	movs	r3, #1
 8006248:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	681b      	ldr	r3, [r3, #0]
 800624e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006252:	2b00      	cmp	r3, #0
 8006254:	d030      	beq.n	80062b8 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
  {

    switch(PeriphClkInit->RngClockSelection)
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800625a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800625e:	d017      	beq.n	8006290 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 8006260:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006264:	d811      	bhi.n	800628a <HAL_RCCEx_PeriphCLKConfig+0xd0e>
 8006266:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800626a:	d013      	beq.n	8006294 <HAL_RCCEx_PeriphCLKConfig+0xd18>
 800626c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006270:	d80b      	bhi.n	800628a <HAL_RCCEx_PeriphCLKConfig+0xd0e>
 8006272:	2b00      	cmp	r3, #0
 8006274:	d010      	beq.n	8006298 <HAL_RCCEx_PeriphCLKConfig+0xd1c>
 8006276:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800627a:	d106      	bne.n	800628a <HAL_RCCEx_PeriphCLKConfig+0xd0e>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800627c:	4b3b      	ldr	r3, [pc, #236]	; (800636c <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800627e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006280:	4a3a      	ldr	r2, [pc, #232]	; (800636c <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8006282:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006286:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 8006288:	e007      	b.n	800629a <HAL_RCCEx_PeriphCLKConfig+0xd1e>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800628a:	2301      	movs	r3, #1
 800628c:	75fb      	strb	r3, [r7, #23]
      break;
 800628e:	e004      	b.n	800629a <HAL_RCCEx_PeriphCLKConfig+0xd1e>
      break;
 8006290:	bf00      	nop
 8006292:	e002      	b.n	800629a <HAL_RCCEx_PeriphCLKConfig+0xd1e>
      break;
 8006294:	bf00      	nop
 8006296:	e000      	b.n	800629a <HAL_RCCEx_PeriphCLKConfig+0xd1e>
      break;
 8006298:	bf00      	nop
    }

    if(ret == HAL_OK)
 800629a:	7dfb      	ldrb	r3, [r7, #23]
 800629c:	2b00      	cmp	r3, #0
 800629e:	d109      	bne.n	80062b4 <HAL_RCCEx_PeriphCLKConfig+0xd38>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80062a0:	4b32      	ldr	r3, [pc, #200]	; (800636c <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 80062a2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80062a4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80062ac:	492f      	ldr	r1, [pc, #188]	; (800636c <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 80062ae:	4313      	orrs	r3, r2
 80062b0:	654b      	str	r3, [r1, #84]	; 0x54
 80062b2:	e001      	b.n	80062b8 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80062b4:	7dfb      	ldrb	r3, [r7, #23]
 80062b6:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	681b      	ldr	r3, [r3, #0]
 80062bc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80062c0:	2b00      	cmp	r3, #0
 80062c2:	d008      	beq.n	80062d6 <HAL_RCCEx_PeriphCLKConfig+0xd5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80062c4:	4b29      	ldr	r3, [pc, #164]	; (800636c <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 80062c6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80062c8:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80062d0:	4926      	ldr	r1, [pc, #152]	; (800636c <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 80062d2:	4313      	orrs	r3, r2
 80062d4:	650b      	str	r3, [r1, #80]	; 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	681b      	ldr	r3, [r3, #0]
 80062da:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80062de:	2b00      	cmp	r3, #0
 80062e0:	d008      	beq.n	80062f4 <HAL_RCCEx_PeriphCLKConfig+0xd78>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80062e2:	4b22      	ldr	r3, [pc, #136]	; (800636c <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 80062e4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80062e6:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80062ee:	491f      	ldr	r1, [pc, #124]	; (800636c <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 80062f0:	4313      	orrs	r3, r2
 80062f2:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	681b      	ldr	r3, [r3, #0]
 80062f8:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80062fc:	2b00      	cmp	r3, #0
 80062fe:	d00d      	beq.n	800631c <HAL_RCCEx_PeriphCLKConfig+0xda0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8006300:	4b1a      	ldr	r3, [pc, #104]	; (800636c <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8006302:	691b      	ldr	r3, [r3, #16]
 8006304:	4a19      	ldr	r2, [pc, #100]	; (800636c <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8006306:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800630a:	6113      	str	r3, [r2, #16]
 800630c:	4b17      	ldr	r3, [pc, #92]	; (800636c <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800630e:	691a      	ldr	r2, [r3, #16]
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8006316:	4915      	ldr	r1, [pc, #84]	; (800636c <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8006318:	4313      	orrs	r3, r2
 800631a:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	681b      	ldr	r3, [r3, #0]
 8006320:	2b00      	cmp	r3, #0
 8006322:	da08      	bge.n	8006336 <HAL_RCCEx_PeriphCLKConfig+0xdba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8006324:	4b11      	ldr	r3, [pc, #68]	; (800636c <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8006326:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006328:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006330:	490e      	ldr	r1, [pc, #56]	; (800636c <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8006332:	4313      	orrs	r3, r2
 8006334:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	681b      	ldr	r3, [r3, #0]
 800633a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800633e:	2b00      	cmp	r3, #0
 8006340:	d009      	beq.n	8006356 <HAL_RCCEx_PeriphCLKConfig+0xdda>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8006342:	4b0a      	ldr	r3, [pc, #40]	; (800636c <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8006344:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006346:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006350:	4906      	ldr	r1, [pc, #24]	; (800636c <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8006352:	4313      	orrs	r3, r2
 8006354:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 8006356:	7dbb      	ldrb	r3, [r7, #22]
 8006358:	2b00      	cmp	r3, #0
 800635a:	d101      	bne.n	8006360 <HAL_RCCEx_PeriphCLKConfig+0xde4>
  {
    return HAL_OK;
 800635c:	2300      	movs	r3, #0
 800635e:	e000      	b.n	8006362 <HAL_RCCEx_PeriphCLKConfig+0xde6>
  }
  return HAL_ERROR;
 8006360:	2301      	movs	r3, #1
}
 8006362:	4618      	mov	r0, r3
 8006364:	3718      	adds	r7, #24
 8006366:	46bd      	mov	sp, r7
 8006368:	bd80      	pop	{r7, pc}
 800636a:	bf00      	nop
 800636c:	58024400 	.word	0x58024400

08006370 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8006370:	b580      	push	{r7, lr}
 8006372:	b090      	sub	sp, #64	; 0x40
 8006374:	af00      	add	r7, sp, #0
 8006376:	6078      	str	r0, [r7, #4]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800637e:	f040 8089 	bne.w	8006494 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
    {

      saiclocksource= __HAL_RCC_GET_SAI1_SOURCE();
 8006382:	4b95      	ldr	r3, [pc, #596]	; (80065d8 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 8006384:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006386:	f003 0307 	and.w	r3, r3, #7
 800638a:	633b      	str	r3, [r7, #48]	; 0x30
 800638c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800638e:	2b04      	cmp	r3, #4
 8006390:	d87d      	bhi.n	800648e <HAL_RCCEx_GetPeriphCLKFreq+0x11e>
 8006392:	a201      	add	r2, pc, #4	; (adr r2, 8006398 <HAL_RCCEx_GetPeriphCLKFreq+0x28>)
 8006394:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006398:	080063ad 	.word	0x080063ad
 800639c:	080063d1 	.word	0x080063d1
 80063a0:	080063f5 	.word	0x080063f5
 80063a4:	08006489 	.word	0x08006489
 80063a8:	08006419 	.word	0x08006419

      switch (saiclocksource)
      {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80063ac:	4b8a      	ldr	r3, [pc, #552]	; (80065d8 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 80063ae:	681b      	ldr	r3, [r3, #0]
 80063b0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80063b4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80063b8:	d107      	bne.n	80063ca <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
         {
           HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80063ba:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80063be:	4618      	mov	r0, r3
 80063c0:	f000 feb8 	bl	8007134 <HAL_RCCEx_GetPLL1ClockFreq>
           frequency = pll1_clocks.PLL1_Q_Frequency;
 80063c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80063c6:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 80063c8:	e3ed      	b.n	8006ba6 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 80063ca:	2300      	movs	r3, #0
 80063cc:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80063ce:	e3ea      	b.n	8006ba6 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80063d0:	4b81      	ldr	r3, [pc, #516]	; (80065d8 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 80063d2:	681b      	ldr	r3, [r3, #0]
 80063d4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80063d8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80063dc:	d107      	bne.n	80063ee <HAL_RCCEx_GetPeriphCLKFreq+0x7e>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80063de:	f107 0318 	add.w	r3, r7, #24
 80063e2:	4618      	mov	r0, r3
 80063e4:	f000 fbfe 	bl	8006be4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80063e8:	69bb      	ldr	r3, [r7, #24]
 80063ea:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 80063ec:	e3db      	b.n	8006ba6 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 80063ee:	2300      	movs	r3, #0
 80063f0:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80063f2:	e3d8      	b.n	8006ba6 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80063f4:	4b78      	ldr	r3, [pc, #480]	; (80065d8 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 80063f6:	681b      	ldr	r3, [r3, #0]
 80063f8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80063fc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006400:	d107      	bne.n	8006412 <HAL_RCCEx_GetPeriphCLKFreq+0xa2>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006402:	f107 030c 	add.w	r3, r7, #12
 8006406:	4618      	mov	r0, r3
 8006408:	f000 fd40 	bl	8006e8c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800640c:	68fb      	ldr	r3, [r7, #12]
 800640e:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8006410:	e3c9      	b.n	8006ba6 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 8006412:	2300      	movs	r3, #0
 8006414:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006416:	e3c6      	b.n	8006ba6 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8006418:	4b6f      	ldr	r3, [pc, #444]	; (80065d8 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 800641a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800641c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8006420:	637b      	str	r3, [r7, #52]	; 0x34

          if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8006422:	4b6d      	ldr	r3, [pc, #436]	; (80065d8 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 8006424:	681b      	ldr	r3, [r3, #0]
 8006426:	f003 0304 	and.w	r3, r3, #4
 800642a:	2b04      	cmp	r3, #4
 800642c:	d10c      	bne.n	8006448 <HAL_RCCEx_GetPeriphCLKFreq+0xd8>
 800642e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006430:	2b00      	cmp	r3, #0
 8006432:	d109      	bne.n	8006448 <HAL_RCCEx_GetPeriphCLKFreq+0xd8>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8006434:	4b68      	ldr	r3, [pc, #416]	; (80065d8 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 8006436:	681b      	ldr	r3, [r3, #0]
 8006438:	08db      	lsrs	r3, r3, #3
 800643a:	f003 0303 	and.w	r3, r3, #3
 800643e:	4a67      	ldr	r2, [pc, #412]	; (80065dc <HAL_RCCEx_GetPeriphCLKFreq+0x26c>)
 8006440:	fa22 f303 	lsr.w	r3, r2, r3
 8006444:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006446:	e01e      	b.n	8006486 <HAL_RCCEx_GetPeriphCLKFreq+0x116>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8006448:	4b63      	ldr	r3, [pc, #396]	; (80065d8 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 800644a:	681b      	ldr	r3, [r3, #0]
 800644c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006450:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006454:	d106      	bne.n	8006464 <HAL_RCCEx_GetPeriphCLKFreq+0xf4>
 8006456:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006458:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800645c:	d102      	bne.n	8006464 <HAL_RCCEx_GetPeriphCLKFreq+0xf4>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 800645e:	4b60      	ldr	r3, [pc, #384]	; (80065e0 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8006460:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006462:	e010      	b.n	8006486 <HAL_RCCEx_GetPeriphCLKFreq+0x116>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8006464:	4b5c      	ldr	r3, [pc, #368]	; (80065d8 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 8006466:	681b      	ldr	r3, [r3, #0]
 8006468:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800646c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006470:	d106      	bne.n	8006480 <HAL_RCCEx_GetPeriphCLKFreq+0x110>
 8006472:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006474:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006478:	d102      	bne.n	8006480 <HAL_RCCEx_GetPeriphCLKFreq+0x110>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 800647a:	4b5a      	ldr	r3, [pc, #360]	; (80065e4 <HAL_RCCEx_GetPeriphCLKFreq+0x274>)
 800647c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800647e:	e002      	b.n	8006486 <HAL_RCCEx_GetPeriphCLKFreq+0x116>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 8006480:	2300      	movs	r3, #0
 8006482:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 8006484:	e38f      	b.n	8006ba6 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
 8006486:	e38e      	b.n	8006ba6 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8006488:	4b57      	ldr	r3, [pc, #348]	; (80065e8 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800648a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800648c:	e38b      	b.n	8006ba6 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      default :
        {
          frequency = 0;
 800648e:	2300      	movs	r3, #0
 8006490:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006492:	e388      	b.n	8006ba6 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
      }
    }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800649a:	f040 80a7 	bne.w	80065ec <HAL_RCCEx_GetPeriphCLKFreq+0x27c>
    {

      saiclocksource= __HAL_RCC_GET_SAI4A_SOURCE();
 800649e:	4b4e      	ldr	r3, [pc, #312]	; (80065d8 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 80064a0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80064a2:	f403 0360 	and.w	r3, r3, #14680064	; 0xe00000
 80064a6:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 80064a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80064aa:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80064ae:	d054      	beq.n	800655a <HAL_RCCEx_GetPeriphCLKFreq+0x1ea>
 80064b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80064b2:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80064b6:	f200 808b 	bhi.w	80065d0 <HAL_RCCEx_GetPeriphCLKFreq+0x260>
 80064ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80064bc:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80064c0:	f000 8083 	beq.w	80065ca <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
 80064c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80064c6:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80064ca:	f200 8081 	bhi.w	80065d0 <HAL_RCCEx_GetPeriphCLKFreq+0x260>
 80064ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80064d0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80064d4:	d02f      	beq.n	8006536 <HAL_RCCEx_GetPeriphCLKFreq+0x1c6>
 80064d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80064d8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80064dc:	d878      	bhi.n	80065d0 <HAL_RCCEx_GetPeriphCLKFreq+0x260>
 80064de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80064e0:	2b00      	cmp	r3, #0
 80064e2:	d004      	beq.n	80064ee <HAL_RCCEx_GetPeriphCLKFreq+0x17e>
 80064e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80064e6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80064ea:	d012      	beq.n	8006512 <HAL_RCCEx_GetPeriphCLKFreq+0x1a2>
 80064ec:	e070      	b.n	80065d0 <HAL_RCCEx_GetPeriphCLKFreq+0x260>
      {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80064ee:	4b3a      	ldr	r3, [pc, #232]	; (80065d8 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 80064f0:	681b      	ldr	r3, [r3, #0]
 80064f2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80064f6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80064fa:	d107      	bne.n	800650c <HAL_RCCEx_GetPeriphCLKFreq+0x19c>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80064fc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006500:	4618      	mov	r0, r3
 8006502:	f000 fe17 	bl	8007134 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8006506:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006508:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800650a:	e34c      	b.n	8006ba6 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 800650c:	2300      	movs	r3, #0
 800650e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006510:	e349      	b.n	8006ba6 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8006512:	4b31      	ldr	r3, [pc, #196]	; (80065d8 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 8006514:	681b      	ldr	r3, [r3, #0]
 8006516:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800651a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800651e:	d107      	bne.n	8006530 <HAL_RCCEx_GetPeriphCLKFreq+0x1c0>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006520:	f107 0318 	add.w	r3, r7, #24
 8006524:	4618      	mov	r0, r3
 8006526:	f000 fb5d 	bl	8006be4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800652a:	69bb      	ldr	r3, [r7, #24]
 800652c:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800652e:	e33a      	b.n	8006ba6 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 8006530:	2300      	movs	r3, #0
 8006532:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006534:	e337      	b.n	8006ba6 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8006536:	4b28      	ldr	r3, [pc, #160]	; (80065d8 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 8006538:	681b      	ldr	r3, [r3, #0]
 800653a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800653e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006542:	d107      	bne.n	8006554 <HAL_RCCEx_GetPeriphCLKFreq+0x1e4>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006544:	f107 030c 	add.w	r3, r7, #12
 8006548:	4618      	mov	r0, r3
 800654a:	f000 fc9f 	bl	8006e8c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800654e:	68fb      	ldr	r3, [r7, #12]
 8006550:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8006552:	e328      	b.n	8006ba6 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 8006554:	2300      	movs	r3, #0
 8006556:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006558:	e325      	b.n	8006ba6 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 800655a:	4b1f      	ldr	r3, [pc, #124]	; (80065d8 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 800655c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800655e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8006562:	637b      	str	r3, [r7, #52]	; 0x34

          if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8006564:	4b1c      	ldr	r3, [pc, #112]	; (80065d8 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 8006566:	681b      	ldr	r3, [r3, #0]
 8006568:	f003 0304 	and.w	r3, r3, #4
 800656c:	2b04      	cmp	r3, #4
 800656e:	d10c      	bne.n	800658a <HAL_RCCEx_GetPeriphCLKFreq+0x21a>
 8006570:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006572:	2b00      	cmp	r3, #0
 8006574:	d109      	bne.n	800658a <HAL_RCCEx_GetPeriphCLKFreq+0x21a>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8006576:	4b18      	ldr	r3, [pc, #96]	; (80065d8 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 8006578:	681b      	ldr	r3, [r3, #0]
 800657a:	08db      	lsrs	r3, r3, #3
 800657c:	f003 0303 	and.w	r3, r3, #3
 8006580:	4a16      	ldr	r2, [pc, #88]	; (80065dc <HAL_RCCEx_GetPeriphCLKFreq+0x26c>)
 8006582:	fa22 f303 	lsr.w	r3, r2, r3
 8006586:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006588:	e01e      	b.n	80065c8 <HAL_RCCEx_GetPeriphCLKFreq+0x258>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800658a:	4b13      	ldr	r3, [pc, #76]	; (80065d8 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 800658c:	681b      	ldr	r3, [r3, #0]
 800658e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006592:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006596:	d106      	bne.n	80065a6 <HAL_RCCEx_GetPeriphCLKFreq+0x236>
 8006598:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800659a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800659e:	d102      	bne.n	80065a6 <HAL_RCCEx_GetPeriphCLKFreq+0x236>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 80065a0:	4b0f      	ldr	r3, [pc, #60]	; (80065e0 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 80065a2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80065a4:	e010      	b.n	80065c8 <HAL_RCCEx_GetPeriphCLKFreq+0x258>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80065a6:	4b0c      	ldr	r3, [pc, #48]	; (80065d8 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 80065a8:	681b      	ldr	r3, [r3, #0]
 80065aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80065ae:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80065b2:	d106      	bne.n	80065c2 <HAL_RCCEx_GetPeriphCLKFreq+0x252>
 80065b4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80065b6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80065ba:	d102      	bne.n	80065c2 <HAL_RCCEx_GetPeriphCLKFreq+0x252>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 80065bc:	4b09      	ldr	r3, [pc, #36]	; (80065e4 <HAL_RCCEx_GetPeriphCLKFreq+0x274>)
 80065be:	63fb      	str	r3, [r7, #60]	; 0x3c
 80065c0:	e002      	b.n	80065c8 <HAL_RCCEx_GetPeriphCLKFreq+0x258>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 80065c2:	2300      	movs	r3, #0
 80065c4:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 80065c6:	e2ee      	b.n	8006ba6 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
 80065c8:	e2ed      	b.n	8006ba6 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 80065ca:	4b07      	ldr	r3, [pc, #28]	; (80065e8 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 80065cc:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80065ce:	e2ea      	b.n	8006ba6 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      default :
        {
          frequency = 0;
 80065d0:	2300      	movs	r3, #0
 80065d2:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80065d4:	e2e7      	b.n	8006ba6 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
 80065d6:	bf00      	nop
 80065d8:	58024400 	.word	0x58024400
 80065dc:	03d09000 	.word	0x03d09000
 80065e0:	003d0900 	.word	0x003d0900
 80065e4:	007a1200 	.word	0x007a1200
 80065e8:	00bb8000 	.word	0x00bb8000
        }
      }
    }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80065f2:	f040 809c 	bne.w	800672e <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
    {

      saiclocksource= __HAL_RCC_GET_SAI4B_SOURCE();
 80065f6:	4b9e      	ldr	r3, [pc, #632]	; (8006870 <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 80065f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80065fa:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 80065fe:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 8006600:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006602:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8006606:	d054      	beq.n	80066b2 <HAL_RCCEx_GetPeriphCLKFreq+0x342>
 8006608:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800660a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800660e:	f200 808b 	bhi.w	8006728 <HAL_RCCEx_GetPeriphCLKFreq+0x3b8>
 8006612:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006614:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8006618:	f000 8083 	beq.w	8006722 <HAL_RCCEx_GetPeriphCLKFreq+0x3b2>
 800661c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800661e:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8006622:	f200 8081 	bhi.w	8006728 <HAL_RCCEx_GetPeriphCLKFreq+0x3b8>
 8006626:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006628:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800662c:	d02f      	beq.n	800668e <HAL_RCCEx_GetPeriphCLKFreq+0x31e>
 800662e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006630:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006634:	d878      	bhi.n	8006728 <HAL_RCCEx_GetPeriphCLKFreq+0x3b8>
 8006636:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006638:	2b00      	cmp	r3, #0
 800663a:	d004      	beq.n	8006646 <HAL_RCCEx_GetPeriphCLKFreq+0x2d6>
 800663c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800663e:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8006642:	d012      	beq.n	800666a <HAL_RCCEx_GetPeriphCLKFreq+0x2fa>
 8006644:	e070      	b.n	8006728 <HAL_RCCEx_GetPeriphCLKFreq+0x3b8>
      {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8006646:	4b8a      	ldr	r3, [pc, #552]	; (8006870 <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 8006648:	681b      	ldr	r3, [r3, #0]
 800664a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800664e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006652:	d107      	bne.n	8006664 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8006654:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006658:	4618      	mov	r0, r3
 800665a:	f000 fd6b 	bl	8007134 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800665e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006660:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8006662:	e2a0      	b.n	8006ba6 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 8006664:	2300      	movs	r3, #0
 8006666:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006668:	e29d      	b.n	8006ba6 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800666a:	4b81      	ldr	r3, [pc, #516]	; (8006870 <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 800666c:	681b      	ldr	r3, [r3, #0]
 800666e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006672:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006676:	d107      	bne.n	8006688 <HAL_RCCEx_GetPeriphCLKFreq+0x318>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006678:	f107 0318 	add.w	r3, r7, #24
 800667c:	4618      	mov	r0, r3
 800667e:	f000 fab1 	bl	8006be4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8006682:	69bb      	ldr	r3, [r7, #24]
 8006684:	63fb      	str	r3, [r7, #60]	; 0x3c
          }
         else
         {
           frequency = 0;
         }
          break;
 8006686:	e28e      	b.n	8006ba6 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 8006688:	2300      	movs	r3, #0
 800668a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800668c:	e28b      	b.n	8006ba6 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800668e:	4b78      	ldr	r3, [pc, #480]	; (8006870 <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 8006690:	681b      	ldr	r3, [r3, #0]
 8006692:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006696:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800669a:	d107      	bne.n	80066ac <HAL_RCCEx_GetPeriphCLKFreq+0x33c>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800669c:	f107 030c 	add.w	r3, r7, #12
 80066a0:	4618      	mov	r0, r3
 80066a2:	f000 fbf3 	bl	8006e8c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 80066a6:	68fb      	ldr	r3, [r7, #12]
 80066a8:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 80066aa:	e27c      	b.n	8006ba6 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 80066ac:	2300      	movs	r3, #0
 80066ae:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80066b0:	e279      	b.n	8006ba6 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 80066b2:	4b6f      	ldr	r3, [pc, #444]	; (8006870 <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 80066b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80066b6:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80066ba:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80066bc:	4b6c      	ldr	r3, [pc, #432]	; (8006870 <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 80066be:	681b      	ldr	r3, [r3, #0]
 80066c0:	f003 0304 	and.w	r3, r3, #4
 80066c4:	2b04      	cmp	r3, #4
 80066c6:	d10c      	bne.n	80066e2 <HAL_RCCEx_GetPeriphCLKFreq+0x372>
 80066c8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80066ca:	2b00      	cmp	r3, #0
 80066cc:	d109      	bne.n	80066e2 <HAL_RCCEx_GetPeriphCLKFreq+0x372>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80066ce:	4b68      	ldr	r3, [pc, #416]	; (8006870 <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 80066d0:	681b      	ldr	r3, [r3, #0]
 80066d2:	08db      	lsrs	r3, r3, #3
 80066d4:	f003 0303 	and.w	r3, r3, #3
 80066d8:	4a66      	ldr	r2, [pc, #408]	; (8006874 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 80066da:	fa22 f303 	lsr.w	r3, r2, r3
 80066de:	63fb      	str	r3, [r7, #60]	; 0x3c
 80066e0:	e01e      	b.n	8006720 <HAL_RCCEx_GetPeriphCLKFreq+0x3b0>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80066e2:	4b63      	ldr	r3, [pc, #396]	; (8006870 <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 80066e4:	681b      	ldr	r3, [r3, #0]
 80066e6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80066ea:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80066ee:	d106      	bne.n	80066fe <HAL_RCCEx_GetPeriphCLKFreq+0x38e>
 80066f0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80066f2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80066f6:	d102      	bne.n	80066fe <HAL_RCCEx_GetPeriphCLKFreq+0x38e>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 80066f8:	4b5f      	ldr	r3, [pc, #380]	; (8006878 <HAL_RCCEx_GetPeriphCLKFreq+0x508>)
 80066fa:	63fb      	str	r3, [r7, #60]	; 0x3c
 80066fc:	e010      	b.n	8006720 <HAL_RCCEx_GetPeriphCLKFreq+0x3b0>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80066fe:	4b5c      	ldr	r3, [pc, #368]	; (8006870 <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 8006700:	681b      	ldr	r3, [r3, #0]
 8006702:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006706:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800670a:	d106      	bne.n	800671a <HAL_RCCEx_GetPeriphCLKFreq+0x3aa>
 800670c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800670e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006712:	d102      	bne.n	800671a <HAL_RCCEx_GetPeriphCLKFreq+0x3aa>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 8006714:	4b59      	ldr	r3, [pc, #356]	; (800687c <HAL_RCCEx_GetPeriphCLKFreq+0x50c>)
 8006716:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006718:	e002      	b.n	8006720 <HAL_RCCEx_GetPeriphCLKFreq+0x3b0>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 800671a:	2300      	movs	r3, #0
 800671c:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 800671e:	e242      	b.n	8006ba6 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
 8006720:	e241      	b.n	8006ba6 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8006722:	4b57      	ldr	r3, [pc, #348]	; (8006880 <HAL_RCCEx_GetPeriphCLKFreq+0x510>)
 8006724:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006726:	e23e      	b.n	8006ba6 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      default :
        {
          frequency = 0;
 8006728:	2300      	movs	r3, #0
 800672a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800672c:	e23b      	b.n	8006ba6 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      }
    }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006734:	f040 80a6 	bne.w	8006884 <HAL_RCCEx_GetPeriphCLKFreq+0x514>
    {
      /* Get SPI1/2/3 clock source */
      srcclk= __HAL_RCC_GET_SPI123_SOURCE();
 8006738:	4b4d      	ldr	r3, [pc, #308]	; (8006870 <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 800673a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800673c:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 8006740:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8006742:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006744:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006748:	d054      	beq.n	80067f4 <HAL_RCCEx_GetPeriphCLKFreq+0x484>
 800674a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800674c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006750:	f200 808b 	bhi.w	800686a <HAL_RCCEx_GetPeriphCLKFreq+0x4fa>
 8006754:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006756:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800675a:	f000 8083 	beq.w	8006864 <HAL_RCCEx_GetPeriphCLKFreq+0x4f4>
 800675e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006760:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8006764:	f200 8081 	bhi.w	800686a <HAL_RCCEx_GetPeriphCLKFreq+0x4fa>
 8006768:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800676a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800676e:	d02f      	beq.n	80067d0 <HAL_RCCEx_GetPeriphCLKFreq+0x460>
 8006770:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006772:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006776:	d878      	bhi.n	800686a <HAL_RCCEx_GetPeriphCLKFreq+0x4fa>
 8006778:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800677a:	2b00      	cmp	r3, #0
 800677c:	d004      	beq.n	8006788 <HAL_RCCEx_GetPeriphCLKFreq+0x418>
 800677e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006780:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006784:	d012      	beq.n	80067ac <HAL_RCCEx_GetPeriphCLKFreq+0x43c>
 8006786:	e070      	b.n	800686a <HAL_RCCEx_GetPeriphCLKFreq+0x4fa>
      {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8006788:	4b39      	ldr	r3, [pc, #228]	; (8006870 <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 800678a:	681b      	ldr	r3, [r3, #0]
 800678c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006790:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006794:	d107      	bne.n	80067a6 <HAL_RCCEx_GetPeriphCLKFreq+0x436>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8006796:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800679a:	4618      	mov	r0, r3
 800679c:	f000 fcca 	bl	8007134 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80067a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80067a2:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 80067a4:	e1ff      	b.n	8006ba6 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 80067a6:	2300      	movs	r3, #0
 80067a8:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80067aa:	e1fc      	b.n	8006ba6 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80067ac:	4b30      	ldr	r3, [pc, #192]	; (8006870 <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 80067ae:	681b      	ldr	r3, [r3, #0]
 80067b0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80067b4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80067b8:	d107      	bne.n	80067ca <HAL_RCCEx_GetPeriphCLKFreq+0x45a>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80067ba:	f107 0318 	add.w	r3, r7, #24
 80067be:	4618      	mov	r0, r3
 80067c0:	f000 fa10 	bl	8006be4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80067c4:	69bb      	ldr	r3, [r7, #24]
 80067c6:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 80067c8:	e1ed      	b.n	8006ba6 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 80067ca:	2300      	movs	r3, #0
 80067cc:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80067ce:	e1ea      	b.n	8006ba6 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80067d0:	4b27      	ldr	r3, [pc, #156]	; (8006870 <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 80067d2:	681b      	ldr	r3, [r3, #0]
 80067d4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80067d8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80067dc:	d107      	bne.n	80067ee <HAL_RCCEx_GetPeriphCLKFreq+0x47e>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80067de:	f107 030c 	add.w	r3, r7, #12
 80067e2:	4618      	mov	r0, r3
 80067e4:	f000 fb52 	bl	8006e8c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 80067e8:	68fb      	ldr	r3, [r7, #12]
 80067ea:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 80067ec:	e1db      	b.n	8006ba6 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 80067ee:	2300      	movs	r3, #0
 80067f0:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80067f2:	e1d8      	b.n	8006ba6 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 80067f4:	4b1e      	ldr	r3, [pc, #120]	; (8006870 <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 80067f6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80067f8:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80067fc:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80067fe:	4b1c      	ldr	r3, [pc, #112]	; (8006870 <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 8006800:	681b      	ldr	r3, [r3, #0]
 8006802:	f003 0304 	and.w	r3, r3, #4
 8006806:	2b04      	cmp	r3, #4
 8006808:	d10c      	bne.n	8006824 <HAL_RCCEx_GetPeriphCLKFreq+0x4b4>
 800680a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800680c:	2b00      	cmp	r3, #0
 800680e:	d109      	bne.n	8006824 <HAL_RCCEx_GetPeriphCLKFreq+0x4b4>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8006810:	4b17      	ldr	r3, [pc, #92]	; (8006870 <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 8006812:	681b      	ldr	r3, [r3, #0]
 8006814:	08db      	lsrs	r3, r3, #3
 8006816:	f003 0303 	and.w	r3, r3, #3
 800681a:	4a16      	ldr	r2, [pc, #88]	; (8006874 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 800681c:	fa22 f303 	lsr.w	r3, r2, r3
 8006820:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006822:	e01e      	b.n	8006862 <HAL_RCCEx_GetPeriphCLKFreq+0x4f2>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8006824:	4b12      	ldr	r3, [pc, #72]	; (8006870 <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 8006826:	681b      	ldr	r3, [r3, #0]
 8006828:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800682c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006830:	d106      	bne.n	8006840 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
 8006832:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006834:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006838:	d102      	bne.n	8006840 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 800683a:	4b0f      	ldr	r3, [pc, #60]	; (8006878 <HAL_RCCEx_GetPeriphCLKFreq+0x508>)
 800683c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800683e:	e010      	b.n	8006862 <HAL_RCCEx_GetPeriphCLKFreq+0x4f2>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8006840:	4b0b      	ldr	r3, [pc, #44]	; (8006870 <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 8006842:	681b      	ldr	r3, [r3, #0]
 8006844:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006848:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800684c:	d106      	bne.n	800685c <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>
 800684e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006850:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006854:	d102      	bne.n	800685c <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 8006856:	4b09      	ldr	r3, [pc, #36]	; (800687c <HAL_RCCEx_GetPeriphCLKFreq+0x50c>)
 8006858:	63fb      	str	r3, [r7, #60]	; 0x3c
 800685a:	e002      	b.n	8006862 <HAL_RCCEx_GetPeriphCLKFreq+0x4f2>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 800685c:	2300      	movs	r3, #0
 800685e:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 8006860:	e1a1      	b.n	8006ba6 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
 8006862:	e1a0      	b.n	8006ba6 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8006864:	4b06      	ldr	r3, [pc, #24]	; (8006880 <HAL_RCCEx_GetPeriphCLKFreq+0x510>)
 8006866:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006868:	e19d      	b.n	8006ba6 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      default :
        {
          frequency = 0;
 800686a:	2300      	movs	r3, #0
 800686c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800686e:	e19a      	b.n	8006ba6 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
 8006870:	58024400 	.word	0x58024400
 8006874:	03d09000 	.word	0x03d09000
 8006878:	003d0900 	.word	0x003d0900
 800687c:	007a1200 	.word	0x007a1200
 8006880:	00bb8000 	.word	0x00bb8000
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800688a:	d173      	bne.n	8006974 <HAL_RCCEx_GetPeriphCLKFreq+0x604>
    {
      /* Get ADC clock source */
      srcclk= __HAL_RCC_GET_ADC_SOURCE();
 800688c:	4b9a      	ldr	r3, [pc, #616]	; (8006af8 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 800688e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006890:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8006894:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8006896:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006898:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800689c:	d02f      	beq.n	80068fe <HAL_RCCEx_GetPeriphCLKFreq+0x58e>
 800689e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80068a0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80068a4:	d863      	bhi.n	800696e <HAL_RCCEx_GetPeriphCLKFreq+0x5fe>
 80068a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80068a8:	2b00      	cmp	r3, #0
 80068aa:	d004      	beq.n	80068b6 <HAL_RCCEx_GetPeriphCLKFreq+0x546>
 80068ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80068ae:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80068b2:	d012      	beq.n	80068da <HAL_RCCEx_GetPeriphCLKFreq+0x56a>
 80068b4:	e05b      	b.n	800696e <HAL_RCCEx_GetPeriphCLKFreq+0x5fe>
      {
      case RCC_ADCCLKSOURCE_PLL2:
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80068b6:	4b90      	ldr	r3, [pc, #576]	; (8006af8 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 80068b8:	681b      	ldr	r3, [r3, #0]
 80068ba:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80068be:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80068c2:	d107      	bne.n	80068d4 <HAL_RCCEx_GetPeriphCLKFreq+0x564>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80068c4:	f107 0318 	add.w	r3, r7, #24
 80068c8:	4618      	mov	r0, r3
 80068ca:	f000 f98b 	bl	8006be4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80068ce:	69bb      	ldr	r3, [r7, #24]
 80068d0:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 80068d2:	e168      	b.n	8006ba6 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 80068d4:	2300      	movs	r3, #0
 80068d6:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80068d8:	e165      	b.n	8006ba6 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      case RCC_ADCCLKSOURCE_PLL3:
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80068da:	4b87      	ldr	r3, [pc, #540]	; (8006af8 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 80068dc:	681b      	ldr	r3, [r3, #0]
 80068de:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80068e2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80068e6:	d107      	bne.n	80068f8 <HAL_RCCEx_GetPeriphCLKFreq+0x588>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80068e8:	f107 030c 	add.w	r3, r7, #12
 80068ec:	4618      	mov	r0, r3
 80068ee:	f000 facd 	bl	8006e8c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 80068f2:	697b      	ldr	r3, [r7, #20]
 80068f4:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 80068f6:	e156      	b.n	8006ba6 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 80068f8:	2300      	movs	r3, #0
 80068fa:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80068fc:	e153      	b.n	8006ba6 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      case RCC_ADCCLKSOURCE_CLKP:
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 80068fe:	4b7e      	ldr	r3, [pc, #504]	; (8006af8 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 8006900:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006902:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8006906:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8006908:	4b7b      	ldr	r3, [pc, #492]	; (8006af8 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 800690a:	681b      	ldr	r3, [r3, #0]
 800690c:	f003 0304 	and.w	r3, r3, #4
 8006910:	2b04      	cmp	r3, #4
 8006912:	d10c      	bne.n	800692e <HAL_RCCEx_GetPeriphCLKFreq+0x5be>
 8006914:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006916:	2b00      	cmp	r3, #0
 8006918:	d109      	bne.n	800692e <HAL_RCCEx_GetPeriphCLKFreq+0x5be>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800691a:	4b77      	ldr	r3, [pc, #476]	; (8006af8 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 800691c:	681b      	ldr	r3, [r3, #0]
 800691e:	08db      	lsrs	r3, r3, #3
 8006920:	f003 0303 	and.w	r3, r3, #3
 8006924:	4a75      	ldr	r2, [pc, #468]	; (8006afc <HAL_RCCEx_GetPeriphCLKFreq+0x78c>)
 8006926:	fa22 f303 	lsr.w	r3, r2, r3
 800692a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800692c:	e01e      	b.n	800696c <HAL_RCCEx_GetPeriphCLKFreq+0x5fc>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800692e:	4b72      	ldr	r3, [pc, #456]	; (8006af8 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 8006930:	681b      	ldr	r3, [r3, #0]
 8006932:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006936:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800693a:	d106      	bne.n	800694a <HAL_RCCEx_GetPeriphCLKFreq+0x5da>
 800693c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800693e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006942:	d102      	bne.n	800694a <HAL_RCCEx_GetPeriphCLKFreq+0x5da>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 8006944:	4b6e      	ldr	r3, [pc, #440]	; (8006b00 <HAL_RCCEx_GetPeriphCLKFreq+0x790>)
 8006946:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006948:	e010      	b.n	800696c <HAL_RCCEx_GetPeriphCLKFreq+0x5fc>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800694a:	4b6b      	ldr	r3, [pc, #428]	; (8006af8 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 800694c:	681b      	ldr	r3, [r3, #0]
 800694e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006952:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006956:	d106      	bne.n	8006966 <HAL_RCCEx_GetPeriphCLKFreq+0x5f6>
 8006958:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800695a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800695e:	d102      	bne.n	8006966 <HAL_RCCEx_GetPeriphCLKFreq+0x5f6>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 8006960:	4b68      	ldr	r3, [pc, #416]	; (8006b04 <HAL_RCCEx_GetPeriphCLKFreq+0x794>)
 8006962:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006964:	e002      	b.n	800696c <HAL_RCCEx_GetPeriphCLKFreq+0x5fc>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 8006966:	2300      	movs	r3, #0
 8006968:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 800696a:	e11c      	b.n	8006ba6 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
 800696c:	e11b      	b.n	8006ba6 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      default :
        {
          frequency = 0;
 800696e:	2300      	movs	r3, #0
 8006970:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006972:	e118      	b.n	8006ba6 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800697a:	d133      	bne.n	80069e4 <HAL_RCCEx_GetPeriphCLKFreq+0x674>
    {
      /* Get SDMMC clock source */
      srcclk= __HAL_RCC_GET_SDMMC_SOURCE();
 800697c:	4b5e      	ldr	r3, [pc, #376]	; (8006af8 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 800697e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006980:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006984:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8006986:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006988:	2b00      	cmp	r3, #0
 800698a:	d004      	beq.n	8006996 <HAL_RCCEx_GetPeriphCLKFreq+0x626>
 800698c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800698e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006992:	d012      	beq.n	80069ba <HAL_RCCEx_GetPeriphCLKFreq+0x64a>
 8006994:	e023      	b.n	80069de <HAL_RCCEx_GetPeriphCLKFreq+0x66e>
      {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8006996:	4b58      	ldr	r3, [pc, #352]	; (8006af8 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 8006998:	681b      	ldr	r3, [r3, #0]
 800699a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800699e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80069a2:	d107      	bne.n	80069b4 <HAL_RCCEx_GetPeriphCLKFreq+0x644>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80069a4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80069a8:	4618      	mov	r0, r3
 80069aa:	f000 fbc3 	bl	8007134 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80069ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80069b0:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 80069b2:	e0f8      	b.n	8006ba6 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
          frequency = 0;
 80069b4:	2300      	movs	r3, #0
 80069b6:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80069b8:	e0f5      	b.n	8006ba6 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80069ba:	4b4f      	ldr	r3, [pc, #316]	; (8006af8 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 80069bc:	681b      	ldr	r3, [r3, #0]
 80069be:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80069c2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80069c6:	d107      	bne.n	80069d8 <HAL_RCCEx_GetPeriphCLKFreq+0x668>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80069c8:	f107 0318 	add.w	r3, r7, #24
 80069cc:	4618      	mov	r0, r3
 80069ce:	f000 f909 	bl	8006be4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 80069d2:	6a3b      	ldr	r3, [r7, #32]
 80069d4:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 80069d6:	e0e6      	b.n	8006ba6 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
          frequency = 0;
 80069d8:	2300      	movs	r3, #0
 80069da:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80069dc:	e0e3      	b.n	8006ba6 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      default :
        {
          frequency = 0;
 80069de:	2300      	movs	r3, #0
 80069e0:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80069e2:	e0e0      	b.n	8006ba6 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80069ea:	f040 808d 	bne.w	8006b08 <HAL_RCCEx_GetPeriphCLKFreq+0x798>
    {
      /* Get SPI6 clock source */
      srcclk= __HAL_RCC_GET_SPI6_SOURCE();
 80069ee:	4b42      	ldr	r3, [pc, #264]	; (8006af8 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 80069f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80069f2:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
 80069f6:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 80069f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80069fa:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80069fe:	d06b      	beq.n	8006ad8 <HAL_RCCEx_GetPeriphCLKFreq+0x768>
 8006a00:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a02:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006a06:	d874      	bhi.n	8006af2 <HAL_RCCEx_GetPeriphCLKFreq+0x782>
 8006a08:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a0a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006a0e:	d056      	beq.n	8006abe <HAL_RCCEx_GetPeriphCLKFreq+0x74e>
 8006a10:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a12:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006a16:	d86c      	bhi.n	8006af2 <HAL_RCCEx_GetPeriphCLKFreq+0x782>
 8006a18:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a1a:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8006a1e:	d03b      	beq.n	8006a98 <HAL_RCCEx_GetPeriphCLKFreq+0x728>
 8006a20:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a22:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8006a26:	d864      	bhi.n	8006af2 <HAL_RCCEx_GetPeriphCLKFreq+0x782>
 8006a28:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a2a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006a2e:	d021      	beq.n	8006a74 <HAL_RCCEx_GetPeriphCLKFreq+0x704>
 8006a30:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a32:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006a36:	d85c      	bhi.n	8006af2 <HAL_RCCEx_GetPeriphCLKFreq+0x782>
 8006a38:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a3a:	2b00      	cmp	r3, #0
 8006a3c:	d004      	beq.n	8006a48 <HAL_RCCEx_GetPeriphCLKFreq+0x6d8>
 8006a3e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a40:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006a44:	d004      	beq.n	8006a50 <HAL_RCCEx_GetPeriphCLKFreq+0x6e0>
 8006a46:	e054      	b.n	8006af2 <HAL_RCCEx_GetPeriphCLKFreq+0x782>
      {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
        {
          frequency = HAL_RCCEx_GetD3PCLK1Freq();
 8006a48:	f000 f8b6 	bl	8006bb8 <HAL_RCCEx_GetD3PCLK1Freq>
 8006a4c:	63f8      	str	r0, [r7, #60]	; 0x3c
          break;
 8006a4e:	e0aa      	b.n	8006ba6 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8006a50:	4b29      	ldr	r3, [pc, #164]	; (8006af8 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 8006a52:	681b      	ldr	r3, [r3, #0]
 8006a54:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006a58:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006a5c:	d107      	bne.n	8006a6e <HAL_RCCEx_GetPeriphCLKFreq+0x6fe>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006a5e:	f107 0318 	add.w	r3, r7, #24
 8006a62:	4618      	mov	r0, r3
 8006a64:	f000 f8be 	bl	8006be4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8006a68:	69fb      	ldr	r3, [r7, #28]
 8006a6a:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8006a6c:	e09b      	b.n	8006ba6 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
          frequency = 0;
 8006a6e:	2300      	movs	r3, #0
 8006a70:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006a72:	e098      	b.n	8006ba6 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8006a74:	4b20      	ldr	r3, [pc, #128]	; (8006af8 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 8006a76:	681b      	ldr	r3, [r3, #0]
 8006a78:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006a7c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006a80:	d107      	bne.n	8006a92 <HAL_RCCEx_GetPeriphCLKFreq+0x722>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006a82:	f107 030c 	add.w	r3, r7, #12
 8006a86:	4618      	mov	r0, r3
 8006a88:	f000 fa00 	bl	8006e8c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8006a8c:	693b      	ldr	r3, [r7, #16]
 8006a8e:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8006a90:	e089      	b.n	8006ba6 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
          frequency = 0;
 8006a92:	2300      	movs	r3, #0
 8006a94:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006a96:	e086      	b.n	8006ba6 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8006a98:	4b17      	ldr	r3, [pc, #92]	; (8006af8 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 8006a9a:	681b      	ldr	r3, [r3, #0]
 8006a9c:	f003 0304 	and.w	r3, r3, #4
 8006aa0:	2b04      	cmp	r3, #4
 8006aa2:	d109      	bne.n	8006ab8 <HAL_RCCEx_GetPeriphCLKFreq+0x748>
         {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8006aa4:	4b14      	ldr	r3, [pc, #80]	; (8006af8 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 8006aa6:	681b      	ldr	r3, [r3, #0]
 8006aa8:	08db      	lsrs	r3, r3, #3
 8006aaa:	f003 0303 	and.w	r3, r3, #3
 8006aae:	4a13      	ldr	r2, [pc, #76]	; (8006afc <HAL_RCCEx_GetPeriphCLKFreq+0x78c>)
 8006ab0:	fa22 f303 	lsr.w	r3, r2, r3
 8006ab4:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8006ab6:	e076      	b.n	8006ba6 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
          frequency = 0;
 8006ab8:	2300      	movs	r3, #0
 8006aba:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006abc:	e073      	b.n	8006ba6 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 8006abe:	4b0e      	ldr	r3, [pc, #56]	; (8006af8 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 8006ac0:	681b      	ldr	r3, [r3, #0]
 8006ac2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006ac6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006aca:	d102      	bne.n	8006ad2 <HAL_RCCEx_GetPeriphCLKFreq+0x762>
         {
          frequency = CSI_VALUE;
 8006acc:	4b0c      	ldr	r3, [pc, #48]	; (8006b00 <HAL_RCCEx_GetPeriphCLKFreq+0x790>)
 8006ace:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8006ad0:	e069      	b.n	8006ba6 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 8006ad2:	2300      	movs	r3, #0
 8006ad4:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006ad6:	e066      	b.n	8006ba6 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8006ad8:	4b07      	ldr	r3, [pc, #28]	; (8006af8 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 8006ada:	681b      	ldr	r3, [r3, #0]
 8006adc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006ae0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006ae4:	d102      	bne.n	8006aec <HAL_RCCEx_GetPeriphCLKFreq+0x77c>
         {
          frequency = HSE_VALUE;
 8006ae6:	4b07      	ldr	r3, [pc, #28]	; (8006b04 <HAL_RCCEx_GetPeriphCLKFreq+0x794>)
 8006ae8:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8006aea:	e05c      	b.n	8006ba6 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
          frequency = 0;
 8006aec:	2300      	movs	r3, #0
 8006aee:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006af0:	e059      	b.n	8006ba6 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
          break;
        }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
        {
          frequency = 0;
 8006af2:	2300      	movs	r3, #0
 8006af4:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006af6:	e056      	b.n	8006ba6 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
 8006af8:	58024400 	.word	0x58024400
 8006afc:	03d09000 	.word	0x03d09000
 8006b00:	003d0900 	.word	0x003d0900
 8006b04:	007a1200 	.word	0x007a1200
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006b0e:	d148      	bne.n	8006ba2 <HAL_RCCEx_GetPeriphCLKFreq+0x832>
    {
      /* Get FDCAN clock source */
      srcclk= __HAL_RCC_GET_FDCAN_SOURCE();
 8006b10:	4b27      	ldr	r3, [pc, #156]	; (8006bb0 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8006b12:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006b14:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8006b18:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8006b1a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b1c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006b20:	d02a      	beq.n	8006b78 <HAL_RCCEx_GetPeriphCLKFreq+0x808>
 8006b22:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b24:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006b28:	d838      	bhi.n	8006b9c <HAL_RCCEx_GetPeriphCLKFreq+0x82c>
 8006b2a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b2c:	2b00      	cmp	r3, #0
 8006b2e:	d004      	beq.n	8006b3a <HAL_RCCEx_GetPeriphCLKFreq+0x7ca>
 8006b30:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b32:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006b36:	d00d      	beq.n	8006b54 <HAL_RCCEx_GetPeriphCLKFreq+0x7e4>
 8006b38:	e030      	b.n	8006b9c <HAL_RCCEx_GetPeriphCLKFreq+0x82c>
      {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8006b3a:	4b1d      	ldr	r3, [pc, #116]	; (8006bb0 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8006b3c:	681b      	ldr	r3, [r3, #0]
 8006b3e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006b42:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006b46:	d102      	bne.n	8006b4e <HAL_RCCEx_GetPeriphCLKFreq+0x7de>
         {
          frequency = HSE_VALUE;
 8006b48:	4b1a      	ldr	r3, [pc, #104]	; (8006bb4 <HAL_RCCEx_GetPeriphCLKFreq+0x844>)
 8006b4a:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8006b4c:	e02b      	b.n	8006ba6 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
          frequency = 0;
 8006b4e:	2300      	movs	r3, #0
 8006b50:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006b52:	e028      	b.n	8006ba6 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8006b54:	4b16      	ldr	r3, [pc, #88]	; (8006bb0 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8006b56:	681b      	ldr	r3, [r3, #0]
 8006b58:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006b5c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006b60:	d107      	bne.n	8006b72 <HAL_RCCEx_GetPeriphCLKFreq+0x802>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8006b62:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006b66:	4618      	mov	r0, r3
 8006b68:	f000 fae4 	bl	8007134 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8006b6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b6e:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8006b70:	e019      	b.n	8006ba6 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
          frequency = 0;
 8006b72:	2300      	movs	r3, #0
 8006b74:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006b76:	e016      	b.n	8006ba6 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8006b78:	4b0d      	ldr	r3, [pc, #52]	; (8006bb0 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8006b7a:	681b      	ldr	r3, [r3, #0]
 8006b7c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006b80:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006b84:	d107      	bne.n	8006b96 <HAL_RCCEx_GetPeriphCLKFreq+0x826>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006b86:	f107 0318 	add.w	r3, r7, #24
 8006b8a:	4618      	mov	r0, r3
 8006b8c:	f000 f82a 	bl	8006be4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8006b90:	69fb      	ldr	r3, [r7, #28]
 8006b92:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8006b94:	e007      	b.n	8006ba6 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
          frequency = 0;
 8006b96:	2300      	movs	r3, #0
 8006b98:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006b9a:	e004      	b.n	8006ba6 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      default :
        {
          frequency = 0;
 8006b9c:	2300      	movs	r3, #0
 8006b9e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006ba0:	e001      	b.n	8006ba6 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      }
    }
  else
    {
      frequency = 0;
 8006ba2:	2300      	movs	r3, #0
 8006ba4:	63fb      	str	r3, [r7, #60]	; 0x3c
    }

  return frequency;
 8006ba6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8006ba8:	4618      	mov	r0, r3
 8006baa:	3740      	adds	r7, #64	; 0x40
 8006bac:	46bd      	mov	sp, r7
 8006bae:	bd80      	pop	{r7, pc}
 8006bb0:	58024400 	.word	0x58024400
 8006bb4:	007a1200 	.word	0x007a1200

08006bb8 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8006bb8:	b580      	push	{r7, lr}
 8006bba:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8006bbc:	f7fe fc40 	bl	8005440 <HAL_RCC_GetHCLKFreq>
 8006bc0:	4602      	mov	r2, r0
 8006bc2:	4b06      	ldr	r3, [pc, #24]	; (8006bdc <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8006bc4:	6a1b      	ldr	r3, [r3, #32]
 8006bc6:	091b      	lsrs	r3, r3, #4
 8006bc8:	f003 0307 	and.w	r3, r3, #7
 8006bcc:	4904      	ldr	r1, [pc, #16]	; (8006be0 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8006bce:	5ccb      	ldrb	r3, [r1, r3]
 8006bd0:	f003 031f 	and.w	r3, r3, #31
 8006bd4:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8006bd8:	4618      	mov	r0, r3
 8006bda:	bd80      	pop	{r7, pc}
 8006bdc:	58024400 	.word	0x58024400
 8006be0:	080124c0 	.word	0x080124c0

08006be4 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 8006be4:	b480      	push	{r7}
 8006be6:	b089      	sub	sp, #36	; 0x24
 8006be8:	af00      	add	r7, sp, #0
 8006bea:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8006bec:	4ba1      	ldr	r3, [pc, #644]	; (8006e74 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006bee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006bf0:	f003 0303 	and.w	r3, r3, #3
 8006bf4:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 8006bf6:	4b9f      	ldr	r3, [pc, #636]	; (8006e74 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006bf8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006bfa:	0b1b      	lsrs	r3, r3, #12
 8006bfc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006c00:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8006c02:	4b9c      	ldr	r3, [pc, #624]	; (8006e74 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006c04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c06:	091b      	lsrs	r3, r3, #4
 8006c08:	f003 0301 	and.w	r3, r3, #1
 8006c0c:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 8006c0e:	4b99      	ldr	r3, [pc, #612]	; (8006e74 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006c10:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006c12:	08db      	lsrs	r3, r3, #3
 8006c14:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8006c18:	693a      	ldr	r2, [r7, #16]
 8006c1a:	fb02 f303 	mul.w	r3, r2, r3
 8006c1e:	ee07 3a90 	vmov	s15, r3
 8006c22:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006c26:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8006c2a:	697b      	ldr	r3, [r7, #20]
 8006c2c:	2b00      	cmp	r3, #0
 8006c2e:	f000 8111 	beq.w	8006e54 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8006c32:	69bb      	ldr	r3, [r7, #24]
 8006c34:	2b02      	cmp	r3, #2
 8006c36:	f000 8083 	beq.w	8006d40 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8006c3a:	69bb      	ldr	r3, [r7, #24]
 8006c3c:	2b02      	cmp	r3, #2
 8006c3e:	f200 80a1 	bhi.w	8006d84 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8006c42:	69bb      	ldr	r3, [r7, #24]
 8006c44:	2b00      	cmp	r3, #0
 8006c46:	d003      	beq.n	8006c50 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8006c48:	69bb      	ldr	r3, [r7, #24]
 8006c4a:	2b01      	cmp	r3, #1
 8006c4c:	d056      	beq.n	8006cfc <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8006c4e:	e099      	b.n	8006d84 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006c50:	4b88      	ldr	r3, [pc, #544]	; (8006e74 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006c52:	681b      	ldr	r3, [r3, #0]
 8006c54:	f003 0320 	and.w	r3, r3, #32
 8006c58:	2b00      	cmp	r3, #0
 8006c5a:	d02d      	beq.n	8006cb8 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8006c5c:	4b85      	ldr	r3, [pc, #532]	; (8006e74 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006c5e:	681b      	ldr	r3, [r3, #0]
 8006c60:	08db      	lsrs	r3, r3, #3
 8006c62:	f003 0303 	and.w	r3, r3, #3
 8006c66:	4a84      	ldr	r2, [pc, #528]	; (8006e78 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8006c68:	fa22 f303 	lsr.w	r3, r2, r3
 8006c6c:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8006c6e:	68bb      	ldr	r3, [r7, #8]
 8006c70:	ee07 3a90 	vmov	s15, r3
 8006c74:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006c78:	697b      	ldr	r3, [r7, #20]
 8006c7a:	ee07 3a90 	vmov	s15, r3
 8006c7e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006c82:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006c86:	4b7b      	ldr	r3, [pc, #492]	; (8006e74 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006c88:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c8a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006c8e:	ee07 3a90 	vmov	s15, r3
 8006c92:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006c96:	ed97 6a03 	vldr	s12, [r7, #12]
 8006c9a:	eddf 5a78 	vldr	s11, [pc, #480]	; 8006e7c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8006c9e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006ca2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006ca6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006caa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006cae:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006cb2:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8006cb6:	e087      	b.n	8006dc8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8006cb8:	697b      	ldr	r3, [r7, #20]
 8006cba:	ee07 3a90 	vmov	s15, r3
 8006cbe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006cc2:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8006e80 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8006cc6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006cca:	4b6a      	ldr	r3, [pc, #424]	; (8006e74 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006ccc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006cce:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006cd2:	ee07 3a90 	vmov	s15, r3
 8006cd6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006cda:	ed97 6a03 	vldr	s12, [r7, #12]
 8006cde:	eddf 5a67 	vldr	s11, [pc, #412]	; 8006e7c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8006ce2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006ce6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006cea:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006cee:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006cf2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006cf6:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8006cfa:	e065      	b.n	8006dc8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8006cfc:	697b      	ldr	r3, [r7, #20]
 8006cfe:	ee07 3a90 	vmov	s15, r3
 8006d02:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006d06:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8006e84 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8006d0a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006d0e:	4b59      	ldr	r3, [pc, #356]	; (8006e74 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006d10:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006d12:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006d16:	ee07 3a90 	vmov	s15, r3
 8006d1a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006d1e:	ed97 6a03 	vldr	s12, [r7, #12]
 8006d22:	eddf 5a56 	vldr	s11, [pc, #344]	; 8006e7c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8006d26:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006d2a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006d2e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006d32:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006d36:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006d3a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8006d3e:	e043      	b.n	8006dc8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8006d40:	697b      	ldr	r3, [r7, #20]
 8006d42:	ee07 3a90 	vmov	s15, r3
 8006d46:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006d4a:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8006e88 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8006d4e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006d52:	4b48      	ldr	r3, [pc, #288]	; (8006e74 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006d54:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006d56:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006d5a:	ee07 3a90 	vmov	s15, r3
 8006d5e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006d62:	ed97 6a03 	vldr	s12, [r7, #12]
 8006d66:	eddf 5a45 	vldr	s11, [pc, #276]	; 8006e7c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8006d6a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006d6e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006d72:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006d76:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006d7a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006d7e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8006d82:	e021      	b.n	8006dc8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8006d84:	697b      	ldr	r3, [r7, #20]
 8006d86:	ee07 3a90 	vmov	s15, r3
 8006d8a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006d8e:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8006e84 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8006d92:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006d96:	4b37      	ldr	r3, [pc, #220]	; (8006e74 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006d98:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006d9a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006d9e:	ee07 3a90 	vmov	s15, r3
 8006da2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006da6:	ed97 6a03 	vldr	s12, [r7, #12]
 8006daa:	eddf 5a34 	vldr	s11, [pc, #208]	; 8006e7c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8006dae:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006db2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006db6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006dba:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006dbe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006dc2:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8006dc6:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 8006dc8:	4b2a      	ldr	r3, [pc, #168]	; (8006e74 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006dca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006dcc:	0a5b      	lsrs	r3, r3, #9
 8006dce:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006dd2:	ee07 3a90 	vmov	s15, r3
 8006dd6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006dda:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006dde:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006de2:	edd7 6a07 	vldr	s13, [r7, #28]
 8006de6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006dea:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006dee:	ee17 2a90 	vmov	r2, s15
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 8006df6:	4b1f      	ldr	r3, [pc, #124]	; (8006e74 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006df8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006dfa:	0c1b      	lsrs	r3, r3, #16
 8006dfc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006e00:	ee07 3a90 	vmov	s15, r3
 8006e04:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006e08:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006e0c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006e10:	edd7 6a07 	vldr	s13, [r7, #28]
 8006e14:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006e18:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006e1c:	ee17 2a90 	vmov	r2, s15
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 8006e24:	4b13      	ldr	r3, [pc, #76]	; (8006e74 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006e26:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006e28:	0e1b      	lsrs	r3, r3, #24
 8006e2a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006e2e:	ee07 3a90 	vmov	s15, r3
 8006e32:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006e36:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006e3a:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006e3e:	edd7 6a07 	vldr	s13, [r7, #28]
 8006e42:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006e46:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006e4a:	ee17 2a90 	vmov	r2, s15
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8006e52:	e008      	b.n	8006e66 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	2200      	movs	r2, #0
 8006e58:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	2200      	movs	r2, #0
 8006e5e:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	2200      	movs	r2, #0
 8006e64:	609a      	str	r2, [r3, #8]
}
 8006e66:	bf00      	nop
 8006e68:	3724      	adds	r7, #36	; 0x24
 8006e6a:	46bd      	mov	sp, r7
 8006e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e70:	4770      	bx	lr
 8006e72:	bf00      	nop
 8006e74:	58024400 	.word	0x58024400
 8006e78:	03d09000 	.word	0x03d09000
 8006e7c:	46000000 	.word	0x46000000
 8006e80:	4c742400 	.word	0x4c742400
 8006e84:	4a742400 	.word	0x4a742400
 8006e88:	4af42400 	.word	0x4af42400

08006e8c <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 8006e8c:	b480      	push	{r7}
 8006e8e:	b089      	sub	sp, #36	; 0x24
 8006e90:	af00      	add	r7, sp, #0
 8006e92:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8006e94:	4ba1      	ldr	r3, [pc, #644]	; (800711c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006e96:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006e98:	f003 0303 	and.w	r3, r3, #3
 8006e9c:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 8006e9e:	4b9f      	ldr	r3, [pc, #636]	; (800711c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006ea0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006ea2:	0d1b      	lsrs	r3, r3, #20
 8006ea4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006ea8:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8006eaa:	4b9c      	ldr	r3, [pc, #624]	; (800711c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006eac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006eae:	0a1b      	lsrs	r3, r3, #8
 8006eb0:	f003 0301 	and.w	r3, r3, #1
 8006eb4:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 8006eb6:	4b99      	ldr	r3, [pc, #612]	; (800711c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006eb8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006eba:	08db      	lsrs	r3, r3, #3
 8006ebc:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8006ec0:	693a      	ldr	r2, [r7, #16]
 8006ec2:	fb02 f303 	mul.w	r3, r2, r3
 8006ec6:	ee07 3a90 	vmov	s15, r3
 8006eca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006ece:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8006ed2:	697b      	ldr	r3, [r7, #20]
 8006ed4:	2b00      	cmp	r3, #0
 8006ed6:	f000 8111 	beq.w	80070fc <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8006eda:	69bb      	ldr	r3, [r7, #24]
 8006edc:	2b02      	cmp	r3, #2
 8006ede:	f000 8083 	beq.w	8006fe8 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8006ee2:	69bb      	ldr	r3, [r7, #24]
 8006ee4:	2b02      	cmp	r3, #2
 8006ee6:	f200 80a1 	bhi.w	800702c <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8006eea:	69bb      	ldr	r3, [r7, #24]
 8006eec:	2b00      	cmp	r3, #0
 8006eee:	d003      	beq.n	8006ef8 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8006ef0:	69bb      	ldr	r3, [r7, #24]
 8006ef2:	2b01      	cmp	r3, #1
 8006ef4:	d056      	beq.n	8006fa4 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8006ef6:	e099      	b.n	800702c <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006ef8:	4b88      	ldr	r3, [pc, #544]	; (800711c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006efa:	681b      	ldr	r3, [r3, #0]
 8006efc:	f003 0320 	and.w	r3, r3, #32
 8006f00:	2b00      	cmp	r3, #0
 8006f02:	d02d      	beq.n	8006f60 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8006f04:	4b85      	ldr	r3, [pc, #532]	; (800711c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006f06:	681b      	ldr	r3, [r3, #0]
 8006f08:	08db      	lsrs	r3, r3, #3
 8006f0a:	f003 0303 	and.w	r3, r3, #3
 8006f0e:	4a84      	ldr	r2, [pc, #528]	; (8007120 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8006f10:	fa22 f303 	lsr.w	r3, r2, r3
 8006f14:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8006f16:	68bb      	ldr	r3, [r7, #8]
 8006f18:	ee07 3a90 	vmov	s15, r3
 8006f1c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006f20:	697b      	ldr	r3, [r7, #20]
 8006f22:	ee07 3a90 	vmov	s15, r3
 8006f26:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006f2a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006f2e:	4b7b      	ldr	r3, [pc, #492]	; (800711c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006f30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f32:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006f36:	ee07 3a90 	vmov	s15, r3
 8006f3a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006f3e:	ed97 6a03 	vldr	s12, [r7, #12]
 8006f42:	eddf 5a78 	vldr	s11, [pc, #480]	; 8007124 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8006f46:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006f4a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006f4e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006f52:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006f56:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006f5a:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8006f5e:	e087      	b.n	8007070 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8006f60:	697b      	ldr	r3, [r7, #20]
 8006f62:	ee07 3a90 	vmov	s15, r3
 8006f66:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006f6a:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8007128 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8006f6e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006f72:	4b6a      	ldr	r3, [pc, #424]	; (800711c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006f74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f76:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006f7a:	ee07 3a90 	vmov	s15, r3
 8006f7e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006f82:	ed97 6a03 	vldr	s12, [r7, #12]
 8006f86:	eddf 5a67 	vldr	s11, [pc, #412]	; 8007124 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8006f8a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006f8e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006f92:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006f96:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006f9a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006f9e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8006fa2:	e065      	b.n	8007070 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8006fa4:	697b      	ldr	r3, [r7, #20]
 8006fa6:	ee07 3a90 	vmov	s15, r3
 8006faa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006fae:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800712c <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8006fb2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006fb6:	4b59      	ldr	r3, [pc, #356]	; (800711c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006fb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006fba:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006fbe:	ee07 3a90 	vmov	s15, r3
 8006fc2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006fc6:	ed97 6a03 	vldr	s12, [r7, #12]
 8006fca:	eddf 5a56 	vldr	s11, [pc, #344]	; 8007124 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8006fce:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006fd2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006fd6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006fda:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006fde:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006fe2:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8006fe6:	e043      	b.n	8007070 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8006fe8:	697b      	ldr	r3, [r7, #20]
 8006fea:	ee07 3a90 	vmov	s15, r3
 8006fee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006ff2:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8007130 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8006ff6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006ffa:	4b48      	ldr	r3, [pc, #288]	; (800711c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006ffc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ffe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007002:	ee07 3a90 	vmov	s15, r3
 8007006:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800700a:	ed97 6a03 	vldr	s12, [r7, #12]
 800700e:	eddf 5a45 	vldr	s11, [pc, #276]	; 8007124 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8007012:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007016:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800701a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800701e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007022:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007026:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800702a:	e021      	b.n	8007070 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800702c:	697b      	ldr	r3, [r7, #20]
 800702e:	ee07 3a90 	vmov	s15, r3
 8007032:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007036:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800712c <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800703a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800703e:	4b37      	ldr	r3, [pc, #220]	; (800711c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007040:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007042:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007046:	ee07 3a90 	vmov	s15, r3
 800704a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800704e:	ed97 6a03 	vldr	s12, [r7, #12]
 8007052:	eddf 5a34 	vldr	s11, [pc, #208]	; 8007124 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8007056:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800705a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800705e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007062:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007066:	ee67 7a27 	vmul.f32	s15, s14, s15
 800706a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800706e:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 8007070:	4b2a      	ldr	r3, [pc, #168]	; (800711c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007072:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007074:	0a5b      	lsrs	r3, r3, #9
 8007076:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800707a:	ee07 3a90 	vmov	s15, r3
 800707e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007082:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007086:	ee37 7a87 	vadd.f32	s14, s15, s14
 800708a:	edd7 6a07 	vldr	s13, [r7, #28]
 800708e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007092:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007096:	ee17 2a90 	vmov	r2, s15
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 800709e:	4b1f      	ldr	r3, [pc, #124]	; (800711c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80070a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80070a2:	0c1b      	lsrs	r3, r3, #16
 80070a4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80070a8:	ee07 3a90 	vmov	s15, r3
 80070ac:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80070b0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80070b4:	ee37 7a87 	vadd.f32	s14, s15, s14
 80070b8:	edd7 6a07 	vldr	s13, [r7, #28]
 80070bc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80070c0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80070c4:	ee17 2a90 	vmov	r2, s15
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 80070cc:	4b13      	ldr	r3, [pc, #76]	; (800711c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80070ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80070d0:	0e1b      	lsrs	r3, r3, #24
 80070d2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80070d6:	ee07 3a90 	vmov	s15, r3
 80070da:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80070de:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80070e2:	ee37 7a87 	vadd.f32	s14, s15, s14
 80070e6:	edd7 6a07 	vldr	s13, [r7, #28]
 80070ea:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80070ee:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80070f2:	ee17 2a90 	vmov	r2, s15
 80070f6:	687b      	ldr	r3, [r7, #4]
 80070f8:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 80070fa:	e008      	b.n	800710e <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	2200      	movs	r2, #0
 8007100:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8007102:	687b      	ldr	r3, [r7, #4]
 8007104:	2200      	movs	r2, #0
 8007106:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8007108:	687b      	ldr	r3, [r7, #4]
 800710a:	2200      	movs	r2, #0
 800710c:	609a      	str	r2, [r3, #8]
}
 800710e:	bf00      	nop
 8007110:	3724      	adds	r7, #36	; 0x24
 8007112:	46bd      	mov	sp, r7
 8007114:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007118:	4770      	bx	lr
 800711a:	bf00      	nop
 800711c:	58024400 	.word	0x58024400
 8007120:	03d09000 	.word	0x03d09000
 8007124:	46000000 	.word	0x46000000
 8007128:	4c742400 	.word	0x4c742400
 800712c:	4a742400 	.word	0x4a742400
 8007130:	4af42400 	.word	0x4af42400

08007134 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef* PLL1_Clocks)
{
 8007134:	b480      	push	{r7}
 8007136:	b089      	sub	sp, #36	; 0x24
 8007138:	af00      	add	r7, sp, #0
 800713a:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800713c:	4ba0      	ldr	r3, [pc, #640]	; (80073c0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800713e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007140:	f003 0303 	and.w	r3, r3, #3
 8007144:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4);
 8007146:	4b9e      	ldr	r3, [pc, #632]	; (80073c0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007148:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800714a:	091b      	lsrs	r3, r3, #4
 800714c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007150:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 8007152:	4b9b      	ldr	r3, [pc, #620]	; (80073c0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007154:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007156:	f003 0301 	and.w	r3, r3, #1
 800715a:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 800715c:	4b98      	ldr	r3, [pc, #608]	; (80073c0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800715e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007160:	08db      	lsrs	r3, r3, #3
 8007162:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8007166:	693a      	ldr	r2, [r7, #16]
 8007168:	fb02 f303 	mul.w	r3, r2, r3
 800716c:	ee07 3a90 	vmov	s15, r3
 8007170:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007174:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 8007178:	697b      	ldr	r3, [r7, #20]
 800717a:	2b00      	cmp	r3, #0
 800717c:	f000 8111 	beq.w	80073a2 <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 8007180:	69bb      	ldr	r3, [r7, #24]
 8007182:	2b02      	cmp	r3, #2
 8007184:	f000 8083 	beq.w	800728e <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 8007188:	69bb      	ldr	r3, [r7, #24]
 800718a:	2b02      	cmp	r3, #2
 800718c:	f200 80a1 	bhi.w	80072d2 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 8007190:	69bb      	ldr	r3, [r7, #24]
 8007192:	2b00      	cmp	r3, #0
 8007194:	d003      	beq.n	800719e <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 8007196:	69bb      	ldr	r3, [r7, #24]
 8007198:	2b01      	cmp	r3, #1
 800719a:	d056      	beq.n	800724a <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 800719c:	e099      	b.n	80072d2 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800719e:	4b88      	ldr	r3, [pc, #544]	; (80073c0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80071a0:	681b      	ldr	r3, [r3, #0]
 80071a2:	f003 0320 	and.w	r3, r3, #32
 80071a6:	2b00      	cmp	r3, #0
 80071a8:	d02d      	beq.n	8007206 <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80071aa:	4b85      	ldr	r3, [pc, #532]	; (80073c0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80071ac:	681b      	ldr	r3, [r3, #0]
 80071ae:	08db      	lsrs	r3, r3, #3
 80071b0:	f003 0303 	and.w	r3, r3, #3
 80071b4:	4a83      	ldr	r2, [pc, #524]	; (80073c4 <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 80071b6:	fa22 f303 	lsr.w	r3, r2, r3
 80071ba:	60bb      	str	r3, [r7, #8]
        pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80071bc:	68bb      	ldr	r3, [r7, #8]
 80071be:	ee07 3a90 	vmov	s15, r3
 80071c2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80071c6:	697b      	ldr	r3, [r7, #20]
 80071c8:	ee07 3a90 	vmov	s15, r3
 80071cc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80071d0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80071d4:	4b7a      	ldr	r3, [pc, #488]	; (80073c0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80071d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80071d8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80071dc:	ee07 3a90 	vmov	s15, r3
 80071e0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80071e4:	ed97 6a03 	vldr	s12, [r7, #12]
 80071e8:	eddf 5a77 	vldr	s11, [pc, #476]	; 80073c8 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 80071ec:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80071f0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80071f4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80071f8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80071fc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007200:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8007204:	e087      	b.n	8007316 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8007206:	697b      	ldr	r3, [r7, #20]
 8007208:	ee07 3a90 	vmov	s15, r3
 800720c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007210:	eddf 6a6e 	vldr	s13, [pc, #440]	; 80073cc <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 8007214:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007218:	4b69      	ldr	r3, [pc, #420]	; (80073c0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800721a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800721c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007220:	ee07 3a90 	vmov	s15, r3
 8007224:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007228:	ed97 6a03 	vldr	s12, [r7, #12]
 800722c:	eddf 5a66 	vldr	s11, [pc, #408]	; 80073c8 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8007230:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007234:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007238:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800723c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007240:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007244:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8007248:	e065      	b.n	8007316 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800724a:	697b      	ldr	r3, [r7, #20]
 800724c:	ee07 3a90 	vmov	s15, r3
 8007250:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007254:	eddf 6a5e 	vldr	s13, [pc, #376]	; 80073d0 <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 8007258:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800725c:	4b58      	ldr	r3, [pc, #352]	; (80073c0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800725e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007260:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007264:	ee07 3a90 	vmov	s15, r3
 8007268:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800726c:	ed97 6a03 	vldr	s12, [r7, #12]
 8007270:	eddf 5a55 	vldr	s11, [pc, #340]	; 80073c8 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8007274:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007278:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800727c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007280:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007284:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007288:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800728c:	e043      	b.n	8007316 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800728e:	697b      	ldr	r3, [r7, #20]
 8007290:	ee07 3a90 	vmov	s15, r3
 8007294:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007298:	eddf 6a4e 	vldr	s13, [pc, #312]	; 80073d4 <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 800729c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80072a0:	4b47      	ldr	r3, [pc, #284]	; (80073c0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80072a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80072a4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80072a8:	ee07 3a90 	vmov	s15, r3
 80072ac:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80072b0:	ed97 6a03 	vldr	s12, [r7, #12]
 80072b4:	eddf 5a44 	vldr	s11, [pc, #272]	; 80073c8 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 80072b8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80072bc:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80072c0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80072c4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80072c8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80072cc:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80072d0:	e021      	b.n	8007316 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

    default:
      pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80072d2:	697b      	ldr	r3, [r7, #20]
 80072d4:	ee07 3a90 	vmov	s15, r3
 80072d8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80072dc:	eddf 6a3b 	vldr	s13, [pc, #236]	; 80073cc <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 80072e0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80072e4:	4b36      	ldr	r3, [pc, #216]	; (80073c0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80072e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80072e8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80072ec:	ee07 3a90 	vmov	s15, r3
 80072f0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80072f4:	ed97 6a03 	vldr	s12, [r7, #12]
 80072f8:	eddf 5a33 	vldr	s11, [pc, #204]	; 80073c8 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 80072fc:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007300:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007304:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007308:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800730c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007310:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8007314:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9)  + (float_t)1 )) ;
 8007316:	4b2a      	ldr	r3, [pc, #168]	; (80073c0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007318:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800731a:	0a5b      	lsrs	r3, r3, #9
 800731c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007320:	ee07 3a90 	vmov	s15, r3
 8007324:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007328:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800732c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007330:	edd7 6a07 	vldr	s13, [r7, #28]
 8007334:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007338:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800733c:	ee17 2a90 	vmov	r2, s15
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >>16) + (float_t)1 )) ;
 8007344:	4b1e      	ldr	r3, [pc, #120]	; (80073c0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007346:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007348:	0c1b      	lsrs	r3, r3, #16
 800734a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800734e:	ee07 3a90 	vmov	s15, r3
 8007352:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007356:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800735a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800735e:	edd7 6a07 	vldr	s13, [r7, #28]
 8007362:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007366:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800736a:	ee17 2a90 	vmov	r2, s15
 800736e:	687b      	ldr	r3, [r7, #4]
 8007370:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >>24) + (float_t)1 )) ;
 8007372:	4b13      	ldr	r3, [pc, #76]	; (80073c0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007374:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007376:	0e1b      	lsrs	r3, r3, #24
 8007378:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800737c:	ee07 3a90 	vmov	s15, r3
 8007380:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007384:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007388:	ee37 7a87 	vadd.f32	s14, s15, s14
 800738c:	edd7 6a07 	vldr	s13, [r7, #28]
 8007390:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007394:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007398:	ee17 2a90 	vmov	r2, s15
 800739c:	687b      	ldr	r3, [r7, #4]
 800739e:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 80073a0:	e008      	b.n	80073b4 <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 80073a2:	687b      	ldr	r3, [r7, #4]
 80073a4:	2200      	movs	r2, #0
 80073a6:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 80073a8:	687b      	ldr	r3, [r7, #4]
 80073aa:	2200      	movs	r2, #0
 80073ac:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 80073ae:	687b      	ldr	r3, [r7, #4]
 80073b0:	2200      	movs	r2, #0
 80073b2:	609a      	str	r2, [r3, #8]
}
 80073b4:	bf00      	nop
 80073b6:	3724      	adds	r7, #36	; 0x24
 80073b8:	46bd      	mov	sp, r7
 80073ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073be:	4770      	bx	lr
 80073c0:	58024400 	.word	0x58024400
 80073c4:	03d09000 	.word	0x03d09000
 80073c8:	46000000 	.word	0x46000000
 80073cc:	4c742400 	.word	0x4c742400
 80073d0:	4a742400 	.word	0x4a742400
 80073d4:	4af42400 	.word	0x4af42400

080073d8 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 80073d8:	b580      	push	{r7, lr}
 80073da:	b084      	sub	sp, #16
 80073dc:	af00      	add	r7, sp, #0
 80073de:	6078      	str	r0, [r7, #4]
 80073e0:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80073e2:	2300      	movs	r3, #0
 80073e4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80073e6:	4b53      	ldr	r3, [pc, #332]	; (8007534 <RCCEx_PLL2_Config+0x15c>)
 80073e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80073ea:	f003 0303 	and.w	r3, r3, #3
 80073ee:	2b03      	cmp	r3, #3
 80073f0:	d101      	bne.n	80073f6 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 80073f2:	2301      	movs	r3, #1
 80073f4:	e099      	b.n	800752a <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 80073f6:	4b4f      	ldr	r3, [pc, #316]	; (8007534 <RCCEx_PLL2_Config+0x15c>)
 80073f8:	681b      	ldr	r3, [r3, #0]
 80073fa:	4a4e      	ldr	r2, [pc, #312]	; (8007534 <RCCEx_PLL2_Config+0x15c>)
 80073fc:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8007400:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007402:	f7fa f99f 	bl	8001744 <HAL_GetTick>
 8007406:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8007408:	e008      	b.n	800741c <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 800740a:	f7fa f99b 	bl	8001744 <HAL_GetTick>
 800740e:	4602      	mov	r2, r0
 8007410:	68bb      	ldr	r3, [r7, #8]
 8007412:	1ad3      	subs	r3, r2, r3
 8007414:	2b02      	cmp	r3, #2
 8007416:	d901      	bls.n	800741c <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8007418:	2303      	movs	r3, #3
 800741a:	e086      	b.n	800752a <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800741c:	4b45      	ldr	r3, [pc, #276]	; (8007534 <RCCEx_PLL2_Config+0x15c>)
 800741e:	681b      	ldr	r3, [r3, #0]
 8007420:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007424:	2b00      	cmp	r3, #0
 8007426:	d1f0      	bne.n	800740a <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8007428:	4b42      	ldr	r3, [pc, #264]	; (8007534 <RCCEx_PLL2_Config+0x15c>)
 800742a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800742c:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8007430:	687b      	ldr	r3, [r7, #4]
 8007432:	681b      	ldr	r3, [r3, #0]
 8007434:	031b      	lsls	r3, r3, #12
 8007436:	493f      	ldr	r1, [pc, #252]	; (8007534 <RCCEx_PLL2_Config+0x15c>)
 8007438:	4313      	orrs	r3, r2
 800743a:	628b      	str	r3, [r1, #40]	; 0x28
 800743c:	687b      	ldr	r3, [r7, #4]
 800743e:	685b      	ldr	r3, [r3, #4]
 8007440:	3b01      	subs	r3, #1
 8007442:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8007446:	687b      	ldr	r3, [r7, #4]
 8007448:	689b      	ldr	r3, [r3, #8]
 800744a:	3b01      	subs	r3, #1
 800744c:	025b      	lsls	r3, r3, #9
 800744e:	b29b      	uxth	r3, r3
 8007450:	431a      	orrs	r2, r3
 8007452:	687b      	ldr	r3, [r7, #4]
 8007454:	68db      	ldr	r3, [r3, #12]
 8007456:	3b01      	subs	r3, #1
 8007458:	041b      	lsls	r3, r3, #16
 800745a:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800745e:	431a      	orrs	r2, r3
 8007460:	687b      	ldr	r3, [r7, #4]
 8007462:	691b      	ldr	r3, [r3, #16]
 8007464:	3b01      	subs	r3, #1
 8007466:	061b      	lsls	r3, r3, #24
 8007468:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800746c:	4931      	ldr	r1, [pc, #196]	; (8007534 <RCCEx_PLL2_Config+0x15c>)
 800746e:	4313      	orrs	r3, r2
 8007470:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8007472:	4b30      	ldr	r3, [pc, #192]	; (8007534 <RCCEx_PLL2_Config+0x15c>)
 8007474:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007476:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800747a:	687b      	ldr	r3, [r7, #4]
 800747c:	695b      	ldr	r3, [r3, #20]
 800747e:	492d      	ldr	r1, [pc, #180]	; (8007534 <RCCEx_PLL2_Config+0x15c>)
 8007480:	4313      	orrs	r3, r2
 8007482:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8007484:	4b2b      	ldr	r3, [pc, #172]	; (8007534 <RCCEx_PLL2_Config+0x15c>)
 8007486:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007488:	f023 0220 	bic.w	r2, r3, #32
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	699b      	ldr	r3, [r3, #24]
 8007490:	4928      	ldr	r1, [pc, #160]	; (8007534 <RCCEx_PLL2_Config+0x15c>)
 8007492:	4313      	orrs	r3, r2
 8007494:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8007496:	4b27      	ldr	r3, [pc, #156]	; (8007534 <RCCEx_PLL2_Config+0x15c>)
 8007498:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800749a:	4a26      	ldr	r2, [pc, #152]	; (8007534 <RCCEx_PLL2_Config+0x15c>)
 800749c:	f023 0310 	bic.w	r3, r3, #16
 80074a0:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 80074a2:	4b24      	ldr	r3, [pc, #144]	; (8007534 <RCCEx_PLL2_Config+0x15c>)
 80074a4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80074a6:	4b24      	ldr	r3, [pc, #144]	; (8007538 <RCCEx_PLL2_Config+0x160>)
 80074a8:	4013      	ands	r3, r2
 80074aa:	687a      	ldr	r2, [r7, #4]
 80074ac:	69d2      	ldr	r2, [r2, #28]
 80074ae:	00d2      	lsls	r2, r2, #3
 80074b0:	4920      	ldr	r1, [pc, #128]	; (8007534 <RCCEx_PLL2_Config+0x15c>)
 80074b2:	4313      	orrs	r3, r2
 80074b4:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 80074b6:	4b1f      	ldr	r3, [pc, #124]	; (8007534 <RCCEx_PLL2_Config+0x15c>)
 80074b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80074ba:	4a1e      	ldr	r2, [pc, #120]	; (8007534 <RCCEx_PLL2_Config+0x15c>)
 80074bc:	f043 0310 	orr.w	r3, r3, #16
 80074c0:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 80074c2:	683b      	ldr	r3, [r7, #0]
 80074c4:	2b00      	cmp	r3, #0
 80074c6:	d106      	bne.n	80074d6 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 80074c8:	4b1a      	ldr	r3, [pc, #104]	; (8007534 <RCCEx_PLL2_Config+0x15c>)
 80074ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80074cc:	4a19      	ldr	r2, [pc, #100]	; (8007534 <RCCEx_PLL2_Config+0x15c>)
 80074ce:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80074d2:	62d3      	str	r3, [r2, #44]	; 0x2c
 80074d4:	e00f      	b.n	80074f6 <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 80074d6:	683b      	ldr	r3, [r7, #0]
 80074d8:	2b01      	cmp	r3, #1
 80074da:	d106      	bne.n	80074ea <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 80074dc:	4b15      	ldr	r3, [pc, #84]	; (8007534 <RCCEx_PLL2_Config+0x15c>)
 80074de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80074e0:	4a14      	ldr	r2, [pc, #80]	; (8007534 <RCCEx_PLL2_Config+0x15c>)
 80074e2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80074e6:	62d3      	str	r3, [r2, #44]	; 0x2c
 80074e8:	e005      	b.n	80074f6 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 80074ea:	4b12      	ldr	r3, [pc, #72]	; (8007534 <RCCEx_PLL2_Config+0x15c>)
 80074ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80074ee:	4a11      	ldr	r2, [pc, #68]	; (8007534 <RCCEx_PLL2_Config+0x15c>)
 80074f0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80074f4:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 80074f6:	4b0f      	ldr	r3, [pc, #60]	; (8007534 <RCCEx_PLL2_Config+0x15c>)
 80074f8:	681b      	ldr	r3, [r3, #0]
 80074fa:	4a0e      	ldr	r2, [pc, #56]	; (8007534 <RCCEx_PLL2_Config+0x15c>)
 80074fc:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8007500:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007502:	f7fa f91f 	bl	8001744 <HAL_GetTick>
 8007506:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8007508:	e008      	b.n	800751c <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 800750a:	f7fa f91b 	bl	8001744 <HAL_GetTick>
 800750e:	4602      	mov	r2, r0
 8007510:	68bb      	ldr	r3, [r7, #8]
 8007512:	1ad3      	subs	r3, r2, r3
 8007514:	2b02      	cmp	r3, #2
 8007516:	d901      	bls.n	800751c <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8007518:	2303      	movs	r3, #3
 800751a:	e006      	b.n	800752a <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800751c:	4b05      	ldr	r3, [pc, #20]	; (8007534 <RCCEx_PLL2_Config+0x15c>)
 800751e:	681b      	ldr	r3, [r3, #0]
 8007520:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007524:	2b00      	cmp	r3, #0
 8007526:	d0f0      	beq.n	800750a <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8007528:	7bfb      	ldrb	r3, [r7, #15]
}
 800752a:	4618      	mov	r0, r3
 800752c:	3710      	adds	r7, #16
 800752e:	46bd      	mov	sp, r7
 8007530:	bd80      	pop	{r7, pc}
 8007532:	bf00      	nop
 8007534:	58024400 	.word	0x58024400
 8007538:	ffff0007 	.word	0xffff0007

0800753c <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 800753c:	b580      	push	{r7, lr}
 800753e:	b084      	sub	sp, #16
 8007540:	af00      	add	r7, sp, #0
 8007542:	6078      	str	r0, [r7, #4]
 8007544:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8007546:	2300      	movs	r3, #0
 8007548:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800754a:	4b53      	ldr	r3, [pc, #332]	; (8007698 <RCCEx_PLL3_Config+0x15c>)
 800754c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800754e:	f003 0303 	and.w	r3, r3, #3
 8007552:	2b03      	cmp	r3, #3
 8007554:	d101      	bne.n	800755a <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8007556:	2301      	movs	r3, #1
 8007558:	e099      	b.n	800768e <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800755a:	4b4f      	ldr	r3, [pc, #316]	; (8007698 <RCCEx_PLL3_Config+0x15c>)
 800755c:	681b      	ldr	r3, [r3, #0]
 800755e:	4a4e      	ldr	r2, [pc, #312]	; (8007698 <RCCEx_PLL3_Config+0x15c>)
 8007560:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007564:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007566:	f7fa f8ed 	bl	8001744 <HAL_GetTick>
 800756a:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800756c:	e008      	b.n	8007580 <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 800756e:	f7fa f8e9 	bl	8001744 <HAL_GetTick>
 8007572:	4602      	mov	r2, r0
 8007574:	68bb      	ldr	r3, [r7, #8]
 8007576:	1ad3      	subs	r3, r2, r3
 8007578:	2b02      	cmp	r3, #2
 800757a:	d901      	bls.n	8007580 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 800757c:	2303      	movs	r3, #3
 800757e:	e086      	b.n	800768e <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8007580:	4b45      	ldr	r3, [pc, #276]	; (8007698 <RCCEx_PLL3_Config+0x15c>)
 8007582:	681b      	ldr	r3, [r3, #0]
 8007584:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007588:	2b00      	cmp	r3, #0
 800758a:	d1f0      	bne.n	800756e <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800758c:	4b42      	ldr	r3, [pc, #264]	; (8007698 <RCCEx_PLL3_Config+0x15c>)
 800758e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007590:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8007594:	687b      	ldr	r3, [r7, #4]
 8007596:	681b      	ldr	r3, [r3, #0]
 8007598:	051b      	lsls	r3, r3, #20
 800759a:	493f      	ldr	r1, [pc, #252]	; (8007698 <RCCEx_PLL3_Config+0x15c>)
 800759c:	4313      	orrs	r3, r2
 800759e:	628b      	str	r3, [r1, #40]	; 0x28
 80075a0:	687b      	ldr	r3, [r7, #4]
 80075a2:	685b      	ldr	r3, [r3, #4]
 80075a4:	3b01      	subs	r3, #1
 80075a6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80075aa:	687b      	ldr	r3, [r7, #4]
 80075ac:	689b      	ldr	r3, [r3, #8]
 80075ae:	3b01      	subs	r3, #1
 80075b0:	025b      	lsls	r3, r3, #9
 80075b2:	b29b      	uxth	r3, r3
 80075b4:	431a      	orrs	r2, r3
 80075b6:	687b      	ldr	r3, [r7, #4]
 80075b8:	68db      	ldr	r3, [r3, #12]
 80075ba:	3b01      	subs	r3, #1
 80075bc:	041b      	lsls	r3, r3, #16
 80075be:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80075c2:	431a      	orrs	r2, r3
 80075c4:	687b      	ldr	r3, [r7, #4]
 80075c6:	691b      	ldr	r3, [r3, #16]
 80075c8:	3b01      	subs	r3, #1
 80075ca:	061b      	lsls	r3, r3, #24
 80075cc:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80075d0:	4931      	ldr	r1, [pc, #196]	; (8007698 <RCCEx_PLL3_Config+0x15c>)
 80075d2:	4313      	orrs	r3, r2
 80075d4:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 80075d6:	4b30      	ldr	r3, [pc, #192]	; (8007698 <RCCEx_PLL3_Config+0x15c>)
 80075d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80075da:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80075de:	687b      	ldr	r3, [r7, #4]
 80075e0:	695b      	ldr	r3, [r3, #20]
 80075e2:	492d      	ldr	r1, [pc, #180]	; (8007698 <RCCEx_PLL3_Config+0x15c>)
 80075e4:	4313      	orrs	r3, r2
 80075e6:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 80075e8:	4b2b      	ldr	r3, [pc, #172]	; (8007698 <RCCEx_PLL3_Config+0x15c>)
 80075ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80075ec:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 80075f0:	687b      	ldr	r3, [r7, #4]
 80075f2:	699b      	ldr	r3, [r3, #24]
 80075f4:	4928      	ldr	r1, [pc, #160]	; (8007698 <RCCEx_PLL3_Config+0x15c>)
 80075f6:	4313      	orrs	r3, r2
 80075f8:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 80075fa:	4b27      	ldr	r3, [pc, #156]	; (8007698 <RCCEx_PLL3_Config+0x15c>)
 80075fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80075fe:	4a26      	ldr	r2, [pc, #152]	; (8007698 <RCCEx_PLL3_Config+0x15c>)
 8007600:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007604:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8007606:	4b24      	ldr	r3, [pc, #144]	; (8007698 <RCCEx_PLL3_Config+0x15c>)
 8007608:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800760a:	4b24      	ldr	r3, [pc, #144]	; (800769c <RCCEx_PLL3_Config+0x160>)
 800760c:	4013      	ands	r3, r2
 800760e:	687a      	ldr	r2, [r7, #4]
 8007610:	69d2      	ldr	r2, [r2, #28]
 8007612:	00d2      	lsls	r2, r2, #3
 8007614:	4920      	ldr	r1, [pc, #128]	; (8007698 <RCCEx_PLL3_Config+0x15c>)
 8007616:	4313      	orrs	r3, r2
 8007618:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800761a:	4b1f      	ldr	r3, [pc, #124]	; (8007698 <RCCEx_PLL3_Config+0x15c>)
 800761c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800761e:	4a1e      	ldr	r2, [pc, #120]	; (8007698 <RCCEx_PLL3_Config+0x15c>)
 8007620:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007624:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8007626:	683b      	ldr	r3, [r7, #0]
 8007628:	2b00      	cmp	r3, #0
 800762a:	d106      	bne.n	800763a <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800762c:	4b1a      	ldr	r3, [pc, #104]	; (8007698 <RCCEx_PLL3_Config+0x15c>)
 800762e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007630:	4a19      	ldr	r2, [pc, #100]	; (8007698 <RCCEx_PLL3_Config+0x15c>)
 8007632:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8007636:	62d3      	str	r3, [r2, #44]	; 0x2c
 8007638:	e00f      	b.n	800765a <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 800763a:	683b      	ldr	r3, [r7, #0]
 800763c:	2b01      	cmp	r3, #1
 800763e:	d106      	bne.n	800764e <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8007640:	4b15      	ldr	r3, [pc, #84]	; (8007698 <RCCEx_PLL3_Config+0x15c>)
 8007642:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007644:	4a14      	ldr	r2, [pc, #80]	; (8007698 <RCCEx_PLL3_Config+0x15c>)
 8007646:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800764a:	62d3      	str	r3, [r2, #44]	; 0x2c
 800764c:	e005      	b.n	800765a <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800764e:	4b12      	ldr	r3, [pc, #72]	; (8007698 <RCCEx_PLL3_Config+0x15c>)
 8007650:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007652:	4a11      	ldr	r2, [pc, #68]	; (8007698 <RCCEx_PLL3_Config+0x15c>)
 8007654:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8007658:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800765a:	4b0f      	ldr	r3, [pc, #60]	; (8007698 <RCCEx_PLL3_Config+0x15c>)
 800765c:	681b      	ldr	r3, [r3, #0]
 800765e:	4a0e      	ldr	r2, [pc, #56]	; (8007698 <RCCEx_PLL3_Config+0x15c>)
 8007660:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007664:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007666:	f7fa f86d 	bl	8001744 <HAL_GetTick>
 800766a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800766c:	e008      	b.n	8007680 <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 800766e:	f7fa f869 	bl	8001744 <HAL_GetTick>
 8007672:	4602      	mov	r2, r0
 8007674:	68bb      	ldr	r3, [r7, #8]
 8007676:	1ad3      	subs	r3, r2, r3
 8007678:	2b02      	cmp	r3, #2
 800767a:	d901      	bls.n	8007680 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 800767c:	2303      	movs	r3, #3
 800767e:	e006      	b.n	800768e <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8007680:	4b05      	ldr	r3, [pc, #20]	; (8007698 <RCCEx_PLL3_Config+0x15c>)
 8007682:	681b      	ldr	r3, [r3, #0]
 8007684:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007688:	2b00      	cmp	r3, #0
 800768a:	d0f0      	beq.n	800766e <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 800768c:	7bfb      	ldrb	r3, [r7, #15]
}
 800768e:	4618      	mov	r0, r3
 8007690:	3710      	adds	r7, #16
 8007692:	46bd      	mov	sp, r7
 8007694:	bd80      	pop	{r7, pc}
 8007696:	bf00      	nop
 8007698:	58024400 	.word	0x58024400
 800769c:	ffff0007 	.word	0xffff0007

080076a0 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 80076a0:	b580      	push	{r7, lr}
 80076a2:	b084      	sub	sp, #16
 80076a4:	af00      	add	r7, sp, #0
 80076a6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 80076a8:	2301      	movs	r3, #1
 80076aa:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler */
  if(hrtc != NULL)
 80076ac:	687b      	ldr	r3, [r7, #4]
 80076ae:	2b00      	cmp	r3, #0
 80076b0:	d067      	beq.n	8007782 <HAL_RTC_Init+0xe2>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else /*  (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */
    if(hrtc->State == HAL_RTC_STATE_RESET)
 80076b2:	687b      	ldr	r3, [r7, #4]
 80076b4:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80076b8:	b2db      	uxtb	r3, r3
 80076ba:	2b00      	cmp	r3, #0
 80076bc:	d106      	bne.n	80076cc <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 80076be:	687b      	ldr	r3, [r7, #4]
 80076c0:	2200      	movs	r2, #0
 80076c2:	f883 2020 	strb.w	r2, [r3, #32]

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 80076c6:	6878      	ldr	r0, [r7, #4]
 80076c8:	f7f9 fd78 	bl	80011bc <HAL_RTC_MspInit>
    }
#endif /*  (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 80076cc:	687b      	ldr	r3, [r7, #4]
 80076ce:	2202      	movs	r2, #2
 80076d0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80076d4:	687b      	ldr	r3, [r7, #4]
 80076d6:	681b      	ldr	r3, [r3, #0]
 80076d8:	22ca      	movs	r2, #202	; 0xca
 80076da:	625a      	str	r2, [r3, #36]	; 0x24
 80076dc:	687b      	ldr	r3, [r7, #4]
 80076de:	681b      	ldr	r3, [r3, #0]
 80076e0:	2253      	movs	r2, #83	; 0x53
 80076e2:	625a      	str	r2, [r3, #36]	; 0x24

   /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 80076e4:	6878      	ldr	r0, [r7, #4]
 80076e6:	f000 f879 	bl	80077dc <RTC_EnterInitMode>
 80076ea:	4603      	mov	r3, r0
 80076ec:	73fb      	strb	r3, [r7, #15]
    if (status == HAL_OK)
 80076ee:	7bfb      	ldrb	r3, [r7, #15]
 80076f0:	2b00      	cmp	r3, #0
 80076f2:	d13b      	bne.n	800776c <HAL_RTC_Init+0xcc>
#if defined(RTC_CR_TAMPOE)
      /* Clear RTC_CR FMT, OSEL, POL and TAMPOE Bits */
      hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE);
#else  /* RTC_CR_TAMPOE */
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL);
 80076f4:	687b      	ldr	r3, [r7, #4]
 80076f6:	681b      	ldr	r3, [r3, #0]
 80076f8:	6899      	ldr	r1, [r3, #8]
 80076fa:	687b      	ldr	r3, [r7, #4]
 80076fc:	681a      	ldr	r2, [r3, #0]
 80076fe:	4b23      	ldr	r3, [pc, #140]	; (800778c <HAL_RTC_Init+0xec>)
 8007700:	400b      	ands	r3, r1
 8007702:	6093      	str	r3, [r2, #8]
#endif /* RTC_CR_TAMPOE */

      /* Set RTC_CR register */
      hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8007704:	687b      	ldr	r3, [r7, #4]
 8007706:	681b      	ldr	r3, [r3, #0]
 8007708:	6899      	ldr	r1, [r3, #8]
 800770a:	687b      	ldr	r3, [r7, #4]
 800770c:	685a      	ldr	r2, [r3, #4]
 800770e:	687b      	ldr	r3, [r7, #4]
 8007710:	691b      	ldr	r3, [r3, #16]
 8007712:	431a      	orrs	r2, r3
 8007714:	687b      	ldr	r3, [r7, #4]
 8007716:	699b      	ldr	r3, [r3, #24]
 8007718:	431a      	orrs	r2, r3
 800771a:	687b      	ldr	r3, [r7, #4]
 800771c:	681b      	ldr	r3, [r3, #0]
 800771e:	430a      	orrs	r2, r1
 8007720:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos) | (hrtc->Init.SynchPrediv << RTC_PRER_PREDIV_S_Pos);
 8007722:	687b      	ldr	r3, [r7, #4]
 8007724:	689b      	ldr	r3, [r3, #8]
 8007726:	0419      	lsls	r1, r3, #16
 8007728:	687b      	ldr	r3, [r7, #4]
 800772a:	68da      	ldr	r2, [r3, #12]
 800772c:	687b      	ldr	r3, [r7, #4]
 800772e:	681b      	ldr	r3, [r3, #0]
 8007730:	430a      	orrs	r2, r1
 8007732:	611a      	str	r2, [r3, #16]

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 8007734:	6878      	ldr	r0, [r7, #4]
 8007736:	f000 f881 	bl	800783c <RTC_ExitInitMode>
 800773a:	4603      	mov	r3, r0
 800773c:	73fb      	strb	r3, [r7, #15]

      if(status == HAL_OK)
 800773e:	7bfb      	ldrb	r3, [r7, #15]
 8007740:	2b00      	cmp	r3, #0
 8007742:	d113      	bne.n	800776c <HAL_RTC_Init+0xcc>
        hrtc->Instance->CR &= ~(RTC_CR_TAMPALRM_PU | RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN);
        hrtc->Instance->CR |= (hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
#endif /* RTC_CR_TAMPALRM_TYPE && RTC_CR_OUT2EN && RTC_CR_TAMPALRM_PU */

#if defined(RTC_OR_ALARMOUTTYPE) && defined(RTC_OR_OUT_RMP)
        hrtc->Instance->OR &= ~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 8007744:	687b      	ldr	r3, [r7, #4]
 8007746:	681b      	ldr	r3, [r3, #0]
 8007748:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800774a:	687b      	ldr	r3, [r7, #4]
 800774c:	681b      	ldr	r3, [r3, #0]
 800774e:	f022 0203 	bic.w	r2, r2, #3
 8007752:	64da      	str	r2, [r3, #76]	; 0x4c
        hrtc->Instance->OR |= (hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 8007754:	687b      	ldr	r3, [r7, #4]
 8007756:	681b      	ldr	r3, [r3, #0]
 8007758:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 800775a:	687b      	ldr	r3, [r7, #4]
 800775c:	69da      	ldr	r2, [r3, #28]
 800775e:	687b      	ldr	r3, [r7, #4]
 8007760:	695b      	ldr	r3, [r3, #20]
 8007762:	431a      	orrs	r2, r3
 8007764:	687b      	ldr	r3, [r7, #4]
 8007766:	681b      	ldr	r3, [r3, #0]
 8007768:	430a      	orrs	r2, r1
 800776a:	64da      	str	r2, [r3, #76]	; 0x4c
#endif /* ALARMOUTTYPE && RTC_OR_OUT_RMP */
      }
    }
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800776c:	687b      	ldr	r3, [r7, #4]
 800776e:	681b      	ldr	r3, [r3, #0]
 8007770:	22ff      	movs	r2, #255	; 0xff
 8007772:	625a      	str	r2, [r3, #36]	; 0x24
    if (status == HAL_OK)
 8007774:	7bfb      	ldrb	r3, [r7, #15]
 8007776:	2b00      	cmp	r3, #0
 8007778:	d103      	bne.n	8007782 <HAL_RTC_Init+0xe2>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_READY;
 800777a:	687b      	ldr	r3, [r7, #4]
 800777c:	2201      	movs	r2, #1
 800777e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
  }

  /* return status */
  return status;
 8007782:	7bfb      	ldrb	r3, [r7, #15]
}
 8007784:	4618      	mov	r0, r3
 8007786:	3710      	adds	r7, #16
 8007788:	46bd      	mov	sp, r7
 800778a:	bd80      	pop	{r7, pc}
 800778c:	ff8fffbf 	.word	0xff8fffbf

08007790 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8007790:	b580      	push	{r7, lr}
 8007792:	b084      	sub	sp, #16
 8007794:	af00      	add	r7, sp, #0
 8007796:	6078      	str	r0, [r7, #4]
  /* Clear RSF flag */
#if defined(RTC_ICSR_RSF)
  hrtc->Instance->ICSR &= (uint32_t)RTC_RSF_MASK;
#endif /* RTC_ICSR_RSF */
#if defined(RTC_ISR_RSF)
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8007798:	687b      	ldr	r3, [r7, #4]
 800779a:	681b      	ldr	r3, [r3, #0]
 800779c:	68da      	ldr	r2, [r3, #12]
 800779e:	687b      	ldr	r3, [r7, #4]
 80077a0:	681b      	ldr	r3, [r3, #0]
 80077a2:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80077a6:	60da      	str	r2, [r3, #12]
#endif /* RTC_ISR_RSF */

  tickstart = HAL_GetTick();
 80077a8:	f7f9 ffcc 	bl	8001744 <HAL_GetTick>
 80077ac:	60f8      	str	r0, [r7, #12]
  /* Wait the registers to be synchronised */
#if defined(RTC_ICSR_RSF)
  while ((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
#endif /* RTC_ICSR_RSF */
#if defined(RTC_ISR_RSF)
    while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 80077ae:	e009      	b.n	80077c4 <HAL_RTC_WaitForSynchro+0x34>
#endif /* RTC_ISR_RSF */
    {
      if((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80077b0:	f7f9 ffc8 	bl	8001744 <HAL_GetTick>
 80077b4:	4602      	mov	r2, r0
 80077b6:	68fb      	ldr	r3, [r7, #12]
 80077b8:	1ad3      	subs	r3, r2, r3
 80077ba:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80077be:	d901      	bls.n	80077c4 <HAL_RTC_WaitForSynchro+0x34>
      {
        return HAL_TIMEOUT;
 80077c0:	2303      	movs	r3, #3
 80077c2:	e007      	b.n	80077d4 <HAL_RTC_WaitForSynchro+0x44>
    while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 80077c4:	687b      	ldr	r3, [r7, #4]
 80077c6:	681b      	ldr	r3, [r3, #0]
 80077c8:	68db      	ldr	r3, [r3, #12]
 80077ca:	f003 0320 	and.w	r3, r3, #32
 80077ce:	2b00      	cmp	r3, #0
 80077d0:	d0ee      	beq.n	80077b0 <HAL_RTC_WaitForSynchro+0x20>
      }
    }

  return HAL_OK;
 80077d2:	2300      	movs	r3, #0
}
 80077d4:	4618      	mov	r0, r3
 80077d6:	3710      	adds	r7, #16
 80077d8:	46bd      	mov	sp, r7
 80077da:	bd80      	pop	{r7, pc}

080077dc <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 80077dc:	b580      	push	{r7, lr}
 80077de:	b084      	sub	sp, #16
 80077e0:	af00      	add	r7, sp, #0
 80077e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80077e4:	2300      	movs	r3, #0
 80077e6:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#endif /* RTC_ICSR_INITF */
#if defined(RTC_ISR_INITF)
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 80077e8:	687b      	ldr	r3, [r7, #4]
 80077ea:	681b      	ldr	r3, [r3, #0]
 80077ec:	68db      	ldr	r3, [r3, #12]
 80077ee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80077f2:	2b00      	cmp	r3, #0
 80077f4:	d11d      	bne.n	8007832 <RTC_EnterInitMode+0x56>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 80077f6:	687b      	ldr	r3, [r7, #4]
 80077f8:	681b      	ldr	r3, [r3, #0]
 80077fa:	f04f 32ff 	mov.w	r2, #4294967295
 80077fe:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 8007800:	f7f9 ffa0 	bl	8001744 <HAL_GetTick>
 8007804:	60b8      	str	r0, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8007806:	e00d      	b.n	8007824 <RTC_EnterInitMode+0x48>
    {
      if((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 8007808:	f7f9 ff9c 	bl	8001744 <HAL_GetTick>
 800780c:	4602      	mov	r2, r0
 800780e:	68bb      	ldr	r3, [r7, #8]
 8007810:	1ad3      	subs	r3, r2, r3
 8007812:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007816:	d905      	bls.n	8007824 <RTC_EnterInitMode+0x48>
      {
        status = HAL_TIMEOUT;
 8007818:	2303      	movs	r3, #3
 800781a:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800781c:	687b      	ldr	r3, [r7, #4]
 800781e:	2203      	movs	r2, #3
 8007820:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8007824:	687b      	ldr	r3, [r7, #4]
 8007826:	681b      	ldr	r3, [r3, #0]
 8007828:	68db      	ldr	r3, [r3, #12]
 800782a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800782e:	2b00      	cmp	r3, #0
 8007830:	d0ea      	beq.n	8007808 <RTC_EnterInitMode+0x2c>
      }
    }
  }
#endif /* RTC_ISR_INITF */

  return status;
 8007832:	7bfb      	ldrb	r3, [r7, #15]
}
 8007834:	4618      	mov	r0, r3
 8007836:	3710      	adds	r7, #16
 8007838:	46bd      	mov	sp, r7
 800783a:	bd80      	pop	{r7, pc}

0800783c <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 800783c:	b580      	push	{r7, lr}
 800783e:	b084      	sub	sp, #16
 8007840:	af00      	add	r7, sp, #0
 8007842:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007844:	2300      	movs	r3, #0
 8007846:	73fb      	strb	r3, [r7, #15]
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);

#elif defined(RTC_ISR_INITF)

  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ISR, RTC_ISR_INITF);
 8007848:	4b1a      	ldr	r3, [pc, #104]	; (80078b4 <RTC_ExitInitMode+0x78>)
 800784a:	68db      	ldr	r3, [r3, #12]
 800784c:	4a19      	ldr	r2, [pc, #100]	; (80078b4 <RTC_ExitInitMode+0x78>)
 800784e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007852:	60d3      	str	r3, [r2, #12]

#endif /* RTC_ISR_INITF */
  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 8007854:	4b17      	ldr	r3, [pc, #92]	; (80078b4 <RTC_ExitInitMode+0x78>)
 8007856:	689b      	ldr	r3, [r3, #8]
 8007858:	f003 0320 	and.w	r3, r3, #32
 800785c:	2b00      	cmp	r3, #0
 800785e:	d10c      	bne.n	800787a <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8007860:	6878      	ldr	r0, [r7, #4]
 8007862:	f7ff ff95 	bl	8007790 <HAL_RTC_WaitForSynchro>
 8007866:	4603      	mov	r3, r0
 8007868:	2b00      	cmp	r3, #0
 800786a:	d01e      	beq.n	80078aa <RTC_ExitInitMode+0x6e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800786c:	687b      	ldr	r3, [r7, #4]
 800786e:	2203      	movs	r2, #3
 8007870:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 8007874:	2303      	movs	r3, #3
 8007876:	73fb      	strb	r3, [r7, #15]
 8007878:	e017      	b.n	80078aa <RTC_ExitInitMode+0x6e>
    }
  }
  else
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 800787a:	4b0e      	ldr	r3, [pc, #56]	; (80078b4 <RTC_ExitInitMode+0x78>)
 800787c:	689b      	ldr	r3, [r3, #8]
 800787e:	4a0d      	ldr	r2, [pc, #52]	; (80078b4 <RTC_ExitInitMode+0x78>)
 8007880:	f023 0320 	bic.w	r3, r3, #32
 8007884:	6093      	str	r3, [r2, #8]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8007886:	6878      	ldr	r0, [r7, #4]
 8007888:	f7ff ff82 	bl	8007790 <HAL_RTC_WaitForSynchro>
 800788c:	4603      	mov	r3, r0
 800788e:	2b00      	cmp	r3, #0
 8007890:	d005      	beq.n	800789e <RTC_ExitInitMode+0x62>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8007892:	687b      	ldr	r3, [r7, #4]
 8007894:	2203      	movs	r2, #3
 8007896:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 800789a:	2303      	movs	r3, #3
 800789c:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 800789e:	4b05      	ldr	r3, [pc, #20]	; (80078b4 <RTC_ExitInitMode+0x78>)
 80078a0:	689b      	ldr	r3, [r3, #8]
 80078a2:	4a04      	ldr	r2, [pc, #16]	; (80078b4 <RTC_ExitInitMode+0x78>)
 80078a4:	f043 0320 	orr.w	r3, r3, #32
 80078a8:	6093      	str	r3, [r2, #8]
  }

  return status;
 80078aa:	7bfb      	ldrb	r3, [r7, #15]
}
 80078ac:	4618      	mov	r0, r3
 80078ae:	3710      	adds	r7, #16
 80078b0:	46bd      	mov	sp, r7
 80078b2:	bd80      	pop	{r7, pc}
 80078b4:	58004000 	.word	0x58004000

080078b8 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 80078b8:	b580      	push	{r7, lr}
 80078ba:	b08a      	sub	sp, #40	; 0x28
 80078bc:	af00      	add	r7, sp, #0
 80078be:	6078      	str	r0, [r7, #4]
  uint32_t speedgrade;
  uint32_t unitsize;
  uint32_t tickstart;

  /* Check the SD handle allocation */
  if (hsd == NULL)
 80078c0:	687b      	ldr	r3, [r7, #4]
 80078c2:	2b00      	cmp	r3, #0
 80078c4:	d101      	bne.n	80078ca <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 80078c6:	2301      	movs	r3, #1
 80078c8:	e07c      	b.n	80079c4 <HAL_SD_Init+0x10c>
  assert_param(IS_SDMMC_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDMMC_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(hsd->Init.ClockDiv));

  if (hsd->State == HAL_SD_STATE_RESET)
 80078ca:	687b      	ldr	r3, [r7, #4]
 80078cc:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80078d0:	b2db      	uxtb	r3, r3
 80078d2:	2b00      	cmp	r3, #0
 80078d4:	d10c      	bne.n	80078f0 <HAL_SD_Init+0x38>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 80078d6:	687b      	ldr	r3, [r7, #4]
 80078d8:	2200      	movs	r2, #0
 80078da:	771a      	strb	r2, [r3, #28]

#if (USE_SD_TRANSCEIVER != 0U)
    /* Force  SDMMC_TRANSCEIVER_PRESENT for Legacy usage */
    if (hsd->Init.TranceiverPresent == SDMMC_TRANSCEIVER_UNKNOWN)
 80078dc:	687b      	ldr	r3, [r7, #4]
 80078de:	699b      	ldr	r3, [r3, #24]
 80078e0:	2b00      	cmp	r3, #0
 80078e2:	d102      	bne.n	80078ea <HAL_SD_Init+0x32>
    {
      hsd->Init.TranceiverPresent = SDMMC_TRANSCEIVER_PRESENT;
 80078e4:	687b      	ldr	r3, [r7, #4]
 80078e6:	2202      	movs	r2, #2
 80078e8:	619a      	str	r2, [r3, #24]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 80078ea:	6878      	ldr	r0, [r7, #4]
 80078ec:	f7f9 fc96 	bl	800121c <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 80078f0:	687b      	ldr	r3, [r7, #4]
 80078f2:	2203      	movs	r2, #3
 80078f4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 80078f8:	6878      	ldr	r0, [r7, #4]
 80078fa:	f000 f867 	bl	80079cc <HAL_SD_InitCard>
 80078fe:	4603      	mov	r3, r0
 8007900:	2b00      	cmp	r3, #0
 8007902:	d001      	beq.n	8007908 <HAL_SD_Init+0x50>
  {
    return HAL_ERROR;
 8007904:	2301      	movs	r3, #1
 8007906:	e05d      	b.n	80079c4 <HAL_SD_Init+0x10c>
  }

  if (HAL_SD_GetCardStatus(hsd, &CardStatus) != HAL_OK)
 8007908:	f107 0308 	add.w	r3, r7, #8
 800790c:	4619      	mov	r1, r3
 800790e:	6878      	ldr	r0, [r7, #4]
 8007910:	f000 fbfe 	bl	8008110 <HAL_SD_GetCardStatus>
 8007914:	4603      	mov	r3, r0
 8007916:	2b00      	cmp	r3, #0
 8007918:	d001      	beq.n	800791e <HAL_SD_Init+0x66>
  {
    return HAL_ERROR;
 800791a:	2301      	movs	r3, #1
 800791c:	e052      	b.n	80079c4 <HAL_SD_Init+0x10c>
  }
  /* Get Initial Card Speed from Card Status*/
  speedgrade = CardStatus.UhsSpeedGrade;
 800791e:	7e3b      	ldrb	r3, [r7, #24]
 8007920:	b2db      	uxtb	r3, r3
 8007922:	627b      	str	r3, [r7, #36]	; 0x24
  unitsize = CardStatus.UhsAllocationUnitSize;
 8007924:	7e7b      	ldrb	r3, [r7, #25]
 8007926:	b2db      	uxtb	r3, r3
 8007928:	623b      	str	r3, [r7, #32]
  if ((hsd->SdCard.CardType == CARD_SDHC_SDXC) && ((speedgrade != 0U) || (unitsize != 0U)))
 800792a:	687b      	ldr	r3, [r7, #4]
 800792c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800792e:	2b01      	cmp	r3, #1
 8007930:	d10a      	bne.n	8007948 <HAL_SD_Init+0x90>
 8007932:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007934:	2b00      	cmp	r3, #0
 8007936:	d102      	bne.n	800793e <HAL_SD_Init+0x86>
 8007938:	6a3b      	ldr	r3, [r7, #32]
 800793a:	2b00      	cmp	r3, #0
 800793c:	d004      	beq.n	8007948 <HAL_SD_Init+0x90>
  {
    hsd->SdCard.CardSpeed = CARD_ULTRA_HIGH_SPEED;
 800793e:	687b      	ldr	r3, [r7, #4]
 8007940:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007944:	65da      	str	r2, [r3, #92]	; 0x5c
 8007946:	e00b      	b.n	8007960 <HAL_SD_Init+0xa8>
  }
  else
  {
    if (hsd->SdCard.CardType == CARD_SDHC_SDXC)
 8007948:	687b      	ldr	r3, [r7, #4]
 800794a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800794c:	2b01      	cmp	r3, #1
 800794e:	d104      	bne.n	800795a <HAL_SD_Init+0xa2>
    {
      hsd->SdCard.CardSpeed  = CARD_HIGH_SPEED;
 8007950:	687b      	ldr	r3, [r7, #4]
 8007952:	f44f 7280 	mov.w	r2, #256	; 0x100
 8007956:	65da      	str	r2, [r3, #92]	; 0x5c
 8007958:	e002      	b.n	8007960 <HAL_SD_Init+0xa8>
    }
    else
    {
      hsd->SdCard.CardSpeed  = CARD_NORMAL_SPEED;
 800795a:	687b      	ldr	r3, [r7, #4]
 800795c:	2200      	movs	r2, #0
 800795e:	65da      	str	r2, [r3, #92]	; 0x5c
    }

  }
  /* Configure the bus wide */
  if (HAL_SD_ConfigWideBusOperation(hsd, hsd->Init.BusWide) != HAL_OK)
 8007960:	687b      	ldr	r3, [r7, #4]
 8007962:	68db      	ldr	r3, [r3, #12]
 8007964:	4619      	mov	r1, r3
 8007966:	6878      	ldr	r0, [r7, #4]
 8007968:	f000 fcb4 	bl	80082d4 <HAL_SD_ConfigWideBusOperation>
 800796c:	4603      	mov	r3, r0
 800796e:	2b00      	cmp	r3, #0
 8007970:	d001      	beq.n	8007976 <HAL_SD_Init+0xbe>
  {
    return HAL_ERROR;
 8007972:	2301      	movs	r3, #1
 8007974:	e026      	b.n	80079c4 <HAL_SD_Init+0x10c>
  }

  /* Verify that SD card is ready to use after Initialization */
  tickstart = HAL_GetTick();
 8007976:	f7f9 fee5 	bl	8001744 <HAL_GetTick>
 800797a:	61f8      	str	r0, [r7, #28]
  while ((HAL_SD_GetCardState(hsd) != HAL_SD_CARD_TRANSFER))
 800797c:	e011      	b.n	80079a2 <HAL_SD_Init+0xea>
  {
    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800797e:	f7f9 fee1 	bl	8001744 <HAL_GetTick>
 8007982:	4602      	mov	r2, r0
 8007984:	69fb      	ldr	r3, [r7, #28]
 8007986:	1ad3      	subs	r3, r2, r3
 8007988:	f1b3 3fff 	cmp.w	r3, #4294967295
 800798c:	d109      	bne.n	80079a2 <HAL_SD_Init+0xea>
    {
      hsd->ErrorCode = HAL_SD_ERROR_TIMEOUT;
 800798e:	687b      	ldr	r3, [r7, #4]
 8007990:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8007994:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8007996:	687b      	ldr	r3, [r7, #4]
 8007998:	2201      	movs	r2, #1
 800799a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_TIMEOUT;
 800799e:	2303      	movs	r3, #3
 80079a0:	e010      	b.n	80079c4 <HAL_SD_Init+0x10c>
  while ((HAL_SD_GetCardState(hsd) != HAL_SD_CARD_TRANSFER))
 80079a2:	6878      	ldr	r0, [r7, #4]
 80079a4:	f000 fdaa 	bl	80084fc <HAL_SD_GetCardState>
 80079a8:	4603      	mov	r3, r0
 80079aa:	2b04      	cmp	r3, #4
 80079ac:	d1e7      	bne.n	800797e <HAL_SD_Init+0xc6>
    }
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 80079ae:	687b      	ldr	r3, [r7, #4]
 80079b0:	2200      	movs	r2, #0
 80079b2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 80079b4:	687b      	ldr	r3, [r7, #4]
 80079b6:	2200      	movs	r2, #0
 80079b8:	631a      	str	r2, [r3, #48]	; 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 80079ba:	687b      	ldr	r3, [r7, #4]
 80079bc:	2201      	movs	r2, #1
 80079be:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 80079c2:	2300      	movs	r3, #0
}
 80079c4:	4618      	mov	r0, r3
 80079c6:	3728      	adds	r7, #40	; 0x28
 80079c8:	46bd      	mov	sp, r7
 80079ca:	bd80      	pop	{r7, pc}

080079cc <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 80079cc:	b5b0      	push	{r4, r5, r7, lr}
 80079ce:	b08e      	sub	sp, #56	; 0x38
 80079d0:	af04      	add	r7, sp, #16
 80079d2:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  SD_InitTypeDef Init;
  uint32_t sdmmc_clk;

  /* Default SDMMC peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 80079d4:	2300      	movs	r3, #0
 80079d6:	60bb      	str	r3, [r7, #8]
  Init.ClockPowerSave      = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 80079d8:	2300      	movs	r3, #0
 80079da:	60fb      	str	r3, [r7, #12]
  Init.BusWide             = SDMMC_BUS_WIDE_1B;
 80079dc:	2300      	movs	r3, #0
 80079de:	613b      	str	r3, [r7, #16]
  Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 80079e0:	2300      	movs	r3, #0
 80079e2:	617b      	str	r3, [r7, #20]

  /* Init Clock should be less or equal to 400Khz*/
  sdmmc_clk     = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC);
 80079e4:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 80079e8:	f7fe fcc2 	bl	8006370 <HAL_RCCEx_GetPeriphCLKFreq>
 80079ec:	6278      	str	r0, [r7, #36]	; 0x24
  if (sdmmc_clk == 0U)
 80079ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80079f0:	2b00      	cmp	r3, #0
 80079f2:	d109      	bne.n	8007a08 <HAL_SD_InitCard+0x3c>
  {
    hsd->State = HAL_SD_STATE_READY;
 80079f4:	687b      	ldr	r3, [r7, #4]
 80079f6:	2201      	movs	r2, #1
 80079f8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode = SDMMC_ERROR_INVALID_PARAMETER;
 80079fc:	687b      	ldr	r3, [r7, #4]
 80079fe:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8007a02:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8007a04:	2301      	movs	r3, #1
 8007a06:	e079      	b.n	8007afc <HAL_SD_InitCard+0x130>
  }
  Init.ClockDiv = sdmmc_clk / (2U * SD_INIT_FREQ);
 8007a08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a0a:	0a1b      	lsrs	r3, r3, #8
 8007a0c:	4a3d      	ldr	r2, [pc, #244]	; (8007b04 <HAL_SD_InitCard+0x138>)
 8007a0e:	fba2 2303 	umull	r2, r3, r2, r3
 8007a12:	091b      	lsrs	r3, r3, #4
 8007a14:	61bb      	str	r3, [r7, #24]

#if (USE_SD_TRANSCEIVER != 0U)
  Init.TranceiverPresent = hsd->Init.TranceiverPresent;
 8007a16:	687b      	ldr	r3, [r7, #4]
 8007a18:	699b      	ldr	r3, [r3, #24]
 8007a1a:	61fb      	str	r3, [r7, #28]

  if (hsd->Init.TranceiverPresent == SDMMC_TRANSCEIVER_PRESENT)
 8007a1c:	687b      	ldr	r3, [r7, #4]
 8007a1e:	699b      	ldr	r3, [r3, #24]
 8007a20:	2b02      	cmp	r3, #2
 8007a22:	d107      	bne.n	8007a34 <HAL_SD_InitCard+0x68>
  {
    /* Set Transceiver polarity */
    hsd->Instance->POWER |= SDMMC_POWER_DIRPOL;
 8007a24:	687b      	ldr	r3, [r7, #4]
 8007a26:	681b      	ldr	r3, [r3, #0]
 8007a28:	681a      	ldr	r2, [r3, #0]
 8007a2a:	687b      	ldr	r3, [r7, #4]
 8007a2c:	681b      	ldr	r3, [r3, #0]
 8007a2e:	f042 0210 	orr.w	r2, r2, #16
 8007a32:	601a      	str	r2, [r3, #0]
  /* Set Transceiver polarity */
  hsd->Instance->POWER |= SDMMC_POWER_DIRPOL;
#endif /* USE_SD_TRANSCEIVER  */

  /* Initialize SDMMC peripheral interface with default configuration */
  (void)SDMMC_Init(hsd->Instance, Init);
 8007a34:	687b      	ldr	r3, [r7, #4]
 8007a36:	681d      	ldr	r5, [r3, #0]
 8007a38:	466c      	mov	r4, sp
 8007a3a:	f107 0314 	add.w	r3, r7, #20
 8007a3e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8007a42:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8007a46:	f107 0308 	add.w	r3, r7, #8
 8007a4a:	cb0e      	ldmia	r3, {r1, r2, r3}
 8007a4c:	4628      	mov	r0, r5
 8007a4e:	f002 ffcd 	bl	800a9ec <SDMMC_Init>

  /* Set Power State to ON */
  (void)SDMMC_PowerState_ON(hsd->Instance);
 8007a52:	687b      	ldr	r3, [r7, #4]
 8007a54:	681b      	ldr	r3, [r3, #0]
 8007a56:	4618      	mov	r0, r3
 8007a58:	f002 ffff 	bl	800aa5a <SDMMC_PowerState_ON>

  /* wait 74 Cycles: required power up waiting time before starting
     the SD initialization sequence */
  sdmmc_clk = sdmmc_clk / (2U * Init.ClockDiv);
 8007a5c:	69bb      	ldr	r3, [r7, #24]
 8007a5e:	005b      	lsls	r3, r3, #1
 8007a60:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007a62:	fbb2 f3f3 	udiv	r3, r2, r3
 8007a66:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_Delay(1U + (74U * 1000U / (sdmmc_clk)));
 8007a68:	4a27      	ldr	r2, [pc, #156]	; (8007b08 <HAL_SD_InitCard+0x13c>)
 8007a6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a6c:	fbb2 f3f3 	udiv	r3, r2, r3
 8007a70:	3301      	adds	r3, #1
 8007a72:	4618      	mov	r0, r3
 8007a74:	f7f9 fe72 	bl	800175c <HAL_Delay>

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 8007a78:	6878      	ldr	r0, [r7, #4]
 8007a7a:	f000 fe1b 	bl	80086b4 <SD_PowerON>
 8007a7e:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 8007a80:	6a3b      	ldr	r3, [r7, #32]
 8007a82:	2b00      	cmp	r3, #0
 8007a84:	d00b      	beq.n	8007a9e <HAL_SD_InitCard+0xd2>
  {
    hsd->State = HAL_SD_STATE_READY;
 8007a86:	687b      	ldr	r3, [r7, #4]
 8007a88:	2201      	movs	r2, #1
 8007a8a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8007a8e:	687b      	ldr	r3, [r7, #4]
 8007a90:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007a92:	6a3b      	ldr	r3, [r7, #32]
 8007a94:	431a      	orrs	r2, r3
 8007a96:	687b      	ldr	r3, [r7, #4]
 8007a98:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8007a9a:	2301      	movs	r3, #1
 8007a9c:	e02e      	b.n	8007afc <HAL_SD_InitCard+0x130>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 8007a9e:	6878      	ldr	r0, [r7, #4]
 8007aa0:	f000 fd4c 	bl	800853c <SD_InitCard>
 8007aa4:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 8007aa6:	6a3b      	ldr	r3, [r7, #32]
 8007aa8:	2b00      	cmp	r3, #0
 8007aaa:	d00b      	beq.n	8007ac4 <HAL_SD_InitCard+0xf8>
  {
    hsd->State = HAL_SD_STATE_READY;
 8007aac:	687b      	ldr	r3, [r7, #4]
 8007aae:	2201      	movs	r2, #1
 8007ab0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8007ab4:	687b      	ldr	r3, [r7, #4]
 8007ab6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007ab8:	6a3b      	ldr	r3, [r7, #32]
 8007aba:	431a      	orrs	r2, r3
 8007abc:	687b      	ldr	r3, [r7, #4]
 8007abe:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8007ac0:	2301      	movs	r3, #1
 8007ac2:	e01b      	b.n	8007afc <HAL_SD_InitCard+0x130>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8007ac4:	687b      	ldr	r3, [r7, #4]
 8007ac6:	681b      	ldr	r3, [r3, #0]
 8007ac8:	f44f 7100 	mov.w	r1, #512	; 0x200
 8007acc:	4618      	mov	r0, r3
 8007ace:	f003 f859 	bl	800ab84 <SDMMC_CmdBlockLength>
 8007ad2:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 8007ad4:	6a3b      	ldr	r3, [r7, #32]
 8007ad6:	2b00      	cmp	r3, #0
 8007ad8:	d00f      	beq.n	8007afa <HAL_SD_InitCard+0x12e>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8007ada:	687b      	ldr	r3, [r7, #4]
 8007adc:	681b      	ldr	r3, [r3, #0]
 8007ade:	4a0b      	ldr	r2, [pc, #44]	; (8007b0c <HAL_SD_InitCard+0x140>)
 8007ae0:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 8007ae2:	687b      	ldr	r3, [r7, #4]
 8007ae4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007ae6:	6a3b      	ldr	r3, [r7, #32]
 8007ae8:	431a      	orrs	r2, r3
 8007aea:	687b      	ldr	r3, [r7, #4]
 8007aec:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8007aee:	687b      	ldr	r3, [r7, #4]
 8007af0:	2201      	movs	r2, #1
 8007af2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8007af6:	2301      	movs	r3, #1
 8007af8:	e000      	b.n	8007afc <HAL_SD_InitCard+0x130>
  }

  return HAL_OK;
 8007afa:	2300      	movs	r3, #0
}
 8007afc:	4618      	mov	r0, r3
 8007afe:	3728      	adds	r7, #40	; 0x28
 8007b00:	46bd      	mov	sp, r7
 8007b02:	bdb0      	pop	{r4, r5, r7, pc}
 8007b04:	014f8b59 	.word	0x014f8b59
 8007b08:	00012110 	.word	0x00012110
 8007b0c:	1fe00fff 	.word	0x1fe00fff

08007b10 <HAL_SD_ReadBlocks_DMA>:
  * @param  NumberOfBlocks: Number of blocks to read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd,
                                        uint32_t NumberOfBlocks)
{
 8007b10:	b580      	push	{r7, lr}
 8007b12:	b08c      	sub	sp, #48	; 0x30
 8007b14:	af00      	add	r7, sp, #0
 8007b16:	60f8      	str	r0, [r7, #12]
 8007b18:	60b9      	str	r1, [r7, #8]
 8007b1a:	607a      	str	r2, [r7, #4]
 8007b1c:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 8007b1e:	687b      	ldr	r3, [r7, #4]
 8007b20:	62bb      	str	r3, [r7, #40]	; 0x28

  if (NULL == pData)
 8007b22:	68bb      	ldr	r3, [r7, #8]
 8007b24:	2b00      	cmp	r3, #0
 8007b26:	d107      	bne.n	8007b38 <HAL_SD_ReadBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8007b28:	68fb      	ldr	r3, [r7, #12]
 8007b2a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007b2c:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8007b30:	68fb      	ldr	r3, [r7, #12]
 8007b32:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8007b34:	2301      	movs	r3, #1
 8007b36:	e08d      	b.n	8007c54 <HAL_SD_ReadBlocks_DMA+0x144>
  }

  if (hsd->State == HAL_SD_STATE_READY)
 8007b38:	68fb      	ldr	r3, [r7, #12]
 8007b3a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8007b3e:	b2db      	uxtb	r3, r3
 8007b40:	2b01      	cmp	r3, #1
 8007b42:	f040 8086 	bne.w	8007c52 <HAL_SD_ReadBlocks_DMA+0x142>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8007b46:	68fb      	ldr	r3, [r7, #12]
 8007b48:	2200      	movs	r2, #0
 8007b4a:	639a      	str	r2, [r3, #56]	; 0x38

    if ((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8007b4c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007b4e:	683b      	ldr	r3, [r7, #0]
 8007b50:	441a      	add	r2, r3
 8007b52:	68fb      	ldr	r3, [r7, #12]
 8007b54:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007b56:	429a      	cmp	r2, r3
 8007b58:	d907      	bls.n	8007b6a <HAL_SD_ReadBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8007b5a:	68fb      	ldr	r3, [r7, #12]
 8007b5c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007b5e:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8007b62:	68fb      	ldr	r3, [r7, #12]
 8007b64:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 8007b66:	2301      	movs	r3, #1
 8007b68:	e074      	b.n	8007c54 <HAL_SD_ReadBlocks_DMA+0x144>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8007b6a:	68fb      	ldr	r3, [r7, #12]
 8007b6c:	2203      	movs	r2, #3
 8007b6e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8007b72:	68fb      	ldr	r3, [r7, #12]
 8007b74:	681b      	ldr	r3, [r3, #0]
 8007b76:	2200      	movs	r2, #0
 8007b78:	62da      	str	r2, [r3, #44]	; 0x2c

    hsd->pRxBuffPtr = pData;
 8007b7a:	68fb      	ldr	r3, [r7, #12]
 8007b7c:	68ba      	ldr	r2, [r7, #8]
 8007b7e:	629a      	str	r2, [r3, #40]	; 0x28
    hsd->RxXferSize = BLOCKSIZE * NumberOfBlocks;
 8007b80:	683b      	ldr	r3, [r7, #0]
 8007b82:	025a      	lsls	r2, r3, #9
 8007b84:	68fb      	ldr	r3, [r7, #12]
 8007b86:	62da      	str	r2, [r3, #44]	; 0x2c

    if (hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8007b88:	68fb      	ldr	r3, [r7, #12]
 8007b8a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007b8c:	2b01      	cmp	r3, #1
 8007b8e:	d002      	beq.n	8007b96 <HAL_SD_ReadBlocks_DMA+0x86>
    {
      add *= 512U;
 8007b90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007b92:	025b      	lsls	r3, r3, #9
 8007b94:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8007b96:	f04f 33ff 	mov.w	r3, #4294967295
 8007b9a:	613b      	str	r3, [r7, #16]
    config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 8007b9c:	683b      	ldr	r3, [r7, #0]
 8007b9e:	025b      	lsls	r3, r3, #9
 8007ba0:	617b      	str	r3, [r7, #20]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 8007ba2:	2390      	movs	r3, #144	; 0x90
 8007ba4:	61bb      	str	r3, [r7, #24]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 8007ba6:	2302      	movs	r3, #2
 8007ba8:	61fb      	str	r3, [r7, #28]
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8007baa:	2300      	movs	r3, #0
 8007bac:	623b      	str	r3, [r7, #32]
    config.DPSM          = SDMMC_DPSM_DISABLE;
 8007bae:	2300      	movs	r3, #0
 8007bb0:	627b      	str	r3, [r7, #36]	; 0x24
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 8007bb2:	68fb      	ldr	r3, [r7, #12]
 8007bb4:	681b      	ldr	r3, [r3, #0]
 8007bb6:	f107 0210 	add.w	r2, r7, #16
 8007bba:	4611      	mov	r1, r2
 8007bbc:	4618      	mov	r0, r3
 8007bbe:	f002 ffb5 	bl	800ab2c <SDMMC_ConfigData>

    __SDMMC_CMDTRANS_ENABLE(hsd->Instance);
 8007bc2:	68fb      	ldr	r3, [r7, #12]
 8007bc4:	681b      	ldr	r3, [r3, #0]
 8007bc6:	68da      	ldr	r2, [r3, #12]
 8007bc8:	68fb      	ldr	r3, [r7, #12]
 8007bca:	681b      	ldr	r3, [r3, #0]
 8007bcc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007bd0:	60da      	str	r2, [r3, #12]
    hsd->Instance->IDMABASE0 = (uint32_t) pData ;
 8007bd2:	68fb      	ldr	r3, [r7, #12]
 8007bd4:	681b      	ldr	r3, [r3, #0]
 8007bd6:	68ba      	ldr	r2, [r7, #8]
 8007bd8:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->Instance->IDMACTRL  = SDMMC_ENABLE_IDMA_SINGLE_BUFF;
 8007bda:	68fb      	ldr	r3, [r7, #12]
 8007bdc:	681b      	ldr	r3, [r3, #0]
 8007bde:	2201      	movs	r2, #1
 8007be0:	651a      	str	r2, [r3, #80]	; 0x50

    /* Read Blocks in DMA mode */
    if (NumberOfBlocks > 1U)
 8007be2:	683b      	ldr	r3, [r7, #0]
 8007be4:	2b01      	cmp	r3, #1
 8007be6:	d90a      	bls.n	8007bfe <HAL_SD_ReadBlocks_DMA+0xee>
    {
      hsd->Context = (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 8007be8:	68fb      	ldr	r3, [r7, #12]
 8007bea:	2282      	movs	r2, #130	; 0x82
 8007bec:	631a      	str	r2, [r3, #48]	; 0x30

      /* Read Multi Block command */
      errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 8007bee:	68fb      	ldr	r3, [r7, #12]
 8007bf0:	681b      	ldr	r3, [r3, #0]
 8007bf2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007bf4:	4618      	mov	r0, r3
 8007bf6:	f003 f80b 	bl	800ac10 <SDMMC_CmdReadMultiBlock>
 8007bfa:	62f8      	str	r0, [r7, #44]	; 0x2c
 8007bfc:	e009      	b.n	8007c12 <HAL_SD_ReadBlocks_DMA+0x102>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_READ_SINGLE_BLOCK | SD_CONTEXT_DMA);
 8007bfe:	68fb      	ldr	r3, [r7, #12]
 8007c00:	2281      	movs	r2, #129	; 0x81
 8007c02:	631a      	str	r2, [r3, #48]	; 0x30

      /* Read Single Block command */
      errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 8007c04:	68fb      	ldr	r3, [r7, #12]
 8007c06:	681b      	ldr	r3, [r3, #0]
 8007c08:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007c0a:	4618      	mov	r0, r3
 8007c0c:	f002 ffdd 	bl	800abca <SDMMC_CmdReadSingleBlock>
 8007c10:	62f8      	str	r0, [r7, #44]	; 0x2c
    }
    if (errorstate != HAL_SD_ERROR_NONE)
 8007c12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007c14:	2b00      	cmp	r3, #0
 8007c16:	d012      	beq.n	8007c3e <HAL_SD_ReadBlocks_DMA+0x12e>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8007c18:	68fb      	ldr	r3, [r7, #12]
 8007c1a:	681b      	ldr	r3, [r3, #0]
 8007c1c:	4a0f      	ldr	r2, [pc, #60]	; (8007c5c <HAL_SD_ReadBlocks_DMA+0x14c>)
 8007c1e:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8007c20:	68fb      	ldr	r3, [r7, #12]
 8007c22:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007c24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007c26:	431a      	orrs	r2, r3
 8007c28:	68fb      	ldr	r3, [r7, #12]
 8007c2a:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8007c2c:	68fb      	ldr	r3, [r7, #12]
 8007c2e:	2201      	movs	r2, #1
 8007c30:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8007c34:	68fb      	ldr	r3, [r7, #12]
 8007c36:	2200      	movs	r2, #0
 8007c38:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8007c3a:	2301      	movs	r3, #1
 8007c3c:	e00a      	b.n	8007c54 <HAL_SD_ReadBlocks_DMA+0x144>
    }

    /* Enable transfer interrupts */
    __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_RXOVERR | SDMMC_IT_DATAEND));
 8007c3e:	68fb      	ldr	r3, [r7, #12]
 8007c40:	681b      	ldr	r3, [r3, #0]
 8007c42:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007c44:	68fb      	ldr	r3, [r7, #12]
 8007c46:	681b      	ldr	r3, [r3, #0]
 8007c48:	f442 7295 	orr.w	r2, r2, #298	; 0x12a
 8007c4c:	63da      	str	r2, [r3, #60]	; 0x3c


    return HAL_OK;
 8007c4e:	2300      	movs	r3, #0
 8007c50:	e000      	b.n	8007c54 <HAL_SD_ReadBlocks_DMA+0x144>
  }
  else
  {
    return HAL_BUSY;
 8007c52:	2302      	movs	r3, #2
  }
}
 8007c54:	4618      	mov	r0, r3
 8007c56:	3730      	adds	r7, #48	; 0x30
 8007c58:	46bd      	mov	sp, r7
 8007c5a:	bd80      	pop	{r7, pc}
 8007c5c:	1fe00fff 	.word	0x1fe00fff

08007c60 <HAL_SD_WriteBlocks_DMA>:
  * @param  NumberOfBlocks: Number of blocks to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd,
                                         uint32_t NumberOfBlocks)
{
 8007c60:	b580      	push	{r7, lr}
 8007c62:	b08c      	sub	sp, #48	; 0x30
 8007c64:	af00      	add	r7, sp, #0
 8007c66:	60f8      	str	r0, [r7, #12]
 8007c68:	60b9      	str	r1, [r7, #8]
 8007c6a:	607a      	str	r2, [r7, #4]
 8007c6c:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 8007c6e:	687b      	ldr	r3, [r7, #4]
 8007c70:	62bb      	str	r3, [r7, #40]	; 0x28

  if (NULL == pData)
 8007c72:	68bb      	ldr	r3, [r7, #8]
 8007c74:	2b00      	cmp	r3, #0
 8007c76:	d107      	bne.n	8007c88 <HAL_SD_WriteBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8007c78:	68fb      	ldr	r3, [r7, #12]
 8007c7a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007c7c:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8007c80:	68fb      	ldr	r3, [r7, #12]
 8007c82:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8007c84:	2301      	movs	r3, #1
 8007c86:	e08d      	b.n	8007da4 <HAL_SD_WriteBlocks_DMA+0x144>
  }

  if (hsd->State == HAL_SD_STATE_READY)
 8007c88:	68fb      	ldr	r3, [r7, #12]
 8007c8a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8007c8e:	b2db      	uxtb	r3, r3
 8007c90:	2b01      	cmp	r3, #1
 8007c92:	f040 8086 	bne.w	8007da2 <HAL_SD_WriteBlocks_DMA+0x142>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8007c96:	68fb      	ldr	r3, [r7, #12]
 8007c98:	2200      	movs	r2, #0
 8007c9a:	639a      	str	r2, [r3, #56]	; 0x38

    if ((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8007c9c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007c9e:	683b      	ldr	r3, [r7, #0]
 8007ca0:	441a      	add	r2, r3
 8007ca2:	68fb      	ldr	r3, [r7, #12]
 8007ca4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007ca6:	429a      	cmp	r2, r3
 8007ca8:	d907      	bls.n	8007cba <HAL_SD_WriteBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8007caa:	68fb      	ldr	r3, [r7, #12]
 8007cac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007cae:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8007cb2:	68fb      	ldr	r3, [r7, #12]
 8007cb4:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 8007cb6:	2301      	movs	r3, #1
 8007cb8:	e074      	b.n	8007da4 <HAL_SD_WriteBlocks_DMA+0x144>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8007cba:	68fb      	ldr	r3, [r7, #12]
 8007cbc:	2203      	movs	r2, #3
 8007cbe:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8007cc2:	68fb      	ldr	r3, [r7, #12]
 8007cc4:	681b      	ldr	r3, [r3, #0]
 8007cc6:	2200      	movs	r2, #0
 8007cc8:	62da      	str	r2, [r3, #44]	; 0x2c

    hsd->pTxBuffPtr = pData;
 8007cca:	68fb      	ldr	r3, [r7, #12]
 8007ccc:	68ba      	ldr	r2, [r7, #8]
 8007cce:	621a      	str	r2, [r3, #32]
    hsd->TxXferSize = BLOCKSIZE * NumberOfBlocks;
 8007cd0:	683b      	ldr	r3, [r7, #0]
 8007cd2:	025a      	lsls	r2, r3, #9
 8007cd4:	68fb      	ldr	r3, [r7, #12]
 8007cd6:	625a      	str	r2, [r3, #36]	; 0x24

    if (hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8007cd8:	68fb      	ldr	r3, [r7, #12]
 8007cda:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007cdc:	2b01      	cmp	r3, #1
 8007cde:	d002      	beq.n	8007ce6 <HAL_SD_WriteBlocks_DMA+0x86>
    {
      add *= 512U;
 8007ce0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007ce2:	025b      	lsls	r3, r3, #9
 8007ce4:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8007ce6:	f04f 33ff 	mov.w	r3, #4294967295
 8007cea:	613b      	str	r3, [r7, #16]
    config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 8007cec:	683b      	ldr	r3, [r7, #0]
 8007cee:	025b      	lsls	r3, r3, #9
 8007cf0:	617b      	str	r3, [r7, #20]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 8007cf2:	2390      	movs	r3, #144	; 0x90
 8007cf4:	61bb      	str	r3, [r7, #24]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_CARD;
 8007cf6:	2300      	movs	r3, #0
 8007cf8:	61fb      	str	r3, [r7, #28]
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8007cfa:	2300      	movs	r3, #0
 8007cfc:	623b      	str	r3, [r7, #32]
    config.DPSM          = SDMMC_DPSM_DISABLE;
 8007cfe:	2300      	movs	r3, #0
 8007d00:	627b      	str	r3, [r7, #36]	; 0x24
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 8007d02:	68fb      	ldr	r3, [r7, #12]
 8007d04:	681b      	ldr	r3, [r3, #0]
 8007d06:	f107 0210 	add.w	r2, r7, #16
 8007d0a:	4611      	mov	r1, r2
 8007d0c:	4618      	mov	r0, r3
 8007d0e:	f002 ff0d 	bl	800ab2c <SDMMC_ConfigData>


    __SDMMC_CMDTRANS_ENABLE(hsd->Instance);
 8007d12:	68fb      	ldr	r3, [r7, #12]
 8007d14:	681b      	ldr	r3, [r3, #0]
 8007d16:	68da      	ldr	r2, [r3, #12]
 8007d18:	68fb      	ldr	r3, [r7, #12]
 8007d1a:	681b      	ldr	r3, [r3, #0]
 8007d1c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007d20:	60da      	str	r2, [r3, #12]

    hsd->Instance->IDMABASE0 = (uint32_t) pData ;
 8007d22:	68fb      	ldr	r3, [r7, #12]
 8007d24:	681b      	ldr	r3, [r3, #0]
 8007d26:	68ba      	ldr	r2, [r7, #8]
 8007d28:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->Instance->IDMACTRL  = SDMMC_ENABLE_IDMA_SINGLE_BUFF;
 8007d2a:	68fb      	ldr	r3, [r7, #12]
 8007d2c:	681b      	ldr	r3, [r3, #0]
 8007d2e:	2201      	movs	r2, #1
 8007d30:	651a      	str	r2, [r3, #80]	; 0x50

    /* Write Blocks in Polling mode */
    if (NumberOfBlocks > 1U)
 8007d32:	683b      	ldr	r3, [r7, #0]
 8007d34:	2b01      	cmp	r3, #1
 8007d36:	d90a      	bls.n	8007d4e <HAL_SD_WriteBlocks_DMA+0xee>
    {
      hsd->Context = (SD_CONTEXT_WRITE_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 8007d38:	68fb      	ldr	r3, [r7, #12]
 8007d3a:	22a0      	movs	r2, #160	; 0xa0
 8007d3c:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 8007d3e:	68fb      	ldr	r3, [r7, #12]
 8007d40:	681b      	ldr	r3, [r3, #0]
 8007d42:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007d44:	4618      	mov	r0, r3
 8007d46:	f002 ffa9 	bl	800ac9c <SDMMC_CmdWriteMultiBlock>
 8007d4a:	62f8      	str	r0, [r7, #44]	; 0x2c
 8007d4c:	e009      	b.n	8007d62 <HAL_SD_WriteBlocks_DMA+0x102>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_WRITE_SINGLE_BLOCK | SD_CONTEXT_DMA);
 8007d4e:	68fb      	ldr	r3, [r7, #12]
 8007d50:	2290      	movs	r2, #144	; 0x90
 8007d52:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 8007d54:	68fb      	ldr	r3, [r7, #12]
 8007d56:	681b      	ldr	r3, [r3, #0]
 8007d58:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007d5a:	4618      	mov	r0, r3
 8007d5c:	f002 ff7b 	bl	800ac56 <SDMMC_CmdWriteSingleBlock>
 8007d60:	62f8      	str	r0, [r7, #44]	; 0x2c
    }
    if (errorstate != HAL_SD_ERROR_NONE)
 8007d62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007d64:	2b00      	cmp	r3, #0
 8007d66:	d012      	beq.n	8007d8e <HAL_SD_WriteBlocks_DMA+0x12e>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8007d68:	68fb      	ldr	r3, [r7, #12]
 8007d6a:	681b      	ldr	r3, [r3, #0]
 8007d6c:	4a0f      	ldr	r2, [pc, #60]	; (8007dac <HAL_SD_WriteBlocks_DMA+0x14c>)
 8007d6e:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8007d70:	68fb      	ldr	r3, [r7, #12]
 8007d72:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007d74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007d76:	431a      	orrs	r2, r3
 8007d78:	68fb      	ldr	r3, [r7, #12]
 8007d7a:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8007d7c:	68fb      	ldr	r3, [r7, #12]
 8007d7e:	2201      	movs	r2, #1
 8007d80:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8007d84:	68fb      	ldr	r3, [r7, #12]
 8007d86:	2200      	movs	r2, #0
 8007d88:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8007d8a:	2301      	movs	r3, #1
 8007d8c:	e00a      	b.n	8007da4 <HAL_SD_WriteBlocks_DMA+0x144>
    }

    /* Enable transfer interrupts */
    __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_TXUNDERR | SDMMC_IT_DATAEND));
 8007d8e:	68fb      	ldr	r3, [r7, #12]
 8007d90:	681b      	ldr	r3, [r3, #0]
 8007d92:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007d94:	68fb      	ldr	r3, [r7, #12]
 8007d96:	681b      	ldr	r3, [r3, #0]
 8007d98:	f442 728d 	orr.w	r2, r2, #282	; 0x11a
 8007d9c:	63da      	str	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8007d9e:	2300      	movs	r3, #0
 8007da0:	e000      	b.n	8007da4 <HAL_SD_WriteBlocks_DMA+0x144>
  }
  else
  {
    return HAL_BUSY;
 8007da2:	2302      	movs	r3, #2
  }
}
 8007da4:	4618      	mov	r0, r3
 8007da6:	3730      	adds	r7, #48	; 0x30
 8007da8:	46bd      	mov	sp, r7
 8007daa:	bd80      	pop	{r7, pc}
 8007dac:	1fe00fff 	.word	0x1fe00fff

08007db0 <HAL_SD_DriveTransceiver_1_8V_Callback>:
  * @brief  Enable/Disable the SD Transceiver 1.8V Mode Callback.
  * @param  status: Voltage Switch State
  * @retval None
  */
__weak  void HAL_SD_DriveTransceiver_1_8V_Callback(FlagStatus status)
{
 8007db0:	b480      	push	{r7}
 8007db2:	b083      	sub	sp, #12
 8007db4:	af00      	add	r7, sp, #0
 8007db6:	4603      	mov	r3, r0
 8007db8:	71fb      	strb	r3, [r7, #7]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(status);
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_EnableTransceiver could be implemented in the user file
   */
}
 8007dba:	bf00      	nop
 8007dbc:	370c      	adds	r7, #12
 8007dbe:	46bd      	mov	sp, r7
 8007dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dc4:	4770      	bx	lr
	...

08007dc8 <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 8007dc8:	b480      	push	{r7}
 8007dca:	b083      	sub	sp, #12
 8007dcc:	af00      	add	r7, sp, #0
 8007dce:	6078      	str	r0, [r7, #4]
 8007dd0:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 8007dd2:	687b      	ldr	r3, [r7, #4]
 8007dd4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007dd6:	0f9b      	lsrs	r3, r3, #30
 8007dd8:	b2da      	uxtb	r2, r3
 8007dda:	683b      	ldr	r3, [r7, #0]
 8007ddc:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 8007dde:	687b      	ldr	r3, [r7, #4]
 8007de0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007de2:	0e9b      	lsrs	r3, r3, #26
 8007de4:	b2db      	uxtb	r3, r3
 8007de6:	f003 030f 	and.w	r3, r3, #15
 8007dea:	b2da      	uxtb	r2, r3
 8007dec:	683b      	ldr	r3, [r7, #0]
 8007dee:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 8007df0:	687b      	ldr	r3, [r7, #4]
 8007df2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007df4:	0e1b      	lsrs	r3, r3, #24
 8007df6:	b2db      	uxtb	r3, r3
 8007df8:	f003 0303 	and.w	r3, r3, #3
 8007dfc:	b2da      	uxtb	r2, r3
 8007dfe:	683b      	ldr	r3, [r7, #0]
 8007e00:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 8007e02:	687b      	ldr	r3, [r7, #4]
 8007e04:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007e06:	0c1b      	lsrs	r3, r3, #16
 8007e08:	b2da      	uxtb	r2, r3
 8007e0a:	683b      	ldr	r3, [r7, #0]
 8007e0c:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 8007e0e:	687b      	ldr	r3, [r7, #4]
 8007e10:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007e12:	0a1b      	lsrs	r3, r3, #8
 8007e14:	b2da      	uxtb	r2, r3
 8007e16:	683b      	ldr	r3, [r7, #0]
 8007e18:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 8007e1a:	687b      	ldr	r3, [r7, #4]
 8007e1c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007e1e:	b2da      	uxtb	r2, r3
 8007e20:	683b      	ldr	r3, [r7, #0]
 8007e22:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 8007e24:	687b      	ldr	r3, [r7, #4]
 8007e26:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007e28:	0d1b      	lsrs	r3, r3, #20
 8007e2a:	b29a      	uxth	r2, r3
 8007e2c:	683b      	ldr	r3, [r7, #0]
 8007e2e:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 8007e30:	687b      	ldr	r3, [r7, #4]
 8007e32:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007e34:	0c1b      	lsrs	r3, r3, #16
 8007e36:	b2db      	uxtb	r3, r3
 8007e38:	f003 030f 	and.w	r3, r3, #15
 8007e3c:	b2da      	uxtb	r2, r3
 8007e3e:	683b      	ldr	r3, [r7, #0]
 8007e40:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 8007e42:	687b      	ldr	r3, [r7, #4]
 8007e44:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007e46:	0bdb      	lsrs	r3, r3, #15
 8007e48:	b2db      	uxtb	r3, r3
 8007e4a:	f003 0301 	and.w	r3, r3, #1
 8007e4e:	b2da      	uxtb	r2, r3
 8007e50:	683b      	ldr	r3, [r7, #0]
 8007e52:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 8007e54:	687b      	ldr	r3, [r7, #4]
 8007e56:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007e58:	0b9b      	lsrs	r3, r3, #14
 8007e5a:	b2db      	uxtb	r3, r3
 8007e5c:	f003 0301 	and.w	r3, r3, #1
 8007e60:	b2da      	uxtb	r2, r3
 8007e62:	683b      	ldr	r3, [r7, #0]
 8007e64:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 8007e66:	687b      	ldr	r3, [r7, #4]
 8007e68:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007e6a:	0b5b      	lsrs	r3, r3, #13
 8007e6c:	b2db      	uxtb	r3, r3
 8007e6e:	f003 0301 	and.w	r3, r3, #1
 8007e72:	b2da      	uxtb	r2, r3
 8007e74:	683b      	ldr	r3, [r7, #0]
 8007e76:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 8007e78:	687b      	ldr	r3, [r7, #4]
 8007e7a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007e7c:	0b1b      	lsrs	r3, r3, #12
 8007e7e:	b2db      	uxtb	r3, r3
 8007e80:	f003 0301 	and.w	r3, r3, #1
 8007e84:	b2da      	uxtb	r2, r3
 8007e86:	683b      	ldr	r3, [r7, #0]
 8007e88:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 8007e8a:	683b      	ldr	r3, [r7, #0]
 8007e8c:	2200      	movs	r2, #0
 8007e8e:	735a      	strb	r2, [r3, #13]

  if (hsd->SdCard.CardType == CARD_SDSC)
 8007e90:	687b      	ldr	r3, [r7, #4]
 8007e92:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007e94:	2b00      	cmp	r3, #0
 8007e96:	d163      	bne.n	8007f60 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 8007e98:	687b      	ldr	r3, [r7, #4]
 8007e9a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007e9c:	009a      	lsls	r2, r3, #2
 8007e9e:	f640 73fc 	movw	r3, #4092	; 0xffc
 8007ea2:	4013      	ands	r3, r2
 8007ea4:	687a      	ldr	r2, [r7, #4]
 8007ea6:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8007ea8:	0f92      	lsrs	r2, r2, #30
 8007eaa:	431a      	orrs	r2, r3
 8007eac:	683b      	ldr	r3, [r7, #0]
 8007eae:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 8007eb0:	687b      	ldr	r3, [r7, #4]
 8007eb2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007eb4:	0edb      	lsrs	r3, r3, #27
 8007eb6:	b2db      	uxtb	r3, r3
 8007eb8:	f003 0307 	and.w	r3, r3, #7
 8007ebc:	b2da      	uxtb	r2, r3
 8007ebe:	683b      	ldr	r3, [r7, #0]
 8007ec0:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 8007ec2:	687b      	ldr	r3, [r7, #4]
 8007ec4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007ec6:	0e1b      	lsrs	r3, r3, #24
 8007ec8:	b2db      	uxtb	r3, r3
 8007eca:	f003 0307 	and.w	r3, r3, #7
 8007ece:	b2da      	uxtb	r2, r3
 8007ed0:	683b      	ldr	r3, [r7, #0]
 8007ed2:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 8007ed4:	687b      	ldr	r3, [r7, #4]
 8007ed6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007ed8:	0d5b      	lsrs	r3, r3, #21
 8007eda:	b2db      	uxtb	r3, r3
 8007edc:	f003 0307 	and.w	r3, r3, #7
 8007ee0:	b2da      	uxtb	r2, r3
 8007ee2:	683b      	ldr	r3, [r7, #0]
 8007ee4:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 8007ee6:	687b      	ldr	r3, [r7, #4]
 8007ee8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007eea:	0c9b      	lsrs	r3, r3, #18
 8007eec:	b2db      	uxtb	r3, r3
 8007eee:	f003 0307 	and.w	r3, r3, #7
 8007ef2:	b2da      	uxtb	r2, r3
 8007ef4:	683b      	ldr	r3, [r7, #0]
 8007ef6:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 8007ef8:	687b      	ldr	r3, [r7, #4]
 8007efa:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007efc:	0bdb      	lsrs	r3, r3, #15
 8007efe:	b2db      	uxtb	r3, r3
 8007f00:	f003 0307 	and.w	r3, r3, #7
 8007f04:	b2da      	uxtb	r2, r3
 8007f06:	683b      	ldr	r3, [r7, #0]
 8007f08:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 8007f0a:	683b      	ldr	r3, [r7, #0]
 8007f0c:	691b      	ldr	r3, [r3, #16]
 8007f0e:	1c5a      	adds	r2, r3, #1
 8007f10:	687b      	ldr	r3, [r7, #4]
 8007f12:	64da      	str	r2, [r3, #76]	; 0x4c
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 8007f14:	683b      	ldr	r3, [r7, #0]
 8007f16:	7e1b      	ldrb	r3, [r3, #24]
 8007f18:	b2db      	uxtb	r3, r3
 8007f1a:	f003 0307 	and.w	r3, r3, #7
 8007f1e:	3302      	adds	r3, #2
 8007f20:	2201      	movs	r2, #1
 8007f22:	fa02 f303 	lsl.w	r3, r2, r3
 8007f26:	687a      	ldr	r2, [r7, #4]
 8007f28:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8007f2a:	fb02 f203 	mul.w	r2, r2, r3
 8007f2e:	687b      	ldr	r3, [r7, #4]
 8007f30:	64da      	str	r2, [r3, #76]	; 0x4c
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 8007f32:	683b      	ldr	r3, [r7, #0]
 8007f34:	7a1b      	ldrb	r3, [r3, #8]
 8007f36:	b2db      	uxtb	r3, r3
 8007f38:	f003 030f 	and.w	r3, r3, #15
 8007f3c:	2201      	movs	r2, #1
 8007f3e:	409a      	lsls	r2, r3
 8007f40:	687b      	ldr	r3, [r7, #4]
 8007f42:	651a      	str	r2, [r3, #80]	; 0x50

    hsd->SdCard.LogBlockNbr = (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 8007f44:	687b      	ldr	r3, [r7, #4]
 8007f46:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007f48:	687a      	ldr	r2, [r7, #4]
 8007f4a:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8007f4c:	0a52      	lsrs	r2, r2, #9
 8007f4e:	fb02 f203 	mul.w	r2, r2, r3
 8007f52:	687b      	ldr	r3, [r7, #4]
 8007f54:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.LogBlockSize = 512U;
 8007f56:	687b      	ldr	r3, [r7, #4]
 8007f58:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007f5c:	659a      	str	r2, [r3, #88]	; 0x58
 8007f5e:	e031      	b.n	8007fc4 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if (hsd->SdCard.CardType == CARD_SDHC_SDXC)
 8007f60:	687b      	ldr	r3, [r7, #4]
 8007f62:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007f64:	2b01      	cmp	r3, #1
 8007f66:	d11d      	bne.n	8007fa4 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 8007f68:	687b      	ldr	r3, [r7, #4]
 8007f6a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007f6c:	041b      	lsls	r3, r3, #16
 8007f6e:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 8007f72:	687b      	ldr	r3, [r7, #4]
 8007f74:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007f76:	0c1b      	lsrs	r3, r3, #16
 8007f78:	431a      	orrs	r2, r3
 8007f7a:	683b      	ldr	r3, [r7, #0]
 8007f7c:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 8007f7e:	683b      	ldr	r3, [r7, #0]
 8007f80:	691b      	ldr	r3, [r3, #16]
 8007f82:	3301      	adds	r3, #1
 8007f84:	029a      	lsls	r2, r3, #10
 8007f86:	687b      	ldr	r3, [r7, #4]
 8007f88:	64da      	str	r2, [r3, #76]	; 0x4c
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 8007f8a:	687b      	ldr	r3, [r7, #4]
 8007f8c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8007f8e:	687b      	ldr	r3, [r7, #4]
 8007f90:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockSize = 512U;
 8007f92:	687b      	ldr	r3, [r7, #4]
 8007f94:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007f98:	651a      	str	r2, [r3, #80]	; 0x50
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 8007f9a:	687b      	ldr	r3, [r7, #4]
 8007f9c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8007f9e:	687b      	ldr	r3, [r7, #4]
 8007fa0:	659a      	str	r2, [r3, #88]	; 0x58
 8007fa2:	e00f      	b.n	8007fc4 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8007fa4:	687b      	ldr	r3, [r7, #4]
 8007fa6:	681b      	ldr	r3, [r3, #0]
 8007fa8:	4a58      	ldr	r2, [pc, #352]	; (800810c <HAL_SD_GetCardCSD+0x344>)
 8007faa:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8007fac:	687b      	ldr	r3, [r7, #4]
 8007fae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007fb0:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8007fb4:	687b      	ldr	r3, [r7, #4]
 8007fb6:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8007fb8:	687b      	ldr	r3, [r7, #4]
 8007fba:	2201      	movs	r2, #1
 8007fbc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8007fc0:	2301      	movs	r3, #1
 8007fc2:	e09d      	b.n	8008100 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 8007fc4:	687b      	ldr	r3, [r7, #4]
 8007fc6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007fc8:	0b9b      	lsrs	r3, r3, #14
 8007fca:	b2db      	uxtb	r3, r3
 8007fcc:	f003 0301 	and.w	r3, r3, #1
 8007fd0:	b2da      	uxtb	r2, r3
 8007fd2:	683b      	ldr	r3, [r7, #0]
 8007fd4:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 8007fd6:	687b      	ldr	r3, [r7, #4]
 8007fd8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007fda:	09db      	lsrs	r3, r3, #7
 8007fdc:	b2db      	uxtb	r3, r3
 8007fde:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007fe2:	b2da      	uxtb	r2, r3
 8007fe4:	683b      	ldr	r3, [r7, #0]
 8007fe6:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 8007fe8:	687b      	ldr	r3, [r7, #4]
 8007fea:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007fec:	b2db      	uxtb	r3, r3
 8007fee:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007ff2:	b2da      	uxtb	r2, r3
 8007ff4:	683b      	ldr	r3, [r7, #0]
 8007ff6:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 8007ff8:	687b      	ldr	r3, [r7, #4]
 8007ffa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007ffc:	0fdb      	lsrs	r3, r3, #31
 8007ffe:	b2da      	uxtb	r2, r3
 8008000:	683b      	ldr	r3, [r7, #0]
 8008002:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 8008004:	687b      	ldr	r3, [r7, #4]
 8008006:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008008:	0f5b      	lsrs	r3, r3, #29
 800800a:	b2db      	uxtb	r3, r3
 800800c:	f003 0303 	and.w	r3, r3, #3
 8008010:	b2da      	uxtb	r2, r3
 8008012:	683b      	ldr	r3, [r7, #0]
 8008014:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 8008016:	687b      	ldr	r3, [r7, #4]
 8008018:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800801a:	0e9b      	lsrs	r3, r3, #26
 800801c:	b2db      	uxtb	r3, r3
 800801e:	f003 0307 	and.w	r3, r3, #7
 8008022:	b2da      	uxtb	r2, r3
 8008024:	683b      	ldr	r3, [r7, #0]
 8008026:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen = (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 8008028:	687b      	ldr	r3, [r7, #4]
 800802a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800802c:	0d9b      	lsrs	r3, r3, #22
 800802e:	b2db      	uxtb	r3, r3
 8008030:	f003 030f 	and.w	r3, r3, #15
 8008034:	b2da      	uxtb	r2, r3
 8008036:	683b      	ldr	r3, [r7, #0]
 8008038:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 800803a:	687b      	ldr	r3, [r7, #4]
 800803c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800803e:	0d5b      	lsrs	r3, r3, #21
 8008040:	b2db      	uxtb	r3, r3
 8008042:	f003 0301 	and.w	r3, r3, #1
 8008046:	b2da      	uxtb	r2, r3
 8008048:	683b      	ldr	r3, [r7, #0]
 800804a:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 800804e:	683b      	ldr	r3, [r7, #0]
 8008050:	2200      	movs	r2, #0
 8008052:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 8008056:	687b      	ldr	r3, [r7, #4]
 8008058:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800805a:	0c1b      	lsrs	r3, r3, #16
 800805c:	b2db      	uxtb	r3, r3
 800805e:	f003 0301 	and.w	r3, r3, #1
 8008062:	b2da      	uxtb	r2, r3
 8008064:	683b      	ldr	r3, [r7, #0]
 8008066:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 800806a:	687b      	ldr	r3, [r7, #4]
 800806c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800806e:	0bdb      	lsrs	r3, r3, #15
 8008070:	b2db      	uxtb	r3, r3
 8008072:	f003 0301 	and.w	r3, r3, #1
 8008076:	b2da      	uxtb	r2, r3
 8008078:	683b      	ldr	r3, [r7, #0]
 800807a:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 800807e:	687b      	ldr	r3, [r7, #4]
 8008080:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008082:	0b9b      	lsrs	r3, r3, #14
 8008084:	b2db      	uxtb	r3, r3
 8008086:	f003 0301 	and.w	r3, r3, #1
 800808a:	b2da      	uxtb	r2, r3
 800808c:	683b      	ldr	r3, [r7, #0]
 800808e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 8008092:	687b      	ldr	r3, [r7, #4]
 8008094:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008096:	0b5b      	lsrs	r3, r3, #13
 8008098:	b2db      	uxtb	r3, r3
 800809a:	f003 0301 	and.w	r3, r3, #1
 800809e:	b2da      	uxtb	r2, r3
 80080a0:	683b      	ldr	r3, [r7, #0]
 80080a2:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 80080a6:	687b      	ldr	r3, [r7, #4]
 80080a8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80080aa:	0b1b      	lsrs	r3, r3, #12
 80080ac:	b2db      	uxtb	r3, r3
 80080ae:	f003 0301 	and.w	r3, r3, #1
 80080b2:	b2da      	uxtb	r2, r3
 80080b4:	683b      	ldr	r3, [r7, #0]
 80080b6:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 80080ba:	687b      	ldr	r3, [r7, #4]
 80080bc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80080be:	0a9b      	lsrs	r3, r3, #10
 80080c0:	b2db      	uxtb	r3, r3
 80080c2:	f003 0303 	and.w	r3, r3, #3
 80080c6:	b2da      	uxtb	r2, r3
 80080c8:	683b      	ldr	r3, [r7, #0]
 80080ca:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC = (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 80080ce:	687b      	ldr	r3, [r7, #4]
 80080d0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80080d2:	0a1b      	lsrs	r3, r3, #8
 80080d4:	b2db      	uxtb	r3, r3
 80080d6:	f003 0303 	and.w	r3, r3, #3
 80080da:	b2da      	uxtb	r2, r3
 80080dc:	683b      	ldr	r3, [r7, #0]
 80080de:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 80080e2:	687b      	ldr	r3, [r7, #4]
 80080e4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80080e6:	085b      	lsrs	r3, r3, #1
 80080e8:	b2db      	uxtb	r3, r3
 80080ea:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80080ee:	b2da      	uxtb	r2, r3
 80080f0:	683b      	ldr	r3, [r7, #0]
 80080f2:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 80080f6:	683b      	ldr	r3, [r7, #0]
 80080f8:	2201      	movs	r2, #1
 80080fa:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 80080fe:	2300      	movs	r3, #0
}
 8008100:	4618      	mov	r0, r3
 8008102:	370c      	adds	r7, #12
 8008104:	46bd      	mov	sp, r7
 8008106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800810a:	4770      	bx	lr
 800810c:	1fe00fff 	.word	0x1fe00fff

08008110 <HAL_SD_GetCardStatus>:
  * @param  pStatus: Pointer to the HAL_SD_CardStatusTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardStatus(SD_HandleTypeDef *hsd, HAL_SD_CardStatusTypeDef *pStatus)
{
 8008110:	b580      	push	{r7, lr}
 8008112:	b094      	sub	sp, #80	; 0x50
 8008114:	af00      	add	r7, sp, #0
 8008116:	6078      	str	r0, [r7, #4]
 8008118:	6039      	str	r1, [r7, #0]
  uint32_t sd_status[16];
  uint32_t errorstate;
  HAL_StatusTypeDef status = HAL_OK;
 800811a:	2300      	movs	r3, #0
 800811c:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f

  errorstate = SD_SendSDStatus(hsd, sd_status);
 8008120:	f107 0308 	add.w	r3, r7, #8
 8008124:	4619      	mov	r1, r3
 8008126:	6878      	ldr	r0, [r7, #4]
 8008128:	f000 fbcc 	bl	80088c4 <SD_SendSDStatus>
 800812c:	64b8      	str	r0, [r7, #72]	; 0x48
  if (errorstate != HAL_SD_ERROR_NONE)
 800812e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008130:	2b00      	cmp	r3, #0
 8008132:	d011      	beq.n	8008158 <HAL_SD_GetCardStatus+0x48>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8008134:	687b      	ldr	r3, [r7, #4]
 8008136:	681b      	ldr	r3, [r3, #0]
 8008138:	4a4f      	ldr	r2, [pc, #316]	; (8008278 <HAL_SD_GetCardStatus+0x168>)
 800813a:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 800813c:	687b      	ldr	r3, [r7, #4]
 800813e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008140:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008142:	431a      	orrs	r2, r3
 8008144:	687b      	ldr	r3, [r7, #4]
 8008146:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8008148:	687b      	ldr	r3, [r7, #4]
 800814a:	2201      	movs	r2, #1
 800814c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    status = HAL_ERROR;
 8008150:	2301      	movs	r3, #1
 8008152:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 8008156:	e070      	b.n	800823a <HAL_SD_GetCardStatus+0x12a>
  }
  else
  {
    pStatus->DataBusWidth = (uint8_t)((sd_status[0] & 0xC0U) >> 6U);
 8008158:	68bb      	ldr	r3, [r7, #8]
 800815a:	099b      	lsrs	r3, r3, #6
 800815c:	b2db      	uxtb	r3, r3
 800815e:	f003 0303 	and.w	r3, r3, #3
 8008162:	b2da      	uxtb	r2, r3
 8008164:	683b      	ldr	r3, [r7, #0]
 8008166:	701a      	strb	r2, [r3, #0]

    pStatus->SecuredMode = (uint8_t)((sd_status[0] & 0x20U) >> 5U);
 8008168:	68bb      	ldr	r3, [r7, #8]
 800816a:	095b      	lsrs	r3, r3, #5
 800816c:	b2db      	uxtb	r3, r3
 800816e:	f003 0301 	and.w	r3, r3, #1
 8008172:	b2da      	uxtb	r2, r3
 8008174:	683b      	ldr	r3, [r7, #0]
 8008176:	705a      	strb	r2, [r3, #1]

    pStatus->CardType = (uint16_t)(((sd_status[0] & 0x00FF0000U) >> 8U) | ((sd_status[0] & 0xFF000000U) >> 24U));
 8008178:	68bb      	ldr	r3, [r7, #8]
 800817a:	0a1b      	lsrs	r3, r3, #8
 800817c:	b29b      	uxth	r3, r3
 800817e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8008182:	b29a      	uxth	r2, r3
 8008184:	68bb      	ldr	r3, [r7, #8]
 8008186:	0e1b      	lsrs	r3, r3, #24
 8008188:	b29b      	uxth	r3, r3
 800818a:	4313      	orrs	r3, r2
 800818c:	b29a      	uxth	r2, r3
 800818e:	683b      	ldr	r3, [r7, #0]
 8008190:	805a      	strh	r2, [r3, #2]

    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 8008192:	68fb      	ldr	r3, [r7, #12]
 8008194:	061a      	lsls	r2, r3, #24
 8008196:	68fb      	ldr	r3, [r7, #12]
 8008198:	021b      	lsls	r3, r3, #8
 800819a:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800819e:	431a      	orrs	r2, r3
                                  ((sd_status[1] & 0xFF0000U) >> 8U) | ((sd_status[1] & 0xFF000000U) >> 24U));
 80081a0:	68fb      	ldr	r3, [r7, #12]
 80081a2:	0a1b      	lsrs	r3, r3, #8
 80081a4:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 80081a8:	431a      	orrs	r2, r3
                                  ((sd_status[1] & 0xFF0000U) >> 8U) | ((sd_status[1] & 0xFF000000U) >> 24U));
 80081aa:	68fb      	ldr	r3, [r7, #12]
 80081ac:	0e1b      	lsrs	r3, r3, #24
 80081ae:	431a      	orrs	r2, r3
    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 80081b0:	683b      	ldr	r3, [r7, #0]
 80081b2:	605a      	str	r2, [r3, #4]

    pStatus->SpeedClass = (uint8_t)(sd_status[2] & 0xFFU);
 80081b4:	693b      	ldr	r3, [r7, #16]
 80081b6:	b2da      	uxtb	r2, r3
 80081b8:	683b      	ldr	r3, [r7, #0]
 80081ba:	721a      	strb	r2, [r3, #8]

    pStatus->PerformanceMove = (uint8_t)((sd_status[2] & 0xFF00U) >> 8U);
 80081bc:	693b      	ldr	r3, [r7, #16]
 80081be:	0a1b      	lsrs	r3, r3, #8
 80081c0:	b2da      	uxtb	r2, r3
 80081c2:	683b      	ldr	r3, [r7, #0]
 80081c4:	725a      	strb	r2, [r3, #9]

    pStatus->AllocationUnitSize = (uint8_t)((sd_status[2] & 0xF00000U) >> 20U);
 80081c6:	693b      	ldr	r3, [r7, #16]
 80081c8:	0d1b      	lsrs	r3, r3, #20
 80081ca:	b2db      	uxtb	r3, r3
 80081cc:	f003 030f 	and.w	r3, r3, #15
 80081d0:	b2da      	uxtb	r2, r3
 80081d2:	683b      	ldr	r3, [r7, #0]
 80081d4:	729a      	strb	r2, [r3, #10]

    pStatus->EraseSize = (uint16_t)(((sd_status[2] & 0xFF000000U) >> 16U) | (sd_status[3] & 0xFFU));
 80081d6:	693b      	ldr	r3, [r7, #16]
 80081d8:	0c1b      	lsrs	r3, r3, #16
 80081da:	b29b      	uxth	r3, r3
 80081dc:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80081e0:	b29a      	uxth	r2, r3
 80081e2:	697b      	ldr	r3, [r7, #20]
 80081e4:	b29b      	uxth	r3, r3
 80081e6:	b2db      	uxtb	r3, r3
 80081e8:	b29b      	uxth	r3, r3
 80081ea:	4313      	orrs	r3, r2
 80081ec:	b29a      	uxth	r2, r3
 80081ee:	683b      	ldr	r3, [r7, #0]
 80081f0:	819a      	strh	r2, [r3, #12]

    pStatus->EraseTimeout = (uint8_t)((sd_status[3] & 0xFC00U) >> 10U);
 80081f2:	697b      	ldr	r3, [r7, #20]
 80081f4:	0a9b      	lsrs	r3, r3, #10
 80081f6:	b2db      	uxtb	r3, r3
 80081f8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80081fc:	b2da      	uxtb	r2, r3
 80081fe:	683b      	ldr	r3, [r7, #0]
 8008200:	739a      	strb	r2, [r3, #14]

    pStatus->EraseOffset = (uint8_t)((sd_status[3] & 0x0300U) >> 8U);
 8008202:	697b      	ldr	r3, [r7, #20]
 8008204:	0a1b      	lsrs	r3, r3, #8
 8008206:	b2db      	uxtb	r3, r3
 8008208:	f003 0303 	and.w	r3, r3, #3
 800820c:	b2da      	uxtb	r2, r3
 800820e:	683b      	ldr	r3, [r7, #0]
 8008210:	73da      	strb	r2, [r3, #15]

    pStatus->UhsSpeedGrade = (uint8_t)((sd_status[3] & 0x00F0U) >> 4U);
 8008212:	697b      	ldr	r3, [r7, #20]
 8008214:	091b      	lsrs	r3, r3, #4
 8008216:	b2db      	uxtb	r3, r3
 8008218:	f003 030f 	and.w	r3, r3, #15
 800821c:	b2da      	uxtb	r2, r3
 800821e:	683b      	ldr	r3, [r7, #0]
 8008220:	741a      	strb	r2, [r3, #16]
    pStatus->UhsAllocationUnitSize = (uint8_t)(sd_status[3] & 0x000FU) ;
 8008222:	697b      	ldr	r3, [r7, #20]
 8008224:	b2db      	uxtb	r3, r3
 8008226:	f003 030f 	and.w	r3, r3, #15
 800822a:	b2da      	uxtb	r2, r3
 800822c:	683b      	ldr	r3, [r7, #0]
 800822e:	745a      	strb	r2, [r3, #17]
    pStatus->VideoSpeedClass = (uint8_t)((sd_status[4] & 0xFF000000U) >> 24U);
 8008230:	69bb      	ldr	r3, [r7, #24]
 8008232:	0e1b      	lsrs	r3, r3, #24
 8008234:	b2da      	uxtb	r2, r3
 8008236:	683b      	ldr	r3, [r7, #0]
 8008238:	749a      	strb	r2, [r3, #18]
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800823a:	687b      	ldr	r3, [r7, #4]
 800823c:	681b      	ldr	r3, [r3, #0]
 800823e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8008242:	4618      	mov	r0, r3
 8008244:	f002 fc9e 	bl	800ab84 <SDMMC_CmdBlockLength>
 8008248:	64b8      	str	r0, [r7, #72]	; 0x48
  if (errorstate != HAL_SD_ERROR_NONE)
 800824a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800824c:	2b00      	cmp	r3, #0
 800824e:	d00d      	beq.n	800826c <HAL_SD_GetCardStatus+0x15c>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8008250:	687b      	ldr	r3, [r7, #4]
 8008252:	681b      	ldr	r3, [r3, #0]
 8008254:	4a08      	ldr	r2, [pc, #32]	; (8008278 <HAL_SD_GetCardStatus+0x168>)
 8008256:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode = errorstate;
 8008258:	687b      	ldr	r3, [r7, #4]
 800825a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800825c:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 800825e:	687b      	ldr	r3, [r7, #4]
 8008260:	2201      	movs	r2, #1
 8008262:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    status = HAL_ERROR;
 8008266:	2301      	movs	r3, #1
 8008268:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
  }

  return status;
 800826c:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
}
 8008270:	4618      	mov	r0, r3
 8008272:	3750      	adds	r7, #80	; 0x50
 8008274:	46bd      	mov	sp, r7
 8008276:	bd80      	pop	{r7, pc}
 8008278:	1fe00fff 	.word	0x1fe00fff

0800827c <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 800827c:	b480      	push	{r7}
 800827e:	b083      	sub	sp, #12
 8008280:	af00      	add	r7, sp, #0
 8008282:	6078      	str	r0, [r7, #4]
 8008284:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 8008286:	687b      	ldr	r3, [r7, #4]
 8008288:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800828a:	683b      	ldr	r3, [r7, #0]
 800828c:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 800828e:	687b      	ldr	r3, [r7, #4]
 8008290:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8008292:	683b      	ldr	r3, [r7, #0]
 8008294:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 8008296:	687b      	ldr	r3, [r7, #4]
 8008298:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800829a:	683b      	ldr	r3, [r7, #0]
 800829c:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 800829e:	687b      	ldr	r3, [r7, #4]
 80082a0:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80082a2:	683b      	ldr	r3, [r7, #0]
 80082a4:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 80082a6:	687b      	ldr	r3, [r7, #4]
 80082a8:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80082aa:	683b      	ldr	r3, [r7, #0]
 80082ac:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 80082ae:	687b      	ldr	r3, [r7, #4]
 80082b0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80082b2:	683b      	ldr	r3, [r7, #0]
 80082b4:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 80082b6:	687b      	ldr	r3, [r7, #4]
 80082b8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80082ba:	683b      	ldr	r3, [r7, #0]
 80082bc:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 80082be:	687b      	ldr	r3, [r7, #4]
 80082c0:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80082c2:	683b      	ldr	r3, [r7, #0]
 80082c4:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 80082c6:	2300      	movs	r3, #0
}
 80082c8:	4618      	mov	r0, r3
 80082ca:	370c      	adds	r7, #12
 80082cc:	46bd      	mov	sp, r7
 80082ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082d2:	4770      	bx	lr

080082d4 <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDMMC_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDMMC_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 80082d4:	b5b0      	push	{r4, r5, r7, lr}
 80082d6:	b090      	sub	sp, #64	; 0x40
 80082d8:	af04      	add	r7, sp, #16
 80082da:	6078      	str	r0, [r7, #4]
 80082dc:	6039      	str	r1, [r7, #0]
  SDMMC_InitTypeDef Init;
  uint32_t errorstate;
  uint32_t sdmmc_clk;
  HAL_StatusTypeDef status = HAL_OK;
 80082de:	2300      	movs	r3, #0
 80082e0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

  /* Check the parameters */
  assert_param(IS_SDMMC_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 80082e4:	687b      	ldr	r3, [r7, #4]
 80082e6:	2203      	movs	r2, #3
 80082e8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if (hsd->SdCard.CardType != CARD_SECURED)
 80082ec:	687b      	ldr	r3, [r7, #4]
 80082ee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80082f0:	2b03      	cmp	r3, #3
 80082f2:	d02e      	beq.n	8008352 <HAL_SD_ConfigWideBusOperation+0x7e>
  {
    if (WideMode == SDMMC_BUS_WIDE_8B)
 80082f4:	683b      	ldr	r3, [r7, #0]
 80082f6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80082fa:	d106      	bne.n	800830a <HAL_SD_ConfigWideBusOperation+0x36>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80082fc:	687b      	ldr	r3, [r7, #4]
 80082fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008300:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8008304:	687b      	ldr	r3, [r7, #4]
 8008306:	639a      	str	r2, [r3, #56]	; 0x38
 8008308:	e029      	b.n	800835e <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if (WideMode == SDMMC_BUS_WIDE_4B)
 800830a:	683b      	ldr	r3, [r7, #0]
 800830c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008310:	d10a      	bne.n	8008328 <HAL_SD_ConfigWideBusOperation+0x54>
    {
      errorstate = SD_WideBus_Enable(hsd);
 8008312:	6878      	ldr	r0, [r7, #4]
 8008314:	f000 fbce 	bl	8008ab4 <SD_WideBus_Enable>
 8008318:	62b8      	str	r0, [r7, #40]	; 0x28

      hsd->ErrorCode |= errorstate;
 800831a:	687b      	ldr	r3, [r7, #4]
 800831c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800831e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008320:	431a      	orrs	r2, r3
 8008322:	687b      	ldr	r3, [r7, #4]
 8008324:	639a      	str	r2, [r3, #56]	; 0x38
 8008326:	e01a      	b.n	800835e <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if (WideMode == SDMMC_BUS_WIDE_1B)
 8008328:	683b      	ldr	r3, [r7, #0]
 800832a:	2b00      	cmp	r3, #0
 800832c:	d10a      	bne.n	8008344 <HAL_SD_ConfigWideBusOperation+0x70>
    {
      errorstate = SD_WideBus_Disable(hsd);
 800832e:	6878      	ldr	r0, [r7, #4]
 8008330:	f000 fc0b 	bl	8008b4a <SD_WideBus_Disable>
 8008334:	62b8      	str	r0, [r7, #40]	; 0x28

      hsd->ErrorCode |= errorstate;
 8008336:	687b      	ldr	r3, [r7, #4]
 8008338:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800833a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800833c:	431a      	orrs	r2, r3
 800833e:	687b      	ldr	r3, [r7, #4]
 8008340:	639a      	str	r2, [r3, #56]	; 0x38
 8008342:	e00c      	b.n	800835e <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8008344:	687b      	ldr	r3, [r7, #4]
 8008346:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008348:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800834c:	687b      	ldr	r3, [r7, #4]
 800834e:	639a      	str	r2, [r3, #56]	; 0x38
 8008350:	e005      	b.n	800835e <HAL_SD_ConfigWideBusOperation+0x8a>
    }
  }
  else
  {
    /* MMC Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8008352:	687b      	ldr	r3, [r7, #4]
 8008354:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008356:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800835a:	687b      	ldr	r3, [r7, #4]
 800835c:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if (hsd->ErrorCode != HAL_SD_ERROR_NONE)
 800835e:	687b      	ldr	r3, [r7, #4]
 8008360:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008362:	2b00      	cmp	r3, #0
 8008364:	d007      	beq.n	8008376 <HAL_SD_ConfigWideBusOperation+0xa2>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8008366:	687b      	ldr	r3, [r7, #4]
 8008368:	681b      	ldr	r3, [r3, #0]
 800836a:	4a60      	ldr	r2, [pc, #384]	; (80084ec <HAL_SD_ConfigWideBusOperation+0x218>)
 800836c:	639a      	str	r2, [r3, #56]	; 0x38
    status = HAL_ERROR;
 800836e:	2301      	movs	r3, #1
 8008370:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8008374:	e097      	b.n	80084a6 <HAL_SD_ConfigWideBusOperation+0x1d2>
  }
  else
  {
    sdmmc_clk     = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC);
 8008376:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 800837a:	f7fd fff9 	bl	8006370 <HAL_RCCEx_GetPeriphCLKFreq>
 800837e:	6278      	str	r0, [r7, #36]	; 0x24
    if (sdmmc_clk != 0U)
 8008380:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008382:	2b00      	cmp	r3, #0
 8008384:	f000 8086 	beq.w	8008494 <HAL_SD_ConfigWideBusOperation+0x1c0>
    {
      /* Configure the SDMMC peripheral */
      Init.ClockEdge           = hsd->Init.ClockEdge;
 8008388:	687b      	ldr	r3, [r7, #4]
 800838a:	685b      	ldr	r3, [r3, #4]
 800838c:	60fb      	str	r3, [r7, #12]
      Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 800838e:	687b      	ldr	r3, [r7, #4]
 8008390:	689b      	ldr	r3, [r3, #8]
 8008392:	613b      	str	r3, [r7, #16]
      Init.BusWide             = WideMode;
 8008394:	683b      	ldr	r3, [r7, #0]
 8008396:	617b      	str	r3, [r7, #20]
      Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 8008398:	687b      	ldr	r3, [r7, #4]
 800839a:	691b      	ldr	r3, [r3, #16]
 800839c:	61bb      	str	r3, [r7, #24]

      /* Check if user Clock div < Normal speed 25Mhz, no change in Clockdiv */
      if (hsd->Init.ClockDiv >= (sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ)))
 800839e:	687b      	ldr	r3, [r7, #4]
 80083a0:	695a      	ldr	r2, [r3, #20]
 80083a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80083a4:	4952      	ldr	r1, [pc, #328]	; (80084f0 <HAL_SD_ConfigWideBusOperation+0x21c>)
 80083a6:	fba1 1303 	umull	r1, r3, r1, r3
 80083aa:	0e1b      	lsrs	r3, r3, #24
 80083ac:	429a      	cmp	r2, r3
 80083ae:	d303      	bcc.n	80083b8 <HAL_SD_ConfigWideBusOperation+0xe4>
      {
        Init.ClockDiv = hsd->Init.ClockDiv;
 80083b0:	687b      	ldr	r3, [r7, #4]
 80083b2:	695b      	ldr	r3, [r3, #20]
 80083b4:	61fb      	str	r3, [r7, #28]
 80083b6:	e05a      	b.n	800846e <HAL_SD_ConfigWideBusOperation+0x19a>
      }
      else if (hsd->SdCard.CardSpeed == CARD_ULTRA_HIGH_SPEED)
 80083b8:	687b      	ldr	r3, [r7, #4]
 80083ba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80083bc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80083c0:	d103      	bne.n	80083ca <HAL_SD_ConfigWideBusOperation+0xf6>
      {
        /* UltraHigh speed SD card,user Clock div */
        Init.ClockDiv = hsd->Init.ClockDiv;
 80083c2:	687b      	ldr	r3, [r7, #4]
 80083c4:	695b      	ldr	r3, [r3, #20]
 80083c6:	61fb      	str	r3, [r7, #28]
 80083c8:	e051      	b.n	800846e <HAL_SD_ConfigWideBusOperation+0x19a>
      }
      else if (hsd->SdCard.CardSpeed == CARD_HIGH_SPEED)
 80083ca:	687b      	ldr	r3, [r7, #4]
 80083cc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80083ce:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80083d2:	d126      	bne.n	8008422 <HAL_SD_ConfigWideBusOperation+0x14e>
      {
        /* High speed SD card, Max Frequency = 50Mhz */
        if (hsd->Init.ClockDiv == 0U)
 80083d4:	687b      	ldr	r3, [r7, #4]
 80083d6:	695b      	ldr	r3, [r3, #20]
 80083d8:	2b00      	cmp	r3, #0
 80083da:	d10e      	bne.n	80083fa <HAL_SD_ConfigWideBusOperation+0x126>
        {
          if (sdmmc_clk > SD_HIGH_SPEED_FREQ)
 80083dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80083de:	4a45      	ldr	r2, [pc, #276]	; (80084f4 <HAL_SD_ConfigWideBusOperation+0x220>)
 80083e0:	4293      	cmp	r3, r2
 80083e2:	d906      	bls.n	80083f2 <HAL_SD_ConfigWideBusOperation+0x11e>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_HIGH_SPEED_FREQ);
 80083e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80083e6:	4a42      	ldr	r2, [pc, #264]	; (80084f0 <HAL_SD_ConfigWideBusOperation+0x21c>)
 80083e8:	fba2 2303 	umull	r2, r3, r2, r3
 80083ec:	0e5b      	lsrs	r3, r3, #25
 80083ee:	61fb      	str	r3, [r7, #28]
 80083f0:	e03d      	b.n	800846e <HAL_SD_ConfigWideBusOperation+0x19a>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 80083f2:	687b      	ldr	r3, [r7, #4]
 80083f4:	695b      	ldr	r3, [r3, #20]
 80083f6:	61fb      	str	r3, [r7, #28]
 80083f8:	e039      	b.n	800846e <HAL_SD_ConfigWideBusOperation+0x19a>
          }
        }
        else
        {
          if ((sdmmc_clk/(2U * hsd->Init.ClockDiv)) > SD_HIGH_SPEED_FREQ)
 80083fa:	687b      	ldr	r3, [r7, #4]
 80083fc:	695b      	ldr	r3, [r3, #20]
 80083fe:	005b      	lsls	r3, r3, #1
 8008400:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008402:	fbb2 f3f3 	udiv	r3, r2, r3
 8008406:	4a3b      	ldr	r2, [pc, #236]	; (80084f4 <HAL_SD_ConfigWideBusOperation+0x220>)
 8008408:	4293      	cmp	r3, r2
 800840a:	d906      	bls.n	800841a <HAL_SD_ConfigWideBusOperation+0x146>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_HIGH_SPEED_FREQ);
 800840c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800840e:	4a38      	ldr	r2, [pc, #224]	; (80084f0 <HAL_SD_ConfigWideBusOperation+0x21c>)
 8008410:	fba2 2303 	umull	r2, r3, r2, r3
 8008414:	0e5b      	lsrs	r3, r3, #25
 8008416:	61fb      	str	r3, [r7, #28]
 8008418:	e029      	b.n	800846e <HAL_SD_ConfigWideBusOperation+0x19a>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 800841a:	687b      	ldr	r3, [r7, #4]
 800841c:	695b      	ldr	r3, [r3, #20]
 800841e:	61fb      	str	r3, [r7, #28]
 8008420:	e025      	b.n	800846e <HAL_SD_ConfigWideBusOperation+0x19a>
        }
      }
      else
      {
        /* No High speed SD card, Max Frequency = 25Mhz */
        if (hsd->Init.ClockDiv == 0U)
 8008422:	687b      	ldr	r3, [r7, #4]
 8008424:	695b      	ldr	r3, [r3, #20]
 8008426:	2b00      	cmp	r3, #0
 8008428:	d10e      	bne.n	8008448 <HAL_SD_ConfigWideBusOperation+0x174>
        {
          if (sdmmc_clk > SD_NORMAL_SPEED_FREQ)
 800842a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800842c:	4a32      	ldr	r2, [pc, #200]	; (80084f8 <HAL_SD_ConfigWideBusOperation+0x224>)
 800842e:	4293      	cmp	r3, r2
 8008430:	d906      	bls.n	8008440 <HAL_SD_ConfigWideBusOperation+0x16c>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ);
 8008432:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008434:	4a2e      	ldr	r2, [pc, #184]	; (80084f0 <HAL_SD_ConfigWideBusOperation+0x21c>)
 8008436:	fba2 2303 	umull	r2, r3, r2, r3
 800843a:	0e1b      	lsrs	r3, r3, #24
 800843c:	61fb      	str	r3, [r7, #28]
 800843e:	e016      	b.n	800846e <HAL_SD_ConfigWideBusOperation+0x19a>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 8008440:	687b      	ldr	r3, [r7, #4]
 8008442:	695b      	ldr	r3, [r3, #20]
 8008444:	61fb      	str	r3, [r7, #28]
 8008446:	e012      	b.n	800846e <HAL_SD_ConfigWideBusOperation+0x19a>
          }
        }
        else
        {
          if ((sdmmc_clk/(2U * hsd->Init.ClockDiv)) > SD_NORMAL_SPEED_FREQ)
 8008448:	687b      	ldr	r3, [r7, #4]
 800844a:	695b      	ldr	r3, [r3, #20]
 800844c:	005b      	lsls	r3, r3, #1
 800844e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008450:	fbb2 f3f3 	udiv	r3, r2, r3
 8008454:	4a28      	ldr	r2, [pc, #160]	; (80084f8 <HAL_SD_ConfigWideBusOperation+0x224>)
 8008456:	4293      	cmp	r3, r2
 8008458:	d906      	bls.n	8008468 <HAL_SD_ConfigWideBusOperation+0x194>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ);
 800845a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800845c:	4a24      	ldr	r2, [pc, #144]	; (80084f0 <HAL_SD_ConfigWideBusOperation+0x21c>)
 800845e:	fba2 2303 	umull	r2, r3, r2, r3
 8008462:	0e1b      	lsrs	r3, r3, #24
 8008464:	61fb      	str	r3, [r7, #28]
 8008466:	e002      	b.n	800846e <HAL_SD_ConfigWideBusOperation+0x19a>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 8008468:	687b      	ldr	r3, [r7, #4]
 800846a:	695b      	ldr	r3, [r3, #20]
 800846c:	61fb      	str	r3, [r7, #28]
          }
        }
      }

#if (USE_SD_TRANSCEIVER != 0U)
      Init.TranceiverPresent = hsd->Init.TranceiverPresent;
 800846e:	687b      	ldr	r3, [r7, #4]
 8008470:	699b      	ldr	r3, [r3, #24]
 8008472:	623b      	str	r3, [r7, #32]
#endif /* USE_SD_TRANSCEIVER */

      (void)SDMMC_Init(hsd->Instance, Init);
 8008474:	687b      	ldr	r3, [r7, #4]
 8008476:	681d      	ldr	r5, [r3, #0]
 8008478:	466c      	mov	r4, sp
 800847a:	f107 0318 	add.w	r3, r7, #24
 800847e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8008482:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8008486:	f107 030c 	add.w	r3, r7, #12
 800848a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800848c:	4628      	mov	r0, r5
 800848e:	f002 faad 	bl	800a9ec <SDMMC_Init>
 8008492:	e008      	b.n	80084a6 <HAL_SD_ConfigWideBusOperation+0x1d2>
    }
    else
    {
      hsd->ErrorCode |= SDMMC_ERROR_INVALID_PARAMETER;
 8008494:	687b      	ldr	r3, [r7, #4]
 8008496:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008498:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800849c:	687b      	ldr	r3, [r7, #4]
 800849e:	639a      	str	r2, [r3, #56]	; 0x38
      status = HAL_ERROR;
 80084a0:	2301      	movs	r3, #1
 80084a2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    }
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 80084a6:	687b      	ldr	r3, [r7, #4]
 80084a8:	681b      	ldr	r3, [r3, #0]
 80084aa:	f44f 7100 	mov.w	r1, #512	; 0x200
 80084ae:	4618      	mov	r0, r3
 80084b0:	f002 fb68 	bl	800ab84 <SDMMC_CmdBlockLength>
 80084b4:	62b8      	str	r0, [r7, #40]	; 0x28
  if (errorstate != HAL_SD_ERROR_NONE)
 80084b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80084b8:	2b00      	cmp	r3, #0
 80084ba:	d00c      	beq.n	80084d6 <HAL_SD_ConfigWideBusOperation+0x202>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80084bc:	687b      	ldr	r3, [r7, #4]
 80084be:	681b      	ldr	r3, [r3, #0]
 80084c0:	4a0a      	ldr	r2, [pc, #40]	; (80084ec <HAL_SD_ConfigWideBusOperation+0x218>)
 80084c2:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 80084c4:	687b      	ldr	r3, [r7, #4]
 80084c6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80084c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80084ca:	431a      	orrs	r2, r3
 80084cc:	687b      	ldr	r3, [r7, #4]
 80084ce:	639a      	str	r2, [r3, #56]	; 0x38
    status = HAL_ERROR;
 80084d0:	2301      	movs	r3, #1
 80084d2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 80084d6:	687b      	ldr	r3, [r7, #4]
 80084d8:	2201      	movs	r2, #1
 80084da:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return status;
 80084de:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 80084e2:	4618      	mov	r0, r3
 80084e4:	3730      	adds	r7, #48	; 0x30
 80084e6:	46bd      	mov	sp, r7
 80084e8:	bdb0      	pop	{r4, r5, r7, pc}
 80084ea:	bf00      	nop
 80084ec:	1fe00fff 	.word	0x1fe00fff
 80084f0:	55e63b89 	.word	0x55e63b89
 80084f4:	02faf080 	.word	0x02faf080
 80084f8:	017d7840 	.word	0x017d7840

080084fc <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 80084fc:	b580      	push	{r7, lr}
 80084fe:	b086      	sub	sp, #24
 8008500:	af00      	add	r7, sp, #0
 8008502:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 8008504:	2300      	movs	r3, #0
 8008506:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 8008508:	f107 030c 	add.w	r3, r7, #12
 800850c:	4619      	mov	r1, r3
 800850e:	6878      	ldr	r0, [r7, #4]
 8008510:	f000 faa8 	bl	8008a64 <SD_SendStatus>
 8008514:	6178      	str	r0, [r7, #20]
  if (errorstate != HAL_SD_ERROR_NONE)
 8008516:	697b      	ldr	r3, [r7, #20]
 8008518:	2b00      	cmp	r3, #0
 800851a:	d005      	beq.n	8008528 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 800851c:	687b      	ldr	r3, [r7, #4]
 800851e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008520:	697b      	ldr	r3, [r7, #20]
 8008522:	431a      	orrs	r2, r3
 8008524:	687b      	ldr	r3, [r7, #4]
 8008526:	639a      	str	r2, [r3, #56]	; 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 8008528:	68fb      	ldr	r3, [r7, #12]
 800852a:	0a5b      	lsrs	r3, r3, #9
 800852c:	f003 030f 	and.w	r3, r3, #15
 8008530:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 8008532:	693b      	ldr	r3, [r7, #16]
}
 8008534:	4618      	mov	r0, r3
 8008536:	3718      	adds	r7, #24
 8008538:	46bd      	mov	sp, r7
 800853a:	bd80      	pop	{r7, pc}

0800853c <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 800853c:	b580      	push	{r7, lr}
 800853e:	b090      	sub	sp, #64	; 0x40
 8008540:	af00      	add	r7, sp, #0
 8008542:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 8008544:	2301      	movs	r3, #1
 8008546:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if (SDMMC_GetPowerState(hsd->Instance) == 0U)
 8008548:	687b      	ldr	r3, [r7, #4]
 800854a:	681b      	ldr	r3, [r3, #0]
 800854c:	4618      	mov	r0, r3
 800854e:	f002 fa95 	bl	800aa7c <SDMMC_GetPowerState>
 8008552:	4603      	mov	r3, r0
 8008554:	2b00      	cmp	r3, #0
 8008556:	d102      	bne.n	800855e <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8008558:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 800855c:	e0a5      	b.n	80086aa <SD_InitCard+0x16e>
  }

  if (hsd->SdCard.CardType != CARD_SECURED)
 800855e:	687b      	ldr	r3, [r7, #4]
 8008560:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008562:	2b03      	cmp	r3, #3
 8008564:	d02e      	beq.n	80085c4 <SD_InitCard+0x88>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 8008566:	687b      	ldr	r3, [r7, #4]
 8008568:	681b      	ldr	r3, [r3, #0]
 800856a:	4618      	mov	r0, r3
 800856c:	f002 fca2 	bl	800aeb4 <SDMMC_CmdSendCID>
 8008570:	63f8      	str	r0, [r7, #60]	; 0x3c
    if (errorstate != HAL_SD_ERROR_NONE)
 8008572:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008574:	2b00      	cmp	r3, #0
 8008576:	d001      	beq.n	800857c <SD_InitCard+0x40>
    {
      return errorstate;
 8008578:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800857a:	e096      	b.n	80086aa <SD_InitCard+0x16e>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800857c:	687b      	ldr	r3, [r7, #4]
 800857e:	681b      	ldr	r3, [r3, #0]
 8008580:	2100      	movs	r1, #0
 8008582:	4618      	mov	r0, r3
 8008584:	f002 fabf 	bl	800ab06 <SDMMC_GetResponse>
 8008588:	4602      	mov	r2, r0
 800858a:	687b      	ldr	r3, [r7, #4]
 800858c:	671a      	str	r2, [r3, #112]	; 0x70
      hsd->CID[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 800858e:	687b      	ldr	r3, [r7, #4]
 8008590:	681b      	ldr	r3, [r3, #0]
 8008592:	2104      	movs	r1, #4
 8008594:	4618      	mov	r0, r3
 8008596:	f002 fab6 	bl	800ab06 <SDMMC_GetResponse>
 800859a:	4602      	mov	r2, r0
 800859c:	687b      	ldr	r3, [r7, #4]
 800859e:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 80085a0:	687b      	ldr	r3, [r7, #4]
 80085a2:	681b      	ldr	r3, [r3, #0]
 80085a4:	2108      	movs	r1, #8
 80085a6:	4618      	mov	r0, r3
 80085a8:	f002 faad 	bl	800ab06 <SDMMC_GetResponse>
 80085ac:	4602      	mov	r2, r0
 80085ae:	687b      	ldr	r3, [r7, #4]
 80085b0:	679a      	str	r2, [r3, #120]	; 0x78
      hsd->CID[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 80085b2:	687b      	ldr	r3, [r7, #4]
 80085b4:	681b      	ldr	r3, [r3, #0]
 80085b6:	210c      	movs	r1, #12
 80085b8:	4618      	mov	r0, r3
 80085ba:	f002 faa4 	bl	800ab06 <SDMMC_GetResponse>
 80085be:	4602      	mov	r2, r0
 80085c0:	687b      	ldr	r3, [r7, #4]
 80085c2:	67da      	str	r2, [r3, #124]	; 0x7c
    }
  }

  if (hsd->SdCard.CardType != CARD_SECURED)
 80085c4:	687b      	ldr	r3, [r7, #4]
 80085c6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80085c8:	2b03      	cmp	r3, #3
 80085ca:	d00d      	beq.n	80085e8 <SD_InitCard+0xac>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 80085cc:	687b      	ldr	r3, [r7, #4]
 80085ce:	681b      	ldr	r3, [r3, #0]
 80085d0:	f107 020e 	add.w	r2, r7, #14
 80085d4:	4611      	mov	r1, r2
 80085d6:	4618      	mov	r0, r3
 80085d8:	f002 fcab 	bl	800af32 <SDMMC_CmdSetRelAdd>
 80085dc:	63f8      	str	r0, [r7, #60]	; 0x3c
    if (errorstate != HAL_SD_ERROR_NONE)
 80085de:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80085e0:	2b00      	cmp	r3, #0
 80085e2:	d001      	beq.n	80085e8 <SD_InitCard+0xac>
    {
      return errorstate;
 80085e4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80085e6:	e060      	b.n	80086aa <SD_InitCard+0x16e>
    }
  }
  if (hsd->SdCard.CardType != CARD_SECURED)
 80085e8:	687b      	ldr	r3, [r7, #4]
 80085ea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80085ec:	2b03      	cmp	r3, #3
 80085ee:	d036      	beq.n	800865e <SD_InitCard+0x122>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 80085f0:	89fb      	ldrh	r3, [r7, #14]
 80085f2:	461a      	mov	r2, r3
 80085f4:	687b      	ldr	r3, [r7, #4]
 80085f6:	649a      	str	r2, [r3, #72]	; 0x48

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 80085f8:	687b      	ldr	r3, [r7, #4]
 80085fa:	681a      	ldr	r2, [r3, #0]
 80085fc:	687b      	ldr	r3, [r7, #4]
 80085fe:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008600:	041b      	lsls	r3, r3, #16
 8008602:	4619      	mov	r1, r3
 8008604:	4610      	mov	r0, r2
 8008606:	f002 fc74 	bl	800aef2 <SDMMC_CmdSendCSD>
 800860a:	63f8      	str	r0, [r7, #60]	; 0x3c
    if (errorstate != HAL_SD_ERROR_NONE)
 800860c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800860e:	2b00      	cmp	r3, #0
 8008610:	d001      	beq.n	8008616 <SD_InitCard+0xda>
    {
      return errorstate;
 8008612:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008614:	e049      	b.n	80086aa <SD_InitCard+0x16e>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8008616:	687b      	ldr	r3, [r7, #4]
 8008618:	681b      	ldr	r3, [r3, #0]
 800861a:	2100      	movs	r1, #0
 800861c:	4618      	mov	r0, r3
 800861e:	f002 fa72 	bl	800ab06 <SDMMC_GetResponse>
 8008622:	4602      	mov	r2, r0
 8008624:	687b      	ldr	r3, [r7, #4]
 8008626:	661a      	str	r2, [r3, #96]	; 0x60
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 8008628:	687b      	ldr	r3, [r7, #4]
 800862a:	681b      	ldr	r3, [r3, #0]
 800862c:	2104      	movs	r1, #4
 800862e:	4618      	mov	r0, r3
 8008630:	f002 fa69 	bl	800ab06 <SDMMC_GetResponse>
 8008634:	4602      	mov	r2, r0
 8008636:	687b      	ldr	r3, [r7, #4]
 8008638:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 800863a:	687b      	ldr	r3, [r7, #4]
 800863c:	681b      	ldr	r3, [r3, #0]
 800863e:	2108      	movs	r1, #8
 8008640:	4618      	mov	r0, r3
 8008642:	f002 fa60 	bl	800ab06 <SDMMC_GetResponse>
 8008646:	4602      	mov	r2, r0
 8008648:	687b      	ldr	r3, [r7, #4]
 800864a:	669a      	str	r2, [r3, #104]	; 0x68
      hsd->CSD[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 800864c:	687b      	ldr	r3, [r7, #4]
 800864e:	681b      	ldr	r3, [r3, #0]
 8008650:	210c      	movs	r1, #12
 8008652:	4618      	mov	r0, r3
 8008654:	f002 fa57 	bl	800ab06 <SDMMC_GetResponse>
 8008658:	4602      	mov	r2, r0
 800865a:	687b      	ldr	r3, [r7, #4]
 800865c:	66da      	str	r2, [r3, #108]	; 0x6c
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2) >> 20U);
 800865e:	687b      	ldr	r3, [r7, #4]
 8008660:	681b      	ldr	r3, [r3, #0]
 8008662:	2104      	movs	r1, #4
 8008664:	4618      	mov	r0, r3
 8008666:	f002 fa4e 	bl	800ab06 <SDMMC_GetResponse>
 800866a:	4603      	mov	r3, r0
 800866c:	0d1a      	lsrs	r2, r3, #20
 800866e:	687b      	ldr	r3, [r7, #4]
 8008670:	645a      	str	r2, [r3, #68]	; 0x44

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 8008672:	f107 0310 	add.w	r3, r7, #16
 8008676:	4619      	mov	r1, r3
 8008678:	6878      	ldr	r0, [r7, #4]
 800867a:	f7ff fba5 	bl	8007dc8 <HAL_SD_GetCardCSD>
 800867e:	4603      	mov	r3, r0
 8008680:	2b00      	cmp	r3, #0
 8008682:	d002      	beq.n	800868a <SD_InitCard+0x14e>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8008684:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8008688:	e00f      	b.n	80086aa <SD_InitCard+0x16e>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 800868a:	687b      	ldr	r3, [r7, #4]
 800868c:	681a      	ldr	r2, [r3, #0]
 800868e:	687b      	ldr	r3, [r7, #4]
 8008690:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008692:	041b      	lsls	r3, r3, #16
 8008694:	4619      	mov	r1, r3
 8008696:	4610      	mov	r0, r2
 8008698:	f002 fb23 	bl	800ace2 <SDMMC_CmdSelDesel>
 800869c:	63f8      	str	r0, [r7, #60]	; 0x3c
  if (errorstate != HAL_SD_ERROR_NONE)
 800869e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80086a0:	2b00      	cmp	r3, #0
 80086a2:	d001      	beq.n	80086a8 <SD_InitCard+0x16c>
  {
    return errorstate;
 80086a4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80086a6:	e000      	b.n	80086aa <SD_InitCard+0x16e>
  }

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 80086a8:	2300      	movs	r3, #0
}
 80086aa:	4618      	mov	r0, r3
 80086ac:	3740      	adds	r7, #64	; 0x40
 80086ae:	46bd      	mov	sp, r7
 80086b0:	bd80      	pop	{r7, pc}
	...

080086b4 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 80086b4:	b580      	push	{r7, lr}
 80086b6:	b088      	sub	sp, #32
 80086b8:	af00      	add	r7, sp, #0
 80086ba:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80086bc:	2300      	movs	r3, #0
 80086be:	60fb      	str	r3, [r7, #12]
  uint32_t response = 0U;
 80086c0:	2300      	movs	r3, #0
 80086c2:	61fb      	str	r3, [r7, #28]
  uint32_t validvoltage = 0U;
 80086c4:	2300      	movs	r3, #0
 80086c6:	61bb      	str	r3, [r7, #24]
  uint32_t errorstate;
#if (USE_SD_TRANSCEIVER != 0U)
  uint32_t tickstart = HAL_GetTick();
 80086c8:	f7f9 f83c 	bl	8001744 <HAL_GetTick>
 80086cc:	6178      	str	r0, [r7, #20]
#endif /* USE_SD_TRANSCEIVER  */

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 80086ce:	687b      	ldr	r3, [r7, #4]
 80086d0:	681b      	ldr	r3, [r3, #0]
 80086d2:	4618      	mov	r0, r3
 80086d4:	f002 fb28 	bl	800ad28 <SDMMC_CmdGoIdleState>
 80086d8:	6138      	str	r0, [r7, #16]
  if (errorstate != HAL_SD_ERROR_NONE)
 80086da:	693b      	ldr	r3, [r7, #16]
 80086dc:	2b00      	cmp	r3, #0
 80086de:	d001      	beq.n	80086e4 <SD_PowerON+0x30>
  {
    return errorstate;
 80086e0:	693b      	ldr	r3, [r7, #16]
 80086e2:	e0e9      	b.n	80088b8 <SD_PowerON+0x204>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 80086e4:	687b      	ldr	r3, [r7, #4]
 80086e6:	681b      	ldr	r3, [r3, #0]
 80086e8:	4618      	mov	r0, r3
 80086ea:	f002 fb3b 	bl	800ad64 <SDMMC_CmdOperCond>
 80086ee:	6138      	str	r0, [r7, #16]
  if (errorstate != HAL_SD_ERROR_NONE)
 80086f0:	693b      	ldr	r3, [r7, #16]
 80086f2:	2b00      	cmp	r3, #0
 80086f4:	d00d      	beq.n	8008712 <SD_PowerON+0x5e>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 80086f6:	687b      	ldr	r3, [r7, #4]
 80086f8:	2200      	movs	r2, #0
 80086fa:	641a      	str	r2, [r3, #64]	; 0x40
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 80086fc:	687b      	ldr	r3, [r7, #4]
 80086fe:	681b      	ldr	r3, [r3, #0]
 8008700:	4618      	mov	r0, r3
 8008702:	f002 fb11 	bl	800ad28 <SDMMC_CmdGoIdleState>
 8008706:	6138      	str	r0, [r7, #16]
    if (errorstate != HAL_SD_ERROR_NONE)
 8008708:	693b      	ldr	r3, [r7, #16]
 800870a:	2b00      	cmp	r3, #0
 800870c:	d004      	beq.n	8008718 <SD_PowerON+0x64>
    {
      return errorstate;
 800870e:	693b      	ldr	r3, [r7, #16]
 8008710:	e0d2      	b.n	80088b8 <SD_PowerON+0x204>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 8008712:	687b      	ldr	r3, [r7, #4]
 8008714:	2201      	movs	r2, #1
 8008716:	641a      	str	r2, [r3, #64]	; 0x40
  }

  if (hsd->SdCard.CardVersion == CARD_V2_X)
 8008718:	687b      	ldr	r3, [r7, #4]
 800871a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800871c:	2b01      	cmp	r3, #1
 800871e:	d137      	bne.n	8008790 <SD_PowerON+0xdc>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8008720:	687b      	ldr	r3, [r7, #4]
 8008722:	681b      	ldr	r3, [r3, #0]
 8008724:	2100      	movs	r1, #0
 8008726:	4618      	mov	r0, r3
 8008728:	f002 fb3c 	bl	800ada4 <SDMMC_CmdAppCommand>
 800872c:	6138      	str	r0, [r7, #16]
    if (errorstate != HAL_SD_ERROR_NONE)
 800872e:	693b      	ldr	r3, [r7, #16]
 8008730:	2b00      	cmp	r3, #0
 8008732:	d02d      	beq.n	8008790 <SD_PowerON+0xdc>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8008734:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8008738:	e0be      	b.n	80088b8 <SD_PowerON+0x204>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while ((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800873a:	687b      	ldr	r3, [r7, #4]
 800873c:	681b      	ldr	r3, [r3, #0]
 800873e:	2100      	movs	r1, #0
 8008740:	4618      	mov	r0, r3
 8008742:	f002 fb2f 	bl	800ada4 <SDMMC_CmdAppCommand>
 8008746:	6138      	str	r0, [r7, #16]
    if (errorstate != HAL_SD_ERROR_NONE)
 8008748:	693b      	ldr	r3, [r7, #16]
 800874a:	2b00      	cmp	r3, #0
 800874c:	d001      	beq.n	8008752 <SD_PowerON+0x9e>
    {
      return errorstate;
 800874e:	693b      	ldr	r3, [r7, #16]
 8008750:	e0b2      	b.n	80088b8 <SD_PowerON+0x204>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY |
 8008752:	687b      	ldr	r3, [r7, #4]
 8008754:	681b      	ldr	r3, [r3, #0]
 8008756:	495a      	ldr	r1, [pc, #360]	; (80088c0 <SD_PowerON+0x20c>)
 8008758:	4618      	mov	r0, r3
 800875a:	f002 fb46 	bl	800adea <SDMMC_CmdAppOperCommand>
 800875e:	6138      	str	r0, [r7, #16]
                                         SD_SWITCH_1_8V_CAPACITY);
    if (errorstate != HAL_SD_ERROR_NONE)
 8008760:	693b      	ldr	r3, [r7, #16]
 8008762:	2b00      	cmp	r3, #0
 8008764:	d002      	beq.n	800876c <SD_PowerON+0xb8>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8008766:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800876a:	e0a5      	b.n	80088b8 <SD_PowerON+0x204>
    }

    /* Get command response */
    response = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800876c:	687b      	ldr	r3, [r7, #4]
 800876e:	681b      	ldr	r3, [r3, #0]
 8008770:	2100      	movs	r1, #0
 8008772:	4618      	mov	r0, r3
 8008774:	f002 f9c7 	bl	800ab06 <SDMMC_GetResponse>
 8008778:	61f8      	str	r0, [r7, #28]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 800877a:	69fb      	ldr	r3, [r7, #28]
 800877c:	0fdb      	lsrs	r3, r3, #31
 800877e:	2b01      	cmp	r3, #1
 8008780:	d101      	bne.n	8008786 <SD_PowerON+0xd2>
 8008782:	2301      	movs	r3, #1
 8008784:	e000      	b.n	8008788 <SD_PowerON+0xd4>
 8008786:	2300      	movs	r3, #0
 8008788:	61bb      	str	r3, [r7, #24]

    count++;
 800878a:	68fb      	ldr	r3, [r7, #12]
 800878c:	3301      	adds	r3, #1
 800878e:	60fb      	str	r3, [r7, #12]
  while ((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 8008790:	68fb      	ldr	r3, [r7, #12]
 8008792:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8008796:	4293      	cmp	r3, r2
 8008798:	d802      	bhi.n	80087a0 <SD_PowerON+0xec>
 800879a:	69bb      	ldr	r3, [r7, #24]
 800879c:	2b00      	cmp	r3, #0
 800879e:	d0cc      	beq.n	800873a <SD_PowerON+0x86>
  }

  if (count >= SDMMC_MAX_VOLT_TRIAL)
 80087a0:	68fb      	ldr	r3, [r7, #12]
 80087a2:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 80087a6:	4293      	cmp	r3, r2
 80087a8:	d902      	bls.n	80087b0 <SD_PowerON+0xfc>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 80087aa:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80087ae:	e083      	b.n	80088b8 <SD_PowerON+0x204>
  }

  if ((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 80087b0:	69fb      	ldr	r3, [r7, #28]
 80087b2:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80087b6:	2b00      	cmp	r3, #0
 80087b8:	d07d      	beq.n	80088b6 <SD_PowerON+0x202>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 80087ba:	687b      	ldr	r3, [r7, #4]
 80087bc:	2201      	movs	r2, #1
 80087be:	63da      	str	r2, [r3, #60]	; 0x3c
#if (USE_SD_TRANSCEIVER != 0U)
    if (hsd->Init.TranceiverPresent == SDMMC_TRANSCEIVER_PRESENT)
 80087c0:	687b      	ldr	r3, [r7, #4]
 80087c2:	699b      	ldr	r3, [r3, #24]
 80087c4:	2b02      	cmp	r3, #2
 80087c6:	d176      	bne.n	80088b6 <SD_PowerON+0x202>
    {
      if ((response & SD_SWITCH_1_8V_CAPACITY) == SD_SWITCH_1_8V_CAPACITY)
 80087c8:	69fb      	ldr	r3, [r7, #28]
 80087ca:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80087ce:	2b00      	cmp	r3, #0
 80087d0:	d071      	beq.n	80088b6 <SD_PowerON+0x202>
      {
        hsd->SdCard.CardSpeed = CARD_ULTRA_HIGH_SPEED;
 80087d2:	687b      	ldr	r3, [r7, #4]
 80087d4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80087d8:	65da      	str	r2, [r3, #92]	; 0x5c

        /* Start switching procedue */
        hsd->Instance->POWER |= SDMMC_POWER_VSWITCHEN;
 80087da:	687b      	ldr	r3, [r7, #4]
 80087dc:	681b      	ldr	r3, [r3, #0]
 80087de:	681a      	ldr	r2, [r3, #0]
 80087e0:	687b      	ldr	r3, [r7, #4]
 80087e2:	681b      	ldr	r3, [r3, #0]
 80087e4:	f042 0208 	orr.w	r2, r2, #8
 80087e8:	601a      	str	r2, [r3, #0]

        /* Send CMD11 to switch 1.8V mode */
        errorstate = SDMMC_CmdVoltageSwitch(hsd->Instance);
 80087ea:	687b      	ldr	r3, [r7, #4]
 80087ec:	681b      	ldr	r3, [r3, #0]
 80087ee:	4618      	mov	r0, r3
 80087f0:	f002 fc06 	bl	800b000 <SDMMC_CmdVoltageSwitch>
 80087f4:	6138      	str	r0, [r7, #16]
        if (errorstate != HAL_SD_ERROR_NONE)
 80087f6:	693b      	ldr	r3, [r7, #16]
 80087f8:	2b00      	cmp	r3, #0
 80087fa:	d00c      	beq.n	8008816 <SD_PowerON+0x162>
        {
          return errorstate;
 80087fc:	693b      	ldr	r3, [r7, #16]
 80087fe:	e05b      	b.n	80088b8 <SD_PowerON+0x204>
        }

        /* Check to CKSTOP */
        while ((hsd->Instance->STA & SDMMC_FLAG_CKSTOP) != SDMMC_FLAG_CKSTOP)
        {
          if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8008800:	f7f8 ffa0 	bl	8001744 <HAL_GetTick>
 8008804:	4602      	mov	r2, r0
 8008806:	697b      	ldr	r3, [r7, #20]
 8008808:	1ad3      	subs	r3, r2, r3
 800880a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800880e:	d102      	bne.n	8008816 <SD_PowerON+0x162>
          {
            return HAL_SD_ERROR_TIMEOUT;
 8008810:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8008814:	e050      	b.n	80088b8 <SD_PowerON+0x204>
        while ((hsd->Instance->STA & SDMMC_FLAG_CKSTOP) != SDMMC_FLAG_CKSTOP)
 8008816:	687b      	ldr	r3, [r7, #4]
 8008818:	681b      	ldr	r3, [r3, #0]
 800881a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800881c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8008820:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8008824:	d1ec      	bne.n	8008800 <SD_PowerON+0x14c>
          }
        }

        /* Clear CKSTOP Flag */
        hsd->Instance->ICR = SDMMC_FLAG_CKSTOP;
 8008826:	687b      	ldr	r3, [r7, #4]
 8008828:	681b      	ldr	r3, [r3, #0]
 800882a:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 800882e:	639a      	str	r2, [r3, #56]	; 0x38

        /* Check to BusyD0 */
        if ((hsd->Instance->STA & SDMMC_FLAG_BUSYD0) != SDMMC_FLAG_BUSYD0)
 8008830:	687b      	ldr	r3, [r7, #4]
 8008832:	681b      	ldr	r3, [r3, #0]
 8008834:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008836:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800883a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800883e:	d002      	beq.n	8008846 <SD_PowerON+0x192>
        {
          /* Error when activate Voltage Switch in SDMMC Peripheral */
          return SDMMC_ERROR_UNSUPPORTED_FEATURE;
 8008840:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8008844:	e038      	b.n	80088b8 <SD_PowerON+0x204>
        {
          /* Enable Transceiver Switch PIN */
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
          hsd->DriveTransceiver_1_8V_Callback(SET);
#else
          HAL_SD_DriveTransceiver_1_8V_Callback(SET);
 8008846:	2001      	movs	r0, #1
 8008848:	f7ff fab2 	bl	8007db0 <HAL_SD_DriveTransceiver_1_8V_Callback>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */

          /* Switch ready */
          hsd->Instance->POWER |= SDMMC_POWER_VSWITCH;
 800884c:	687b      	ldr	r3, [r7, #4]
 800884e:	681b      	ldr	r3, [r3, #0]
 8008850:	681a      	ldr	r2, [r3, #0]
 8008852:	687b      	ldr	r3, [r7, #4]
 8008854:	681b      	ldr	r3, [r3, #0]
 8008856:	f042 0204 	orr.w	r2, r2, #4
 800885a:	601a      	str	r2, [r3, #0]

          /* Check VSWEND Flag */
          while ((hsd->Instance->STA & SDMMC_FLAG_VSWEND) != SDMMC_FLAG_VSWEND)
 800885c:	e00a      	b.n	8008874 <SD_PowerON+0x1c0>
          {
            if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800885e:	f7f8 ff71 	bl	8001744 <HAL_GetTick>
 8008862:	4602      	mov	r2, r0
 8008864:	697b      	ldr	r3, [r7, #20]
 8008866:	1ad3      	subs	r3, r2, r3
 8008868:	f1b3 3fff 	cmp.w	r3, #4294967295
 800886c:	d102      	bne.n	8008874 <SD_PowerON+0x1c0>
            {
              return HAL_SD_ERROR_TIMEOUT;
 800886e:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8008872:	e021      	b.n	80088b8 <SD_PowerON+0x204>
          while ((hsd->Instance->STA & SDMMC_FLAG_VSWEND) != SDMMC_FLAG_VSWEND)
 8008874:	687b      	ldr	r3, [r7, #4]
 8008876:	681b      	ldr	r3, [r3, #0]
 8008878:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800887a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800887e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008882:	d1ec      	bne.n	800885e <SD_PowerON+0x1aa>
            }
          }

          /* Clear VSWEND Flag */
          hsd->Instance->ICR = SDMMC_FLAG_VSWEND;
 8008884:	687b      	ldr	r3, [r7, #4]
 8008886:	681b      	ldr	r3, [r3, #0]
 8008888:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800888c:	639a      	str	r2, [r3, #56]	; 0x38

          /* Check BusyD0 status */
          if ((hsd->Instance->STA & SDMMC_FLAG_BUSYD0) == SDMMC_FLAG_BUSYD0)
 800888e:	687b      	ldr	r3, [r7, #4]
 8008890:	681b      	ldr	r3, [r3, #0]
 8008892:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008894:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8008898:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800889c:	d102      	bne.n	80088a4 <SD_PowerON+0x1f0>
          {
            /* Error when enabling 1.8V mode */
            return HAL_SD_ERROR_INVALID_VOLTRANGE;
 800889e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80088a2:	e009      	b.n	80088b8 <SD_PowerON+0x204>
          }
          /* Switch to 1.8V OK */

          /* Disable VSWITCH FLAG from SDMMC Peripheral */
          hsd->Instance->POWER = 0x13U;
 80088a4:	687b      	ldr	r3, [r7, #4]
 80088a6:	681b      	ldr	r3, [r3, #0]
 80088a8:	2213      	movs	r2, #19
 80088aa:	601a      	str	r2, [r3, #0]

          /* Clean Status flags */
          hsd->Instance->ICR = 0xFFFFFFFFU;
 80088ac:	687b      	ldr	r3, [r7, #4]
 80088ae:	681b      	ldr	r3, [r3, #0]
 80088b0:	f04f 32ff 	mov.w	r2, #4294967295
 80088b4:	639a      	str	r2, [r3, #56]	; 0x38
      }
    }
#endif /* USE_SD_TRANSCEIVER  */
  }

  return HAL_SD_ERROR_NONE;
 80088b6:	2300      	movs	r3, #0
}
 80088b8:	4618      	mov	r0, r3
 80088ba:	3720      	adds	r7, #32
 80088bc:	46bd      	mov	sp, r7
 80088be:	bd80      	pop	{r7, pc}
 80088c0:	c1100000 	.word	0xc1100000

080088c4 <SD_SendSDStatus>:
  * @param  pSDstatus: Pointer to the buffer that will contain the SD card status
  *         SD Status register)
  * @retval error state
  */
static uint32_t SD_SendSDStatus(SD_HandleTypeDef *hsd, uint32_t *pSDstatus)
{
 80088c4:	b580      	push	{r7, lr}
 80088c6:	b08c      	sub	sp, #48	; 0x30
 80088c8:	af00      	add	r7, sp, #0
 80088ca:	6078      	str	r0, [r7, #4]
 80088cc:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 80088ce:	f7f8 ff39 	bl	8001744 <HAL_GetTick>
 80088d2:	6278      	str	r0, [r7, #36]	; 0x24
  uint32_t count;
  uint32_t *pData = pSDstatus;
 80088d4:	683b      	ldr	r3, [r7, #0]
 80088d6:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check SD response */
  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 80088d8:	687b      	ldr	r3, [r7, #4]
 80088da:	681b      	ldr	r3, [r3, #0]
 80088dc:	2100      	movs	r1, #0
 80088de:	4618      	mov	r0, r3
 80088e0:	f002 f911 	bl	800ab06 <SDMMC_GetResponse>
 80088e4:	4603      	mov	r3, r0
 80088e6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80088ea:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80088ee:	d102      	bne.n	80088f6 <SD_SendSDStatus+0x32>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 80088f0:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80088f4:	e0b0      	b.n	8008a58 <SD_SendSDStatus+0x194>
  }

  /* Set block size for card if it is not equal to current block size for card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 64U);
 80088f6:	687b      	ldr	r3, [r7, #4]
 80088f8:	681b      	ldr	r3, [r3, #0]
 80088fa:	2140      	movs	r1, #64	; 0x40
 80088fc:	4618      	mov	r0, r3
 80088fe:	f002 f941 	bl	800ab84 <SDMMC_CmdBlockLength>
 8008902:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 8008904:	6a3b      	ldr	r3, [r7, #32]
 8008906:	2b00      	cmp	r3, #0
 8008908:	d005      	beq.n	8008916 <SD_SendSDStatus+0x52>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 800890a:	687b      	ldr	r3, [r7, #4]
 800890c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800890e:	687b      	ldr	r3, [r7, #4]
 8008910:	639a      	str	r2, [r3, #56]	; 0x38
    return errorstate;
 8008912:	6a3b      	ldr	r3, [r7, #32]
 8008914:	e0a0      	b.n	8008a58 <SD_SendSDStatus+0x194>
  }

  /* Send CMD55 */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8008916:	687b      	ldr	r3, [r7, #4]
 8008918:	681a      	ldr	r2, [r3, #0]
 800891a:	687b      	ldr	r3, [r7, #4]
 800891c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800891e:	041b      	lsls	r3, r3, #16
 8008920:	4619      	mov	r1, r3
 8008922:	4610      	mov	r0, r2
 8008924:	f002 fa3e 	bl	800ada4 <SDMMC_CmdAppCommand>
 8008928:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 800892a:	6a3b      	ldr	r3, [r7, #32]
 800892c:	2b00      	cmp	r3, #0
 800892e:	d005      	beq.n	800893c <SD_SendSDStatus+0x78>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 8008930:	687b      	ldr	r3, [r7, #4]
 8008932:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008934:	687b      	ldr	r3, [r7, #4]
 8008936:	639a      	str	r2, [r3, #56]	; 0x38
    return errorstate;
 8008938:	6a3b      	ldr	r3, [r7, #32]
 800893a:	e08d      	b.n	8008a58 <SD_SendSDStatus+0x194>
  }

  /* Configure the SD DPSM (Data Path State Machine) */
  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800893c:	f04f 33ff 	mov.w	r3, #4294967295
 8008940:	60bb      	str	r3, [r7, #8]
  config.DataLength    = 64U;
 8008942:	2340      	movs	r3, #64	; 0x40
 8008944:	60fb      	str	r3, [r7, #12]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_64B;
 8008946:	2360      	movs	r3, #96	; 0x60
 8008948:	613b      	str	r3, [r7, #16]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 800894a:	2302      	movs	r3, #2
 800894c:	617b      	str	r3, [r7, #20]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800894e:	2300      	movs	r3, #0
 8008950:	61bb      	str	r3, [r7, #24]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 8008952:	2301      	movs	r3, #1
 8008954:	61fb      	str	r3, [r7, #28]
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 8008956:	687b      	ldr	r3, [r7, #4]
 8008958:	681b      	ldr	r3, [r3, #0]
 800895a:	f107 0208 	add.w	r2, r7, #8
 800895e:	4611      	mov	r1, r2
 8008960:	4618      	mov	r0, r3
 8008962:	f002 f8e3 	bl	800ab2c <SDMMC_ConfigData>

  /* Send ACMD13 (SD_APP_STAUS)  with argument as card's RCA */
  errorstate = SDMMC_CmdStatusRegister(hsd->Instance);
 8008966:	687b      	ldr	r3, [r7, #4]
 8008968:	681b      	ldr	r3, [r3, #0]
 800896a:	4618      	mov	r0, r3
 800896c:	f002 fb26 	bl	800afbc <SDMMC_CmdStatusRegister>
 8008970:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 8008972:	6a3b      	ldr	r3, [r7, #32]
 8008974:	2b00      	cmp	r3, #0
 8008976:	d02b      	beq.n	80089d0 <SD_SendSDStatus+0x10c>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 8008978:	687b      	ldr	r3, [r7, #4]
 800897a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800897c:	687b      	ldr	r3, [r7, #4]
 800897e:	639a      	str	r2, [r3, #56]	; 0x38
    return errorstate;
 8008980:	6a3b      	ldr	r3, [r7, #32]
 8008982:	e069      	b.n	8008a58 <SD_SendSDStatus+0x194>
  }

  /* Get status data */
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
  {
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF))
 8008984:	687b      	ldr	r3, [r7, #4]
 8008986:	681b      	ldr	r3, [r3, #0]
 8008988:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800898a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800898e:	2b00      	cmp	r3, #0
 8008990:	d013      	beq.n	80089ba <SD_SendSDStatus+0xf6>
    {
      for (count = 0U; count < 8U; count++)
 8008992:	2300      	movs	r3, #0
 8008994:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008996:	e00d      	b.n	80089b4 <SD_SendSDStatus+0xf0>
      {
        *pData = SDMMC_ReadFIFO(hsd->Instance);
 8008998:	687b      	ldr	r3, [r7, #4]
 800899a:	681b      	ldr	r3, [r3, #0]
 800899c:	4618      	mov	r0, r3
 800899e:	f002 f84f 	bl	800aa40 <SDMMC_ReadFIFO>
 80089a2:	4602      	mov	r2, r0
 80089a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80089a6:	601a      	str	r2, [r3, #0]
        pData++;
 80089a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80089aa:	3304      	adds	r3, #4
 80089ac:	62bb      	str	r3, [r7, #40]	; 0x28
      for (count = 0U; count < 8U; count++)
 80089ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80089b0:	3301      	adds	r3, #1
 80089b2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80089b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80089b6:	2b07      	cmp	r3, #7
 80089b8:	d9ee      	bls.n	8008998 <SD_SendSDStatus+0xd4>
      }
    }

    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 80089ba:	f7f8 fec3 	bl	8001744 <HAL_GetTick>
 80089be:	4602      	mov	r2, r0
 80089c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80089c2:	1ad3      	subs	r3, r2, r3
 80089c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80089c8:	d102      	bne.n	80089d0 <SD_SendSDStatus+0x10c>
    {
      return HAL_SD_ERROR_TIMEOUT;
 80089ca:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80089ce:	e043      	b.n	8008a58 <SD_SendSDStatus+0x194>
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 80089d0:	687b      	ldr	r3, [r7, #4]
 80089d2:	681b      	ldr	r3, [r3, #0]
 80089d4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80089d6:	f403 7395 	and.w	r3, r3, #298	; 0x12a
 80089da:	2b00      	cmp	r3, #0
 80089dc:	d0d2      	beq.n	8008984 <SD_SendSDStatus+0xc0>
    }
  }

  if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 80089de:	687b      	ldr	r3, [r7, #4]
 80089e0:	681b      	ldr	r3, [r3, #0]
 80089e2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80089e4:	f003 0308 	and.w	r3, r3, #8
 80089e8:	2b00      	cmp	r3, #0
 80089ea:	d001      	beq.n	80089f0 <SD_SendSDStatus+0x12c>
  {
    return HAL_SD_ERROR_DATA_TIMEOUT;
 80089ec:	2308      	movs	r3, #8
 80089ee:	e033      	b.n	8008a58 <SD_SendSDStatus+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 80089f0:	687b      	ldr	r3, [r7, #4]
 80089f2:	681b      	ldr	r3, [r3, #0]
 80089f4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80089f6:	f003 0302 	and.w	r3, r3, #2
 80089fa:	2b00      	cmp	r3, #0
 80089fc:	d001      	beq.n	8008a02 <SD_SendSDStatus+0x13e>
  {
    return HAL_SD_ERROR_DATA_CRC_FAIL;
 80089fe:	2302      	movs	r3, #2
 8008a00:	e02a      	b.n	8008a58 <SD_SendSDStatus+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 8008a02:	687b      	ldr	r3, [r7, #4]
 8008a04:	681b      	ldr	r3, [r3, #0]
 8008a06:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008a08:	f003 0320 	and.w	r3, r3, #32
 8008a0c:	2b00      	cmp	r3, #0
 8008a0e:	d017      	beq.n	8008a40 <SD_SendSDStatus+0x17c>
  {
    return HAL_SD_ERROR_RX_OVERRUN;
 8008a10:	2320      	movs	r3, #32
 8008a12:	e021      	b.n	8008a58 <SD_SendSDStatus+0x194>
    /* Nothing to do */
  }

  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DPSMACT)))
  {
    *pData = SDMMC_ReadFIFO(hsd->Instance);
 8008a14:	687b      	ldr	r3, [r7, #4]
 8008a16:	681b      	ldr	r3, [r3, #0]
 8008a18:	4618      	mov	r0, r3
 8008a1a:	f002 f811 	bl	800aa40 <SDMMC_ReadFIFO>
 8008a1e:	4602      	mov	r2, r0
 8008a20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008a22:	601a      	str	r2, [r3, #0]
    pData++;
 8008a24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008a26:	3304      	adds	r3, #4
 8008a28:	62bb      	str	r3, [r7, #40]	; 0x28

    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8008a2a:	f7f8 fe8b 	bl	8001744 <HAL_GetTick>
 8008a2e:	4602      	mov	r2, r0
 8008a30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a32:	1ad3      	subs	r3, r2, r3
 8008a34:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008a38:	d102      	bne.n	8008a40 <SD_SendSDStatus+0x17c>
    {
      return HAL_SD_ERROR_TIMEOUT;
 8008a3a:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8008a3e:	e00b      	b.n	8008a58 <SD_SendSDStatus+0x194>
  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DPSMACT)))
 8008a40:	687b      	ldr	r3, [r7, #4]
 8008a42:	681b      	ldr	r3, [r3, #0]
 8008a44:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008a46:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8008a4a:	2b00      	cmp	r3, #0
 8008a4c:	d1e2      	bne.n	8008a14 <SD_SendSDStatus+0x150>
    }
  }

  /* Clear all the static status flags*/
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8008a4e:	687b      	ldr	r3, [r7, #4]
 8008a50:	681b      	ldr	r3, [r3, #0]
 8008a52:	4a03      	ldr	r2, [pc, #12]	; (8008a60 <SD_SendSDStatus+0x19c>)
 8008a54:	639a      	str	r2, [r3, #56]	; 0x38

  return HAL_SD_ERROR_NONE;
 8008a56:	2300      	movs	r3, #0
}
 8008a58:	4618      	mov	r0, r3
 8008a5a:	3730      	adds	r7, #48	; 0x30
 8008a5c:	46bd      	mov	sp, r7
 8008a5e:	bd80      	pop	{r7, pc}
 8008a60:	18000f3a 	.word	0x18000f3a

08008a64 <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 8008a64:	b580      	push	{r7, lr}
 8008a66:	b084      	sub	sp, #16
 8008a68:	af00      	add	r7, sp, #0
 8008a6a:	6078      	str	r0, [r7, #4]
 8008a6c:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if (pCardStatus == NULL)
 8008a6e:	683b      	ldr	r3, [r7, #0]
 8008a70:	2b00      	cmp	r3, #0
 8008a72:	d102      	bne.n	8008a7a <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 8008a74:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8008a78:	e018      	b.n	8008aac <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8008a7a:	687b      	ldr	r3, [r7, #4]
 8008a7c:	681a      	ldr	r2, [r3, #0]
 8008a7e:	687b      	ldr	r3, [r7, #4]
 8008a80:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008a82:	041b      	lsls	r3, r3, #16
 8008a84:	4619      	mov	r1, r3
 8008a86:	4610      	mov	r0, r2
 8008a88:	f002 fa75 	bl	800af76 <SDMMC_CmdSendStatus>
 8008a8c:	60f8      	str	r0, [r7, #12]
  if (errorstate != HAL_SD_ERROR_NONE)
 8008a8e:	68fb      	ldr	r3, [r7, #12]
 8008a90:	2b00      	cmp	r3, #0
 8008a92:	d001      	beq.n	8008a98 <SD_SendStatus+0x34>
  {
    return errorstate;
 8008a94:	68fb      	ldr	r3, [r7, #12]
 8008a96:	e009      	b.n	8008aac <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8008a98:	687b      	ldr	r3, [r7, #4]
 8008a9a:	681b      	ldr	r3, [r3, #0]
 8008a9c:	2100      	movs	r1, #0
 8008a9e:	4618      	mov	r0, r3
 8008aa0:	f002 f831 	bl	800ab06 <SDMMC_GetResponse>
 8008aa4:	4602      	mov	r2, r0
 8008aa6:	683b      	ldr	r3, [r7, #0]
 8008aa8:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 8008aaa:	2300      	movs	r3, #0
}
 8008aac:	4618      	mov	r0, r3
 8008aae:	3710      	adds	r7, #16
 8008ab0:	46bd      	mov	sp, r7
 8008ab2:	bd80      	pop	{r7, pc}

08008ab4 <SD_WideBus_Enable>:
  * @brief  Enables the SDMMC wide bus mode.
  * @param  hsd: pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 8008ab4:	b580      	push	{r7, lr}
 8008ab6:	b086      	sub	sp, #24
 8008ab8:	af00      	add	r7, sp, #0
 8008aba:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0UL, 0UL};
 8008abc:	2300      	movs	r3, #0
 8008abe:	60fb      	str	r3, [r7, #12]
 8008ac0:	2300      	movs	r3, #0
 8008ac2:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8008ac4:	687b      	ldr	r3, [r7, #4]
 8008ac6:	681b      	ldr	r3, [r3, #0]
 8008ac8:	2100      	movs	r1, #0
 8008aca:	4618      	mov	r0, r3
 8008acc:	f002 f81b 	bl	800ab06 <SDMMC_GetResponse>
 8008ad0:	4603      	mov	r3, r0
 8008ad2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008ad6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008ada:	d102      	bne.n	8008ae2 <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8008adc:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8008ae0:	e02f      	b.n	8008b42 <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 8008ae2:	f107 030c 	add.w	r3, r7, #12
 8008ae6:	4619      	mov	r1, r3
 8008ae8:	6878      	ldr	r0, [r7, #4]
 8008aea:	f000 f879 	bl	8008be0 <SD_FindSCR>
 8008aee:	6178      	str	r0, [r7, #20]
  if (errorstate != HAL_SD_ERROR_NONE)
 8008af0:	697b      	ldr	r3, [r7, #20]
 8008af2:	2b00      	cmp	r3, #0
 8008af4:	d001      	beq.n	8008afa <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 8008af6:	697b      	ldr	r3, [r7, #20]
 8008af8:	e023      	b.n	8008b42 <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if ((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8008afa:	693b      	ldr	r3, [r7, #16]
 8008afc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8008b00:	2b00      	cmp	r3, #0
 8008b02:	d01c      	beq.n	8008b3e <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8008b04:	687b      	ldr	r3, [r7, #4]
 8008b06:	681a      	ldr	r2, [r3, #0]
 8008b08:	687b      	ldr	r3, [r7, #4]
 8008b0a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008b0c:	041b      	lsls	r3, r3, #16
 8008b0e:	4619      	mov	r1, r3
 8008b10:	4610      	mov	r0, r2
 8008b12:	f002 f947 	bl	800ada4 <SDMMC_CmdAppCommand>
 8008b16:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 8008b18:	697b      	ldr	r3, [r7, #20]
 8008b1a:	2b00      	cmp	r3, #0
 8008b1c:	d001      	beq.n	8008b22 <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 8008b1e:	697b      	ldr	r3, [r7, #20]
 8008b20:	e00f      	b.n	8008b42 <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 8008b22:	687b      	ldr	r3, [r7, #4]
 8008b24:	681b      	ldr	r3, [r3, #0]
 8008b26:	2102      	movs	r1, #2
 8008b28:	4618      	mov	r0, r3
 8008b2a:	f002 f97e 	bl	800ae2a <SDMMC_CmdBusWidth>
 8008b2e:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 8008b30:	697b      	ldr	r3, [r7, #20]
 8008b32:	2b00      	cmp	r3, #0
 8008b34:	d001      	beq.n	8008b3a <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 8008b36:	697b      	ldr	r3, [r7, #20]
 8008b38:	e003      	b.n	8008b42 <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 8008b3a:	2300      	movs	r3, #0
 8008b3c:	e001      	b.n	8008b42 <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8008b3e:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 8008b42:	4618      	mov	r0, r3
 8008b44:	3718      	adds	r7, #24
 8008b46:	46bd      	mov	sp, r7
 8008b48:	bd80      	pop	{r7, pc}

08008b4a <SD_WideBus_Disable>:
  * @brief  Disables the SDMMC wide bus mode.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 8008b4a:	b580      	push	{r7, lr}
 8008b4c:	b086      	sub	sp, #24
 8008b4e:	af00      	add	r7, sp, #0
 8008b50:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0UL, 0UL};
 8008b52:	2300      	movs	r3, #0
 8008b54:	60fb      	str	r3, [r7, #12]
 8008b56:	2300      	movs	r3, #0
 8008b58:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8008b5a:	687b      	ldr	r3, [r7, #4]
 8008b5c:	681b      	ldr	r3, [r3, #0]
 8008b5e:	2100      	movs	r1, #0
 8008b60:	4618      	mov	r0, r3
 8008b62:	f001 ffd0 	bl	800ab06 <SDMMC_GetResponse>
 8008b66:	4603      	mov	r3, r0
 8008b68:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008b6c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008b70:	d102      	bne.n	8008b78 <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8008b72:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8008b76:	e02f      	b.n	8008bd8 <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 8008b78:	f107 030c 	add.w	r3, r7, #12
 8008b7c:	4619      	mov	r1, r3
 8008b7e:	6878      	ldr	r0, [r7, #4]
 8008b80:	f000 f82e 	bl	8008be0 <SD_FindSCR>
 8008b84:	6178      	str	r0, [r7, #20]
  if (errorstate != HAL_SD_ERROR_NONE)
 8008b86:	697b      	ldr	r3, [r7, #20]
 8008b88:	2b00      	cmp	r3, #0
 8008b8a:	d001      	beq.n	8008b90 <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 8008b8c:	697b      	ldr	r3, [r7, #20]
 8008b8e:	e023      	b.n	8008bd8 <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if ((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8008b90:	693b      	ldr	r3, [r7, #16]
 8008b92:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008b96:	2b00      	cmp	r3, #0
 8008b98:	d01c      	beq.n	8008bd4 <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8008b9a:	687b      	ldr	r3, [r7, #4]
 8008b9c:	681a      	ldr	r2, [r3, #0]
 8008b9e:	687b      	ldr	r3, [r7, #4]
 8008ba0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008ba2:	041b      	lsls	r3, r3, #16
 8008ba4:	4619      	mov	r1, r3
 8008ba6:	4610      	mov	r0, r2
 8008ba8:	f002 f8fc 	bl	800ada4 <SDMMC_CmdAppCommand>
 8008bac:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 8008bae:	697b      	ldr	r3, [r7, #20]
 8008bb0:	2b00      	cmp	r3, #0
 8008bb2:	d001      	beq.n	8008bb8 <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 8008bb4:	697b      	ldr	r3, [r7, #20]
 8008bb6:	e00f      	b.n	8008bd8 <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 8008bb8:	687b      	ldr	r3, [r7, #4]
 8008bba:	681b      	ldr	r3, [r3, #0]
 8008bbc:	2100      	movs	r1, #0
 8008bbe:	4618      	mov	r0, r3
 8008bc0:	f002 f933 	bl	800ae2a <SDMMC_CmdBusWidth>
 8008bc4:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 8008bc6:	697b      	ldr	r3, [r7, #20]
 8008bc8:	2b00      	cmp	r3, #0
 8008bca:	d001      	beq.n	8008bd0 <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 8008bcc:	697b      	ldr	r3, [r7, #20]
 8008bce:	e003      	b.n	8008bd8 <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 8008bd0:	2300      	movs	r3, #0
 8008bd2:	e001      	b.n	8008bd8 <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8008bd4:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 8008bd8:	4618      	mov	r0, r3
 8008bda:	3718      	adds	r7, #24
 8008bdc:	46bd      	mov	sp, r7
 8008bde:	bd80      	pop	{r7, pc}

08008be0 <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 8008be0:	b580      	push	{r7, lr}
 8008be2:	b08e      	sub	sp, #56	; 0x38
 8008be4:	af00      	add	r7, sp, #0
 8008be6:	6078      	str	r0, [r7, #4]
 8008be8:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8008bea:	f7f8 fdab 	bl	8001744 <HAL_GetTick>
 8008bee:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t index = 0U;
 8008bf0:	2300      	movs	r3, #0
 8008bf2:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tempscr[2U] = {0UL, 0UL};
 8008bf4:	2300      	movs	r3, #0
 8008bf6:	60bb      	str	r3, [r7, #8]
 8008bf8:	2300      	movs	r3, #0
 8008bfa:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 8008bfc:	683b      	ldr	r3, [r7, #0]
 8008bfe:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 8008c00:	687b      	ldr	r3, [r7, #4]
 8008c02:	681b      	ldr	r3, [r3, #0]
 8008c04:	2108      	movs	r1, #8
 8008c06:	4618      	mov	r0, r3
 8008c08:	f001 ffbc 	bl	800ab84 <SDMMC_CmdBlockLength>
 8008c0c:	62b8      	str	r0, [r7, #40]	; 0x28
  if (errorstate != HAL_SD_ERROR_NONE)
 8008c0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008c10:	2b00      	cmp	r3, #0
 8008c12:	d001      	beq.n	8008c18 <SD_FindSCR+0x38>
  {
    return errorstate;
 8008c14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008c16:	e0ad      	b.n	8008d74 <SD_FindSCR+0x194>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 8008c18:	687b      	ldr	r3, [r7, #4]
 8008c1a:	681a      	ldr	r2, [r3, #0]
 8008c1c:	687b      	ldr	r3, [r7, #4]
 8008c1e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008c20:	041b      	lsls	r3, r3, #16
 8008c22:	4619      	mov	r1, r3
 8008c24:	4610      	mov	r0, r2
 8008c26:	f002 f8bd 	bl	800ada4 <SDMMC_CmdAppCommand>
 8008c2a:	62b8      	str	r0, [r7, #40]	; 0x28
  if (errorstate != HAL_SD_ERROR_NONE)
 8008c2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008c2e:	2b00      	cmp	r3, #0
 8008c30:	d001      	beq.n	8008c36 <SD_FindSCR+0x56>
  {
    return errorstate;
 8008c32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008c34:	e09e      	b.n	8008d74 <SD_FindSCR+0x194>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8008c36:	f04f 33ff 	mov.w	r3, #4294967295
 8008c3a:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 8008c3c:	2308      	movs	r3, #8
 8008c3e:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_8B;
 8008c40:	2330      	movs	r3, #48	; 0x30
 8008c42:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 8008c44:	2302      	movs	r3, #2
 8008c46:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8008c48:	2300      	movs	r3, #0
 8008c4a:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 8008c4c:	2301      	movs	r3, #1
 8008c4e:	627b      	str	r3, [r7, #36]	; 0x24
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 8008c50:	687b      	ldr	r3, [r7, #4]
 8008c52:	681b      	ldr	r3, [r3, #0]
 8008c54:	f107 0210 	add.w	r2, r7, #16
 8008c58:	4611      	mov	r1, r2
 8008c5a:	4618      	mov	r0, r3
 8008c5c:	f001 ff66 	bl	800ab2c <SDMMC_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 8008c60:	687b      	ldr	r3, [r7, #4]
 8008c62:	681b      	ldr	r3, [r3, #0]
 8008c64:	4618      	mov	r0, r3
 8008c66:	f002 f903 	bl	800ae70 <SDMMC_CmdSendSCR>
 8008c6a:	62b8      	str	r0, [r7, #40]	; 0x28
  if (errorstate != HAL_SD_ERROR_NONE)
 8008c6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008c6e:	2b00      	cmp	r3, #0
 8008c70:	d027      	beq.n	8008cc2 <SD_FindSCR+0xe2>
  {
    return errorstate;
 8008c72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008c74:	e07e      	b.n	8008d74 <SD_FindSCR+0x194>
  }

  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND |
                            SDMMC_FLAG_DATAEND))
  {
    if ((!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOE)) && (index == 0U))
 8008c76:	687b      	ldr	r3, [r7, #4]
 8008c78:	681b      	ldr	r3, [r3, #0]
 8008c7a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008c7c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8008c80:	2b00      	cmp	r3, #0
 8008c82:	d113      	bne.n	8008cac <SD_FindSCR+0xcc>
 8008c84:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008c86:	2b00      	cmp	r3, #0
 8008c88:	d110      	bne.n	8008cac <SD_FindSCR+0xcc>
    {
      tempscr[0] = SDMMC_ReadFIFO(hsd->Instance);
 8008c8a:	687b      	ldr	r3, [r7, #4]
 8008c8c:	681b      	ldr	r3, [r3, #0]
 8008c8e:	4618      	mov	r0, r3
 8008c90:	f001 fed6 	bl	800aa40 <SDMMC_ReadFIFO>
 8008c94:	4603      	mov	r3, r0
 8008c96:	60bb      	str	r3, [r7, #8]
      tempscr[1] = SDMMC_ReadFIFO(hsd->Instance);
 8008c98:	687b      	ldr	r3, [r7, #4]
 8008c9a:	681b      	ldr	r3, [r3, #0]
 8008c9c:	4618      	mov	r0, r3
 8008c9e:	f001 fecf 	bl	800aa40 <SDMMC_ReadFIFO>
 8008ca2:	4603      	mov	r3, r0
 8008ca4:	60fb      	str	r3, [r7, #12]
      index++;
 8008ca6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008ca8:	3301      	adds	r3, #1
 8008caa:	637b      	str	r3, [r7, #52]	; 0x34
    }


    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8008cac:	f7f8 fd4a 	bl	8001744 <HAL_GetTick>
 8008cb0:	4602      	mov	r2, r0
 8008cb2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008cb4:	1ad3      	subs	r3, r2, r3
 8008cb6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008cba:	d102      	bne.n	8008cc2 <SD_FindSCR+0xe2>
    {
      return HAL_SD_ERROR_TIMEOUT;
 8008cbc:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8008cc0:	e058      	b.n	8008d74 <SD_FindSCR+0x194>
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND |
 8008cc2:	687b      	ldr	r3, [r7, #4]
 8008cc4:	681b      	ldr	r3, [r3, #0]
 8008cc6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008cc8:	f240 532a 	movw	r3, #1322	; 0x52a
 8008ccc:	4013      	ands	r3, r2
 8008cce:	2b00      	cmp	r3, #0
 8008cd0:	d0d1      	beq.n	8008c76 <SD_FindSCR+0x96>
    }
  }

  if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 8008cd2:	687b      	ldr	r3, [r7, #4]
 8008cd4:	681b      	ldr	r3, [r3, #0]
 8008cd6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008cd8:	f003 0308 	and.w	r3, r3, #8
 8008cdc:	2b00      	cmp	r3, #0
 8008cde:	d005      	beq.n	8008cec <SD_FindSCR+0x10c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DTIMEOUT);
 8008ce0:	687b      	ldr	r3, [r7, #4]
 8008ce2:	681b      	ldr	r3, [r3, #0]
 8008ce4:	2208      	movs	r2, #8
 8008ce6:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 8008ce8:	2308      	movs	r3, #8
 8008cea:	e043      	b.n	8008d74 <SD_FindSCR+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 8008cec:	687b      	ldr	r3, [r7, #4]
 8008cee:	681b      	ldr	r3, [r3, #0]
 8008cf0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008cf2:	f003 0302 	and.w	r3, r3, #2
 8008cf6:	2b00      	cmp	r3, #0
 8008cf8:	d005      	beq.n	8008d06 <SD_FindSCR+0x126>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DCRCFAIL);
 8008cfa:	687b      	ldr	r3, [r7, #4]
 8008cfc:	681b      	ldr	r3, [r3, #0]
 8008cfe:	2202      	movs	r2, #2
 8008d00:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 8008d02:	2302      	movs	r3, #2
 8008d04:	e036      	b.n	8008d74 <SD_FindSCR+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 8008d06:	687b      	ldr	r3, [r7, #4]
 8008d08:	681b      	ldr	r3, [r3, #0]
 8008d0a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008d0c:	f003 0320 	and.w	r3, r3, #32
 8008d10:	2b00      	cmp	r3, #0
 8008d12:	d005      	beq.n	8008d20 <SD_FindSCR+0x140>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_RXOVERR);
 8008d14:	687b      	ldr	r3, [r7, #4]
 8008d16:	681b      	ldr	r3, [r3, #0]
 8008d18:	2220      	movs	r2, #32
 8008d1a:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 8008d1c:	2320      	movs	r3, #32
 8008d1e:	e029      	b.n	8008d74 <SD_FindSCR+0x194>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8008d20:	687b      	ldr	r3, [r7, #4]
 8008d22:	681b      	ldr	r3, [r3, #0]
 8008d24:	4a15      	ldr	r2, [pc, #84]	; (8008d7c <SD_FindSCR+0x19c>)
 8008d26:	639a      	str	r2, [r3, #56]	; 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) | \
 8008d28:	68fb      	ldr	r3, [r7, #12]
 8008d2a:	061a      	lsls	r2, r3, #24
 8008d2c:	68fb      	ldr	r3, [r7, #12]
 8008d2e:	021b      	lsls	r3, r3, #8
 8008d30:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8008d34:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 8008d36:	68fb      	ldr	r3, [r7, #12]
 8008d38:	0a1b      	lsrs	r3, r3, #8
 8008d3a:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) | \
 8008d3e:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 8008d40:	68fb      	ldr	r3, [r7, #12]
 8008d42:	0e1b      	lsrs	r3, r3, #24
 8008d44:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) | \
 8008d46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008d48:	601a      	str	r2, [r3, #0]
    scr++;
 8008d4a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008d4c:	3304      	adds	r3, #4
 8008d4e:	62fb      	str	r3, [r7, #44]	; 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) | \
 8008d50:	68bb      	ldr	r3, [r7, #8]
 8008d52:	061a      	lsls	r2, r3, #24
 8008d54:	68bb      	ldr	r3, [r7, #8]
 8008d56:	021b      	lsls	r3, r3, #8
 8008d58:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8008d5c:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 8008d5e:	68bb      	ldr	r3, [r7, #8]
 8008d60:	0a1b      	lsrs	r3, r3, #8
 8008d62:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) | \
 8008d66:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 8008d68:	68bb      	ldr	r3, [r7, #8]
 8008d6a:	0e1b      	lsrs	r3, r3, #24
 8008d6c:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) | \
 8008d6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008d70:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 8008d72:	2300      	movs	r3, #0
}
 8008d74:	4618      	mov	r0, r3
 8008d76:	3738      	adds	r7, #56	; 0x38
 8008d78:	46bd      	mov	sp, r7
 8008d7a:	bd80      	pop	{r7, pc}
 8008d7c:	18000f3a 	.word	0x18000f3a

08008d80 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8008d80:	b580      	push	{r7, lr}
 8008d82:	b082      	sub	sp, #8
 8008d84:	af00      	add	r7, sp, #0
 8008d86:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008d88:	687b      	ldr	r3, [r7, #4]
 8008d8a:	2b00      	cmp	r3, #0
 8008d8c:	d101      	bne.n	8008d92 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8008d8e:	2301      	movs	r3, #1
 8008d90:	e049      	b.n	8008e26 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008d92:	687b      	ldr	r3, [r7, #4]
 8008d94:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008d98:	b2db      	uxtb	r3, r3
 8008d9a:	2b00      	cmp	r3, #0
 8008d9c:	d106      	bne.n	8008dac <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008d9e:	687b      	ldr	r3, [r7, #4]
 8008da0:	2200      	movs	r2, #0
 8008da2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8008da6:	6878      	ldr	r0, [r7, #4]
 8008da8:	f7f8 fac4 	bl	8001334 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008dac:	687b      	ldr	r3, [r7, #4]
 8008dae:	2202      	movs	r2, #2
 8008db0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008db4:	687b      	ldr	r3, [r7, #4]
 8008db6:	681a      	ldr	r2, [r3, #0]
 8008db8:	687b      	ldr	r3, [r7, #4]
 8008dba:	3304      	adds	r3, #4
 8008dbc:	4619      	mov	r1, r3
 8008dbe:	4610      	mov	r0, r2
 8008dc0:	f000 faf8 	bl	80093b4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008dc4:	687b      	ldr	r3, [r7, #4]
 8008dc6:	2201      	movs	r2, #1
 8008dc8:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008dcc:	687b      	ldr	r3, [r7, #4]
 8008dce:	2201      	movs	r2, #1
 8008dd0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008dd4:	687b      	ldr	r3, [r7, #4]
 8008dd6:	2201      	movs	r2, #1
 8008dd8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008ddc:	687b      	ldr	r3, [r7, #4]
 8008dde:	2201      	movs	r2, #1
 8008de0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008de4:	687b      	ldr	r3, [r7, #4]
 8008de6:	2201      	movs	r2, #1
 8008de8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8008dec:	687b      	ldr	r3, [r7, #4]
 8008dee:	2201      	movs	r2, #1
 8008df0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8008df4:	687b      	ldr	r3, [r7, #4]
 8008df6:	2201      	movs	r2, #1
 8008df8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008dfc:	687b      	ldr	r3, [r7, #4]
 8008dfe:	2201      	movs	r2, #1
 8008e00:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008e04:	687b      	ldr	r3, [r7, #4]
 8008e06:	2201      	movs	r2, #1
 8008e08:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008e0c:	687b      	ldr	r3, [r7, #4]
 8008e0e:	2201      	movs	r2, #1
 8008e10:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8008e14:	687b      	ldr	r3, [r7, #4]
 8008e16:	2201      	movs	r2, #1
 8008e18:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008e1c:	687b      	ldr	r3, [r7, #4]
 8008e1e:	2201      	movs	r2, #1
 8008e20:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8008e24:	2300      	movs	r3, #0
}
 8008e26:	4618      	mov	r0, r3
 8008e28:	3708      	adds	r7, #8
 8008e2a:	46bd      	mov	sp, r7
 8008e2c:	bd80      	pop	{r7, pc}
	...

08008e30 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8008e30:	b480      	push	{r7}
 8008e32:	b085      	sub	sp, #20
 8008e34:	af00      	add	r7, sp, #0
 8008e36:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8008e38:	687b      	ldr	r3, [r7, #4]
 8008e3a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008e3e:	b2db      	uxtb	r3, r3
 8008e40:	2b01      	cmp	r3, #1
 8008e42:	d001      	beq.n	8008e48 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8008e44:	2301      	movs	r3, #1
 8008e46:	e05e      	b.n	8008f06 <HAL_TIM_Base_Start_IT+0xd6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008e48:	687b      	ldr	r3, [r7, #4]
 8008e4a:	2202      	movs	r2, #2
 8008e4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8008e50:	687b      	ldr	r3, [r7, #4]
 8008e52:	681b      	ldr	r3, [r3, #0]
 8008e54:	68da      	ldr	r2, [r3, #12]
 8008e56:	687b      	ldr	r3, [r7, #4]
 8008e58:	681b      	ldr	r3, [r3, #0]
 8008e5a:	f042 0201 	orr.w	r2, r2, #1
 8008e5e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008e60:	687b      	ldr	r3, [r7, #4]
 8008e62:	681b      	ldr	r3, [r3, #0]
 8008e64:	4a2b      	ldr	r2, [pc, #172]	; (8008f14 <HAL_TIM_Base_Start_IT+0xe4>)
 8008e66:	4293      	cmp	r3, r2
 8008e68:	d02c      	beq.n	8008ec4 <HAL_TIM_Base_Start_IT+0x94>
 8008e6a:	687b      	ldr	r3, [r7, #4]
 8008e6c:	681b      	ldr	r3, [r3, #0]
 8008e6e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008e72:	d027      	beq.n	8008ec4 <HAL_TIM_Base_Start_IT+0x94>
 8008e74:	687b      	ldr	r3, [r7, #4]
 8008e76:	681b      	ldr	r3, [r3, #0]
 8008e78:	4a27      	ldr	r2, [pc, #156]	; (8008f18 <HAL_TIM_Base_Start_IT+0xe8>)
 8008e7a:	4293      	cmp	r3, r2
 8008e7c:	d022      	beq.n	8008ec4 <HAL_TIM_Base_Start_IT+0x94>
 8008e7e:	687b      	ldr	r3, [r7, #4]
 8008e80:	681b      	ldr	r3, [r3, #0]
 8008e82:	4a26      	ldr	r2, [pc, #152]	; (8008f1c <HAL_TIM_Base_Start_IT+0xec>)
 8008e84:	4293      	cmp	r3, r2
 8008e86:	d01d      	beq.n	8008ec4 <HAL_TIM_Base_Start_IT+0x94>
 8008e88:	687b      	ldr	r3, [r7, #4]
 8008e8a:	681b      	ldr	r3, [r3, #0]
 8008e8c:	4a24      	ldr	r2, [pc, #144]	; (8008f20 <HAL_TIM_Base_Start_IT+0xf0>)
 8008e8e:	4293      	cmp	r3, r2
 8008e90:	d018      	beq.n	8008ec4 <HAL_TIM_Base_Start_IT+0x94>
 8008e92:	687b      	ldr	r3, [r7, #4]
 8008e94:	681b      	ldr	r3, [r3, #0]
 8008e96:	4a23      	ldr	r2, [pc, #140]	; (8008f24 <HAL_TIM_Base_Start_IT+0xf4>)
 8008e98:	4293      	cmp	r3, r2
 8008e9a:	d013      	beq.n	8008ec4 <HAL_TIM_Base_Start_IT+0x94>
 8008e9c:	687b      	ldr	r3, [r7, #4]
 8008e9e:	681b      	ldr	r3, [r3, #0]
 8008ea0:	4a21      	ldr	r2, [pc, #132]	; (8008f28 <HAL_TIM_Base_Start_IT+0xf8>)
 8008ea2:	4293      	cmp	r3, r2
 8008ea4:	d00e      	beq.n	8008ec4 <HAL_TIM_Base_Start_IT+0x94>
 8008ea6:	687b      	ldr	r3, [r7, #4]
 8008ea8:	681b      	ldr	r3, [r3, #0]
 8008eaa:	4a20      	ldr	r2, [pc, #128]	; (8008f2c <HAL_TIM_Base_Start_IT+0xfc>)
 8008eac:	4293      	cmp	r3, r2
 8008eae:	d009      	beq.n	8008ec4 <HAL_TIM_Base_Start_IT+0x94>
 8008eb0:	687b      	ldr	r3, [r7, #4]
 8008eb2:	681b      	ldr	r3, [r3, #0]
 8008eb4:	4a1e      	ldr	r2, [pc, #120]	; (8008f30 <HAL_TIM_Base_Start_IT+0x100>)
 8008eb6:	4293      	cmp	r3, r2
 8008eb8:	d004      	beq.n	8008ec4 <HAL_TIM_Base_Start_IT+0x94>
 8008eba:	687b      	ldr	r3, [r7, #4]
 8008ebc:	681b      	ldr	r3, [r3, #0]
 8008ebe:	4a1d      	ldr	r2, [pc, #116]	; (8008f34 <HAL_TIM_Base_Start_IT+0x104>)
 8008ec0:	4293      	cmp	r3, r2
 8008ec2:	d115      	bne.n	8008ef0 <HAL_TIM_Base_Start_IT+0xc0>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008ec4:	687b      	ldr	r3, [r7, #4]
 8008ec6:	681b      	ldr	r3, [r3, #0]
 8008ec8:	689a      	ldr	r2, [r3, #8]
 8008eca:	4b1b      	ldr	r3, [pc, #108]	; (8008f38 <HAL_TIM_Base_Start_IT+0x108>)
 8008ecc:	4013      	ands	r3, r2
 8008ece:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008ed0:	68fb      	ldr	r3, [r7, #12]
 8008ed2:	2b06      	cmp	r3, #6
 8008ed4:	d015      	beq.n	8008f02 <HAL_TIM_Base_Start_IT+0xd2>
 8008ed6:	68fb      	ldr	r3, [r7, #12]
 8008ed8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008edc:	d011      	beq.n	8008f02 <HAL_TIM_Base_Start_IT+0xd2>
    {
      __HAL_TIM_ENABLE(htim);
 8008ede:	687b      	ldr	r3, [r7, #4]
 8008ee0:	681b      	ldr	r3, [r3, #0]
 8008ee2:	681a      	ldr	r2, [r3, #0]
 8008ee4:	687b      	ldr	r3, [r7, #4]
 8008ee6:	681b      	ldr	r3, [r3, #0]
 8008ee8:	f042 0201 	orr.w	r2, r2, #1
 8008eec:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008eee:	e008      	b.n	8008f02 <HAL_TIM_Base_Start_IT+0xd2>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8008ef0:	687b      	ldr	r3, [r7, #4]
 8008ef2:	681b      	ldr	r3, [r3, #0]
 8008ef4:	681a      	ldr	r2, [r3, #0]
 8008ef6:	687b      	ldr	r3, [r7, #4]
 8008ef8:	681b      	ldr	r3, [r3, #0]
 8008efa:	f042 0201 	orr.w	r2, r2, #1
 8008efe:	601a      	str	r2, [r3, #0]
 8008f00:	e000      	b.n	8008f04 <HAL_TIM_Base_Start_IT+0xd4>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008f02:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8008f04:	2300      	movs	r3, #0
}
 8008f06:	4618      	mov	r0, r3
 8008f08:	3714      	adds	r7, #20
 8008f0a:	46bd      	mov	sp, r7
 8008f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f10:	4770      	bx	lr
 8008f12:	bf00      	nop
 8008f14:	40010000 	.word	0x40010000
 8008f18:	40000400 	.word	0x40000400
 8008f1c:	40000800 	.word	0x40000800
 8008f20:	40000c00 	.word	0x40000c00
 8008f24:	40010400 	.word	0x40010400
 8008f28:	40001800 	.word	0x40001800
 8008f2c:	40014000 	.word	0x40014000
 8008f30:	4000e000 	.word	0x4000e000
 8008f34:	4000e400 	.word	0x4000e400
 8008f38:	00010007 	.word	0x00010007

08008f3c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8008f3c:	b580      	push	{r7, lr}
 8008f3e:	b082      	sub	sp, #8
 8008f40:	af00      	add	r7, sp, #0
 8008f42:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8008f44:	687b      	ldr	r3, [r7, #4]
 8008f46:	681b      	ldr	r3, [r3, #0]
 8008f48:	691b      	ldr	r3, [r3, #16]
 8008f4a:	f003 0302 	and.w	r3, r3, #2
 8008f4e:	2b02      	cmp	r3, #2
 8008f50:	d122      	bne.n	8008f98 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8008f52:	687b      	ldr	r3, [r7, #4]
 8008f54:	681b      	ldr	r3, [r3, #0]
 8008f56:	68db      	ldr	r3, [r3, #12]
 8008f58:	f003 0302 	and.w	r3, r3, #2
 8008f5c:	2b02      	cmp	r3, #2
 8008f5e:	d11b      	bne.n	8008f98 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8008f60:	687b      	ldr	r3, [r7, #4]
 8008f62:	681b      	ldr	r3, [r3, #0]
 8008f64:	f06f 0202 	mvn.w	r2, #2
 8008f68:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8008f6a:	687b      	ldr	r3, [r7, #4]
 8008f6c:	2201      	movs	r2, #1
 8008f6e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8008f70:	687b      	ldr	r3, [r7, #4]
 8008f72:	681b      	ldr	r3, [r3, #0]
 8008f74:	699b      	ldr	r3, [r3, #24]
 8008f76:	f003 0303 	and.w	r3, r3, #3
 8008f7a:	2b00      	cmp	r3, #0
 8008f7c:	d003      	beq.n	8008f86 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8008f7e:	6878      	ldr	r0, [r7, #4]
 8008f80:	f000 f9fa 	bl	8009378 <HAL_TIM_IC_CaptureCallback>
 8008f84:	e005      	b.n	8008f92 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8008f86:	6878      	ldr	r0, [r7, #4]
 8008f88:	f000 f9ec 	bl	8009364 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008f8c:	6878      	ldr	r0, [r7, #4]
 8008f8e:	f000 f9fd 	bl	800938c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008f92:	687b      	ldr	r3, [r7, #4]
 8008f94:	2200      	movs	r2, #0
 8008f96:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8008f98:	687b      	ldr	r3, [r7, #4]
 8008f9a:	681b      	ldr	r3, [r3, #0]
 8008f9c:	691b      	ldr	r3, [r3, #16]
 8008f9e:	f003 0304 	and.w	r3, r3, #4
 8008fa2:	2b04      	cmp	r3, #4
 8008fa4:	d122      	bne.n	8008fec <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8008fa6:	687b      	ldr	r3, [r7, #4]
 8008fa8:	681b      	ldr	r3, [r3, #0]
 8008faa:	68db      	ldr	r3, [r3, #12]
 8008fac:	f003 0304 	and.w	r3, r3, #4
 8008fb0:	2b04      	cmp	r3, #4
 8008fb2:	d11b      	bne.n	8008fec <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8008fb4:	687b      	ldr	r3, [r7, #4]
 8008fb6:	681b      	ldr	r3, [r3, #0]
 8008fb8:	f06f 0204 	mvn.w	r2, #4
 8008fbc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8008fbe:	687b      	ldr	r3, [r7, #4]
 8008fc0:	2202      	movs	r2, #2
 8008fc2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8008fc4:	687b      	ldr	r3, [r7, #4]
 8008fc6:	681b      	ldr	r3, [r3, #0]
 8008fc8:	699b      	ldr	r3, [r3, #24]
 8008fca:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008fce:	2b00      	cmp	r3, #0
 8008fd0:	d003      	beq.n	8008fda <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008fd2:	6878      	ldr	r0, [r7, #4]
 8008fd4:	f000 f9d0 	bl	8009378 <HAL_TIM_IC_CaptureCallback>
 8008fd8:	e005      	b.n	8008fe6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008fda:	6878      	ldr	r0, [r7, #4]
 8008fdc:	f000 f9c2 	bl	8009364 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008fe0:	6878      	ldr	r0, [r7, #4]
 8008fe2:	f000 f9d3 	bl	800938c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008fe6:	687b      	ldr	r3, [r7, #4]
 8008fe8:	2200      	movs	r2, #0
 8008fea:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8008fec:	687b      	ldr	r3, [r7, #4]
 8008fee:	681b      	ldr	r3, [r3, #0]
 8008ff0:	691b      	ldr	r3, [r3, #16]
 8008ff2:	f003 0308 	and.w	r3, r3, #8
 8008ff6:	2b08      	cmp	r3, #8
 8008ff8:	d122      	bne.n	8009040 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8008ffa:	687b      	ldr	r3, [r7, #4]
 8008ffc:	681b      	ldr	r3, [r3, #0]
 8008ffe:	68db      	ldr	r3, [r3, #12]
 8009000:	f003 0308 	and.w	r3, r3, #8
 8009004:	2b08      	cmp	r3, #8
 8009006:	d11b      	bne.n	8009040 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8009008:	687b      	ldr	r3, [r7, #4]
 800900a:	681b      	ldr	r3, [r3, #0]
 800900c:	f06f 0208 	mvn.w	r2, #8
 8009010:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8009012:	687b      	ldr	r3, [r7, #4]
 8009014:	2204      	movs	r2, #4
 8009016:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8009018:	687b      	ldr	r3, [r7, #4]
 800901a:	681b      	ldr	r3, [r3, #0]
 800901c:	69db      	ldr	r3, [r3, #28]
 800901e:	f003 0303 	and.w	r3, r3, #3
 8009022:	2b00      	cmp	r3, #0
 8009024:	d003      	beq.n	800902e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009026:	6878      	ldr	r0, [r7, #4]
 8009028:	f000 f9a6 	bl	8009378 <HAL_TIM_IC_CaptureCallback>
 800902c:	e005      	b.n	800903a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800902e:	6878      	ldr	r0, [r7, #4]
 8009030:	f000 f998 	bl	8009364 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009034:	6878      	ldr	r0, [r7, #4]
 8009036:	f000 f9a9 	bl	800938c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800903a:	687b      	ldr	r3, [r7, #4]
 800903c:	2200      	movs	r2, #0
 800903e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8009040:	687b      	ldr	r3, [r7, #4]
 8009042:	681b      	ldr	r3, [r3, #0]
 8009044:	691b      	ldr	r3, [r3, #16]
 8009046:	f003 0310 	and.w	r3, r3, #16
 800904a:	2b10      	cmp	r3, #16
 800904c:	d122      	bne.n	8009094 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800904e:	687b      	ldr	r3, [r7, #4]
 8009050:	681b      	ldr	r3, [r3, #0]
 8009052:	68db      	ldr	r3, [r3, #12]
 8009054:	f003 0310 	and.w	r3, r3, #16
 8009058:	2b10      	cmp	r3, #16
 800905a:	d11b      	bne.n	8009094 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800905c:	687b      	ldr	r3, [r7, #4]
 800905e:	681b      	ldr	r3, [r3, #0]
 8009060:	f06f 0210 	mvn.w	r2, #16
 8009064:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8009066:	687b      	ldr	r3, [r7, #4]
 8009068:	2208      	movs	r2, #8
 800906a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800906c:	687b      	ldr	r3, [r7, #4]
 800906e:	681b      	ldr	r3, [r3, #0]
 8009070:	69db      	ldr	r3, [r3, #28]
 8009072:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009076:	2b00      	cmp	r3, #0
 8009078:	d003      	beq.n	8009082 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800907a:	6878      	ldr	r0, [r7, #4]
 800907c:	f000 f97c 	bl	8009378 <HAL_TIM_IC_CaptureCallback>
 8009080:	e005      	b.n	800908e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009082:	6878      	ldr	r0, [r7, #4]
 8009084:	f000 f96e 	bl	8009364 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009088:	6878      	ldr	r0, [r7, #4]
 800908a:	f000 f97f 	bl	800938c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800908e:	687b      	ldr	r3, [r7, #4]
 8009090:	2200      	movs	r2, #0
 8009092:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8009094:	687b      	ldr	r3, [r7, #4]
 8009096:	681b      	ldr	r3, [r3, #0]
 8009098:	691b      	ldr	r3, [r3, #16]
 800909a:	f003 0301 	and.w	r3, r3, #1
 800909e:	2b01      	cmp	r3, #1
 80090a0:	d10e      	bne.n	80090c0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80090a2:	687b      	ldr	r3, [r7, #4]
 80090a4:	681b      	ldr	r3, [r3, #0]
 80090a6:	68db      	ldr	r3, [r3, #12]
 80090a8:	f003 0301 	and.w	r3, r3, #1
 80090ac:	2b01      	cmp	r3, #1
 80090ae:	d107      	bne.n	80090c0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80090b0:	687b      	ldr	r3, [r7, #4]
 80090b2:	681b      	ldr	r3, [r3, #0]
 80090b4:	f06f 0201 	mvn.w	r2, #1
 80090b8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80090ba:	6878      	ldr	r0, [r7, #4]
 80090bc:	f7f7 fe48 	bl	8000d50 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80090c0:	687b      	ldr	r3, [r7, #4]
 80090c2:	681b      	ldr	r3, [r3, #0]
 80090c4:	691b      	ldr	r3, [r3, #16]
 80090c6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80090ca:	2b80      	cmp	r3, #128	; 0x80
 80090cc:	d10e      	bne.n	80090ec <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80090ce:	687b      	ldr	r3, [r7, #4]
 80090d0:	681b      	ldr	r3, [r3, #0]
 80090d2:	68db      	ldr	r3, [r3, #12]
 80090d4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80090d8:	2b80      	cmp	r3, #128	; 0x80
 80090da:	d107      	bne.n	80090ec <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80090dc:	687b      	ldr	r3, [r7, #4]
 80090de:	681b      	ldr	r3, [r3, #0]
 80090e0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80090e4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80090e6:	6878      	ldr	r0, [r7, #4]
 80090e8:	f000 fb4e 	bl	8009788 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80090ec:	687b      	ldr	r3, [r7, #4]
 80090ee:	681b      	ldr	r3, [r3, #0]
 80090f0:	691b      	ldr	r3, [r3, #16]
 80090f2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80090f6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80090fa:	d10e      	bne.n	800911a <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80090fc:	687b      	ldr	r3, [r7, #4]
 80090fe:	681b      	ldr	r3, [r3, #0]
 8009100:	68db      	ldr	r3, [r3, #12]
 8009102:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009106:	2b80      	cmp	r3, #128	; 0x80
 8009108:	d107      	bne.n	800911a <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800910a:	687b      	ldr	r3, [r7, #4]
 800910c:	681b      	ldr	r3, [r3, #0]
 800910e:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8009112:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8009114:	6878      	ldr	r0, [r7, #4]
 8009116:	f000 fb41 	bl	800979c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800911a:	687b      	ldr	r3, [r7, #4]
 800911c:	681b      	ldr	r3, [r3, #0]
 800911e:	691b      	ldr	r3, [r3, #16]
 8009120:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009124:	2b40      	cmp	r3, #64	; 0x40
 8009126:	d10e      	bne.n	8009146 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8009128:	687b      	ldr	r3, [r7, #4]
 800912a:	681b      	ldr	r3, [r3, #0]
 800912c:	68db      	ldr	r3, [r3, #12]
 800912e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009132:	2b40      	cmp	r3, #64	; 0x40
 8009134:	d107      	bne.n	8009146 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8009136:	687b      	ldr	r3, [r7, #4]
 8009138:	681b      	ldr	r3, [r3, #0]
 800913a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800913e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8009140:	6878      	ldr	r0, [r7, #4]
 8009142:	f000 f92d 	bl	80093a0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8009146:	687b      	ldr	r3, [r7, #4]
 8009148:	681b      	ldr	r3, [r3, #0]
 800914a:	691b      	ldr	r3, [r3, #16]
 800914c:	f003 0320 	and.w	r3, r3, #32
 8009150:	2b20      	cmp	r3, #32
 8009152:	d10e      	bne.n	8009172 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8009154:	687b      	ldr	r3, [r7, #4]
 8009156:	681b      	ldr	r3, [r3, #0]
 8009158:	68db      	ldr	r3, [r3, #12]
 800915a:	f003 0320 	and.w	r3, r3, #32
 800915e:	2b20      	cmp	r3, #32
 8009160:	d107      	bne.n	8009172 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8009162:	687b      	ldr	r3, [r7, #4]
 8009164:	681b      	ldr	r3, [r3, #0]
 8009166:	f06f 0220 	mvn.w	r2, #32
 800916a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800916c:	6878      	ldr	r0, [r7, #4]
 800916e:	f000 fb01 	bl	8009774 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8009172:	bf00      	nop
 8009174:	3708      	adds	r7, #8
 8009176:	46bd      	mov	sp, r7
 8009178:	bd80      	pop	{r7, pc}
	...

0800917c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800917c:	b580      	push	{r7, lr}
 800917e:	b084      	sub	sp, #16
 8009180:	af00      	add	r7, sp, #0
 8009182:	6078      	str	r0, [r7, #4]
 8009184:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8009186:	687b      	ldr	r3, [r7, #4]
 8009188:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800918c:	2b01      	cmp	r3, #1
 800918e:	d101      	bne.n	8009194 <HAL_TIM_ConfigClockSource+0x18>
 8009190:	2302      	movs	r3, #2
 8009192:	e0db      	b.n	800934c <HAL_TIM_ConfigClockSource+0x1d0>
 8009194:	687b      	ldr	r3, [r7, #4]
 8009196:	2201      	movs	r2, #1
 8009198:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800919c:	687b      	ldr	r3, [r7, #4]
 800919e:	2202      	movs	r2, #2
 80091a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80091a4:	687b      	ldr	r3, [r7, #4]
 80091a6:	681b      	ldr	r3, [r3, #0]
 80091a8:	689b      	ldr	r3, [r3, #8]
 80091aa:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80091ac:	68fa      	ldr	r2, [r7, #12]
 80091ae:	4b69      	ldr	r3, [pc, #420]	; (8009354 <HAL_TIM_ConfigClockSource+0x1d8>)
 80091b0:	4013      	ands	r3, r2
 80091b2:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80091b4:	68fb      	ldr	r3, [r7, #12]
 80091b6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80091ba:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 80091bc:	687b      	ldr	r3, [r7, #4]
 80091be:	681b      	ldr	r3, [r3, #0]
 80091c0:	68fa      	ldr	r2, [r7, #12]
 80091c2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80091c4:	683b      	ldr	r3, [r7, #0]
 80091c6:	681b      	ldr	r3, [r3, #0]
 80091c8:	4a63      	ldr	r2, [pc, #396]	; (8009358 <HAL_TIM_ConfigClockSource+0x1dc>)
 80091ca:	4293      	cmp	r3, r2
 80091cc:	f000 80a9 	beq.w	8009322 <HAL_TIM_ConfigClockSource+0x1a6>
 80091d0:	4a61      	ldr	r2, [pc, #388]	; (8009358 <HAL_TIM_ConfigClockSource+0x1dc>)
 80091d2:	4293      	cmp	r3, r2
 80091d4:	f200 80ae 	bhi.w	8009334 <HAL_TIM_ConfigClockSource+0x1b8>
 80091d8:	4a60      	ldr	r2, [pc, #384]	; (800935c <HAL_TIM_ConfigClockSource+0x1e0>)
 80091da:	4293      	cmp	r3, r2
 80091dc:	f000 80a1 	beq.w	8009322 <HAL_TIM_ConfigClockSource+0x1a6>
 80091e0:	4a5e      	ldr	r2, [pc, #376]	; (800935c <HAL_TIM_ConfigClockSource+0x1e0>)
 80091e2:	4293      	cmp	r3, r2
 80091e4:	f200 80a6 	bhi.w	8009334 <HAL_TIM_ConfigClockSource+0x1b8>
 80091e8:	4a5d      	ldr	r2, [pc, #372]	; (8009360 <HAL_TIM_ConfigClockSource+0x1e4>)
 80091ea:	4293      	cmp	r3, r2
 80091ec:	f000 8099 	beq.w	8009322 <HAL_TIM_ConfigClockSource+0x1a6>
 80091f0:	4a5b      	ldr	r2, [pc, #364]	; (8009360 <HAL_TIM_ConfigClockSource+0x1e4>)
 80091f2:	4293      	cmp	r3, r2
 80091f4:	f200 809e 	bhi.w	8009334 <HAL_TIM_ConfigClockSource+0x1b8>
 80091f8:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 80091fc:	f000 8091 	beq.w	8009322 <HAL_TIM_ConfigClockSource+0x1a6>
 8009200:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8009204:	f200 8096 	bhi.w	8009334 <HAL_TIM_ConfigClockSource+0x1b8>
 8009208:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800920c:	f000 8089 	beq.w	8009322 <HAL_TIM_ConfigClockSource+0x1a6>
 8009210:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009214:	f200 808e 	bhi.w	8009334 <HAL_TIM_ConfigClockSource+0x1b8>
 8009218:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800921c:	d03e      	beq.n	800929c <HAL_TIM_ConfigClockSource+0x120>
 800921e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009222:	f200 8087 	bhi.w	8009334 <HAL_TIM_ConfigClockSource+0x1b8>
 8009226:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800922a:	f000 8085 	beq.w	8009338 <HAL_TIM_ConfigClockSource+0x1bc>
 800922e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009232:	d87f      	bhi.n	8009334 <HAL_TIM_ConfigClockSource+0x1b8>
 8009234:	2b70      	cmp	r3, #112	; 0x70
 8009236:	d01a      	beq.n	800926e <HAL_TIM_ConfigClockSource+0xf2>
 8009238:	2b70      	cmp	r3, #112	; 0x70
 800923a:	d87b      	bhi.n	8009334 <HAL_TIM_ConfigClockSource+0x1b8>
 800923c:	2b60      	cmp	r3, #96	; 0x60
 800923e:	d050      	beq.n	80092e2 <HAL_TIM_ConfigClockSource+0x166>
 8009240:	2b60      	cmp	r3, #96	; 0x60
 8009242:	d877      	bhi.n	8009334 <HAL_TIM_ConfigClockSource+0x1b8>
 8009244:	2b50      	cmp	r3, #80	; 0x50
 8009246:	d03c      	beq.n	80092c2 <HAL_TIM_ConfigClockSource+0x146>
 8009248:	2b50      	cmp	r3, #80	; 0x50
 800924a:	d873      	bhi.n	8009334 <HAL_TIM_ConfigClockSource+0x1b8>
 800924c:	2b40      	cmp	r3, #64	; 0x40
 800924e:	d058      	beq.n	8009302 <HAL_TIM_ConfigClockSource+0x186>
 8009250:	2b40      	cmp	r3, #64	; 0x40
 8009252:	d86f      	bhi.n	8009334 <HAL_TIM_ConfigClockSource+0x1b8>
 8009254:	2b30      	cmp	r3, #48	; 0x30
 8009256:	d064      	beq.n	8009322 <HAL_TIM_ConfigClockSource+0x1a6>
 8009258:	2b30      	cmp	r3, #48	; 0x30
 800925a:	d86b      	bhi.n	8009334 <HAL_TIM_ConfigClockSource+0x1b8>
 800925c:	2b20      	cmp	r3, #32
 800925e:	d060      	beq.n	8009322 <HAL_TIM_ConfigClockSource+0x1a6>
 8009260:	2b20      	cmp	r3, #32
 8009262:	d867      	bhi.n	8009334 <HAL_TIM_ConfigClockSource+0x1b8>
 8009264:	2b00      	cmp	r3, #0
 8009266:	d05c      	beq.n	8009322 <HAL_TIM_ConfigClockSource+0x1a6>
 8009268:	2b10      	cmp	r3, #16
 800926a:	d05a      	beq.n	8009322 <HAL_TIM_ConfigClockSource+0x1a6>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 800926c:	e062      	b.n	8009334 <HAL_TIM_ConfigClockSource+0x1b8>
      TIM_ETR_SetConfig(htim->Instance,
 800926e:	687b      	ldr	r3, [r7, #4]
 8009270:	6818      	ldr	r0, [r3, #0]
 8009272:	683b      	ldr	r3, [r7, #0]
 8009274:	6899      	ldr	r1, [r3, #8]
 8009276:	683b      	ldr	r3, [r7, #0]
 8009278:	685a      	ldr	r2, [r3, #4]
 800927a:	683b      	ldr	r3, [r7, #0]
 800927c:	68db      	ldr	r3, [r3, #12]
 800927e:	f000 f9bd 	bl	80095fc <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8009282:	687b      	ldr	r3, [r7, #4]
 8009284:	681b      	ldr	r3, [r3, #0]
 8009286:	689b      	ldr	r3, [r3, #8]
 8009288:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800928a:	68fb      	ldr	r3, [r7, #12]
 800928c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8009290:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8009292:	687b      	ldr	r3, [r7, #4]
 8009294:	681b      	ldr	r3, [r3, #0]
 8009296:	68fa      	ldr	r2, [r7, #12]
 8009298:	609a      	str	r2, [r3, #8]
      break;
 800929a:	e04e      	b.n	800933a <HAL_TIM_ConfigClockSource+0x1be>
      TIM_ETR_SetConfig(htim->Instance,
 800929c:	687b      	ldr	r3, [r7, #4]
 800929e:	6818      	ldr	r0, [r3, #0]
 80092a0:	683b      	ldr	r3, [r7, #0]
 80092a2:	6899      	ldr	r1, [r3, #8]
 80092a4:	683b      	ldr	r3, [r7, #0]
 80092a6:	685a      	ldr	r2, [r3, #4]
 80092a8:	683b      	ldr	r3, [r7, #0]
 80092aa:	68db      	ldr	r3, [r3, #12]
 80092ac:	f000 f9a6 	bl	80095fc <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80092b0:	687b      	ldr	r3, [r7, #4]
 80092b2:	681b      	ldr	r3, [r3, #0]
 80092b4:	689a      	ldr	r2, [r3, #8]
 80092b6:	687b      	ldr	r3, [r7, #4]
 80092b8:	681b      	ldr	r3, [r3, #0]
 80092ba:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80092be:	609a      	str	r2, [r3, #8]
      break;
 80092c0:	e03b      	b.n	800933a <HAL_TIM_ConfigClockSource+0x1be>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80092c2:	687b      	ldr	r3, [r7, #4]
 80092c4:	6818      	ldr	r0, [r3, #0]
 80092c6:	683b      	ldr	r3, [r7, #0]
 80092c8:	6859      	ldr	r1, [r3, #4]
 80092ca:	683b      	ldr	r3, [r7, #0]
 80092cc:	68db      	ldr	r3, [r3, #12]
 80092ce:	461a      	mov	r2, r3
 80092d0:	f000 f916 	bl	8009500 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80092d4:	687b      	ldr	r3, [r7, #4]
 80092d6:	681b      	ldr	r3, [r3, #0]
 80092d8:	2150      	movs	r1, #80	; 0x50
 80092da:	4618      	mov	r0, r3
 80092dc:	f000 f970 	bl	80095c0 <TIM_ITRx_SetConfig>
      break;
 80092e0:	e02b      	b.n	800933a <HAL_TIM_ConfigClockSource+0x1be>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80092e2:	687b      	ldr	r3, [r7, #4]
 80092e4:	6818      	ldr	r0, [r3, #0]
 80092e6:	683b      	ldr	r3, [r7, #0]
 80092e8:	6859      	ldr	r1, [r3, #4]
 80092ea:	683b      	ldr	r3, [r7, #0]
 80092ec:	68db      	ldr	r3, [r3, #12]
 80092ee:	461a      	mov	r2, r3
 80092f0:	f000 f935 	bl	800955e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80092f4:	687b      	ldr	r3, [r7, #4]
 80092f6:	681b      	ldr	r3, [r3, #0]
 80092f8:	2160      	movs	r1, #96	; 0x60
 80092fa:	4618      	mov	r0, r3
 80092fc:	f000 f960 	bl	80095c0 <TIM_ITRx_SetConfig>
      break;
 8009300:	e01b      	b.n	800933a <HAL_TIM_ConfigClockSource+0x1be>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8009302:	687b      	ldr	r3, [r7, #4]
 8009304:	6818      	ldr	r0, [r3, #0]
 8009306:	683b      	ldr	r3, [r7, #0]
 8009308:	6859      	ldr	r1, [r3, #4]
 800930a:	683b      	ldr	r3, [r7, #0]
 800930c:	68db      	ldr	r3, [r3, #12]
 800930e:	461a      	mov	r2, r3
 8009310:	f000 f8f6 	bl	8009500 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8009314:	687b      	ldr	r3, [r7, #4]
 8009316:	681b      	ldr	r3, [r3, #0]
 8009318:	2140      	movs	r1, #64	; 0x40
 800931a:	4618      	mov	r0, r3
 800931c:	f000 f950 	bl	80095c0 <TIM_ITRx_SetConfig>
      break;
 8009320:	e00b      	b.n	800933a <HAL_TIM_ConfigClockSource+0x1be>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8009322:	687b      	ldr	r3, [r7, #4]
 8009324:	681a      	ldr	r2, [r3, #0]
 8009326:	683b      	ldr	r3, [r7, #0]
 8009328:	681b      	ldr	r3, [r3, #0]
 800932a:	4619      	mov	r1, r3
 800932c:	4610      	mov	r0, r2
 800932e:	f000 f947 	bl	80095c0 <TIM_ITRx_SetConfig>
        break;
 8009332:	e002      	b.n	800933a <HAL_TIM_ConfigClockSource+0x1be>
      break;
 8009334:	bf00      	nop
 8009336:	e000      	b.n	800933a <HAL_TIM_ConfigClockSource+0x1be>
      break;
 8009338:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800933a:	687b      	ldr	r3, [r7, #4]
 800933c:	2201      	movs	r2, #1
 800933e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8009342:	687b      	ldr	r3, [r7, #4]
 8009344:	2200      	movs	r2, #0
 8009346:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800934a:	2300      	movs	r3, #0
}
 800934c:	4618      	mov	r0, r3
 800934e:	3710      	adds	r7, #16
 8009350:	46bd      	mov	sp, r7
 8009352:	bd80      	pop	{r7, pc}
 8009354:	ffceff88 	.word	0xffceff88
 8009358:	00100040 	.word	0x00100040
 800935c:	00100030 	.word	0x00100030
 8009360:	00100020 	.word	0x00100020

08009364 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8009364:	b480      	push	{r7}
 8009366:	b083      	sub	sp, #12
 8009368:	af00      	add	r7, sp, #0
 800936a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800936c:	bf00      	nop
 800936e:	370c      	adds	r7, #12
 8009370:	46bd      	mov	sp, r7
 8009372:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009376:	4770      	bx	lr

08009378 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8009378:	b480      	push	{r7}
 800937a:	b083      	sub	sp, #12
 800937c:	af00      	add	r7, sp, #0
 800937e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8009380:	bf00      	nop
 8009382:	370c      	adds	r7, #12
 8009384:	46bd      	mov	sp, r7
 8009386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800938a:	4770      	bx	lr

0800938c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800938c:	b480      	push	{r7}
 800938e:	b083      	sub	sp, #12
 8009390:	af00      	add	r7, sp, #0
 8009392:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8009394:	bf00      	nop
 8009396:	370c      	adds	r7, #12
 8009398:	46bd      	mov	sp, r7
 800939a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800939e:	4770      	bx	lr

080093a0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80093a0:	b480      	push	{r7}
 80093a2:	b083      	sub	sp, #12
 80093a4:	af00      	add	r7, sp, #0
 80093a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80093a8:	bf00      	nop
 80093aa:	370c      	adds	r7, #12
 80093ac:	46bd      	mov	sp, r7
 80093ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093b2:	4770      	bx	lr

080093b4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80093b4:	b480      	push	{r7}
 80093b6:	b085      	sub	sp, #20
 80093b8:	af00      	add	r7, sp, #0
 80093ba:	6078      	str	r0, [r7, #4]
 80093bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80093be:	687b      	ldr	r3, [r7, #4]
 80093c0:	681b      	ldr	r3, [r3, #0]
 80093c2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80093c4:	687b      	ldr	r3, [r7, #4]
 80093c6:	4a44      	ldr	r2, [pc, #272]	; (80094d8 <TIM_Base_SetConfig+0x124>)
 80093c8:	4293      	cmp	r3, r2
 80093ca:	d013      	beq.n	80093f4 <TIM_Base_SetConfig+0x40>
 80093cc:	687b      	ldr	r3, [r7, #4]
 80093ce:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80093d2:	d00f      	beq.n	80093f4 <TIM_Base_SetConfig+0x40>
 80093d4:	687b      	ldr	r3, [r7, #4]
 80093d6:	4a41      	ldr	r2, [pc, #260]	; (80094dc <TIM_Base_SetConfig+0x128>)
 80093d8:	4293      	cmp	r3, r2
 80093da:	d00b      	beq.n	80093f4 <TIM_Base_SetConfig+0x40>
 80093dc:	687b      	ldr	r3, [r7, #4]
 80093de:	4a40      	ldr	r2, [pc, #256]	; (80094e0 <TIM_Base_SetConfig+0x12c>)
 80093e0:	4293      	cmp	r3, r2
 80093e2:	d007      	beq.n	80093f4 <TIM_Base_SetConfig+0x40>
 80093e4:	687b      	ldr	r3, [r7, #4]
 80093e6:	4a3f      	ldr	r2, [pc, #252]	; (80094e4 <TIM_Base_SetConfig+0x130>)
 80093e8:	4293      	cmp	r3, r2
 80093ea:	d003      	beq.n	80093f4 <TIM_Base_SetConfig+0x40>
 80093ec:	687b      	ldr	r3, [r7, #4]
 80093ee:	4a3e      	ldr	r2, [pc, #248]	; (80094e8 <TIM_Base_SetConfig+0x134>)
 80093f0:	4293      	cmp	r3, r2
 80093f2:	d108      	bne.n	8009406 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80093f4:	68fb      	ldr	r3, [r7, #12]
 80093f6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80093fa:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80093fc:	683b      	ldr	r3, [r7, #0]
 80093fe:	685b      	ldr	r3, [r3, #4]
 8009400:	68fa      	ldr	r2, [r7, #12]
 8009402:	4313      	orrs	r3, r2
 8009404:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8009406:	687b      	ldr	r3, [r7, #4]
 8009408:	4a33      	ldr	r2, [pc, #204]	; (80094d8 <TIM_Base_SetConfig+0x124>)
 800940a:	4293      	cmp	r3, r2
 800940c:	d027      	beq.n	800945e <TIM_Base_SetConfig+0xaa>
 800940e:	687b      	ldr	r3, [r7, #4]
 8009410:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009414:	d023      	beq.n	800945e <TIM_Base_SetConfig+0xaa>
 8009416:	687b      	ldr	r3, [r7, #4]
 8009418:	4a30      	ldr	r2, [pc, #192]	; (80094dc <TIM_Base_SetConfig+0x128>)
 800941a:	4293      	cmp	r3, r2
 800941c:	d01f      	beq.n	800945e <TIM_Base_SetConfig+0xaa>
 800941e:	687b      	ldr	r3, [r7, #4]
 8009420:	4a2f      	ldr	r2, [pc, #188]	; (80094e0 <TIM_Base_SetConfig+0x12c>)
 8009422:	4293      	cmp	r3, r2
 8009424:	d01b      	beq.n	800945e <TIM_Base_SetConfig+0xaa>
 8009426:	687b      	ldr	r3, [r7, #4]
 8009428:	4a2e      	ldr	r2, [pc, #184]	; (80094e4 <TIM_Base_SetConfig+0x130>)
 800942a:	4293      	cmp	r3, r2
 800942c:	d017      	beq.n	800945e <TIM_Base_SetConfig+0xaa>
 800942e:	687b      	ldr	r3, [r7, #4]
 8009430:	4a2d      	ldr	r2, [pc, #180]	; (80094e8 <TIM_Base_SetConfig+0x134>)
 8009432:	4293      	cmp	r3, r2
 8009434:	d013      	beq.n	800945e <TIM_Base_SetConfig+0xaa>
 8009436:	687b      	ldr	r3, [r7, #4]
 8009438:	4a2c      	ldr	r2, [pc, #176]	; (80094ec <TIM_Base_SetConfig+0x138>)
 800943a:	4293      	cmp	r3, r2
 800943c:	d00f      	beq.n	800945e <TIM_Base_SetConfig+0xaa>
 800943e:	687b      	ldr	r3, [r7, #4]
 8009440:	4a2b      	ldr	r2, [pc, #172]	; (80094f0 <TIM_Base_SetConfig+0x13c>)
 8009442:	4293      	cmp	r3, r2
 8009444:	d00b      	beq.n	800945e <TIM_Base_SetConfig+0xaa>
 8009446:	687b      	ldr	r3, [r7, #4]
 8009448:	4a2a      	ldr	r2, [pc, #168]	; (80094f4 <TIM_Base_SetConfig+0x140>)
 800944a:	4293      	cmp	r3, r2
 800944c:	d007      	beq.n	800945e <TIM_Base_SetConfig+0xaa>
 800944e:	687b      	ldr	r3, [r7, #4]
 8009450:	4a29      	ldr	r2, [pc, #164]	; (80094f8 <TIM_Base_SetConfig+0x144>)
 8009452:	4293      	cmp	r3, r2
 8009454:	d003      	beq.n	800945e <TIM_Base_SetConfig+0xaa>
 8009456:	687b      	ldr	r3, [r7, #4]
 8009458:	4a28      	ldr	r2, [pc, #160]	; (80094fc <TIM_Base_SetConfig+0x148>)
 800945a:	4293      	cmp	r3, r2
 800945c:	d108      	bne.n	8009470 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800945e:	68fb      	ldr	r3, [r7, #12]
 8009460:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009464:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8009466:	683b      	ldr	r3, [r7, #0]
 8009468:	68db      	ldr	r3, [r3, #12]
 800946a:	68fa      	ldr	r2, [r7, #12]
 800946c:	4313      	orrs	r3, r2
 800946e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8009470:	68fb      	ldr	r3, [r7, #12]
 8009472:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8009476:	683b      	ldr	r3, [r7, #0]
 8009478:	695b      	ldr	r3, [r3, #20]
 800947a:	4313      	orrs	r3, r2
 800947c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800947e:	687b      	ldr	r3, [r7, #4]
 8009480:	68fa      	ldr	r2, [r7, #12]
 8009482:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8009484:	683b      	ldr	r3, [r7, #0]
 8009486:	689a      	ldr	r2, [r3, #8]
 8009488:	687b      	ldr	r3, [r7, #4]
 800948a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800948c:	683b      	ldr	r3, [r7, #0]
 800948e:	681a      	ldr	r2, [r3, #0]
 8009490:	687b      	ldr	r3, [r7, #4]
 8009492:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8009494:	687b      	ldr	r3, [r7, #4]
 8009496:	4a10      	ldr	r2, [pc, #64]	; (80094d8 <TIM_Base_SetConfig+0x124>)
 8009498:	4293      	cmp	r3, r2
 800949a:	d00f      	beq.n	80094bc <TIM_Base_SetConfig+0x108>
 800949c:	687b      	ldr	r3, [r7, #4]
 800949e:	4a12      	ldr	r2, [pc, #72]	; (80094e8 <TIM_Base_SetConfig+0x134>)
 80094a0:	4293      	cmp	r3, r2
 80094a2:	d00b      	beq.n	80094bc <TIM_Base_SetConfig+0x108>
 80094a4:	687b      	ldr	r3, [r7, #4]
 80094a6:	4a11      	ldr	r2, [pc, #68]	; (80094ec <TIM_Base_SetConfig+0x138>)
 80094a8:	4293      	cmp	r3, r2
 80094aa:	d007      	beq.n	80094bc <TIM_Base_SetConfig+0x108>
 80094ac:	687b      	ldr	r3, [r7, #4]
 80094ae:	4a10      	ldr	r2, [pc, #64]	; (80094f0 <TIM_Base_SetConfig+0x13c>)
 80094b0:	4293      	cmp	r3, r2
 80094b2:	d003      	beq.n	80094bc <TIM_Base_SetConfig+0x108>
 80094b4:	687b      	ldr	r3, [r7, #4]
 80094b6:	4a0f      	ldr	r2, [pc, #60]	; (80094f4 <TIM_Base_SetConfig+0x140>)
 80094b8:	4293      	cmp	r3, r2
 80094ba:	d103      	bne.n	80094c4 <TIM_Base_SetConfig+0x110>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80094bc:	683b      	ldr	r3, [r7, #0]
 80094be:	691a      	ldr	r2, [r3, #16]
 80094c0:	687b      	ldr	r3, [r7, #4]
 80094c2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80094c4:	687b      	ldr	r3, [r7, #4]
 80094c6:	2201      	movs	r2, #1
 80094c8:	615a      	str	r2, [r3, #20]
}
 80094ca:	bf00      	nop
 80094cc:	3714      	adds	r7, #20
 80094ce:	46bd      	mov	sp, r7
 80094d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094d4:	4770      	bx	lr
 80094d6:	bf00      	nop
 80094d8:	40010000 	.word	0x40010000
 80094dc:	40000400 	.word	0x40000400
 80094e0:	40000800 	.word	0x40000800
 80094e4:	40000c00 	.word	0x40000c00
 80094e8:	40010400 	.word	0x40010400
 80094ec:	40014000 	.word	0x40014000
 80094f0:	40014400 	.word	0x40014400
 80094f4:	40014800 	.word	0x40014800
 80094f8:	4000e000 	.word	0x4000e000
 80094fc:	4000e400 	.word	0x4000e400

08009500 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8009500:	b480      	push	{r7}
 8009502:	b087      	sub	sp, #28
 8009504:	af00      	add	r7, sp, #0
 8009506:	60f8      	str	r0, [r7, #12]
 8009508:	60b9      	str	r1, [r7, #8]
 800950a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800950c:	68fb      	ldr	r3, [r7, #12]
 800950e:	6a1b      	ldr	r3, [r3, #32]
 8009510:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8009512:	68fb      	ldr	r3, [r7, #12]
 8009514:	6a1b      	ldr	r3, [r3, #32]
 8009516:	f023 0201 	bic.w	r2, r3, #1
 800951a:	68fb      	ldr	r3, [r7, #12]
 800951c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800951e:	68fb      	ldr	r3, [r7, #12]
 8009520:	699b      	ldr	r3, [r3, #24]
 8009522:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8009524:	693b      	ldr	r3, [r7, #16]
 8009526:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800952a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800952c:	687b      	ldr	r3, [r7, #4]
 800952e:	011b      	lsls	r3, r3, #4
 8009530:	693a      	ldr	r2, [r7, #16]
 8009532:	4313      	orrs	r3, r2
 8009534:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8009536:	697b      	ldr	r3, [r7, #20]
 8009538:	f023 030a 	bic.w	r3, r3, #10
 800953c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800953e:	697a      	ldr	r2, [r7, #20]
 8009540:	68bb      	ldr	r3, [r7, #8]
 8009542:	4313      	orrs	r3, r2
 8009544:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8009546:	68fb      	ldr	r3, [r7, #12]
 8009548:	693a      	ldr	r2, [r7, #16]
 800954a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800954c:	68fb      	ldr	r3, [r7, #12]
 800954e:	697a      	ldr	r2, [r7, #20]
 8009550:	621a      	str	r2, [r3, #32]
}
 8009552:	bf00      	nop
 8009554:	371c      	adds	r7, #28
 8009556:	46bd      	mov	sp, r7
 8009558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800955c:	4770      	bx	lr

0800955e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800955e:	b480      	push	{r7}
 8009560:	b087      	sub	sp, #28
 8009562:	af00      	add	r7, sp, #0
 8009564:	60f8      	str	r0, [r7, #12]
 8009566:	60b9      	str	r1, [r7, #8]
 8009568:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800956a:	68fb      	ldr	r3, [r7, #12]
 800956c:	6a1b      	ldr	r3, [r3, #32]
 800956e:	f023 0210 	bic.w	r2, r3, #16
 8009572:	68fb      	ldr	r3, [r7, #12]
 8009574:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009576:	68fb      	ldr	r3, [r7, #12]
 8009578:	699b      	ldr	r3, [r3, #24]
 800957a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800957c:	68fb      	ldr	r3, [r7, #12]
 800957e:	6a1b      	ldr	r3, [r3, #32]
 8009580:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8009582:	697b      	ldr	r3, [r7, #20]
 8009584:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8009588:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800958a:	687b      	ldr	r3, [r7, #4]
 800958c:	031b      	lsls	r3, r3, #12
 800958e:	697a      	ldr	r2, [r7, #20]
 8009590:	4313      	orrs	r3, r2
 8009592:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8009594:	693b      	ldr	r3, [r7, #16]
 8009596:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800959a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800959c:	68bb      	ldr	r3, [r7, #8]
 800959e:	011b      	lsls	r3, r3, #4
 80095a0:	693a      	ldr	r2, [r7, #16]
 80095a2:	4313      	orrs	r3, r2
 80095a4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80095a6:	68fb      	ldr	r3, [r7, #12]
 80095a8:	697a      	ldr	r2, [r7, #20]
 80095aa:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80095ac:	68fb      	ldr	r3, [r7, #12]
 80095ae:	693a      	ldr	r2, [r7, #16]
 80095b0:	621a      	str	r2, [r3, #32]
}
 80095b2:	bf00      	nop
 80095b4:	371c      	adds	r7, #28
 80095b6:	46bd      	mov	sp, r7
 80095b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095bc:	4770      	bx	lr
	...

080095c0 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80095c0:	b480      	push	{r7}
 80095c2:	b085      	sub	sp, #20
 80095c4:	af00      	add	r7, sp, #0
 80095c6:	6078      	str	r0, [r7, #4]
 80095c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80095ca:	687b      	ldr	r3, [r7, #4]
 80095cc:	689b      	ldr	r3, [r3, #8]
 80095ce:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80095d0:	68fa      	ldr	r2, [r7, #12]
 80095d2:	4b09      	ldr	r3, [pc, #36]	; (80095f8 <TIM_ITRx_SetConfig+0x38>)
 80095d4:	4013      	ands	r3, r2
 80095d6:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80095d8:	683a      	ldr	r2, [r7, #0]
 80095da:	68fb      	ldr	r3, [r7, #12]
 80095dc:	4313      	orrs	r3, r2
 80095de:	f043 0307 	orr.w	r3, r3, #7
 80095e2:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80095e4:	687b      	ldr	r3, [r7, #4]
 80095e6:	68fa      	ldr	r2, [r7, #12]
 80095e8:	609a      	str	r2, [r3, #8]
}
 80095ea:	bf00      	nop
 80095ec:	3714      	adds	r7, #20
 80095ee:	46bd      	mov	sp, r7
 80095f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095f4:	4770      	bx	lr
 80095f6:	bf00      	nop
 80095f8:	ffcfff8f 	.word	0xffcfff8f

080095fc <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80095fc:	b480      	push	{r7}
 80095fe:	b087      	sub	sp, #28
 8009600:	af00      	add	r7, sp, #0
 8009602:	60f8      	str	r0, [r7, #12]
 8009604:	60b9      	str	r1, [r7, #8]
 8009606:	607a      	str	r2, [r7, #4]
 8009608:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800960a:	68fb      	ldr	r3, [r7, #12]
 800960c:	689b      	ldr	r3, [r3, #8]
 800960e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8009610:	697b      	ldr	r3, [r7, #20]
 8009612:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8009616:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8009618:	683b      	ldr	r3, [r7, #0]
 800961a:	021a      	lsls	r2, r3, #8
 800961c:	687b      	ldr	r3, [r7, #4]
 800961e:	431a      	orrs	r2, r3
 8009620:	68bb      	ldr	r3, [r7, #8]
 8009622:	4313      	orrs	r3, r2
 8009624:	697a      	ldr	r2, [r7, #20]
 8009626:	4313      	orrs	r3, r2
 8009628:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800962a:	68fb      	ldr	r3, [r7, #12]
 800962c:	697a      	ldr	r2, [r7, #20]
 800962e:	609a      	str	r2, [r3, #8]
}
 8009630:	bf00      	nop
 8009632:	371c      	adds	r7, #28
 8009634:	46bd      	mov	sp, r7
 8009636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800963a:	4770      	bx	lr

0800963c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800963c:	b480      	push	{r7}
 800963e:	b085      	sub	sp, #20
 8009640:	af00      	add	r7, sp, #0
 8009642:	6078      	str	r0, [r7, #4]
 8009644:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8009646:	687b      	ldr	r3, [r7, #4]
 8009648:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800964c:	2b01      	cmp	r3, #1
 800964e:	d101      	bne.n	8009654 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8009650:	2302      	movs	r3, #2
 8009652:	e077      	b.n	8009744 <HAL_TIMEx_MasterConfigSynchronization+0x108>
 8009654:	687b      	ldr	r3, [r7, #4]
 8009656:	2201      	movs	r2, #1
 8009658:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800965c:	687b      	ldr	r3, [r7, #4]
 800965e:	2202      	movs	r2, #2
 8009660:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8009664:	687b      	ldr	r3, [r7, #4]
 8009666:	681b      	ldr	r3, [r3, #0]
 8009668:	685b      	ldr	r3, [r3, #4]
 800966a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800966c:	687b      	ldr	r3, [r7, #4]
 800966e:	681b      	ldr	r3, [r3, #0]
 8009670:	689b      	ldr	r3, [r3, #8]
 8009672:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8009674:	687b      	ldr	r3, [r7, #4]
 8009676:	681b      	ldr	r3, [r3, #0]
 8009678:	4a35      	ldr	r2, [pc, #212]	; (8009750 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800967a:	4293      	cmp	r3, r2
 800967c:	d004      	beq.n	8009688 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800967e:	687b      	ldr	r3, [r7, #4]
 8009680:	681b      	ldr	r3, [r3, #0]
 8009682:	4a34      	ldr	r2, [pc, #208]	; (8009754 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8009684:	4293      	cmp	r3, r2
 8009686:	d108      	bne.n	800969a <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8009688:	68fb      	ldr	r3, [r7, #12]
 800968a:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800968e:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8009690:	683b      	ldr	r3, [r7, #0]
 8009692:	685b      	ldr	r3, [r3, #4]
 8009694:	68fa      	ldr	r2, [r7, #12]
 8009696:	4313      	orrs	r3, r2
 8009698:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800969a:	68fb      	ldr	r3, [r7, #12]
 800969c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80096a0:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80096a2:	683b      	ldr	r3, [r7, #0]
 80096a4:	681b      	ldr	r3, [r3, #0]
 80096a6:	68fa      	ldr	r2, [r7, #12]
 80096a8:	4313      	orrs	r3, r2
 80096aa:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80096ac:	687b      	ldr	r3, [r7, #4]
 80096ae:	681b      	ldr	r3, [r3, #0]
 80096b0:	68fa      	ldr	r2, [r7, #12]
 80096b2:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80096b4:	687b      	ldr	r3, [r7, #4]
 80096b6:	681b      	ldr	r3, [r3, #0]
 80096b8:	4a25      	ldr	r2, [pc, #148]	; (8009750 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 80096ba:	4293      	cmp	r3, r2
 80096bc:	d02c      	beq.n	8009718 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 80096be:	687b      	ldr	r3, [r7, #4]
 80096c0:	681b      	ldr	r3, [r3, #0]
 80096c2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80096c6:	d027      	beq.n	8009718 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 80096c8:	687b      	ldr	r3, [r7, #4]
 80096ca:	681b      	ldr	r3, [r3, #0]
 80096cc:	4a22      	ldr	r2, [pc, #136]	; (8009758 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 80096ce:	4293      	cmp	r3, r2
 80096d0:	d022      	beq.n	8009718 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 80096d2:	687b      	ldr	r3, [r7, #4]
 80096d4:	681b      	ldr	r3, [r3, #0]
 80096d6:	4a21      	ldr	r2, [pc, #132]	; (800975c <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 80096d8:	4293      	cmp	r3, r2
 80096da:	d01d      	beq.n	8009718 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 80096dc:	687b      	ldr	r3, [r7, #4]
 80096de:	681b      	ldr	r3, [r3, #0]
 80096e0:	4a1f      	ldr	r2, [pc, #124]	; (8009760 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 80096e2:	4293      	cmp	r3, r2
 80096e4:	d018      	beq.n	8009718 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 80096e6:	687b      	ldr	r3, [r7, #4]
 80096e8:	681b      	ldr	r3, [r3, #0]
 80096ea:	4a1a      	ldr	r2, [pc, #104]	; (8009754 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 80096ec:	4293      	cmp	r3, r2
 80096ee:	d013      	beq.n	8009718 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 80096f0:	687b      	ldr	r3, [r7, #4]
 80096f2:	681b      	ldr	r3, [r3, #0]
 80096f4:	4a1b      	ldr	r2, [pc, #108]	; (8009764 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 80096f6:	4293      	cmp	r3, r2
 80096f8:	d00e      	beq.n	8009718 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 80096fa:	687b      	ldr	r3, [r7, #4]
 80096fc:	681b      	ldr	r3, [r3, #0]
 80096fe:	4a1a      	ldr	r2, [pc, #104]	; (8009768 <HAL_TIMEx_MasterConfigSynchronization+0x12c>)
 8009700:	4293      	cmp	r3, r2
 8009702:	d009      	beq.n	8009718 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8009704:	687b      	ldr	r3, [r7, #4]
 8009706:	681b      	ldr	r3, [r3, #0]
 8009708:	4a18      	ldr	r2, [pc, #96]	; (800976c <HAL_TIMEx_MasterConfigSynchronization+0x130>)
 800970a:	4293      	cmp	r3, r2
 800970c:	d004      	beq.n	8009718 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800970e:	687b      	ldr	r3, [r7, #4]
 8009710:	681b      	ldr	r3, [r3, #0]
 8009712:	4a17      	ldr	r2, [pc, #92]	; (8009770 <HAL_TIMEx_MasterConfigSynchronization+0x134>)
 8009714:	4293      	cmp	r3, r2
 8009716:	d10c      	bne.n	8009732 <HAL_TIMEx_MasterConfigSynchronization+0xf6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8009718:	68bb      	ldr	r3, [r7, #8]
 800971a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800971e:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8009720:	683b      	ldr	r3, [r7, #0]
 8009722:	689b      	ldr	r3, [r3, #8]
 8009724:	68ba      	ldr	r2, [r7, #8]
 8009726:	4313      	orrs	r3, r2
 8009728:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800972a:	687b      	ldr	r3, [r7, #4]
 800972c:	681b      	ldr	r3, [r3, #0]
 800972e:	68ba      	ldr	r2, [r7, #8]
 8009730:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8009732:	687b      	ldr	r3, [r7, #4]
 8009734:	2201      	movs	r2, #1
 8009736:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800973a:	687b      	ldr	r3, [r7, #4]
 800973c:	2200      	movs	r2, #0
 800973e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8009742:	2300      	movs	r3, #0
}
 8009744:	4618      	mov	r0, r3
 8009746:	3714      	adds	r7, #20
 8009748:	46bd      	mov	sp, r7
 800974a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800974e:	4770      	bx	lr
 8009750:	40010000 	.word	0x40010000
 8009754:	40010400 	.word	0x40010400
 8009758:	40000400 	.word	0x40000400
 800975c:	40000800 	.word	0x40000800
 8009760:	40000c00 	.word	0x40000c00
 8009764:	40001800 	.word	0x40001800
 8009768:	40014000 	.word	0x40014000
 800976c:	4000e000 	.word	0x4000e000
 8009770:	4000e400 	.word	0x4000e400

08009774 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8009774:	b480      	push	{r7}
 8009776:	b083      	sub	sp, #12
 8009778:	af00      	add	r7, sp, #0
 800977a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800977c:	bf00      	nop
 800977e:	370c      	adds	r7, #12
 8009780:	46bd      	mov	sp, r7
 8009782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009786:	4770      	bx	lr

08009788 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8009788:	b480      	push	{r7}
 800978a:	b083      	sub	sp, #12
 800978c:	af00      	add	r7, sp, #0
 800978e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8009790:	bf00      	nop
 8009792:	370c      	adds	r7, #12
 8009794:	46bd      	mov	sp, r7
 8009796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800979a:	4770      	bx	lr

0800979c <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800979c:	b480      	push	{r7}
 800979e:	b083      	sub	sp, #12
 80097a0:	af00      	add	r7, sp, #0
 80097a2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80097a4:	bf00      	nop
 80097a6:	370c      	adds	r7, #12
 80097a8:	46bd      	mov	sp, r7
 80097aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097ae:	4770      	bx	lr

080097b0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80097b0:	b580      	push	{r7, lr}
 80097b2:	b082      	sub	sp, #8
 80097b4:	af00      	add	r7, sp, #0
 80097b6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80097b8:	687b      	ldr	r3, [r7, #4]
 80097ba:	2b00      	cmp	r3, #0
 80097bc:	d101      	bne.n	80097c2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80097be:	2301      	movs	r3, #1
 80097c0:	e042      	b.n	8009848 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80097c2:	687b      	ldr	r3, [r7, #4]
 80097c4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80097c8:	2b00      	cmp	r3, #0
 80097ca:	d106      	bne.n	80097da <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80097cc:	687b      	ldr	r3, [r7, #4]
 80097ce:	2200      	movs	r2, #0
 80097d0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80097d4:	6878      	ldr	r0, [r7, #4]
 80097d6:	f7f7 fdcd 	bl	8001374 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80097da:	687b      	ldr	r3, [r7, #4]
 80097dc:	2224      	movs	r2, #36	; 0x24
 80097de:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 80097e2:	687b      	ldr	r3, [r7, #4]
 80097e4:	681b      	ldr	r3, [r3, #0]
 80097e6:	681a      	ldr	r2, [r3, #0]
 80097e8:	687b      	ldr	r3, [r7, #4]
 80097ea:	681b      	ldr	r3, [r3, #0]
 80097ec:	f022 0201 	bic.w	r2, r2, #1
 80097f0:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80097f2:	6878      	ldr	r0, [r7, #4]
 80097f4:	f000 f82c 	bl	8009850 <UART_SetConfig>
 80097f8:	4603      	mov	r3, r0
 80097fa:	2b01      	cmp	r3, #1
 80097fc:	d101      	bne.n	8009802 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 80097fe:	2301      	movs	r3, #1
 8009800:	e022      	b.n	8009848 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8009802:	687b      	ldr	r3, [r7, #4]
 8009804:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009806:	2b00      	cmp	r3, #0
 8009808:	d002      	beq.n	8009810 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 800980a:	6878      	ldr	r0, [r7, #4]
 800980c:	f000 fe7e 	bl	800a50c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8009810:	687b      	ldr	r3, [r7, #4]
 8009812:	681b      	ldr	r3, [r3, #0]
 8009814:	685a      	ldr	r2, [r3, #4]
 8009816:	687b      	ldr	r3, [r7, #4]
 8009818:	681b      	ldr	r3, [r3, #0]
 800981a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800981e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8009820:	687b      	ldr	r3, [r7, #4]
 8009822:	681b      	ldr	r3, [r3, #0]
 8009824:	689a      	ldr	r2, [r3, #8]
 8009826:	687b      	ldr	r3, [r7, #4]
 8009828:	681b      	ldr	r3, [r3, #0]
 800982a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800982e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8009830:	687b      	ldr	r3, [r7, #4]
 8009832:	681b      	ldr	r3, [r3, #0]
 8009834:	681a      	ldr	r2, [r3, #0]
 8009836:	687b      	ldr	r3, [r7, #4]
 8009838:	681b      	ldr	r3, [r3, #0]
 800983a:	f042 0201 	orr.w	r2, r2, #1
 800983e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8009840:	6878      	ldr	r0, [r7, #4]
 8009842:	f000 ff05 	bl	800a650 <UART_CheckIdleState>
 8009846:	4603      	mov	r3, r0
}
 8009848:	4618      	mov	r0, r3
 800984a:	3708      	adds	r7, #8
 800984c:	46bd      	mov	sp, r7
 800984e:	bd80      	pop	{r7, pc}

08009850 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8009850:	b5b0      	push	{r4, r5, r7, lr}
 8009852:	b08e      	sub	sp, #56	; 0x38
 8009854:	af00      	add	r7, sp, #0
 8009856:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8009858:	2300      	movs	r3, #0
 800985a:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800985e:	687b      	ldr	r3, [r7, #4]
 8009860:	689a      	ldr	r2, [r3, #8]
 8009862:	687b      	ldr	r3, [r7, #4]
 8009864:	691b      	ldr	r3, [r3, #16]
 8009866:	431a      	orrs	r2, r3
 8009868:	687b      	ldr	r3, [r7, #4]
 800986a:	695b      	ldr	r3, [r3, #20]
 800986c:	431a      	orrs	r2, r3
 800986e:	687b      	ldr	r3, [r7, #4]
 8009870:	69db      	ldr	r3, [r3, #28]
 8009872:	4313      	orrs	r3, r2
 8009874:	637b      	str	r3, [r7, #52]	; 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8009876:	687b      	ldr	r3, [r7, #4]
 8009878:	681b      	ldr	r3, [r3, #0]
 800987a:	681a      	ldr	r2, [r3, #0]
 800987c:	4bbf      	ldr	r3, [pc, #764]	; (8009b7c <UART_SetConfig+0x32c>)
 800987e:	4013      	ands	r3, r2
 8009880:	687a      	ldr	r2, [r7, #4]
 8009882:	6812      	ldr	r2, [r2, #0]
 8009884:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8009886:	430b      	orrs	r3, r1
 8009888:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800988a:	687b      	ldr	r3, [r7, #4]
 800988c:	681b      	ldr	r3, [r3, #0]
 800988e:	685b      	ldr	r3, [r3, #4]
 8009890:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8009894:	687b      	ldr	r3, [r7, #4]
 8009896:	68da      	ldr	r2, [r3, #12]
 8009898:	687b      	ldr	r3, [r7, #4]
 800989a:	681b      	ldr	r3, [r3, #0]
 800989c:	430a      	orrs	r2, r1
 800989e:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80098a0:	687b      	ldr	r3, [r7, #4]
 80098a2:	699b      	ldr	r3, [r3, #24]
 80098a4:	637b      	str	r3, [r7, #52]	; 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80098a6:	687b      	ldr	r3, [r7, #4]
 80098a8:	681b      	ldr	r3, [r3, #0]
 80098aa:	4ab5      	ldr	r2, [pc, #724]	; (8009b80 <UART_SetConfig+0x330>)
 80098ac:	4293      	cmp	r3, r2
 80098ae:	d004      	beq.n	80098ba <UART_SetConfig+0x6a>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80098b0:	687b      	ldr	r3, [r7, #4]
 80098b2:	6a1b      	ldr	r3, [r3, #32]
 80098b4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80098b6:	4313      	orrs	r3, r2
 80098b8:	637b      	str	r3, [r7, #52]	; 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80098ba:	687b      	ldr	r3, [r7, #4]
 80098bc:	681b      	ldr	r3, [r3, #0]
 80098be:	689a      	ldr	r2, [r3, #8]
 80098c0:	4bb0      	ldr	r3, [pc, #704]	; (8009b84 <UART_SetConfig+0x334>)
 80098c2:	4013      	ands	r3, r2
 80098c4:	687a      	ldr	r2, [r7, #4]
 80098c6:	6812      	ldr	r2, [r2, #0]
 80098c8:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80098ca:	430b      	orrs	r3, r1
 80098cc:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80098ce:	687b      	ldr	r3, [r7, #4]
 80098d0:	681b      	ldr	r3, [r3, #0]
 80098d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80098d4:	f023 010f 	bic.w	r1, r3, #15
 80098d8:	687b      	ldr	r3, [r7, #4]
 80098da:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80098dc:	687b      	ldr	r3, [r7, #4]
 80098de:	681b      	ldr	r3, [r3, #0]
 80098e0:	430a      	orrs	r2, r1
 80098e2:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80098e4:	687b      	ldr	r3, [r7, #4]
 80098e6:	681b      	ldr	r3, [r3, #0]
 80098e8:	4aa7      	ldr	r2, [pc, #668]	; (8009b88 <UART_SetConfig+0x338>)
 80098ea:	4293      	cmp	r3, r2
 80098ec:	d176      	bne.n	80099dc <UART_SetConfig+0x18c>
 80098ee:	4ba7      	ldr	r3, [pc, #668]	; (8009b8c <UART_SetConfig+0x33c>)
 80098f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80098f2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80098f6:	2b28      	cmp	r3, #40	; 0x28
 80098f8:	d86c      	bhi.n	80099d4 <UART_SetConfig+0x184>
 80098fa:	a201      	add	r2, pc, #4	; (adr r2, 8009900 <UART_SetConfig+0xb0>)
 80098fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009900:	080099a5 	.word	0x080099a5
 8009904:	080099d5 	.word	0x080099d5
 8009908:	080099d5 	.word	0x080099d5
 800990c:	080099d5 	.word	0x080099d5
 8009910:	080099d5 	.word	0x080099d5
 8009914:	080099d5 	.word	0x080099d5
 8009918:	080099d5 	.word	0x080099d5
 800991c:	080099d5 	.word	0x080099d5
 8009920:	080099ad 	.word	0x080099ad
 8009924:	080099d5 	.word	0x080099d5
 8009928:	080099d5 	.word	0x080099d5
 800992c:	080099d5 	.word	0x080099d5
 8009930:	080099d5 	.word	0x080099d5
 8009934:	080099d5 	.word	0x080099d5
 8009938:	080099d5 	.word	0x080099d5
 800993c:	080099d5 	.word	0x080099d5
 8009940:	080099b5 	.word	0x080099b5
 8009944:	080099d5 	.word	0x080099d5
 8009948:	080099d5 	.word	0x080099d5
 800994c:	080099d5 	.word	0x080099d5
 8009950:	080099d5 	.word	0x080099d5
 8009954:	080099d5 	.word	0x080099d5
 8009958:	080099d5 	.word	0x080099d5
 800995c:	080099d5 	.word	0x080099d5
 8009960:	080099bd 	.word	0x080099bd
 8009964:	080099d5 	.word	0x080099d5
 8009968:	080099d5 	.word	0x080099d5
 800996c:	080099d5 	.word	0x080099d5
 8009970:	080099d5 	.word	0x080099d5
 8009974:	080099d5 	.word	0x080099d5
 8009978:	080099d5 	.word	0x080099d5
 800997c:	080099d5 	.word	0x080099d5
 8009980:	080099c5 	.word	0x080099c5
 8009984:	080099d5 	.word	0x080099d5
 8009988:	080099d5 	.word	0x080099d5
 800998c:	080099d5 	.word	0x080099d5
 8009990:	080099d5 	.word	0x080099d5
 8009994:	080099d5 	.word	0x080099d5
 8009998:	080099d5 	.word	0x080099d5
 800999c:	080099d5 	.word	0x080099d5
 80099a0:	080099cd 	.word	0x080099cd
 80099a4:	2301      	movs	r3, #1
 80099a6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80099aa:	e326      	b.n	8009ffa <UART_SetConfig+0x7aa>
 80099ac:	2304      	movs	r3, #4
 80099ae:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80099b2:	e322      	b.n	8009ffa <UART_SetConfig+0x7aa>
 80099b4:	2308      	movs	r3, #8
 80099b6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80099ba:	e31e      	b.n	8009ffa <UART_SetConfig+0x7aa>
 80099bc:	2310      	movs	r3, #16
 80099be:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80099c2:	e31a      	b.n	8009ffa <UART_SetConfig+0x7aa>
 80099c4:	2320      	movs	r3, #32
 80099c6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80099ca:	e316      	b.n	8009ffa <UART_SetConfig+0x7aa>
 80099cc:	2340      	movs	r3, #64	; 0x40
 80099ce:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80099d2:	e312      	b.n	8009ffa <UART_SetConfig+0x7aa>
 80099d4:	2380      	movs	r3, #128	; 0x80
 80099d6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80099da:	e30e      	b.n	8009ffa <UART_SetConfig+0x7aa>
 80099dc:	687b      	ldr	r3, [r7, #4]
 80099de:	681b      	ldr	r3, [r3, #0]
 80099e0:	4a6b      	ldr	r2, [pc, #428]	; (8009b90 <UART_SetConfig+0x340>)
 80099e2:	4293      	cmp	r3, r2
 80099e4:	d130      	bne.n	8009a48 <UART_SetConfig+0x1f8>
 80099e6:	4b69      	ldr	r3, [pc, #420]	; (8009b8c <UART_SetConfig+0x33c>)
 80099e8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80099ea:	f003 0307 	and.w	r3, r3, #7
 80099ee:	2b05      	cmp	r3, #5
 80099f0:	d826      	bhi.n	8009a40 <UART_SetConfig+0x1f0>
 80099f2:	a201      	add	r2, pc, #4	; (adr r2, 80099f8 <UART_SetConfig+0x1a8>)
 80099f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80099f8:	08009a11 	.word	0x08009a11
 80099fc:	08009a19 	.word	0x08009a19
 8009a00:	08009a21 	.word	0x08009a21
 8009a04:	08009a29 	.word	0x08009a29
 8009a08:	08009a31 	.word	0x08009a31
 8009a0c:	08009a39 	.word	0x08009a39
 8009a10:	2300      	movs	r3, #0
 8009a12:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009a16:	e2f0      	b.n	8009ffa <UART_SetConfig+0x7aa>
 8009a18:	2304      	movs	r3, #4
 8009a1a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009a1e:	e2ec      	b.n	8009ffa <UART_SetConfig+0x7aa>
 8009a20:	2308      	movs	r3, #8
 8009a22:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009a26:	e2e8      	b.n	8009ffa <UART_SetConfig+0x7aa>
 8009a28:	2310      	movs	r3, #16
 8009a2a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009a2e:	e2e4      	b.n	8009ffa <UART_SetConfig+0x7aa>
 8009a30:	2320      	movs	r3, #32
 8009a32:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009a36:	e2e0      	b.n	8009ffa <UART_SetConfig+0x7aa>
 8009a38:	2340      	movs	r3, #64	; 0x40
 8009a3a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009a3e:	e2dc      	b.n	8009ffa <UART_SetConfig+0x7aa>
 8009a40:	2380      	movs	r3, #128	; 0x80
 8009a42:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009a46:	e2d8      	b.n	8009ffa <UART_SetConfig+0x7aa>
 8009a48:	687b      	ldr	r3, [r7, #4]
 8009a4a:	681b      	ldr	r3, [r3, #0]
 8009a4c:	4a51      	ldr	r2, [pc, #324]	; (8009b94 <UART_SetConfig+0x344>)
 8009a4e:	4293      	cmp	r3, r2
 8009a50:	d130      	bne.n	8009ab4 <UART_SetConfig+0x264>
 8009a52:	4b4e      	ldr	r3, [pc, #312]	; (8009b8c <UART_SetConfig+0x33c>)
 8009a54:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009a56:	f003 0307 	and.w	r3, r3, #7
 8009a5a:	2b05      	cmp	r3, #5
 8009a5c:	d826      	bhi.n	8009aac <UART_SetConfig+0x25c>
 8009a5e:	a201      	add	r2, pc, #4	; (adr r2, 8009a64 <UART_SetConfig+0x214>)
 8009a60:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009a64:	08009a7d 	.word	0x08009a7d
 8009a68:	08009a85 	.word	0x08009a85
 8009a6c:	08009a8d 	.word	0x08009a8d
 8009a70:	08009a95 	.word	0x08009a95
 8009a74:	08009a9d 	.word	0x08009a9d
 8009a78:	08009aa5 	.word	0x08009aa5
 8009a7c:	2300      	movs	r3, #0
 8009a7e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009a82:	e2ba      	b.n	8009ffa <UART_SetConfig+0x7aa>
 8009a84:	2304      	movs	r3, #4
 8009a86:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009a8a:	e2b6      	b.n	8009ffa <UART_SetConfig+0x7aa>
 8009a8c:	2308      	movs	r3, #8
 8009a8e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009a92:	e2b2      	b.n	8009ffa <UART_SetConfig+0x7aa>
 8009a94:	2310      	movs	r3, #16
 8009a96:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009a9a:	e2ae      	b.n	8009ffa <UART_SetConfig+0x7aa>
 8009a9c:	2320      	movs	r3, #32
 8009a9e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009aa2:	e2aa      	b.n	8009ffa <UART_SetConfig+0x7aa>
 8009aa4:	2340      	movs	r3, #64	; 0x40
 8009aa6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009aaa:	e2a6      	b.n	8009ffa <UART_SetConfig+0x7aa>
 8009aac:	2380      	movs	r3, #128	; 0x80
 8009aae:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009ab2:	e2a2      	b.n	8009ffa <UART_SetConfig+0x7aa>
 8009ab4:	687b      	ldr	r3, [r7, #4]
 8009ab6:	681b      	ldr	r3, [r3, #0]
 8009ab8:	4a37      	ldr	r2, [pc, #220]	; (8009b98 <UART_SetConfig+0x348>)
 8009aba:	4293      	cmp	r3, r2
 8009abc:	d130      	bne.n	8009b20 <UART_SetConfig+0x2d0>
 8009abe:	4b33      	ldr	r3, [pc, #204]	; (8009b8c <UART_SetConfig+0x33c>)
 8009ac0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009ac2:	f003 0307 	and.w	r3, r3, #7
 8009ac6:	2b05      	cmp	r3, #5
 8009ac8:	d826      	bhi.n	8009b18 <UART_SetConfig+0x2c8>
 8009aca:	a201      	add	r2, pc, #4	; (adr r2, 8009ad0 <UART_SetConfig+0x280>)
 8009acc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009ad0:	08009ae9 	.word	0x08009ae9
 8009ad4:	08009af1 	.word	0x08009af1
 8009ad8:	08009af9 	.word	0x08009af9
 8009adc:	08009b01 	.word	0x08009b01
 8009ae0:	08009b09 	.word	0x08009b09
 8009ae4:	08009b11 	.word	0x08009b11
 8009ae8:	2300      	movs	r3, #0
 8009aea:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009aee:	e284      	b.n	8009ffa <UART_SetConfig+0x7aa>
 8009af0:	2304      	movs	r3, #4
 8009af2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009af6:	e280      	b.n	8009ffa <UART_SetConfig+0x7aa>
 8009af8:	2308      	movs	r3, #8
 8009afa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009afe:	e27c      	b.n	8009ffa <UART_SetConfig+0x7aa>
 8009b00:	2310      	movs	r3, #16
 8009b02:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009b06:	e278      	b.n	8009ffa <UART_SetConfig+0x7aa>
 8009b08:	2320      	movs	r3, #32
 8009b0a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009b0e:	e274      	b.n	8009ffa <UART_SetConfig+0x7aa>
 8009b10:	2340      	movs	r3, #64	; 0x40
 8009b12:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009b16:	e270      	b.n	8009ffa <UART_SetConfig+0x7aa>
 8009b18:	2380      	movs	r3, #128	; 0x80
 8009b1a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009b1e:	e26c      	b.n	8009ffa <UART_SetConfig+0x7aa>
 8009b20:	687b      	ldr	r3, [r7, #4]
 8009b22:	681b      	ldr	r3, [r3, #0]
 8009b24:	4a1d      	ldr	r2, [pc, #116]	; (8009b9c <UART_SetConfig+0x34c>)
 8009b26:	4293      	cmp	r3, r2
 8009b28:	d142      	bne.n	8009bb0 <UART_SetConfig+0x360>
 8009b2a:	4b18      	ldr	r3, [pc, #96]	; (8009b8c <UART_SetConfig+0x33c>)
 8009b2c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009b2e:	f003 0307 	and.w	r3, r3, #7
 8009b32:	2b05      	cmp	r3, #5
 8009b34:	d838      	bhi.n	8009ba8 <UART_SetConfig+0x358>
 8009b36:	a201      	add	r2, pc, #4	; (adr r2, 8009b3c <UART_SetConfig+0x2ec>)
 8009b38:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009b3c:	08009b55 	.word	0x08009b55
 8009b40:	08009b5d 	.word	0x08009b5d
 8009b44:	08009b65 	.word	0x08009b65
 8009b48:	08009b6d 	.word	0x08009b6d
 8009b4c:	08009b75 	.word	0x08009b75
 8009b50:	08009ba1 	.word	0x08009ba1
 8009b54:	2300      	movs	r3, #0
 8009b56:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009b5a:	e24e      	b.n	8009ffa <UART_SetConfig+0x7aa>
 8009b5c:	2304      	movs	r3, #4
 8009b5e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009b62:	e24a      	b.n	8009ffa <UART_SetConfig+0x7aa>
 8009b64:	2308      	movs	r3, #8
 8009b66:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009b6a:	e246      	b.n	8009ffa <UART_SetConfig+0x7aa>
 8009b6c:	2310      	movs	r3, #16
 8009b6e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009b72:	e242      	b.n	8009ffa <UART_SetConfig+0x7aa>
 8009b74:	2320      	movs	r3, #32
 8009b76:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009b7a:	e23e      	b.n	8009ffa <UART_SetConfig+0x7aa>
 8009b7c:	cfff69f3 	.word	0xcfff69f3
 8009b80:	58000c00 	.word	0x58000c00
 8009b84:	11fff4ff 	.word	0x11fff4ff
 8009b88:	40011000 	.word	0x40011000
 8009b8c:	58024400 	.word	0x58024400
 8009b90:	40004400 	.word	0x40004400
 8009b94:	40004800 	.word	0x40004800
 8009b98:	40004c00 	.word	0x40004c00
 8009b9c:	40005000 	.word	0x40005000
 8009ba0:	2340      	movs	r3, #64	; 0x40
 8009ba2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009ba6:	e228      	b.n	8009ffa <UART_SetConfig+0x7aa>
 8009ba8:	2380      	movs	r3, #128	; 0x80
 8009baa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009bae:	e224      	b.n	8009ffa <UART_SetConfig+0x7aa>
 8009bb0:	687b      	ldr	r3, [r7, #4]
 8009bb2:	681b      	ldr	r3, [r3, #0]
 8009bb4:	4ab1      	ldr	r2, [pc, #708]	; (8009e7c <UART_SetConfig+0x62c>)
 8009bb6:	4293      	cmp	r3, r2
 8009bb8:	d176      	bne.n	8009ca8 <UART_SetConfig+0x458>
 8009bba:	4bb1      	ldr	r3, [pc, #708]	; (8009e80 <UART_SetConfig+0x630>)
 8009bbc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009bbe:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8009bc2:	2b28      	cmp	r3, #40	; 0x28
 8009bc4:	d86c      	bhi.n	8009ca0 <UART_SetConfig+0x450>
 8009bc6:	a201      	add	r2, pc, #4	; (adr r2, 8009bcc <UART_SetConfig+0x37c>)
 8009bc8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009bcc:	08009c71 	.word	0x08009c71
 8009bd0:	08009ca1 	.word	0x08009ca1
 8009bd4:	08009ca1 	.word	0x08009ca1
 8009bd8:	08009ca1 	.word	0x08009ca1
 8009bdc:	08009ca1 	.word	0x08009ca1
 8009be0:	08009ca1 	.word	0x08009ca1
 8009be4:	08009ca1 	.word	0x08009ca1
 8009be8:	08009ca1 	.word	0x08009ca1
 8009bec:	08009c79 	.word	0x08009c79
 8009bf0:	08009ca1 	.word	0x08009ca1
 8009bf4:	08009ca1 	.word	0x08009ca1
 8009bf8:	08009ca1 	.word	0x08009ca1
 8009bfc:	08009ca1 	.word	0x08009ca1
 8009c00:	08009ca1 	.word	0x08009ca1
 8009c04:	08009ca1 	.word	0x08009ca1
 8009c08:	08009ca1 	.word	0x08009ca1
 8009c0c:	08009c81 	.word	0x08009c81
 8009c10:	08009ca1 	.word	0x08009ca1
 8009c14:	08009ca1 	.word	0x08009ca1
 8009c18:	08009ca1 	.word	0x08009ca1
 8009c1c:	08009ca1 	.word	0x08009ca1
 8009c20:	08009ca1 	.word	0x08009ca1
 8009c24:	08009ca1 	.word	0x08009ca1
 8009c28:	08009ca1 	.word	0x08009ca1
 8009c2c:	08009c89 	.word	0x08009c89
 8009c30:	08009ca1 	.word	0x08009ca1
 8009c34:	08009ca1 	.word	0x08009ca1
 8009c38:	08009ca1 	.word	0x08009ca1
 8009c3c:	08009ca1 	.word	0x08009ca1
 8009c40:	08009ca1 	.word	0x08009ca1
 8009c44:	08009ca1 	.word	0x08009ca1
 8009c48:	08009ca1 	.word	0x08009ca1
 8009c4c:	08009c91 	.word	0x08009c91
 8009c50:	08009ca1 	.word	0x08009ca1
 8009c54:	08009ca1 	.word	0x08009ca1
 8009c58:	08009ca1 	.word	0x08009ca1
 8009c5c:	08009ca1 	.word	0x08009ca1
 8009c60:	08009ca1 	.word	0x08009ca1
 8009c64:	08009ca1 	.word	0x08009ca1
 8009c68:	08009ca1 	.word	0x08009ca1
 8009c6c:	08009c99 	.word	0x08009c99
 8009c70:	2301      	movs	r3, #1
 8009c72:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009c76:	e1c0      	b.n	8009ffa <UART_SetConfig+0x7aa>
 8009c78:	2304      	movs	r3, #4
 8009c7a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009c7e:	e1bc      	b.n	8009ffa <UART_SetConfig+0x7aa>
 8009c80:	2308      	movs	r3, #8
 8009c82:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009c86:	e1b8      	b.n	8009ffa <UART_SetConfig+0x7aa>
 8009c88:	2310      	movs	r3, #16
 8009c8a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009c8e:	e1b4      	b.n	8009ffa <UART_SetConfig+0x7aa>
 8009c90:	2320      	movs	r3, #32
 8009c92:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009c96:	e1b0      	b.n	8009ffa <UART_SetConfig+0x7aa>
 8009c98:	2340      	movs	r3, #64	; 0x40
 8009c9a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009c9e:	e1ac      	b.n	8009ffa <UART_SetConfig+0x7aa>
 8009ca0:	2380      	movs	r3, #128	; 0x80
 8009ca2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009ca6:	e1a8      	b.n	8009ffa <UART_SetConfig+0x7aa>
 8009ca8:	687b      	ldr	r3, [r7, #4]
 8009caa:	681b      	ldr	r3, [r3, #0]
 8009cac:	4a75      	ldr	r2, [pc, #468]	; (8009e84 <UART_SetConfig+0x634>)
 8009cae:	4293      	cmp	r3, r2
 8009cb0:	d130      	bne.n	8009d14 <UART_SetConfig+0x4c4>
 8009cb2:	4b73      	ldr	r3, [pc, #460]	; (8009e80 <UART_SetConfig+0x630>)
 8009cb4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009cb6:	f003 0307 	and.w	r3, r3, #7
 8009cba:	2b05      	cmp	r3, #5
 8009cbc:	d826      	bhi.n	8009d0c <UART_SetConfig+0x4bc>
 8009cbe:	a201      	add	r2, pc, #4	; (adr r2, 8009cc4 <UART_SetConfig+0x474>)
 8009cc0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009cc4:	08009cdd 	.word	0x08009cdd
 8009cc8:	08009ce5 	.word	0x08009ce5
 8009ccc:	08009ced 	.word	0x08009ced
 8009cd0:	08009cf5 	.word	0x08009cf5
 8009cd4:	08009cfd 	.word	0x08009cfd
 8009cd8:	08009d05 	.word	0x08009d05
 8009cdc:	2300      	movs	r3, #0
 8009cde:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009ce2:	e18a      	b.n	8009ffa <UART_SetConfig+0x7aa>
 8009ce4:	2304      	movs	r3, #4
 8009ce6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009cea:	e186      	b.n	8009ffa <UART_SetConfig+0x7aa>
 8009cec:	2308      	movs	r3, #8
 8009cee:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009cf2:	e182      	b.n	8009ffa <UART_SetConfig+0x7aa>
 8009cf4:	2310      	movs	r3, #16
 8009cf6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009cfa:	e17e      	b.n	8009ffa <UART_SetConfig+0x7aa>
 8009cfc:	2320      	movs	r3, #32
 8009cfe:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009d02:	e17a      	b.n	8009ffa <UART_SetConfig+0x7aa>
 8009d04:	2340      	movs	r3, #64	; 0x40
 8009d06:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009d0a:	e176      	b.n	8009ffa <UART_SetConfig+0x7aa>
 8009d0c:	2380      	movs	r3, #128	; 0x80
 8009d0e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009d12:	e172      	b.n	8009ffa <UART_SetConfig+0x7aa>
 8009d14:	687b      	ldr	r3, [r7, #4]
 8009d16:	681b      	ldr	r3, [r3, #0]
 8009d18:	4a5b      	ldr	r2, [pc, #364]	; (8009e88 <UART_SetConfig+0x638>)
 8009d1a:	4293      	cmp	r3, r2
 8009d1c:	d130      	bne.n	8009d80 <UART_SetConfig+0x530>
 8009d1e:	4b58      	ldr	r3, [pc, #352]	; (8009e80 <UART_SetConfig+0x630>)
 8009d20:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009d22:	f003 0307 	and.w	r3, r3, #7
 8009d26:	2b05      	cmp	r3, #5
 8009d28:	d826      	bhi.n	8009d78 <UART_SetConfig+0x528>
 8009d2a:	a201      	add	r2, pc, #4	; (adr r2, 8009d30 <UART_SetConfig+0x4e0>)
 8009d2c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009d30:	08009d49 	.word	0x08009d49
 8009d34:	08009d51 	.word	0x08009d51
 8009d38:	08009d59 	.word	0x08009d59
 8009d3c:	08009d61 	.word	0x08009d61
 8009d40:	08009d69 	.word	0x08009d69
 8009d44:	08009d71 	.word	0x08009d71
 8009d48:	2300      	movs	r3, #0
 8009d4a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009d4e:	e154      	b.n	8009ffa <UART_SetConfig+0x7aa>
 8009d50:	2304      	movs	r3, #4
 8009d52:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009d56:	e150      	b.n	8009ffa <UART_SetConfig+0x7aa>
 8009d58:	2308      	movs	r3, #8
 8009d5a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009d5e:	e14c      	b.n	8009ffa <UART_SetConfig+0x7aa>
 8009d60:	2310      	movs	r3, #16
 8009d62:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009d66:	e148      	b.n	8009ffa <UART_SetConfig+0x7aa>
 8009d68:	2320      	movs	r3, #32
 8009d6a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009d6e:	e144      	b.n	8009ffa <UART_SetConfig+0x7aa>
 8009d70:	2340      	movs	r3, #64	; 0x40
 8009d72:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009d76:	e140      	b.n	8009ffa <UART_SetConfig+0x7aa>
 8009d78:	2380      	movs	r3, #128	; 0x80
 8009d7a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009d7e:	e13c      	b.n	8009ffa <UART_SetConfig+0x7aa>
 8009d80:	687b      	ldr	r3, [r7, #4]
 8009d82:	681b      	ldr	r3, [r3, #0]
 8009d84:	4a41      	ldr	r2, [pc, #260]	; (8009e8c <UART_SetConfig+0x63c>)
 8009d86:	4293      	cmp	r3, r2
 8009d88:	f040 8082 	bne.w	8009e90 <UART_SetConfig+0x640>
 8009d8c:	4b3c      	ldr	r3, [pc, #240]	; (8009e80 <UART_SetConfig+0x630>)
 8009d8e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009d90:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8009d94:	2b28      	cmp	r3, #40	; 0x28
 8009d96:	d86d      	bhi.n	8009e74 <UART_SetConfig+0x624>
 8009d98:	a201      	add	r2, pc, #4	; (adr r2, 8009da0 <UART_SetConfig+0x550>)
 8009d9a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009d9e:	bf00      	nop
 8009da0:	08009e45 	.word	0x08009e45
 8009da4:	08009e75 	.word	0x08009e75
 8009da8:	08009e75 	.word	0x08009e75
 8009dac:	08009e75 	.word	0x08009e75
 8009db0:	08009e75 	.word	0x08009e75
 8009db4:	08009e75 	.word	0x08009e75
 8009db8:	08009e75 	.word	0x08009e75
 8009dbc:	08009e75 	.word	0x08009e75
 8009dc0:	08009e4d 	.word	0x08009e4d
 8009dc4:	08009e75 	.word	0x08009e75
 8009dc8:	08009e75 	.word	0x08009e75
 8009dcc:	08009e75 	.word	0x08009e75
 8009dd0:	08009e75 	.word	0x08009e75
 8009dd4:	08009e75 	.word	0x08009e75
 8009dd8:	08009e75 	.word	0x08009e75
 8009ddc:	08009e75 	.word	0x08009e75
 8009de0:	08009e55 	.word	0x08009e55
 8009de4:	08009e75 	.word	0x08009e75
 8009de8:	08009e75 	.word	0x08009e75
 8009dec:	08009e75 	.word	0x08009e75
 8009df0:	08009e75 	.word	0x08009e75
 8009df4:	08009e75 	.word	0x08009e75
 8009df8:	08009e75 	.word	0x08009e75
 8009dfc:	08009e75 	.word	0x08009e75
 8009e00:	08009e5d 	.word	0x08009e5d
 8009e04:	08009e75 	.word	0x08009e75
 8009e08:	08009e75 	.word	0x08009e75
 8009e0c:	08009e75 	.word	0x08009e75
 8009e10:	08009e75 	.word	0x08009e75
 8009e14:	08009e75 	.word	0x08009e75
 8009e18:	08009e75 	.word	0x08009e75
 8009e1c:	08009e75 	.word	0x08009e75
 8009e20:	08009e65 	.word	0x08009e65
 8009e24:	08009e75 	.word	0x08009e75
 8009e28:	08009e75 	.word	0x08009e75
 8009e2c:	08009e75 	.word	0x08009e75
 8009e30:	08009e75 	.word	0x08009e75
 8009e34:	08009e75 	.word	0x08009e75
 8009e38:	08009e75 	.word	0x08009e75
 8009e3c:	08009e75 	.word	0x08009e75
 8009e40:	08009e6d 	.word	0x08009e6d
 8009e44:	2301      	movs	r3, #1
 8009e46:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009e4a:	e0d6      	b.n	8009ffa <UART_SetConfig+0x7aa>
 8009e4c:	2304      	movs	r3, #4
 8009e4e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009e52:	e0d2      	b.n	8009ffa <UART_SetConfig+0x7aa>
 8009e54:	2308      	movs	r3, #8
 8009e56:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009e5a:	e0ce      	b.n	8009ffa <UART_SetConfig+0x7aa>
 8009e5c:	2310      	movs	r3, #16
 8009e5e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009e62:	e0ca      	b.n	8009ffa <UART_SetConfig+0x7aa>
 8009e64:	2320      	movs	r3, #32
 8009e66:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009e6a:	e0c6      	b.n	8009ffa <UART_SetConfig+0x7aa>
 8009e6c:	2340      	movs	r3, #64	; 0x40
 8009e6e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009e72:	e0c2      	b.n	8009ffa <UART_SetConfig+0x7aa>
 8009e74:	2380      	movs	r3, #128	; 0x80
 8009e76:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009e7a:	e0be      	b.n	8009ffa <UART_SetConfig+0x7aa>
 8009e7c:	40011400 	.word	0x40011400
 8009e80:	58024400 	.word	0x58024400
 8009e84:	40007800 	.word	0x40007800
 8009e88:	40007c00 	.word	0x40007c00
 8009e8c:	40011800 	.word	0x40011800
 8009e90:	687b      	ldr	r3, [r7, #4]
 8009e92:	681b      	ldr	r3, [r3, #0]
 8009e94:	4aad      	ldr	r2, [pc, #692]	; (800a14c <UART_SetConfig+0x8fc>)
 8009e96:	4293      	cmp	r3, r2
 8009e98:	d176      	bne.n	8009f88 <UART_SetConfig+0x738>
 8009e9a:	4bad      	ldr	r3, [pc, #692]	; (800a150 <UART_SetConfig+0x900>)
 8009e9c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009e9e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8009ea2:	2b28      	cmp	r3, #40	; 0x28
 8009ea4:	d86c      	bhi.n	8009f80 <UART_SetConfig+0x730>
 8009ea6:	a201      	add	r2, pc, #4	; (adr r2, 8009eac <UART_SetConfig+0x65c>)
 8009ea8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009eac:	08009f51 	.word	0x08009f51
 8009eb0:	08009f81 	.word	0x08009f81
 8009eb4:	08009f81 	.word	0x08009f81
 8009eb8:	08009f81 	.word	0x08009f81
 8009ebc:	08009f81 	.word	0x08009f81
 8009ec0:	08009f81 	.word	0x08009f81
 8009ec4:	08009f81 	.word	0x08009f81
 8009ec8:	08009f81 	.word	0x08009f81
 8009ecc:	08009f59 	.word	0x08009f59
 8009ed0:	08009f81 	.word	0x08009f81
 8009ed4:	08009f81 	.word	0x08009f81
 8009ed8:	08009f81 	.word	0x08009f81
 8009edc:	08009f81 	.word	0x08009f81
 8009ee0:	08009f81 	.word	0x08009f81
 8009ee4:	08009f81 	.word	0x08009f81
 8009ee8:	08009f81 	.word	0x08009f81
 8009eec:	08009f61 	.word	0x08009f61
 8009ef0:	08009f81 	.word	0x08009f81
 8009ef4:	08009f81 	.word	0x08009f81
 8009ef8:	08009f81 	.word	0x08009f81
 8009efc:	08009f81 	.word	0x08009f81
 8009f00:	08009f81 	.word	0x08009f81
 8009f04:	08009f81 	.word	0x08009f81
 8009f08:	08009f81 	.word	0x08009f81
 8009f0c:	08009f69 	.word	0x08009f69
 8009f10:	08009f81 	.word	0x08009f81
 8009f14:	08009f81 	.word	0x08009f81
 8009f18:	08009f81 	.word	0x08009f81
 8009f1c:	08009f81 	.word	0x08009f81
 8009f20:	08009f81 	.word	0x08009f81
 8009f24:	08009f81 	.word	0x08009f81
 8009f28:	08009f81 	.word	0x08009f81
 8009f2c:	08009f71 	.word	0x08009f71
 8009f30:	08009f81 	.word	0x08009f81
 8009f34:	08009f81 	.word	0x08009f81
 8009f38:	08009f81 	.word	0x08009f81
 8009f3c:	08009f81 	.word	0x08009f81
 8009f40:	08009f81 	.word	0x08009f81
 8009f44:	08009f81 	.word	0x08009f81
 8009f48:	08009f81 	.word	0x08009f81
 8009f4c:	08009f79 	.word	0x08009f79
 8009f50:	2301      	movs	r3, #1
 8009f52:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009f56:	e050      	b.n	8009ffa <UART_SetConfig+0x7aa>
 8009f58:	2304      	movs	r3, #4
 8009f5a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009f5e:	e04c      	b.n	8009ffa <UART_SetConfig+0x7aa>
 8009f60:	2308      	movs	r3, #8
 8009f62:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009f66:	e048      	b.n	8009ffa <UART_SetConfig+0x7aa>
 8009f68:	2310      	movs	r3, #16
 8009f6a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009f6e:	e044      	b.n	8009ffa <UART_SetConfig+0x7aa>
 8009f70:	2320      	movs	r3, #32
 8009f72:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009f76:	e040      	b.n	8009ffa <UART_SetConfig+0x7aa>
 8009f78:	2340      	movs	r3, #64	; 0x40
 8009f7a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009f7e:	e03c      	b.n	8009ffa <UART_SetConfig+0x7aa>
 8009f80:	2380      	movs	r3, #128	; 0x80
 8009f82:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009f86:	e038      	b.n	8009ffa <UART_SetConfig+0x7aa>
 8009f88:	687b      	ldr	r3, [r7, #4]
 8009f8a:	681b      	ldr	r3, [r3, #0]
 8009f8c:	4a71      	ldr	r2, [pc, #452]	; (800a154 <UART_SetConfig+0x904>)
 8009f8e:	4293      	cmp	r3, r2
 8009f90:	d130      	bne.n	8009ff4 <UART_SetConfig+0x7a4>
 8009f92:	4b6f      	ldr	r3, [pc, #444]	; (800a150 <UART_SetConfig+0x900>)
 8009f94:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009f96:	f003 0307 	and.w	r3, r3, #7
 8009f9a:	2b05      	cmp	r3, #5
 8009f9c:	d826      	bhi.n	8009fec <UART_SetConfig+0x79c>
 8009f9e:	a201      	add	r2, pc, #4	; (adr r2, 8009fa4 <UART_SetConfig+0x754>)
 8009fa0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009fa4:	08009fbd 	.word	0x08009fbd
 8009fa8:	08009fc5 	.word	0x08009fc5
 8009fac:	08009fcd 	.word	0x08009fcd
 8009fb0:	08009fd5 	.word	0x08009fd5
 8009fb4:	08009fdd 	.word	0x08009fdd
 8009fb8:	08009fe5 	.word	0x08009fe5
 8009fbc:	2302      	movs	r3, #2
 8009fbe:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009fc2:	e01a      	b.n	8009ffa <UART_SetConfig+0x7aa>
 8009fc4:	2304      	movs	r3, #4
 8009fc6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009fca:	e016      	b.n	8009ffa <UART_SetConfig+0x7aa>
 8009fcc:	2308      	movs	r3, #8
 8009fce:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009fd2:	e012      	b.n	8009ffa <UART_SetConfig+0x7aa>
 8009fd4:	2310      	movs	r3, #16
 8009fd6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009fda:	e00e      	b.n	8009ffa <UART_SetConfig+0x7aa>
 8009fdc:	2320      	movs	r3, #32
 8009fde:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009fe2:	e00a      	b.n	8009ffa <UART_SetConfig+0x7aa>
 8009fe4:	2340      	movs	r3, #64	; 0x40
 8009fe6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009fea:	e006      	b.n	8009ffa <UART_SetConfig+0x7aa>
 8009fec:	2380      	movs	r3, #128	; 0x80
 8009fee:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009ff2:	e002      	b.n	8009ffa <UART_SetConfig+0x7aa>
 8009ff4:	2380      	movs	r3, #128	; 0x80
 8009ff6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8009ffa:	687b      	ldr	r3, [r7, #4]
 8009ffc:	681b      	ldr	r3, [r3, #0]
 8009ffe:	4a55      	ldr	r2, [pc, #340]	; (800a154 <UART_SetConfig+0x904>)
 800a000:	4293      	cmp	r3, r2
 800a002:	f040 80f0 	bne.w	800a1e6 <UART_SetConfig+0x996>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800a006:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800a00a:	2b20      	cmp	r3, #32
 800a00c:	dc46      	bgt.n	800a09c <UART_SetConfig+0x84c>
 800a00e:	2b02      	cmp	r3, #2
 800a010:	db75      	blt.n	800a0fe <UART_SetConfig+0x8ae>
 800a012:	3b02      	subs	r3, #2
 800a014:	2b1e      	cmp	r3, #30
 800a016:	d872      	bhi.n	800a0fe <UART_SetConfig+0x8ae>
 800a018:	a201      	add	r2, pc, #4	; (adr r2, 800a020 <UART_SetConfig+0x7d0>)
 800a01a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a01e:	bf00      	nop
 800a020:	0800a0a3 	.word	0x0800a0a3
 800a024:	0800a0ff 	.word	0x0800a0ff
 800a028:	0800a0ab 	.word	0x0800a0ab
 800a02c:	0800a0ff 	.word	0x0800a0ff
 800a030:	0800a0ff 	.word	0x0800a0ff
 800a034:	0800a0ff 	.word	0x0800a0ff
 800a038:	0800a0bb 	.word	0x0800a0bb
 800a03c:	0800a0ff 	.word	0x0800a0ff
 800a040:	0800a0ff 	.word	0x0800a0ff
 800a044:	0800a0ff 	.word	0x0800a0ff
 800a048:	0800a0ff 	.word	0x0800a0ff
 800a04c:	0800a0ff 	.word	0x0800a0ff
 800a050:	0800a0ff 	.word	0x0800a0ff
 800a054:	0800a0ff 	.word	0x0800a0ff
 800a058:	0800a0cb 	.word	0x0800a0cb
 800a05c:	0800a0ff 	.word	0x0800a0ff
 800a060:	0800a0ff 	.word	0x0800a0ff
 800a064:	0800a0ff 	.word	0x0800a0ff
 800a068:	0800a0ff 	.word	0x0800a0ff
 800a06c:	0800a0ff 	.word	0x0800a0ff
 800a070:	0800a0ff 	.word	0x0800a0ff
 800a074:	0800a0ff 	.word	0x0800a0ff
 800a078:	0800a0ff 	.word	0x0800a0ff
 800a07c:	0800a0ff 	.word	0x0800a0ff
 800a080:	0800a0ff 	.word	0x0800a0ff
 800a084:	0800a0ff 	.word	0x0800a0ff
 800a088:	0800a0ff 	.word	0x0800a0ff
 800a08c:	0800a0ff 	.word	0x0800a0ff
 800a090:	0800a0ff 	.word	0x0800a0ff
 800a094:	0800a0ff 	.word	0x0800a0ff
 800a098:	0800a0f1 	.word	0x0800a0f1
 800a09c:	2b40      	cmp	r3, #64	; 0x40
 800a09e:	d02a      	beq.n	800a0f6 <UART_SetConfig+0x8a6>
 800a0a0:	e02d      	b.n	800a0fe <UART_SetConfig+0x8ae>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800a0a2:	f7fc fd89 	bl	8006bb8 <HAL_RCCEx_GetD3PCLK1Freq>
 800a0a6:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800a0a8:	e02f      	b.n	800a10a <UART_SetConfig+0x8ba>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a0aa:	f107 0314 	add.w	r3, r7, #20
 800a0ae:	4618      	mov	r0, r3
 800a0b0:	f7fc fd98 	bl	8006be4 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800a0b4:	69bb      	ldr	r3, [r7, #24]
 800a0b6:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800a0b8:	e027      	b.n	800a10a <UART_SetConfig+0x8ba>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a0ba:	f107 0308 	add.w	r3, r7, #8
 800a0be:	4618      	mov	r0, r3
 800a0c0:	f7fc fee4 	bl	8006e8c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800a0c4:	68fb      	ldr	r3, [r7, #12]
 800a0c6:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800a0c8:	e01f      	b.n	800a10a <UART_SetConfig+0x8ba>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a0ca:	4b21      	ldr	r3, [pc, #132]	; (800a150 <UART_SetConfig+0x900>)
 800a0cc:	681b      	ldr	r3, [r3, #0]
 800a0ce:	f003 0320 	and.w	r3, r3, #32
 800a0d2:	2b00      	cmp	r3, #0
 800a0d4:	d009      	beq.n	800a0ea <UART_SetConfig+0x89a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800a0d6:	4b1e      	ldr	r3, [pc, #120]	; (800a150 <UART_SetConfig+0x900>)
 800a0d8:	681b      	ldr	r3, [r3, #0]
 800a0da:	08db      	lsrs	r3, r3, #3
 800a0dc:	f003 0303 	and.w	r3, r3, #3
 800a0e0:	4a1d      	ldr	r2, [pc, #116]	; (800a158 <UART_SetConfig+0x908>)
 800a0e2:	fa22 f303 	lsr.w	r3, r2, r3
 800a0e6:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800a0e8:	e00f      	b.n	800a10a <UART_SetConfig+0x8ba>
          pclk = (uint32_t) HSI_VALUE;
 800a0ea:	4b1b      	ldr	r3, [pc, #108]	; (800a158 <UART_SetConfig+0x908>)
 800a0ec:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800a0ee:	e00c      	b.n	800a10a <UART_SetConfig+0x8ba>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800a0f0:	4b1a      	ldr	r3, [pc, #104]	; (800a15c <UART_SetConfig+0x90c>)
 800a0f2:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800a0f4:	e009      	b.n	800a10a <UART_SetConfig+0x8ba>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a0f6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a0fa:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800a0fc:	e005      	b.n	800a10a <UART_SetConfig+0x8ba>
      default:
        pclk = 0U;
 800a0fe:	2300      	movs	r3, #0
 800a100:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 800a102:	2301      	movs	r3, #1
 800a104:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 800a108:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800a10a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a10c:	2b00      	cmp	r3, #0
 800a10e:	f000 81e6 	beq.w	800a4de <UART_SetConfig+0xc8e>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800a112:	687b      	ldr	r3, [r7, #4]
 800a114:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a116:	4a12      	ldr	r2, [pc, #72]	; (800a160 <UART_SetConfig+0x910>)
 800a118:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a11c:	461a      	mov	r2, r3
 800a11e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a120:	fbb3 f3f2 	udiv	r3, r3, r2
 800a124:	623b      	str	r3, [r7, #32]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800a126:	687b      	ldr	r3, [r7, #4]
 800a128:	685a      	ldr	r2, [r3, #4]
 800a12a:	4613      	mov	r3, r2
 800a12c:	005b      	lsls	r3, r3, #1
 800a12e:	4413      	add	r3, r2
 800a130:	6a3a      	ldr	r2, [r7, #32]
 800a132:	429a      	cmp	r2, r3
 800a134:	d305      	bcc.n	800a142 <UART_SetConfig+0x8f2>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800a136:	687b      	ldr	r3, [r7, #4]
 800a138:	685b      	ldr	r3, [r3, #4]
 800a13a:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800a13c:	6a3a      	ldr	r2, [r7, #32]
 800a13e:	429a      	cmp	r2, r3
 800a140:	d910      	bls.n	800a164 <UART_SetConfig+0x914>
      {
        ret = HAL_ERROR;
 800a142:	2301      	movs	r3, #1
 800a144:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 800a148:	e1c9      	b.n	800a4de <UART_SetConfig+0xc8e>
 800a14a:	bf00      	nop
 800a14c:	40011c00 	.word	0x40011c00
 800a150:	58024400 	.word	0x58024400
 800a154:	58000c00 	.word	0x58000c00
 800a158:	03d09000 	.word	0x03d09000
 800a15c:	003d0900 	.word	0x003d0900
 800a160:	080124d0 	.word	0x080124d0
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a164:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a166:	4618      	mov	r0, r3
 800a168:	f04f 0100 	mov.w	r1, #0
 800a16c:	687b      	ldr	r3, [r7, #4]
 800a16e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a170:	4ac1      	ldr	r2, [pc, #772]	; (800a478 <UART_SetConfig+0xc28>)
 800a172:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a176:	b29a      	uxth	r2, r3
 800a178:	f04f 0300 	mov.w	r3, #0
 800a17c:	f7f6 f8c8 	bl	8000310 <__aeabi_uldivmod>
 800a180:	4602      	mov	r2, r0
 800a182:	460b      	mov	r3, r1
 800a184:	4610      	mov	r0, r2
 800a186:	4619      	mov	r1, r3
 800a188:	f04f 0200 	mov.w	r2, #0
 800a18c:	f04f 0300 	mov.w	r3, #0
 800a190:	020b      	lsls	r3, r1, #8
 800a192:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800a196:	0202      	lsls	r2, r0, #8
 800a198:	6879      	ldr	r1, [r7, #4]
 800a19a:	6849      	ldr	r1, [r1, #4]
 800a19c:	0849      	lsrs	r1, r1, #1
 800a19e:	4608      	mov	r0, r1
 800a1a0:	f04f 0100 	mov.w	r1, #0
 800a1a4:	1814      	adds	r4, r2, r0
 800a1a6:	eb43 0501 	adc.w	r5, r3, r1
 800a1aa:	687b      	ldr	r3, [r7, #4]
 800a1ac:	685b      	ldr	r3, [r3, #4]
 800a1ae:	461a      	mov	r2, r3
 800a1b0:	f04f 0300 	mov.w	r3, #0
 800a1b4:	4620      	mov	r0, r4
 800a1b6:	4629      	mov	r1, r5
 800a1b8:	f7f6 f8aa 	bl	8000310 <__aeabi_uldivmod>
 800a1bc:	4602      	mov	r2, r0
 800a1be:	460b      	mov	r3, r1
 800a1c0:	4613      	mov	r3, r2
 800a1c2:	62bb      	str	r3, [r7, #40]	; 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800a1c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a1c6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800a1ca:	d308      	bcc.n	800a1de <UART_SetConfig+0x98e>
 800a1cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a1ce:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a1d2:	d204      	bcs.n	800a1de <UART_SetConfig+0x98e>
        {
          huart->Instance->BRR = usartdiv;
 800a1d4:	687b      	ldr	r3, [r7, #4]
 800a1d6:	681b      	ldr	r3, [r3, #0]
 800a1d8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a1da:	60da      	str	r2, [r3, #12]
 800a1dc:	e17f      	b.n	800a4de <UART_SetConfig+0xc8e>
        }
        else
        {
          ret = HAL_ERROR;
 800a1de:	2301      	movs	r3, #1
 800a1e0:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 800a1e4:	e17b      	b.n	800a4de <UART_SetConfig+0xc8e>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800a1e6:	687b      	ldr	r3, [r7, #4]
 800a1e8:	69db      	ldr	r3, [r3, #28]
 800a1ea:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a1ee:	f040 80be 	bne.w	800a36e <UART_SetConfig+0xb1e>
  {
    switch (clocksource)
 800a1f2:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800a1f6:	2b20      	cmp	r3, #32
 800a1f8:	dc48      	bgt.n	800a28c <UART_SetConfig+0xa3c>
 800a1fa:	2b00      	cmp	r3, #0
 800a1fc:	db7b      	blt.n	800a2f6 <UART_SetConfig+0xaa6>
 800a1fe:	2b20      	cmp	r3, #32
 800a200:	d879      	bhi.n	800a2f6 <UART_SetConfig+0xaa6>
 800a202:	a201      	add	r2, pc, #4	; (adr r2, 800a208 <UART_SetConfig+0x9b8>)
 800a204:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a208:	0800a293 	.word	0x0800a293
 800a20c:	0800a29b 	.word	0x0800a29b
 800a210:	0800a2f7 	.word	0x0800a2f7
 800a214:	0800a2f7 	.word	0x0800a2f7
 800a218:	0800a2a3 	.word	0x0800a2a3
 800a21c:	0800a2f7 	.word	0x0800a2f7
 800a220:	0800a2f7 	.word	0x0800a2f7
 800a224:	0800a2f7 	.word	0x0800a2f7
 800a228:	0800a2b3 	.word	0x0800a2b3
 800a22c:	0800a2f7 	.word	0x0800a2f7
 800a230:	0800a2f7 	.word	0x0800a2f7
 800a234:	0800a2f7 	.word	0x0800a2f7
 800a238:	0800a2f7 	.word	0x0800a2f7
 800a23c:	0800a2f7 	.word	0x0800a2f7
 800a240:	0800a2f7 	.word	0x0800a2f7
 800a244:	0800a2f7 	.word	0x0800a2f7
 800a248:	0800a2c3 	.word	0x0800a2c3
 800a24c:	0800a2f7 	.word	0x0800a2f7
 800a250:	0800a2f7 	.word	0x0800a2f7
 800a254:	0800a2f7 	.word	0x0800a2f7
 800a258:	0800a2f7 	.word	0x0800a2f7
 800a25c:	0800a2f7 	.word	0x0800a2f7
 800a260:	0800a2f7 	.word	0x0800a2f7
 800a264:	0800a2f7 	.word	0x0800a2f7
 800a268:	0800a2f7 	.word	0x0800a2f7
 800a26c:	0800a2f7 	.word	0x0800a2f7
 800a270:	0800a2f7 	.word	0x0800a2f7
 800a274:	0800a2f7 	.word	0x0800a2f7
 800a278:	0800a2f7 	.word	0x0800a2f7
 800a27c:	0800a2f7 	.word	0x0800a2f7
 800a280:	0800a2f7 	.word	0x0800a2f7
 800a284:	0800a2f7 	.word	0x0800a2f7
 800a288:	0800a2e9 	.word	0x0800a2e9
 800a28c:	2b40      	cmp	r3, #64	; 0x40
 800a28e:	d02e      	beq.n	800a2ee <UART_SetConfig+0xa9e>
 800a290:	e031      	b.n	800a2f6 <UART_SetConfig+0xaa6>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800a292:	f7fb f905 	bl	80054a0 <HAL_RCC_GetPCLK1Freq>
 800a296:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800a298:	e033      	b.n	800a302 <UART_SetConfig+0xab2>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800a29a:	f7fb f917 	bl	80054cc <HAL_RCC_GetPCLK2Freq>
 800a29e:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800a2a0:	e02f      	b.n	800a302 <UART_SetConfig+0xab2>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a2a2:	f107 0314 	add.w	r3, r7, #20
 800a2a6:	4618      	mov	r0, r3
 800a2a8:	f7fc fc9c 	bl	8006be4 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800a2ac:	69bb      	ldr	r3, [r7, #24]
 800a2ae:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800a2b0:	e027      	b.n	800a302 <UART_SetConfig+0xab2>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a2b2:	f107 0308 	add.w	r3, r7, #8
 800a2b6:	4618      	mov	r0, r3
 800a2b8:	f7fc fde8 	bl	8006e8c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800a2bc:	68fb      	ldr	r3, [r7, #12]
 800a2be:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800a2c0:	e01f      	b.n	800a302 <UART_SetConfig+0xab2>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a2c2:	4b6e      	ldr	r3, [pc, #440]	; (800a47c <UART_SetConfig+0xc2c>)
 800a2c4:	681b      	ldr	r3, [r3, #0]
 800a2c6:	f003 0320 	and.w	r3, r3, #32
 800a2ca:	2b00      	cmp	r3, #0
 800a2cc:	d009      	beq.n	800a2e2 <UART_SetConfig+0xa92>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800a2ce:	4b6b      	ldr	r3, [pc, #428]	; (800a47c <UART_SetConfig+0xc2c>)
 800a2d0:	681b      	ldr	r3, [r3, #0]
 800a2d2:	08db      	lsrs	r3, r3, #3
 800a2d4:	f003 0303 	and.w	r3, r3, #3
 800a2d8:	4a69      	ldr	r2, [pc, #420]	; (800a480 <UART_SetConfig+0xc30>)
 800a2da:	fa22 f303 	lsr.w	r3, r2, r3
 800a2de:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800a2e0:	e00f      	b.n	800a302 <UART_SetConfig+0xab2>
          pclk = (uint32_t) HSI_VALUE;
 800a2e2:	4b67      	ldr	r3, [pc, #412]	; (800a480 <UART_SetConfig+0xc30>)
 800a2e4:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800a2e6:	e00c      	b.n	800a302 <UART_SetConfig+0xab2>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800a2e8:	4b66      	ldr	r3, [pc, #408]	; (800a484 <UART_SetConfig+0xc34>)
 800a2ea:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800a2ec:	e009      	b.n	800a302 <UART_SetConfig+0xab2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a2ee:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a2f2:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800a2f4:	e005      	b.n	800a302 <UART_SetConfig+0xab2>
      default:
        pclk = 0U;
 800a2f6:	2300      	movs	r3, #0
 800a2f8:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 800a2fa:	2301      	movs	r3, #1
 800a2fc:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 800a300:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800a302:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a304:	2b00      	cmp	r3, #0
 800a306:	f000 80ea 	beq.w	800a4de <UART_SetConfig+0xc8e>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a30a:	687b      	ldr	r3, [r7, #4]
 800a30c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a30e:	4a5a      	ldr	r2, [pc, #360]	; (800a478 <UART_SetConfig+0xc28>)
 800a310:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a314:	461a      	mov	r2, r3
 800a316:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a318:	fbb3 f3f2 	udiv	r3, r3, r2
 800a31c:	005a      	lsls	r2, r3, #1
 800a31e:	687b      	ldr	r3, [r7, #4]
 800a320:	685b      	ldr	r3, [r3, #4]
 800a322:	085b      	lsrs	r3, r3, #1
 800a324:	441a      	add	r2, r3
 800a326:	687b      	ldr	r3, [r7, #4]
 800a328:	685b      	ldr	r3, [r3, #4]
 800a32a:	fbb2 f3f3 	udiv	r3, r2, r3
 800a32e:	b29b      	uxth	r3, r3
 800a330:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800a332:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a334:	2b0f      	cmp	r3, #15
 800a336:	d916      	bls.n	800a366 <UART_SetConfig+0xb16>
 800a338:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a33a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a33e:	d212      	bcs.n	800a366 <UART_SetConfig+0xb16>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800a340:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a342:	b29b      	uxth	r3, r3
 800a344:	f023 030f 	bic.w	r3, r3, #15
 800a348:	84fb      	strh	r3, [r7, #38]	; 0x26
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800a34a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a34c:	085b      	lsrs	r3, r3, #1
 800a34e:	b29b      	uxth	r3, r3
 800a350:	f003 0307 	and.w	r3, r3, #7
 800a354:	b29a      	uxth	r2, r3
 800a356:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800a358:	4313      	orrs	r3, r2
 800a35a:	84fb      	strh	r3, [r7, #38]	; 0x26
        huart->Instance->BRR = brrtemp;
 800a35c:	687b      	ldr	r3, [r7, #4]
 800a35e:	681b      	ldr	r3, [r3, #0]
 800a360:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800a362:	60da      	str	r2, [r3, #12]
 800a364:	e0bb      	b.n	800a4de <UART_SetConfig+0xc8e>
      }
      else
      {
        ret = HAL_ERROR;
 800a366:	2301      	movs	r3, #1
 800a368:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 800a36c:	e0b7      	b.n	800a4de <UART_SetConfig+0xc8e>
      }
    }
  }
  else
  {
    switch (clocksource)
 800a36e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800a372:	2b20      	cmp	r3, #32
 800a374:	dc4a      	bgt.n	800a40c <UART_SetConfig+0xbbc>
 800a376:	2b00      	cmp	r3, #0
 800a378:	f2c0 8086 	blt.w	800a488 <UART_SetConfig+0xc38>
 800a37c:	2b20      	cmp	r3, #32
 800a37e:	f200 8083 	bhi.w	800a488 <UART_SetConfig+0xc38>
 800a382:	a201      	add	r2, pc, #4	; (adr r2, 800a388 <UART_SetConfig+0xb38>)
 800a384:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a388:	0800a413 	.word	0x0800a413
 800a38c:	0800a41b 	.word	0x0800a41b
 800a390:	0800a489 	.word	0x0800a489
 800a394:	0800a489 	.word	0x0800a489
 800a398:	0800a423 	.word	0x0800a423
 800a39c:	0800a489 	.word	0x0800a489
 800a3a0:	0800a489 	.word	0x0800a489
 800a3a4:	0800a489 	.word	0x0800a489
 800a3a8:	0800a433 	.word	0x0800a433
 800a3ac:	0800a489 	.word	0x0800a489
 800a3b0:	0800a489 	.word	0x0800a489
 800a3b4:	0800a489 	.word	0x0800a489
 800a3b8:	0800a489 	.word	0x0800a489
 800a3bc:	0800a489 	.word	0x0800a489
 800a3c0:	0800a489 	.word	0x0800a489
 800a3c4:	0800a489 	.word	0x0800a489
 800a3c8:	0800a443 	.word	0x0800a443
 800a3cc:	0800a489 	.word	0x0800a489
 800a3d0:	0800a489 	.word	0x0800a489
 800a3d4:	0800a489 	.word	0x0800a489
 800a3d8:	0800a489 	.word	0x0800a489
 800a3dc:	0800a489 	.word	0x0800a489
 800a3e0:	0800a489 	.word	0x0800a489
 800a3e4:	0800a489 	.word	0x0800a489
 800a3e8:	0800a489 	.word	0x0800a489
 800a3ec:	0800a489 	.word	0x0800a489
 800a3f0:	0800a489 	.word	0x0800a489
 800a3f4:	0800a489 	.word	0x0800a489
 800a3f8:	0800a489 	.word	0x0800a489
 800a3fc:	0800a489 	.word	0x0800a489
 800a400:	0800a489 	.word	0x0800a489
 800a404:	0800a489 	.word	0x0800a489
 800a408:	0800a469 	.word	0x0800a469
 800a40c:	2b40      	cmp	r3, #64	; 0x40
 800a40e:	d02e      	beq.n	800a46e <UART_SetConfig+0xc1e>
 800a410:	e03a      	b.n	800a488 <UART_SetConfig+0xc38>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800a412:	f7fb f845 	bl	80054a0 <HAL_RCC_GetPCLK1Freq>
 800a416:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800a418:	e03c      	b.n	800a494 <UART_SetConfig+0xc44>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800a41a:	f7fb f857 	bl	80054cc <HAL_RCC_GetPCLK2Freq>
 800a41e:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800a420:	e038      	b.n	800a494 <UART_SetConfig+0xc44>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a422:	f107 0314 	add.w	r3, r7, #20
 800a426:	4618      	mov	r0, r3
 800a428:	f7fc fbdc 	bl	8006be4 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800a42c:	69bb      	ldr	r3, [r7, #24]
 800a42e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800a430:	e030      	b.n	800a494 <UART_SetConfig+0xc44>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a432:	f107 0308 	add.w	r3, r7, #8
 800a436:	4618      	mov	r0, r3
 800a438:	f7fc fd28 	bl	8006e8c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800a43c:	68fb      	ldr	r3, [r7, #12]
 800a43e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800a440:	e028      	b.n	800a494 <UART_SetConfig+0xc44>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a442:	4b0e      	ldr	r3, [pc, #56]	; (800a47c <UART_SetConfig+0xc2c>)
 800a444:	681b      	ldr	r3, [r3, #0]
 800a446:	f003 0320 	and.w	r3, r3, #32
 800a44a:	2b00      	cmp	r3, #0
 800a44c:	d009      	beq.n	800a462 <UART_SetConfig+0xc12>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800a44e:	4b0b      	ldr	r3, [pc, #44]	; (800a47c <UART_SetConfig+0xc2c>)
 800a450:	681b      	ldr	r3, [r3, #0]
 800a452:	08db      	lsrs	r3, r3, #3
 800a454:	f003 0303 	and.w	r3, r3, #3
 800a458:	4a09      	ldr	r2, [pc, #36]	; (800a480 <UART_SetConfig+0xc30>)
 800a45a:	fa22 f303 	lsr.w	r3, r2, r3
 800a45e:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800a460:	e018      	b.n	800a494 <UART_SetConfig+0xc44>
          pclk = (uint32_t) HSI_VALUE;
 800a462:	4b07      	ldr	r3, [pc, #28]	; (800a480 <UART_SetConfig+0xc30>)
 800a464:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800a466:	e015      	b.n	800a494 <UART_SetConfig+0xc44>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800a468:	4b06      	ldr	r3, [pc, #24]	; (800a484 <UART_SetConfig+0xc34>)
 800a46a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800a46c:	e012      	b.n	800a494 <UART_SetConfig+0xc44>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a46e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a472:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800a474:	e00e      	b.n	800a494 <UART_SetConfig+0xc44>
 800a476:	bf00      	nop
 800a478:	080124d0 	.word	0x080124d0
 800a47c:	58024400 	.word	0x58024400
 800a480:	03d09000 	.word	0x03d09000
 800a484:	003d0900 	.word	0x003d0900
      default:
        pclk = 0U;
 800a488:	2300      	movs	r3, #0
 800a48a:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 800a48c:	2301      	movs	r3, #1
 800a48e:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 800a492:	bf00      	nop
    }

    if (pclk != 0U)
 800a494:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a496:	2b00      	cmp	r3, #0
 800a498:	d021      	beq.n	800a4de <UART_SetConfig+0xc8e>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a49a:	687b      	ldr	r3, [r7, #4]
 800a49c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a49e:	4a1a      	ldr	r2, [pc, #104]	; (800a508 <UART_SetConfig+0xcb8>)
 800a4a0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a4a4:	461a      	mov	r2, r3
 800a4a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a4a8:	fbb3 f2f2 	udiv	r2, r3, r2
 800a4ac:	687b      	ldr	r3, [r7, #4]
 800a4ae:	685b      	ldr	r3, [r3, #4]
 800a4b0:	085b      	lsrs	r3, r3, #1
 800a4b2:	441a      	add	r2, r3
 800a4b4:	687b      	ldr	r3, [r7, #4]
 800a4b6:	685b      	ldr	r3, [r3, #4]
 800a4b8:	fbb2 f3f3 	udiv	r3, r2, r3
 800a4bc:	b29b      	uxth	r3, r3
 800a4be:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800a4c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a4c2:	2b0f      	cmp	r3, #15
 800a4c4:	d908      	bls.n	800a4d8 <UART_SetConfig+0xc88>
 800a4c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a4c8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a4cc:	d204      	bcs.n	800a4d8 <UART_SetConfig+0xc88>
      {
        huart->Instance->BRR = usartdiv;
 800a4ce:	687b      	ldr	r3, [r7, #4]
 800a4d0:	681b      	ldr	r3, [r3, #0]
 800a4d2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a4d4:	60da      	str	r2, [r3, #12]
 800a4d6:	e002      	b.n	800a4de <UART_SetConfig+0xc8e>
      }
      else
      {
        ret = HAL_ERROR;
 800a4d8:	2301      	movs	r3, #1
 800a4da:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800a4de:	687b      	ldr	r3, [r7, #4]
 800a4e0:	2201      	movs	r2, #1
 800a4e2:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800a4e6:	687b      	ldr	r3, [r7, #4]
 800a4e8:	2201      	movs	r2, #1
 800a4ea:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800a4ee:	687b      	ldr	r3, [r7, #4]
 800a4f0:	2200      	movs	r2, #0
 800a4f2:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 800a4f4:	687b      	ldr	r3, [r7, #4]
 800a4f6:	2200      	movs	r2, #0
 800a4f8:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 800a4fa:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
}
 800a4fe:	4618      	mov	r0, r3
 800a500:	3738      	adds	r7, #56	; 0x38
 800a502:	46bd      	mov	sp, r7
 800a504:	bdb0      	pop	{r4, r5, r7, pc}
 800a506:	bf00      	nop
 800a508:	080124d0 	.word	0x080124d0

0800a50c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800a50c:	b480      	push	{r7}
 800a50e:	b083      	sub	sp, #12
 800a510:	af00      	add	r7, sp, #0
 800a512:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800a514:	687b      	ldr	r3, [r7, #4]
 800a516:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a518:	f003 0301 	and.w	r3, r3, #1
 800a51c:	2b00      	cmp	r3, #0
 800a51e:	d00a      	beq.n	800a536 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800a520:	687b      	ldr	r3, [r7, #4]
 800a522:	681b      	ldr	r3, [r3, #0]
 800a524:	685b      	ldr	r3, [r3, #4]
 800a526:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800a52a:	687b      	ldr	r3, [r7, #4]
 800a52c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a52e:	687b      	ldr	r3, [r7, #4]
 800a530:	681b      	ldr	r3, [r3, #0]
 800a532:	430a      	orrs	r2, r1
 800a534:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800a536:	687b      	ldr	r3, [r7, #4]
 800a538:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a53a:	f003 0302 	and.w	r3, r3, #2
 800a53e:	2b00      	cmp	r3, #0
 800a540:	d00a      	beq.n	800a558 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800a542:	687b      	ldr	r3, [r7, #4]
 800a544:	681b      	ldr	r3, [r3, #0]
 800a546:	685b      	ldr	r3, [r3, #4]
 800a548:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800a54c:	687b      	ldr	r3, [r7, #4]
 800a54e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800a550:	687b      	ldr	r3, [r7, #4]
 800a552:	681b      	ldr	r3, [r3, #0]
 800a554:	430a      	orrs	r2, r1
 800a556:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800a558:	687b      	ldr	r3, [r7, #4]
 800a55a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a55c:	f003 0304 	and.w	r3, r3, #4
 800a560:	2b00      	cmp	r3, #0
 800a562:	d00a      	beq.n	800a57a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800a564:	687b      	ldr	r3, [r7, #4]
 800a566:	681b      	ldr	r3, [r3, #0]
 800a568:	685b      	ldr	r3, [r3, #4]
 800a56a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800a56e:	687b      	ldr	r3, [r7, #4]
 800a570:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a572:	687b      	ldr	r3, [r7, #4]
 800a574:	681b      	ldr	r3, [r3, #0]
 800a576:	430a      	orrs	r2, r1
 800a578:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800a57a:	687b      	ldr	r3, [r7, #4]
 800a57c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a57e:	f003 0308 	and.w	r3, r3, #8
 800a582:	2b00      	cmp	r3, #0
 800a584:	d00a      	beq.n	800a59c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800a586:	687b      	ldr	r3, [r7, #4]
 800a588:	681b      	ldr	r3, [r3, #0]
 800a58a:	685b      	ldr	r3, [r3, #4]
 800a58c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800a590:	687b      	ldr	r3, [r7, #4]
 800a592:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a594:	687b      	ldr	r3, [r7, #4]
 800a596:	681b      	ldr	r3, [r3, #0]
 800a598:	430a      	orrs	r2, r1
 800a59a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800a59c:	687b      	ldr	r3, [r7, #4]
 800a59e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a5a0:	f003 0310 	and.w	r3, r3, #16
 800a5a4:	2b00      	cmp	r3, #0
 800a5a6:	d00a      	beq.n	800a5be <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800a5a8:	687b      	ldr	r3, [r7, #4]
 800a5aa:	681b      	ldr	r3, [r3, #0]
 800a5ac:	689b      	ldr	r3, [r3, #8]
 800a5ae:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800a5b2:	687b      	ldr	r3, [r7, #4]
 800a5b4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800a5b6:	687b      	ldr	r3, [r7, #4]
 800a5b8:	681b      	ldr	r3, [r3, #0]
 800a5ba:	430a      	orrs	r2, r1
 800a5bc:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800a5be:	687b      	ldr	r3, [r7, #4]
 800a5c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a5c2:	f003 0320 	and.w	r3, r3, #32
 800a5c6:	2b00      	cmp	r3, #0
 800a5c8:	d00a      	beq.n	800a5e0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800a5ca:	687b      	ldr	r3, [r7, #4]
 800a5cc:	681b      	ldr	r3, [r3, #0]
 800a5ce:	689b      	ldr	r3, [r3, #8]
 800a5d0:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800a5d4:	687b      	ldr	r3, [r7, #4]
 800a5d6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800a5d8:	687b      	ldr	r3, [r7, #4]
 800a5da:	681b      	ldr	r3, [r3, #0]
 800a5dc:	430a      	orrs	r2, r1
 800a5de:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800a5e0:	687b      	ldr	r3, [r7, #4]
 800a5e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a5e4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a5e8:	2b00      	cmp	r3, #0
 800a5ea:	d01a      	beq.n	800a622 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800a5ec:	687b      	ldr	r3, [r7, #4]
 800a5ee:	681b      	ldr	r3, [r3, #0]
 800a5f0:	685b      	ldr	r3, [r3, #4]
 800a5f2:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800a5f6:	687b      	ldr	r3, [r7, #4]
 800a5f8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800a5fa:	687b      	ldr	r3, [r7, #4]
 800a5fc:	681b      	ldr	r3, [r3, #0]
 800a5fe:	430a      	orrs	r2, r1
 800a600:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800a602:	687b      	ldr	r3, [r7, #4]
 800a604:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a606:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a60a:	d10a      	bne.n	800a622 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800a60c:	687b      	ldr	r3, [r7, #4]
 800a60e:	681b      	ldr	r3, [r3, #0]
 800a610:	685b      	ldr	r3, [r3, #4]
 800a612:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800a616:	687b      	ldr	r3, [r7, #4]
 800a618:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800a61a:	687b      	ldr	r3, [r7, #4]
 800a61c:	681b      	ldr	r3, [r3, #0]
 800a61e:	430a      	orrs	r2, r1
 800a620:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800a622:	687b      	ldr	r3, [r7, #4]
 800a624:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a626:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a62a:	2b00      	cmp	r3, #0
 800a62c:	d00a      	beq.n	800a644 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800a62e:	687b      	ldr	r3, [r7, #4]
 800a630:	681b      	ldr	r3, [r3, #0]
 800a632:	685b      	ldr	r3, [r3, #4]
 800a634:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800a638:	687b      	ldr	r3, [r7, #4]
 800a63a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800a63c:	687b      	ldr	r3, [r7, #4]
 800a63e:	681b      	ldr	r3, [r3, #0]
 800a640:	430a      	orrs	r2, r1
 800a642:	605a      	str	r2, [r3, #4]
  }
}
 800a644:	bf00      	nop
 800a646:	370c      	adds	r7, #12
 800a648:	46bd      	mov	sp, r7
 800a64a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a64e:	4770      	bx	lr

0800a650 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800a650:	b580      	push	{r7, lr}
 800a652:	b086      	sub	sp, #24
 800a654:	af02      	add	r7, sp, #8
 800a656:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a658:	687b      	ldr	r3, [r7, #4]
 800a65a:	2200      	movs	r2, #0
 800a65c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800a660:	f7f7 f870 	bl	8001744 <HAL_GetTick>
 800a664:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800a666:	687b      	ldr	r3, [r7, #4]
 800a668:	681b      	ldr	r3, [r3, #0]
 800a66a:	681b      	ldr	r3, [r3, #0]
 800a66c:	f003 0308 	and.w	r3, r3, #8
 800a670:	2b08      	cmp	r3, #8
 800a672:	d10e      	bne.n	800a692 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800a674:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800a678:	9300      	str	r3, [sp, #0]
 800a67a:	68fb      	ldr	r3, [r7, #12]
 800a67c:	2200      	movs	r2, #0
 800a67e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800a682:	6878      	ldr	r0, [r7, #4]
 800a684:	f000 f82f 	bl	800a6e6 <UART_WaitOnFlagUntilTimeout>
 800a688:	4603      	mov	r3, r0
 800a68a:	2b00      	cmp	r3, #0
 800a68c:	d001      	beq.n	800a692 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800a68e:	2303      	movs	r3, #3
 800a690:	e025      	b.n	800a6de <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800a692:	687b      	ldr	r3, [r7, #4]
 800a694:	681b      	ldr	r3, [r3, #0]
 800a696:	681b      	ldr	r3, [r3, #0]
 800a698:	f003 0304 	and.w	r3, r3, #4
 800a69c:	2b04      	cmp	r3, #4
 800a69e:	d10e      	bne.n	800a6be <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800a6a0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800a6a4:	9300      	str	r3, [sp, #0]
 800a6a6:	68fb      	ldr	r3, [r7, #12]
 800a6a8:	2200      	movs	r2, #0
 800a6aa:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800a6ae:	6878      	ldr	r0, [r7, #4]
 800a6b0:	f000 f819 	bl	800a6e6 <UART_WaitOnFlagUntilTimeout>
 800a6b4:	4603      	mov	r3, r0
 800a6b6:	2b00      	cmp	r3, #0
 800a6b8:	d001      	beq.n	800a6be <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800a6ba:	2303      	movs	r3, #3
 800a6bc:	e00f      	b.n	800a6de <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800a6be:	687b      	ldr	r3, [r7, #4]
 800a6c0:	2220      	movs	r2, #32
 800a6c2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 800a6c6:	687b      	ldr	r3, [r7, #4]
 800a6c8:	2220      	movs	r2, #32
 800a6ca:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a6ce:	687b      	ldr	r3, [r7, #4]
 800a6d0:	2200      	movs	r2, #0
 800a6d2:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 800a6d4:	687b      	ldr	r3, [r7, #4]
 800a6d6:	2200      	movs	r2, #0
 800a6d8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800a6dc:	2300      	movs	r3, #0
}
 800a6de:	4618      	mov	r0, r3
 800a6e0:	3710      	adds	r7, #16
 800a6e2:	46bd      	mov	sp, r7
 800a6e4:	bd80      	pop	{r7, pc}

0800a6e6 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800a6e6:	b580      	push	{r7, lr}
 800a6e8:	b084      	sub	sp, #16
 800a6ea:	af00      	add	r7, sp, #0
 800a6ec:	60f8      	str	r0, [r7, #12]
 800a6ee:	60b9      	str	r1, [r7, #8]
 800a6f0:	603b      	str	r3, [r7, #0]
 800a6f2:	4613      	mov	r3, r2
 800a6f4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a6f6:	e062      	b.n	800a7be <UART_WaitOnFlagUntilTimeout+0xd8>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a6f8:	69bb      	ldr	r3, [r7, #24]
 800a6fa:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a6fe:	d05e      	beq.n	800a7be <UART_WaitOnFlagUntilTimeout+0xd8>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a700:	f7f7 f820 	bl	8001744 <HAL_GetTick>
 800a704:	4602      	mov	r2, r0
 800a706:	683b      	ldr	r3, [r7, #0]
 800a708:	1ad3      	subs	r3, r2, r3
 800a70a:	69ba      	ldr	r2, [r7, #24]
 800a70c:	429a      	cmp	r2, r3
 800a70e:	d302      	bcc.n	800a716 <UART_WaitOnFlagUntilTimeout+0x30>
 800a710:	69bb      	ldr	r3, [r7, #24]
 800a712:	2b00      	cmp	r3, #0
 800a714:	d11d      	bne.n	800a752 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 800a716:	68fb      	ldr	r3, [r7, #12]
 800a718:	681b      	ldr	r3, [r3, #0]
 800a71a:	681a      	ldr	r2, [r3, #0]
 800a71c:	68fb      	ldr	r3, [r7, #12]
 800a71e:	681b      	ldr	r3, [r3, #0]
 800a720:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800a724:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a726:	68fb      	ldr	r3, [r7, #12]
 800a728:	681b      	ldr	r3, [r3, #0]
 800a72a:	689a      	ldr	r2, [r3, #8]
 800a72c:	68fb      	ldr	r3, [r7, #12]
 800a72e:	681b      	ldr	r3, [r3, #0]
 800a730:	f022 0201 	bic.w	r2, r2, #1
 800a734:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 800a736:	68fb      	ldr	r3, [r7, #12]
 800a738:	2220      	movs	r2, #32
 800a73a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 800a73e:	68fb      	ldr	r3, [r7, #12]
 800a740:	2220      	movs	r2, #32
 800a742:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 800a746:	68fb      	ldr	r3, [r7, #12]
 800a748:	2200      	movs	r2, #0
 800a74a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 800a74e:	2303      	movs	r3, #3
 800a750:	e045      	b.n	800a7de <UART_WaitOnFlagUntilTimeout+0xf8>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800a752:	68fb      	ldr	r3, [r7, #12]
 800a754:	681b      	ldr	r3, [r3, #0]
 800a756:	681b      	ldr	r3, [r3, #0]
 800a758:	f003 0304 	and.w	r3, r3, #4
 800a75c:	2b00      	cmp	r3, #0
 800a75e:	d02e      	beq.n	800a7be <UART_WaitOnFlagUntilTimeout+0xd8>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800a760:	68fb      	ldr	r3, [r7, #12]
 800a762:	681b      	ldr	r3, [r3, #0]
 800a764:	69db      	ldr	r3, [r3, #28]
 800a766:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800a76a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a76e:	d126      	bne.n	800a7be <UART_WaitOnFlagUntilTimeout+0xd8>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800a770:	68fb      	ldr	r3, [r7, #12]
 800a772:	681b      	ldr	r3, [r3, #0]
 800a774:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800a778:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 800a77a:	68fb      	ldr	r3, [r7, #12]
 800a77c:	681b      	ldr	r3, [r3, #0]
 800a77e:	681a      	ldr	r2, [r3, #0]
 800a780:	68fb      	ldr	r3, [r7, #12]
 800a782:	681b      	ldr	r3, [r3, #0]
 800a784:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800a788:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a78a:	68fb      	ldr	r3, [r7, #12]
 800a78c:	681b      	ldr	r3, [r3, #0]
 800a78e:	689a      	ldr	r2, [r3, #8]
 800a790:	68fb      	ldr	r3, [r7, #12]
 800a792:	681b      	ldr	r3, [r3, #0]
 800a794:	f022 0201 	bic.w	r2, r2, #1
 800a798:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 800a79a:	68fb      	ldr	r3, [r7, #12]
 800a79c:	2220      	movs	r2, #32
 800a79e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 800a7a2:	68fb      	ldr	r3, [r7, #12]
 800a7a4:	2220      	movs	r2, #32
 800a7a6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800a7aa:	68fb      	ldr	r3, [r7, #12]
 800a7ac:	2220      	movs	r2, #32
 800a7ae:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800a7b2:	68fb      	ldr	r3, [r7, #12]
 800a7b4:	2200      	movs	r2, #0
 800a7b6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 800a7ba:	2303      	movs	r3, #3
 800a7bc:	e00f      	b.n	800a7de <UART_WaitOnFlagUntilTimeout+0xf8>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a7be:	68fb      	ldr	r3, [r7, #12]
 800a7c0:	681b      	ldr	r3, [r3, #0]
 800a7c2:	69da      	ldr	r2, [r3, #28]
 800a7c4:	68bb      	ldr	r3, [r7, #8]
 800a7c6:	4013      	ands	r3, r2
 800a7c8:	68ba      	ldr	r2, [r7, #8]
 800a7ca:	429a      	cmp	r2, r3
 800a7cc:	bf0c      	ite	eq
 800a7ce:	2301      	moveq	r3, #1
 800a7d0:	2300      	movne	r3, #0
 800a7d2:	b2db      	uxtb	r3, r3
 800a7d4:	461a      	mov	r2, r3
 800a7d6:	79fb      	ldrb	r3, [r7, #7]
 800a7d8:	429a      	cmp	r2, r3
 800a7da:	d08d      	beq.n	800a6f8 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800a7dc:	2300      	movs	r3, #0
}
 800a7de:	4618      	mov	r0, r3
 800a7e0:	3710      	adds	r7, #16
 800a7e2:	46bd      	mov	sp, r7
 800a7e4:	bd80      	pop	{r7, pc}

0800a7e6 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800a7e6:	b480      	push	{r7}
 800a7e8:	b085      	sub	sp, #20
 800a7ea:	af00      	add	r7, sp, #0
 800a7ec:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800a7ee:	687b      	ldr	r3, [r7, #4]
 800a7f0:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800a7f4:	2b01      	cmp	r3, #1
 800a7f6:	d101      	bne.n	800a7fc <HAL_UARTEx_DisableFifoMode+0x16>
 800a7f8:	2302      	movs	r3, #2
 800a7fa:	e027      	b.n	800a84c <HAL_UARTEx_DisableFifoMode+0x66>
 800a7fc:	687b      	ldr	r3, [r7, #4]
 800a7fe:	2201      	movs	r2, #1
 800a800:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800a804:	687b      	ldr	r3, [r7, #4]
 800a806:	2224      	movs	r2, #36	; 0x24
 800a808:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a80c:	687b      	ldr	r3, [r7, #4]
 800a80e:	681b      	ldr	r3, [r3, #0]
 800a810:	681b      	ldr	r3, [r3, #0]
 800a812:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800a814:	687b      	ldr	r3, [r7, #4]
 800a816:	681b      	ldr	r3, [r3, #0]
 800a818:	681a      	ldr	r2, [r3, #0]
 800a81a:	687b      	ldr	r3, [r7, #4]
 800a81c:	681b      	ldr	r3, [r3, #0]
 800a81e:	f022 0201 	bic.w	r2, r2, #1
 800a822:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800a824:	68fb      	ldr	r3, [r7, #12]
 800a826:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800a82a:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800a82c:	687b      	ldr	r3, [r7, #4]
 800a82e:	2200      	movs	r2, #0
 800a830:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a832:	687b      	ldr	r3, [r7, #4]
 800a834:	681b      	ldr	r3, [r3, #0]
 800a836:	68fa      	ldr	r2, [r7, #12]
 800a838:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800a83a:	687b      	ldr	r3, [r7, #4]
 800a83c:	2220      	movs	r2, #32
 800a83e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a842:	687b      	ldr	r3, [r7, #4]
 800a844:	2200      	movs	r2, #0
 800a846:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800a84a:	2300      	movs	r3, #0
}
 800a84c:	4618      	mov	r0, r3
 800a84e:	3714      	adds	r7, #20
 800a850:	46bd      	mov	sp, r7
 800a852:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a856:	4770      	bx	lr

0800a858 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800a858:	b580      	push	{r7, lr}
 800a85a:	b084      	sub	sp, #16
 800a85c:	af00      	add	r7, sp, #0
 800a85e:	6078      	str	r0, [r7, #4]
 800a860:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800a862:	687b      	ldr	r3, [r7, #4]
 800a864:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800a868:	2b01      	cmp	r3, #1
 800a86a:	d101      	bne.n	800a870 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800a86c:	2302      	movs	r3, #2
 800a86e:	e02d      	b.n	800a8cc <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800a870:	687b      	ldr	r3, [r7, #4]
 800a872:	2201      	movs	r2, #1
 800a874:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800a878:	687b      	ldr	r3, [r7, #4]
 800a87a:	2224      	movs	r2, #36	; 0x24
 800a87c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a880:	687b      	ldr	r3, [r7, #4]
 800a882:	681b      	ldr	r3, [r3, #0]
 800a884:	681b      	ldr	r3, [r3, #0]
 800a886:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800a888:	687b      	ldr	r3, [r7, #4]
 800a88a:	681b      	ldr	r3, [r3, #0]
 800a88c:	681a      	ldr	r2, [r3, #0]
 800a88e:	687b      	ldr	r3, [r7, #4]
 800a890:	681b      	ldr	r3, [r3, #0]
 800a892:	f022 0201 	bic.w	r2, r2, #1
 800a896:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800a898:	687b      	ldr	r3, [r7, #4]
 800a89a:	681b      	ldr	r3, [r3, #0]
 800a89c:	689b      	ldr	r3, [r3, #8]
 800a89e:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800a8a2:	687b      	ldr	r3, [r7, #4]
 800a8a4:	681b      	ldr	r3, [r3, #0]
 800a8a6:	683a      	ldr	r2, [r7, #0]
 800a8a8:	430a      	orrs	r2, r1
 800a8aa:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800a8ac:	6878      	ldr	r0, [r7, #4]
 800a8ae:	f000 f84f 	bl	800a950 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a8b2:	687b      	ldr	r3, [r7, #4]
 800a8b4:	681b      	ldr	r3, [r3, #0]
 800a8b6:	68fa      	ldr	r2, [r7, #12]
 800a8b8:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800a8ba:	687b      	ldr	r3, [r7, #4]
 800a8bc:	2220      	movs	r2, #32
 800a8be:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a8c2:	687b      	ldr	r3, [r7, #4]
 800a8c4:	2200      	movs	r2, #0
 800a8c6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800a8ca:	2300      	movs	r3, #0
}
 800a8cc:	4618      	mov	r0, r3
 800a8ce:	3710      	adds	r7, #16
 800a8d0:	46bd      	mov	sp, r7
 800a8d2:	bd80      	pop	{r7, pc}

0800a8d4 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800a8d4:	b580      	push	{r7, lr}
 800a8d6:	b084      	sub	sp, #16
 800a8d8:	af00      	add	r7, sp, #0
 800a8da:	6078      	str	r0, [r7, #4]
 800a8dc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800a8de:	687b      	ldr	r3, [r7, #4]
 800a8e0:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800a8e4:	2b01      	cmp	r3, #1
 800a8e6:	d101      	bne.n	800a8ec <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800a8e8:	2302      	movs	r3, #2
 800a8ea:	e02d      	b.n	800a948 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800a8ec:	687b      	ldr	r3, [r7, #4]
 800a8ee:	2201      	movs	r2, #1
 800a8f0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800a8f4:	687b      	ldr	r3, [r7, #4]
 800a8f6:	2224      	movs	r2, #36	; 0x24
 800a8f8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a8fc:	687b      	ldr	r3, [r7, #4]
 800a8fe:	681b      	ldr	r3, [r3, #0]
 800a900:	681b      	ldr	r3, [r3, #0]
 800a902:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800a904:	687b      	ldr	r3, [r7, #4]
 800a906:	681b      	ldr	r3, [r3, #0]
 800a908:	681a      	ldr	r2, [r3, #0]
 800a90a:	687b      	ldr	r3, [r7, #4]
 800a90c:	681b      	ldr	r3, [r3, #0]
 800a90e:	f022 0201 	bic.w	r2, r2, #1
 800a912:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800a914:	687b      	ldr	r3, [r7, #4]
 800a916:	681b      	ldr	r3, [r3, #0]
 800a918:	689b      	ldr	r3, [r3, #8]
 800a91a:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800a91e:	687b      	ldr	r3, [r7, #4]
 800a920:	681b      	ldr	r3, [r3, #0]
 800a922:	683a      	ldr	r2, [r7, #0]
 800a924:	430a      	orrs	r2, r1
 800a926:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800a928:	6878      	ldr	r0, [r7, #4]
 800a92a:	f000 f811 	bl	800a950 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a92e:	687b      	ldr	r3, [r7, #4]
 800a930:	681b      	ldr	r3, [r3, #0]
 800a932:	68fa      	ldr	r2, [r7, #12]
 800a934:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800a936:	687b      	ldr	r3, [r7, #4]
 800a938:	2220      	movs	r2, #32
 800a93a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a93e:	687b      	ldr	r3, [r7, #4]
 800a940:	2200      	movs	r2, #0
 800a942:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800a946:	2300      	movs	r3, #0
}
 800a948:	4618      	mov	r0, r3
 800a94a:	3710      	adds	r7, #16
 800a94c:	46bd      	mov	sp, r7
 800a94e:	bd80      	pop	{r7, pc}

0800a950 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800a950:	b480      	push	{r7}
 800a952:	b085      	sub	sp, #20
 800a954:	af00      	add	r7, sp, #0
 800a956:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800a958:	687b      	ldr	r3, [r7, #4]
 800a95a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a95c:	2b00      	cmp	r3, #0
 800a95e:	d108      	bne.n	800a972 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800a960:	687b      	ldr	r3, [r7, #4]
 800a962:	2201      	movs	r2, #1
 800a964:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800a968:	687b      	ldr	r3, [r7, #4]
 800a96a:	2201      	movs	r2, #1
 800a96c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800a970:	e031      	b.n	800a9d6 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800a972:	2310      	movs	r3, #16
 800a974:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800a976:	2310      	movs	r3, #16
 800a978:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800a97a:	687b      	ldr	r3, [r7, #4]
 800a97c:	681b      	ldr	r3, [r3, #0]
 800a97e:	689b      	ldr	r3, [r3, #8]
 800a980:	0e5b      	lsrs	r3, r3, #25
 800a982:	b2db      	uxtb	r3, r3
 800a984:	f003 0307 	and.w	r3, r3, #7
 800a988:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800a98a:	687b      	ldr	r3, [r7, #4]
 800a98c:	681b      	ldr	r3, [r3, #0]
 800a98e:	689b      	ldr	r3, [r3, #8]
 800a990:	0f5b      	lsrs	r3, r3, #29
 800a992:	b2db      	uxtb	r3, r3
 800a994:	f003 0307 	and.w	r3, r3, #7
 800a998:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800a99a:	7bbb      	ldrb	r3, [r7, #14]
 800a99c:	7b3a      	ldrb	r2, [r7, #12]
 800a99e:	4911      	ldr	r1, [pc, #68]	; (800a9e4 <UARTEx_SetNbDataToProcess+0x94>)
 800a9a0:	5c8a      	ldrb	r2, [r1, r2]
 800a9a2:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800a9a6:	7b3a      	ldrb	r2, [r7, #12]
 800a9a8:	490f      	ldr	r1, [pc, #60]	; (800a9e8 <UARTEx_SetNbDataToProcess+0x98>)
 800a9aa:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800a9ac:	fb93 f3f2 	sdiv	r3, r3, r2
 800a9b0:	b29a      	uxth	r2, r3
 800a9b2:	687b      	ldr	r3, [r7, #4]
 800a9b4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800a9b8:	7bfb      	ldrb	r3, [r7, #15]
 800a9ba:	7b7a      	ldrb	r2, [r7, #13]
 800a9bc:	4909      	ldr	r1, [pc, #36]	; (800a9e4 <UARTEx_SetNbDataToProcess+0x94>)
 800a9be:	5c8a      	ldrb	r2, [r1, r2]
 800a9c0:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800a9c4:	7b7a      	ldrb	r2, [r7, #13]
 800a9c6:	4908      	ldr	r1, [pc, #32]	; (800a9e8 <UARTEx_SetNbDataToProcess+0x98>)
 800a9c8:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800a9ca:	fb93 f3f2 	sdiv	r3, r3, r2
 800a9ce:	b29a      	uxth	r2, r3
 800a9d0:	687b      	ldr	r3, [r7, #4]
 800a9d2:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800a9d6:	bf00      	nop
 800a9d8:	3714      	adds	r7, #20
 800a9da:	46bd      	mov	sp, r7
 800a9dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9e0:	4770      	bx	lr
 800a9e2:	bf00      	nop
 800a9e4:	080124e8 	.word	0x080124e8
 800a9e8:	080124f0 	.word	0x080124f0

0800a9ec <SDMMC_Init>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_Init(SDMMC_TypeDef *SDMMCx, SDMMC_InitTypeDef Init)
{
 800a9ec:	b084      	sub	sp, #16
 800a9ee:	b480      	push	{r7}
 800a9f0:	b085      	sub	sp, #20
 800a9f2:	af00      	add	r7, sp, #0
 800a9f4:	6078      	str	r0, [r7, #4]
 800a9f6:	f107 001c 	add.w	r0, r7, #28
 800a9fa:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 800a9fe:	2300      	movs	r3, #0
 800aa00:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(Init.ClockDiv));

  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           | \
 800aa02:	69fa      	ldr	r2, [r7, #28]
             Init.ClockPowerSave      | \
 800aa04:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           | \
 800aa06:	431a      	orrs	r2, r3
             Init.BusWide             | \
 800aa08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockPowerSave      | \
 800aa0a:	431a      	orrs	r2, r3
             Init.HardwareFlowControl | \
 800aa0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.BusWide             | \
 800aa0e:	431a      	orrs	r2, r3
             Init.ClockDiv
 800aa10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.HardwareFlowControl | \
 800aa12:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           | \
 800aa14:	68fa      	ldr	r2, [r7, #12]
 800aa16:	4313      	orrs	r3, r2
 800aa18:	60fb      	str	r3, [r7, #12]
            );

  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);
 800aa1a:	687b      	ldr	r3, [r7, #4]
 800aa1c:	685a      	ldr	r2, [r3, #4]
 800aa1e:	4b07      	ldr	r3, [pc, #28]	; (800aa3c <SDMMC_Init+0x50>)
 800aa20:	4013      	ands	r3, r2
 800aa22:	68fa      	ldr	r2, [r7, #12]
 800aa24:	431a      	orrs	r2, r3
 800aa26:	687b      	ldr	r3, [r7, #4]
 800aa28:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 800aa2a:	2300      	movs	r3, #0
}
 800aa2c:	4618      	mov	r0, r3
 800aa2e:	3714      	adds	r7, #20
 800aa30:	46bd      	mov	sp, r7
 800aa32:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa36:	b004      	add	sp, #16
 800aa38:	4770      	bx	lr
 800aa3a:	bf00      	nop
 800aa3c:	ffc02c00 	.word	0xffc02c00

0800aa40 <SDMMC_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling)
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_ReadFIFO(SDMMC_TypeDef *SDMMCx)
{
 800aa40:	b480      	push	{r7}
 800aa42:	b083      	sub	sp, #12
 800aa44:	af00      	add	r7, sp, #0
 800aa46:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */
  return (SDMMCx->FIFO);
 800aa48:	687b      	ldr	r3, [r7, #4]
 800aa4a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 800aa4e:	4618      	mov	r0, r3
 800aa50:	370c      	adds	r7, #12
 800aa52:	46bd      	mov	sp, r7
 800aa54:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa58:	4770      	bx	lr

0800aa5a <SDMMC_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_PowerState_ON(SDMMC_TypeDef *SDMMCx)
{
 800aa5a:	b480      	push	{r7}
 800aa5c:	b083      	sub	sp, #12
 800aa5e:	af00      	add	r7, sp, #0
 800aa60:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */
  SDMMCx->POWER |= SDMMC_POWER_PWRCTRL;
 800aa62:	687b      	ldr	r3, [r7, #4]
 800aa64:	681b      	ldr	r3, [r3, #0]
 800aa66:	f043 0203 	orr.w	r2, r3, #3
 800aa6a:	687b      	ldr	r3, [r7, #4]
 800aa6c:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 800aa6e:	2300      	movs	r3, #0
}
 800aa70:	4618      	mov	r0, r3
 800aa72:	370c      	adds	r7, #12
 800aa74:	46bd      	mov	sp, r7
 800aa76:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa7a:	4770      	bx	lr

0800aa7c <SDMMC_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON
  */
uint32_t SDMMC_GetPowerState(SDMMC_TypeDef *SDMMCx)
{
 800aa7c:	b480      	push	{r7}
 800aa7e:	b083      	sub	sp, #12
 800aa80:	af00      	add	r7, sp, #0
 800aa82:	6078      	str	r0, [r7, #4]
  return (SDMMCx->POWER & SDMMC_POWER_PWRCTRL);
 800aa84:	687b      	ldr	r3, [r7, #4]
 800aa86:	681b      	ldr	r3, [r3, #0]
 800aa88:	f003 0303 	and.w	r3, r3, #3
}
 800aa8c:	4618      	mov	r0, r3
 800aa8e:	370c      	adds	r7, #12
 800aa90:	46bd      	mov	sp, r7
 800aa92:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa96:	4770      	bx	lr

0800aa98 <SDMMC_SendCommand>:
  * @param  Command: pointer to a SDMMC_CmdInitTypeDef structure that contains
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_SendCommand(SDMMC_TypeDef *SDMMCx, SDMMC_CmdInitTypeDef *Command)
{
 800aa98:	b480      	push	{r7}
 800aa9a:	b085      	sub	sp, #20
 800aa9c:	af00      	add	r7, sp, #0
 800aa9e:	6078      	str	r0, [r7, #4]
 800aaa0:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800aaa2:	2300      	movs	r3, #0
 800aaa4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_RESPONSE(Command->Response));
  assert_param(IS_SDMMC_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDMMC_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDMMCx->ARG = Command->Argument;
 800aaa6:	683b      	ldr	r3, [r7, #0]
 800aaa8:	681a      	ldr	r2, [r3, #0]
 800aaaa:	687b      	ldr	r3, [r7, #4]
 800aaac:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 800aaae:	683b      	ldr	r3, [r7, #0]
 800aab0:	685a      	ldr	r2, [r3, #4]
                       Command->Response         | \
 800aab2:	683b      	ldr	r3, [r7, #0]
 800aab4:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 800aab6:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt | \
 800aab8:	683b      	ldr	r3, [r7, #0]
 800aaba:	68db      	ldr	r3, [r3, #12]
                       Command->Response         | \
 800aabc:	431a      	orrs	r2, r3
                       Command->CPSM);
 800aabe:	683b      	ldr	r3, [r7, #0]
 800aac0:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt | \
 800aac2:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 800aac4:	68fa      	ldr	r2, [r7, #12]
 800aac6:	4313      	orrs	r3, r2
 800aac8:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC CMD register */
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800aaca:	687b      	ldr	r3, [r7, #4]
 800aacc:	68da      	ldr	r2, [r3, #12]
 800aace:	4b06      	ldr	r3, [pc, #24]	; (800aae8 <SDMMC_SendCommand+0x50>)
 800aad0:	4013      	ands	r3, r2
 800aad2:	68fa      	ldr	r2, [r7, #12]
 800aad4:	431a      	orrs	r2, r3
 800aad6:	687b      	ldr	r3, [r7, #4]
 800aad8:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800aada:	2300      	movs	r3, #0
}
 800aadc:	4618      	mov	r0, r3
 800aade:	3714      	adds	r7, #20
 800aae0:	46bd      	mov	sp, r7
 800aae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aae6:	4770      	bx	lr
 800aae8:	fffee0c0 	.word	0xfffee0c0

0800aaec <SDMMC_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDMMC_GetCommandResponse(SDMMC_TypeDef *SDMMCx)
{
 800aaec:	b480      	push	{r7}
 800aaee:	b083      	sub	sp, #12
 800aaf0:	af00      	add	r7, sp, #0
 800aaf2:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDMMCx->RESPCMD);
 800aaf4:	687b      	ldr	r3, [r7, #4]
 800aaf6:	691b      	ldr	r3, [r3, #16]
 800aaf8:	b2db      	uxtb	r3, r3
}
 800aafa:	4618      	mov	r0, r3
 800aafc:	370c      	adds	r7, #12
 800aafe:	46bd      	mov	sp, r7
 800ab00:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab04:	4770      	bx	lr

0800ab06 <SDMMC_GetResponse>:
  *            @arg SDMMC_RESP3: Response Register 3
  *            @arg SDMMC_RESP4: Response Register 4
  * @retval The Corresponding response register value
  */
uint32_t SDMMC_GetResponse(SDMMC_TypeDef *SDMMCx, uint32_t Response)
{
 800ab06:	b480      	push	{r7}
 800ab08:	b085      	sub	sp, #20
 800ab0a:	af00      	add	r7, sp, #0
 800ab0c:	6078      	str	r0, [r7, #4]
 800ab0e:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDMMC_RESP(Response));

  /* Get the response */
  tmp = (uint32_t)(&(SDMMCx->RESP1)) + Response;
 800ab10:	687b      	ldr	r3, [r7, #4]
 800ab12:	3314      	adds	r3, #20
 800ab14:	461a      	mov	r2, r3
 800ab16:	683b      	ldr	r3, [r7, #0]
 800ab18:	4413      	add	r3, r2
 800ab1a:	60fb      	str	r3, [r7, #12]

  return (*(__IO uint32_t *) tmp);
 800ab1c:	68fb      	ldr	r3, [r7, #12]
 800ab1e:	681b      	ldr	r3, [r3, #0]
}
 800ab20:	4618      	mov	r0, r3
 800ab22:	3714      	adds	r7, #20
 800ab24:	46bd      	mov	sp, r7
 800ab26:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab2a:	4770      	bx	lr

0800ab2c <SDMMC_ConfigData>:
  * @param  Data : pointer to a SDMMC_DataInitTypeDef structure
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_ConfigData(SDMMC_TypeDef *SDMMCx, SDMMC_DataInitTypeDef *Data)
{
 800ab2c:	b480      	push	{r7}
 800ab2e:	b085      	sub	sp, #20
 800ab30:	af00      	add	r7, sp, #0
 800ab32:	6078      	str	r0, [r7, #4]
 800ab34:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800ab36:	2300      	movs	r3, #0
 800ab38:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDMMC_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDMMC_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDMMCx->DTIMER = Data->DataTimeOut;
 800ab3a:	683b      	ldr	r3, [r7, #0]
 800ab3c:	681a      	ldr	r2, [r3, #0]
 800ab3e:	687b      	ldr	r3, [r7, #4]
 800ab40:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDMMCx->DLEN = Data->DataLength;
 800ab42:	683b      	ldr	r3, [r7, #0]
 800ab44:	685a      	ldr	r2, [r3, #4]
 800ab46:	687b      	ldr	r3, [r7, #4]
 800ab48:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 800ab4a:	683b      	ldr	r3, [r7, #0]
 800ab4c:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   | \
 800ab4e:	683b      	ldr	r3, [r7, #0]
 800ab50:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 800ab52:	431a      	orrs	r2, r3
                       Data->TransferMode  | \
 800ab54:	683b      	ldr	r3, [r7, #0]
 800ab56:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   | \
 800ab58:	431a      	orrs	r2, r3
                       Data->DPSM);
 800ab5a:	683b      	ldr	r3, [r7, #0]
 800ab5c:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  | \
 800ab5e:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 800ab60:	68fa      	ldr	r2, [r7, #12]
 800ab62:	4313      	orrs	r3, r2
 800ab64:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 800ab66:	687b      	ldr	r3, [r7, #4]
 800ab68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ab6a:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800ab6e:	68fb      	ldr	r3, [r7, #12]
 800ab70:	431a      	orrs	r2, r3
 800ab72:	687b      	ldr	r3, [r7, #4]
 800ab74:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 800ab76:	2300      	movs	r3, #0

}
 800ab78:	4618      	mov	r0, r3
 800ab7a:	3714      	adds	r7, #20
 800ab7c:	46bd      	mov	sp, r7
 800ab7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab82:	4770      	bx	lr

0800ab84 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDMMC_TypeDef *SDMMCx, uint32_t BlockSize)
{
 800ab84:	b580      	push	{r7, lr}
 800ab86:	b088      	sub	sp, #32
 800ab88:	af00      	add	r7, sp, #0
 800ab8a:	6078      	str	r0, [r7, #4]
 800ab8c:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 800ab8e:	683b      	ldr	r3, [r7, #0]
 800ab90:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 800ab92:	2310      	movs	r3, #16
 800ab94:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800ab96:	f44f 7380 	mov.w	r3, #256	; 0x100
 800ab9a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800ab9c:	2300      	movs	r3, #0
 800ab9e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800aba0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800aba4:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800aba6:	f107 0308 	add.w	r3, r7, #8
 800abaa:	4619      	mov	r1, r3
 800abac:	6878      	ldr	r0, [r7, #4]
 800abae:	f7ff ff73 	bl	800aa98 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SET_BLOCKLEN, SDMMC_CMDTIMEOUT);
 800abb2:	f241 3288 	movw	r2, #5000	; 0x1388
 800abb6:	2110      	movs	r1, #16
 800abb8:	6878      	ldr	r0, [r7, #4]
 800abba:	f000 fa43 	bl	800b044 <SDMMC_GetCmdResp1>
 800abbe:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800abc0:	69fb      	ldr	r3, [r7, #28]
}
 800abc2:	4618      	mov	r0, r3
 800abc4:	3720      	adds	r7, #32
 800abc6:	46bd      	mov	sp, r7
 800abc8:	bd80      	pop	{r7, pc}

0800abca <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 800abca:	b580      	push	{r7, lr}
 800abcc:	b088      	sub	sp, #32
 800abce:	af00      	add	r7, sp, #0
 800abd0:	6078      	str	r0, [r7, #4]
 800abd2:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800abd4:	683b      	ldr	r3, [r7, #0]
 800abd6:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 800abd8:	2311      	movs	r3, #17
 800abda:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800abdc:	f44f 7380 	mov.w	r3, #256	; 0x100
 800abe0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800abe2:	2300      	movs	r3, #0
 800abe4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800abe6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800abea:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800abec:	f107 0308 	add.w	r3, r7, #8
 800abf0:	4619      	mov	r1, r3
 800abf2:	6878      	ldr	r0, [r7, #4]
 800abf4:	f7ff ff50 	bl	800aa98 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 800abf8:	f241 3288 	movw	r2, #5000	; 0x1388
 800abfc:	2111      	movs	r1, #17
 800abfe:	6878      	ldr	r0, [r7, #4]
 800ac00:	f000 fa20 	bl	800b044 <SDMMC_GetCmdResp1>
 800ac04:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800ac06:	69fb      	ldr	r3, [r7, #28]
}
 800ac08:	4618      	mov	r0, r3
 800ac0a:	3720      	adds	r7, #32
 800ac0c:	46bd      	mov	sp, r7
 800ac0e:	bd80      	pop	{r7, pc}

0800ac10 <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 800ac10:	b580      	push	{r7, lr}
 800ac12:	b088      	sub	sp, #32
 800ac14:	af00      	add	r7, sp, #0
 800ac16:	6078      	str	r0, [r7, #4]
 800ac18:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800ac1a:	683b      	ldr	r3, [r7, #0]
 800ac1c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 800ac1e:	2312      	movs	r3, #18
 800ac20:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800ac22:	f44f 7380 	mov.w	r3, #256	; 0x100
 800ac26:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800ac28:	2300      	movs	r3, #0
 800ac2a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800ac2c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800ac30:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800ac32:	f107 0308 	add.w	r3, r7, #8
 800ac36:	4619      	mov	r1, r3
 800ac38:	6878      	ldr	r0, [r7, #4]
 800ac3a:	f7ff ff2d 	bl	800aa98 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 800ac3e:	f241 3288 	movw	r2, #5000	; 0x1388
 800ac42:	2112      	movs	r1, #18
 800ac44:	6878      	ldr	r0, [r7, #4]
 800ac46:	f000 f9fd 	bl	800b044 <SDMMC_GetCmdResp1>
 800ac4a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800ac4c:	69fb      	ldr	r3, [r7, #28]
}
 800ac4e:	4618      	mov	r0, r3
 800ac50:	3720      	adds	r7, #32
 800ac52:	46bd      	mov	sp, r7
 800ac54:	bd80      	pop	{r7, pc}

0800ac56 <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 800ac56:	b580      	push	{r7, lr}
 800ac58:	b088      	sub	sp, #32
 800ac5a:	af00      	add	r7, sp, #0
 800ac5c:	6078      	str	r0, [r7, #4]
 800ac5e:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800ac60:	683b      	ldr	r3, [r7, #0]
 800ac62:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 800ac64:	2318      	movs	r3, #24
 800ac66:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800ac68:	f44f 7380 	mov.w	r3, #256	; 0x100
 800ac6c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800ac6e:	2300      	movs	r3, #0
 800ac70:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800ac72:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800ac76:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800ac78:	f107 0308 	add.w	r3, r7, #8
 800ac7c:	4619      	mov	r1, r3
 800ac7e:	6878      	ldr	r0, [r7, #4]
 800ac80:	f7ff ff0a 	bl	800aa98 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 800ac84:	f241 3288 	movw	r2, #5000	; 0x1388
 800ac88:	2118      	movs	r1, #24
 800ac8a:	6878      	ldr	r0, [r7, #4]
 800ac8c:	f000 f9da 	bl	800b044 <SDMMC_GetCmdResp1>
 800ac90:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800ac92:	69fb      	ldr	r3, [r7, #28]
}
 800ac94:	4618      	mov	r0, r3
 800ac96:	3720      	adds	r7, #32
 800ac98:	46bd      	mov	sp, r7
 800ac9a:	bd80      	pop	{r7, pc}

0800ac9c <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 800ac9c:	b580      	push	{r7, lr}
 800ac9e:	b088      	sub	sp, #32
 800aca0:	af00      	add	r7, sp, #0
 800aca2:	6078      	str	r0, [r7, #4]
 800aca4:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800aca6:	683b      	ldr	r3, [r7, #0]
 800aca8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 800acaa:	2319      	movs	r3, #25
 800acac:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800acae:	f44f 7380 	mov.w	r3, #256	; 0x100
 800acb2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800acb4:	2300      	movs	r3, #0
 800acb6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800acb8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800acbc:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800acbe:	f107 0308 	add.w	r3, r7, #8
 800acc2:	4619      	mov	r1, r3
 800acc4:	6878      	ldr	r0, [r7, #4]
 800acc6:	f7ff fee7 	bl	800aa98 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 800acca:	f241 3288 	movw	r2, #5000	; 0x1388
 800acce:	2119      	movs	r1, #25
 800acd0:	6878      	ldr	r0, [r7, #4]
 800acd2:	f000 f9b7 	bl	800b044 <SDMMC_GetCmdResp1>
 800acd6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800acd8:	69fb      	ldr	r3, [r7, #28]
}
 800acda:	4618      	mov	r0, r3
 800acdc:	3720      	adds	r7, #32
 800acde:	46bd      	mov	sp, r7
 800ace0:	bd80      	pop	{r7, pc}

0800ace2 <SDMMC_CmdSelDesel>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  addr: Address of the card to be selected
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDMMC_TypeDef *SDMMCx, uint32_t Addr)
{
 800ace2:	b580      	push	{r7, lr}
 800ace4:	b088      	sub	sp, #32
 800ace6:	af00      	add	r7, sp, #0
 800ace8:	6078      	str	r0, [r7, #4]
 800acea:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 800acec:	683b      	ldr	r3, [r7, #0]
 800acee:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 800acf0:	2307      	movs	r3, #7
 800acf2:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800acf4:	f44f 7380 	mov.w	r3, #256	; 0x100
 800acf8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800acfa:	2300      	movs	r3, #0
 800acfc:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800acfe:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800ad02:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800ad04:	f107 0308 	add.w	r3, r7, #8
 800ad08:	4619      	mov	r1, r3
 800ad0a:	6878      	ldr	r0, [r7, #4]
 800ad0c:	f7ff fec4 	bl	800aa98 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEL_DESEL_CARD, SDMMC_CMDTIMEOUT);
 800ad10:	f241 3288 	movw	r2, #5000	; 0x1388
 800ad14:	2107      	movs	r1, #7
 800ad16:	6878      	ldr	r0, [r7, #4]
 800ad18:	f000 f994 	bl	800b044 <SDMMC_GetCmdResp1>
 800ad1c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800ad1e:	69fb      	ldr	r3, [r7, #28]
}
 800ad20:	4618      	mov	r0, r3
 800ad22:	3720      	adds	r7, #32
 800ad24:	46bd      	mov	sp, r7
 800ad26:	bd80      	pop	{r7, pc}

0800ad28 <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDMMC_TypeDef *SDMMCx)
{
 800ad28:	b580      	push	{r7, lr}
 800ad2a:	b088      	sub	sp, #32
 800ad2c:	af00      	add	r7, sp, #0
 800ad2e:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0U;
 800ad30:	2300      	movs	r3, #0
 800ad32:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 800ad34:	2300      	movs	r3, #0
 800ad36:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_NO;
 800ad38:	2300      	movs	r3, #0
 800ad3a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800ad3c:	2300      	movs	r3, #0
 800ad3e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800ad40:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800ad44:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800ad46:	f107 0308 	add.w	r3, r7, #8
 800ad4a:	4619      	mov	r1, r3
 800ad4c:	6878      	ldr	r0, [r7, #4]
 800ad4e:	f7ff fea3 	bl	800aa98 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDMMCx);
 800ad52:	6878      	ldr	r0, [r7, #4]
 800ad54:	f000 fbb8 	bl	800b4c8 <SDMMC_GetCmdError>
 800ad58:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800ad5a:	69fb      	ldr	r3, [r7, #28]
}
 800ad5c:	4618      	mov	r0, r3
 800ad5e:	3720      	adds	r7, #32
 800ad60:	46bd      	mov	sp, r7
 800ad62:	bd80      	pop	{r7, pc}

0800ad64 <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDMMC_TypeDef *SDMMCx)
{
 800ad64:	b580      	push	{r7, lr}
 800ad66:	b088      	sub	sp, #32
 800ad68:	af00      	add	r7, sp, #0
 800ad6a:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 800ad6c:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 800ad70:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 800ad72:	2308      	movs	r3, #8
 800ad74:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800ad76:	f44f 7380 	mov.w	r3, #256	; 0x100
 800ad7a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800ad7c:	2300      	movs	r3, #0
 800ad7e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800ad80:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800ad84:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800ad86:	f107 0308 	add.w	r3, r7, #8
 800ad8a:	4619      	mov	r1, r3
 800ad8c:	6878      	ldr	r0, [r7, #4]
 800ad8e:	f7ff fe83 	bl	800aa98 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDMMCx);
 800ad92:	6878      	ldr	r0, [r7, #4]
 800ad94:	f000 fb4a 	bl	800b42c <SDMMC_GetCmdResp7>
 800ad98:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800ad9a:	69fb      	ldr	r3, [r7, #28]
}
 800ad9c:	4618      	mov	r0, r3
 800ad9e:	3720      	adds	r7, #32
 800ada0:	46bd      	mov	sp, r7
 800ada2:	bd80      	pop	{r7, pc}

0800ada4 <SDMMC_CmdAppCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800ada4:	b580      	push	{r7, lr}
 800ada6:	b088      	sub	sp, #32
 800ada8:	af00      	add	r7, sp, #0
 800adaa:	6078      	str	r0, [r7, #4]
 800adac:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 800adae:	683b      	ldr	r3, [r7, #0]
 800adb0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 800adb2:	2337      	movs	r3, #55	; 0x37
 800adb4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800adb6:	f44f 7380 	mov.w	r3, #256	; 0x100
 800adba:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800adbc:	2300      	movs	r3, #0
 800adbe:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800adc0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800adc4:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800adc6:	f107 0308 	add.w	r3, r7, #8
 800adca:	4619      	mov	r1, r3
 800adcc:	6878      	ldr	r0, [r7, #4]
 800adce:	f7ff fe63 	bl	800aa98 <SDMMC_SendCommand>

  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_CMD, SDMMC_CMDTIMEOUT);
 800add2:	f241 3288 	movw	r2, #5000	; 0x1388
 800add6:	2137      	movs	r1, #55	; 0x37
 800add8:	6878      	ldr	r0, [r7, #4]
 800adda:	f000 f933 	bl	800b044 <SDMMC_GetCmdResp1>
 800adde:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800ade0:	69fb      	ldr	r3, [r7, #28]
}
 800ade2:	4618      	mov	r0, r3
 800ade4:	3720      	adds	r7, #32
 800ade6:	46bd      	mov	sp, r7
 800ade8:	bd80      	pop	{r7, pc}

0800adea <SDMMC_CmdAppOperCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800adea:	b580      	push	{r7, lr}
 800adec:	b088      	sub	sp, #32
 800adee:	af00      	add	r7, sp, #0
 800adf0:	6078      	str	r0, [r7, #4]
 800adf2:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = Argument;
 800adf4:	683b      	ldr	r3, [r7, #0]
 800adf6:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 800adf8:	2329      	movs	r3, #41	; 0x29
 800adfa:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800adfc:	f44f 7380 	mov.w	r3, #256	; 0x100
 800ae00:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800ae02:	2300      	movs	r3, #0
 800ae04:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800ae06:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800ae0a:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800ae0c:	f107 0308 	add.w	r3, r7, #8
 800ae10:	4619      	mov	r1, r3
 800ae12:	6878      	ldr	r0, [r7, #4]
 800ae14:	f7ff fe40 	bl	800aa98 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDMMCx);
 800ae18:	6878      	ldr	r0, [r7, #4]
 800ae1a:	f000 fa4f 	bl	800b2bc <SDMMC_GetCmdResp3>
 800ae1e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800ae20:	69fb      	ldr	r3, [r7, #28]
}
 800ae22:	4618      	mov	r0, r3
 800ae24:	3720      	adds	r7, #32
 800ae26:	46bd      	mov	sp, r7
 800ae28:	bd80      	pop	{r7, pc}

0800ae2a <SDMMC_CmdBusWidth>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  BusWidth: BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDMMC_TypeDef *SDMMCx, uint32_t BusWidth)
{
 800ae2a:	b580      	push	{r7, lr}
 800ae2c:	b088      	sub	sp, #32
 800ae2e:	af00      	add	r7, sp, #0
 800ae30:	6078      	str	r0, [r7, #4]
 800ae32:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 800ae34:	683b      	ldr	r3, [r7, #0]
 800ae36:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 800ae38:	2306      	movs	r3, #6
 800ae3a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800ae3c:	f44f 7380 	mov.w	r3, #256	; 0x100
 800ae40:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800ae42:	2300      	movs	r3, #0
 800ae44:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800ae46:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800ae4a:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800ae4c:	f107 0308 	add.w	r3, r7, #8
 800ae50:	4619      	mov	r1, r3
 800ae52:	6878      	ldr	r0, [r7, #4]
 800ae54:	f7ff fe20 	bl	800aa98 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDMMC_CMDTIMEOUT);
 800ae58:	f241 3288 	movw	r2, #5000	; 0x1388
 800ae5c:	2106      	movs	r1, #6
 800ae5e:	6878      	ldr	r0, [r7, #4]
 800ae60:	f000 f8f0 	bl	800b044 <SDMMC_GetCmdResp1>
 800ae64:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800ae66:	69fb      	ldr	r3, [r7, #28]
}
 800ae68:	4618      	mov	r0, r3
 800ae6a:	3720      	adds	r7, #32
 800ae6c:	46bd      	mov	sp, r7
 800ae6e:	bd80      	pop	{r7, pc}

0800ae70 <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDMMC_TypeDef *SDMMCx)
{
 800ae70:	b580      	push	{r7, lr}
 800ae72:	b088      	sub	sp, #32
 800ae74:	af00      	add	r7, sp, #0
 800ae76:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 800ae78:	2300      	movs	r3, #0
 800ae7a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 800ae7c:	2333      	movs	r3, #51	; 0x33
 800ae7e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800ae80:	f44f 7380 	mov.w	r3, #256	; 0x100
 800ae84:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800ae86:	2300      	movs	r3, #0
 800ae88:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800ae8a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800ae8e:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800ae90:	f107 0308 	add.w	r3, r7, #8
 800ae94:	4619      	mov	r1, r3
 800ae96:	6878      	ldr	r0, [r7, #4]
 800ae98:	f7ff fdfe 	bl	800aa98 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_SEND_SCR, SDMMC_CMDTIMEOUT);
 800ae9c:	f241 3288 	movw	r2, #5000	; 0x1388
 800aea0:	2133      	movs	r1, #51	; 0x33
 800aea2:	6878      	ldr	r0, [r7, #4]
 800aea4:	f000 f8ce 	bl	800b044 <SDMMC_GetCmdResp1>
 800aea8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800aeaa:	69fb      	ldr	r3, [r7, #28]
}
 800aeac:	4618      	mov	r0, r3
 800aeae:	3720      	adds	r7, #32
 800aeb0:	46bd      	mov	sp, r7
 800aeb2:	bd80      	pop	{r7, pc}

0800aeb4 <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDMMC_TypeDef *SDMMCx)
{
 800aeb4:	b580      	push	{r7, lr}
 800aeb6:	b088      	sub	sp, #32
 800aeb8:	af00      	add	r7, sp, #0
 800aeba:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 800aebc:	2300      	movs	r3, #0
 800aebe:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 800aec0:	2302      	movs	r3, #2
 800aec2:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 800aec4:	f44f 7340 	mov.w	r3, #768	; 0x300
 800aec8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800aeca:	2300      	movs	r3, #0
 800aecc:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800aece:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800aed2:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800aed4:	f107 0308 	add.w	r3, r7, #8
 800aed8:	4619      	mov	r1, r3
 800aeda:	6878      	ldr	r0, [r7, #4]
 800aedc:	f7ff fddc 	bl	800aa98 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 800aee0:	6878      	ldr	r0, [r7, #4]
 800aee2:	f000 f9a1 	bl	800b228 <SDMMC_GetCmdResp2>
 800aee6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800aee8:	69fb      	ldr	r3, [r7, #28]
}
 800aeea:	4618      	mov	r0, r3
 800aeec:	3720      	adds	r7, #32
 800aeee:	46bd      	mov	sp, r7
 800aef0:	bd80      	pop	{r7, pc}

0800aef2 <SDMMC_CmdSendCSD>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800aef2:	b580      	push	{r7, lr}
 800aef4:	b088      	sub	sp, #32
 800aef6:	af00      	add	r7, sp, #0
 800aef8:	6078      	str	r0, [r7, #4]
 800aefa:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 800aefc:	683b      	ldr	r3, [r7, #0]
 800aefe:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 800af00:	2309      	movs	r3, #9
 800af02:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 800af04:	f44f 7340 	mov.w	r3, #768	; 0x300
 800af08:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800af0a:	2300      	movs	r3, #0
 800af0c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800af0e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800af12:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800af14:	f107 0308 	add.w	r3, r7, #8
 800af18:	4619      	mov	r1, r3
 800af1a:	6878      	ldr	r0, [r7, #4]
 800af1c:	f7ff fdbc 	bl	800aa98 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 800af20:	6878      	ldr	r0, [r7, #4]
 800af22:	f000 f981 	bl	800b228 <SDMMC_GetCmdResp2>
 800af26:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800af28:	69fb      	ldr	r3, [r7, #28]
}
 800af2a:	4618      	mov	r0, r3
 800af2c:	3720      	adds	r7, #32
 800af2e:	46bd      	mov	sp, r7
 800af30:	bd80      	pop	{r7, pc}

0800af32 <SDMMC_CmdSetRelAdd>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  pRCA: Card RCA
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDMMC_TypeDef *SDMMCx, uint16_t *pRCA)
{
 800af32:	b580      	push	{r7, lr}
 800af34:	b088      	sub	sp, #32
 800af36:	af00      	add	r7, sp, #0
 800af38:	6078      	str	r0, [r7, #4]
 800af3a:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 800af3c:	2300      	movs	r3, #0
 800af3e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 800af40:	2303      	movs	r3, #3
 800af42:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800af44:	f44f 7380 	mov.w	r3, #256	; 0x100
 800af48:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800af4a:	2300      	movs	r3, #0
 800af4c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800af4e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800af52:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800af54:	f107 0308 	add.w	r3, r7, #8
 800af58:	4619      	mov	r1, r3
 800af5a:	6878      	ldr	r0, [r7, #4]
 800af5c:	f7ff fd9c 	bl	800aa98 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDMMCx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 800af60:	683a      	ldr	r2, [r7, #0]
 800af62:	2103      	movs	r1, #3
 800af64:	6878      	ldr	r0, [r7, #4]
 800af66:	f000 f9e9 	bl	800b33c <SDMMC_GetCmdResp6>
 800af6a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800af6c:	69fb      	ldr	r3, [r7, #28]
}
 800af6e:	4618      	mov	r0, r3
 800af70:	3720      	adds	r7, #32
 800af72:	46bd      	mov	sp, r7
 800af74:	bd80      	pop	{r7, pc}

0800af76 <SDMMC_CmdSendStatus>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800af76:	b580      	push	{r7, lr}
 800af78:	b088      	sub	sp, #32
 800af7a:	af00      	add	r7, sp, #0
 800af7c:	6078      	str	r0, [r7, #4]
 800af7e:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = Argument;
 800af80:	683b      	ldr	r3, [r7, #0]
 800af82:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 800af84:	230d      	movs	r3, #13
 800af86:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800af88:	f44f 7380 	mov.w	r3, #256	; 0x100
 800af8c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800af8e:	2300      	movs	r3, #0
 800af90:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800af92:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800af96:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800af98:	f107 0308 	add.w	r3, r7, #8
 800af9c:	4619      	mov	r1, r3
 800af9e:	6878      	ldr	r0, [r7, #4]
 800afa0:	f7ff fd7a 	bl	800aa98 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEND_STATUS, SDMMC_CMDTIMEOUT);
 800afa4:	f241 3288 	movw	r2, #5000	; 0x1388
 800afa8:	210d      	movs	r1, #13
 800afaa:	6878      	ldr	r0, [r7, #4]
 800afac:	f000 f84a 	bl	800b044 <SDMMC_GetCmdResp1>
 800afb0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800afb2:	69fb      	ldr	r3, [r7, #28]
}
 800afb4:	4618      	mov	r0, r3
 800afb6:	3720      	adds	r7, #32
 800afb8:	46bd      	mov	sp, r7
 800afba:	bd80      	pop	{r7, pc}

0800afbc <SDMMC_CmdStatusRegister>:
  * @brief  Send the Status register command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdStatusRegister(SDMMC_TypeDef *SDMMCx)
{
 800afbc:	b580      	push	{r7, lr}
 800afbe:	b088      	sub	sp, #32
 800afc0:	af00      	add	r7, sp, #0
 800afc2:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0U;
 800afc4:	2300      	movs	r3, #0
 800afc6:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_STATUS;
 800afc8:	230d      	movs	r3, #13
 800afca:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800afcc:	f44f 7380 	mov.w	r3, #256	; 0x100
 800afd0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800afd2:	2300      	movs	r3, #0
 800afd4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800afd6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800afda:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800afdc:	f107 0308 	add.w	r3, r7, #8
 800afe0:	4619      	mov	r1, r3
 800afe2:	6878      	ldr	r0, [r7, #4]
 800afe4:	f7ff fd58 	bl	800aa98 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_STATUS, SDMMC_CMDTIMEOUT);
 800afe8:	f241 3288 	movw	r2, #5000	; 0x1388
 800afec:	210d      	movs	r1, #13
 800afee:	6878      	ldr	r0, [r7, #4]
 800aff0:	f000 f828 	bl	800b044 <SDMMC_GetCmdResp1>
 800aff4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800aff6:	69fb      	ldr	r3, [r7, #28]
}
 800aff8:	4618      	mov	r0, r3
 800affa:	3720      	adds	r7, #32
 800affc:	46bd      	mov	sp, r7
 800affe:	bd80      	pop	{r7, pc}

0800b000 <SDMMC_CmdVoltageSwitch>:
  *         condition register (OCR)
  * @param  None
  * @retval HAL status
  */
uint32_t SDMMC_CmdVoltageSwitch(SDMMC_TypeDef *SDMMCx)
{
 800b000:	b580      	push	{r7, lr}
 800b002:	b088      	sub	sp, #32
 800b004:	af00      	add	r7, sp, #0
 800b006:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0x00000000;
 800b008:	2300      	movs	r3, #0
 800b00a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_VOLTAGE_SWITCH;
 800b00c:	230b      	movs	r3, #11
 800b00e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800b010:	f44f 7380 	mov.w	r3, #256	; 0x100
 800b014:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b016:	2300      	movs	r3, #0
 800b018:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b01a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800b01e:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b020:	f107 0308 	add.w	r3, r7, #8
 800b024:	4619      	mov	r1, r3
 800b026:	6878      	ldr	r0, [r7, #4]
 800b028:	f7ff fd36 	bl	800aa98 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_VOLTAGE_SWITCH, SDMMC_CMDTIMEOUT);
 800b02c:	f241 3288 	movw	r2, #5000	; 0x1388
 800b030:	210b      	movs	r1, #11
 800b032:	6878      	ldr	r0, [r7, #4]
 800b034:	f000 f806 	bl	800b044 <SDMMC_GetCmdResp1>
 800b038:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b03a:	69fb      	ldr	r3, [r7, #28]
}
 800b03c:	4618      	mov	r0, r3
 800b03e:	3720      	adds	r7, #32
 800b040:	46bd      	mov	sp, r7
 800b042:	bd80      	pop	{r7, pc}

0800b044 <SDMMC_GetCmdResp1>:
  * @param  hsd: SD handle
  * @param  SD_CMD: The sent command index
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp1(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint32_t Timeout)
{
 800b044:	b580      	push	{r7, lr}
 800b046:	b088      	sub	sp, #32
 800b048:	af00      	add	r7, sp, #0
 800b04a:	60f8      	str	r0, [r7, #12]
 800b04c:	460b      	mov	r3, r1
 800b04e:	607a      	str	r2, [r7, #4]
 800b050:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 800b052:	4b70      	ldr	r3, [pc, #448]	; (800b214 <SDMMC_GetCmdResp1+0x1d0>)
 800b054:	681b      	ldr	r3, [r3, #0]
 800b056:	4a70      	ldr	r2, [pc, #448]	; (800b218 <SDMMC_GetCmdResp1+0x1d4>)
 800b058:	fba2 2303 	umull	r2, r3, r2, r3
 800b05c:	0a5a      	lsrs	r2, r3, #9
 800b05e:	687b      	ldr	r3, [r7, #4]
 800b060:	fb02 f303 	mul.w	r3, r2, r3
 800b064:	61fb      	str	r3, [r7, #28]

  do
  {
    if (count-- == 0U)
 800b066:	69fb      	ldr	r3, [r7, #28]
 800b068:	1e5a      	subs	r2, r3, #1
 800b06a:	61fa      	str	r2, [r7, #28]
 800b06c:	2b00      	cmp	r3, #0
 800b06e:	d102      	bne.n	800b076 <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 800b070:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800b074:	e0c9      	b.n	800b20a <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDMMCx->STA;
 800b076:	68fb      	ldr	r3, [r7, #12]
 800b078:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b07a:	61bb      	str	r3, [r7, #24]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT |
 800b07c:	69ba      	ldr	r2, [r7, #24]
 800b07e:	4b67      	ldr	r3, [pc, #412]	; (800b21c <SDMMC_GetCmdResp1+0x1d8>)
 800b080:	4013      	ands	r3, r2
                        SDMMC_FLAG_BUSYD0END)) == 0U) || ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 800b082:	2b00      	cmp	r3, #0
 800b084:	d0ef      	beq.n	800b066 <SDMMC_GetCmdResp1+0x22>
 800b086:	69bb      	ldr	r3, [r7, #24]
 800b088:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800b08c:	2b00      	cmp	r3, #0
 800b08e:	d1ea      	bne.n	800b066 <SDMMC_GetCmdResp1+0x22>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800b090:	68fb      	ldr	r3, [r7, #12]
 800b092:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b094:	f003 0304 	and.w	r3, r3, #4
 800b098:	2b00      	cmp	r3, #0
 800b09a:	d004      	beq.n	800b0a6 <SDMMC_GetCmdResp1+0x62>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800b09c:	68fb      	ldr	r3, [r7, #12]
 800b09e:	2204      	movs	r2, #4
 800b0a0:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800b0a2:	2304      	movs	r3, #4
 800b0a4:	e0b1      	b.n	800b20a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800b0a6:	68fb      	ldr	r3, [r7, #12]
 800b0a8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b0aa:	f003 0301 	and.w	r3, r3, #1
 800b0ae:	2b00      	cmp	r3, #0
 800b0b0:	d004      	beq.n	800b0bc <SDMMC_GetCmdResp1+0x78>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800b0b2:	68fb      	ldr	r3, [r7, #12]
 800b0b4:	2201      	movs	r2, #1
 800b0b6:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 800b0b8:	2301      	movs	r3, #1
 800b0ba:	e0a6      	b.n	800b20a <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800b0bc:	68fb      	ldr	r3, [r7, #12]
 800b0be:	4a58      	ldr	r2, [pc, #352]	; (800b220 <SDMMC_GetCmdResp1+0x1dc>)
 800b0c0:	639a      	str	r2, [r3, #56]	; 0x38

  /* Check response received is of desired command */
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800b0c2:	68f8      	ldr	r0, [r7, #12]
 800b0c4:	f7ff fd12 	bl	800aaec <SDMMC_GetCommandResponse>
 800b0c8:	4603      	mov	r3, r0
 800b0ca:	461a      	mov	r2, r3
 800b0cc:	7afb      	ldrb	r3, [r7, #11]
 800b0ce:	4293      	cmp	r3, r2
 800b0d0:	d001      	beq.n	800b0d6 <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800b0d2:	2301      	movs	r3, #1
 800b0d4:	e099      	b.n	800b20a <SDMMC_GetCmdResp1+0x1c6>
  }

  /* We have received response, retrieve it for analysis  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 800b0d6:	2100      	movs	r1, #0
 800b0d8:	68f8      	ldr	r0, [r7, #12]
 800b0da:	f7ff fd14 	bl	800ab06 <SDMMC_GetResponse>
 800b0de:	6178      	str	r0, [r7, #20]

  if ((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 800b0e0:	697a      	ldr	r2, [r7, #20]
 800b0e2:	4b50      	ldr	r3, [pc, #320]	; (800b224 <SDMMC_GetCmdResp1+0x1e0>)
 800b0e4:	4013      	ands	r3, r2
 800b0e6:	2b00      	cmp	r3, #0
 800b0e8:	d101      	bne.n	800b0ee <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 800b0ea:	2300      	movs	r3, #0
 800b0ec:	e08d      	b.n	800b20a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 800b0ee:	697b      	ldr	r3, [r7, #20]
 800b0f0:	2b00      	cmp	r3, #0
 800b0f2:	da02      	bge.n	800b0fa <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 800b0f4:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800b0f8:	e087      	b.n	800b20a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 800b0fa:	697b      	ldr	r3, [r7, #20]
 800b0fc:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800b100:	2b00      	cmp	r3, #0
 800b102:	d001      	beq.n	800b108 <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 800b104:	2340      	movs	r3, #64	; 0x40
 800b106:	e080      	b.n	800b20a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 800b108:	697b      	ldr	r3, [r7, #20]
 800b10a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800b10e:	2b00      	cmp	r3, #0
 800b110:	d001      	beq.n	800b116 <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 800b112:	2380      	movs	r3, #128	; 0x80
 800b114:	e079      	b.n	800b20a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 800b116:	697b      	ldr	r3, [r7, #20]
 800b118:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800b11c:	2b00      	cmp	r3, #0
 800b11e:	d002      	beq.n	800b126 <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 800b120:	f44f 7380 	mov.w	r3, #256	; 0x100
 800b124:	e071      	b.n	800b20a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 800b126:	697b      	ldr	r3, [r7, #20]
 800b128:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800b12c:	2b00      	cmp	r3, #0
 800b12e:	d002      	beq.n	800b136 <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 800b130:	f44f 7300 	mov.w	r3, #512	; 0x200
 800b134:	e069      	b.n	800b20a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 800b136:	697b      	ldr	r3, [r7, #20]
 800b138:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800b13c:	2b00      	cmp	r3, #0
 800b13e:	d002      	beq.n	800b146 <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 800b140:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b144:	e061      	b.n	800b20a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 800b146:	697b      	ldr	r3, [r7, #20]
 800b148:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800b14c:	2b00      	cmp	r3, #0
 800b14e:	d002      	beq.n	800b156 <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 800b150:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800b154:	e059      	b.n	800b20a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 800b156:	697b      	ldr	r3, [r7, #20]
 800b158:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800b15c:	2b00      	cmp	r3, #0
 800b15e:	d002      	beq.n	800b166 <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800b160:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800b164:	e051      	b.n	800b20a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 800b166:	697b      	ldr	r3, [r7, #20]
 800b168:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800b16c:	2b00      	cmp	r3, #0
 800b16e:	d002      	beq.n	800b176 <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800b170:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800b174:	e049      	b.n	800b20a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 800b176:	697b      	ldr	r3, [r7, #20]
 800b178:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800b17c:	2b00      	cmp	r3, #0
 800b17e:	d002      	beq.n	800b186 <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 800b180:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800b184:	e041      	b.n	800b20a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 800b186:	697b      	ldr	r3, [r7, #20]
 800b188:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800b18c:	2b00      	cmp	r3, #0
 800b18e:	d002      	beq.n	800b196 <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 800b190:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800b194:	e039      	b.n	800b20a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 800b196:	697b      	ldr	r3, [r7, #20]
 800b198:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800b19c:	2b00      	cmp	r3, #0
 800b19e:	d002      	beq.n	800b1a6 <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 800b1a0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800b1a4:	e031      	b.n	800b20a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 800b1a6:	697b      	ldr	r3, [r7, #20]
 800b1a8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b1ac:	2b00      	cmp	r3, #0
 800b1ae:	d002      	beq.n	800b1b6 <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 800b1b0:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800b1b4:	e029      	b.n	800b20a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 800b1b6:	697b      	ldr	r3, [r7, #20]
 800b1b8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800b1bc:	2b00      	cmp	r3, #0
 800b1be:	d002      	beq.n	800b1c6 <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 800b1c0:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800b1c4:	e021      	b.n	800b20a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 800b1c6:	697b      	ldr	r3, [r7, #20]
 800b1c8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800b1cc:	2b00      	cmp	r3, #0
 800b1ce:	d002      	beq.n	800b1d6 <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 800b1d0:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800b1d4:	e019      	b.n	800b20a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 800b1d6:	697b      	ldr	r3, [r7, #20]
 800b1d8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800b1dc:	2b00      	cmp	r3, #0
 800b1de:	d002      	beq.n	800b1e6 <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 800b1e0:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800b1e4:	e011      	b.n	800b20a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 800b1e6:	697b      	ldr	r3, [r7, #20]
 800b1e8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800b1ec:	2b00      	cmp	r3, #0
 800b1ee:	d002      	beq.n	800b1f6 <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 800b1f0:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800b1f4:	e009      	b.n	800b20a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 800b1f6:	697b      	ldr	r3, [r7, #20]
 800b1f8:	f003 0308 	and.w	r3, r3, #8
 800b1fc:	2b00      	cmp	r3, #0
 800b1fe:	d002      	beq.n	800b206 <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 800b200:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 800b204:	e001      	b.n	800b20a <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800b206:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800b20a:	4618      	mov	r0, r3
 800b20c:	3720      	adds	r7, #32
 800b20e:	46bd      	mov	sp, r7
 800b210:	bd80      	pop	{r7, pc}
 800b212:	bf00      	nop
 800b214:	20000000 	.word	0x20000000
 800b218:	10624dd3 	.word	0x10624dd3
 800b21c:	00200045 	.word	0x00200045
 800b220:	002000c5 	.word	0x002000c5
 800b224:	fdffe008 	.word	0xfdffe008

0800b228 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp2(SDMMC_TypeDef *SDMMCx)
{
 800b228:	b480      	push	{r7}
 800b22a:	b085      	sub	sp, #20
 800b22c:	af00      	add	r7, sp, #0
 800b22e:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800b230:	4b1f      	ldr	r3, [pc, #124]	; (800b2b0 <SDMMC_GetCmdResp2+0x88>)
 800b232:	681b      	ldr	r3, [r3, #0]
 800b234:	4a1f      	ldr	r2, [pc, #124]	; (800b2b4 <SDMMC_GetCmdResp2+0x8c>)
 800b236:	fba2 2303 	umull	r2, r3, r2, r3
 800b23a:	0a5b      	lsrs	r3, r3, #9
 800b23c:	f241 3288 	movw	r2, #5000	; 0x1388
 800b240:	fb02 f303 	mul.w	r3, r2, r3
 800b244:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 800b246:	68fb      	ldr	r3, [r7, #12]
 800b248:	1e5a      	subs	r2, r3, #1
 800b24a:	60fa      	str	r2, [r7, #12]
 800b24c:	2b00      	cmp	r3, #0
 800b24e:	d102      	bne.n	800b256 <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800b250:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800b254:	e026      	b.n	800b2a4 <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDMMCx->STA;
 800b256:	687b      	ldr	r3, [r7, #4]
 800b258:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b25a:	60bb      	str	r3, [r7, #8]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800b25c:	68bb      	ldr	r3, [r7, #8]
 800b25e:	f003 0345 	and.w	r3, r3, #69	; 0x45
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 800b262:	2b00      	cmp	r3, #0
 800b264:	d0ef      	beq.n	800b246 <SDMMC_GetCmdResp2+0x1e>
 800b266:	68bb      	ldr	r3, [r7, #8]
 800b268:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800b26c:	2b00      	cmp	r3, #0
 800b26e:	d1ea      	bne.n	800b246 <SDMMC_GetCmdResp2+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800b270:	687b      	ldr	r3, [r7, #4]
 800b272:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b274:	f003 0304 	and.w	r3, r3, #4
 800b278:	2b00      	cmp	r3, #0
 800b27a:	d004      	beq.n	800b286 <SDMMC_GetCmdResp2+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800b27c:	687b      	ldr	r3, [r7, #4]
 800b27e:	2204      	movs	r2, #4
 800b280:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800b282:	2304      	movs	r3, #4
 800b284:	e00e      	b.n	800b2a4 <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800b286:	687b      	ldr	r3, [r7, #4]
 800b288:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b28a:	f003 0301 	and.w	r3, r3, #1
 800b28e:	2b00      	cmp	r3, #0
 800b290:	d004      	beq.n	800b29c <SDMMC_GetCmdResp2+0x74>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800b292:	687b      	ldr	r3, [r7, #4]
 800b294:	2201      	movs	r2, #1
 800b296:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 800b298:	2301      	movs	r3, #1
 800b29a:	e003      	b.n	800b2a4 <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800b29c:	687b      	ldr	r3, [r7, #4]
 800b29e:	4a06      	ldr	r2, [pc, #24]	; (800b2b8 <SDMMC_GetCmdResp2+0x90>)
 800b2a0:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 800b2a2:	2300      	movs	r3, #0
}
 800b2a4:	4618      	mov	r0, r3
 800b2a6:	3714      	adds	r7, #20
 800b2a8:	46bd      	mov	sp, r7
 800b2aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2ae:	4770      	bx	lr
 800b2b0:	20000000 	.word	0x20000000
 800b2b4:	10624dd3 	.word	0x10624dd3
 800b2b8:	002000c5 	.word	0x002000c5

0800b2bc <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp3(SDMMC_TypeDef *SDMMCx)
{
 800b2bc:	b480      	push	{r7}
 800b2be:	b085      	sub	sp, #20
 800b2c0:	af00      	add	r7, sp, #0
 800b2c2:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800b2c4:	4b1a      	ldr	r3, [pc, #104]	; (800b330 <SDMMC_GetCmdResp3+0x74>)
 800b2c6:	681b      	ldr	r3, [r3, #0]
 800b2c8:	4a1a      	ldr	r2, [pc, #104]	; (800b334 <SDMMC_GetCmdResp3+0x78>)
 800b2ca:	fba2 2303 	umull	r2, r3, r2, r3
 800b2ce:	0a5b      	lsrs	r3, r3, #9
 800b2d0:	f241 3288 	movw	r2, #5000	; 0x1388
 800b2d4:	fb02 f303 	mul.w	r3, r2, r3
 800b2d8:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 800b2da:	68fb      	ldr	r3, [r7, #12]
 800b2dc:	1e5a      	subs	r2, r3, #1
 800b2de:	60fa      	str	r2, [r7, #12]
 800b2e0:	2b00      	cmp	r3, #0
 800b2e2:	d102      	bne.n	800b2ea <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800b2e4:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800b2e8:	e01b      	b.n	800b322 <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDMMCx->STA;
 800b2ea:	687b      	ldr	r3, [r7, #4]
 800b2ec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b2ee:	60bb      	str	r3, [r7, #8]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800b2f0:	68bb      	ldr	r3, [r7, #8]
 800b2f2:	f003 0345 	and.w	r3, r3, #69	; 0x45
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 800b2f6:	2b00      	cmp	r3, #0
 800b2f8:	d0ef      	beq.n	800b2da <SDMMC_GetCmdResp3+0x1e>
 800b2fa:	68bb      	ldr	r3, [r7, #8]
 800b2fc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800b300:	2b00      	cmp	r3, #0
 800b302:	d1ea      	bne.n	800b2da <SDMMC_GetCmdResp3+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800b304:	687b      	ldr	r3, [r7, #4]
 800b306:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b308:	f003 0304 	and.w	r3, r3, #4
 800b30c:	2b00      	cmp	r3, #0
 800b30e:	d004      	beq.n	800b31a <SDMMC_GetCmdResp3+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800b310:	687b      	ldr	r3, [r7, #4]
 800b312:	2204      	movs	r2, #4
 800b314:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800b316:	2304      	movs	r3, #4
 800b318:	e003      	b.n	800b322 <SDMMC_GetCmdResp3+0x66>
  }
  else
  {
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800b31a:	687b      	ldr	r3, [r7, #4]
 800b31c:	4a06      	ldr	r2, [pc, #24]	; (800b338 <SDMMC_GetCmdResp3+0x7c>)
 800b31e:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 800b320:	2300      	movs	r3, #0
}
 800b322:	4618      	mov	r0, r3
 800b324:	3714      	adds	r7, #20
 800b326:	46bd      	mov	sp, r7
 800b328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b32c:	4770      	bx	lr
 800b32e:	bf00      	nop
 800b330:	20000000 	.word	0x20000000
 800b334:	10624dd3 	.word	0x10624dd3
 800b338:	002000c5 	.word	0x002000c5

0800b33c <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative
  *         address RCA
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp6(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint16_t *pRCA)
{
 800b33c:	b580      	push	{r7, lr}
 800b33e:	b088      	sub	sp, #32
 800b340:	af00      	add	r7, sp, #0
 800b342:	60f8      	str	r0, [r7, #12]
 800b344:	460b      	mov	r3, r1
 800b346:	607a      	str	r2, [r7, #4]
 800b348:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800b34a:	4b35      	ldr	r3, [pc, #212]	; (800b420 <SDMMC_GetCmdResp6+0xe4>)
 800b34c:	681b      	ldr	r3, [r3, #0]
 800b34e:	4a35      	ldr	r2, [pc, #212]	; (800b424 <SDMMC_GetCmdResp6+0xe8>)
 800b350:	fba2 2303 	umull	r2, r3, r2, r3
 800b354:	0a5b      	lsrs	r3, r3, #9
 800b356:	f241 3288 	movw	r2, #5000	; 0x1388
 800b35a:	fb02 f303 	mul.w	r3, r2, r3
 800b35e:	61fb      	str	r3, [r7, #28]

  do
  {
    if (count-- == 0U)
 800b360:	69fb      	ldr	r3, [r7, #28]
 800b362:	1e5a      	subs	r2, r3, #1
 800b364:	61fa      	str	r2, [r7, #28]
 800b366:	2b00      	cmp	r3, #0
 800b368:	d102      	bne.n	800b370 <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 800b36a:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800b36e:	e052      	b.n	800b416 <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDMMCx->STA;
 800b370:	68fb      	ldr	r3, [r7, #12]
 800b372:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b374:	61bb      	str	r3, [r7, #24]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800b376:	69bb      	ldr	r3, [r7, #24]
 800b378:	f003 0345 	and.w	r3, r3, #69	; 0x45
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 800b37c:	2b00      	cmp	r3, #0
 800b37e:	d0ef      	beq.n	800b360 <SDMMC_GetCmdResp6+0x24>
 800b380:	69bb      	ldr	r3, [r7, #24]
 800b382:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800b386:	2b00      	cmp	r3, #0
 800b388:	d1ea      	bne.n	800b360 <SDMMC_GetCmdResp6+0x24>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800b38a:	68fb      	ldr	r3, [r7, #12]
 800b38c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b38e:	f003 0304 	and.w	r3, r3, #4
 800b392:	2b00      	cmp	r3, #0
 800b394:	d004      	beq.n	800b3a0 <SDMMC_GetCmdResp6+0x64>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800b396:	68fb      	ldr	r3, [r7, #12]
 800b398:	2204      	movs	r2, #4
 800b39a:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800b39c:	2304      	movs	r3, #4
 800b39e:	e03a      	b.n	800b416 <SDMMC_GetCmdResp6+0xda>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800b3a0:	68fb      	ldr	r3, [r7, #12]
 800b3a2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b3a4:	f003 0301 	and.w	r3, r3, #1
 800b3a8:	2b00      	cmp	r3, #0
 800b3aa:	d004      	beq.n	800b3b6 <SDMMC_GetCmdResp6+0x7a>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800b3ac:	68fb      	ldr	r3, [r7, #12]
 800b3ae:	2201      	movs	r2, #1
 800b3b0:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 800b3b2:	2301      	movs	r3, #1
 800b3b4:	e02f      	b.n	800b416 <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }

  /* Check response received is of desired command */
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800b3b6:	68f8      	ldr	r0, [r7, #12]
 800b3b8:	f7ff fb98 	bl	800aaec <SDMMC_GetCommandResponse>
 800b3bc:	4603      	mov	r3, r0
 800b3be:	461a      	mov	r2, r3
 800b3c0:	7afb      	ldrb	r3, [r7, #11]
 800b3c2:	4293      	cmp	r3, r2
 800b3c4:	d001      	beq.n	800b3ca <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800b3c6:	2301      	movs	r3, #1
 800b3c8:	e025      	b.n	800b416 <SDMMC_GetCmdResp6+0xda>
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800b3ca:	68fb      	ldr	r3, [r7, #12]
 800b3cc:	4a16      	ldr	r2, [pc, #88]	; (800b428 <SDMMC_GetCmdResp6+0xec>)
 800b3ce:	639a      	str	r2, [r3, #56]	; 0x38

  /* We have received response, retrieve it.  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 800b3d0:	2100      	movs	r1, #0
 800b3d2:	68f8      	ldr	r0, [r7, #12]
 800b3d4:	f7ff fb97 	bl	800ab06 <SDMMC_GetResponse>
 800b3d8:	6178      	str	r0, [r7, #20]

  if ((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD |
 800b3da:	697b      	ldr	r3, [r7, #20]
 800b3dc:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 800b3e0:	2b00      	cmp	r3, #0
 800b3e2:	d106      	bne.n	800b3f2 <SDMMC_GetCmdResp6+0xb6>
                      SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
  {
    *pRCA = (uint16_t)(response_r1 >> 16);
 800b3e4:	697b      	ldr	r3, [r7, #20]
 800b3e6:	0c1b      	lsrs	r3, r3, #16
 800b3e8:	b29a      	uxth	r2, r3
 800b3ea:	687b      	ldr	r3, [r7, #4]
 800b3ec:	801a      	strh	r2, [r3, #0]

    return SDMMC_ERROR_NONE;
 800b3ee:	2300      	movs	r3, #0
 800b3f0:	e011      	b.n	800b416 <SDMMC_GetCmdResp6+0xda>
  }
  else if ((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 800b3f2:	697b      	ldr	r3, [r7, #20]
 800b3f4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800b3f8:	2b00      	cmp	r3, #0
 800b3fa:	d002      	beq.n	800b402 <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800b3fc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800b400:	e009      	b.n	800b416 <SDMMC_GetCmdResp6+0xda>
  }
  else if ((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 800b402:	697b      	ldr	r3, [r7, #20]
 800b404:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800b408:	2b00      	cmp	r3, #0
 800b40a:	d002      	beq.n	800b412 <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800b40c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800b410:	e001      	b.n	800b416 <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800b412:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800b416:	4618      	mov	r0, r3
 800b418:	3720      	adds	r7, #32
 800b41a:	46bd      	mov	sp, r7
 800b41c:	bd80      	pop	{r7, pc}
 800b41e:	bf00      	nop
 800b420:	20000000 	.word	0x20000000
 800b424:	10624dd3 	.word	0x10624dd3
 800b428:	002000c5 	.word	0x002000c5

0800b42c <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp7(SDMMC_TypeDef *SDMMCx)
{
 800b42c:	b480      	push	{r7}
 800b42e:	b085      	sub	sp, #20
 800b430:	af00      	add	r7, sp, #0
 800b432:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800b434:	4b22      	ldr	r3, [pc, #136]	; (800b4c0 <SDMMC_GetCmdResp7+0x94>)
 800b436:	681b      	ldr	r3, [r3, #0]
 800b438:	4a22      	ldr	r2, [pc, #136]	; (800b4c4 <SDMMC_GetCmdResp7+0x98>)
 800b43a:	fba2 2303 	umull	r2, r3, r2, r3
 800b43e:	0a5b      	lsrs	r3, r3, #9
 800b440:	f241 3288 	movw	r2, #5000	; 0x1388
 800b444:	fb02 f303 	mul.w	r3, r2, r3
 800b448:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 800b44a:	68fb      	ldr	r3, [r7, #12]
 800b44c:	1e5a      	subs	r2, r3, #1
 800b44e:	60fa      	str	r2, [r7, #12]
 800b450:	2b00      	cmp	r3, #0
 800b452:	d102      	bne.n	800b45a <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800b454:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800b458:	e02c      	b.n	800b4b4 <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDMMCx->STA;
 800b45a:	687b      	ldr	r3, [r7, #4]
 800b45c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b45e:	60bb      	str	r3, [r7, #8]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800b460:	68bb      	ldr	r3, [r7, #8]
 800b462:	f003 0345 	and.w	r3, r3, #69	; 0x45
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 800b466:	2b00      	cmp	r3, #0
 800b468:	d0ef      	beq.n	800b44a <SDMMC_GetCmdResp7+0x1e>
 800b46a:	68bb      	ldr	r3, [r7, #8]
 800b46c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800b470:	2b00      	cmp	r3, #0
 800b472:	d1ea      	bne.n	800b44a <SDMMC_GetCmdResp7+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800b474:	687b      	ldr	r3, [r7, #4]
 800b476:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b478:	f003 0304 	and.w	r3, r3, #4
 800b47c:	2b00      	cmp	r3, #0
 800b47e:	d004      	beq.n	800b48a <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800b480:	687b      	ldr	r3, [r7, #4]
 800b482:	2204      	movs	r2, #4
 800b484:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800b486:	2304      	movs	r3, #4
 800b488:	e014      	b.n	800b4b4 <SDMMC_GetCmdResp7+0x88>
  }

  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800b48a:	687b      	ldr	r3, [r7, #4]
 800b48c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b48e:	f003 0301 	and.w	r3, r3, #1
 800b492:	2b00      	cmp	r3, #0
 800b494:	d004      	beq.n	800b4a0 <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800b496:	687b      	ldr	r3, [r7, #4]
 800b498:	2201      	movs	r2, #1
 800b49a:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 800b49c:	2301      	movs	r3, #1
 800b49e:	e009      	b.n	800b4b4 <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDREND))
 800b4a0:	687b      	ldr	r3, [r7, #4]
 800b4a2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b4a4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b4a8:	2b00      	cmp	r3, #0
 800b4aa:	d002      	beq.n	800b4b2 <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CMDREND);
 800b4ac:	687b      	ldr	r3, [r7, #4]
 800b4ae:	2240      	movs	r2, #64	; 0x40
 800b4b0:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 800b4b2:	2300      	movs	r3, #0

}
 800b4b4:	4618      	mov	r0, r3
 800b4b6:	3714      	adds	r7, #20
 800b4b8:	46bd      	mov	sp, r7
 800b4ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4be:	4770      	bx	lr
 800b4c0:	20000000 	.word	0x20000000
 800b4c4:	10624dd3 	.word	0x10624dd3

0800b4c8 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDMMC_TypeDef *SDMMCx)
{
 800b4c8:	b480      	push	{r7}
 800b4ca:	b085      	sub	sp, #20
 800b4cc:	af00      	add	r7, sp, #0
 800b4ce:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800b4d0:	4b11      	ldr	r3, [pc, #68]	; (800b518 <SDMMC_GetCmdError+0x50>)
 800b4d2:	681b      	ldr	r3, [r3, #0]
 800b4d4:	4a11      	ldr	r2, [pc, #68]	; (800b51c <SDMMC_GetCmdError+0x54>)
 800b4d6:	fba2 2303 	umull	r2, r3, r2, r3
 800b4da:	0a5b      	lsrs	r3, r3, #9
 800b4dc:	f241 3288 	movw	r2, #5000	; 0x1388
 800b4e0:	fb02 f303 	mul.w	r3, r2, r3
 800b4e4:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 800b4e6:	68fb      	ldr	r3, [r7, #12]
 800b4e8:	1e5a      	subs	r2, r3, #1
 800b4ea:	60fa      	str	r2, [r7, #12]
 800b4ec:	2b00      	cmp	r3, #0
 800b4ee:	d102      	bne.n	800b4f6 <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800b4f0:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800b4f4:	e009      	b.n	800b50a <SDMMC_GetCmdError+0x42>
    }

  } while (!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDSENT));
 800b4f6:	687b      	ldr	r3, [r7, #4]
 800b4f8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b4fa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b4fe:	2b00      	cmp	r3, #0
 800b500:	d0f1      	beq.n	800b4e6 <SDMMC_GetCmdError+0x1e>

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800b502:	687b      	ldr	r3, [r7, #4]
 800b504:	4a06      	ldr	r2, [pc, #24]	; (800b520 <SDMMC_GetCmdError+0x58>)
 800b506:	639a      	str	r2, [r3, #56]	; 0x38

  return SDMMC_ERROR_NONE;
 800b508:	2300      	movs	r3, #0
}
 800b50a:	4618      	mov	r0, r3
 800b50c:	3714      	adds	r7, #20
 800b50e:	46bd      	mov	sp, r7
 800b510:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b514:	4770      	bx	lr
 800b516:	bf00      	nop
 800b518:	20000000 	.word	0x20000000
 800b51c:	10624dd3 	.word	0x10624dd3
 800b520:	002000c5 	.word	0x002000c5

0800b524 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800b524:	b084      	sub	sp, #16
 800b526:	b580      	push	{r7, lr}
 800b528:	b084      	sub	sp, #16
 800b52a:	af00      	add	r7, sp, #0
 800b52c:	6078      	str	r0, [r7, #4]
 800b52e:	f107 001c 	add.w	r0, r7, #28
 800b532:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800b536:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b538:	2b01      	cmp	r3, #1
 800b53a:	d120      	bne.n	800b57e <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800b53c:	687b      	ldr	r3, [r7, #4]
 800b53e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b540:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800b544:	687b      	ldr	r3, [r7, #4]
 800b546:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800b548:	687b      	ldr	r3, [r7, #4]
 800b54a:	68da      	ldr	r2, [r3, #12]
 800b54c:	4b2a      	ldr	r3, [pc, #168]	; (800b5f8 <USB_CoreInit+0xd4>)
 800b54e:	4013      	ands	r3, r2
 800b550:	687a      	ldr	r2, [r7, #4]
 800b552:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800b554:	687b      	ldr	r3, [r7, #4]
 800b556:	68db      	ldr	r3, [r3, #12]
 800b558:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800b55c:	687b      	ldr	r3, [r7, #4]
 800b55e:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800b560:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b562:	2b01      	cmp	r3, #1
 800b564:	d105      	bne.n	800b572 <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800b566:	687b      	ldr	r3, [r7, #4]
 800b568:	68db      	ldr	r3, [r3, #12]
 800b56a:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800b56e:	687b      	ldr	r3, [r7, #4]
 800b570:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800b572:	6878      	ldr	r0, [r7, #4]
 800b574:	f001 fb14 	bl	800cba0 <USB_CoreReset>
 800b578:	4603      	mov	r3, r0
 800b57a:	73fb      	strb	r3, [r7, #15]
 800b57c:	e01a      	b.n	800b5b4 <USB_CoreInit+0x90>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800b57e:	687b      	ldr	r3, [r7, #4]
 800b580:	68db      	ldr	r3, [r3, #12]
 800b582:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800b586:	687b      	ldr	r3, [r7, #4]
 800b588:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800b58a:	6878      	ldr	r0, [r7, #4]
 800b58c:	f001 fb08 	bl	800cba0 <USB_CoreReset>
 800b590:	4603      	mov	r3, r0
 800b592:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800b594:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b596:	2b00      	cmp	r3, #0
 800b598:	d106      	bne.n	800b5a8 <USB_CoreInit+0x84>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800b59a:	687b      	ldr	r3, [r7, #4]
 800b59c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b59e:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800b5a2:	687b      	ldr	r3, [r7, #4]
 800b5a4:	639a      	str	r2, [r3, #56]	; 0x38
 800b5a6:	e005      	b.n	800b5b4 <USB_CoreInit+0x90>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800b5a8:	687b      	ldr	r3, [r7, #4]
 800b5aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b5ac:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800b5b0:	687b      	ldr	r3, [r7, #4]
 800b5b2:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800b5b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b5b6:	2b01      	cmp	r3, #1
 800b5b8:	d116      	bne.n	800b5e8 <USB_CoreInit+0xc4>
  {
    /* make sure to reserve 18 fifo Locations for DMA buffers */
    USBx->GDFIFOCFG &= ~(0xFFFFU << 16);
 800b5ba:	687b      	ldr	r3, [r7, #4]
 800b5bc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b5be:	b29a      	uxth	r2, r3
 800b5c0:	687b      	ldr	r3, [r7, #4]
 800b5c2:	65da      	str	r2, [r3, #92]	; 0x5c
    USBx->GDFIFOCFG |= 0x3EEU << 16;
 800b5c4:	687b      	ldr	r3, [r7, #4]
 800b5c6:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800b5c8:	4b0c      	ldr	r3, [pc, #48]	; (800b5fc <USB_CoreInit+0xd8>)
 800b5ca:	4313      	orrs	r3, r2
 800b5cc:	687a      	ldr	r2, [r7, #4]
 800b5ce:	65d3      	str	r3, [r2, #92]	; 0x5c

    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800b5d0:	687b      	ldr	r3, [r7, #4]
 800b5d2:	689b      	ldr	r3, [r3, #8]
 800b5d4:	f043 0206 	orr.w	r2, r3, #6
 800b5d8:	687b      	ldr	r3, [r7, #4]
 800b5da:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800b5dc:	687b      	ldr	r3, [r7, #4]
 800b5de:	689b      	ldr	r3, [r3, #8]
 800b5e0:	f043 0220 	orr.w	r2, r3, #32
 800b5e4:	687b      	ldr	r3, [r7, #4]
 800b5e6:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800b5e8:	7bfb      	ldrb	r3, [r7, #15]
}
 800b5ea:	4618      	mov	r0, r3
 800b5ec:	3710      	adds	r7, #16
 800b5ee:	46bd      	mov	sp, r7
 800b5f0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800b5f4:	b004      	add	sp, #16
 800b5f6:	4770      	bx	lr
 800b5f8:	ffbdffbf 	.word	0xffbdffbf
 800b5fc:	03ee0000 	.word	0x03ee0000

0800b600 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 800b600:	b480      	push	{r7}
 800b602:	b087      	sub	sp, #28
 800b604:	af00      	add	r7, sp, #0
 800b606:	60f8      	str	r0, [r7, #12]
 800b608:	60b9      	str	r1, [r7, #8]
 800b60a:	4613      	mov	r3, r2
 800b60c:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 800b60e:	79fb      	ldrb	r3, [r7, #7]
 800b610:	2b02      	cmp	r3, #2
 800b612:	d165      	bne.n	800b6e0 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 800b614:	68bb      	ldr	r3, [r7, #8]
 800b616:	4a41      	ldr	r2, [pc, #260]	; (800b71c <USB_SetTurnaroundTime+0x11c>)
 800b618:	4293      	cmp	r3, r2
 800b61a:	d906      	bls.n	800b62a <USB_SetTurnaroundTime+0x2a>
 800b61c:	68bb      	ldr	r3, [r7, #8]
 800b61e:	4a40      	ldr	r2, [pc, #256]	; (800b720 <USB_SetTurnaroundTime+0x120>)
 800b620:	4293      	cmp	r3, r2
 800b622:	d202      	bcs.n	800b62a <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 800b624:	230f      	movs	r3, #15
 800b626:	617b      	str	r3, [r7, #20]
 800b628:	e062      	b.n	800b6f0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 800b62a:	68bb      	ldr	r3, [r7, #8]
 800b62c:	4a3c      	ldr	r2, [pc, #240]	; (800b720 <USB_SetTurnaroundTime+0x120>)
 800b62e:	4293      	cmp	r3, r2
 800b630:	d306      	bcc.n	800b640 <USB_SetTurnaroundTime+0x40>
 800b632:	68bb      	ldr	r3, [r7, #8]
 800b634:	4a3b      	ldr	r2, [pc, #236]	; (800b724 <USB_SetTurnaroundTime+0x124>)
 800b636:	4293      	cmp	r3, r2
 800b638:	d202      	bcs.n	800b640 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 800b63a:	230e      	movs	r3, #14
 800b63c:	617b      	str	r3, [r7, #20]
 800b63e:	e057      	b.n	800b6f0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 800b640:	68bb      	ldr	r3, [r7, #8]
 800b642:	4a38      	ldr	r2, [pc, #224]	; (800b724 <USB_SetTurnaroundTime+0x124>)
 800b644:	4293      	cmp	r3, r2
 800b646:	d306      	bcc.n	800b656 <USB_SetTurnaroundTime+0x56>
 800b648:	68bb      	ldr	r3, [r7, #8]
 800b64a:	4a37      	ldr	r2, [pc, #220]	; (800b728 <USB_SetTurnaroundTime+0x128>)
 800b64c:	4293      	cmp	r3, r2
 800b64e:	d202      	bcs.n	800b656 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 800b650:	230d      	movs	r3, #13
 800b652:	617b      	str	r3, [r7, #20]
 800b654:	e04c      	b.n	800b6f0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 800b656:	68bb      	ldr	r3, [r7, #8]
 800b658:	4a33      	ldr	r2, [pc, #204]	; (800b728 <USB_SetTurnaroundTime+0x128>)
 800b65a:	4293      	cmp	r3, r2
 800b65c:	d306      	bcc.n	800b66c <USB_SetTurnaroundTime+0x6c>
 800b65e:	68bb      	ldr	r3, [r7, #8]
 800b660:	4a32      	ldr	r2, [pc, #200]	; (800b72c <USB_SetTurnaroundTime+0x12c>)
 800b662:	4293      	cmp	r3, r2
 800b664:	d802      	bhi.n	800b66c <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 800b666:	230c      	movs	r3, #12
 800b668:	617b      	str	r3, [r7, #20]
 800b66a:	e041      	b.n	800b6f0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 800b66c:	68bb      	ldr	r3, [r7, #8]
 800b66e:	4a2f      	ldr	r2, [pc, #188]	; (800b72c <USB_SetTurnaroundTime+0x12c>)
 800b670:	4293      	cmp	r3, r2
 800b672:	d906      	bls.n	800b682 <USB_SetTurnaroundTime+0x82>
 800b674:	68bb      	ldr	r3, [r7, #8]
 800b676:	4a2e      	ldr	r2, [pc, #184]	; (800b730 <USB_SetTurnaroundTime+0x130>)
 800b678:	4293      	cmp	r3, r2
 800b67a:	d802      	bhi.n	800b682 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 800b67c:	230b      	movs	r3, #11
 800b67e:	617b      	str	r3, [r7, #20]
 800b680:	e036      	b.n	800b6f0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 800b682:	68bb      	ldr	r3, [r7, #8]
 800b684:	4a2a      	ldr	r2, [pc, #168]	; (800b730 <USB_SetTurnaroundTime+0x130>)
 800b686:	4293      	cmp	r3, r2
 800b688:	d906      	bls.n	800b698 <USB_SetTurnaroundTime+0x98>
 800b68a:	68bb      	ldr	r3, [r7, #8]
 800b68c:	4a29      	ldr	r2, [pc, #164]	; (800b734 <USB_SetTurnaroundTime+0x134>)
 800b68e:	4293      	cmp	r3, r2
 800b690:	d802      	bhi.n	800b698 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 800b692:	230a      	movs	r3, #10
 800b694:	617b      	str	r3, [r7, #20]
 800b696:	e02b      	b.n	800b6f0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 800b698:	68bb      	ldr	r3, [r7, #8]
 800b69a:	4a26      	ldr	r2, [pc, #152]	; (800b734 <USB_SetTurnaroundTime+0x134>)
 800b69c:	4293      	cmp	r3, r2
 800b69e:	d906      	bls.n	800b6ae <USB_SetTurnaroundTime+0xae>
 800b6a0:	68bb      	ldr	r3, [r7, #8]
 800b6a2:	4a25      	ldr	r2, [pc, #148]	; (800b738 <USB_SetTurnaroundTime+0x138>)
 800b6a4:	4293      	cmp	r3, r2
 800b6a6:	d202      	bcs.n	800b6ae <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 800b6a8:	2309      	movs	r3, #9
 800b6aa:	617b      	str	r3, [r7, #20]
 800b6ac:	e020      	b.n	800b6f0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 800b6ae:	68bb      	ldr	r3, [r7, #8]
 800b6b0:	4a21      	ldr	r2, [pc, #132]	; (800b738 <USB_SetTurnaroundTime+0x138>)
 800b6b2:	4293      	cmp	r3, r2
 800b6b4:	d306      	bcc.n	800b6c4 <USB_SetTurnaroundTime+0xc4>
 800b6b6:	68bb      	ldr	r3, [r7, #8]
 800b6b8:	4a20      	ldr	r2, [pc, #128]	; (800b73c <USB_SetTurnaroundTime+0x13c>)
 800b6ba:	4293      	cmp	r3, r2
 800b6bc:	d802      	bhi.n	800b6c4 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 800b6be:	2308      	movs	r3, #8
 800b6c0:	617b      	str	r3, [r7, #20]
 800b6c2:	e015      	b.n	800b6f0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 800b6c4:	68bb      	ldr	r3, [r7, #8]
 800b6c6:	4a1d      	ldr	r2, [pc, #116]	; (800b73c <USB_SetTurnaroundTime+0x13c>)
 800b6c8:	4293      	cmp	r3, r2
 800b6ca:	d906      	bls.n	800b6da <USB_SetTurnaroundTime+0xda>
 800b6cc:	68bb      	ldr	r3, [r7, #8]
 800b6ce:	4a1c      	ldr	r2, [pc, #112]	; (800b740 <USB_SetTurnaroundTime+0x140>)
 800b6d0:	4293      	cmp	r3, r2
 800b6d2:	d202      	bcs.n	800b6da <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 800b6d4:	2307      	movs	r3, #7
 800b6d6:	617b      	str	r3, [r7, #20]
 800b6d8:	e00a      	b.n	800b6f0 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 800b6da:	2306      	movs	r3, #6
 800b6dc:	617b      	str	r3, [r7, #20]
 800b6de:	e007      	b.n	800b6f0 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 800b6e0:	79fb      	ldrb	r3, [r7, #7]
 800b6e2:	2b00      	cmp	r3, #0
 800b6e4:	d102      	bne.n	800b6ec <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 800b6e6:	2309      	movs	r3, #9
 800b6e8:	617b      	str	r3, [r7, #20]
 800b6ea:	e001      	b.n	800b6f0 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 800b6ec:	2309      	movs	r3, #9
 800b6ee:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 800b6f0:	68fb      	ldr	r3, [r7, #12]
 800b6f2:	68db      	ldr	r3, [r3, #12]
 800b6f4:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 800b6f8:	68fb      	ldr	r3, [r7, #12]
 800b6fa:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 800b6fc:	68fb      	ldr	r3, [r7, #12]
 800b6fe:	68da      	ldr	r2, [r3, #12]
 800b700:	697b      	ldr	r3, [r7, #20]
 800b702:	029b      	lsls	r3, r3, #10
 800b704:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 800b708:	431a      	orrs	r2, r3
 800b70a:	68fb      	ldr	r3, [r7, #12]
 800b70c:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800b70e:	2300      	movs	r3, #0
}
 800b710:	4618      	mov	r0, r3
 800b712:	371c      	adds	r7, #28
 800b714:	46bd      	mov	sp, r7
 800b716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b71a:	4770      	bx	lr
 800b71c:	00d8acbf 	.word	0x00d8acbf
 800b720:	00e4e1c0 	.word	0x00e4e1c0
 800b724:	00f42400 	.word	0x00f42400
 800b728:	01067380 	.word	0x01067380
 800b72c:	011a499f 	.word	0x011a499f
 800b730:	01312cff 	.word	0x01312cff
 800b734:	014ca43f 	.word	0x014ca43f
 800b738:	016e3600 	.word	0x016e3600
 800b73c:	01a6ab1f 	.word	0x01a6ab1f
 800b740:	01e84800 	.word	0x01e84800

0800b744 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800b744:	b480      	push	{r7}
 800b746:	b083      	sub	sp, #12
 800b748:	af00      	add	r7, sp, #0
 800b74a:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800b74c:	687b      	ldr	r3, [r7, #4]
 800b74e:	689b      	ldr	r3, [r3, #8]
 800b750:	f043 0201 	orr.w	r2, r3, #1
 800b754:	687b      	ldr	r3, [r7, #4]
 800b756:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800b758:	2300      	movs	r3, #0
}
 800b75a:	4618      	mov	r0, r3
 800b75c:	370c      	adds	r7, #12
 800b75e:	46bd      	mov	sp, r7
 800b760:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b764:	4770      	bx	lr

0800b766 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800b766:	b480      	push	{r7}
 800b768:	b083      	sub	sp, #12
 800b76a:	af00      	add	r7, sp, #0
 800b76c:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800b76e:	687b      	ldr	r3, [r7, #4]
 800b770:	689b      	ldr	r3, [r3, #8]
 800b772:	f023 0201 	bic.w	r2, r3, #1
 800b776:	687b      	ldr	r3, [r7, #4]
 800b778:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800b77a:	2300      	movs	r3, #0
}
 800b77c:	4618      	mov	r0, r3
 800b77e:	370c      	adds	r7, #12
 800b780:	46bd      	mov	sp, r7
 800b782:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b786:	4770      	bx	lr

0800b788 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800b788:	b580      	push	{r7, lr}
 800b78a:	b082      	sub	sp, #8
 800b78c:	af00      	add	r7, sp, #0
 800b78e:	6078      	str	r0, [r7, #4]
 800b790:	460b      	mov	r3, r1
 800b792:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800b794:	687b      	ldr	r3, [r7, #4]
 800b796:	68db      	ldr	r3, [r3, #12]
 800b798:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800b79c:	687b      	ldr	r3, [r7, #4]
 800b79e:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800b7a0:	78fb      	ldrb	r3, [r7, #3]
 800b7a2:	2b01      	cmp	r3, #1
 800b7a4:	d106      	bne.n	800b7b4 <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800b7a6:	687b      	ldr	r3, [r7, #4]
 800b7a8:	68db      	ldr	r3, [r3, #12]
 800b7aa:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800b7ae:	687b      	ldr	r3, [r7, #4]
 800b7b0:	60da      	str	r2, [r3, #12]
 800b7b2:	e00b      	b.n	800b7cc <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 800b7b4:	78fb      	ldrb	r3, [r7, #3]
 800b7b6:	2b00      	cmp	r3, #0
 800b7b8:	d106      	bne.n	800b7c8 <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800b7ba:	687b      	ldr	r3, [r7, #4]
 800b7bc:	68db      	ldr	r3, [r3, #12]
 800b7be:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800b7c2:	687b      	ldr	r3, [r7, #4]
 800b7c4:	60da      	str	r2, [r3, #12]
 800b7c6:	e001      	b.n	800b7cc <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 800b7c8:	2301      	movs	r3, #1
 800b7ca:	e003      	b.n	800b7d4 <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 800b7cc:	2032      	movs	r0, #50	; 0x32
 800b7ce:	f7f5 ffc5 	bl	800175c <HAL_Delay>

  return HAL_OK;
 800b7d2:	2300      	movs	r3, #0
}
 800b7d4:	4618      	mov	r0, r3
 800b7d6:	3708      	adds	r7, #8
 800b7d8:	46bd      	mov	sp, r7
 800b7da:	bd80      	pop	{r7, pc}

0800b7dc <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800b7dc:	b084      	sub	sp, #16
 800b7de:	b580      	push	{r7, lr}
 800b7e0:	b086      	sub	sp, #24
 800b7e2:	af00      	add	r7, sp, #0
 800b7e4:	6078      	str	r0, [r7, #4]
 800b7e6:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800b7ea:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800b7ee:	2300      	movs	r3, #0
 800b7f0:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b7f2:	687b      	ldr	r3, [r7, #4]
 800b7f4:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800b7f6:	2300      	movs	r3, #0
 800b7f8:	613b      	str	r3, [r7, #16]
 800b7fa:	e009      	b.n	800b810 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800b7fc:	687a      	ldr	r2, [r7, #4]
 800b7fe:	693b      	ldr	r3, [r7, #16]
 800b800:	3340      	adds	r3, #64	; 0x40
 800b802:	009b      	lsls	r3, r3, #2
 800b804:	4413      	add	r3, r2
 800b806:	2200      	movs	r2, #0
 800b808:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800b80a:	693b      	ldr	r3, [r7, #16]
 800b80c:	3301      	adds	r3, #1
 800b80e:	613b      	str	r3, [r7, #16]
 800b810:	693b      	ldr	r3, [r7, #16]
 800b812:	2b0e      	cmp	r3, #14
 800b814:	d9f2      	bls.n	800b7fc <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800b816:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b818:	2b00      	cmp	r3, #0
 800b81a:	d11c      	bne.n	800b856 <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800b81c:	68fb      	ldr	r3, [r7, #12]
 800b81e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b822:	685b      	ldr	r3, [r3, #4]
 800b824:	68fa      	ldr	r2, [r7, #12]
 800b826:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800b82a:	f043 0302 	orr.w	r3, r3, #2
 800b82e:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 800b830:	687b      	ldr	r3, [r7, #4]
 800b832:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b834:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800b838:	687b      	ldr	r3, [r7, #4]
 800b83a:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 800b83c:	687b      	ldr	r3, [r7, #4]
 800b83e:	681b      	ldr	r3, [r3, #0]
 800b840:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800b844:	687b      	ldr	r3, [r7, #4]
 800b846:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 800b848:	687b      	ldr	r3, [r7, #4]
 800b84a:	681b      	ldr	r3, [r3, #0]
 800b84c:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800b850:	687b      	ldr	r3, [r7, #4]
 800b852:	601a      	str	r2, [r3, #0]
 800b854:	e005      	b.n	800b862 <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 800b856:	687b      	ldr	r3, [r7, #4]
 800b858:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b85a:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800b85e:	687b      	ldr	r3, [r7, #4]
 800b860:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800b862:	68fb      	ldr	r3, [r7, #12]
 800b864:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800b868:	461a      	mov	r2, r3
 800b86a:	2300      	movs	r3, #0
 800b86c:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800b86e:	68fb      	ldr	r3, [r7, #12]
 800b870:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b874:	4619      	mov	r1, r3
 800b876:	68fb      	ldr	r3, [r7, #12]
 800b878:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b87c:	461a      	mov	r2, r3
 800b87e:	680b      	ldr	r3, [r1, #0]
 800b880:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800b882:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b884:	2b01      	cmp	r3, #1
 800b886:	d10c      	bne.n	800b8a2 <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800b888:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b88a:	2b00      	cmp	r3, #0
 800b88c:	d104      	bne.n	800b898 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800b88e:	2100      	movs	r1, #0
 800b890:	6878      	ldr	r0, [r7, #4]
 800b892:	f000 f949 	bl	800bb28 <USB_SetDevSpeed>
 800b896:	e008      	b.n	800b8aa <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800b898:	2101      	movs	r1, #1
 800b89a:	6878      	ldr	r0, [r7, #4]
 800b89c:	f000 f944 	bl	800bb28 <USB_SetDevSpeed>
 800b8a0:	e003      	b.n	800b8aa <USB_DevInit+0xce>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800b8a2:	2103      	movs	r1, #3
 800b8a4:	6878      	ldr	r0, [r7, #4]
 800b8a6:	f000 f93f 	bl	800bb28 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800b8aa:	2110      	movs	r1, #16
 800b8ac:	6878      	ldr	r0, [r7, #4]
 800b8ae:	f000 f8f3 	bl	800ba98 <USB_FlushTxFifo>
 800b8b2:	4603      	mov	r3, r0
 800b8b4:	2b00      	cmp	r3, #0
 800b8b6:	d001      	beq.n	800b8bc <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 800b8b8:	2301      	movs	r3, #1
 800b8ba:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800b8bc:	6878      	ldr	r0, [r7, #4]
 800b8be:	f000 f911 	bl	800bae4 <USB_FlushRxFifo>
 800b8c2:	4603      	mov	r3, r0
 800b8c4:	2b00      	cmp	r3, #0
 800b8c6:	d001      	beq.n	800b8cc <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 800b8c8:	2301      	movs	r3, #1
 800b8ca:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800b8cc:	68fb      	ldr	r3, [r7, #12]
 800b8ce:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b8d2:	461a      	mov	r2, r3
 800b8d4:	2300      	movs	r3, #0
 800b8d6:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800b8d8:	68fb      	ldr	r3, [r7, #12]
 800b8da:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b8de:	461a      	mov	r2, r3
 800b8e0:	2300      	movs	r3, #0
 800b8e2:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800b8e4:	68fb      	ldr	r3, [r7, #12]
 800b8e6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b8ea:	461a      	mov	r2, r3
 800b8ec:	2300      	movs	r3, #0
 800b8ee:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800b8f0:	2300      	movs	r3, #0
 800b8f2:	613b      	str	r3, [r7, #16]
 800b8f4:	e043      	b.n	800b97e <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800b8f6:	693b      	ldr	r3, [r7, #16]
 800b8f8:	015a      	lsls	r2, r3, #5
 800b8fa:	68fb      	ldr	r3, [r7, #12]
 800b8fc:	4413      	add	r3, r2
 800b8fe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b902:	681b      	ldr	r3, [r3, #0]
 800b904:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800b908:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800b90c:	d118      	bne.n	800b940 <USB_DevInit+0x164>
    {
      if (i == 0U)
 800b90e:	693b      	ldr	r3, [r7, #16]
 800b910:	2b00      	cmp	r3, #0
 800b912:	d10a      	bne.n	800b92a <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800b914:	693b      	ldr	r3, [r7, #16]
 800b916:	015a      	lsls	r2, r3, #5
 800b918:	68fb      	ldr	r3, [r7, #12]
 800b91a:	4413      	add	r3, r2
 800b91c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b920:	461a      	mov	r2, r3
 800b922:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800b926:	6013      	str	r3, [r2, #0]
 800b928:	e013      	b.n	800b952 <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800b92a:	693b      	ldr	r3, [r7, #16]
 800b92c:	015a      	lsls	r2, r3, #5
 800b92e:	68fb      	ldr	r3, [r7, #12]
 800b930:	4413      	add	r3, r2
 800b932:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b936:	461a      	mov	r2, r3
 800b938:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800b93c:	6013      	str	r3, [r2, #0]
 800b93e:	e008      	b.n	800b952 <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800b940:	693b      	ldr	r3, [r7, #16]
 800b942:	015a      	lsls	r2, r3, #5
 800b944:	68fb      	ldr	r3, [r7, #12]
 800b946:	4413      	add	r3, r2
 800b948:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b94c:	461a      	mov	r2, r3
 800b94e:	2300      	movs	r3, #0
 800b950:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800b952:	693b      	ldr	r3, [r7, #16]
 800b954:	015a      	lsls	r2, r3, #5
 800b956:	68fb      	ldr	r3, [r7, #12]
 800b958:	4413      	add	r3, r2
 800b95a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b95e:	461a      	mov	r2, r3
 800b960:	2300      	movs	r3, #0
 800b962:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800b964:	693b      	ldr	r3, [r7, #16]
 800b966:	015a      	lsls	r2, r3, #5
 800b968:	68fb      	ldr	r3, [r7, #12]
 800b96a:	4413      	add	r3, r2
 800b96c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b970:	461a      	mov	r2, r3
 800b972:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800b976:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800b978:	693b      	ldr	r3, [r7, #16]
 800b97a:	3301      	adds	r3, #1
 800b97c:	613b      	str	r3, [r7, #16]
 800b97e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b980:	693a      	ldr	r2, [r7, #16]
 800b982:	429a      	cmp	r2, r3
 800b984:	d3b7      	bcc.n	800b8f6 <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800b986:	2300      	movs	r3, #0
 800b988:	613b      	str	r3, [r7, #16]
 800b98a:	e043      	b.n	800ba14 <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800b98c:	693b      	ldr	r3, [r7, #16]
 800b98e:	015a      	lsls	r2, r3, #5
 800b990:	68fb      	ldr	r3, [r7, #12]
 800b992:	4413      	add	r3, r2
 800b994:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b998:	681b      	ldr	r3, [r3, #0]
 800b99a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800b99e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800b9a2:	d118      	bne.n	800b9d6 <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 800b9a4:	693b      	ldr	r3, [r7, #16]
 800b9a6:	2b00      	cmp	r3, #0
 800b9a8:	d10a      	bne.n	800b9c0 <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800b9aa:	693b      	ldr	r3, [r7, #16]
 800b9ac:	015a      	lsls	r2, r3, #5
 800b9ae:	68fb      	ldr	r3, [r7, #12]
 800b9b0:	4413      	add	r3, r2
 800b9b2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b9b6:	461a      	mov	r2, r3
 800b9b8:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800b9bc:	6013      	str	r3, [r2, #0]
 800b9be:	e013      	b.n	800b9e8 <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800b9c0:	693b      	ldr	r3, [r7, #16]
 800b9c2:	015a      	lsls	r2, r3, #5
 800b9c4:	68fb      	ldr	r3, [r7, #12]
 800b9c6:	4413      	add	r3, r2
 800b9c8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b9cc:	461a      	mov	r2, r3
 800b9ce:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800b9d2:	6013      	str	r3, [r2, #0]
 800b9d4:	e008      	b.n	800b9e8 <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800b9d6:	693b      	ldr	r3, [r7, #16]
 800b9d8:	015a      	lsls	r2, r3, #5
 800b9da:	68fb      	ldr	r3, [r7, #12]
 800b9dc:	4413      	add	r3, r2
 800b9de:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b9e2:	461a      	mov	r2, r3
 800b9e4:	2300      	movs	r3, #0
 800b9e6:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800b9e8:	693b      	ldr	r3, [r7, #16]
 800b9ea:	015a      	lsls	r2, r3, #5
 800b9ec:	68fb      	ldr	r3, [r7, #12]
 800b9ee:	4413      	add	r3, r2
 800b9f0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b9f4:	461a      	mov	r2, r3
 800b9f6:	2300      	movs	r3, #0
 800b9f8:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800b9fa:	693b      	ldr	r3, [r7, #16]
 800b9fc:	015a      	lsls	r2, r3, #5
 800b9fe:	68fb      	ldr	r3, [r7, #12]
 800ba00:	4413      	add	r3, r2
 800ba02:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ba06:	461a      	mov	r2, r3
 800ba08:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800ba0c:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800ba0e:	693b      	ldr	r3, [r7, #16]
 800ba10:	3301      	adds	r3, #1
 800ba12:	613b      	str	r3, [r7, #16]
 800ba14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ba16:	693a      	ldr	r2, [r7, #16]
 800ba18:	429a      	cmp	r2, r3
 800ba1a:	d3b7      	bcc.n	800b98c <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800ba1c:	68fb      	ldr	r3, [r7, #12]
 800ba1e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ba22:	691b      	ldr	r3, [r3, #16]
 800ba24:	68fa      	ldr	r2, [r7, #12]
 800ba26:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800ba2a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800ba2e:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800ba30:	687b      	ldr	r3, [r7, #4]
 800ba32:	2200      	movs	r2, #0
 800ba34:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800ba36:	687b      	ldr	r3, [r7, #4]
 800ba38:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 800ba3c:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800ba3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ba40:	2b00      	cmp	r3, #0
 800ba42:	d105      	bne.n	800ba50 <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800ba44:	687b      	ldr	r3, [r7, #4]
 800ba46:	699b      	ldr	r3, [r3, #24]
 800ba48:	f043 0210 	orr.w	r2, r3, #16
 800ba4c:	687b      	ldr	r3, [r7, #4]
 800ba4e:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800ba50:	687b      	ldr	r3, [r7, #4]
 800ba52:	699a      	ldr	r2, [r3, #24]
 800ba54:	4b0e      	ldr	r3, [pc, #56]	; (800ba90 <USB_DevInit+0x2b4>)
 800ba56:	4313      	orrs	r3, r2
 800ba58:	687a      	ldr	r2, [r7, #4]
 800ba5a:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800ba5c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ba5e:	2b00      	cmp	r3, #0
 800ba60:	d005      	beq.n	800ba6e <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800ba62:	687b      	ldr	r3, [r7, #4]
 800ba64:	699b      	ldr	r3, [r3, #24]
 800ba66:	f043 0208 	orr.w	r2, r3, #8
 800ba6a:	687b      	ldr	r3, [r7, #4]
 800ba6c:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800ba6e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ba70:	2b01      	cmp	r3, #1
 800ba72:	d105      	bne.n	800ba80 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800ba74:	687b      	ldr	r3, [r7, #4]
 800ba76:	699a      	ldr	r2, [r3, #24]
 800ba78:	4b06      	ldr	r3, [pc, #24]	; (800ba94 <USB_DevInit+0x2b8>)
 800ba7a:	4313      	orrs	r3, r2
 800ba7c:	687a      	ldr	r2, [r7, #4]
 800ba7e:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800ba80:	7dfb      	ldrb	r3, [r7, #23]
}
 800ba82:	4618      	mov	r0, r3
 800ba84:	3718      	adds	r7, #24
 800ba86:	46bd      	mov	sp, r7
 800ba88:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800ba8c:	b004      	add	sp, #16
 800ba8e:	4770      	bx	lr
 800ba90:	803c3800 	.word	0x803c3800
 800ba94:	40000004 	.word	0x40000004

0800ba98 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800ba98:	b480      	push	{r7}
 800ba9a:	b085      	sub	sp, #20
 800ba9c:	af00      	add	r7, sp, #0
 800ba9e:	6078      	str	r0, [r7, #4]
 800baa0:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 800baa2:	2300      	movs	r3, #0
 800baa4:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800baa6:	683b      	ldr	r3, [r7, #0]
 800baa8:	019b      	lsls	r3, r3, #6
 800baaa:	f043 0220 	orr.w	r2, r3, #32
 800baae:	687b      	ldr	r3, [r7, #4]
 800bab0:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800bab2:	68fb      	ldr	r3, [r7, #12]
 800bab4:	3301      	adds	r3, #1
 800bab6:	60fb      	str	r3, [r7, #12]
 800bab8:	68fb      	ldr	r3, [r7, #12]
 800baba:	4a09      	ldr	r2, [pc, #36]	; (800bae0 <USB_FlushTxFifo+0x48>)
 800babc:	4293      	cmp	r3, r2
 800babe:	d901      	bls.n	800bac4 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 800bac0:	2303      	movs	r3, #3
 800bac2:	e006      	b.n	800bad2 <USB_FlushTxFifo+0x3a>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800bac4:	687b      	ldr	r3, [r7, #4]
 800bac6:	691b      	ldr	r3, [r3, #16]
 800bac8:	f003 0320 	and.w	r3, r3, #32
 800bacc:	2b20      	cmp	r3, #32
 800bace:	d0f0      	beq.n	800bab2 <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 800bad0:	2300      	movs	r3, #0
}
 800bad2:	4618      	mov	r0, r3
 800bad4:	3714      	adds	r7, #20
 800bad6:	46bd      	mov	sp, r7
 800bad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800badc:	4770      	bx	lr
 800bade:	bf00      	nop
 800bae0:	00030d40 	.word	0x00030d40

0800bae4 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800bae4:	b480      	push	{r7}
 800bae6:	b085      	sub	sp, #20
 800bae8:	af00      	add	r7, sp, #0
 800baea:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 800baec:	2300      	movs	r3, #0
 800baee:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800baf0:	687b      	ldr	r3, [r7, #4]
 800baf2:	2210      	movs	r2, #16
 800baf4:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800baf6:	68fb      	ldr	r3, [r7, #12]
 800baf8:	3301      	adds	r3, #1
 800bafa:	60fb      	str	r3, [r7, #12]
 800bafc:	68fb      	ldr	r3, [r7, #12]
 800bafe:	4a09      	ldr	r2, [pc, #36]	; (800bb24 <USB_FlushRxFifo+0x40>)
 800bb00:	4293      	cmp	r3, r2
 800bb02:	d901      	bls.n	800bb08 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 800bb04:	2303      	movs	r3, #3
 800bb06:	e006      	b.n	800bb16 <USB_FlushRxFifo+0x32>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800bb08:	687b      	ldr	r3, [r7, #4]
 800bb0a:	691b      	ldr	r3, [r3, #16]
 800bb0c:	f003 0310 	and.w	r3, r3, #16
 800bb10:	2b10      	cmp	r3, #16
 800bb12:	d0f0      	beq.n	800baf6 <USB_FlushRxFifo+0x12>

  return HAL_OK;
 800bb14:	2300      	movs	r3, #0
}
 800bb16:	4618      	mov	r0, r3
 800bb18:	3714      	adds	r7, #20
 800bb1a:	46bd      	mov	sp, r7
 800bb1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb20:	4770      	bx	lr
 800bb22:	bf00      	nop
 800bb24:	00030d40 	.word	0x00030d40

0800bb28 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800bb28:	b480      	push	{r7}
 800bb2a:	b085      	sub	sp, #20
 800bb2c:	af00      	add	r7, sp, #0
 800bb2e:	6078      	str	r0, [r7, #4]
 800bb30:	460b      	mov	r3, r1
 800bb32:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800bb34:	687b      	ldr	r3, [r7, #4]
 800bb36:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800bb38:	68fb      	ldr	r3, [r7, #12]
 800bb3a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800bb3e:	681a      	ldr	r2, [r3, #0]
 800bb40:	78fb      	ldrb	r3, [r7, #3]
 800bb42:	68f9      	ldr	r1, [r7, #12]
 800bb44:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800bb48:	4313      	orrs	r3, r2
 800bb4a:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800bb4c:	2300      	movs	r3, #0
}
 800bb4e:	4618      	mov	r0, r3
 800bb50:	3714      	adds	r7, #20
 800bb52:	46bd      	mov	sp, r7
 800bb54:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb58:	4770      	bx	lr

0800bb5a <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 800bb5a:	b480      	push	{r7}
 800bb5c:	b087      	sub	sp, #28
 800bb5e:	af00      	add	r7, sp, #0
 800bb60:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800bb62:	687b      	ldr	r3, [r7, #4]
 800bb64:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 800bb66:	693b      	ldr	r3, [r7, #16]
 800bb68:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800bb6c:	689b      	ldr	r3, [r3, #8]
 800bb6e:	f003 0306 	and.w	r3, r3, #6
 800bb72:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 800bb74:	68fb      	ldr	r3, [r7, #12]
 800bb76:	2b00      	cmp	r3, #0
 800bb78:	d102      	bne.n	800bb80 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 800bb7a:	2300      	movs	r3, #0
 800bb7c:	75fb      	strb	r3, [r7, #23]
 800bb7e:	e00a      	b.n	800bb96 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 800bb80:	68fb      	ldr	r3, [r7, #12]
 800bb82:	2b02      	cmp	r3, #2
 800bb84:	d002      	beq.n	800bb8c <USB_GetDevSpeed+0x32>
 800bb86:	68fb      	ldr	r3, [r7, #12]
 800bb88:	2b06      	cmp	r3, #6
 800bb8a:	d102      	bne.n	800bb92 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 800bb8c:	2302      	movs	r3, #2
 800bb8e:	75fb      	strb	r3, [r7, #23]
 800bb90:	e001      	b.n	800bb96 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 800bb92:	230f      	movs	r3, #15
 800bb94:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 800bb96:	7dfb      	ldrb	r3, [r7, #23]
}
 800bb98:	4618      	mov	r0, r3
 800bb9a:	371c      	adds	r7, #28
 800bb9c:	46bd      	mov	sp, r7
 800bb9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bba2:	4770      	bx	lr

0800bba4 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800bba4:	b480      	push	{r7}
 800bba6:	b085      	sub	sp, #20
 800bba8:	af00      	add	r7, sp, #0
 800bbaa:	6078      	str	r0, [r7, #4]
 800bbac:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800bbae:	687b      	ldr	r3, [r7, #4]
 800bbb0:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800bbb2:	683b      	ldr	r3, [r7, #0]
 800bbb4:	781b      	ldrb	r3, [r3, #0]
 800bbb6:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800bbb8:	683b      	ldr	r3, [r7, #0]
 800bbba:	785b      	ldrb	r3, [r3, #1]
 800bbbc:	2b01      	cmp	r3, #1
 800bbbe:	d139      	bne.n	800bc34 <USB_ActivateEndpoint+0x90>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 800bbc0:	68fb      	ldr	r3, [r7, #12]
 800bbc2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800bbc6:	69da      	ldr	r2, [r3, #28]
 800bbc8:	683b      	ldr	r3, [r7, #0]
 800bbca:	781b      	ldrb	r3, [r3, #0]
 800bbcc:	f003 030f 	and.w	r3, r3, #15
 800bbd0:	2101      	movs	r1, #1
 800bbd2:	fa01 f303 	lsl.w	r3, r1, r3
 800bbd6:	b29b      	uxth	r3, r3
 800bbd8:	68f9      	ldr	r1, [r7, #12]
 800bbda:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800bbde:	4313      	orrs	r3, r2
 800bbe0:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 800bbe2:	68bb      	ldr	r3, [r7, #8]
 800bbe4:	015a      	lsls	r2, r3, #5
 800bbe6:	68fb      	ldr	r3, [r7, #12]
 800bbe8:	4413      	add	r3, r2
 800bbea:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bbee:	681b      	ldr	r3, [r3, #0]
 800bbf0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800bbf4:	2b00      	cmp	r3, #0
 800bbf6:	d153      	bne.n	800bca0 <USB_ActivateEndpoint+0xfc>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800bbf8:	68bb      	ldr	r3, [r7, #8]
 800bbfa:	015a      	lsls	r2, r3, #5
 800bbfc:	68fb      	ldr	r3, [r7, #12]
 800bbfe:	4413      	add	r3, r2
 800bc00:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bc04:	681a      	ldr	r2, [r3, #0]
 800bc06:	683b      	ldr	r3, [r7, #0]
 800bc08:	689b      	ldr	r3, [r3, #8]
 800bc0a:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800bc0e:	683b      	ldr	r3, [r7, #0]
 800bc10:	78db      	ldrb	r3, [r3, #3]
 800bc12:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800bc14:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800bc16:	68bb      	ldr	r3, [r7, #8]
 800bc18:	059b      	lsls	r3, r3, #22
 800bc1a:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800bc1c:	431a      	orrs	r2, r3
 800bc1e:	68bb      	ldr	r3, [r7, #8]
 800bc20:	0159      	lsls	r1, r3, #5
 800bc22:	68fb      	ldr	r3, [r7, #12]
 800bc24:	440b      	add	r3, r1
 800bc26:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bc2a:	4619      	mov	r1, r3
 800bc2c:	4b20      	ldr	r3, [pc, #128]	; (800bcb0 <USB_ActivateEndpoint+0x10c>)
 800bc2e:	4313      	orrs	r3, r2
 800bc30:	600b      	str	r3, [r1, #0]
 800bc32:	e035      	b.n	800bca0 <USB_ActivateEndpoint+0xfc>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 800bc34:	68fb      	ldr	r3, [r7, #12]
 800bc36:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800bc3a:	69da      	ldr	r2, [r3, #28]
 800bc3c:	683b      	ldr	r3, [r7, #0]
 800bc3e:	781b      	ldrb	r3, [r3, #0]
 800bc40:	f003 030f 	and.w	r3, r3, #15
 800bc44:	2101      	movs	r1, #1
 800bc46:	fa01 f303 	lsl.w	r3, r1, r3
 800bc4a:	041b      	lsls	r3, r3, #16
 800bc4c:	68f9      	ldr	r1, [r7, #12]
 800bc4e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800bc52:	4313      	orrs	r3, r2
 800bc54:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 800bc56:	68bb      	ldr	r3, [r7, #8]
 800bc58:	015a      	lsls	r2, r3, #5
 800bc5a:	68fb      	ldr	r3, [r7, #12]
 800bc5c:	4413      	add	r3, r2
 800bc5e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bc62:	681b      	ldr	r3, [r3, #0]
 800bc64:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800bc68:	2b00      	cmp	r3, #0
 800bc6a:	d119      	bne.n	800bca0 <USB_ActivateEndpoint+0xfc>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800bc6c:	68bb      	ldr	r3, [r7, #8]
 800bc6e:	015a      	lsls	r2, r3, #5
 800bc70:	68fb      	ldr	r3, [r7, #12]
 800bc72:	4413      	add	r3, r2
 800bc74:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bc78:	681a      	ldr	r2, [r3, #0]
 800bc7a:	683b      	ldr	r3, [r7, #0]
 800bc7c:	689b      	ldr	r3, [r3, #8]
 800bc7e:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 800bc82:	683b      	ldr	r3, [r7, #0]
 800bc84:	78db      	ldrb	r3, [r3, #3]
 800bc86:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800bc88:	430b      	orrs	r3, r1
 800bc8a:	431a      	orrs	r2, r3
 800bc8c:	68bb      	ldr	r3, [r7, #8]
 800bc8e:	0159      	lsls	r1, r3, #5
 800bc90:	68fb      	ldr	r3, [r7, #12]
 800bc92:	440b      	add	r3, r1
 800bc94:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bc98:	4619      	mov	r1, r3
 800bc9a:	4b05      	ldr	r3, [pc, #20]	; (800bcb0 <USB_ActivateEndpoint+0x10c>)
 800bc9c:	4313      	orrs	r3, r2
 800bc9e:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 800bca0:	2300      	movs	r3, #0
}
 800bca2:	4618      	mov	r0, r3
 800bca4:	3714      	adds	r7, #20
 800bca6:	46bd      	mov	sp, r7
 800bca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcac:	4770      	bx	lr
 800bcae:	bf00      	nop
 800bcb0:	10008000 	.word	0x10008000

0800bcb4 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800bcb4:	b480      	push	{r7}
 800bcb6:	b085      	sub	sp, #20
 800bcb8:	af00      	add	r7, sp, #0
 800bcba:	6078      	str	r0, [r7, #4]
 800bcbc:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800bcbe:	687b      	ldr	r3, [r7, #4]
 800bcc0:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800bcc2:	683b      	ldr	r3, [r7, #0]
 800bcc4:	781b      	ldrb	r3, [r3, #0]
 800bcc6:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 800bcc8:	683b      	ldr	r3, [r7, #0]
 800bcca:	785b      	ldrb	r3, [r3, #1]
 800bccc:	2b01      	cmp	r3, #1
 800bcce:	d161      	bne.n	800bd94 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800bcd0:	68bb      	ldr	r3, [r7, #8]
 800bcd2:	015a      	lsls	r2, r3, #5
 800bcd4:	68fb      	ldr	r3, [r7, #12]
 800bcd6:	4413      	add	r3, r2
 800bcd8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bcdc:	681b      	ldr	r3, [r3, #0]
 800bcde:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800bce2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800bce6:	d11f      	bne.n	800bd28 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 800bce8:	68bb      	ldr	r3, [r7, #8]
 800bcea:	015a      	lsls	r2, r3, #5
 800bcec:	68fb      	ldr	r3, [r7, #12]
 800bcee:	4413      	add	r3, r2
 800bcf0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bcf4:	681b      	ldr	r3, [r3, #0]
 800bcf6:	68ba      	ldr	r2, [r7, #8]
 800bcf8:	0151      	lsls	r1, r2, #5
 800bcfa:	68fa      	ldr	r2, [r7, #12]
 800bcfc:	440a      	add	r2, r1
 800bcfe:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800bd02:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800bd06:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 800bd08:	68bb      	ldr	r3, [r7, #8]
 800bd0a:	015a      	lsls	r2, r3, #5
 800bd0c:	68fb      	ldr	r3, [r7, #12]
 800bd0e:	4413      	add	r3, r2
 800bd10:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bd14:	681b      	ldr	r3, [r3, #0]
 800bd16:	68ba      	ldr	r2, [r7, #8]
 800bd18:	0151      	lsls	r1, r2, #5
 800bd1a:	68fa      	ldr	r2, [r7, #12]
 800bd1c:	440a      	add	r2, r1
 800bd1e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800bd22:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800bd26:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800bd28:	68fb      	ldr	r3, [r7, #12]
 800bd2a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800bd2e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800bd30:	683b      	ldr	r3, [r7, #0]
 800bd32:	781b      	ldrb	r3, [r3, #0]
 800bd34:	f003 030f 	and.w	r3, r3, #15
 800bd38:	2101      	movs	r1, #1
 800bd3a:	fa01 f303 	lsl.w	r3, r1, r3
 800bd3e:	b29b      	uxth	r3, r3
 800bd40:	43db      	mvns	r3, r3
 800bd42:	68f9      	ldr	r1, [r7, #12]
 800bd44:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800bd48:	4013      	ands	r3, r2
 800bd4a:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800bd4c:	68fb      	ldr	r3, [r7, #12]
 800bd4e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800bd52:	69da      	ldr	r2, [r3, #28]
 800bd54:	683b      	ldr	r3, [r7, #0]
 800bd56:	781b      	ldrb	r3, [r3, #0]
 800bd58:	f003 030f 	and.w	r3, r3, #15
 800bd5c:	2101      	movs	r1, #1
 800bd5e:	fa01 f303 	lsl.w	r3, r1, r3
 800bd62:	b29b      	uxth	r3, r3
 800bd64:	43db      	mvns	r3, r3
 800bd66:	68f9      	ldr	r1, [r7, #12]
 800bd68:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800bd6c:	4013      	ands	r3, r2
 800bd6e:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 800bd70:	68bb      	ldr	r3, [r7, #8]
 800bd72:	015a      	lsls	r2, r3, #5
 800bd74:	68fb      	ldr	r3, [r7, #12]
 800bd76:	4413      	add	r3, r2
 800bd78:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bd7c:	681a      	ldr	r2, [r3, #0]
 800bd7e:	68bb      	ldr	r3, [r7, #8]
 800bd80:	0159      	lsls	r1, r3, #5
 800bd82:	68fb      	ldr	r3, [r7, #12]
 800bd84:	440b      	add	r3, r1
 800bd86:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bd8a:	4619      	mov	r1, r3
 800bd8c:	4b35      	ldr	r3, [pc, #212]	; (800be64 <USB_DeactivateEndpoint+0x1b0>)
 800bd8e:	4013      	ands	r3, r2
 800bd90:	600b      	str	r3, [r1, #0]
 800bd92:	e060      	b.n	800be56 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800bd94:	68bb      	ldr	r3, [r7, #8]
 800bd96:	015a      	lsls	r2, r3, #5
 800bd98:	68fb      	ldr	r3, [r7, #12]
 800bd9a:	4413      	add	r3, r2
 800bd9c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bda0:	681b      	ldr	r3, [r3, #0]
 800bda2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800bda6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800bdaa:	d11f      	bne.n	800bdec <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800bdac:	68bb      	ldr	r3, [r7, #8]
 800bdae:	015a      	lsls	r2, r3, #5
 800bdb0:	68fb      	ldr	r3, [r7, #12]
 800bdb2:	4413      	add	r3, r2
 800bdb4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bdb8:	681b      	ldr	r3, [r3, #0]
 800bdba:	68ba      	ldr	r2, [r7, #8]
 800bdbc:	0151      	lsls	r1, r2, #5
 800bdbe:	68fa      	ldr	r2, [r7, #12]
 800bdc0:	440a      	add	r2, r1
 800bdc2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800bdc6:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800bdca:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 800bdcc:	68bb      	ldr	r3, [r7, #8]
 800bdce:	015a      	lsls	r2, r3, #5
 800bdd0:	68fb      	ldr	r3, [r7, #12]
 800bdd2:	4413      	add	r3, r2
 800bdd4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bdd8:	681b      	ldr	r3, [r3, #0]
 800bdda:	68ba      	ldr	r2, [r7, #8]
 800bddc:	0151      	lsls	r1, r2, #5
 800bdde:	68fa      	ldr	r2, [r7, #12]
 800bde0:	440a      	add	r2, r1
 800bde2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800bde6:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800bdea:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800bdec:	68fb      	ldr	r3, [r7, #12]
 800bdee:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800bdf2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800bdf4:	683b      	ldr	r3, [r7, #0]
 800bdf6:	781b      	ldrb	r3, [r3, #0]
 800bdf8:	f003 030f 	and.w	r3, r3, #15
 800bdfc:	2101      	movs	r1, #1
 800bdfe:	fa01 f303 	lsl.w	r3, r1, r3
 800be02:	041b      	lsls	r3, r3, #16
 800be04:	43db      	mvns	r3, r3
 800be06:	68f9      	ldr	r1, [r7, #12]
 800be08:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800be0c:	4013      	ands	r3, r2
 800be0e:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800be10:	68fb      	ldr	r3, [r7, #12]
 800be12:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800be16:	69da      	ldr	r2, [r3, #28]
 800be18:	683b      	ldr	r3, [r7, #0]
 800be1a:	781b      	ldrb	r3, [r3, #0]
 800be1c:	f003 030f 	and.w	r3, r3, #15
 800be20:	2101      	movs	r1, #1
 800be22:	fa01 f303 	lsl.w	r3, r1, r3
 800be26:	041b      	lsls	r3, r3, #16
 800be28:	43db      	mvns	r3, r3
 800be2a:	68f9      	ldr	r1, [r7, #12]
 800be2c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800be30:	4013      	ands	r3, r2
 800be32:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 800be34:	68bb      	ldr	r3, [r7, #8]
 800be36:	015a      	lsls	r2, r3, #5
 800be38:	68fb      	ldr	r3, [r7, #12]
 800be3a:	4413      	add	r3, r2
 800be3c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800be40:	681a      	ldr	r2, [r3, #0]
 800be42:	68bb      	ldr	r3, [r7, #8]
 800be44:	0159      	lsls	r1, r3, #5
 800be46:	68fb      	ldr	r3, [r7, #12]
 800be48:	440b      	add	r3, r1
 800be4a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800be4e:	4619      	mov	r1, r3
 800be50:	4b05      	ldr	r3, [pc, #20]	; (800be68 <USB_DeactivateEndpoint+0x1b4>)
 800be52:	4013      	ands	r3, r2
 800be54:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 800be56:	2300      	movs	r3, #0
}
 800be58:	4618      	mov	r0, r3
 800be5a:	3714      	adds	r7, #20
 800be5c:	46bd      	mov	sp, r7
 800be5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be62:	4770      	bx	lr
 800be64:	ec337800 	.word	0xec337800
 800be68:	eff37800 	.word	0xeff37800

0800be6c <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800be6c:	b580      	push	{r7, lr}
 800be6e:	b08a      	sub	sp, #40	; 0x28
 800be70:	af02      	add	r7, sp, #8
 800be72:	60f8      	str	r0, [r7, #12]
 800be74:	60b9      	str	r1, [r7, #8]
 800be76:	4613      	mov	r3, r2
 800be78:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800be7a:	68fb      	ldr	r3, [r7, #12]
 800be7c:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 800be7e:	68bb      	ldr	r3, [r7, #8]
 800be80:	781b      	ldrb	r3, [r3, #0]
 800be82:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 800be84:	68bb      	ldr	r3, [r7, #8]
 800be86:	785b      	ldrb	r3, [r3, #1]
 800be88:	2b01      	cmp	r3, #1
 800be8a:	f040 8163 	bne.w	800c154 <USB_EPStartXfer+0x2e8>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800be8e:	68bb      	ldr	r3, [r7, #8]
 800be90:	695b      	ldr	r3, [r3, #20]
 800be92:	2b00      	cmp	r3, #0
 800be94:	d132      	bne.n	800befc <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800be96:	69bb      	ldr	r3, [r7, #24]
 800be98:	015a      	lsls	r2, r3, #5
 800be9a:	69fb      	ldr	r3, [r7, #28]
 800be9c:	4413      	add	r3, r2
 800be9e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bea2:	691a      	ldr	r2, [r3, #16]
 800bea4:	69bb      	ldr	r3, [r7, #24]
 800bea6:	0159      	lsls	r1, r3, #5
 800bea8:	69fb      	ldr	r3, [r7, #28]
 800beaa:	440b      	add	r3, r1
 800beac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800beb0:	4619      	mov	r1, r3
 800beb2:	4ba5      	ldr	r3, [pc, #660]	; (800c148 <USB_EPStartXfer+0x2dc>)
 800beb4:	4013      	ands	r3, r2
 800beb6:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800beb8:	69bb      	ldr	r3, [r7, #24]
 800beba:	015a      	lsls	r2, r3, #5
 800bebc:	69fb      	ldr	r3, [r7, #28]
 800bebe:	4413      	add	r3, r2
 800bec0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bec4:	691b      	ldr	r3, [r3, #16]
 800bec6:	69ba      	ldr	r2, [r7, #24]
 800bec8:	0151      	lsls	r1, r2, #5
 800beca:	69fa      	ldr	r2, [r7, #28]
 800becc:	440a      	add	r2, r1
 800bece:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800bed2:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800bed6:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800bed8:	69bb      	ldr	r3, [r7, #24]
 800beda:	015a      	lsls	r2, r3, #5
 800bedc:	69fb      	ldr	r3, [r7, #28]
 800bede:	4413      	add	r3, r2
 800bee0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bee4:	691a      	ldr	r2, [r3, #16]
 800bee6:	69bb      	ldr	r3, [r7, #24]
 800bee8:	0159      	lsls	r1, r3, #5
 800beea:	69fb      	ldr	r3, [r7, #28]
 800beec:	440b      	add	r3, r1
 800beee:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bef2:	4619      	mov	r1, r3
 800bef4:	4b95      	ldr	r3, [pc, #596]	; (800c14c <USB_EPStartXfer+0x2e0>)
 800bef6:	4013      	ands	r3, r2
 800bef8:	610b      	str	r3, [r1, #16]
 800befa:	e074      	b.n	800bfe6 <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800befc:	69bb      	ldr	r3, [r7, #24]
 800befe:	015a      	lsls	r2, r3, #5
 800bf00:	69fb      	ldr	r3, [r7, #28]
 800bf02:	4413      	add	r3, r2
 800bf04:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bf08:	691a      	ldr	r2, [r3, #16]
 800bf0a:	69bb      	ldr	r3, [r7, #24]
 800bf0c:	0159      	lsls	r1, r3, #5
 800bf0e:	69fb      	ldr	r3, [r7, #28]
 800bf10:	440b      	add	r3, r1
 800bf12:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bf16:	4619      	mov	r1, r3
 800bf18:	4b8c      	ldr	r3, [pc, #560]	; (800c14c <USB_EPStartXfer+0x2e0>)
 800bf1a:	4013      	ands	r3, r2
 800bf1c:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800bf1e:	69bb      	ldr	r3, [r7, #24]
 800bf20:	015a      	lsls	r2, r3, #5
 800bf22:	69fb      	ldr	r3, [r7, #28]
 800bf24:	4413      	add	r3, r2
 800bf26:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bf2a:	691a      	ldr	r2, [r3, #16]
 800bf2c:	69bb      	ldr	r3, [r7, #24]
 800bf2e:	0159      	lsls	r1, r3, #5
 800bf30:	69fb      	ldr	r3, [r7, #28]
 800bf32:	440b      	add	r3, r1
 800bf34:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bf38:	4619      	mov	r1, r3
 800bf3a:	4b83      	ldr	r3, [pc, #524]	; (800c148 <USB_EPStartXfer+0x2dc>)
 800bf3c:	4013      	ands	r3, r2
 800bf3e:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 800bf40:	69bb      	ldr	r3, [r7, #24]
 800bf42:	015a      	lsls	r2, r3, #5
 800bf44:	69fb      	ldr	r3, [r7, #28]
 800bf46:	4413      	add	r3, r2
 800bf48:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bf4c:	691a      	ldr	r2, [r3, #16]
 800bf4e:	68bb      	ldr	r3, [r7, #8]
 800bf50:	6959      	ldr	r1, [r3, #20]
 800bf52:	68bb      	ldr	r3, [r7, #8]
 800bf54:	689b      	ldr	r3, [r3, #8]
 800bf56:	440b      	add	r3, r1
 800bf58:	1e59      	subs	r1, r3, #1
 800bf5a:	68bb      	ldr	r3, [r7, #8]
 800bf5c:	689b      	ldr	r3, [r3, #8]
 800bf5e:	fbb1 f3f3 	udiv	r3, r1, r3
 800bf62:	04d9      	lsls	r1, r3, #19
 800bf64:	4b7a      	ldr	r3, [pc, #488]	; (800c150 <USB_EPStartXfer+0x2e4>)
 800bf66:	400b      	ands	r3, r1
 800bf68:	69b9      	ldr	r1, [r7, #24]
 800bf6a:	0148      	lsls	r0, r1, #5
 800bf6c:	69f9      	ldr	r1, [r7, #28]
 800bf6e:	4401      	add	r1, r0
 800bf70:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800bf74:	4313      	orrs	r3, r2
 800bf76:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800bf78:	69bb      	ldr	r3, [r7, #24]
 800bf7a:	015a      	lsls	r2, r3, #5
 800bf7c:	69fb      	ldr	r3, [r7, #28]
 800bf7e:	4413      	add	r3, r2
 800bf80:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bf84:	691a      	ldr	r2, [r3, #16]
 800bf86:	68bb      	ldr	r3, [r7, #8]
 800bf88:	695b      	ldr	r3, [r3, #20]
 800bf8a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800bf8e:	69b9      	ldr	r1, [r7, #24]
 800bf90:	0148      	lsls	r0, r1, #5
 800bf92:	69f9      	ldr	r1, [r7, #28]
 800bf94:	4401      	add	r1, r0
 800bf96:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800bf9a:	4313      	orrs	r3, r2
 800bf9c:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 800bf9e:	68bb      	ldr	r3, [r7, #8]
 800bfa0:	78db      	ldrb	r3, [r3, #3]
 800bfa2:	2b01      	cmp	r3, #1
 800bfa4:	d11f      	bne.n	800bfe6 <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 800bfa6:	69bb      	ldr	r3, [r7, #24]
 800bfa8:	015a      	lsls	r2, r3, #5
 800bfaa:	69fb      	ldr	r3, [r7, #28]
 800bfac:	4413      	add	r3, r2
 800bfae:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bfb2:	691b      	ldr	r3, [r3, #16]
 800bfb4:	69ba      	ldr	r2, [r7, #24]
 800bfb6:	0151      	lsls	r1, r2, #5
 800bfb8:	69fa      	ldr	r2, [r7, #28]
 800bfba:	440a      	add	r2, r1
 800bfbc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800bfc0:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 800bfc4:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 800bfc6:	69bb      	ldr	r3, [r7, #24]
 800bfc8:	015a      	lsls	r2, r3, #5
 800bfca:	69fb      	ldr	r3, [r7, #28]
 800bfcc:	4413      	add	r3, r2
 800bfce:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bfd2:	691b      	ldr	r3, [r3, #16]
 800bfd4:	69ba      	ldr	r2, [r7, #24]
 800bfd6:	0151      	lsls	r1, r2, #5
 800bfd8:	69fa      	ldr	r2, [r7, #28]
 800bfda:	440a      	add	r2, r1
 800bfdc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800bfe0:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800bfe4:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 800bfe6:	79fb      	ldrb	r3, [r7, #7]
 800bfe8:	2b01      	cmp	r3, #1
 800bfea:	d14b      	bne.n	800c084 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800bfec:	68bb      	ldr	r3, [r7, #8]
 800bfee:	691b      	ldr	r3, [r3, #16]
 800bff0:	2b00      	cmp	r3, #0
 800bff2:	d009      	beq.n	800c008 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800bff4:	69bb      	ldr	r3, [r7, #24]
 800bff6:	015a      	lsls	r2, r3, #5
 800bff8:	69fb      	ldr	r3, [r7, #28]
 800bffa:	4413      	add	r3, r2
 800bffc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c000:	461a      	mov	r2, r3
 800c002:	68bb      	ldr	r3, [r7, #8]
 800c004:	691b      	ldr	r3, [r3, #16]
 800c006:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 800c008:	68bb      	ldr	r3, [r7, #8]
 800c00a:	78db      	ldrb	r3, [r3, #3]
 800c00c:	2b01      	cmp	r3, #1
 800c00e:	d128      	bne.n	800c062 <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800c010:	69fb      	ldr	r3, [r7, #28]
 800c012:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c016:	689b      	ldr	r3, [r3, #8]
 800c018:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c01c:	2b00      	cmp	r3, #0
 800c01e:	d110      	bne.n	800c042 <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800c020:	69bb      	ldr	r3, [r7, #24]
 800c022:	015a      	lsls	r2, r3, #5
 800c024:	69fb      	ldr	r3, [r7, #28]
 800c026:	4413      	add	r3, r2
 800c028:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c02c:	681b      	ldr	r3, [r3, #0]
 800c02e:	69ba      	ldr	r2, [r7, #24]
 800c030:	0151      	lsls	r1, r2, #5
 800c032:	69fa      	ldr	r2, [r7, #28]
 800c034:	440a      	add	r2, r1
 800c036:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c03a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800c03e:	6013      	str	r3, [r2, #0]
 800c040:	e00f      	b.n	800c062 <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800c042:	69bb      	ldr	r3, [r7, #24]
 800c044:	015a      	lsls	r2, r3, #5
 800c046:	69fb      	ldr	r3, [r7, #28]
 800c048:	4413      	add	r3, r2
 800c04a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c04e:	681b      	ldr	r3, [r3, #0]
 800c050:	69ba      	ldr	r2, [r7, #24]
 800c052:	0151      	lsls	r1, r2, #5
 800c054:	69fa      	ldr	r2, [r7, #28]
 800c056:	440a      	add	r2, r1
 800c058:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c05c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800c060:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800c062:	69bb      	ldr	r3, [r7, #24]
 800c064:	015a      	lsls	r2, r3, #5
 800c066:	69fb      	ldr	r3, [r7, #28]
 800c068:	4413      	add	r3, r2
 800c06a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c06e:	681b      	ldr	r3, [r3, #0]
 800c070:	69ba      	ldr	r2, [r7, #24]
 800c072:	0151      	lsls	r1, r2, #5
 800c074:	69fa      	ldr	r2, [r7, #28]
 800c076:	440a      	add	r2, r1
 800c078:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c07c:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800c080:	6013      	str	r3, [r2, #0]
 800c082:	e133      	b.n	800c2ec <USB_EPStartXfer+0x480>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800c084:	69bb      	ldr	r3, [r7, #24]
 800c086:	015a      	lsls	r2, r3, #5
 800c088:	69fb      	ldr	r3, [r7, #28]
 800c08a:	4413      	add	r3, r2
 800c08c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c090:	681b      	ldr	r3, [r3, #0]
 800c092:	69ba      	ldr	r2, [r7, #24]
 800c094:	0151      	lsls	r1, r2, #5
 800c096:	69fa      	ldr	r2, [r7, #28]
 800c098:	440a      	add	r2, r1
 800c09a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c09e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800c0a2:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800c0a4:	68bb      	ldr	r3, [r7, #8]
 800c0a6:	78db      	ldrb	r3, [r3, #3]
 800c0a8:	2b01      	cmp	r3, #1
 800c0aa:	d015      	beq.n	800c0d8 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 800c0ac:	68bb      	ldr	r3, [r7, #8]
 800c0ae:	695b      	ldr	r3, [r3, #20]
 800c0b0:	2b00      	cmp	r3, #0
 800c0b2:	f000 811b 	beq.w	800c2ec <USB_EPStartXfer+0x480>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800c0b6:	69fb      	ldr	r3, [r7, #28]
 800c0b8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c0bc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800c0be:	68bb      	ldr	r3, [r7, #8]
 800c0c0:	781b      	ldrb	r3, [r3, #0]
 800c0c2:	f003 030f 	and.w	r3, r3, #15
 800c0c6:	2101      	movs	r1, #1
 800c0c8:	fa01 f303 	lsl.w	r3, r1, r3
 800c0cc:	69f9      	ldr	r1, [r7, #28]
 800c0ce:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800c0d2:	4313      	orrs	r3, r2
 800c0d4:	634b      	str	r3, [r1, #52]	; 0x34
 800c0d6:	e109      	b.n	800c2ec <USB_EPStartXfer+0x480>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800c0d8:	69fb      	ldr	r3, [r7, #28]
 800c0da:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c0de:	689b      	ldr	r3, [r3, #8]
 800c0e0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c0e4:	2b00      	cmp	r3, #0
 800c0e6:	d110      	bne.n	800c10a <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800c0e8:	69bb      	ldr	r3, [r7, #24]
 800c0ea:	015a      	lsls	r2, r3, #5
 800c0ec:	69fb      	ldr	r3, [r7, #28]
 800c0ee:	4413      	add	r3, r2
 800c0f0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c0f4:	681b      	ldr	r3, [r3, #0]
 800c0f6:	69ba      	ldr	r2, [r7, #24]
 800c0f8:	0151      	lsls	r1, r2, #5
 800c0fa:	69fa      	ldr	r2, [r7, #28]
 800c0fc:	440a      	add	r2, r1
 800c0fe:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c102:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800c106:	6013      	str	r3, [r2, #0]
 800c108:	e00f      	b.n	800c12a <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800c10a:	69bb      	ldr	r3, [r7, #24]
 800c10c:	015a      	lsls	r2, r3, #5
 800c10e:	69fb      	ldr	r3, [r7, #28]
 800c110:	4413      	add	r3, r2
 800c112:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c116:	681b      	ldr	r3, [r3, #0]
 800c118:	69ba      	ldr	r2, [r7, #24]
 800c11a:	0151      	lsls	r1, r2, #5
 800c11c:	69fa      	ldr	r2, [r7, #28]
 800c11e:	440a      	add	r2, r1
 800c120:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c124:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800c128:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 800c12a:	68bb      	ldr	r3, [r7, #8]
 800c12c:	68d9      	ldr	r1, [r3, #12]
 800c12e:	68bb      	ldr	r3, [r7, #8]
 800c130:	781a      	ldrb	r2, [r3, #0]
 800c132:	68bb      	ldr	r3, [r7, #8]
 800c134:	695b      	ldr	r3, [r3, #20]
 800c136:	b298      	uxth	r0, r3
 800c138:	79fb      	ldrb	r3, [r7, #7]
 800c13a:	9300      	str	r3, [sp, #0]
 800c13c:	4603      	mov	r3, r0
 800c13e:	68f8      	ldr	r0, [r7, #12]
 800c140:	f000 fa38 	bl	800c5b4 <USB_WritePacket>
 800c144:	e0d2      	b.n	800c2ec <USB_EPStartXfer+0x480>
 800c146:	bf00      	nop
 800c148:	e007ffff 	.word	0xe007ffff
 800c14c:	fff80000 	.word	0xfff80000
 800c150:	1ff80000 	.word	0x1ff80000
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800c154:	69bb      	ldr	r3, [r7, #24]
 800c156:	015a      	lsls	r2, r3, #5
 800c158:	69fb      	ldr	r3, [r7, #28]
 800c15a:	4413      	add	r3, r2
 800c15c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c160:	691a      	ldr	r2, [r3, #16]
 800c162:	69bb      	ldr	r3, [r7, #24]
 800c164:	0159      	lsls	r1, r3, #5
 800c166:	69fb      	ldr	r3, [r7, #28]
 800c168:	440b      	add	r3, r1
 800c16a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c16e:	4619      	mov	r1, r3
 800c170:	4b61      	ldr	r3, [pc, #388]	; (800c2f8 <USB_EPStartXfer+0x48c>)
 800c172:	4013      	ands	r3, r2
 800c174:	610b      	str	r3, [r1, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800c176:	69bb      	ldr	r3, [r7, #24]
 800c178:	015a      	lsls	r2, r3, #5
 800c17a:	69fb      	ldr	r3, [r7, #28]
 800c17c:	4413      	add	r3, r2
 800c17e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c182:	691a      	ldr	r2, [r3, #16]
 800c184:	69bb      	ldr	r3, [r7, #24]
 800c186:	0159      	lsls	r1, r3, #5
 800c188:	69fb      	ldr	r3, [r7, #28]
 800c18a:	440b      	add	r3, r1
 800c18c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c190:	4619      	mov	r1, r3
 800c192:	4b5a      	ldr	r3, [pc, #360]	; (800c2fc <USB_EPStartXfer+0x490>)
 800c194:	4013      	ands	r3, r2
 800c196:	610b      	str	r3, [r1, #16]

    if (ep->xfer_len == 0U)
 800c198:	68bb      	ldr	r3, [r7, #8]
 800c19a:	695b      	ldr	r3, [r3, #20]
 800c19c:	2b00      	cmp	r3, #0
 800c19e:	d123      	bne.n	800c1e8 <USB_EPStartXfer+0x37c>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 800c1a0:	69bb      	ldr	r3, [r7, #24]
 800c1a2:	015a      	lsls	r2, r3, #5
 800c1a4:	69fb      	ldr	r3, [r7, #28]
 800c1a6:	4413      	add	r3, r2
 800c1a8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c1ac:	691a      	ldr	r2, [r3, #16]
 800c1ae:	68bb      	ldr	r3, [r7, #8]
 800c1b0:	689b      	ldr	r3, [r3, #8]
 800c1b2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800c1b6:	69b9      	ldr	r1, [r7, #24]
 800c1b8:	0148      	lsls	r0, r1, #5
 800c1ba:	69f9      	ldr	r1, [r7, #28]
 800c1bc:	4401      	add	r1, r0
 800c1be:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800c1c2:	4313      	orrs	r3, r2
 800c1c4:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800c1c6:	69bb      	ldr	r3, [r7, #24]
 800c1c8:	015a      	lsls	r2, r3, #5
 800c1ca:	69fb      	ldr	r3, [r7, #28]
 800c1cc:	4413      	add	r3, r2
 800c1ce:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c1d2:	691b      	ldr	r3, [r3, #16]
 800c1d4:	69ba      	ldr	r2, [r7, #24]
 800c1d6:	0151      	lsls	r1, r2, #5
 800c1d8:	69fa      	ldr	r2, [r7, #28]
 800c1da:	440a      	add	r2, r1
 800c1dc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800c1e0:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800c1e4:	6113      	str	r3, [r2, #16]
 800c1e6:	e033      	b.n	800c250 <USB_EPStartXfer+0x3e4>
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 800c1e8:	68bb      	ldr	r3, [r7, #8]
 800c1ea:	695a      	ldr	r2, [r3, #20]
 800c1ec:	68bb      	ldr	r3, [r7, #8]
 800c1ee:	689b      	ldr	r3, [r3, #8]
 800c1f0:	4413      	add	r3, r2
 800c1f2:	1e5a      	subs	r2, r3, #1
 800c1f4:	68bb      	ldr	r3, [r7, #8]
 800c1f6:	689b      	ldr	r3, [r3, #8]
 800c1f8:	fbb2 f3f3 	udiv	r3, r2, r3
 800c1fc:	82fb      	strh	r3, [r7, #22]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 800c1fe:	69bb      	ldr	r3, [r7, #24]
 800c200:	015a      	lsls	r2, r3, #5
 800c202:	69fb      	ldr	r3, [r7, #28]
 800c204:	4413      	add	r3, r2
 800c206:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c20a:	691a      	ldr	r2, [r3, #16]
 800c20c:	8afb      	ldrh	r3, [r7, #22]
 800c20e:	04d9      	lsls	r1, r3, #19
 800c210:	4b3b      	ldr	r3, [pc, #236]	; (800c300 <USB_EPStartXfer+0x494>)
 800c212:	400b      	ands	r3, r1
 800c214:	69b9      	ldr	r1, [r7, #24]
 800c216:	0148      	lsls	r0, r1, #5
 800c218:	69f9      	ldr	r1, [r7, #28]
 800c21a:	4401      	add	r1, r0
 800c21c:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800c220:	4313      	orrs	r3, r2
 800c222:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 800c224:	69bb      	ldr	r3, [r7, #24]
 800c226:	015a      	lsls	r2, r3, #5
 800c228:	69fb      	ldr	r3, [r7, #28]
 800c22a:	4413      	add	r3, r2
 800c22c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c230:	691a      	ldr	r2, [r3, #16]
 800c232:	68bb      	ldr	r3, [r7, #8]
 800c234:	689b      	ldr	r3, [r3, #8]
 800c236:	8af9      	ldrh	r1, [r7, #22]
 800c238:	fb01 f303 	mul.w	r3, r1, r3
 800c23c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800c240:	69b9      	ldr	r1, [r7, #24]
 800c242:	0148      	lsls	r0, r1, #5
 800c244:	69f9      	ldr	r1, [r7, #28]
 800c246:	4401      	add	r1, r0
 800c248:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800c24c:	4313      	orrs	r3, r2
 800c24e:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800c250:	79fb      	ldrb	r3, [r7, #7]
 800c252:	2b01      	cmp	r3, #1
 800c254:	d10d      	bne.n	800c272 <USB_EPStartXfer+0x406>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800c256:	68bb      	ldr	r3, [r7, #8]
 800c258:	68db      	ldr	r3, [r3, #12]
 800c25a:	2b00      	cmp	r3, #0
 800c25c:	d009      	beq.n	800c272 <USB_EPStartXfer+0x406>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800c25e:	68bb      	ldr	r3, [r7, #8]
 800c260:	68d9      	ldr	r1, [r3, #12]
 800c262:	69bb      	ldr	r3, [r7, #24]
 800c264:	015a      	lsls	r2, r3, #5
 800c266:	69fb      	ldr	r3, [r7, #28]
 800c268:	4413      	add	r3, r2
 800c26a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c26e:	460a      	mov	r2, r1
 800c270:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 800c272:	68bb      	ldr	r3, [r7, #8]
 800c274:	78db      	ldrb	r3, [r3, #3]
 800c276:	2b01      	cmp	r3, #1
 800c278:	d128      	bne.n	800c2cc <USB_EPStartXfer+0x460>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800c27a:	69fb      	ldr	r3, [r7, #28]
 800c27c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c280:	689b      	ldr	r3, [r3, #8]
 800c282:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c286:	2b00      	cmp	r3, #0
 800c288:	d110      	bne.n	800c2ac <USB_EPStartXfer+0x440>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 800c28a:	69bb      	ldr	r3, [r7, #24]
 800c28c:	015a      	lsls	r2, r3, #5
 800c28e:	69fb      	ldr	r3, [r7, #28]
 800c290:	4413      	add	r3, r2
 800c292:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c296:	681b      	ldr	r3, [r3, #0]
 800c298:	69ba      	ldr	r2, [r7, #24]
 800c29a:	0151      	lsls	r1, r2, #5
 800c29c:	69fa      	ldr	r2, [r7, #28]
 800c29e:	440a      	add	r2, r1
 800c2a0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800c2a4:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800c2a8:	6013      	str	r3, [r2, #0]
 800c2aa:	e00f      	b.n	800c2cc <USB_EPStartXfer+0x460>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 800c2ac:	69bb      	ldr	r3, [r7, #24]
 800c2ae:	015a      	lsls	r2, r3, #5
 800c2b0:	69fb      	ldr	r3, [r7, #28]
 800c2b2:	4413      	add	r3, r2
 800c2b4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c2b8:	681b      	ldr	r3, [r3, #0]
 800c2ba:	69ba      	ldr	r2, [r7, #24]
 800c2bc:	0151      	lsls	r1, r2, #5
 800c2be:	69fa      	ldr	r2, [r7, #28]
 800c2c0:	440a      	add	r2, r1
 800c2c2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800c2c6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800c2ca:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800c2cc:	69bb      	ldr	r3, [r7, #24]
 800c2ce:	015a      	lsls	r2, r3, #5
 800c2d0:	69fb      	ldr	r3, [r7, #28]
 800c2d2:	4413      	add	r3, r2
 800c2d4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c2d8:	681b      	ldr	r3, [r3, #0]
 800c2da:	69ba      	ldr	r2, [r7, #24]
 800c2dc:	0151      	lsls	r1, r2, #5
 800c2de:	69fa      	ldr	r2, [r7, #28]
 800c2e0:	440a      	add	r2, r1
 800c2e2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800c2e6:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800c2ea:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800c2ec:	2300      	movs	r3, #0
}
 800c2ee:	4618      	mov	r0, r3
 800c2f0:	3720      	adds	r7, #32
 800c2f2:	46bd      	mov	sp, r7
 800c2f4:	bd80      	pop	{r7, pc}
 800c2f6:	bf00      	nop
 800c2f8:	fff80000 	.word	0xfff80000
 800c2fc:	e007ffff 	.word	0xe007ffff
 800c300:	1ff80000 	.word	0x1ff80000

0800c304 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800c304:	b480      	push	{r7}
 800c306:	b087      	sub	sp, #28
 800c308:	af00      	add	r7, sp, #0
 800c30a:	60f8      	str	r0, [r7, #12]
 800c30c:	60b9      	str	r1, [r7, #8]
 800c30e:	4613      	mov	r3, r2
 800c310:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c312:	68fb      	ldr	r3, [r7, #12]
 800c314:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 800c316:	68bb      	ldr	r3, [r7, #8]
 800c318:	781b      	ldrb	r3, [r3, #0]
 800c31a:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800c31c:	68bb      	ldr	r3, [r7, #8]
 800c31e:	785b      	ldrb	r3, [r3, #1]
 800c320:	2b01      	cmp	r3, #1
 800c322:	f040 80cd 	bne.w	800c4c0 <USB_EP0StartXfer+0x1bc>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800c326:	68bb      	ldr	r3, [r7, #8]
 800c328:	695b      	ldr	r3, [r3, #20]
 800c32a:	2b00      	cmp	r3, #0
 800c32c:	d132      	bne.n	800c394 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800c32e:	693b      	ldr	r3, [r7, #16]
 800c330:	015a      	lsls	r2, r3, #5
 800c332:	697b      	ldr	r3, [r7, #20]
 800c334:	4413      	add	r3, r2
 800c336:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c33a:	691a      	ldr	r2, [r3, #16]
 800c33c:	693b      	ldr	r3, [r7, #16]
 800c33e:	0159      	lsls	r1, r3, #5
 800c340:	697b      	ldr	r3, [r7, #20]
 800c342:	440b      	add	r3, r1
 800c344:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c348:	4619      	mov	r1, r3
 800c34a:	4b98      	ldr	r3, [pc, #608]	; (800c5ac <USB_EP0StartXfer+0x2a8>)
 800c34c:	4013      	ands	r3, r2
 800c34e:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800c350:	693b      	ldr	r3, [r7, #16]
 800c352:	015a      	lsls	r2, r3, #5
 800c354:	697b      	ldr	r3, [r7, #20]
 800c356:	4413      	add	r3, r2
 800c358:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c35c:	691b      	ldr	r3, [r3, #16]
 800c35e:	693a      	ldr	r2, [r7, #16]
 800c360:	0151      	lsls	r1, r2, #5
 800c362:	697a      	ldr	r2, [r7, #20]
 800c364:	440a      	add	r2, r1
 800c366:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c36a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800c36e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800c370:	693b      	ldr	r3, [r7, #16]
 800c372:	015a      	lsls	r2, r3, #5
 800c374:	697b      	ldr	r3, [r7, #20]
 800c376:	4413      	add	r3, r2
 800c378:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c37c:	691a      	ldr	r2, [r3, #16]
 800c37e:	693b      	ldr	r3, [r7, #16]
 800c380:	0159      	lsls	r1, r3, #5
 800c382:	697b      	ldr	r3, [r7, #20]
 800c384:	440b      	add	r3, r1
 800c386:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c38a:	4619      	mov	r1, r3
 800c38c:	4b88      	ldr	r3, [pc, #544]	; (800c5b0 <USB_EP0StartXfer+0x2ac>)
 800c38e:	4013      	ands	r3, r2
 800c390:	610b      	str	r3, [r1, #16]
 800c392:	e04e      	b.n	800c432 <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800c394:	693b      	ldr	r3, [r7, #16]
 800c396:	015a      	lsls	r2, r3, #5
 800c398:	697b      	ldr	r3, [r7, #20]
 800c39a:	4413      	add	r3, r2
 800c39c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c3a0:	691a      	ldr	r2, [r3, #16]
 800c3a2:	693b      	ldr	r3, [r7, #16]
 800c3a4:	0159      	lsls	r1, r3, #5
 800c3a6:	697b      	ldr	r3, [r7, #20]
 800c3a8:	440b      	add	r3, r1
 800c3aa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c3ae:	4619      	mov	r1, r3
 800c3b0:	4b7f      	ldr	r3, [pc, #508]	; (800c5b0 <USB_EP0StartXfer+0x2ac>)
 800c3b2:	4013      	ands	r3, r2
 800c3b4:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800c3b6:	693b      	ldr	r3, [r7, #16]
 800c3b8:	015a      	lsls	r2, r3, #5
 800c3ba:	697b      	ldr	r3, [r7, #20]
 800c3bc:	4413      	add	r3, r2
 800c3be:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c3c2:	691a      	ldr	r2, [r3, #16]
 800c3c4:	693b      	ldr	r3, [r7, #16]
 800c3c6:	0159      	lsls	r1, r3, #5
 800c3c8:	697b      	ldr	r3, [r7, #20]
 800c3ca:	440b      	add	r3, r1
 800c3cc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c3d0:	4619      	mov	r1, r3
 800c3d2:	4b76      	ldr	r3, [pc, #472]	; (800c5ac <USB_EP0StartXfer+0x2a8>)
 800c3d4:	4013      	ands	r3, r2
 800c3d6:	610b      	str	r3, [r1, #16]

      if (ep->xfer_len > ep->maxpacket)
 800c3d8:	68bb      	ldr	r3, [r7, #8]
 800c3da:	695a      	ldr	r2, [r3, #20]
 800c3dc:	68bb      	ldr	r3, [r7, #8]
 800c3de:	689b      	ldr	r3, [r3, #8]
 800c3e0:	429a      	cmp	r2, r3
 800c3e2:	d903      	bls.n	800c3ec <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 800c3e4:	68bb      	ldr	r3, [r7, #8]
 800c3e6:	689a      	ldr	r2, [r3, #8]
 800c3e8:	68bb      	ldr	r3, [r7, #8]
 800c3ea:	615a      	str	r2, [r3, #20]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800c3ec:	693b      	ldr	r3, [r7, #16]
 800c3ee:	015a      	lsls	r2, r3, #5
 800c3f0:	697b      	ldr	r3, [r7, #20]
 800c3f2:	4413      	add	r3, r2
 800c3f4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c3f8:	691b      	ldr	r3, [r3, #16]
 800c3fa:	693a      	ldr	r2, [r7, #16]
 800c3fc:	0151      	lsls	r1, r2, #5
 800c3fe:	697a      	ldr	r2, [r7, #20]
 800c400:	440a      	add	r2, r1
 800c402:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c406:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800c40a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800c40c:	693b      	ldr	r3, [r7, #16]
 800c40e:	015a      	lsls	r2, r3, #5
 800c410:	697b      	ldr	r3, [r7, #20]
 800c412:	4413      	add	r3, r2
 800c414:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c418:	691a      	ldr	r2, [r3, #16]
 800c41a:	68bb      	ldr	r3, [r7, #8]
 800c41c:	695b      	ldr	r3, [r3, #20]
 800c41e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800c422:	6939      	ldr	r1, [r7, #16]
 800c424:	0148      	lsls	r0, r1, #5
 800c426:	6979      	ldr	r1, [r7, #20]
 800c428:	4401      	add	r1, r0
 800c42a:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800c42e:	4313      	orrs	r3, r2
 800c430:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800c432:	79fb      	ldrb	r3, [r7, #7]
 800c434:	2b01      	cmp	r3, #1
 800c436:	d11e      	bne.n	800c476 <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800c438:	68bb      	ldr	r3, [r7, #8]
 800c43a:	691b      	ldr	r3, [r3, #16]
 800c43c:	2b00      	cmp	r3, #0
 800c43e:	d009      	beq.n	800c454 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800c440:	693b      	ldr	r3, [r7, #16]
 800c442:	015a      	lsls	r2, r3, #5
 800c444:	697b      	ldr	r3, [r7, #20]
 800c446:	4413      	add	r3, r2
 800c448:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c44c:	461a      	mov	r2, r3
 800c44e:	68bb      	ldr	r3, [r7, #8]
 800c450:	691b      	ldr	r3, [r3, #16]
 800c452:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800c454:	693b      	ldr	r3, [r7, #16]
 800c456:	015a      	lsls	r2, r3, #5
 800c458:	697b      	ldr	r3, [r7, #20]
 800c45a:	4413      	add	r3, r2
 800c45c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c460:	681b      	ldr	r3, [r3, #0]
 800c462:	693a      	ldr	r2, [r7, #16]
 800c464:	0151      	lsls	r1, r2, #5
 800c466:	697a      	ldr	r2, [r7, #20]
 800c468:	440a      	add	r2, r1
 800c46a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c46e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800c472:	6013      	str	r3, [r2, #0]
 800c474:	e092      	b.n	800c59c <USB_EP0StartXfer+0x298>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800c476:	693b      	ldr	r3, [r7, #16]
 800c478:	015a      	lsls	r2, r3, #5
 800c47a:	697b      	ldr	r3, [r7, #20]
 800c47c:	4413      	add	r3, r2
 800c47e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c482:	681b      	ldr	r3, [r3, #0]
 800c484:	693a      	ldr	r2, [r7, #16]
 800c486:	0151      	lsls	r1, r2, #5
 800c488:	697a      	ldr	r2, [r7, #20]
 800c48a:	440a      	add	r2, r1
 800c48c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c490:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800c494:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 800c496:	68bb      	ldr	r3, [r7, #8]
 800c498:	695b      	ldr	r3, [r3, #20]
 800c49a:	2b00      	cmp	r3, #0
 800c49c:	d07e      	beq.n	800c59c <USB_EP0StartXfer+0x298>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800c49e:	697b      	ldr	r3, [r7, #20]
 800c4a0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c4a4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800c4a6:	68bb      	ldr	r3, [r7, #8]
 800c4a8:	781b      	ldrb	r3, [r3, #0]
 800c4aa:	f003 030f 	and.w	r3, r3, #15
 800c4ae:	2101      	movs	r1, #1
 800c4b0:	fa01 f303 	lsl.w	r3, r1, r3
 800c4b4:	6979      	ldr	r1, [r7, #20]
 800c4b6:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800c4ba:	4313      	orrs	r3, r2
 800c4bc:	634b      	str	r3, [r1, #52]	; 0x34
 800c4be:	e06d      	b.n	800c59c <USB_EP0StartXfer+0x298>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800c4c0:	693b      	ldr	r3, [r7, #16]
 800c4c2:	015a      	lsls	r2, r3, #5
 800c4c4:	697b      	ldr	r3, [r7, #20]
 800c4c6:	4413      	add	r3, r2
 800c4c8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c4cc:	691a      	ldr	r2, [r3, #16]
 800c4ce:	693b      	ldr	r3, [r7, #16]
 800c4d0:	0159      	lsls	r1, r3, #5
 800c4d2:	697b      	ldr	r3, [r7, #20]
 800c4d4:	440b      	add	r3, r1
 800c4d6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c4da:	4619      	mov	r1, r3
 800c4dc:	4b34      	ldr	r3, [pc, #208]	; (800c5b0 <USB_EP0StartXfer+0x2ac>)
 800c4de:	4013      	ands	r3, r2
 800c4e0:	610b      	str	r3, [r1, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800c4e2:	693b      	ldr	r3, [r7, #16]
 800c4e4:	015a      	lsls	r2, r3, #5
 800c4e6:	697b      	ldr	r3, [r7, #20]
 800c4e8:	4413      	add	r3, r2
 800c4ea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c4ee:	691a      	ldr	r2, [r3, #16]
 800c4f0:	693b      	ldr	r3, [r7, #16]
 800c4f2:	0159      	lsls	r1, r3, #5
 800c4f4:	697b      	ldr	r3, [r7, #20]
 800c4f6:	440b      	add	r3, r1
 800c4f8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c4fc:	4619      	mov	r1, r3
 800c4fe:	4b2b      	ldr	r3, [pc, #172]	; (800c5ac <USB_EP0StartXfer+0x2a8>)
 800c500:	4013      	ands	r3, r2
 800c502:	610b      	str	r3, [r1, #16]

    if (ep->xfer_len > 0U)
 800c504:	68bb      	ldr	r3, [r7, #8]
 800c506:	695b      	ldr	r3, [r3, #20]
 800c508:	2b00      	cmp	r3, #0
 800c50a:	d003      	beq.n	800c514 <USB_EP0StartXfer+0x210>
    {
      ep->xfer_len = ep->maxpacket;
 800c50c:	68bb      	ldr	r3, [r7, #8]
 800c50e:	689a      	ldr	r2, [r3, #8]
 800c510:	68bb      	ldr	r3, [r7, #8]
 800c512:	615a      	str	r2, [r3, #20]
    }

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800c514:	693b      	ldr	r3, [r7, #16]
 800c516:	015a      	lsls	r2, r3, #5
 800c518:	697b      	ldr	r3, [r7, #20]
 800c51a:	4413      	add	r3, r2
 800c51c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c520:	691b      	ldr	r3, [r3, #16]
 800c522:	693a      	ldr	r2, [r7, #16]
 800c524:	0151      	lsls	r1, r2, #5
 800c526:	697a      	ldr	r2, [r7, #20]
 800c528:	440a      	add	r2, r1
 800c52a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800c52e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800c532:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 800c534:	693b      	ldr	r3, [r7, #16]
 800c536:	015a      	lsls	r2, r3, #5
 800c538:	697b      	ldr	r3, [r7, #20]
 800c53a:	4413      	add	r3, r2
 800c53c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c540:	691a      	ldr	r2, [r3, #16]
 800c542:	68bb      	ldr	r3, [r7, #8]
 800c544:	689b      	ldr	r3, [r3, #8]
 800c546:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800c54a:	6939      	ldr	r1, [r7, #16]
 800c54c:	0148      	lsls	r0, r1, #5
 800c54e:	6979      	ldr	r1, [r7, #20]
 800c550:	4401      	add	r1, r0
 800c552:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800c556:	4313      	orrs	r3, r2
 800c558:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 800c55a:	79fb      	ldrb	r3, [r7, #7]
 800c55c:	2b01      	cmp	r3, #1
 800c55e:	d10d      	bne.n	800c57c <USB_EP0StartXfer+0x278>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800c560:	68bb      	ldr	r3, [r7, #8]
 800c562:	68db      	ldr	r3, [r3, #12]
 800c564:	2b00      	cmp	r3, #0
 800c566:	d009      	beq.n	800c57c <USB_EP0StartXfer+0x278>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800c568:	68bb      	ldr	r3, [r7, #8]
 800c56a:	68d9      	ldr	r1, [r3, #12]
 800c56c:	693b      	ldr	r3, [r7, #16]
 800c56e:	015a      	lsls	r2, r3, #5
 800c570:	697b      	ldr	r3, [r7, #20]
 800c572:	4413      	add	r3, r2
 800c574:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c578:	460a      	mov	r2, r1
 800c57a:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800c57c:	693b      	ldr	r3, [r7, #16]
 800c57e:	015a      	lsls	r2, r3, #5
 800c580:	697b      	ldr	r3, [r7, #20]
 800c582:	4413      	add	r3, r2
 800c584:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c588:	681b      	ldr	r3, [r3, #0]
 800c58a:	693a      	ldr	r2, [r7, #16]
 800c58c:	0151      	lsls	r1, r2, #5
 800c58e:	697a      	ldr	r2, [r7, #20]
 800c590:	440a      	add	r2, r1
 800c592:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800c596:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800c59a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800c59c:	2300      	movs	r3, #0
}
 800c59e:	4618      	mov	r0, r3
 800c5a0:	371c      	adds	r7, #28
 800c5a2:	46bd      	mov	sp, r7
 800c5a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5a8:	4770      	bx	lr
 800c5aa:	bf00      	nop
 800c5ac:	e007ffff 	.word	0xe007ffff
 800c5b0:	fff80000 	.word	0xfff80000

0800c5b4 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800c5b4:	b480      	push	{r7}
 800c5b6:	b089      	sub	sp, #36	; 0x24
 800c5b8:	af00      	add	r7, sp, #0
 800c5ba:	60f8      	str	r0, [r7, #12]
 800c5bc:	60b9      	str	r1, [r7, #8]
 800c5be:	4611      	mov	r1, r2
 800c5c0:	461a      	mov	r2, r3
 800c5c2:	460b      	mov	r3, r1
 800c5c4:	71fb      	strb	r3, [r7, #7]
 800c5c6:	4613      	mov	r3, r2
 800c5c8:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c5ca:	68fb      	ldr	r3, [r7, #12]
 800c5cc:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 800c5ce:	68bb      	ldr	r3, [r7, #8]
 800c5d0:	61fb      	str	r3, [r7, #28]
  uint32_t count32b, i;

  if (dma == 0U)
 800c5d2:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800c5d6:	2b00      	cmp	r3, #0
 800c5d8:	d123      	bne.n	800c622 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800c5da:	88bb      	ldrh	r3, [r7, #4]
 800c5dc:	3303      	adds	r3, #3
 800c5de:	089b      	lsrs	r3, r3, #2
 800c5e0:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800c5e2:	2300      	movs	r3, #0
 800c5e4:	61bb      	str	r3, [r7, #24]
 800c5e6:	e018      	b.n	800c61a <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800c5e8:	79fb      	ldrb	r3, [r7, #7]
 800c5ea:	031a      	lsls	r2, r3, #12
 800c5ec:	697b      	ldr	r3, [r7, #20]
 800c5ee:	4413      	add	r3, r2
 800c5f0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c5f4:	461a      	mov	r2, r3
 800c5f6:	69fb      	ldr	r3, [r7, #28]
 800c5f8:	681b      	ldr	r3, [r3, #0]
 800c5fa:	6013      	str	r3, [r2, #0]
      pSrc++;
 800c5fc:	69fb      	ldr	r3, [r7, #28]
 800c5fe:	3301      	adds	r3, #1
 800c600:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800c602:	69fb      	ldr	r3, [r7, #28]
 800c604:	3301      	adds	r3, #1
 800c606:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800c608:	69fb      	ldr	r3, [r7, #28]
 800c60a:	3301      	adds	r3, #1
 800c60c:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800c60e:	69fb      	ldr	r3, [r7, #28]
 800c610:	3301      	adds	r3, #1
 800c612:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800c614:	69bb      	ldr	r3, [r7, #24]
 800c616:	3301      	adds	r3, #1
 800c618:	61bb      	str	r3, [r7, #24]
 800c61a:	69ba      	ldr	r2, [r7, #24]
 800c61c:	693b      	ldr	r3, [r7, #16]
 800c61e:	429a      	cmp	r2, r3
 800c620:	d3e2      	bcc.n	800c5e8 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800c622:	2300      	movs	r3, #0
}
 800c624:	4618      	mov	r0, r3
 800c626:	3724      	adds	r7, #36	; 0x24
 800c628:	46bd      	mov	sp, r7
 800c62a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c62e:	4770      	bx	lr

0800c630 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800c630:	b480      	push	{r7}
 800c632:	b08b      	sub	sp, #44	; 0x2c
 800c634:	af00      	add	r7, sp, #0
 800c636:	60f8      	str	r0, [r7, #12]
 800c638:	60b9      	str	r1, [r7, #8]
 800c63a:	4613      	mov	r3, r2
 800c63c:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c63e:	68fb      	ldr	r3, [r7, #12]
 800c640:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800c642:	68bb      	ldr	r3, [r7, #8]
 800c644:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800c646:	88fb      	ldrh	r3, [r7, #6]
 800c648:	089b      	lsrs	r3, r3, #2
 800c64a:	b29b      	uxth	r3, r3
 800c64c:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800c64e:	88fb      	ldrh	r3, [r7, #6]
 800c650:	f003 0303 	and.w	r3, r3, #3
 800c654:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800c656:	2300      	movs	r3, #0
 800c658:	623b      	str	r3, [r7, #32]
 800c65a:	e014      	b.n	800c686 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800c65c:	69bb      	ldr	r3, [r7, #24]
 800c65e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c662:	681a      	ldr	r2, [r3, #0]
 800c664:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c666:	601a      	str	r2, [r3, #0]
    pDest++;
 800c668:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c66a:	3301      	adds	r3, #1
 800c66c:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800c66e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c670:	3301      	adds	r3, #1
 800c672:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800c674:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c676:	3301      	adds	r3, #1
 800c678:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800c67a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c67c:	3301      	adds	r3, #1
 800c67e:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 800c680:	6a3b      	ldr	r3, [r7, #32]
 800c682:	3301      	adds	r3, #1
 800c684:	623b      	str	r3, [r7, #32]
 800c686:	6a3a      	ldr	r2, [r7, #32]
 800c688:	697b      	ldr	r3, [r7, #20]
 800c68a:	429a      	cmp	r2, r3
 800c68c:	d3e6      	bcc.n	800c65c <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800c68e:	8bfb      	ldrh	r3, [r7, #30]
 800c690:	2b00      	cmp	r3, #0
 800c692:	d01e      	beq.n	800c6d2 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 800c694:	2300      	movs	r3, #0
 800c696:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 800c698:	69bb      	ldr	r3, [r7, #24]
 800c69a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c69e:	461a      	mov	r2, r3
 800c6a0:	f107 0310 	add.w	r3, r7, #16
 800c6a4:	6812      	ldr	r2, [r2, #0]
 800c6a6:	601a      	str	r2, [r3, #0]
	
    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 800c6a8:	693a      	ldr	r2, [r7, #16]
 800c6aa:	6a3b      	ldr	r3, [r7, #32]
 800c6ac:	b2db      	uxtb	r3, r3
 800c6ae:	00db      	lsls	r3, r3, #3
 800c6b0:	fa22 f303 	lsr.w	r3, r2, r3
 800c6b4:	b2da      	uxtb	r2, r3
 800c6b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c6b8:	701a      	strb	r2, [r3, #0]
      i++;
 800c6ba:	6a3b      	ldr	r3, [r7, #32]
 800c6bc:	3301      	adds	r3, #1
 800c6be:	623b      	str	r3, [r7, #32]
      pDest++;
 800c6c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c6c2:	3301      	adds	r3, #1
 800c6c4:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 800c6c6:	8bfb      	ldrh	r3, [r7, #30]
 800c6c8:	3b01      	subs	r3, #1
 800c6ca:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 800c6cc:	8bfb      	ldrh	r3, [r7, #30]
 800c6ce:	2b00      	cmp	r3, #0
 800c6d0:	d1ea      	bne.n	800c6a8 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800c6d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800c6d4:	4618      	mov	r0, r3
 800c6d6:	372c      	adds	r7, #44	; 0x2c
 800c6d8:	46bd      	mov	sp, r7
 800c6da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6de:	4770      	bx	lr

0800c6e0 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800c6e0:	b480      	push	{r7}
 800c6e2:	b085      	sub	sp, #20
 800c6e4:	af00      	add	r7, sp, #0
 800c6e6:	6078      	str	r0, [r7, #4]
 800c6e8:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c6ea:	687b      	ldr	r3, [r7, #4]
 800c6ec:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800c6ee:	683b      	ldr	r3, [r7, #0]
 800c6f0:	781b      	ldrb	r3, [r3, #0]
 800c6f2:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800c6f4:	683b      	ldr	r3, [r7, #0]
 800c6f6:	785b      	ldrb	r3, [r3, #1]
 800c6f8:	2b01      	cmp	r3, #1
 800c6fa:	d12c      	bne.n	800c756 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 800c6fc:	68bb      	ldr	r3, [r7, #8]
 800c6fe:	015a      	lsls	r2, r3, #5
 800c700:	68fb      	ldr	r3, [r7, #12]
 800c702:	4413      	add	r3, r2
 800c704:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c708:	681b      	ldr	r3, [r3, #0]
 800c70a:	2b00      	cmp	r3, #0
 800c70c:	db12      	blt.n	800c734 <USB_EPSetStall+0x54>
 800c70e:	68bb      	ldr	r3, [r7, #8]
 800c710:	2b00      	cmp	r3, #0
 800c712:	d00f      	beq.n	800c734 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 800c714:	68bb      	ldr	r3, [r7, #8]
 800c716:	015a      	lsls	r2, r3, #5
 800c718:	68fb      	ldr	r3, [r7, #12]
 800c71a:	4413      	add	r3, r2
 800c71c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c720:	681b      	ldr	r3, [r3, #0]
 800c722:	68ba      	ldr	r2, [r7, #8]
 800c724:	0151      	lsls	r1, r2, #5
 800c726:	68fa      	ldr	r2, [r7, #12]
 800c728:	440a      	add	r2, r1
 800c72a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c72e:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800c732:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 800c734:	68bb      	ldr	r3, [r7, #8]
 800c736:	015a      	lsls	r2, r3, #5
 800c738:	68fb      	ldr	r3, [r7, #12]
 800c73a:	4413      	add	r3, r2
 800c73c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c740:	681b      	ldr	r3, [r3, #0]
 800c742:	68ba      	ldr	r2, [r7, #8]
 800c744:	0151      	lsls	r1, r2, #5
 800c746:	68fa      	ldr	r2, [r7, #12]
 800c748:	440a      	add	r2, r1
 800c74a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c74e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800c752:	6013      	str	r3, [r2, #0]
 800c754:	e02b      	b.n	800c7ae <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 800c756:	68bb      	ldr	r3, [r7, #8]
 800c758:	015a      	lsls	r2, r3, #5
 800c75a:	68fb      	ldr	r3, [r7, #12]
 800c75c:	4413      	add	r3, r2
 800c75e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c762:	681b      	ldr	r3, [r3, #0]
 800c764:	2b00      	cmp	r3, #0
 800c766:	db12      	blt.n	800c78e <USB_EPSetStall+0xae>
 800c768:	68bb      	ldr	r3, [r7, #8]
 800c76a:	2b00      	cmp	r3, #0
 800c76c:	d00f      	beq.n	800c78e <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 800c76e:	68bb      	ldr	r3, [r7, #8]
 800c770:	015a      	lsls	r2, r3, #5
 800c772:	68fb      	ldr	r3, [r7, #12]
 800c774:	4413      	add	r3, r2
 800c776:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c77a:	681b      	ldr	r3, [r3, #0]
 800c77c:	68ba      	ldr	r2, [r7, #8]
 800c77e:	0151      	lsls	r1, r2, #5
 800c780:	68fa      	ldr	r2, [r7, #12]
 800c782:	440a      	add	r2, r1
 800c784:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800c788:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800c78c:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 800c78e:	68bb      	ldr	r3, [r7, #8]
 800c790:	015a      	lsls	r2, r3, #5
 800c792:	68fb      	ldr	r3, [r7, #12]
 800c794:	4413      	add	r3, r2
 800c796:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c79a:	681b      	ldr	r3, [r3, #0]
 800c79c:	68ba      	ldr	r2, [r7, #8]
 800c79e:	0151      	lsls	r1, r2, #5
 800c7a0:	68fa      	ldr	r2, [r7, #12]
 800c7a2:	440a      	add	r2, r1
 800c7a4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800c7a8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800c7ac:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800c7ae:	2300      	movs	r3, #0
}
 800c7b0:	4618      	mov	r0, r3
 800c7b2:	3714      	adds	r7, #20
 800c7b4:	46bd      	mov	sp, r7
 800c7b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7ba:	4770      	bx	lr

0800c7bc <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800c7bc:	b480      	push	{r7}
 800c7be:	b085      	sub	sp, #20
 800c7c0:	af00      	add	r7, sp, #0
 800c7c2:	6078      	str	r0, [r7, #4]
 800c7c4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c7c6:	687b      	ldr	r3, [r7, #4]
 800c7c8:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800c7ca:	683b      	ldr	r3, [r7, #0]
 800c7cc:	781b      	ldrb	r3, [r3, #0]
 800c7ce:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800c7d0:	683b      	ldr	r3, [r7, #0]
 800c7d2:	785b      	ldrb	r3, [r3, #1]
 800c7d4:	2b01      	cmp	r3, #1
 800c7d6:	d128      	bne.n	800c82a <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800c7d8:	68bb      	ldr	r3, [r7, #8]
 800c7da:	015a      	lsls	r2, r3, #5
 800c7dc:	68fb      	ldr	r3, [r7, #12]
 800c7de:	4413      	add	r3, r2
 800c7e0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c7e4:	681b      	ldr	r3, [r3, #0]
 800c7e6:	68ba      	ldr	r2, [r7, #8]
 800c7e8:	0151      	lsls	r1, r2, #5
 800c7ea:	68fa      	ldr	r2, [r7, #12]
 800c7ec:	440a      	add	r2, r1
 800c7ee:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c7f2:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800c7f6:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800c7f8:	683b      	ldr	r3, [r7, #0]
 800c7fa:	78db      	ldrb	r3, [r3, #3]
 800c7fc:	2b03      	cmp	r3, #3
 800c7fe:	d003      	beq.n	800c808 <USB_EPClearStall+0x4c>
 800c800:	683b      	ldr	r3, [r7, #0]
 800c802:	78db      	ldrb	r3, [r3, #3]
 800c804:	2b02      	cmp	r3, #2
 800c806:	d138      	bne.n	800c87a <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800c808:	68bb      	ldr	r3, [r7, #8]
 800c80a:	015a      	lsls	r2, r3, #5
 800c80c:	68fb      	ldr	r3, [r7, #12]
 800c80e:	4413      	add	r3, r2
 800c810:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c814:	681b      	ldr	r3, [r3, #0]
 800c816:	68ba      	ldr	r2, [r7, #8]
 800c818:	0151      	lsls	r1, r2, #5
 800c81a:	68fa      	ldr	r2, [r7, #12]
 800c81c:	440a      	add	r2, r1
 800c81e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c822:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800c826:	6013      	str	r3, [r2, #0]
 800c828:	e027      	b.n	800c87a <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800c82a:	68bb      	ldr	r3, [r7, #8]
 800c82c:	015a      	lsls	r2, r3, #5
 800c82e:	68fb      	ldr	r3, [r7, #12]
 800c830:	4413      	add	r3, r2
 800c832:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c836:	681b      	ldr	r3, [r3, #0]
 800c838:	68ba      	ldr	r2, [r7, #8]
 800c83a:	0151      	lsls	r1, r2, #5
 800c83c:	68fa      	ldr	r2, [r7, #12]
 800c83e:	440a      	add	r2, r1
 800c840:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800c844:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800c848:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800c84a:	683b      	ldr	r3, [r7, #0]
 800c84c:	78db      	ldrb	r3, [r3, #3]
 800c84e:	2b03      	cmp	r3, #3
 800c850:	d003      	beq.n	800c85a <USB_EPClearStall+0x9e>
 800c852:	683b      	ldr	r3, [r7, #0]
 800c854:	78db      	ldrb	r3, [r3, #3]
 800c856:	2b02      	cmp	r3, #2
 800c858:	d10f      	bne.n	800c87a <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800c85a:	68bb      	ldr	r3, [r7, #8]
 800c85c:	015a      	lsls	r2, r3, #5
 800c85e:	68fb      	ldr	r3, [r7, #12]
 800c860:	4413      	add	r3, r2
 800c862:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c866:	681b      	ldr	r3, [r3, #0]
 800c868:	68ba      	ldr	r2, [r7, #8]
 800c86a:	0151      	lsls	r1, r2, #5
 800c86c:	68fa      	ldr	r2, [r7, #12]
 800c86e:	440a      	add	r2, r1
 800c870:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800c874:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800c878:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 800c87a:	2300      	movs	r3, #0
}
 800c87c:	4618      	mov	r0, r3
 800c87e:	3714      	adds	r7, #20
 800c880:	46bd      	mov	sp, r7
 800c882:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c886:	4770      	bx	lr

0800c888 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 800c888:	b480      	push	{r7}
 800c88a:	b085      	sub	sp, #20
 800c88c:	af00      	add	r7, sp, #0
 800c88e:	6078      	str	r0, [r7, #4]
 800c890:	460b      	mov	r3, r1
 800c892:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c894:	687b      	ldr	r3, [r7, #4]
 800c896:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 800c898:	68fb      	ldr	r3, [r7, #12]
 800c89a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c89e:	681b      	ldr	r3, [r3, #0]
 800c8a0:	68fa      	ldr	r2, [r7, #12]
 800c8a2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800c8a6:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800c8aa:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 800c8ac:	68fb      	ldr	r3, [r7, #12]
 800c8ae:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c8b2:	681a      	ldr	r2, [r3, #0]
 800c8b4:	78fb      	ldrb	r3, [r7, #3]
 800c8b6:	011b      	lsls	r3, r3, #4
 800c8b8:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 800c8bc:	68f9      	ldr	r1, [r7, #12]
 800c8be:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800c8c2:	4313      	orrs	r3, r2
 800c8c4:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 800c8c6:	2300      	movs	r3, #0
}
 800c8c8:	4618      	mov	r0, r3
 800c8ca:	3714      	adds	r7, #20
 800c8cc:	46bd      	mov	sp, r7
 800c8ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8d2:	4770      	bx	lr

0800c8d4 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 800c8d4:	b480      	push	{r7}
 800c8d6:	b085      	sub	sp, #20
 800c8d8:	af00      	add	r7, sp, #0
 800c8da:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c8dc:	687b      	ldr	r3, [r7, #4]
 800c8de:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800c8e0:	68fb      	ldr	r3, [r7, #12]
 800c8e2:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800c8e6:	681b      	ldr	r3, [r3, #0]
 800c8e8:	68fa      	ldr	r2, [r7, #12]
 800c8ea:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800c8ee:	f023 0303 	bic.w	r3, r3, #3
 800c8f2:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 800c8f4:	68fb      	ldr	r3, [r7, #12]
 800c8f6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c8fa:	685b      	ldr	r3, [r3, #4]
 800c8fc:	68fa      	ldr	r2, [r7, #12]
 800c8fe:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800c902:	f023 0302 	bic.w	r3, r3, #2
 800c906:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800c908:	2300      	movs	r3, #0
}
 800c90a:	4618      	mov	r0, r3
 800c90c:	3714      	adds	r7, #20
 800c90e:	46bd      	mov	sp, r7
 800c910:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c914:	4770      	bx	lr

0800c916 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800c916:	b480      	push	{r7}
 800c918:	b085      	sub	sp, #20
 800c91a:	af00      	add	r7, sp, #0
 800c91c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c91e:	687b      	ldr	r3, [r7, #4]
 800c920:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800c922:	68fb      	ldr	r3, [r7, #12]
 800c924:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800c928:	681b      	ldr	r3, [r3, #0]
 800c92a:	68fa      	ldr	r2, [r7, #12]
 800c92c:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800c930:	f023 0303 	bic.w	r3, r3, #3
 800c934:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800c936:	68fb      	ldr	r3, [r7, #12]
 800c938:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c93c:	685b      	ldr	r3, [r3, #4]
 800c93e:	68fa      	ldr	r2, [r7, #12]
 800c940:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800c944:	f043 0302 	orr.w	r3, r3, #2
 800c948:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800c94a:	2300      	movs	r3, #0
}
 800c94c:	4618      	mov	r0, r3
 800c94e:	3714      	adds	r7, #20
 800c950:	46bd      	mov	sp, r7
 800c952:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c956:	4770      	bx	lr

0800c958 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 800c958:	b480      	push	{r7}
 800c95a:	b085      	sub	sp, #20
 800c95c:	af00      	add	r7, sp, #0
 800c95e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800c960:	687b      	ldr	r3, [r7, #4]
 800c962:	695b      	ldr	r3, [r3, #20]
 800c964:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800c966:	687b      	ldr	r3, [r7, #4]
 800c968:	699b      	ldr	r3, [r3, #24]
 800c96a:	68fa      	ldr	r2, [r7, #12]
 800c96c:	4013      	ands	r3, r2
 800c96e:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800c970:	68fb      	ldr	r3, [r7, #12]
}
 800c972:	4618      	mov	r0, r3
 800c974:	3714      	adds	r7, #20
 800c976:	46bd      	mov	sp, r7
 800c978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c97c:	4770      	bx	lr

0800c97e <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800c97e:	b480      	push	{r7}
 800c980:	b085      	sub	sp, #20
 800c982:	af00      	add	r7, sp, #0
 800c984:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c986:	687b      	ldr	r3, [r7, #4]
 800c988:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800c98a:	68fb      	ldr	r3, [r7, #12]
 800c98c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c990:	699b      	ldr	r3, [r3, #24]
 800c992:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800c994:	68fb      	ldr	r3, [r7, #12]
 800c996:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c99a:	69db      	ldr	r3, [r3, #28]
 800c99c:	68ba      	ldr	r2, [r7, #8]
 800c99e:	4013      	ands	r3, r2
 800c9a0:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 800c9a2:	68bb      	ldr	r3, [r7, #8]
 800c9a4:	0c1b      	lsrs	r3, r3, #16
}
 800c9a6:	4618      	mov	r0, r3
 800c9a8:	3714      	adds	r7, #20
 800c9aa:	46bd      	mov	sp, r7
 800c9ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9b0:	4770      	bx	lr

0800c9b2 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800c9b2:	b480      	push	{r7}
 800c9b4:	b085      	sub	sp, #20
 800c9b6:	af00      	add	r7, sp, #0
 800c9b8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c9ba:	687b      	ldr	r3, [r7, #4]
 800c9bc:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800c9be:	68fb      	ldr	r3, [r7, #12]
 800c9c0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c9c4:	699b      	ldr	r3, [r3, #24]
 800c9c6:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800c9c8:	68fb      	ldr	r3, [r7, #12]
 800c9ca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c9ce:	69db      	ldr	r3, [r3, #28]
 800c9d0:	68ba      	ldr	r2, [r7, #8]
 800c9d2:	4013      	ands	r3, r2
 800c9d4:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 800c9d6:	68bb      	ldr	r3, [r7, #8]
 800c9d8:	b29b      	uxth	r3, r3
}
 800c9da:	4618      	mov	r0, r3
 800c9dc:	3714      	adds	r7, #20
 800c9de:	46bd      	mov	sp, r7
 800c9e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9e4:	4770      	bx	lr

0800c9e6 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800c9e6:	b480      	push	{r7}
 800c9e8:	b085      	sub	sp, #20
 800c9ea:	af00      	add	r7, sp, #0
 800c9ec:	6078      	str	r0, [r7, #4]
 800c9ee:	460b      	mov	r3, r1
 800c9f0:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c9f2:	687b      	ldr	r3, [r7, #4]
 800c9f4:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800c9f6:	78fb      	ldrb	r3, [r7, #3]
 800c9f8:	015a      	lsls	r2, r3, #5
 800c9fa:	68fb      	ldr	r3, [r7, #12]
 800c9fc:	4413      	add	r3, r2
 800c9fe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ca02:	689b      	ldr	r3, [r3, #8]
 800ca04:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800ca06:	68fb      	ldr	r3, [r7, #12]
 800ca08:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ca0c:	695b      	ldr	r3, [r3, #20]
 800ca0e:	68ba      	ldr	r2, [r7, #8]
 800ca10:	4013      	ands	r3, r2
 800ca12:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800ca14:	68bb      	ldr	r3, [r7, #8]
}
 800ca16:	4618      	mov	r0, r3
 800ca18:	3714      	adds	r7, #20
 800ca1a:	46bd      	mov	sp, r7
 800ca1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca20:	4770      	bx	lr

0800ca22 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800ca22:	b480      	push	{r7}
 800ca24:	b087      	sub	sp, #28
 800ca26:	af00      	add	r7, sp, #0
 800ca28:	6078      	str	r0, [r7, #4]
 800ca2a:	460b      	mov	r3, r1
 800ca2c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ca2e:	687b      	ldr	r3, [r7, #4]
 800ca30:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg, msk, emp;

  msk = USBx_DEVICE->DIEPMSK;
 800ca32:	697b      	ldr	r3, [r7, #20]
 800ca34:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ca38:	691b      	ldr	r3, [r3, #16]
 800ca3a:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 800ca3c:	697b      	ldr	r3, [r7, #20]
 800ca3e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ca42:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ca44:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800ca46:	78fb      	ldrb	r3, [r7, #3]
 800ca48:	f003 030f 	and.w	r3, r3, #15
 800ca4c:	68fa      	ldr	r2, [r7, #12]
 800ca4e:	fa22 f303 	lsr.w	r3, r2, r3
 800ca52:	01db      	lsls	r3, r3, #7
 800ca54:	b2db      	uxtb	r3, r3
 800ca56:	693a      	ldr	r2, [r7, #16]
 800ca58:	4313      	orrs	r3, r2
 800ca5a:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 800ca5c:	78fb      	ldrb	r3, [r7, #3]
 800ca5e:	015a      	lsls	r2, r3, #5
 800ca60:	697b      	ldr	r3, [r7, #20]
 800ca62:	4413      	add	r3, r2
 800ca64:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ca68:	689b      	ldr	r3, [r3, #8]
 800ca6a:	693a      	ldr	r2, [r7, #16]
 800ca6c:	4013      	ands	r3, r2
 800ca6e:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800ca70:	68bb      	ldr	r3, [r7, #8]
}
 800ca72:	4618      	mov	r0, r3
 800ca74:	371c      	adds	r7, #28
 800ca76:	46bd      	mov	sp, r7
 800ca78:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca7c:	4770      	bx	lr

0800ca7e <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800ca7e:	b480      	push	{r7}
 800ca80:	b083      	sub	sp, #12
 800ca82:	af00      	add	r7, sp, #0
 800ca84:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800ca86:	687b      	ldr	r3, [r7, #4]
 800ca88:	695b      	ldr	r3, [r3, #20]
 800ca8a:	f003 0301 	and.w	r3, r3, #1
}
 800ca8e:	4618      	mov	r0, r3
 800ca90:	370c      	adds	r7, #12
 800ca92:	46bd      	mov	sp, r7
 800ca94:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca98:	4770      	bx	lr
	...

0800ca9c <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 800ca9c:	b480      	push	{r7}
 800ca9e:	b085      	sub	sp, #20
 800caa0:	af00      	add	r7, sp, #0
 800caa2:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800caa4:	687b      	ldr	r3, [r7, #4]
 800caa6:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800caa8:	68fb      	ldr	r3, [r7, #12]
 800caaa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800caae:	681a      	ldr	r2, [r3, #0]
 800cab0:	68fb      	ldr	r3, [r7, #12]
 800cab2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800cab6:	4619      	mov	r1, r3
 800cab8:	4b09      	ldr	r3, [pc, #36]	; (800cae0 <USB_ActivateSetup+0x44>)
 800caba:	4013      	ands	r3, r2
 800cabc:	600b      	str	r3, [r1, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800cabe:	68fb      	ldr	r3, [r7, #12]
 800cac0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800cac4:	685b      	ldr	r3, [r3, #4]
 800cac6:	68fa      	ldr	r2, [r7, #12]
 800cac8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800cacc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800cad0:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800cad2:	2300      	movs	r3, #0
}
 800cad4:	4618      	mov	r0, r3
 800cad6:	3714      	adds	r7, #20
 800cad8:	46bd      	mov	sp, r7
 800cada:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cade:	4770      	bx	lr
 800cae0:	fffff800 	.word	0xfffff800

0800cae4 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 800cae4:	b480      	push	{r7}
 800cae6:	b087      	sub	sp, #28
 800cae8:	af00      	add	r7, sp, #0
 800caea:	60f8      	str	r0, [r7, #12]
 800caec:	460b      	mov	r3, r1
 800caee:	607a      	str	r2, [r7, #4]
 800caf0:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800caf2:	68fb      	ldr	r3, [r7, #12]
 800caf4:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800caf6:	68fb      	ldr	r3, [r7, #12]
 800caf8:	333c      	adds	r3, #60	; 0x3c
 800cafa:	3304      	adds	r3, #4
 800cafc:	681b      	ldr	r3, [r3, #0]
 800cafe:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 800cb00:	693b      	ldr	r3, [r7, #16]
 800cb02:	4a26      	ldr	r2, [pc, #152]	; (800cb9c <USB_EP0_OutStart+0xb8>)
 800cb04:	4293      	cmp	r3, r2
 800cb06:	d90a      	bls.n	800cb1e <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800cb08:	697b      	ldr	r3, [r7, #20]
 800cb0a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800cb0e:	681b      	ldr	r3, [r3, #0]
 800cb10:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800cb14:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800cb18:	d101      	bne.n	800cb1e <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 800cb1a:	2300      	movs	r3, #0
 800cb1c:	e037      	b.n	800cb8e <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800cb1e:	697b      	ldr	r3, [r7, #20]
 800cb20:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800cb24:	461a      	mov	r2, r3
 800cb26:	2300      	movs	r3, #0
 800cb28:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800cb2a:	697b      	ldr	r3, [r7, #20]
 800cb2c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800cb30:	691b      	ldr	r3, [r3, #16]
 800cb32:	697a      	ldr	r2, [r7, #20]
 800cb34:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800cb38:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800cb3c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800cb3e:	697b      	ldr	r3, [r7, #20]
 800cb40:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800cb44:	691b      	ldr	r3, [r3, #16]
 800cb46:	697a      	ldr	r2, [r7, #20]
 800cb48:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800cb4c:	f043 0318 	orr.w	r3, r3, #24
 800cb50:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800cb52:	697b      	ldr	r3, [r7, #20]
 800cb54:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800cb58:	691b      	ldr	r3, [r3, #16]
 800cb5a:	697a      	ldr	r2, [r7, #20]
 800cb5c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800cb60:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 800cb64:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 800cb66:	7afb      	ldrb	r3, [r7, #11]
 800cb68:	2b01      	cmp	r3, #1
 800cb6a:	d10f      	bne.n	800cb8c <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 800cb6c:	697b      	ldr	r3, [r7, #20]
 800cb6e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800cb72:	461a      	mov	r2, r3
 800cb74:	687b      	ldr	r3, [r7, #4]
 800cb76:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 800cb78:	697b      	ldr	r3, [r7, #20]
 800cb7a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800cb7e:	681b      	ldr	r3, [r3, #0]
 800cb80:	697a      	ldr	r2, [r7, #20]
 800cb82:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800cb86:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 800cb8a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800cb8c:	2300      	movs	r3, #0
}
 800cb8e:	4618      	mov	r0, r3
 800cb90:	371c      	adds	r7, #28
 800cb92:	46bd      	mov	sp, r7
 800cb94:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb98:	4770      	bx	lr
 800cb9a:	bf00      	nop
 800cb9c:	4f54300a 	.word	0x4f54300a

0800cba0 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800cba0:	b480      	push	{r7}
 800cba2:	b085      	sub	sp, #20
 800cba4:	af00      	add	r7, sp, #0
 800cba6:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 800cba8:	2300      	movs	r3, #0
 800cbaa:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 800cbac:	68fb      	ldr	r3, [r7, #12]
 800cbae:	3301      	adds	r3, #1
 800cbb0:	60fb      	str	r3, [r7, #12]
 800cbb2:	68fb      	ldr	r3, [r7, #12]
 800cbb4:	4a13      	ldr	r2, [pc, #76]	; (800cc04 <USB_CoreReset+0x64>)
 800cbb6:	4293      	cmp	r3, r2
 800cbb8:	d901      	bls.n	800cbbe <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800cbba:	2303      	movs	r3, #3
 800cbbc:	e01b      	b.n	800cbf6 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800cbbe:	687b      	ldr	r3, [r7, #4]
 800cbc0:	691b      	ldr	r3, [r3, #16]
 800cbc2:	2b00      	cmp	r3, #0
 800cbc4:	daf2      	bge.n	800cbac <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800cbc6:	2300      	movs	r3, #0
 800cbc8:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800cbca:	687b      	ldr	r3, [r7, #4]
 800cbcc:	691b      	ldr	r3, [r3, #16]
 800cbce:	f043 0201 	orr.w	r2, r3, #1
 800cbd2:	687b      	ldr	r3, [r7, #4]
 800cbd4:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800cbd6:	68fb      	ldr	r3, [r7, #12]
 800cbd8:	3301      	adds	r3, #1
 800cbda:	60fb      	str	r3, [r7, #12]
 800cbdc:	68fb      	ldr	r3, [r7, #12]
 800cbde:	4a09      	ldr	r2, [pc, #36]	; (800cc04 <USB_CoreReset+0x64>)
 800cbe0:	4293      	cmp	r3, r2
 800cbe2:	d901      	bls.n	800cbe8 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800cbe4:	2303      	movs	r3, #3
 800cbe6:	e006      	b.n	800cbf6 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800cbe8:	687b      	ldr	r3, [r7, #4]
 800cbea:	691b      	ldr	r3, [r3, #16]
 800cbec:	f003 0301 	and.w	r3, r3, #1
 800cbf0:	2b01      	cmp	r3, #1
 800cbf2:	d0f0      	beq.n	800cbd6 <USB_CoreReset+0x36>

  return HAL_OK;
 800cbf4:	2300      	movs	r3, #0
}
 800cbf6:	4618      	mov	r0, r3
 800cbf8:	3714      	adds	r7, #20
 800cbfa:	46bd      	mov	sp, r7
 800cbfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc00:	4770      	bx	lr
 800cc02:	bf00      	nop
 800cc04:	00030d40 	.word	0x00030d40

0800cc08 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 800cc08:	b580      	push	{r7, lr}
 800cc0a:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 800cc0c:	4904      	ldr	r1, [pc, #16]	; (800cc20 <MX_FATFS_Init+0x18>)
 800cc0e:	4805      	ldr	r0, [pc, #20]	; (800cc24 <MX_FATFS_Init+0x1c>)
 800cc10:	f001 feb2 	bl	800e978 <FATFS_LinkDriver>
 800cc14:	4603      	mov	r3, r0
 800cc16:	461a      	mov	r2, r3
 800cc18:	4b03      	ldr	r3, [pc, #12]	; (800cc28 <MX_FATFS_Init+0x20>)
 800cc1a:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 800cc1c:	bf00      	nop
 800cc1e:	bd80      	pop	{r7, pc}
 800cc20:	200052c4 	.word	0x200052c4
 800cc24:	080124f8 	.word	0x080124f8
 800cc28:	200052c0 	.word	0x200052c0

0800cc2c <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 800cc2c:	b580      	push	{r7, lr}
 800cc2e:	b082      	sub	sp, #8
 800cc30:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 800cc32:	2300      	movs	r3, #0
 800cc34:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 800cc36:	f000 f871 	bl	800cd1c <BSP_SD_IsDetected>
 800cc3a:	4603      	mov	r3, r0
 800cc3c:	2b01      	cmp	r3, #1
 800cc3e:	d001      	beq.n	800cc44 <BSP_SD_Init+0x18>
  {
    return MSD_ERROR_SD_NOT_PRESENT;
 800cc40:	2302      	movs	r3, #2
 800cc42:	e012      	b.n	800cc6a <BSP_SD_Init+0x3e>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd1);
 800cc44:	480b      	ldr	r0, [pc, #44]	; (800cc74 <BSP_SD_Init+0x48>)
 800cc46:	f7fa fe37 	bl	80078b8 <HAL_SD_Init>
 800cc4a:	4603      	mov	r3, r0
 800cc4c:	71fb      	strb	r3, [r7, #7]
  /* Configure SD Bus width (4 bits mode selected) */
  if (sd_state == MSD_OK)
 800cc4e:	79fb      	ldrb	r3, [r7, #7]
 800cc50:	2b00      	cmp	r3, #0
 800cc52:	d109      	bne.n	800cc68 <BSP_SD_Init+0x3c>
  {
    /* Enable wide operation */
    if (HAL_SD_ConfigWideBusOperation(&hsd1, SDMMC_BUS_WIDE_4B) != HAL_OK)
 800cc54:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800cc58:	4806      	ldr	r0, [pc, #24]	; (800cc74 <BSP_SD_Init+0x48>)
 800cc5a:	f7fb fb3b 	bl	80082d4 <HAL_SD_ConfigWideBusOperation>
 800cc5e:	4603      	mov	r3, r0
 800cc60:	2b00      	cmp	r3, #0
 800cc62:	d001      	beq.n	800cc68 <BSP_SD_Init+0x3c>
    {
      sd_state = MSD_ERROR;
 800cc64:	2301      	movs	r3, #1
 800cc66:	71fb      	strb	r3, [r7, #7]
    }
  }

  return sd_state;
 800cc68:	79fb      	ldrb	r3, [r7, #7]
}
 800cc6a:	4618      	mov	r0, r3
 800cc6c:	3708      	adds	r7, #8
 800cc6e:	46bd      	mov	sp, r7
 800cc70:	bd80      	pop	{r7, pc}
 800cc72:	bf00      	nop
 800cc74:	20004d50 	.word	0x20004d50

0800cc78 <BSP_SD_ReadBlocks_DMA>:
  * @param  ReadAddr: Address from where data is to be read
  * @param  NumOfBlocks: Number of SD blocks to read
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks_DMA(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks)
{
 800cc78:	b580      	push	{r7, lr}
 800cc7a:	b086      	sub	sp, #24
 800cc7c:	af00      	add	r7, sp, #0
 800cc7e:	60f8      	str	r0, [r7, #12]
 800cc80:	60b9      	str	r1, [r7, #8]
 800cc82:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 800cc84:	2300      	movs	r3, #0
 800cc86:	75fb      	strb	r3, [r7, #23]

  /* Read block(s) in DMA transfer mode */
  if (HAL_SD_ReadBlocks_DMA(&hsd1, (uint8_t *)pData, ReadAddr, NumOfBlocks) != HAL_OK)
 800cc88:	687b      	ldr	r3, [r7, #4]
 800cc8a:	68ba      	ldr	r2, [r7, #8]
 800cc8c:	68f9      	ldr	r1, [r7, #12]
 800cc8e:	4806      	ldr	r0, [pc, #24]	; (800cca8 <BSP_SD_ReadBlocks_DMA+0x30>)
 800cc90:	f7fa ff3e 	bl	8007b10 <HAL_SD_ReadBlocks_DMA>
 800cc94:	4603      	mov	r3, r0
 800cc96:	2b00      	cmp	r3, #0
 800cc98:	d001      	beq.n	800cc9e <BSP_SD_ReadBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 800cc9a:	2301      	movs	r3, #1
 800cc9c:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 800cc9e:	7dfb      	ldrb	r3, [r7, #23]
}
 800cca0:	4618      	mov	r0, r3
 800cca2:	3718      	adds	r7, #24
 800cca4:	46bd      	mov	sp, r7
 800cca6:	bd80      	pop	{r7, pc}
 800cca8:	20004d50 	.word	0x20004d50

0800ccac <BSP_SD_WriteBlocks_DMA>:
  * @param  WriteAddr: Address from where data is to be written
  * @param  NumOfBlocks: Number of SD blocks to write
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks_DMA(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks)
{
 800ccac:	b580      	push	{r7, lr}
 800ccae:	b086      	sub	sp, #24
 800ccb0:	af00      	add	r7, sp, #0
 800ccb2:	60f8      	str	r0, [r7, #12]
 800ccb4:	60b9      	str	r1, [r7, #8]
 800ccb6:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 800ccb8:	2300      	movs	r3, #0
 800ccba:	75fb      	strb	r3, [r7, #23]

  /* Write block(s) in DMA transfer mode */
  if (HAL_SD_WriteBlocks_DMA(&hsd1, (uint8_t *)pData, WriteAddr, NumOfBlocks) != HAL_OK)
 800ccbc:	687b      	ldr	r3, [r7, #4]
 800ccbe:	68ba      	ldr	r2, [r7, #8]
 800ccc0:	68f9      	ldr	r1, [r7, #12]
 800ccc2:	4806      	ldr	r0, [pc, #24]	; (800ccdc <BSP_SD_WriteBlocks_DMA+0x30>)
 800ccc4:	f7fa ffcc 	bl	8007c60 <HAL_SD_WriteBlocks_DMA>
 800ccc8:	4603      	mov	r3, r0
 800ccca:	2b00      	cmp	r3, #0
 800cccc:	d001      	beq.n	800ccd2 <BSP_SD_WriteBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 800ccce:	2301      	movs	r3, #1
 800ccd0:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 800ccd2:	7dfb      	ldrb	r3, [r7, #23]
}
 800ccd4:	4618      	mov	r0, r3
 800ccd6:	3718      	adds	r7, #24
 800ccd8:	46bd      	mov	sp, r7
 800ccda:	bd80      	pop	{r7, pc}
 800ccdc:	20004d50 	.word	0x20004d50

0800cce0 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 800cce0:	b580      	push	{r7, lr}
 800cce2:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd1) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 800cce4:	4805      	ldr	r0, [pc, #20]	; (800ccfc <BSP_SD_GetCardState+0x1c>)
 800cce6:	f7fb fc09 	bl	80084fc <HAL_SD_GetCardState>
 800ccea:	4603      	mov	r3, r0
 800ccec:	2b04      	cmp	r3, #4
 800ccee:	bf14      	ite	ne
 800ccf0:	2301      	movne	r3, #1
 800ccf2:	2300      	moveq	r3, #0
 800ccf4:	b2db      	uxtb	r3, r3
}
 800ccf6:	4618      	mov	r0, r3
 800ccf8:	bd80      	pop	{r7, pc}
 800ccfa:	bf00      	nop
 800ccfc:	20004d50 	.word	0x20004d50

0800cd00 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 800cd00:	b580      	push	{r7, lr}
 800cd02:	b082      	sub	sp, #8
 800cd04:	af00      	add	r7, sp, #0
 800cd06:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd1, CardInfo);
 800cd08:	6879      	ldr	r1, [r7, #4]
 800cd0a:	4803      	ldr	r0, [pc, #12]	; (800cd18 <BSP_SD_GetCardInfo+0x18>)
 800cd0c:	f7fb fab6 	bl	800827c <HAL_SD_GetCardInfo>
}
 800cd10:	bf00      	nop
 800cd12:	3708      	adds	r7, #8
 800cd14:	46bd      	mov	sp, r7
 800cd16:	bd80      	pop	{r7, pc}
 800cd18:	20004d50 	.word	0x20004d50

0800cd1c <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 800cd1c:	b480      	push	{r7}
 800cd1e:	b083      	sub	sp, #12
 800cd20:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 800cd22:	2301      	movs	r3, #1
 800cd24:	71fb      	strb	r3, [r7, #7]

  /* USER CODE BEGIN IsDetectedSection */
  /* user code can be inserted here */
  /* USER CODE END IsDetectedSection */

  return status;
 800cd26:	79fb      	ldrb	r3, [r7, #7]
 800cd28:	b2db      	uxtb	r3, r3
}
 800cd2a:	4618      	mov	r0, r3
 800cd2c:	370c      	adds	r7, #12
 800cd2e:	46bd      	mov	sp, r7
 800cd30:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd34:	4770      	bx	lr

0800cd36 <SD_CheckStatusWithTimeout>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static int SD_CheckStatusWithTimeout(uint32_t timeout)
{
 800cd36:	b580      	push	{r7, lr}
 800cd38:	b084      	sub	sp, #16
 800cd3a:	af00      	add	r7, sp, #0
 800cd3c:	6078      	str	r0, [r7, #4]
  /* block until SDIO peripheral is ready again or a timeout occur */
#if (osCMSIS <= 0x20000U)
  timer = osKernelSysTick();
  while( osKernelSysTick() - timer < timeout)
#else
  timer = osKernelGetTickCount();
 800cd3e:	f001 fedb 	bl	800eaf8 <osKernelGetTickCount>
 800cd42:	60f8      	str	r0, [r7, #12]
  while( osKernelGetTickCount() - timer < timeout)
 800cd44:	e006      	b.n	800cd54 <SD_CheckStatusWithTimeout+0x1e>
#endif
  {
    if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800cd46:	f7ff ffcb 	bl	800cce0 <BSP_SD_GetCardState>
 800cd4a:	4603      	mov	r3, r0
 800cd4c:	2b00      	cmp	r3, #0
 800cd4e:	d101      	bne.n	800cd54 <SD_CheckStatusWithTimeout+0x1e>
    {
      return 0;
 800cd50:	2300      	movs	r3, #0
 800cd52:	e009      	b.n	800cd68 <SD_CheckStatusWithTimeout+0x32>
  while( osKernelGetTickCount() - timer < timeout)
 800cd54:	f001 fed0 	bl	800eaf8 <osKernelGetTickCount>
 800cd58:	4602      	mov	r2, r0
 800cd5a:	68fb      	ldr	r3, [r7, #12]
 800cd5c:	1ad3      	subs	r3, r2, r3
 800cd5e:	687a      	ldr	r2, [r7, #4]
 800cd60:	429a      	cmp	r2, r3
 800cd62:	d8f0      	bhi.n	800cd46 <SD_CheckStatusWithTimeout+0x10>
    }
  }

  return -1;
 800cd64:	f04f 33ff 	mov.w	r3, #4294967295
}
 800cd68:	4618      	mov	r0, r3
 800cd6a:	3710      	adds	r7, #16
 800cd6c:	46bd      	mov	sp, r7
 800cd6e:	bd80      	pop	{r7, pc}

0800cd70 <SD_CheckStatus>:

static DSTATUS SD_CheckStatus(BYTE lun)
{
 800cd70:	b580      	push	{r7, lr}
 800cd72:	b082      	sub	sp, #8
 800cd74:	af00      	add	r7, sp, #0
 800cd76:	4603      	mov	r3, r0
 800cd78:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 800cd7a:	4b0b      	ldr	r3, [pc, #44]	; (800cda8 <SD_CheckStatus+0x38>)
 800cd7c:	2201      	movs	r2, #1
 800cd7e:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800cd80:	f7ff ffae 	bl	800cce0 <BSP_SD_GetCardState>
 800cd84:	4603      	mov	r3, r0
 800cd86:	2b00      	cmp	r3, #0
 800cd88:	d107      	bne.n	800cd9a <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 800cd8a:	4b07      	ldr	r3, [pc, #28]	; (800cda8 <SD_CheckStatus+0x38>)
 800cd8c:	781b      	ldrb	r3, [r3, #0]
 800cd8e:	b2db      	uxtb	r3, r3
 800cd90:	f023 0301 	bic.w	r3, r3, #1
 800cd94:	b2da      	uxtb	r2, r3
 800cd96:	4b04      	ldr	r3, [pc, #16]	; (800cda8 <SD_CheckStatus+0x38>)
 800cd98:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 800cd9a:	4b03      	ldr	r3, [pc, #12]	; (800cda8 <SD_CheckStatus+0x38>)
 800cd9c:	781b      	ldrb	r3, [r3, #0]
 800cd9e:	b2db      	uxtb	r3, r3
}
 800cda0:	4618      	mov	r0, r3
 800cda2:	3708      	adds	r7, #8
 800cda4:	46bd      	mov	sp, r7
 800cda6:	bd80      	pop	{r7, pc}
 800cda8:	2000000d 	.word	0x2000000d

0800cdac <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 800cdac:	b580      	push	{r7, lr}
 800cdae:	b082      	sub	sp, #8
 800cdb0:	af00      	add	r7, sp, #0
 800cdb2:	4603      	mov	r3, r0
 800cdb4:	71fb      	strb	r3, [r7, #7]
Stat = STA_NOINIT;
 800cdb6:	4b1c      	ldr	r3, [pc, #112]	; (800ce28 <SD_initialize+0x7c>)
 800cdb8:	2201      	movs	r2, #1
 800cdba:	701a      	strb	r2, [r3, #0]
   * as the osMessage API will fail otherwise
   */
#if (osCMSIS <= 0x20000U)
  if(osKernelRunning())
#else
  if(osKernelGetState() == osKernelRunning)
 800cdbc:	f001 fe54 	bl	800ea68 <osKernelGetState>
 800cdc0:	4603      	mov	r3, r0
 800cdc2:	2b02      	cmp	r3, #2
 800cdc4:	d129      	bne.n	800ce1a <SD_initialize+0x6e>
#endif
  {
#if !defined(DISABLE_SD_INIT)

    if(BSP_SD_Init() == MSD_OK)
 800cdc6:	f7ff ff31 	bl	800cc2c <BSP_SD_Init>
 800cdca:	4603      	mov	r3, r0
 800cdcc:	2b00      	cmp	r3, #0
 800cdce:	d107      	bne.n	800cde0 <SD_initialize+0x34>
    {
      Stat = SD_CheckStatus(lun);
 800cdd0:	79fb      	ldrb	r3, [r7, #7]
 800cdd2:	4618      	mov	r0, r3
 800cdd4:	f7ff ffcc 	bl	800cd70 <SD_CheckStatus>
 800cdd8:	4603      	mov	r3, r0
 800cdda:	461a      	mov	r2, r3
 800cddc:	4b12      	ldr	r3, [pc, #72]	; (800ce28 <SD_initialize+0x7c>)
 800cdde:	701a      	strb	r2, [r3, #0]
    /*
    * if the SD is correctly initialized, create the operation queue
    * if not already created
    */

    if (Stat != STA_NOINIT)
 800cde0:	4b11      	ldr	r3, [pc, #68]	; (800ce28 <SD_initialize+0x7c>)
 800cde2:	781b      	ldrb	r3, [r3, #0]
 800cde4:	b2db      	uxtb	r3, r3
 800cde6:	2b01      	cmp	r3, #1
 800cde8:	d017      	beq.n	800ce1a <SD_initialize+0x6e>
    {
      if (SDQueueID == NULL)
 800cdea:	4b10      	ldr	r3, [pc, #64]	; (800ce2c <SD_initialize+0x80>)
 800cdec:	681b      	ldr	r3, [r3, #0]
 800cdee:	2b00      	cmp	r3, #0
 800cdf0:	d107      	bne.n	800ce02 <SD_initialize+0x56>
      {
 #if (osCMSIS <= 0x20000U)
      osMessageQDef(SD_Queue, QUEUE_SIZE, uint16_t);
      SDQueueID = osMessageCreate (osMessageQ(SD_Queue), NULL);
#else
      SDQueueID = osMessageQueueNew(QUEUE_SIZE, 2, NULL);
 800cdf2:	2200      	movs	r2, #0
 800cdf4:	2102      	movs	r1, #2
 800cdf6:	200a      	movs	r0, #10
 800cdf8:	f001 ff40 	bl	800ec7c <osMessageQueueNew>
 800cdfc:	4603      	mov	r3, r0
 800cdfe:	4a0b      	ldr	r2, [pc, #44]	; (800ce2c <SD_initialize+0x80>)
 800ce00:	6013      	str	r3, [r2, #0]
#endif
      }

      if (SDQueueID == NULL)
 800ce02:	4b0a      	ldr	r3, [pc, #40]	; (800ce2c <SD_initialize+0x80>)
 800ce04:	681b      	ldr	r3, [r3, #0]
 800ce06:	2b00      	cmp	r3, #0
 800ce08:	d107      	bne.n	800ce1a <SD_initialize+0x6e>
      {
        Stat |= STA_NOINIT;
 800ce0a:	4b07      	ldr	r3, [pc, #28]	; (800ce28 <SD_initialize+0x7c>)
 800ce0c:	781b      	ldrb	r3, [r3, #0]
 800ce0e:	b2db      	uxtb	r3, r3
 800ce10:	f043 0301 	orr.w	r3, r3, #1
 800ce14:	b2da      	uxtb	r2, r3
 800ce16:	4b04      	ldr	r3, [pc, #16]	; (800ce28 <SD_initialize+0x7c>)
 800ce18:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return Stat;
 800ce1a:	4b03      	ldr	r3, [pc, #12]	; (800ce28 <SD_initialize+0x7c>)
 800ce1c:	781b      	ldrb	r3, [r3, #0]
 800ce1e:	b2db      	uxtb	r3, r3
}
 800ce20:	4618      	mov	r0, r3
 800ce22:	3708      	adds	r7, #8
 800ce24:	46bd      	mov	sp, r7
 800ce26:	bd80      	pop	{r7, pc}
 800ce28:	2000000d 	.word	0x2000000d
 800ce2c:	200001a8 	.word	0x200001a8

0800ce30 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 800ce30:	b580      	push	{r7, lr}
 800ce32:	b082      	sub	sp, #8
 800ce34:	af00      	add	r7, sp, #0
 800ce36:	4603      	mov	r3, r0
 800ce38:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 800ce3a:	79fb      	ldrb	r3, [r7, #7]
 800ce3c:	4618      	mov	r0, r3
 800ce3e:	f7ff ff97 	bl	800cd70 <SD_CheckStatus>
 800ce42:	4603      	mov	r3, r0
}
 800ce44:	4618      	mov	r0, r3
 800ce46:	3708      	adds	r7, #8
 800ce48:	46bd      	mov	sp, r7
 800ce4a:	bd80      	pop	{r7, pc}

0800ce4c <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 800ce4c:	b580      	push	{r7, lr}
 800ce4e:	b088      	sub	sp, #32
 800ce50:	af00      	add	r7, sp, #0
 800ce52:	60b9      	str	r1, [r7, #8]
 800ce54:	607a      	str	r2, [r7, #4]
 800ce56:	603b      	str	r3, [r7, #0]
 800ce58:	4603      	mov	r3, r0
 800ce5a:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800ce5c:	2301      	movs	r3, #1
 800ce5e:	77fb      	strb	r3, [r7, #31]
#endif
  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 800ce60:	f247 5030 	movw	r0, #30000	; 0x7530
 800ce64:	f7ff ff67 	bl	800cd36 <SD_CheckStatusWithTimeout>
 800ce68:	4603      	mov	r3, r0
 800ce6a:	2b00      	cmp	r3, #0
 800ce6c:	da01      	bge.n	800ce72 <SD_read+0x26>
  {
    return res;
 800ce6e:	7ffb      	ldrb	r3, [r7, #31]
 800ce70:	e02f      	b.n	800ced2 <SD_read+0x86>
#if defined(ENABLE_SCRATCH_BUFFER)
  if (!((uint32_t)buff & 0x3))
  {
#endif
    /* Fast path cause destination buffer is correctly aligned */
    uint8_t ret = BSP_SD_ReadBlocks_DMA((uint32_t*)buff, (uint32_t)(sector), count);
 800ce72:	683a      	ldr	r2, [r7, #0]
 800ce74:	6879      	ldr	r1, [r7, #4]
 800ce76:	68b8      	ldr	r0, [r7, #8]
 800ce78:	f7ff fefe 	bl	800cc78 <BSP_SD_ReadBlocks_DMA>
 800ce7c:	4603      	mov	r3, r0
 800ce7e:	77bb      	strb	r3, [r7, #30]

    if (ret == MSD_OK) {
 800ce80:	7fbb      	ldrb	r3, [r7, #30]
 800ce82:	2b00      	cmp	r3, #0
 800ce84:	d124      	bne.n	800ced0 <SD_read+0x84>
      {
        timer = osKernelSysTick();
        /* block until SDIO IP is ready or a timeout occur */
        while(osKernelSysTick() - timer <SD_TIMEOUT)
#else
          status = osMessageQueueGet(SDQueueID, (void *)&event, NULL, SD_TIMEOUT);
 800ce86:	4b15      	ldr	r3, [pc, #84]	; (800cedc <SD_read+0x90>)
 800ce88:	6818      	ldr	r0, [r3, #0]
 800ce8a:	f107 0112 	add.w	r1, r7, #18
 800ce8e:	f247 5330 	movw	r3, #30000	; 0x7530
 800ce92:	2200      	movs	r2, #0
 800ce94:	f001 ff66 	bl	800ed64 <osMessageQueueGet>
 800ce98:	61b8      	str	r0, [r7, #24]
          if ((status == osOK) && (event == READ_CPLT_MSG))
 800ce9a:	69bb      	ldr	r3, [r7, #24]
 800ce9c:	2b00      	cmp	r3, #0
 800ce9e:	d117      	bne.n	800ced0 <SD_read+0x84>
 800cea0:	8a7b      	ldrh	r3, [r7, #18]
 800cea2:	2b01      	cmp	r3, #1
 800cea4:	d114      	bne.n	800ced0 <SD_read+0x84>
          {
            timer = osKernelGetTickCount();
 800cea6:	f001 fe27 	bl	800eaf8 <osKernelGetTickCount>
 800ceaa:	6178      	str	r0, [r7, #20]
            /* block until SDIO IP is ready or a timeout occur */
            while(osKernelGetTickCount() - timer <SD_TIMEOUT)
 800ceac:	e007      	b.n	800cebe <SD_read+0x72>
#endif
            {
              if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800ceae:	f7ff ff17 	bl	800cce0 <BSP_SD_GetCardState>
 800ceb2:	4603      	mov	r3, r0
 800ceb4:	2b00      	cmp	r3, #0
 800ceb6:	d102      	bne.n	800cebe <SD_read+0x72>
              {
                res = RES_OK;
 800ceb8:	2300      	movs	r3, #0
 800ceba:	77fb      	strb	r3, [r7, #31]
                adjust the address and the D-Cache size to invalidate accordingly.
                */
                alignedAddr = (uint32_t)buff & ~0x1F;
                SCB_InvalidateDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif
                break;
 800cebc:	e008      	b.n	800ced0 <SD_read+0x84>
            while(osKernelGetTickCount() - timer <SD_TIMEOUT)
 800cebe:	f001 fe1b 	bl	800eaf8 <osKernelGetTickCount>
 800cec2:	4602      	mov	r2, r0
 800cec4:	697b      	ldr	r3, [r7, #20]
 800cec6:	1ad3      	subs	r3, r2, r3
 800cec8:	f247 522f 	movw	r2, #29999	; 0x752f
 800cecc:	4293      	cmp	r3, r2
 800cece:	d9ee      	bls.n	800ceae <SD_read+0x62>

      if ((i == count) && (ret == MSD_OK ))
        res = RES_OK;
    }
#endif
  return res;
 800ced0:	7ffb      	ldrb	r3, [r7, #31]
}
 800ced2:	4618      	mov	r0, r3
 800ced4:	3720      	adds	r7, #32
 800ced6:	46bd      	mov	sp, r7
 800ced8:	bd80      	pop	{r7, pc}
 800ceda:	bf00      	nop
 800cedc:	200001a8 	.word	0x200001a8

0800cee0 <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 800cee0:	b580      	push	{r7, lr}
 800cee2:	b088      	sub	sp, #32
 800cee4:	af00      	add	r7, sp, #0
 800cee6:	60b9      	str	r1, [r7, #8]
 800cee8:	607a      	str	r2, [r7, #4]
 800ceea:	603b      	str	r3, [r7, #0]
 800ceec:	4603      	mov	r3, r0
 800ceee:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800cef0:	2301      	movs	r3, #1
 800cef2:	77fb      	strb	r3, [r7, #31]

  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 800cef4:	f247 5030 	movw	r0, #30000	; 0x7530
 800cef8:	f7ff ff1d 	bl	800cd36 <SD_CheckStatusWithTimeout>
 800cefc:	4603      	mov	r3, r0
 800cefe:	2b00      	cmp	r3, #0
 800cf00:	da01      	bge.n	800cf06 <SD_write+0x26>
  {
    return res;
 800cf02:	7ffb      	ldrb	r3, [r7, #31]
 800cf04:	e02d      	b.n	800cf62 <SD_write+0x82>
  */
  alignedAddr = (uint32_t)buff & ~0x1F;
  SCB_CleanDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif

  if(BSP_SD_WriteBlocks_DMA((uint32_t*)buff,
 800cf06:	683a      	ldr	r2, [r7, #0]
 800cf08:	6879      	ldr	r1, [r7, #4]
 800cf0a:	68b8      	ldr	r0, [r7, #8]
 800cf0c:	f7ff fece 	bl	800ccac <BSP_SD_WriteBlocks_DMA>
 800cf10:	4603      	mov	r3, r0
 800cf12:	2b00      	cmp	r3, #0
 800cf14:	d124      	bne.n	800cf60 <SD_write+0x80>
    if (event.status == osEventMessage)
    {
      if (event.value.v == WRITE_CPLT_MSG)
      {
#else
    status = osMessageQueueGet(SDQueueID, (void *)&event, NULL, SD_TIMEOUT);
 800cf16:	4b15      	ldr	r3, [pc, #84]	; (800cf6c <SD_write+0x8c>)
 800cf18:	6818      	ldr	r0, [r3, #0]
 800cf1a:	f107 0112 	add.w	r1, r7, #18
 800cf1e:	f247 5330 	movw	r3, #30000	; 0x7530
 800cf22:	2200      	movs	r2, #0
 800cf24:	f001 ff1e 	bl	800ed64 <osMessageQueueGet>
 800cf28:	61b8      	str	r0, [r7, #24]
    if ((status == osOK) && (event == WRITE_CPLT_MSG))
 800cf2a:	69bb      	ldr	r3, [r7, #24]
 800cf2c:	2b00      	cmp	r3, #0
 800cf2e:	d117      	bne.n	800cf60 <SD_write+0x80>
 800cf30:	8a7b      	ldrh	r3, [r7, #18]
 800cf32:	2b02      	cmp	r3, #2
 800cf34:	d114      	bne.n	800cf60 <SD_write+0x80>
 #if (osCMSIS < 0x20000U)
        timer = osKernelSysTick();
        /* block until SDIO IP is ready or a timeout occur */
        while(osKernelSysTick() - timer  < SD_TIMEOUT)
#else
        timer = osKernelGetTickCount();
 800cf36:	f001 fddf 	bl	800eaf8 <osKernelGetTickCount>
 800cf3a:	6178      	str	r0, [r7, #20]
        /* block until SDIO IP is ready or a timeout occur */
        while(osKernelGetTickCount() - timer  < SD_TIMEOUT)
 800cf3c:	e007      	b.n	800cf4e <SD_write+0x6e>
#endif
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800cf3e:	f7ff fecf 	bl	800cce0 <BSP_SD_GetCardState>
 800cf42:	4603      	mov	r3, r0
 800cf44:	2b00      	cmp	r3, #0
 800cf46:	d102      	bne.n	800cf4e <SD_write+0x6e>
          {
            res = RES_OK;
 800cf48:	2300      	movs	r3, #0
 800cf4a:	77fb      	strb	r3, [r7, #31]
            break;
 800cf4c:	e008      	b.n	800cf60 <SD_write+0x80>
        while(osKernelGetTickCount() - timer  < SD_TIMEOUT)
 800cf4e:	f001 fdd3 	bl	800eaf8 <osKernelGetTickCount>
 800cf52:	4602      	mov	r2, r0
 800cf54:	697b      	ldr	r3, [r7, #20]
 800cf56:	1ad3      	subs	r3, r2, r3
 800cf58:	f247 522f 	movw	r2, #29999	; 0x752f
 800cf5c:	4293      	cmp	r3, r2
 800cf5e:	d9ee      	bls.n	800cf3e <SD_write+0x5e>
    }

  }
#endif

  return res;
 800cf60:	7ffb      	ldrb	r3, [r7, #31]
}
 800cf62:	4618      	mov	r0, r3
 800cf64:	3720      	adds	r7, #32
 800cf66:	46bd      	mov	sp, r7
 800cf68:	bd80      	pop	{r7, pc}
 800cf6a:	bf00      	nop
 800cf6c:	200001a8 	.word	0x200001a8

0800cf70 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 800cf70:	b580      	push	{r7, lr}
 800cf72:	b08c      	sub	sp, #48	; 0x30
 800cf74:	af00      	add	r7, sp, #0
 800cf76:	4603      	mov	r3, r0
 800cf78:	603a      	str	r2, [r7, #0]
 800cf7a:	71fb      	strb	r3, [r7, #7]
 800cf7c:	460b      	mov	r3, r1
 800cf7e:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 800cf80:	2301      	movs	r3, #1
 800cf82:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 800cf86:	4b25      	ldr	r3, [pc, #148]	; (800d01c <SD_ioctl+0xac>)
 800cf88:	781b      	ldrb	r3, [r3, #0]
 800cf8a:	b2db      	uxtb	r3, r3
 800cf8c:	f003 0301 	and.w	r3, r3, #1
 800cf90:	2b00      	cmp	r3, #0
 800cf92:	d001      	beq.n	800cf98 <SD_ioctl+0x28>
 800cf94:	2303      	movs	r3, #3
 800cf96:	e03c      	b.n	800d012 <SD_ioctl+0xa2>

  switch (cmd)
 800cf98:	79bb      	ldrb	r3, [r7, #6]
 800cf9a:	2b03      	cmp	r3, #3
 800cf9c:	d834      	bhi.n	800d008 <SD_ioctl+0x98>
 800cf9e:	a201      	add	r2, pc, #4	; (adr r2, 800cfa4 <SD_ioctl+0x34>)
 800cfa0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cfa4:	0800cfb5 	.word	0x0800cfb5
 800cfa8:	0800cfbd 	.word	0x0800cfbd
 800cfac:	0800cfd5 	.word	0x0800cfd5
 800cfb0:	0800cfef 	.word	0x0800cfef
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 800cfb4:	2300      	movs	r3, #0
 800cfb6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800cfba:	e028      	b.n	800d00e <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 800cfbc:	f107 0308 	add.w	r3, r7, #8
 800cfc0:	4618      	mov	r0, r3
 800cfc2:	f7ff fe9d 	bl	800cd00 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 800cfc6:	6a3a      	ldr	r2, [r7, #32]
 800cfc8:	683b      	ldr	r3, [r7, #0]
 800cfca:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800cfcc:	2300      	movs	r3, #0
 800cfce:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800cfd2:	e01c      	b.n	800d00e <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800cfd4:	f107 0308 	add.w	r3, r7, #8
 800cfd8:	4618      	mov	r0, r3
 800cfda:	f7ff fe91 	bl	800cd00 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 800cfde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cfe0:	b29a      	uxth	r2, r3
 800cfe2:	683b      	ldr	r3, [r7, #0]
 800cfe4:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 800cfe6:	2300      	movs	r3, #0
 800cfe8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800cfec:	e00f      	b.n	800d00e <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800cfee:	f107 0308 	add.w	r3, r7, #8
 800cff2:	4618      	mov	r0, r3
 800cff4:	f7ff fe84 	bl	800cd00 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 800cff8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cffa:	0a5a      	lsrs	r2, r3, #9
 800cffc:	683b      	ldr	r3, [r7, #0]
 800cffe:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800d000:	2300      	movs	r3, #0
 800d002:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800d006:	e002      	b.n	800d00e <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 800d008:	2304      	movs	r3, #4
 800d00a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  return res;
 800d00e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800d012:	4618      	mov	r0, r3
 800d014:	3730      	adds	r7, #48	; 0x30
 800d016:	46bd      	mov	sp, r7
 800d018:	bd80      	pop	{r7, pc}
 800d01a:	bf00      	nop
 800d01c:	2000000d 	.word	0x2000000d

0800d020 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800d020:	b580      	push	{r7, lr}
 800d022:	b084      	sub	sp, #16
 800d024:	af00      	add	r7, sp, #0
 800d026:	6078      	str	r0, [r7, #4]
 800d028:	460b      	mov	r3, r1
 800d02a:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800d02c:	f44f 7007 	mov.w	r0, #540	; 0x21c
 800d030:	f005 f94e 	bl	80122d0 <USBD_static_malloc>
 800d034:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 800d036:	68fb      	ldr	r3, [r7, #12]
 800d038:	2b00      	cmp	r3, #0
 800d03a:	d105      	bne.n	800d048 <USBD_CDC_Init+0x28>
  {
    pdev->pClassData = NULL;
 800d03c:	687b      	ldr	r3, [r7, #4]
 800d03e:	2200      	movs	r2, #0
 800d040:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 800d044:	2302      	movs	r3, #2
 800d046:	e066      	b.n	800d116 <USBD_CDC_Init+0xf6>
  }

  pdev->pClassData = (void *)hcdc;
 800d048:	687b      	ldr	r3, [r7, #4]
 800d04a:	68fa      	ldr	r2, [r7, #12]
 800d04c:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800d050:	687b      	ldr	r3, [r7, #4]
 800d052:	7c1b      	ldrb	r3, [r3, #16]
 800d054:	2b00      	cmp	r3, #0
 800d056:	d119      	bne.n	800d08c <USBD_CDC_Init+0x6c>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800d058:	f44f 7300 	mov.w	r3, #512	; 0x200
 800d05c:	2202      	movs	r2, #2
 800d05e:	2181      	movs	r1, #129	; 0x81
 800d060:	6878      	ldr	r0, [r7, #4]
 800d062:	f005 f812 	bl	801208a <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800d066:	687b      	ldr	r3, [r7, #4]
 800d068:	2201      	movs	r2, #1
 800d06a:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800d06c:	f44f 7300 	mov.w	r3, #512	; 0x200
 800d070:	2202      	movs	r2, #2
 800d072:	2101      	movs	r1, #1
 800d074:	6878      	ldr	r0, [r7, #4]
 800d076:	f005 f808 	bl	801208a <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800d07a:	687b      	ldr	r3, [r7, #4]
 800d07c:	2201      	movs	r2, #1
 800d07e:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800d082:	687b      	ldr	r3, [r7, #4]
 800d084:	2210      	movs	r2, #16
 800d086:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
 800d08a:	e016      	b.n	800d0ba <USBD_CDC_Init+0x9a>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800d08c:	2340      	movs	r3, #64	; 0x40
 800d08e:	2202      	movs	r2, #2
 800d090:	2181      	movs	r1, #129	; 0x81
 800d092:	6878      	ldr	r0, [r7, #4]
 800d094:	f004 fff9 	bl	801208a <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800d098:	687b      	ldr	r3, [r7, #4]
 800d09a:	2201      	movs	r2, #1
 800d09c:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800d09e:	2340      	movs	r3, #64	; 0x40
 800d0a0:	2202      	movs	r2, #2
 800d0a2:	2101      	movs	r1, #1
 800d0a4:	6878      	ldr	r0, [r7, #4]
 800d0a6:	f004 fff0 	bl	801208a <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800d0aa:	687b      	ldr	r3, [r7, #4]
 800d0ac:	2201      	movs	r2, #1
 800d0ae:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 800d0b2:	687b      	ldr	r3, [r7, #4]
 800d0b4:	2210      	movs	r2, #16
 800d0b6:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800d0ba:	2308      	movs	r3, #8
 800d0bc:	2203      	movs	r2, #3
 800d0be:	2182      	movs	r1, #130	; 0x82
 800d0c0:	6878      	ldr	r0, [r7, #4]
 800d0c2:	f004 ffe2 	bl	801208a <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 800d0c6:	687b      	ldr	r3, [r7, #4]
 800d0c8:	2201      	movs	r2, #1
 800d0ca:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 800d0ce:	687b      	ldr	r3, [r7, #4]
 800d0d0:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800d0d4:	681b      	ldr	r3, [r3, #0]
 800d0d6:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 800d0d8:	68fb      	ldr	r3, [r7, #12]
 800d0da:	2200      	movs	r2, #0
 800d0dc:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 800d0e0:	68fb      	ldr	r3, [r7, #12]
 800d0e2:	2200      	movs	r2, #0
 800d0e4:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800d0e8:	687b      	ldr	r3, [r7, #4]
 800d0ea:	7c1b      	ldrb	r3, [r3, #16]
 800d0ec:	2b00      	cmp	r3, #0
 800d0ee:	d109      	bne.n	800d104 <USBD_CDC_Init+0xe4>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800d0f0:	68fb      	ldr	r3, [r7, #12]
 800d0f2:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800d0f6:	f44f 7300 	mov.w	r3, #512	; 0x200
 800d0fa:	2101      	movs	r1, #1
 800d0fc:	6878      	ldr	r0, [r7, #4]
 800d0fe:	f005 f8b3 	bl	8012268 <USBD_LL_PrepareReceive>
 800d102:	e007      	b.n	800d114 <USBD_CDC_Init+0xf4>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800d104:	68fb      	ldr	r3, [r7, #12]
 800d106:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800d10a:	2340      	movs	r3, #64	; 0x40
 800d10c:	2101      	movs	r1, #1
 800d10e:	6878      	ldr	r0, [r7, #4]
 800d110:	f005 f8aa 	bl	8012268 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800d114:	2300      	movs	r3, #0
}
 800d116:	4618      	mov	r0, r3
 800d118:	3710      	adds	r7, #16
 800d11a:	46bd      	mov	sp, r7
 800d11c:	bd80      	pop	{r7, pc}

0800d11e <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800d11e:	b580      	push	{r7, lr}
 800d120:	b082      	sub	sp, #8
 800d122:	af00      	add	r7, sp, #0
 800d124:	6078      	str	r0, [r7, #4]
 800d126:	460b      	mov	r3, r1
 800d128:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 800d12a:	2181      	movs	r1, #129	; 0x81
 800d12c:	6878      	ldr	r0, [r7, #4]
 800d12e:	f004 ffd2 	bl	80120d6 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 800d132:	687b      	ldr	r3, [r7, #4]
 800d134:	2200      	movs	r2, #0
 800d136:	871a      	strh	r2, [r3, #56]	; 0x38

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 800d138:	2101      	movs	r1, #1
 800d13a:	6878      	ldr	r0, [r7, #4]
 800d13c:	f004 ffcb 	bl	80120d6 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 800d140:	687b      	ldr	r3, [r7, #4]
 800d142:	2200      	movs	r2, #0
 800d144:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 800d148:	2182      	movs	r1, #130	; 0x82
 800d14a:	6878      	ldr	r0, [r7, #4]
 800d14c:	f004 ffc3 	bl	80120d6 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 800d150:	687b      	ldr	r3, [r7, #4]
 800d152:	2200      	movs	r2, #0
 800d154:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = 0U;
 800d158:	687b      	ldr	r3, [r7, #4]
 800d15a:	2200      	movs	r2, #0
 800d15c:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 800d160:	687b      	ldr	r3, [r7, #4]
 800d162:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800d166:	2b00      	cmp	r3, #0
 800d168:	d00e      	beq.n	800d188 <USBD_CDC_DeInit+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 800d16a:	687b      	ldr	r3, [r7, #4]
 800d16c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800d170:	685b      	ldr	r3, [r3, #4]
 800d172:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 800d174:	687b      	ldr	r3, [r7, #4]
 800d176:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800d17a:	4618      	mov	r0, r3
 800d17c:	f005 f8b6 	bl	80122ec <USBD_static_free>
    pdev->pClassData = NULL;
 800d180:	687b      	ldr	r3, [r7, #4]
 800d182:	2200      	movs	r2, #0
 800d184:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 800d188:	2300      	movs	r3, #0
}
 800d18a:	4618      	mov	r0, r3
 800d18c:	3708      	adds	r7, #8
 800d18e:	46bd      	mov	sp, r7
 800d190:	bd80      	pop	{r7, pc}
	...

0800d194 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 800d194:	b580      	push	{r7, lr}
 800d196:	b086      	sub	sp, #24
 800d198:	af00      	add	r7, sp, #0
 800d19a:	6078      	str	r0, [r7, #4]
 800d19c:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800d19e:	687b      	ldr	r3, [r7, #4]
 800d1a0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800d1a4:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 800d1a6:	2300      	movs	r3, #0
 800d1a8:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 800d1aa:	2300      	movs	r3, #0
 800d1ac:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 800d1ae:	2300      	movs	r3, #0
 800d1b0:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 800d1b2:	693b      	ldr	r3, [r7, #16]
 800d1b4:	2b00      	cmp	r3, #0
 800d1b6:	d101      	bne.n	800d1bc <USBD_CDC_Setup+0x28>
  {
    return (uint8_t)USBD_FAIL;
 800d1b8:	2303      	movs	r3, #3
 800d1ba:	e0af      	b.n	800d31c <USBD_CDC_Setup+0x188>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800d1bc:	683b      	ldr	r3, [r7, #0]
 800d1be:	781b      	ldrb	r3, [r3, #0]
 800d1c0:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800d1c4:	2b00      	cmp	r3, #0
 800d1c6:	d03f      	beq.n	800d248 <USBD_CDC_Setup+0xb4>
 800d1c8:	2b20      	cmp	r3, #32
 800d1ca:	f040 809f 	bne.w	800d30c <USBD_CDC_Setup+0x178>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 800d1ce:	683b      	ldr	r3, [r7, #0]
 800d1d0:	88db      	ldrh	r3, [r3, #6]
 800d1d2:	2b00      	cmp	r3, #0
 800d1d4:	d02e      	beq.n	800d234 <USBD_CDC_Setup+0xa0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 800d1d6:	683b      	ldr	r3, [r7, #0]
 800d1d8:	781b      	ldrb	r3, [r3, #0]
 800d1da:	b25b      	sxtb	r3, r3
 800d1dc:	2b00      	cmp	r3, #0
 800d1de:	da16      	bge.n	800d20e <USBD_CDC_Setup+0x7a>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800d1e0:	687b      	ldr	r3, [r7, #4]
 800d1e2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800d1e6:	689b      	ldr	r3, [r3, #8]
 800d1e8:	683a      	ldr	r2, [r7, #0]
 800d1ea:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)hcdc->data,
 800d1ec:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800d1ee:	683a      	ldr	r2, [r7, #0]
 800d1f0:	88d2      	ldrh	r2, [r2, #6]
 800d1f2:	4798      	blx	r3
                                                            req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 800d1f4:	683b      	ldr	r3, [r7, #0]
 800d1f6:	88db      	ldrh	r3, [r3, #6]
 800d1f8:	2b07      	cmp	r3, #7
 800d1fa:	bf28      	it	cs
 800d1fc:	2307      	movcs	r3, #7
 800d1fe:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 800d200:	693b      	ldr	r3, [r7, #16]
 800d202:	89fa      	ldrh	r2, [r7, #14]
 800d204:	4619      	mov	r1, r3
 800d206:	6878      	ldr	r0, [r7, #4]
 800d208:	f001 fae9 	bl	800e7de <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)req, 0U);
      }
      break;
 800d20c:	e085      	b.n	800d31a <USBD_CDC_Setup+0x186>
          hcdc->CmdOpCode = req->bRequest;
 800d20e:	683b      	ldr	r3, [r7, #0]
 800d210:	785a      	ldrb	r2, [r3, #1]
 800d212:	693b      	ldr	r3, [r7, #16]
 800d214:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 800d218:	683b      	ldr	r3, [r7, #0]
 800d21a:	88db      	ldrh	r3, [r3, #6]
 800d21c:	b2da      	uxtb	r2, r3
 800d21e:	693b      	ldr	r3, [r7, #16]
 800d220:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 800d224:	6939      	ldr	r1, [r7, #16]
 800d226:	683b      	ldr	r3, [r7, #0]
 800d228:	88db      	ldrh	r3, [r3, #6]
 800d22a:	461a      	mov	r2, r3
 800d22c:	6878      	ldr	r0, [r7, #4]
 800d22e:	f001 fb02 	bl	800e836 <USBD_CtlPrepareRx>
      break;
 800d232:	e072      	b.n	800d31a <USBD_CDC_Setup+0x186>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800d234:	687b      	ldr	r3, [r7, #4]
 800d236:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800d23a:	689b      	ldr	r3, [r3, #8]
 800d23c:	683a      	ldr	r2, [r7, #0]
 800d23e:	7850      	ldrb	r0, [r2, #1]
 800d240:	2200      	movs	r2, #0
 800d242:	6839      	ldr	r1, [r7, #0]
 800d244:	4798      	blx	r3
      break;
 800d246:	e068      	b.n	800d31a <USBD_CDC_Setup+0x186>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800d248:	683b      	ldr	r3, [r7, #0]
 800d24a:	785b      	ldrb	r3, [r3, #1]
 800d24c:	2b0b      	cmp	r3, #11
 800d24e:	d852      	bhi.n	800d2f6 <USBD_CDC_Setup+0x162>
 800d250:	a201      	add	r2, pc, #4	; (adr r2, 800d258 <USBD_CDC_Setup+0xc4>)
 800d252:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d256:	bf00      	nop
 800d258:	0800d289 	.word	0x0800d289
 800d25c:	0800d305 	.word	0x0800d305
 800d260:	0800d2f7 	.word	0x0800d2f7
 800d264:	0800d2f7 	.word	0x0800d2f7
 800d268:	0800d2f7 	.word	0x0800d2f7
 800d26c:	0800d2f7 	.word	0x0800d2f7
 800d270:	0800d2f7 	.word	0x0800d2f7
 800d274:	0800d2f7 	.word	0x0800d2f7
 800d278:	0800d2f7 	.word	0x0800d2f7
 800d27c:	0800d2f7 	.word	0x0800d2f7
 800d280:	0800d2b3 	.word	0x0800d2b3
 800d284:	0800d2dd 	.word	0x0800d2dd
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d288:	687b      	ldr	r3, [r7, #4]
 800d28a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d28e:	b2db      	uxtb	r3, r3
 800d290:	2b03      	cmp	r3, #3
 800d292:	d107      	bne.n	800d2a4 <USBD_CDC_Setup+0x110>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800d294:	f107 030a 	add.w	r3, r7, #10
 800d298:	2202      	movs	r2, #2
 800d29a:	4619      	mov	r1, r3
 800d29c:	6878      	ldr	r0, [r7, #4]
 800d29e:	f001 fa9e 	bl	800e7de <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800d2a2:	e032      	b.n	800d30a <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 800d2a4:	6839      	ldr	r1, [r7, #0]
 800d2a6:	6878      	ldr	r0, [r7, #4]
 800d2a8:	f001 fa28 	bl	800e6fc <USBD_CtlError>
            ret = USBD_FAIL;
 800d2ac:	2303      	movs	r3, #3
 800d2ae:	75fb      	strb	r3, [r7, #23]
          break;
 800d2b0:	e02b      	b.n	800d30a <USBD_CDC_Setup+0x176>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d2b2:	687b      	ldr	r3, [r7, #4]
 800d2b4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d2b8:	b2db      	uxtb	r3, r3
 800d2ba:	2b03      	cmp	r3, #3
 800d2bc:	d107      	bne.n	800d2ce <USBD_CDC_Setup+0x13a>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800d2be:	f107 030d 	add.w	r3, r7, #13
 800d2c2:	2201      	movs	r2, #1
 800d2c4:	4619      	mov	r1, r3
 800d2c6:	6878      	ldr	r0, [r7, #4]
 800d2c8:	f001 fa89 	bl	800e7de <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800d2cc:	e01d      	b.n	800d30a <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 800d2ce:	6839      	ldr	r1, [r7, #0]
 800d2d0:	6878      	ldr	r0, [r7, #4]
 800d2d2:	f001 fa13 	bl	800e6fc <USBD_CtlError>
            ret = USBD_FAIL;
 800d2d6:	2303      	movs	r3, #3
 800d2d8:	75fb      	strb	r3, [r7, #23]
          break;
 800d2da:	e016      	b.n	800d30a <USBD_CDC_Setup+0x176>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800d2dc:	687b      	ldr	r3, [r7, #4]
 800d2de:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d2e2:	b2db      	uxtb	r3, r3
 800d2e4:	2b03      	cmp	r3, #3
 800d2e6:	d00f      	beq.n	800d308 <USBD_CDC_Setup+0x174>
          {
            USBD_CtlError(pdev, req);
 800d2e8:	6839      	ldr	r1, [r7, #0]
 800d2ea:	6878      	ldr	r0, [r7, #4]
 800d2ec:	f001 fa06 	bl	800e6fc <USBD_CtlError>
            ret = USBD_FAIL;
 800d2f0:	2303      	movs	r3, #3
 800d2f2:	75fb      	strb	r3, [r7, #23]
          }
          break;
 800d2f4:	e008      	b.n	800d308 <USBD_CDC_Setup+0x174>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800d2f6:	6839      	ldr	r1, [r7, #0]
 800d2f8:	6878      	ldr	r0, [r7, #4]
 800d2fa:	f001 f9ff 	bl	800e6fc <USBD_CtlError>
          ret = USBD_FAIL;
 800d2fe:	2303      	movs	r3, #3
 800d300:	75fb      	strb	r3, [r7, #23]
          break;
 800d302:	e002      	b.n	800d30a <USBD_CDC_Setup+0x176>
          break;
 800d304:	bf00      	nop
 800d306:	e008      	b.n	800d31a <USBD_CDC_Setup+0x186>
          break;
 800d308:	bf00      	nop
      }
      break;
 800d30a:	e006      	b.n	800d31a <USBD_CDC_Setup+0x186>

    default:
      USBD_CtlError(pdev, req);
 800d30c:	6839      	ldr	r1, [r7, #0]
 800d30e:	6878      	ldr	r0, [r7, #4]
 800d310:	f001 f9f4 	bl	800e6fc <USBD_CtlError>
      ret = USBD_FAIL;
 800d314:	2303      	movs	r3, #3
 800d316:	75fb      	strb	r3, [r7, #23]
      break;
 800d318:	bf00      	nop
  }

  return (uint8_t)ret;
 800d31a:	7dfb      	ldrb	r3, [r7, #23]
}
 800d31c:	4618      	mov	r0, r3
 800d31e:	3718      	adds	r7, #24
 800d320:	46bd      	mov	sp, r7
 800d322:	bd80      	pop	{r7, pc}

0800d324 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800d324:	b580      	push	{r7, lr}
 800d326:	b084      	sub	sp, #16
 800d328:	af00      	add	r7, sp, #0
 800d32a:	6078      	str	r0, [r7, #4]
 800d32c:	460b      	mov	r3, r1
 800d32e:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = pdev->pData;
 800d330:	687b      	ldr	r3, [r7, #4]
 800d332:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800d336:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800d338:	687b      	ldr	r3, [r7, #4]
 800d33a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800d33e:	2b00      	cmp	r3, #0
 800d340:	d101      	bne.n	800d346 <USBD_CDC_DataIn+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800d342:	2303      	movs	r3, #3
 800d344:	e04f      	b.n	800d3e6 <USBD_CDC_DataIn+0xc2>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800d346:	687b      	ldr	r3, [r7, #4]
 800d348:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800d34c:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum].total_length > 0U) &&
 800d34e:	78fa      	ldrb	r2, [r7, #3]
 800d350:	6879      	ldr	r1, [r7, #4]
 800d352:	4613      	mov	r3, r2
 800d354:	009b      	lsls	r3, r3, #2
 800d356:	4413      	add	r3, r2
 800d358:	009b      	lsls	r3, r3, #2
 800d35a:	440b      	add	r3, r1
 800d35c:	3318      	adds	r3, #24
 800d35e:	681b      	ldr	r3, [r3, #0]
 800d360:	2b00      	cmp	r3, #0
 800d362:	d029      	beq.n	800d3b8 <USBD_CDC_DataIn+0x94>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 800d364:	78fa      	ldrb	r2, [r7, #3]
 800d366:	6879      	ldr	r1, [r7, #4]
 800d368:	4613      	mov	r3, r2
 800d36a:	009b      	lsls	r3, r3, #2
 800d36c:	4413      	add	r3, r2
 800d36e:	009b      	lsls	r3, r3, #2
 800d370:	440b      	add	r3, r1
 800d372:	3318      	adds	r3, #24
 800d374:	681a      	ldr	r2, [r3, #0]
 800d376:	78f9      	ldrb	r1, [r7, #3]
 800d378:	68f8      	ldr	r0, [r7, #12]
 800d37a:	460b      	mov	r3, r1
 800d37c:	00db      	lsls	r3, r3, #3
 800d37e:	1a5b      	subs	r3, r3, r1
 800d380:	009b      	lsls	r3, r3, #2
 800d382:	4403      	add	r3, r0
 800d384:	3344      	adds	r3, #68	; 0x44
 800d386:	681b      	ldr	r3, [r3, #0]
 800d388:	fbb2 f1f3 	udiv	r1, r2, r3
 800d38c:	fb03 f301 	mul.w	r3, r3, r1
 800d390:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 800d392:	2b00      	cmp	r3, #0
 800d394:	d110      	bne.n	800d3b8 <USBD_CDC_DataIn+0x94>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum].total_length = 0U;
 800d396:	78fa      	ldrb	r2, [r7, #3]
 800d398:	6879      	ldr	r1, [r7, #4]
 800d39a:	4613      	mov	r3, r2
 800d39c:	009b      	lsls	r3, r3, #2
 800d39e:	4413      	add	r3, r2
 800d3a0:	009b      	lsls	r3, r3, #2
 800d3a2:	440b      	add	r3, r1
 800d3a4:	3318      	adds	r3, #24
 800d3a6:	2200      	movs	r2, #0
 800d3a8:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800d3aa:	78f9      	ldrb	r1, [r7, #3]
 800d3ac:	2300      	movs	r3, #0
 800d3ae:	2200      	movs	r2, #0
 800d3b0:	6878      	ldr	r0, [r7, #4]
 800d3b2:	f004 ff38 	bl	8012226 <USBD_LL_Transmit>
 800d3b6:	e015      	b.n	800d3e4 <USBD_CDC_DataIn+0xc0>
  }
  else
  {
    hcdc->TxState = 0U;
 800d3b8:	68bb      	ldr	r3, [r7, #8]
 800d3ba:	2200      	movs	r2, #0
 800d3bc:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt != NULL)
 800d3c0:	687b      	ldr	r3, [r7, #4]
 800d3c2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800d3c6:	691b      	ldr	r3, [r3, #16]
 800d3c8:	2b00      	cmp	r3, #0
 800d3ca:	d00b      	beq.n	800d3e4 <USBD_CDC_DataIn+0xc0>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800d3cc:	687b      	ldr	r3, [r7, #4]
 800d3ce:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800d3d2:	691b      	ldr	r3, [r3, #16]
 800d3d4:	68ba      	ldr	r2, [r7, #8]
 800d3d6:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 800d3da:	68ba      	ldr	r2, [r7, #8]
 800d3dc:	f502 7104 	add.w	r1, r2, #528	; 0x210
 800d3e0:	78fa      	ldrb	r2, [r7, #3]
 800d3e2:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 800d3e4:	2300      	movs	r3, #0
}
 800d3e6:	4618      	mov	r0, r3
 800d3e8:	3710      	adds	r7, #16
 800d3ea:	46bd      	mov	sp, r7
 800d3ec:	bd80      	pop	{r7, pc}

0800d3ee <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800d3ee:	b580      	push	{r7, lr}
 800d3f0:	b084      	sub	sp, #16
 800d3f2:	af00      	add	r7, sp, #0
 800d3f4:	6078      	str	r0, [r7, #4]
 800d3f6:	460b      	mov	r3, r1
 800d3f8:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800d3fa:	687b      	ldr	r3, [r7, #4]
 800d3fc:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800d400:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800d402:	687b      	ldr	r3, [r7, #4]
 800d404:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800d408:	2b00      	cmp	r3, #0
 800d40a:	d101      	bne.n	800d410 <USBD_CDC_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800d40c:	2303      	movs	r3, #3
 800d40e:	e015      	b.n	800d43c <USBD_CDC_DataOut+0x4e>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800d410:	78fb      	ldrb	r3, [r7, #3]
 800d412:	4619      	mov	r1, r3
 800d414:	6878      	ldr	r0, [r7, #4]
 800d416:	f004 ff48 	bl	80122aa <USBD_LL_GetRxDataSize>
 800d41a:	4602      	mov	r2, r0
 800d41c:	68fb      	ldr	r3, [r7, #12]
 800d41e:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800d422:	687b      	ldr	r3, [r7, #4]
 800d424:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800d428:	68db      	ldr	r3, [r3, #12]
 800d42a:	68fa      	ldr	r2, [r7, #12]
 800d42c:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 800d430:	68fa      	ldr	r2, [r7, #12]
 800d432:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 800d436:	4611      	mov	r1, r2
 800d438:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 800d43a:	2300      	movs	r3, #0
}
 800d43c:	4618      	mov	r0, r3
 800d43e:	3710      	adds	r7, #16
 800d440:	46bd      	mov	sp, r7
 800d442:	bd80      	pop	{r7, pc}

0800d444 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800d444:	b580      	push	{r7, lr}
 800d446:	b084      	sub	sp, #16
 800d448:	af00      	add	r7, sp, #0
 800d44a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800d44c:	687b      	ldr	r3, [r7, #4]
 800d44e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800d452:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800d454:	68fb      	ldr	r3, [r7, #12]
 800d456:	2b00      	cmp	r3, #0
 800d458:	d101      	bne.n	800d45e <USBD_CDC_EP0_RxReady+0x1a>
  {
    return (uint8_t)USBD_FAIL;
 800d45a:	2303      	movs	r3, #3
 800d45c:	e01b      	b.n	800d496 <USBD_CDC_EP0_RxReady+0x52>
  }

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800d45e:	687b      	ldr	r3, [r7, #4]
 800d460:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800d464:	2b00      	cmp	r3, #0
 800d466:	d015      	beq.n	800d494 <USBD_CDC_EP0_RxReady+0x50>
 800d468:	68fb      	ldr	r3, [r7, #12]
 800d46a:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800d46e:	2bff      	cmp	r3, #255	; 0xff
 800d470:	d010      	beq.n	800d494 <USBD_CDC_EP0_RxReady+0x50>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800d472:	687b      	ldr	r3, [r7, #4]
 800d474:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800d478:	689b      	ldr	r3, [r3, #8]
 800d47a:	68fa      	ldr	r2, [r7, #12]
 800d47c:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)hcdc->data,
 800d480:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 800d482:	68fa      	ldr	r2, [r7, #12]
 800d484:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800d488:	b292      	uxth	r2, r2
 800d48a:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800d48c:	68fb      	ldr	r3, [r7, #12]
 800d48e:	22ff      	movs	r2, #255	; 0xff
 800d490:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 800d494:	2300      	movs	r3, #0
}
 800d496:	4618      	mov	r0, r3
 800d498:	3710      	adds	r7, #16
 800d49a:	46bd      	mov	sp, r7
 800d49c:	bd80      	pop	{r7, pc}
	...

0800d4a0 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800d4a0:	b480      	push	{r7}
 800d4a2:	b083      	sub	sp, #12
 800d4a4:	af00      	add	r7, sp, #0
 800d4a6:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 800d4a8:	687b      	ldr	r3, [r7, #4]
 800d4aa:	2243      	movs	r2, #67	; 0x43
 800d4ac:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 800d4ae:	4b03      	ldr	r3, [pc, #12]	; (800d4bc <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 800d4b0:	4618      	mov	r0, r3
 800d4b2:	370c      	adds	r7, #12
 800d4b4:	46bd      	mov	sp, r7
 800d4b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d4ba:	4770      	bx	lr
 800d4bc:	20000098 	.word	0x20000098

0800d4c0 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800d4c0:	b480      	push	{r7}
 800d4c2:	b083      	sub	sp, #12
 800d4c4:	af00      	add	r7, sp, #0
 800d4c6:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 800d4c8:	687b      	ldr	r3, [r7, #4]
 800d4ca:	2243      	movs	r2, #67	; 0x43
 800d4cc:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgHSDesc;
 800d4ce:	4b03      	ldr	r3, [pc, #12]	; (800d4dc <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 800d4d0:	4618      	mov	r0, r3
 800d4d2:	370c      	adds	r7, #12
 800d4d4:	46bd      	mov	sp, r7
 800d4d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d4da:	4770      	bx	lr
 800d4dc:	20000054 	.word	0x20000054

0800d4e0 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800d4e0:	b480      	push	{r7}
 800d4e2:	b083      	sub	sp, #12
 800d4e4:	af00      	add	r7, sp, #0
 800d4e6:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 800d4e8:	687b      	ldr	r3, [r7, #4]
 800d4ea:	2243      	movs	r2, #67	; 0x43
 800d4ec:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
 800d4ee:	4b03      	ldr	r3, [pc, #12]	; (800d4fc <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 800d4f0:	4618      	mov	r0, r3
 800d4f2:	370c      	adds	r7, #12
 800d4f4:	46bd      	mov	sp, r7
 800d4f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d4fa:	4770      	bx	lr
 800d4fc:	200000dc 	.word	0x200000dc

0800d500 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800d500:	b480      	push	{r7}
 800d502:	b083      	sub	sp, #12
 800d504:	af00      	add	r7, sp, #0
 800d506:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 800d508:	687b      	ldr	r3, [r7, #4]
 800d50a:	220a      	movs	r2, #10
 800d50c:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800d50e:	4b03      	ldr	r3, [pc, #12]	; (800d51c <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800d510:	4618      	mov	r0, r3
 800d512:	370c      	adds	r7, #12
 800d514:	46bd      	mov	sp, r7
 800d516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d51a:	4770      	bx	lr
 800d51c:	20000010 	.word	0x20000010

0800d520 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 800d520:	b480      	push	{r7}
 800d522:	b083      	sub	sp, #12
 800d524:	af00      	add	r7, sp, #0
 800d526:	6078      	str	r0, [r7, #4]
 800d528:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800d52a:	683b      	ldr	r3, [r7, #0]
 800d52c:	2b00      	cmp	r3, #0
 800d52e:	d101      	bne.n	800d534 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800d530:	2303      	movs	r3, #3
 800d532:	e004      	b.n	800d53e <USBD_CDC_RegisterInterface+0x1e>
  }

  pdev->pUserData = fops;
 800d534:	687b      	ldr	r3, [r7, #4]
 800d536:	683a      	ldr	r2, [r7, #0]
 800d538:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 800d53c:	2300      	movs	r3, #0
}
 800d53e:	4618      	mov	r0, r3
 800d540:	370c      	adds	r7, #12
 800d542:	46bd      	mov	sp, r7
 800d544:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d548:	4770      	bx	lr

0800d54a <USBD_CDC_SetTxBuffer>:
  * @param  pbuff: Tx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 800d54a:	b480      	push	{r7}
 800d54c:	b087      	sub	sp, #28
 800d54e:	af00      	add	r7, sp, #0
 800d550:	60f8      	str	r0, [r7, #12]
 800d552:	60b9      	str	r1, [r7, #8]
 800d554:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800d556:	68fb      	ldr	r3, [r7, #12]
 800d558:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800d55c:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 800d55e:	697b      	ldr	r3, [r7, #20]
 800d560:	2b00      	cmp	r3, #0
 800d562:	d101      	bne.n	800d568 <USBD_CDC_SetTxBuffer+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 800d564:	2303      	movs	r3, #3
 800d566:	e008      	b.n	800d57a <USBD_CDC_SetTxBuffer+0x30>
  }

  hcdc->TxBuffer = pbuff;
 800d568:	697b      	ldr	r3, [r7, #20]
 800d56a:	68ba      	ldr	r2, [r7, #8]
 800d56c:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 800d570:	697b      	ldr	r3, [r7, #20]
 800d572:	687a      	ldr	r2, [r7, #4]
 800d574:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 800d578:	2300      	movs	r3, #0
}
 800d57a:	4618      	mov	r0, r3
 800d57c:	371c      	adds	r7, #28
 800d57e:	46bd      	mov	sp, r7
 800d580:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d584:	4770      	bx	lr

0800d586 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 800d586:	b480      	push	{r7}
 800d588:	b085      	sub	sp, #20
 800d58a:	af00      	add	r7, sp, #0
 800d58c:	6078      	str	r0, [r7, #4]
 800d58e:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800d590:	687b      	ldr	r3, [r7, #4]
 800d592:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800d596:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800d598:	68fb      	ldr	r3, [r7, #12]
 800d59a:	2b00      	cmp	r3, #0
 800d59c:	d101      	bne.n	800d5a2 <USBD_CDC_SetRxBuffer+0x1c>
  {
    return (uint8_t)USBD_FAIL;
 800d59e:	2303      	movs	r3, #3
 800d5a0:	e004      	b.n	800d5ac <USBD_CDC_SetRxBuffer+0x26>
  }

  hcdc->RxBuffer = pbuff;
 800d5a2:	68fb      	ldr	r3, [r7, #12]
 800d5a4:	683a      	ldr	r2, [r7, #0]
 800d5a6:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 800d5aa:	2300      	movs	r3, #0
}
 800d5ac:	4618      	mov	r0, r3
 800d5ae:	3714      	adds	r7, #20
 800d5b0:	46bd      	mov	sp, r7
 800d5b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d5b6:	4770      	bx	lr

0800d5b8 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800d5b8:	b580      	push	{r7, lr}
 800d5ba:	b084      	sub	sp, #16
 800d5bc:	af00      	add	r7, sp, #0
 800d5be:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800d5c0:	687b      	ldr	r3, [r7, #4]
 800d5c2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800d5c6:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800d5c8:	687b      	ldr	r3, [r7, #4]
 800d5ca:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800d5ce:	2b00      	cmp	r3, #0
 800d5d0:	d101      	bne.n	800d5d6 <USBD_CDC_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 800d5d2:	2303      	movs	r3, #3
 800d5d4:	e016      	b.n	800d604 <USBD_CDC_ReceivePacket+0x4c>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800d5d6:	687b      	ldr	r3, [r7, #4]
 800d5d8:	7c1b      	ldrb	r3, [r3, #16]
 800d5da:	2b00      	cmp	r3, #0
 800d5dc:	d109      	bne.n	800d5f2 <USBD_CDC_ReceivePacket+0x3a>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800d5de:	68fb      	ldr	r3, [r7, #12]
 800d5e0:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800d5e4:	f44f 7300 	mov.w	r3, #512	; 0x200
 800d5e8:	2101      	movs	r1, #1
 800d5ea:	6878      	ldr	r0, [r7, #4]
 800d5ec:	f004 fe3c 	bl	8012268 <USBD_LL_PrepareReceive>
 800d5f0:	e007      	b.n	800d602 <USBD_CDC_ReceivePacket+0x4a>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800d5f2:	68fb      	ldr	r3, [r7, #12]
 800d5f4:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800d5f8:	2340      	movs	r3, #64	; 0x40
 800d5fa:	2101      	movs	r1, #1
 800d5fc:	6878      	ldr	r0, [r7, #4]
 800d5fe:	f004 fe33 	bl	8012268 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800d602:	2300      	movs	r3, #0
}
 800d604:	4618      	mov	r0, r3
 800d606:	3710      	adds	r7, #16
 800d608:	46bd      	mov	sp, r7
 800d60a:	bd80      	pop	{r7, pc}

0800d60c <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800d60c:	b580      	push	{r7, lr}
 800d60e:	b086      	sub	sp, #24
 800d610:	af00      	add	r7, sp, #0
 800d612:	60f8      	str	r0, [r7, #12]
 800d614:	60b9      	str	r1, [r7, #8]
 800d616:	4613      	mov	r3, r2
 800d618:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800d61a:	68fb      	ldr	r3, [r7, #12]
 800d61c:	2b00      	cmp	r3, #0
 800d61e:	d101      	bne.n	800d624 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 800d620:	2303      	movs	r3, #3
 800d622:	e01f      	b.n	800d664 <USBD_Init+0x58>
  }

  /* Unlink previous class resources */
  pdev->pClass = NULL;
 800d624:	68fb      	ldr	r3, [r7, #12]
 800d626:	2200      	movs	r2, #0
 800d628:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData = NULL;
 800d62c:	68fb      	ldr	r3, [r7, #12]
 800d62e:	2200      	movs	r2, #0
 800d630:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0
  pdev->pConfDesc = NULL;
 800d634:	68fb      	ldr	r3, [r7, #12]
 800d636:	2200      	movs	r2, #0
 800d638:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800d63c:	68bb      	ldr	r3, [r7, #8]
 800d63e:	2b00      	cmp	r3, #0
 800d640:	d003      	beq.n	800d64a <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800d642:	68fb      	ldr	r3, [r7, #12]
 800d644:	68ba      	ldr	r2, [r7, #8]
 800d646:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800d64a:	68fb      	ldr	r3, [r7, #12]
 800d64c:	2201      	movs	r2, #1
 800d64e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 800d652:	68fb      	ldr	r3, [r7, #12]
 800d654:	79fa      	ldrb	r2, [r7, #7]
 800d656:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800d658:	68f8      	ldr	r0, [r7, #12]
 800d65a:	f004 fca9 	bl	8011fb0 <USBD_LL_Init>
 800d65e:	4603      	mov	r3, r0
 800d660:	75fb      	strb	r3, [r7, #23]

  return ret;
 800d662:	7dfb      	ldrb	r3, [r7, #23]
}
 800d664:	4618      	mov	r0, r3
 800d666:	3718      	adds	r7, #24
 800d668:	46bd      	mov	sp, r7
 800d66a:	bd80      	pop	{r7, pc}

0800d66c <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800d66c:	b580      	push	{r7, lr}
 800d66e:	b084      	sub	sp, #16
 800d670:	af00      	add	r7, sp, #0
 800d672:	6078      	str	r0, [r7, #4]
 800d674:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800d676:	2300      	movs	r3, #0
 800d678:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800d67a:	683b      	ldr	r3, [r7, #0]
 800d67c:	2b00      	cmp	r3, #0
 800d67e:	d101      	bne.n	800d684 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 800d680:	2303      	movs	r3, #3
 800d682:	e016      	b.n	800d6b2 <USBD_RegisterClass+0x46>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 800d684:	687b      	ldr	r3, [r7, #4]
 800d686:	683a      	ldr	r2, [r7, #0]
 800d688:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass->GetFSConfigDescriptor != NULL)
 800d68c:	687b      	ldr	r3, [r7, #4]
 800d68e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d692:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d694:	2b00      	cmp	r3, #0
 800d696:	d00b      	beq.n	800d6b0 <USBD_RegisterClass+0x44>
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 800d698:	687b      	ldr	r3, [r7, #4]
 800d69a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d69e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d6a0:	f107 020e 	add.w	r2, r7, #14
 800d6a4:	4610      	mov	r0, r2
 800d6a6:	4798      	blx	r3
 800d6a8:	4602      	mov	r2, r0
 800d6aa:	687b      	ldr	r3, [r7, #4]
 800d6ac:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }
#endif /* USE_USB_FS */

  return USBD_OK;
 800d6b0:	2300      	movs	r3, #0
}
 800d6b2:	4618      	mov	r0, r3
 800d6b4:	3710      	adds	r7, #16
 800d6b6:	46bd      	mov	sp, r7
 800d6b8:	bd80      	pop	{r7, pc}

0800d6ba <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800d6ba:	b580      	push	{r7, lr}
 800d6bc:	b082      	sub	sp, #8
 800d6be:	af00      	add	r7, sp, #0
 800d6c0:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800d6c2:	6878      	ldr	r0, [r7, #4]
 800d6c4:	f004 fcc6 	bl	8012054 <USBD_LL_Start>
 800d6c8:	4603      	mov	r3, r0
}
 800d6ca:	4618      	mov	r0, r3
 800d6cc:	3708      	adds	r7, #8
 800d6ce:	46bd      	mov	sp, r7
 800d6d0:	bd80      	pop	{r7, pc}

0800d6d2 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 800d6d2:	b480      	push	{r7}
 800d6d4:	b083      	sub	sp, #12
 800d6d6:	af00      	add	r7, sp, #0
 800d6d8:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800d6da:	2300      	movs	r3, #0
}
 800d6dc:	4618      	mov	r0, r3
 800d6de:	370c      	adds	r7, #12
 800d6e0:	46bd      	mov	sp, r7
 800d6e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d6e6:	4770      	bx	lr

0800d6e8 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800d6e8:	b580      	push	{r7, lr}
 800d6ea:	b084      	sub	sp, #16
 800d6ec:	af00      	add	r7, sp, #0
 800d6ee:	6078      	str	r0, [r7, #4]
 800d6f0:	460b      	mov	r3, r1
 800d6f2:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 800d6f4:	2303      	movs	r3, #3
 800d6f6:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 800d6f8:	687b      	ldr	r3, [r7, #4]
 800d6fa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d6fe:	2b00      	cmp	r3, #0
 800d700:	d009      	beq.n	800d716 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 800d702:	687b      	ldr	r3, [r7, #4]
 800d704:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d708:	681b      	ldr	r3, [r3, #0]
 800d70a:	78fa      	ldrb	r2, [r7, #3]
 800d70c:	4611      	mov	r1, r2
 800d70e:	6878      	ldr	r0, [r7, #4]
 800d710:	4798      	blx	r3
 800d712:	4603      	mov	r3, r0
 800d714:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 800d716:	7bfb      	ldrb	r3, [r7, #15]
}
 800d718:	4618      	mov	r0, r3
 800d71a:	3710      	adds	r7, #16
 800d71c:	46bd      	mov	sp, r7
 800d71e:	bd80      	pop	{r7, pc}

0800d720 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800d720:	b580      	push	{r7, lr}
 800d722:	b082      	sub	sp, #8
 800d724:	af00      	add	r7, sp, #0
 800d726:	6078      	str	r0, [r7, #4]
 800d728:	460b      	mov	r3, r1
 800d72a:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 800d72c:	687b      	ldr	r3, [r7, #4]
 800d72e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d732:	2b00      	cmp	r3, #0
 800d734:	d007      	beq.n	800d746 <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 800d736:	687b      	ldr	r3, [r7, #4]
 800d738:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d73c:	685b      	ldr	r3, [r3, #4]
 800d73e:	78fa      	ldrb	r2, [r7, #3]
 800d740:	4611      	mov	r1, r2
 800d742:	6878      	ldr	r0, [r7, #4]
 800d744:	4798      	blx	r3
  }

  return USBD_OK;
 800d746:	2300      	movs	r3, #0
}
 800d748:	4618      	mov	r0, r3
 800d74a:	3708      	adds	r7, #8
 800d74c:	46bd      	mov	sp, r7
 800d74e:	bd80      	pop	{r7, pc}

0800d750 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800d750:	b580      	push	{r7, lr}
 800d752:	b084      	sub	sp, #16
 800d754:	af00      	add	r7, sp, #0
 800d756:	6078      	str	r0, [r7, #4]
 800d758:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800d75a:	687b      	ldr	r3, [r7, #4]
 800d75c:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800d760:	6839      	ldr	r1, [r7, #0]
 800d762:	4618      	mov	r0, r3
 800d764:	f000 ff90 	bl	800e688 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800d768:	687b      	ldr	r3, [r7, #4]
 800d76a:	2201      	movs	r2, #1
 800d76c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800d770:	687b      	ldr	r3, [r7, #4]
 800d772:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 800d776:	461a      	mov	r2, r3
 800d778:	687b      	ldr	r3, [r7, #4]
 800d77a:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800d77e:	687b      	ldr	r3, [r7, #4]
 800d780:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800d784:	f003 031f 	and.w	r3, r3, #31
 800d788:	2b02      	cmp	r3, #2
 800d78a:	d01a      	beq.n	800d7c2 <USBD_LL_SetupStage+0x72>
 800d78c:	2b02      	cmp	r3, #2
 800d78e:	d822      	bhi.n	800d7d6 <USBD_LL_SetupStage+0x86>
 800d790:	2b00      	cmp	r3, #0
 800d792:	d002      	beq.n	800d79a <USBD_LL_SetupStage+0x4a>
 800d794:	2b01      	cmp	r3, #1
 800d796:	d00a      	beq.n	800d7ae <USBD_LL_SetupStage+0x5e>
 800d798:	e01d      	b.n	800d7d6 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800d79a:	687b      	ldr	r3, [r7, #4]
 800d79c:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800d7a0:	4619      	mov	r1, r3
 800d7a2:	6878      	ldr	r0, [r7, #4]
 800d7a4:	f000 fa62 	bl	800dc6c <USBD_StdDevReq>
 800d7a8:	4603      	mov	r3, r0
 800d7aa:	73fb      	strb	r3, [r7, #15]
      break;
 800d7ac:	e020      	b.n	800d7f0 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800d7ae:	687b      	ldr	r3, [r7, #4]
 800d7b0:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800d7b4:	4619      	mov	r1, r3
 800d7b6:	6878      	ldr	r0, [r7, #4]
 800d7b8:	f000 fac6 	bl	800dd48 <USBD_StdItfReq>
 800d7bc:	4603      	mov	r3, r0
 800d7be:	73fb      	strb	r3, [r7, #15]
      break;
 800d7c0:	e016      	b.n	800d7f0 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800d7c2:	687b      	ldr	r3, [r7, #4]
 800d7c4:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800d7c8:	4619      	mov	r1, r3
 800d7ca:	6878      	ldr	r0, [r7, #4]
 800d7cc:	f000 fb05 	bl	800ddda <USBD_StdEPReq>
 800d7d0:	4603      	mov	r3, r0
 800d7d2:	73fb      	strb	r3, [r7, #15]
      break;
 800d7d4:	e00c      	b.n	800d7f0 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800d7d6:	687b      	ldr	r3, [r7, #4]
 800d7d8:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800d7dc:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800d7e0:	b2db      	uxtb	r3, r3
 800d7e2:	4619      	mov	r1, r3
 800d7e4:	6878      	ldr	r0, [r7, #4]
 800d7e6:	f004 fc95 	bl	8012114 <USBD_LL_StallEP>
 800d7ea:	4603      	mov	r3, r0
 800d7ec:	73fb      	strb	r3, [r7, #15]
      break;
 800d7ee:	bf00      	nop
  }

  return ret;
 800d7f0:	7bfb      	ldrb	r3, [r7, #15]
}
 800d7f2:	4618      	mov	r0, r3
 800d7f4:	3710      	adds	r7, #16
 800d7f6:	46bd      	mov	sp, r7
 800d7f8:	bd80      	pop	{r7, pc}

0800d7fa <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800d7fa:	b580      	push	{r7, lr}
 800d7fc:	b086      	sub	sp, #24
 800d7fe:	af00      	add	r7, sp, #0
 800d800:	60f8      	str	r0, [r7, #12]
 800d802:	460b      	mov	r3, r1
 800d804:	607a      	str	r2, [r7, #4]
 800d806:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800d808:	7afb      	ldrb	r3, [r7, #11]
 800d80a:	2b00      	cmp	r3, #0
 800d80c:	d138      	bne.n	800d880 <USBD_LL_DataOutStage+0x86>
  {
    pep = &pdev->ep_out[0];
 800d80e:	68fb      	ldr	r3, [r7, #12]
 800d810:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800d814:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800d816:	68fb      	ldr	r3, [r7, #12]
 800d818:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800d81c:	2b03      	cmp	r3, #3
 800d81e:	d14a      	bne.n	800d8b6 <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 800d820:	693b      	ldr	r3, [r7, #16]
 800d822:	689a      	ldr	r2, [r3, #8]
 800d824:	693b      	ldr	r3, [r7, #16]
 800d826:	68db      	ldr	r3, [r3, #12]
 800d828:	429a      	cmp	r2, r3
 800d82a:	d913      	bls.n	800d854 <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800d82c:	693b      	ldr	r3, [r7, #16]
 800d82e:	689a      	ldr	r2, [r3, #8]
 800d830:	693b      	ldr	r3, [r7, #16]
 800d832:	68db      	ldr	r3, [r3, #12]
 800d834:	1ad2      	subs	r2, r2, r3
 800d836:	693b      	ldr	r3, [r7, #16]
 800d838:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800d83a:	693b      	ldr	r3, [r7, #16]
 800d83c:	68da      	ldr	r2, [r3, #12]
 800d83e:	693b      	ldr	r3, [r7, #16]
 800d840:	689b      	ldr	r3, [r3, #8]
 800d842:	4293      	cmp	r3, r2
 800d844:	bf28      	it	cs
 800d846:	4613      	movcs	r3, r2
 800d848:	461a      	mov	r2, r3
 800d84a:	6879      	ldr	r1, [r7, #4]
 800d84c:	68f8      	ldr	r0, [r7, #12]
 800d84e:	f001 f80f 	bl	800e870 <USBD_CtlContinueRx>
 800d852:	e030      	b.n	800d8b6 <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d854:	68fb      	ldr	r3, [r7, #12]
 800d856:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d85a:	b2db      	uxtb	r3, r3
 800d85c:	2b03      	cmp	r3, #3
 800d85e:	d10b      	bne.n	800d878 <USBD_LL_DataOutStage+0x7e>
        {
          if (pdev->pClass->EP0_RxReady != NULL)
 800d860:	68fb      	ldr	r3, [r7, #12]
 800d862:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d866:	691b      	ldr	r3, [r3, #16]
 800d868:	2b00      	cmp	r3, #0
 800d86a:	d005      	beq.n	800d878 <USBD_LL_DataOutStage+0x7e>
          {
            pdev->pClass->EP0_RxReady(pdev);
 800d86c:	68fb      	ldr	r3, [r7, #12]
 800d86e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d872:	691b      	ldr	r3, [r3, #16]
 800d874:	68f8      	ldr	r0, [r7, #12]
 800d876:	4798      	blx	r3
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800d878:	68f8      	ldr	r0, [r7, #12]
 800d87a:	f001 f80a 	bl	800e892 <USBD_CtlSendStatus>
 800d87e:	e01a      	b.n	800d8b6 <USBD_LL_DataOutStage+0xbc>
#endif
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d880:	68fb      	ldr	r3, [r7, #12]
 800d882:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d886:	b2db      	uxtb	r3, r3
 800d888:	2b03      	cmp	r3, #3
 800d88a:	d114      	bne.n	800d8b6 <USBD_LL_DataOutStage+0xbc>
    {
      if (pdev->pClass->DataOut != NULL)
 800d88c:	68fb      	ldr	r3, [r7, #12]
 800d88e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d892:	699b      	ldr	r3, [r3, #24]
 800d894:	2b00      	cmp	r3, #0
 800d896:	d00e      	beq.n	800d8b6 <USBD_LL_DataOutStage+0xbc>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 800d898:	68fb      	ldr	r3, [r7, #12]
 800d89a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d89e:	699b      	ldr	r3, [r3, #24]
 800d8a0:	7afa      	ldrb	r2, [r7, #11]
 800d8a2:	4611      	mov	r1, r2
 800d8a4:	68f8      	ldr	r0, [r7, #12]
 800d8a6:	4798      	blx	r3
 800d8a8:	4603      	mov	r3, r0
 800d8aa:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 800d8ac:	7dfb      	ldrb	r3, [r7, #23]
 800d8ae:	2b00      	cmp	r3, #0
 800d8b0:	d001      	beq.n	800d8b6 <USBD_LL_DataOutStage+0xbc>
        {
          return ret;
 800d8b2:	7dfb      	ldrb	r3, [r7, #23]
 800d8b4:	e000      	b.n	800d8b8 <USBD_LL_DataOutStage+0xbe>
        }
      }
    }
  }

  return USBD_OK;
 800d8b6:	2300      	movs	r3, #0
}
 800d8b8:	4618      	mov	r0, r3
 800d8ba:	3718      	adds	r7, #24
 800d8bc:	46bd      	mov	sp, r7
 800d8be:	bd80      	pop	{r7, pc}

0800d8c0 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800d8c0:	b580      	push	{r7, lr}
 800d8c2:	b086      	sub	sp, #24
 800d8c4:	af00      	add	r7, sp, #0
 800d8c6:	60f8      	str	r0, [r7, #12]
 800d8c8:	460b      	mov	r3, r1
 800d8ca:	607a      	str	r2, [r7, #4]
 800d8cc:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800d8ce:	7afb      	ldrb	r3, [r7, #11]
 800d8d0:	2b00      	cmp	r3, #0
 800d8d2:	d16b      	bne.n	800d9ac <USBD_LL_DataInStage+0xec>
  {
    pep = &pdev->ep_in[0];
 800d8d4:	68fb      	ldr	r3, [r7, #12]
 800d8d6:	3314      	adds	r3, #20
 800d8d8:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800d8da:	68fb      	ldr	r3, [r7, #12]
 800d8dc:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800d8e0:	2b02      	cmp	r3, #2
 800d8e2:	d156      	bne.n	800d992 <USBD_LL_DataInStage+0xd2>
    {
      if (pep->rem_length > pep->maxpacket)
 800d8e4:	693b      	ldr	r3, [r7, #16]
 800d8e6:	689a      	ldr	r2, [r3, #8]
 800d8e8:	693b      	ldr	r3, [r7, #16]
 800d8ea:	68db      	ldr	r3, [r3, #12]
 800d8ec:	429a      	cmp	r2, r3
 800d8ee:	d914      	bls.n	800d91a <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800d8f0:	693b      	ldr	r3, [r7, #16]
 800d8f2:	689a      	ldr	r2, [r3, #8]
 800d8f4:	693b      	ldr	r3, [r7, #16]
 800d8f6:	68db      	ldr	r3, [r3, #12]
 800d8f8:	1ad2      	subs	r2, r2, r3
 800d8fa:	693b      	ldr	r3, [r7, #16]
 800d8fc:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800d8fe:	693b      	ldr	r3, [r7, #16]
 800d900:	689b      	ldr	r3, [r3, #8]
 800d902:	461a      	mov	r2, r3
 800d904:	6879      	ldr	r1, [r7, #4]
 800d906:	68f8      	ldr	r0, [r7, #12]
 800d908:	f000 ff84 	bl	800e814 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800d90c:	2300      	movs	r3, #0
 800d90e:	2200      	movs	r2, #0
 800d910:	2100      	movs	r1, #0
 800d912:	68f8      	ldr	r0, [r7, #12]
 800d914:	f004 fca8 	bl	8012268 <USBD_LL_PrepareReceive>
 800d918:	e03b      	b.n	800d992 <USBD_LL_DataInStage+0xd2>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800d91a:	693b      	ldr	r3, [r7, #16]
 800d91c:	68da      	ldr	r2, [r3, #12]
 800d91e:	693b      	ldr	r3, [r7, #16]
 800d920:	689b      	ldr	r3, [r3, #8]
 800d922:	429a      	cmp	r2, r3
 800d924:	d11c      	bne.n	800d960 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800d926:	693b      	ldr	r3, [r7, #16]
 800d928:	685a      	ldr	r2, [r3, #4]
 800d92a:	693b      	ldr	r3, [r7, #16]
 800d92c:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800d92e:	429a      	cmp	r2, r3
 800d930:	d316      	bcc.n	800d960 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800d932:	693b      	ldr	r3, [r7, #16]
 800d934:	685a      	ldr	r2, [r3, #4]
 800d936:	68fb      	ldr	r3, [r7, #12]
 800d938:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800d93c:	429a      	cmp	r2, r3
 800d93e:	d20f      	bcs.n	800d960 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800d940:	2200      	movs	r2, #0
 800d942:	2100      	movs	r1, #0
 800d944:	68f8      	ldr	r0, [r7, #12]
 800d946:	f000 ff65 	bl	800e814 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800d94a:	68fb      	ldr	r3, [r7, #12]
 800d94c:	2200      	movs	r2, #0
 800d94e:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800d952:	2300      	movs	r3, #0
 800d954:	2200      	movs	r2, #0
 800d956:	2100      	movs	r1, #0
 800d958:	68f8      	ldr	r0, [r7, #12]
 800d95a:	f004 fc85 	bl	8012268 <USBD_LL_PrepareReceive>
 800d95e:	e018      	b.n	800d992 <USBD_LL_DataInStage+0xd2>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d960:	68fb      	ldr	r3, [r7, #12]
 800d962:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d966:	b2db      	uxtb	r3, r3
 800d968:	2b03      	cmp	r3, #3
 800d96a:	d10b      	bne.n	800d984 <USBD_LL_DataInStage+0xc4>
          {
            if (pdev->pClass->EP0_TxSent != NULL)
 800d96c:	68fb      	ldr	r3, [r7, #12]
 800d96e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d972:	68db      	ldr	r3, [r3, #12]
 800d974:	2b00      	cmp	r3, #0
 800d976:	d005      	beq.n	800d984 <USBD_LL_DataInStage+0xc4>
            {
              pdev->pClass->EP0_TxSent(pdev);
 800d978:	68fb      	ldr	r3, [r7, #12]
 800d97a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d97e:	68db      	ldr	r3, [r3, #12]
 800d980:	68f8      	ldr	r0, [r7, #12]
 800d982:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800d984:	2180      	movs	r1, #128	; 0x80
 800d986:	68f8      	ldr	r0, [r7, #12]
 800d988:	f004 fbc4 	bl	8012114 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800d98c:	68f8      	ldr	r0, [r7, #12]
 800d98e:	f000 ff93 	bl	800e8b8 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 800d992:	68fb      	ldr	r3, [r7, #12]
 800d994:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800d998:	2b01      	cmp	r3, #1
 800d99a:	d122      	bne.n	800d9e2 <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 800d99c:	68f8      	ldr	r0, [r7, #12]
 800d99e:	f7ff fe98 	bl	800d6d2 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800d9a2:	68fb      	ldr	r3, [r7, #12]
 800d9a4:	2200      	movs	r2, #0
 800d9a6:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 800d9aa:	e01a      	b.n	800d9e2 <USBD_LL_DataInStage+0x122>
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d9ac:	68fb      	ldr	r3, [r7, #12]
 800d9ae:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d9b2:	b2db      	uxtb	r3, r3
 800d9b4:	2b03      	cmp	r3, #3
 800d9b6:	d114      	bne.n	800d9e2 <USBD_LL_DataInStage+0x122>
    {
      if (pdev->pClass->DataIn != NULL)
 800d9b8:	68fb      	ldr	r3, [r7, #12]
 800d9ba:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d9be:	695b      	ldr	r3, [r3, #20]
 800d9c0:	2b00      	cmp	r3, #0
 800d9c2:	d00e      	beq.n	800d9e2 <USBD_LL_DataInStage+0x122>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 800d9c4:	68fb      	ldr	r3, [r7, #12]
 800d9c6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d9ca:	695b      	ldr	r3, [r3, #20]
 800d9cc:	7afa      	ldrb	r2, [r7, #11]
 800d9ce:	4611      	mov	r1, r2
 800d9d0:	68f8      	ldr	r0, [r7, #12]
 800d9d2:	4798      	blx	r3
 800d9d4:	4603      	mov	r3, r0
 800d9d6:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 800d9d8:	7dfb      	ldrb	r3, [r7, #23]
 800d9da:	2b00      	cmp	r3, #0
 800d9dc:	d001      	beq.n	800d9e2 <USBD_LL_DataInStage+0x122>
        {
          return ret;
 800d9de:	7dfb      	ldrb	r3, [r7, #23]
 800d9e0:	e000      	b.n	800d9e4 <USBD_LL_DataInStage+0x124>
        }
      }
    }
  }

  return USBD_OK;
 800d9e2:	2300      	movs	r3, #0
}
 800d9e4:	4618      	mov	r0, r3
 800d9e6:	3718      	adds	r7, #24
 800d9e8:	46bd      	mov	sp, r7
 800d9ea:	bd80      	pop	{r7, pc}

0800d9ec <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800d9ec:	b580      	push	{r7, lr}
 800d9ee:	b082      	sub	sp, #8
 800d9f0:	af00      	add	r7, sp, #0
 800d9f2:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800d9f4:	687b      	ldr	r3, [r7, #4]
 800d9f6:	2201      	movs	r2, #1
 800d9f8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800d9fc:	687b      	ldr	r3, [r7, #4]
 800d9fe:	2200      	movs	r2, #0
 800da00:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800da04:	687b      	ldr	r3, [r7, #4]
 800da06:	2200      	movs	r2, #0
 800da08:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800da0a:	687b      	ldr	r3, [r7, #4]
 800da0c:	2200      	movs	r2, #0
 800da0e:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClass == NULL)
 800da12:	687b      	ldr	r3, [r7, #4]
 800da14:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800da18:	2b00      	cmp	r3, #0
 800da1a:	d101      	bne.n	800da20 <USBD_LL_Reset+0x34>
  {
    return USBD_FAIL;
 800da1c:	2303      	movs	r3, #3
 800da1e:	e02f      	b.n	800da80 <USBD_LL_Reset+0x94>
  }

  if (pdev->pClassData != NULL)
 800da20:	687b      	ldr	r3, [r7, #4]
 800da22:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800da26:	2b00      	cmp	r3, #0
 800da28:	d00f      	beq.n	800da4a <USBD_LL_Reset+0x5e>
  {
    if (pdev->pClass->DeInit != NULL)
 800da2a:	687b      	ldr	r3, [r7, #4]
 800da2c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800da30:	685b      	ldr	r3, [r3, #4]
 800da32:	2b00      	cmp	r3, #0
 800da34:	d009      	beq.n	800da4a <USBD_LL_Reset+0x5e>
    {
      (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800da36:	687b      	ldr	r3, [r7, #4]
 800da38:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800da3c:	685b      	ldr	r3, [r3, #4]
 800da3e:	687a      	ldr	r2, [r7, #4]
 800da40:	6852      	ldr	r2, [r2, #4]
 800da42:	b2d2      	uxtb	r2, r2
 800da44:	4611      	mov	r1, r2
 800da46:	6878      	ldr	r0, [r7, #4]
 800da48:	4798      	blx	r3
    }
  }

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800da4a:	2340      	movs	r3, #64	; 0x40
 800da4c:	2200      	movs	r2, #0
 800da4e:	2100      	movs	r1, #0
 800da50:	6878      	ldr	r0, [r7, #4]
 800da52:	f004 fb1a 	bl	801208a <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800da56:	687b      	ldr	r3, [r7, #4]
 800da58:	2201      	movs	r2, #1
 800da5a:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800da5e:	687b      	ldr	r3, [r7, #4]
 800da60:	2240      	movs	r2, #64	; 0x40
 800da62:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800da66:	2340      	movs	r3, #64	; 0x40
 800da68:	2200      	movs	r2, #0
 800da6a:	2180      	movs	r1, #128	; 0x80
 800da6c:	6878      	ldr	r0, [r7, #4]
 800da6e:	f004 fb0c 	bl	801208a <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800da72:	687b      	ldr	r3, [r7, #4]
 800da74:	2201      	movs	r2, #1
 800da76:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800da78:	687b      	ldr	r3, [r7, #4]
 800da7a:	2240      	movs	r2, #64	; 0x40
 800da7c:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 800da7e:	2300      	movs	r3, #0
}
 800da80:	4618      	mov	r0, r3
 800da82:	3708      	adds	r7, #8
 800da84:	46bd      	mov	sp, r7
 800da86:	bd80      	pop	{r7, pc}

0800da88 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800da88:	b480      	push	{r7}
 800da8a:	b083      	sub	sp, #12
 800da8c:	af00      	add	r7, sp, #0
 800da8e:	6078      	str	r0, [r7, #4]
 800da90:	460b      	mov	r3, r1
 800da92:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800da94:	687b      	ldr	r3, [r7, #4]
 800da96:	78fa      	ldrb	r2, [r7, #3]
 800da98:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800da9a:	2300      	movs	r3, #0
}
 800da9c:	4618      	mov	r0, r3
 800da9e:	370c      	adds	r7, #12
 800daa0:	46bd      	mov	sp, r7
 800daa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800daa6:	4770      	bx	lr

0800daa8 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800daa8:	b480      	push	{r7}
 800daaa:	b083      	sub	sp, #12
 800daac:	af00      	add	r7, sp, #0
 800daae:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 800dab0:	687b      	ldr	r3, [r7, #4]
 800dab2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800dab6:	b2da      	uxtb	r2, r3
 800dab8:	687b      	ldr	r3, [r7, #4]
 800daba:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 800dabe:	687b      	ldr	r3, [r7, #4]
 800dac0:	2204      	movs	r2, #4
 800dac2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800dac6:	2300      	movs	r3, #0
}
 800dac8:	4618      	mov	r0, r3
 800daca:	370c      	adds	r7, #12
 800dacc:	46bd      	mov	sp, r7
 800dace:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dad2:	4770      	bx	lr

0800dad4 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800dad4:	b480      	push	{r7}
 800dad6:	b083      	sub	sp, #12
 800dad8:	af00      	add	r7, sp, #0
 800dada:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800dadc:	687b      	ldr	r3, [r7, #4]
 800dade:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800dae2:	b2db      	uxtb	r3, r3
 800dae4:	2b04      	cmp	r3, #4
 800dae6:	d106      	bne.n	800daf6 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800dae8:	687b      	ldr	r3, [r7, #4]
 800daea:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 800daee:	b2da      	uxtb	r2, r3
 800daf0:	687b      	ldr	r3, [r7, #4]
 800daf2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800daf6:	2300      	movs	r3, #0
}
 800daf8:	4618      	mov	r0, r3
 800dafa:	370c      	adds	r7, #12
 800dafc:	46bd      	mov	sp, r7
 800dafe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db02:	4770      	bx	lr

0800db04 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800db04:	b580      	push	{r7, lr}
 800db06:	b082      	sub	sp, #8
 800db08:	af00      	add	r7, sp, #0
 800db0a:	6078      	str	r0, [r7, #4]
  if (pdev->pClass == NULL)
 800db0c:	687b      	ldr	r3, [r7, #4]
 800db0e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800db12:	2b00      	cmp	r3, #0
 800db14:	d101      	bne.n	800db1a <USBD_LL_SOF+0x16>
  {
    return USBD_FAIL;
 800db16:	2303      	movs	r3, #3
 800db18:	e012      	b.n	800db40 <USBD_LL_SOF+0x3c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800db1a:	687b      	ldr	r3, [r7, #4]
 800db1c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800db20:	b2db      	uxtb	r3, r3
 800db22:	2b03      	cmp	r3, #3
 800db24:	d10b      	bne.n	800db3e <USBD_LL_SOF+0x3a>
  {
    if (pdev->pClass->SOF != NULL)
 800db26:	687b      	ldr	r3, [r7, #4]
 800db28:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800db2c:	69db      	ldr	r3, [r3, #28]
 800db2e:	2b00      	cmp	r3, #0
 800db30:	d005      	beq.n	800db3e <USBD_LL_SOF+0x3a>
    {
      (void)pdev->pClass->SOF(pdev);
 800db32:	687b      	ldr	r3, [r7, #4]
 800db34:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800db38:	69db      	ldr	r3, [r3, #28]
 800db3a:	6878      	ldr	r0, [r7, #4]
 800db3c:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800db3e:	2300      	movs	r3, #0
}
 800db40:	4618      	mov	r0, r3
 800db42:	3708      	adds	r7, #8
 800db44:	46bd      	mov	sp, r7
 800db46:	bd80      	pop	{r7, pc}

0800db48 <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800db48:	b580      	push	{r7, lr}
 800db4a:	b082      	sub	sp, #8
 800db4c:	af00      	add	r7, sp, #0
 800db4e:	6078      	str	r0, [r7, #4]
 800db50:	460b      	mov	r3, r1
 800db52:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 800db54:	687b      	ldr	r3, [r7, #4]
 800db56:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800db5a:	2b00      	cmp	r3, #0
 800db5c:	d101      	bne.n	800db62 <USBD_LL_IsoINIncomplete+0x1a>
  {
    return USBD_FAIL;
 800db5e:	2303      	movs	r3, #3
 800db60:	e014      	b.n	800db8c <USBD_LL_IsoINIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800db62:	687b      	ldr	r3, [r7, #4]
 800db64:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800db68:	b2db      	uxtb	r3, r3
 800db6a:	2b03      	cmp	r3, #3
 800db6c:	d10d      	bne.n	800db8a <USBD_LL_IsoINIncomplete+0x42>
  {
    if (pdev->pClass->IsoINIncomplete != NULL)
 800db6e:	687b      	ldr	r3, [r7, #4]
 800db70:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800db74:	6a1b      	ldr	r3, [r3, #32]
 800db76:	2b00      	cmp	r3, #0
 800db78:	d007      	beq.n	800db8a <USBD_LL_IsoINIncomplete+0x42>
    {
      (void)pdev->pClass->IsoINIncomplete(pdev, epnum);
 800db7a:	687b      	ldr	r3, [r7, #4]
 800db7c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800db80:	6a1b      	ldr	r3, [r3, #32]
 800db82:	78fa      	ldrb	r2, [r7, #3]
 800db84:	4611      	mov	r1, r2
 800db86:	6878      	ldr	r0, [r7, #4]
 800db88:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800db8a:	2300      	movs	r3, #0
}
 800db8c:	4618      	mov	r0, r3
 800db8e:	3708      	adds	r7, #8
 800db90:	46bd      	mov	sp, r7
 800db92:	bd80      	pop	{r7, pc}

0800db94 <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800db94:	b580      	push	{r7, lr}
 800db96:	b082      	sub	sp, #8
 800db98:	af00      	add	r7, sp, #0
 800db9a:	6078      	str	r0, [r7, #4]
 800db9c:	460b      	mov	r3, r1
 800db9e:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 800dba0:	687b      	ldr	r3, [r7, #4]
 800dba2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800dba6:	2b00      	cmp	r3, #0
 800dba8:	d101      	bne.n	800dbae <USBD_LL_IsoOUTIncomplete+0x1a>
  {
    return USBD_FAIL;
 800dbaa:	2303      	movs	r3, #3
 800dbac:	e014      	b.n	800dbd8 <USBD_LL_IsoOUTIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800dbae:	687b      	ldr	r3, [r7, #4]
 800dbb0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800dbb4:	b2db      	uxtb	r3, r3
 800dbb6:	2b03      	cmp	r3, #3
 800dbb8:	d10d      	bne.n	800dbd6 <USBD_LL_IsoOUTIncomplete+0x42>
  {
    if (pdev->pClass->IsoOUTIncomplete != NULL)
 800dbba:	687b      	ldr	r3, [r7, #4]
 800dbbc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800dbc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dbc2:	2b00      	cmp	r3, #0
 800dbc4:	d007      	beq.n	800dbd6 <USBD_LL_IsoOUTIncomplete+0x42>
    {
      (void)pdev->pClass->IsoOUTIncomplete(pdev, epnum);
 800dbc6:	687b      	ldr	r3, [r7, #4]
 800dbc8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800dbcc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dbce:	78fa      	ldrb	r2, [r7, #3]
 800dbd0:	4611      	mov	r1, r2
 800dbd2:	6878      	ldr	r0, [r7, #4]
 800dbd4:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800dbd6:	2300      	movs	r3, #0
}
 800dbd8:	4618      	mov	r0, r3
 800dbda:	3708      	adds	r7, #8
 800dbdc:	46bd      	mov	sp, r7
 800dbde:	bd80      	pop	{r7, pc}

0800dbe0 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800dbe0:	b480      	push	{r7}
 800dbe2:	b083      	sub	sp, #12
 800dbe4:	af00      	add	r7, sp, #0
 800dbe6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800dbe8:	2300      	movs	r3, #0
}
 800dbea:	4618      	mov	r0, r3
 800dbec:	370c      	adds	r7, #12
 800dbee:	46bd      	mov	sp, r7
 800dbf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dbf4:	4770      	bx	lr

0800dbf6 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800dbf6:	b580      	push	{r7, lr}
 800dbf8:	b082      	sub	sp, #8
 800dbfa:	af00      	add	r7, sp, #0
 800dbfc:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800dbfe:	687b      	ldr	r3, [r7, #4]
 800dc00:	2201      	movs	r2, #1
 800dc02:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  if (pdev->pClass != NULL)
 800dc06:	687b      	ldr	r3, [r7, #4]
 800dc08:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800dc0c:	2b00      	cmp	r3, #0
 800dc0e:	d009      	beq.n	800dc24 <USBD_LL_DevDisconnected+0x2e>
  {
    (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800dc10:	687b      	ldr	r3, [r7, #4]
 800dc12:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800dc16:	685b      	ldr	r3, [r3, #4]
 800dc18:	687a      	ldr	r2, [r7, #4]
 800dc1a:	6852      	ldr	r2, [r2, #4]
 800dc1c:	b2d2      	uxtb	r2, r2
 800dc1e:	4611      	mov	r1, r2
 800dc20:	6878      	ldr	r0, [r7, #4]
 800dc22:	4798      	blx	r3
  }

  return USBD_OK;
 800dc24:	2300      	movs	r3, #0
}
 800dc26:	4618      	mov	r0, r3
 800dc28:	3708      	adds	r7, #8
 800dc2a:	46bd      	mov	sp, r7
 800dc2c:	bd80      	pop	{r7, pc}

0800dc2e <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800dc2e:	b480      	push	{r7}
 800dc30:	b087      	sub	sp, #28
 800dc32:	af00      	add	r7, sp, #0
 800dc34:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 800dc36:	687b      	ldr	r3, [r7, #4]
 800dc38:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800dc3a:	697b      	ldr	r3, [r7, #20]
 800dc3c:	781b      	ldrb	r3, [r3, #0]
 800dc3e:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800dc40:	697b      	ldr	r3, [r7, #20]
 800dc42:	3301      	adds	r3, #1
 800dc44:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800dc46:	697b      	ldr	r3, [r7, #20]
 800dc48:	781b      	ldrb	r3, [r3, #0]
 800dc4a:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800dc4c:	8a3b      	ldrh	r3, [r7, #16]
 800dc4e:	021b      	lsls	r3, r3, #8
 800dc50:	b21a      	sxth	r2, r3
 800dc52:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800dc56:	4313      	orrs	r3, r2
 800dc58:	b21b      	sxth	r3, r3
 800dc5a:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800dc5c:	89fb      	ldrh	r3, [r7, #14]
}
 800dc5e:	4618      	mov	r0, r3
 800dc60:	371c      	adds	r7, #28
 800dc62:	46bd      	mov	sp, r7
 800dc64:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc68:	4770      	bx	lr
	...

0800dc6c <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800dc6c:	b580      	push	{r7, lr}
 800dc6e:	b084      	sub	sp, #16
 800dc70:	af00      	add	r7, sp, #0
 800dc72:	6078      	str	r0, [r7, #4]
 800dc74:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800dc76:	2300      	movs	r3, #0
 800dc78:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800dc7a:	683b      	ldr	r3, [r7, #0]
 800dc7c:	781b      	ldrb	r3, [r3, #0]
 800dc7e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800dc82:	2b40      	cmp	r3, #64	; 0x40
 800dc84:	d005      	beq.n	800dc92 <USBD_StdDevReq+0x26>
 800dc86:	2b40      	cmp	r3, #64	; 0x40
 800dc88:	d853      	bhi.n	800dd32 <USBD_StdDevReq+0xc6>
 800dc8a:	2b00      	cmp	r3, #0
 800dc8c:	d00b      	beq.n	800dca6 <USBD_StdDevReq+0x3a>
 800dc8e:	2b20      	cmp	r3, #32
 800dc90:	d14f      	bne.n	800dd32 <USBD_StdDevReq+0xc6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800dc92:	687b      	ldr	r3, [r7, #4]
 800dc94:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800dc98:	689b      	ldr	r3, [r3, #8]
 800dc9a:	6839      	ldr	r1, [r7, #0]
 800dc9c:	6878      	ldr	r0, [r7, #4]
 800dc9e:	4798      	blx	r3
 800dca0:	4603      	mov	r3, r0
 800dca2:	73fb      	strb	r3, [r7, #15]
      break;
 800dca4:	e04a      	b.n	800dd3c <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800dca6:	683b      	ldr	r3, [r7, #0]
 800dca8:	785b      	ldrb	r3, [r3, #1]
 800dcaa:	2b09      	cmp	r3, #9
 800dcac:	d83b      	bhi.n	800dd26 <USBD_StdDevReq+0xba>
 800dcae:	a201      	add	r2, pc, #4	; (adr r2, 800dcb4 <USBD_StdDevReq+0x48>)
 800dcb0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dcb4:	0800dd09 	.word	0x0800dd09
 800dcb8:	0800dd1d 	.word	0x0800dd1d
 800dcbc:	0800dd27 	.word	0x0800dd27
 800dcc0:	0800dd13 	.word	0x0800dd13
 800dcc4:	0800dd27 	.word	0x0800dd27
 800dcc8:	0800dce7 	.word	0x0800dce7
 800dccc:	0800dcdd 	.word	0x0800dcdd
 800dcd0:	0800dd27 	.word	0x0800dd27
 800dcd4:	0800dcff 	.word	0x0800dcff
 800dcd8:	0800dcf1 	.word	0x0800dcf1
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800dcdc:	6839      	ldr	r1, [r7, #0]
 800dcde:	6878      	ldr	r0, [r7, #4]
 800dce0:	f000 f9de 	bl	800e0a0 <USBD_GetDescriptor>
          break;
 800dce4:	e024      	b.n	800dd30 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800dce6:	6839      	ldr	r1, [r7, #0]
 800dce8:	6878      	ldr	r0, [r7, #4]
 800dcea:	f000 fb43 	bl	800e374 <USBD_SetAddress>
          break;
 800dcee:	e01f      	b.n	800dd30 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800dcf0:	6839      	ldr	r1, [r7, #0]
 800dcf2:	6878      	ldr	r0, [r7, #4]
 800dcf4:	f000 fb82 	bl	800e3fc <USBD_SetConfig>
 800dcf8:	4603      	mov	r3, r0
 800dcfa:	73fb      	strb	r3, [r7, #15]
          break;
 800dcfc:	e018      	b.n	800dd30 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800dcfe:	6839      	ldr	r1, [r7, #0]
 800dd00:	6878      	ldr	r0, [r7, #4]
 800dd02:	f000 fc21 	bl	800e548 <USBD_GetConfig>
          break;
 800dd06:	e013      	b.n	800dd30 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800dd08:	6839      	ldr	r1, [r7, #0]
 800dd0a:	6878      	ldr	r0, [r7, #4]
 800dd0c:	f000 fc52 	bl	800e5b4 <USBD_GetStatus>
          break;
 800dd10:	e00e      	b.n	800dd30 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800dd12:	6839      	ldr	r1, [r7, #0]
 800dd14:	6878      	ldr	r0, [r7, #4]
 800dd16:	f000 fc81 	bl	800e61c <USBD_SetFeature>
          break;
 800dd1a:	e009      	b.n	800dd30 <USBD_StdDevReq+0xc4>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800dd1c:	6839      	ldr	r1, [r7, #0]
 800dd1e:	6878      	ldr	r0, [r7, #4]
 800dd20:	f000 fc90 	bl	800e644 <USBD_ClrFeature>
          break;
 800dd24:	e004      	b.n	800dd30 <USBD_StdDevReq+0xc4>

        default:
          USBD_CtlError(pdev, req);
 800dd26:	6839      	ldr	r1, [r7, #0]
 800dd28:	6878      	ldr	r0, [r7, #4]
 800dd2a:	f000 fce7 	bl	800e6fc <USBD_CtlError>
          break;
 800dd2e:	bf00      	nop
      }
      break;
 800dd30:	e004      	b.n	800dd3c <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 800dd32:	6839      	ldr	r1, [r7, #0]
 800dd34:	6878      	ldr	r0, [r7, #4]
 800dd36:	f000 fce1 	bl	800e6fc <USBD_CtlError>
      break;
 800dd3a:	bf00      	nop
  }

  return ret;
 800dd3c:	7bfb      	ldrb	r3, [r7, #15]
}
 800dd3e:	4618      	mov	r0, r3
 800dd40:	3710      	adds	r7, #16
 800dd42:	46bd      	mov	sp, r7
 800dd44:	bd80      	pop	{r7, pc}
 800dd46:	bf00      	nop

0800dd48 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800dd48:	b580      	push	{r7, lr}
 800dd4a:	b084      	sub	sp, #16
 800dd4c:	af00      	add	r7, sp, #0
 800dd4e:	6078      	str	r0, [r7, #4]
 800dd50:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800dd52:	2300      	movs	r3, #0
 800dd54:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800dd56:	683b      	ldr	r3, [r7, #0]
 800dd58:	781b      	ldrb	r3, [r3, #0]
 800dd5a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800dd5e:	2b40      	cmp	r3, #64	; 0x40
 800dd60:	d005      	beq.n	800dd6e <USBD_StdItfReq+0x26>
 800dd62:	2b40      	cmp	r3, #64	; 0x40
 800dd64:	d82f      	bhi.n	800ddc6 <USBD_StdItfReq+0x7e>
 800dd66:	2b00      	cmp	r3, #0
 800dd68:	d001      	beq.n	800dd6e <USBD_StdItfReq+0x26>
 800dd6a:	2b20      	cmp	r3, #32
 800dd6c:	d12b      	bne.n	800ddc6 <USBD_StdItfReq+0x7e>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800dd6e:	687b      	ldr	r3, [r7, #4]
 800dd70:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800dd74:	b2db      	uxtb	r3, r3
 800dd76:	3b01      	subs	r3, #1
 800dd78:	2b02      	cmp	r3, #2
 800dd7a:	d81d      	bhi.n	800ddb8 <USBD_StdItfReq+0x70>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800dd7c:	683b      	ldr	r3, [r7, #0]
 800dd7e:	889b      	ldrh	r3, [r3, #4]
 800dd80:	b2db      	uxtb	r3, r3
 800dd82:	2b01      	cmp	r3, #1
 800dd84:	d813      	bhi.n	800ddae <USBD_StdItfReq+0x66>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800dd86:	687b      	ldr	r3, [r7, #4]
 800dd88:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800dd8c:	689b      	ldr	r3, [r3, #8]
 800dd8e:	6839      	ldr	r1, [r7, #0]
 800dd90:	6878      	ldr	r0, [r7, #4]
 800dd92:	4798      	blx	r3
 800dd94:	4603      	mov	r3, r0
 800dd96:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800dd98:	683b      	ldr	r3, [r7, #0]
 800dd9a:	88db      	ldrh	r3, [r3, #6]
 800dd9c:	2b00      	cmp	r3, #0
 800dd9e:	d110      	bne.n	800ddc2 <USBD_StdItfReq+0x7a>
 800dda0:	7bfb      	ldrb	r3, [r7, #15]
 800dda2:	2b00      	cmp	r3, #0
 800dda4:	d10d      	bne.n	800ddc2 <USBD_StdItfReq+0x7a>
            {
              (void)USBD_CtlSendStatus(pdev);
 800dda6:	6878      	ldr	r0, [r7, #4]
 800dda8:	f000 fd73 	bl	800e892 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800ddac:	e009      	b.n	800ddc2 <USBD_StdItfReq+0x7a>
            USBD_CtlError(pdev, req);
 800ddae:	6839      	ldr	r1, [r7, #0]
 800ddb0:	6878      	ldr	r0, [r7, #4]
 800ddb2:	f000 fca3 	bl	800e6fc <USBD_CtlError>
          break;
 800ddb6:	e004      	b.n	800ddc2 <USBD_StdItfReq+0x7a>

        default:
          USBD_CtlError(pdev, req);
 800ddb8:	6839      	ldr	r1, [r7, #0]
 800ddba:	6878      	ldr	r0, [r7, #4]
 800ddbc:	f000 fc9e 	bl	800e6fc <USBD_CtlError>
          break;
 800ddc0:	e000      	b.n	800ddc4 <USBD_StdItfReq+0x7c>
          break;
 800ddc2:	bf00      	nop
      }
      break;
 800ddc4:	e004      	b.n	800ddd0 <USBD_StdItfReq+0x88>

    default:
      USBD_CtlError(pdev, req);
 800ddc6:	6839      	ldr	r1, [r7, #0]
 800ddc8:	6878      	ldr	r0, [r7, #4]
 800ddca:	f000 fc97 	bl	800e6fc <USBD_CtlError>
      break;
 800ddce:	bf00      	nop
  }

  return ret;
 800ddd0:	7bfb      	ldrb	r3, [r7, #15]
}
 800ddd2:	4618      	mov	r0, r3
 800ddd4:	3710      	adds	r7, #16
 800ddd6:	46bd      	mov	sp, r7
 800ddd8:	bd80      	pop	{r7, pc}

0800ddda <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ddda:	b580      	push	{r7, lr}
 800dddc:	b084      	sub	sp, #16
 800ddde:	af00      	add	r7, sp, #0
 800dde0:	6078      	str	r0, [r7, #4]
 800dde2:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 800dde4:	2300      	movs	r3, #0
 800dde6:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 800dde8:	683b      	ldr	r3, [r7, #0]
 800ddea:	889b      	ldrh	r3, [r3, #4]
 800ddec:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800ddee:	683b      	ldr	r3, [r7, #0]
 800ddf0:	781b      	ldrb	r3, [r3, #0]
 800ddf2:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800ddf6:	2b40      	cmp	r3, #64	; 0x40
 800ddf8:	d007      	beq.n	800de0a <USBD_StdEPReq+0x30>
 800ddfa:	2b40      	cmp	r3, #64	; 0x40
 800ddfc:	f200 8145 	bhi.w	800e08a <USBD_StdEPReq+0x2b0>
 800de00:	2b00      	cmp	r3, #0
 800de02:	d00c      	beq.n	800de1e <USBD_StdEPReq+0x44>
 800de04:	2b20      	cmp	r3, #32
 800de06:	f040 8140 	bne.w	800e08a <USBD_StdEPReq+0x2b0>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800de0a:	687b      	ldr	r3, [r7, #4]
 800de0c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800de10:	689b      	ldr	r3, [r3, #8]
 800de12:	6839      	ldr	r1, [r7, #0]
 800de14:	6878      	ldr	r0, [r7, #4]
 800de16:	4798      	blx	r3
 800de18:	4603      	mov	r3, r0
 800de1a:	73fb      	strb	r3, [r7, #15]
      break;
 800de1c:	e13a      	b.n	800e094 <USBD_StdEPReq+0x2ba>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800de1e:	683b      	ldr	r3, [r7, #0]
 800de20:	785b      	ldrb	r3, [r3, #1]
 800de22:	2b03      	cmp	r3, #3
 800de24:	d007      	beq.n	800de36 <USBD_StdEPReq+0x5c>
 800de26:	2b03      	cmp	r3, #3
 800de28:	f300 8129 	bgt.w	800e07e <USBD_StdEPReq+0x2a4>
 800de2c:	2b00      	cmp	r3, #0
 800de2e:	d07f      	beq.n	800df30 <USBD_StdEPReq+0x156>
 800de30:	2b01      	cmp	r3, #1
 800de32:	d03c      	beq.n	800deae <USBD_StdEPReq+0xd4>
 800de34:	e123      	b.n	800e07e <USBD_StdEPReq+0x2a4>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800de36:	687b      	ldr	r3, [r7, #4]
 800de38:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800de3c:	b2db      	uxtb	r3, r3
 800de3e:	2b02      	cmp	r3, #2
 800de40:	d002      	beq.n	800de48 <USBD_StdEPReq+0x6e>
 800de42:	2b03      	cmp	r3, #3
 800de44:	d016      	beq.n	800de74 <USBD_StdEPReq+0x9a>
 800de46:	e02c      	b.n	800dea2 <USBD_StdEPReq+0xc8>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800de48:	7bbb      	ldrb	r3, [r7, #14]
 800de4a:	2b00      	cmp	r3, #0
 800de4c:	d00d      	beq.n	800de6a <USBD_StdEPReq+0x90>
 800de4e:	7bbb      	ldrb	r3, [r7, #14]
 800de50:	2b80      	cmp	r3, #128	; 0x80
 800de52:	d00a      	beq.n	800de6a <USBD_StdEPReq+0x90>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800de54:	7bbb      	ldrb	r3, [r7, #14]
 800de56:	4619      	mov	r1, r3
 800de58:	6878      	ldr	r0, [r7, #4]
 800de5a:	f004 f95b 	bl	8012114 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800de5e:	2180      	movs	r1, #128	; 0x80
 800de60:	6878      	ldr	r0, [r7, #4]
 800de62:	f004 f957 	bl	8012114 <USBD_LL_StallEP>
 800de66:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800de68:	e020      	b.n	800deac <USBD_StdEPReq+0xd2>
                USBD_CtlError(pdev, req);
 800de6a:	6839      	ldr	r1, [r7, #0]
 800de6c:	6878      	ldr	r0, [r7, #4]
 800de6e:	f000 fc45 	bl	800e6fc <USBD_CtlError>
              break;
 800de72:	e01b      	b.n	800deac <USBD_StdEPReq+0xd2>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800de74:	683b      	ldr	r3, [r7, #0]
 800de76:	885b      	ldrh	r3, [r3, #2]
 800de78:	2b00      	cmp	r3, #0
 800de7a:	d10e      	bne.n	800de9a <USBD_StdEPReq+0xc0>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800de7c:	7bbb      	ldrb	r3, [r7, #14]
 800de7e:	2b00      	cmp	r3, #0
 800de80:	d00b      	beq.n	800de9a <USBD_StdEPReq+0xc0>
 800de82:	7bbb      	ldrb	r3, [r7, #14]
 800de84:	2b80      	cmp	r3, #128	; 0x80
 800de86:	d008      	beq.n	800de9a <USBD_StdEPReq+0xc0>
 800de88:	683b      	ldr	r3, [r7, #0]
 800de8a:	88db      	ldrh	r3, [r3, #6]
 800de8c:	2b00      	cmp	r3, #0
 800de8e:	d104      	bne.n	800de9a <USBD_StdEPReq+0xc0>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800de90:	7bbb      	ldrb	r3, [r7, #14]
 800de92:	4619      	mov	r1, r3
 800de94:	6878      	ldr	r0, [r7, #4]
 800de96:	f004 f93d 	bl	8012114 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800de9a:	6878      	ldr	r0, [r7, #4]
 800de9c:	f000 fcf9 	bl	800e892 <USBD_CtlSendStatus>

              break;
 800dea0:	e004      	b.n	800deac <USBD_StdEPReq+0xd2>

            default:
              USBD_CtlError(pdev, req);
 800dea2:	6839      	ldr	r1, [r7, #0]
 800dea4:	6878      	ldr	r0, [r7, #4]
 800dea6:	f000 fc29 	bl	800e6fc <USBD_CtlError>
              break;
 800deaa:	bf00      	nop
          }
          break;
 800deac:	e0ec      	b.n	800e088 <USBD_StdEPReq+0x2ae>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800deae:	687b      	ldr	r3, [r7, #4]
 800deb0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800deb4:	b2db      	uxtb	r3, r3
 800deb6:	2b02      	cmp	r3, #2
 800deb8:	d002      	beq.n	800dec0 <USBD_StdEPReq+0xe6>
 800deba:	2b03      	cmp	r3, #3
 800debc:	d016      	beq.n	800deec <USBD_StdEPReq+0x112>
 800debe:	e030      	b.n	800df22 <USBD_StdEPReq+0x148>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800dec0:	7bbb      	ldrb	r3, [r7, #14]
 800dec2:	2b00      	cmp	r3, #0
 800dec4:	d00d      	beq.n	800dee2 <USBD_StdEPReq+0x108>
 800dec6:	7bbb      	ldrb	r3, [r7, #14]
 800dec8:	2b80      	cmp	r3, #128	; 0x80
 800deca:	d00a      	beq.n	800dee2 <USBD_StdEPReq+0x108>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800decc:	7bbb      	ldrb	r3, [r7, #14]
 800dece:	4619      	mov	r1, r3
 800ded0:	6878      	ldr	r0, [r7, #4]
 800ded2:	f004 f91f 	bl	8012114 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800ded6:	2180      	movs	r1, #128	; 0x80
 800ded8:	6878      	ldr	r0, [r7, #4]
 800deda:	f004 f91b 	bl	8012114 <USBD_LL_StallEP>
 800dede:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800dee0:	e025      	b.n	800df2e <USBD_StdEPReq+0x154>
                USBD_CtlError(pdev, req);
 800dee2:	6839      	ldr	r1, [r7, #0]
 800dee4:	6878      	ldr	r0, [r7, #4]
 800dee6:	f000 fc09 	bl	800e6fc <USBD_CtlError>
              break;
 800deea:	e020      	b.n	800df2e <USBD_StdEPReq+0x154>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800deec:	683b      	ldr	r3, [r7, #0]
 800deee:	885b      	ldrh	r3, [r3, #2]
 800def0:	2b00      	cmp	r3, #0
 800def2:	d11b      	bne.n	800df2c <USBD_StdEPReq+0x152>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800def4:	7bbb      	ldrb	r3, [r7, #14]
 800def6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800defa:	2b00      	cmp	r3, #0
 800defc:	d004      	beq.n	800df08 <USBD_StdEPReq+0x12e>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800defe:	7bbb      	ldrb	r3, [r7, #14]
 800df00:	4619      	mov	r1, r3
 800df02:	6878      	ldr	r0, [r7, #4]
 800df04:	f004 f925 	bl	8012152 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800df08:	6878      	ldr	r0, [r7, #4]
 800df0a:	f000 fcc2 	bl	800e892 <USBD_CtlSendStatus>
                ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800df0e:	687b      	ldr	r3, [r7, #4]
 800df10:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800df14:	689b      	ldr	r3, [r3, #8]
 800df16:	6839      	ldr	r1, [r7, #0]
 800df18:	6878      	ldr	r0, [r7, #4]
 800df1a:	4798      	blx	r3
 800df1c:	4603      	mov	r3, r0
 800df1e:	73fb      	strb	r3, [r7, #15]
              }
              break;
 800df20:	e004      	b.n	800df2c <USBD_StdEPReq+0x152>

            default:
              USBD_CtlError(pdev, req);
 800df22:	6839      	ldr	r1, [r7, #0]
 800df24:	6878      	ldr	r0, [r7, #4]
 800df26:	f000 fbe9 	bl	800e6fc <USBD_CtlError>
              break;
 800df2a:	e000      	b.n	800df2e <USBD_StdEPReq+0x154>
              break;
 800df2c:	bf00      	nop
          }
          break;
 800df2e:	e0ab      	b.n	800e088 <USBD_StdEPReq+0x2ae>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800df30:	687b      	ldr	r3, [r7, #4]
 800df32:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800df36:	b2db      	uxtb	r3, r3
 800df38:	2b02      	cmp	r3, #2
 800df3a:	d002      	beq.n	800df42 <USBD_StdEPReq+0x168>
 800df3c:	2b03      	cmp	r3, #3
 800df3e:	d032      	beq.n	800dfa6 <USBD_StdEPReq+0x1cc>
 800df40:	e097      	b.n	800e072 <USBD_StdEPReq+0x298>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800df42:	7bbb      	ldrb	r3, [r7, #14]
 800df44:	2b00      	cmp	r3, #0
 800df46:	d007      	beq.n	800df58 <USBD_StdEPReq+0x17e>
 800df48:	7bbb      	ldrb	r3, [r7, #14]
 800df4a:	2b80      	cmp	r3, #128	; 0x80
 800df4c:	d004      	beq.n	800df58 <USBD_StdEPReq+0x17e>
              {
                USBD_CtlError(pdev, req);
 800df4e:	6839      	ldr	r1, [r7, #0]
 800df50:	6878      	ldr	r0, [r7, #4]
 800df52:	f000 fbd3 	bl	800e6fc <USBD_CtlError>
                break;
 800df56:	e091      	b.n	800e07c <USBD_StdEPReq+0x2a2>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800df58:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800df5c:	2b00      	cmp	r3, #0
 800df5e:	da0b      	bge.n	800df78 <USBD_StdEPReq+0x19e>
 800df60:	7bbb      	ldrb	r3, [r7, #14]
 800df62:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800df66:	4613      	mov	r3, r2
 800df68:	009b      	lsls	r3, r3, #2
 800df6a:	4413      	add	r3, r2
 800df6c:	009b      	lsls	r3, r3, #2
 800df6e:	3310      	adds	r3, #16
 800df70:	687a      	ldr	r2, [r7, #4]
 800df72:	4413      	add	r3, r2
 800df74:	3304      	adds	r3, #4
 800df76:	e00b      	b.n	800df90 <USBD_StdEPReq+0x1b6>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800df78:	7bbb      	ldrb	r3, [r7, #14]
 800df7a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800df7e:	4613      	mov	r3, r2
 800df80:	009b      	lsls	r3, r3, #2
 800df82:	4413      	add	r3, r2
 800df84:	009b      	lsls	r3, r3, #2
 800df86:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800df8a:	687a      	ldr	r2, [r7, #4]
 800df8c:	4413      	add	r3, r2
 800df8e:	3304      	adds	r3, #4
 800df90:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800df92:	68bb      	ldr	r3, [r7, #8]
 800df94:	2200      	movs	r2, #0
 800df96:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800df98:	68bb      	ldr	r3, [r7, #8]
 800df9a:	2202      	movs	r2, #2
 800df9c:	4619      	mov	r1, r3
 800df9e:	6878      	ldr	r0, [r7, #4]
 800dfa0:	f000 fc1d 	bl	800e7de <USBD_CtlSendData>
              break;
 800dfa4:	e06a      	b.n	800e07c <USBD_StdEPReq+0x2a2>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800dfa6:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800dfaa:	2b00      	cmp	r3, #0
 800dfac:	da11      	bge.n	800dfd2 <USBD_StdEPReq+0x1f8>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800dfae:	7bbb      	ldrb	r3, [r7, #14]
 800dfb0:	f003 020f 	and.w	r2, r3, #15
 800dfb4:	6879      	ldr	r1, [r7, #4]
 800dfb6:	4613      	mov	r3, r2
 800dfb8:	009b      	lsls	r3, r3, #2
 800dfba:	4413      	add	r3, r2
 800dfbc:	009b      	lsls	r3, r3, #2
 800dfbe:	440b      	add	r3, r1
 800dfc0:	3324      	adds	r3, #36	; 0x24
 800dfc2:	881b      	ldrh	r3, [r3, #0]
 800dfc4:	2b00      	cmp	r3, #0
 800dfc6:	d117      	bne.n	800dff8 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 800dfc8:	6839      	ldr	r1, [r7, #0]
 800dfca:	6878      	ldr	r0, [r7, #4]
 800dfcc:	f000 fb96 	bl	800e6fc <USBD_CtlError>
                  break;
 800dfd0:	e054      	b.n	800e07c <USBD_StdEPReq+0x2a2>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800dfd2:	7bbb      	ldrb	r3, [r7, #14]
 800dfd4:	f003 020f 	and.w	r2, r3, #15
 800dfd8:	6879      	ldr	r1, [r7, #4]
 800dfda:	4613      	mov	r3, r2
 800dfdc:	009b      	lsls	r3, r3, #2
 800dfde:	4413      	add	r3, r2
 800dfe0:	009b      	lsls	r3, r3, #2
 800dfe2:	440b      	add	r3, r1
 800dfe4:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800dfe8:	881b      	ldrh	r3, [r3, #0]
 800dfea:	2b00      	cmp	r3, #0
 800dfec:	d104      	bne.n	800dff8 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 800dfee:	6839      	ldr	r1, [r7, #0]
 800dff0:	6878      	ldr	r0, [r7, #4]
 800dff2:	f000 fb83 	bl	800e6fc <USBD_CtlError>
                  break;
 800dff6:	e041      	b.n	800e07c <USBD_StdEPReq+0x2a2>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800dff8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800dffc:	2b00      	cmp	r3, #0
 800dffe:	da0b      	bge.n	800e018 <USBD_StdEPReq+0x23e>
 800e000:	7bbb      	ldrb	r3, [r7, #14]
 800e002:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800e006:	4613      	mov	r3, r2
 800e008:	009b      	lsls	r3, r3, #2
 800e00a:	4413      	add	r3, r2
 800e00c:	009b      	lsls	r3, r3, #2
 800e00e:	3310      	adds	r3, #16
 800e010:	687a      	ldr	r2, [r7, #4]
 800e012:	4413      	add	r3, r2
 800e014:	3304      	adds	r3, #4
 800e016:	e00b      	b.n	800e030 <USBD_StdEPReq+0x256>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800e018:	7bbb      	ldrb	r3, [r7, #14]
 800e01a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800e01e:	4613      	mov	r3, r2
 800e020:	009b      	lsls	r3, r3, #2
 800e022:	4413      	add	r3, r2
 800e024:	009b      	lsls	r3, r3, #2
 800e026:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800e02a:	687a      	ldr	r2, [r7, #4]
 800e02c:	4413      	add	r3, r2
 800e02e:	3304      	adds	r3, #4
 800e030:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800e032:	7bbb      	ldrb	r3, [r7, #14]
 800e034:	2b00      	cmp	r3, #0
 800e036:	d002      	beq.n	800e03e <USBD_StdEPReq+0x264>
 800e038:	7bbb      	ldrb	r3, [r7, #14]
 800e03a:	2b80      	cmp	r3, #128	; 0x80
 800e03c:	d103      	bne.n	800e046 <USBD_StdEPReq+0x26c>
              {
                pep->status = 0x0000U;
 800e03e:	68bb      	ldr	r3, [r7, #8]
 800e040:	2200      	movs	r2, #0
 800e042:	601a      	str	r2, [r3, #0]
 800e044:	e00e      	b.n	800e064 <USBD_StdEPReq+0x28a>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800e046:	7bbb      	ldrb	r3, [r7, #14]
 800e048:	4619      	mov	r1, r3
 800e04a:	6878      	ldr	r0, [r7, #4]
 800e04c:	f004 f8a0 	bl	8012190 <USBD_LL_IsStallEP>
 800e050:	4603      	mov	r3, r0
 800e052:	2b00      	cmp	r3, #0
 800e054:	d003      	beq.n	800e05e <USBD_StdEPReq+0x284>
              {
                pep->status = 0x0001U;
 800e056:	68bb      	ldr	r3, [r7, #8]
 800e058:	2201      	movs	r2, #1
 800e05a:	601a      	str	r2, [r3, #0]
 800e05c:	e002      	b.n	800e064 <USBD_StdEPReq+0x28a>
              }
              else
              {
                pep->status = 0x0000U;
 800e05e:	68bb      	ldr	r3, [r7, #8]
 800e060:	2200      	movs	r2, #0
 800e062:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800e064:	68bb      	ldr	r3, [r7, #8]
 800e066:	2202      	movs	r2, #2
 800e068:	4619      	mov	r1, r3
 800e06a:	6878      	ldr	r0, [r7, #4]
 800e06c:	f000 fbb7 	bl	800e7de <USBD_CtlSendData>
              break;
 800e070:	e004      	b.n	800e07c <USBD_StdEPReq+0x2a2>

            default:
              USBD_CtlError(pdev, req);
 800e072:	6839      	ldr	r1, [r7, #0]
 800e074:	6878      	ldr	r0, [r7, #4]
 800e076:	f000 fb41 	bl	800e6fc <USBD_CtlError>
              break;
 800e07a:	bf00      	nop
          }
          break;
 800e07c:	e004      	b.n	800e088 <USBD_StdEPReq+0x2ae>

        default:
          USBD_CtlError(pdev, req);
 800e07e:	6839      	ldr	r1, [r7, #0]
 800e080:	6878      	ldr	r0, [r7, #4]
 800e082:	f000 fb3b 	bl	800e6fc <USBD_CtlError>
          break;
 800e086:	bf00      	nop
      }
      break;
 800e088:	e004      	b.n	800e094 <USBD_StdEPReq+0x2ba>

    default:
      USBD_CtlError(pdev, req);
 800e08a:	6839      	ldr	r1, [r7, #0]
 800e08c:	6878      	ldr	r0, [r7, #4]
 800e08e:	f000 fb35 	bl	800e6fc <USBD_CtlError>
      break;
 800e092:	bf00      	nop
  }

  return ret;
 800e094:	7bfb      	ldrb	r3, [r7, #15]
}
 800e096:	4618      	mov	r0, r3
 800e098:	3710      	adds	r7, #16
 800e09a:	46bd      	mov	sp, r7
 800e09c:	bd80      	pop	{r7, pc}
	...

0800e0a0 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800e0a0:	b580      	push	{r7, lr}
 800e0a2:	b084      	sub	sp, #16
 800e0a4:	af00      	add	r7, sp, #0
 800e0a6:	6078      	str	r0, [r7, #4]
 800e0a8:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800e0aa:	2300      	movs	r3, #0
 800e0ac:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800e0ae:	2300      	movs	r3, #0
 800e0b0:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800e0b2:	2300      	movs	r3, #0
 800e0b4:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800e0b6:	683b      	ldr	r3, [r7, #0]
 800e0b8:	885b      	ldrh	r3, [r3, #2]
 800e0ba:	0a1b      	lsrs	r3, r3, #8
 800e0bc:	b29b      	uxth	r3, r3
 800e0be:	3b01      	subs	r3, #1
 800e0c0:	2b06      	cmp	r3, #6
 800e0c2:	f200 8128 	bhi.w	800e316 <USBD_GetDescriptor+0x276>
 800e0c6:	a201      	add	r2, pc, #4	; (adr r2, 800e0cc <USBD_GetDescriptor+0x2c>)
 800e0c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e0cc:	0800e0e9 	.word	0x0800e0e9
 800e0d0:	0800e101 	.word	0x0800e101
 800e0d4:	0800e141 	.word	0x0800e141
 800e0d8:	0800e317 	.word	0x0800e317
 800e0dc:	0800e317 	.word	0x0800e317
 800e0e0:	0800e2b7 	.word	0x0800e2b7
 800e0e4:	0800e2e3 	.word	0x0800e2e3
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800e0e8:	687b      	ldr	r3, [r7, #4]
 800e0ea:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800e0ee:	681b      	ldr	r3, [r3, #0]
 800e0f0:	687a      	ldr	r2, [r7, #4]
 800e0f2:	7c12      	ldrb	r2, [r2, #16]
 800e0f4:	f107 0108 	add.w	r1, r7, #8
 800e0f8:	4610      	mov	r0, r2
 800e0fa:	4798      	blx	r3
 800e0fc:	60f8      	str	r0, [r7, #12]
      break;
 800e0fe:	e112      	b.n	800e326 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800e100:	687b      	ldr	r3, [r7, #4]
 800e102:	7c1b      	ldrb	r3, [r3, #16]
 800e104:	2b00      	cmp	r3, #0
 800e106:	d10d      	bne.n	800e124 <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 800e108:	687b      	ldr	r3, [r7, #4]
 800e10a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e10e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e110:	f107 0208 	add.w	r2, r7, #8
 800e114:	4610      	mov	r0, r2
 800e116:	4798      	blx	r3
 800e118:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800e11a:	68fb      	ldr	r3, [r7, #12]
 800e11c:	3301      	adds	r3, #1
 800e11e:	2202      	movs	r2, #2
 800e120:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800e122:	e100      	b.n	800e326 <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 800e124:	687b      	ldr	r3, [r7, #4]
 800e126:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e12a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e12c:	f107 0208 	add.w	r2, r7, #8
 800e130:	4610      	mov	r0, r2
 800e132:	4798      	blx	r3
 800e134:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800e136:	68fb      	ldr	r3, [r7, #12]
 800e138:	3301      	adds	r3, #1
 800e13a:	2202      	movs	r2, #2
 800e13c:	701a      	strb	r2, [r3, #0]
      break;
 800e13e:	e0f2      	b.n	800e326 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800e140:	683b      	ldr	r3, [r7, #0]
 800e142:	885b      	ldrh	r3, [r3, #2]
 800e144:	b2db      	uxtb	r3, r3
 800e146:	2b05      	cmp	r3, #5
 800e148:	f200 80ac 	bhi.w	800e2a4 <USBD_GetDescriptor+0x204>
 800e14c:	a201      	add	r2, pc, #4	; (adr r2, 800e154 <USBD_GetDescriptor+0xb4>)
 800e14e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e152:	bf00      	nop
 800e154:	0800e16d 	.word	0x0800e16d
 800e158:	0800e1a1 	.word	0x0800e1a1
 800e15c:	0800e1d5 	.word	0x0800e1d5
 800e160:	0800e209 	.word	0x0800e209
 800e164:	0800e23d 	.word	0x0800e23d
 800e168:	0800e271 	.word	0x0800e271
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800e16c:	687b      	ldr	r3, [r7, #4]
 800e16e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800e172:	685b      	ldr	r3, [r3, #4]
 800e174:	2b00      	cmp	r3, #0
 800e176:	d00b      	beq.n	800e190 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800e178:	687b      	ldr	r3, [r7, #4]
 800e17a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800e17e:	685b      	ldr	r3, [r3, #4]
 800e180:	687a      	ldr	r2, [r7, #4]
 800e182:	7c12      	ldrb	r2, [r2, #16]
 800e184:	f107 0108 	add.w	r1, r7, #8
 800e188:	4610      	mov	r0, r2
 800e18a:	4798      	blx	r3
 800e18c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800e18e:	e091      	b.n	800e2b4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800e190:	6839      	ldr	r1, [r7, #0]
 800e192:	6878      	ldr	r0, [r7, #4]
 800e194:	f000 fab2 	bl	800e6fc <USBD_CtlError>
            err++;
 800e198:	7afb      	ldrb	r3, [r7, #11]
 800e19a:	3301      	adds	r3, #1
 800e19c:	72fb      	strb	r3, [r7, #11]
          break;
 800e19e:	e089      	b.n	800e2b4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800e1a0:	687b      	ldr	r3, [r7, #4]
 800e1a2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800e1a6:	689b      	ldr	r3, [r3, #8]
 800e1a8:	2b00      	cmp	r3, #0
 800e1aa:	d00b      	beq.n	800e1c4 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800e1ac:	687b      	ldr	r3, [r7, #4]
 800e1ae:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800e1b2:	689b      	ldr	r3, [r3, #8]
 800e1b4:	687a      	ldr	r2, [r7, #4]
 800e1b6:	7c12      	ldrb	r2, [r2, #16]
 800e1b8:	f107 0108 	add.w	r1, r7, #8
 800e1bc:	4610      	mov	r0, r2
 800e1be:	4798      	blx	r3
 800e1c0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800e1c2:	e077      	b.n	800e2b4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800e1c4:	6839      	ldr	r1, [r7, #0]
 800e1c6:	6878      	ldr	r0, [r7, #4]
 800e1c8:	f000 fa98 	bl	800e6fc <USBD_CtlError>
            err++;
 800e1cc:	7afb      	ldrb	r3, [r7, #11]
 800e1ce:	3301      	adds	r3, #1
 800e1d0:	72fb      	strb	r3, [r7, #11]
          break;
 800e1d2:	e06f      	b.n	800e2b4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800e1d4:	687b      	ldr	r3, [r7, #4]
 800e1d6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800e1da:	68db      	ldr	r3, [r3, #12]
 800e1dc:	2b00      	cmp	r3, #0
 800e1de:	d00b      	beq.n	800e1f8 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800e1e0:	687b      	ldr	r3, [r7, #4]
 800e1e2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800e1e6:	68db      	ldr	r3, [r3, #12]
 800e1e8:	687a      	ldr	r2, [r7, #4]
 800e1ea:	7c12      	ldrb	r2, [r2, #16]
 800e1ec:	f107 0108 	add.w	r1, r7, #8
 800e1f0:	4610      	mov	r0, r2
 800e1f2:	4798      	blx	r3
 800e1f4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800e1f6:	e05d      	b.n	800e2b4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800e1f8:	6839      	ldr	r1, [r7, #0]
 800e1fa:	6878      	ldr	r0, [r7, #4]
 800e1fc:	f000 fa7e 	bl	800e6fc <USBD_CtlError>
            err++;
 800e200:	7afb      	ldrb	r3, [r7, #11]
 800e202:	3301      	adds	r3, #1
 800e204:	72fb      	strb	r3, [r7, #11]
          break;
 800e206:	e055      	b.n	800e2b4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800e208:	687b      	ldr	r3, [r7, #4]
 800e20a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800e20e:	691b      	ldr	r3, [r3, #16]
 800e210:	2b00      	cmp	r3, #0
 800e212:	d00b      	beq.n	800e22c <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800e214:	687b      	ldr	r3, [r7, #4]
 800e216:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800e21a:	691b      	ldr	r3, [r3, #16]
 800e21c:	687a      	ldr	r2, [r7, #4]
 800e21e:	7c12      	ldrb	r2, [r2, #16]
 800e220:	f107 0108 	add.w	r1, r7, #8
 800e224:	4610      	mov	r0, r2
 800e226:	4798      	blx	r3
 800e228:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800e22a:	e043      	b.n	800e2b4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800e22c:	6839      	ldr	r1, [r7, #0]
 800e22e:	6878      	ldr	r0, [r7, #4]
 800e230:	f000 fa64 	bl	800e6fc <USBD_CtlError>
            err++;
 800e234:	7afb      	ldrb	r3, [r7, #11]
 800e236:	3301      	adds	r3, #1
 800e238:	72fb      	strb	r3, [r7, #11]
          break;
 800e23a:	e03b      	b.n	800e2b4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800e23c:	687b      	ldr	r3, [r7, #4]
 800e23e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800e242:	695b      	ldr	r3, [r3, #20]
 800e244:	2b00      	cmp	r3, #0
 800e246:	d00b      	beq.n	800e260 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800e248:	687b      	ldr	r3, [r7, #4]
 800e24a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800e24e:	695b      	ldr	r3, [r3, #20]
 800e250:	687a      	ldr	r2, [r7, #4]
 800e252:	7c12      	ldrb	r2, [r2, #16]
 800e254:	f107 0108 	add.w	r1, r7, #8
 800e258:	4610      	mov	r0, r2
 800e25a:	4798      	blx	r3
 800e25c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800e25e:	e029      	b.n	800e2b4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800e260:	6839      	ldr	r1, [r7, #0]
 800e262:	6878      	ldr	r0, [r7, #4]
 800e264:	f000 fa4a 	bl	800e6fc <USBD_CtlError>
            err++;
 800e268:	7afb      	ldrb	r3, [r7, #11]
 800e26a:	3301      	adds	r3, #1
 800e26c:	72fb      	strb	r3, [r7, #11]
          break;
 800e26e:	e021      	b.n	800e2b4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800e270:	687b      	ldr	r3, [r7, #4]
 800e272:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800e276:	699b      	ldr	r3, [r3, #24]
 800e278:	2b00      	cmp	r3, #0
 800e27a:	d00b      	beq.n	800e294 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800e27c:	687b      	ldr	r3, [r7, #4]
 800e27e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800e282:	699b      	ldr	r3, [r3, #24]
 800e284:	687a      	ldr	r2, [r7, #4]
 800e286:	7c12      	ldrb	r2, [r2, #16]
 800e288:	f107 0108 	add.w	r1, r7, #8
 800e28c:	4610      	mov	r0, r2
 800e28e:	4798      	blx	r3
 800e290:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800e292:	e00f      	b.n	800e2b4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800e294:	6839      	ldr	r1, [r7, #0]
 800e296:	6878      	ldr	r0, [r7, #4]
 800e298:	f000 fa30 	bl	800e6fc <USBD_CtlError>
            err++;
 800e29c:	7afb      	ldrb	r3, [r7, #11]
 800e29e:	3301      	adds	r3, #1
 800e2a0:	72fb      	strb	r3, [r7, #11]
          break;
 800e2a2:	e007      	b.n	800e2b4 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800e2a4:	6839      	ldr	r1, [r7, #0]
 800e2a6:	6878      	ldr	r0, [r7, #4]
 800e2a8:	f000 fa28 	bl	800e6fc <USBD_CtlError>
          err++;
 800e2ac:	7afb      	ldrb	r3, [r7, #11]
 800e2ae:	3301      	adds	r3, #1
 800e2b0:	72fb      	strb	r3, [r7, #11]
#endif
          break;
 800e2b2:	bf00      	nop
      }
      break;
 800e2b4:	e037      	b.n	800e326 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800e2b6:	687b      	ldr	r3, [r7, #4]
 800e2b8:	7c1b      	ldrb	r3, [r3, #16]
 800e2ba:	2b00      	cmp	r3, #0
 800e2bc:	d109      	bne.n	800e2d2 <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800e2be:	687b      	ldr	r3, [r7, #4]
 800e2c0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e2c4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e2c6:	f107 0208 	add.w	r2, r7, #8
 800e2ca:	4610      	mov	r0, r2
 800e2cc:	4798      	blx	r3
 800e2ce:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800e2d0:	e029      	b.n	800e326 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800e2d2:	6839      	ldr	r1, [r7, #0]
 800e2d4:	6878      	ldr	r0, [r7, #4]
 800e2d6:	f000 fa11 	bl	800e6fc <USBD_CtlError>
        err++;
 800e2da:	7afb      	ldrb	r3, [r7, #11]
 800e2dc:	3301      	adds	r3, #1
 800e2de:	72fb      	strb	r3, [r7, #11]
      break;
 800e2e0:	e021      	b.n	800e326 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800e2e2:	687b      	ldr	r3, [r7, #4]
 800e2e4:	7c1b      	ldrb	r3, [r3, #16]
 800e2e6:	2b00      	cmp	r3, #0
 800e2e8:	d10d      	bne.n	800e306 <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800e2ea:	687b      	ldr	r3, [r7, #4]
 800e2ec:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e2f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e2f2:	f107 0208 	add.w	r2, r7, #8
 800e2f6:	4610      	mov	r0, r2
 800e2f8:	4798      	blx	r3
 800e2fa:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800e2fc:	68fb      	ldr	r3, [r7, #12]
 800e2fe:	3301      	adds	r3, #1
 800e300:	2207      	movs	r2, #7
 800e302:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800e304:	e00f      	b.n	800e326 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800e306:	6839      	ldr	r1, [r7, #0]
 800e308:	6878      	ldr	r0, [r7, #4]
 800e30a:	f000 f9f7 	bl	800e6fc <USBD_CtlError>
        err++;
 800e30e:	7afb      	ldrb	r3, [r7, #11]
 800e310:	3301      	adds	r3, #1
 800e312:	72fb      	strb	r3, [r7, #11]
      break;
 800e314:	e007      	b.n	800e326 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800e316:	6839      	ldr	r1, [r7, #0]
 800e318:	6878      	ldr	r0, [r7, #4]
 800e31a:	f000 f9ef 	bl	800e6fc <USBD_CtlError>
      err++;
 800e31e:	7afb      	ldrb	r3, [r7, #11]
 800e320:	3301      	adds	r3, #1
 800e322:	72fb      	strb	r3, [r7, #11]
      break;
 800e324:	bf00      	nop
  }

  if (err != 0U)
 800e326:	7afb      	ldrb	r3, [r7, #11]
 800e328:	2b00      	cmp	r3, #0
 800e32a:	d11e      	bne.n	800e36a <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 800e32c:	683b      	ldr	r3, [r7, #0]
 800e32e:	88db      	ldrh	r3, [r3, #6]
 800e330:	2b00      	cmp	r3, #0
 800e332:	d016      	beq.n	800e362 <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 800e334:	893b      	ldrh	r3, [r7, #8]
 800e336:	2b00      	cmp	r3, #0
 800e338:	d00e      	beq.n	800e358 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 800e33a:	683b      	ldr	r3, [r7, #0]
 800e33c:	88da      	ldrh	r2, [r3, #6]
 800e33e:	893b      	ldrh	r3, [r7, #8]
 800e340:	4293      	cmp	r3, r2
 800e342:	bf28      	it	cs
 800e344:	4613      	movcs	r3, r2
 800e346:	b29b      	uxth	r3, r3
 800e348:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800e34a:	893b      	ldrh	r3, [r7, #8]
 800e34c:	461a      	mov	r2, r3
 800e34e:	68f9      	ldr	r1, [r7, #12]
 800e350:	6878      	ldr	r0, [r7, #4]
 800e352:	f000 fa44 	bl	800e7de <USBD_CtlSendData>
 800e356:	e009      	b.n	800e36c <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800e358:	6839      	ldr	r1, [r7, #0]
 800e35a:	6878      	ldr	r0, [r7, #4]
 800e35c:	f000 f9ce 	bl	800e6fc <USBD_CtlError>
 800e360:	e004      	b.n	800e36c <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800e362:	6878      	ldr	r0, [r7, #4]
 800e364:	f000 fa95 	bl	800e892 <USBD_CtlSendStatus>
 800e368:	e000      	b.n	800e36c <USBD_GetDescriptor+0x2cc>
    return;
 800e36a:	bf00      	nop
  }
}
 800e36c:	3710      	adds	r7, #16
 800e36e:	46bd      	mov	sp, r7
 800e370:	bd80      	pop	{r7, pc}
 800e372:	bf00      	nop

0800e374 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800e374:	b580      	push	{r7, lr}
 800e376:	b084      	sub	sp, #16
 800e378:	af00      	add	r7, sp, #0
 800e37a:	6078      	str	r0, [r7, #4]
 800e37c:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800e37e:	683b      	ldr	r3, [r7, #0]
 800e380:	889b      	ldrh	r3, [r3, #4]
 800e382:	2b00      	cmp	r3, #0
 800e384:	d131      	bne.n	800e3ea <USBD_SetAddress+0x76>
 800e386:	683b      	ldr	r3, [r7, #0]
 800e388:	88db      	ldrh	r3, [r3, #6]
 800e38a:	2b00      	cmp	r3, #0
 800e38c:	d12d      	bne.n	800e3ea <USBD_SetAddress+0x76>
 800e38e:	683b      	ldr	r3, [r7, #0]
 800e390:	885b      	ldrh	r3, [r3, #2]
 800e392:	2b7f      	cmp	r3, #127	; 0x7f
 800e394:	d829      	bhi.n	800e3ea <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800e396:	683b      	ldr	r3, [r7, #0]
 800e398:	885b      	ldrh	r3, [r3, #2]
 800e39a:	b2db      	uxtb	r3, r3
 800e39c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800e3a0:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800e3a2:	687b      	ldr	r3, [r7, #4]
 800e3a4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800e3a8:	b2db      	uxtb	r3, r3
 800e3aa:	2b03      	cmp	r3, #3
 800e3ac:	d104      	bne.n	800e3b8 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800e3ae:	6839      	ldr	r1, [r7, #0]
 800e3b0:	6878      	ldr	r0, [r7, #4]
 800e3b2:	f000 f9a3 	bl	800e6fc <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800e3b6:	e01d      	b.n	800e3f4 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800e3b8:	687b      	ldr	r3, [r7, #4]
 800e3ba:	7bfa      	ldrb	r2, [r7, #15]
 800e3bc:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800e3c0:	7bfb      	ldrb	r3, [r7, #15]
 800e3c2:	4619      	mov	r1, r3
 800e3c4:	6878      	ldr	r0, [r7, #4]
 800e3c6:	f003 ff0f 	bl	80121e8 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800e3ca:	6878      	ldr	r0, [r7, #4]
 800e3cc:	f000 fa61 	bl	800e892 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800e3d0:	7bfb      	ldrb	r3, [r7, #15]
 800e3d2:	2b00      	cmp	r3, #0
 800e3d4:	d004      	beq.n	800e3e0 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800e3d6:	687b      	ldr	r3, [r7, #4]
 800e3d8:	2202      	movs	r2, #2
 800e3da:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800e3de:	e009      	b.n	800e3f4 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800e3e0:	687b      	ldr	r3, [r7, #4]
 800e3e2:	2201      	movs	r2, #1
 800e3e4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800e3e8:	e004      	b.n	800e3f4 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800e3ea:	6839      	ldr	r1, [r7, #0]
 800e3ec:	6878      	ldr	r0, [r7, #4]
 800e3ee:	f000 f985 	bl	800e6fc <USBD_CtlError>
  }
}
 800e3f2:	bf00      	nop
 800e3f4:	bf00      	nop
 800e3f6:	3710      	adds	r7, #16
 800e3f8:	46bd      	mov	sp, r7
 800e3fa:	bd80      	pop	{r7, pc}

0800e3fc <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800e3fc:	b580      	push	{r7, lr}
 800e3fe:	b084      	sub	sp, #16
 800e400:	af00      	add	r7, sp, #0
 800e402:	6078      	str	r0, [r7, #4]
 800e404:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800e406:	2300      	movs	r3, #0
 800e408:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800e40a:	683b      	ldr	r3, [r7, #0]
 800e40c:	885b      	ldrh	r3, [r3, #2]
 800e40e:	b2da      	uxtb	r2, r3
 800e410:	4b4c      	ldr	r3, [pc, #304]	; (800e544 <USBD_SetConfig+0x148>)
 800e412:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800e414:	4b4b      	ldr	r3, [pc, #300]	; (800e544 <USBD_SetConfig+0x148>)
 800e416:	781b      	ldrb	r3, [r3, #0]
 800e418:	2b01      	cmp	r3, #1
 800e41a:	d905      	bls.n	800e428 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800e41c:	6839      	ldr	r1, [r7, #0]
 800e41e:	6878      	ldr	r0, [r7, #4]
 800e420:	f000 f96c 	bl	800e6fc <USBD_CtlError>
    return USBD_FAIL;
 800e424:	2303      	movs	r3, #3
 800e426:	e088      	b.n	800e53a <USBD_SetConfig+0x13e>
  }

  switch (pdev->dev_state)
 800e428:	687b      	ldr	r3, [r7, #4]
 800e42a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800e42e:	b2db      	uxtb	r3, r3
 800e430:	2b02      	cmp	r3, #2
 800e432:	d002      	beq.n	800e43a <USBD_SetConfig+0x3e>
 800e434:	2b03      	cmp	r3, #3
 800e436:	d025      	beq.n	800e484 <USBD_SetConfig+0x88>
 800e438:	e071      	b.n	800e51e <USBD_SetConfig+0x122>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800e43a:	4b42      	ldr	r3, [pc, #264]	; (800e544 <USBD_SetConfig+0x148>)
 800e43c:	781b      	ldrb	r3, [r3, #0]
 800e43e:	2b00      	cmp	r3, #0
 800e440:	d01c      	beq.n	800e47c <USBD_SetConfig+0x80>
      {
        pdev->dev_config = cfgidx;
 800e442:	4b40      	ldr	r3, [pc, #256]	; (800e544 <USBD_SetConfig+0x148>)
 800e444:	781b      	ldrb	r3, [r3, #0]
 800e446:	461a      	mov	r2, r3
 800e448:	687b      	ldr	r3, [r7, #4]
 800e44a:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800e44c:	4b3d      	ldr	r3, [pc, #244]	; (800e544 <USBD_SetConfig+0x148>)
 800e44e:	781b      	ldrb	r3, [r3, #0]
 800e450:	4619      	mov	r1, r3
 800e452:	6878      	ldr	r0, [r7, #4]
 800e454:	f7ff f948 	bl	800d6e8 <USBD_SetClassConfig>
 800e458:	4603      	mov	r3, r0
 800e45a:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800e45c:	7bfb      	ldrb	r3, [r7, #15]
 800e45e:	2b00      	cmp	r3, #0
 800e460:	d004      	beq.n	800e46c <USBD_SetConfig+0x70>
        {
          USBD_CtlError(pdev, req);
 800e462:	6839      	ldr	r1, [r7, #0]
 800e464:	6878      	ldr	r0, [r7, #4]
 800e466:	f000 f949 	bl	800e6fc <USBD_CtlError>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800e46a:	e065      	b.n	800e538 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 800e46c:	6878      	ldr	r0, [r7, #4]
 800e46e:	f000 fa10 	bl	800e892 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800e472:	687b      	ldr	r3, [r7, #4]
 800e474:	2203      	movs	r2, #3
 800e476:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800e47a:	e05d      	b.n	800e538 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 800e47c:	6878      	ldr	r0, [r7, #4]
 800e47e:	f000 fa08 	bl	800e892 <USBD_CtlSendStatus>
      break;
 800e482:	e059      	b.n	800e538 <USBD_SetConfig+0x13c>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800e484:	4b2f      	ldr	r3, [pc, #188]	; (800e544 <USBD_SetConfig+0x148>)
 800e486:	781b      	ldrb	r3, [r3, #0]
 800e488:	2b00      	cmp	r3, #0
 800e48a:	d112      	bne.n	800e4b2 <USBD_SetConfig+0xb6>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800e48c:	687b      	ldr	r3, [r7, #4]
 800e48e:	2202      	movs	r2, #2
 800e490:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 800e494:	4b2b      	ldr	r3, [pc, #172]	; (800e544 <USBD_SetConfig+0x148>)
 800e496:	781b      	ldrb	r3, [r3, #0]
 800e498:	461a      	mov	r2, r3
 800e49a:	687b      	ldr	r3, [r7, #4]
 800e49c:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800e49e:	4b29      	ldr	r3, [pc, #164]	; (800e544 <USBD_SetConfig+0x148>)
 800e4a0:	781b      	ldrb	r3, [r3, #0]
 800e4a2:	4619      	mov	r1, r3
 800e4a4:	6878      	ldr	r0, [r7, #4]
 800e4a6:	f7ff f93b 	bl	800d720 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800e4aa:	6878      	ldr	r0, [r7, #4]
 800e4ac:	f000 f9f1 	bl	800e892 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800e4b0:	e042      	b.n	800e538 <USBD_SetConfig+0x13c>
      else if (cfgidx != pdev->dev_config)
 800e4b2:	4b24      	ldr	r3, [pc, #144]	; (800e544 <USBD_SetConfig+0x148>)
 800e4b4:	781b      	ldrb	r3, [r3, #0]
 800e4b6:	461a      	mov	r2, r3
 800e4b8:	687b      	ldr	r3, [r7, #4]
 800e4ba:	685b      	ldr	r3, [r3, #4]
 800e4bc:	429a      	cmp	r2, r3
 800e4be:	d02a      	beq.n	800e516 <USBD_SetConfig+0x11a>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800e4c0:	687b      	ldr	r3, [r7, #4]
 800e4c2:	685b      	ldr	r3, [r3, #4]
 800e4c4:	b2db      	uxtb	r3, r3
 800e4c6:	4619      	mov	r1, r3
 800e4c8:	6878      	ldr	r0, [r7, #4]
 800e4ca:	f7ff f929 	bl	800d720 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800e4ce:	4b1d      	ldr	r3, [pc, #116]	; (800e544 <USBD_SetConfig+0x148>)
 800e4d0:	781b      	ldrb	r3, [r3, #0]
 800e4d2:	461a      	mov	r2, r3
 800e4d4:	687b      	ldr	r3, [r7, #4]
 800e4d6:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800e4d8:	4b1a      	ldr	r3, [pc, #104]	; (800e544 <USBD_SetConfig+0x148>)
 800e4da:	781b      	ldrb	r3, [r3, #0]
 800e4dc:	4619      	mov	r1, r3
 800e4de:	6878      	ldr	r0, [r7, #4]
 800e4e0:	f7ff f902 	bl	800d6e8 <USBD_SetClassConfig>
 800e4e4:	4603      	mov	r3, r0
 800e4e6:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800e4e8:	7bfb      	ldrb	r3, [r7, #15]
 800e4ea:	2b00      	cmp	r3, #0
 800e4ec:	d00f      	beq.n	800e50e <USBD_SetConfig+0x112>
          USBD_CtlError(pdev, req);
 800e4ee:	6839      	ldr	r1, [r7, #0]
 800e4f0:	6878      	ldr	r0, [r7, #4]
 800e4f2:	f000 f903 	bl	800e6fc <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800e4f6:	687b      	ldr	r3, [r7, #4]
 800e4f8:	685b      	ldr	r3, [r3, #4]
 800e4fa:	b2db      	uxtb	r3, r3
 800e4fc:	4619      	mov	r1, r3
 800e4fe:	6878      	ldr	r0, [r7, #4]
 800e500:	f7ff f90e 	bl	800d720 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800e504:	687b      	ldr	r3, [r7, #4]
 800e506:	2202      	movs	r2, #2
 800e508:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800e50c:	e014      	b.n	800e538 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 800e50e:	6878      	ldr	r0, [r7, #4]
 800e510:	f000 f9bf 	bl	800e892 <USBD_CtlSendStatus>
      break;
 800e514:	e010      	b.n	800e538 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 800e516:	6878      	ldr	r0, [r7, #4]
 800e518:	f000 f9bb 	bl	800e892 <USBD_CtlSendStatus>
      break;
 800e51c:	e00c      	b.n	800e538 <USBD_SetConfig+0x13c>

    default:
      USBD_CtlError(pdev, req);
 800e51e:	6839      	ldr	r1, [r7, #0]
 800e520:	6878      	ldr	r0, [r7, #4]
 800e522:	f000 f8eb 	bl	800e6fc <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800e526:	4b07      	ldr	r3, [pc, #28]	; (800e544 <USBD_SetConfig+0x148>)
 800e528:	781b      	ldrb	r3, [r3, #0]
 800e52a:	4619      	mov	r1, r3
 800e52c:	6878      	ldr	r0, [r7, #4]
 800e52e:	f7ff f8f7 	bl	800d720 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800e532:	2303      	movs	r3, #3
 800e534:	73fb      	strb	r3, [r7, #15]
      break;
 800e536:	bf00      	nop
  }

  return ret;
 800e538:	7bfb      	ldrb	r3, [r7, #15]
}
 800e53a:	4618      	mov	r0, r3
 800e53c:	3710      	adds	r7, #16
 800e53e:	46bd      	mov	sp, r7
 800e540:	bd80      	pop	{r7, pc}
 800e542:	bf00      	nop
 800e544:	200001ac 	.word	0x200001ac

0800e548 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800e548:	b580      	push	{r7, lr}
 800e54a:	b082      	sub	sp, #8
 800e54c:	af00      	add	r7, sp, #0
 800e54e:	6078      	str	r0, [r7, #4]
 800e550:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800e552:	683b      	ldr	r3, [r7, #0]
 800e554:	88db      	ldrh	r3, [r3, #6]
 800e556:	2b01      	cmp	r3, #1
 800e558:	d004      	beq.n	800e564 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800e55a:	6839      	ldr	r1, [r7, #0]
 800e55c:	6878      	ldr	r0, [r7, #4]
 800e55e:	f000 f8cd 	bl	800e6fc <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800e562:	e023      	b.n	800e5ac <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800e564:	687b      	ldr	r3, [r7, #4]
 800e566:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800e56a:	b2db      	uxtb	r3, r3
 800e56c:	2b02      	cmp	r3, #2
 800e56e:	dc02      	bgt.n	800e576 <USBD_GetConfig+0x2e>
 800e570:	2b00      	cmp	r3, #0
 800e572:	dc03      	bgt.n	800e57c <USBD_GetConfig+0x34>
 800e574:	e015      	b.n	800e5a2 <USBD_GetConfig+0x5a>
 800e576:	2b03      	cmp	r3, #3
 800e578:	d00b      	beq.n	800e592 <USBD_GetConfig+0x4a>
 800e57a:	e012      	b.n	800e5a2 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800e57c:	687b      	ldr	r3, [r7, #4]
 800e57e:	2200      	movs	r2, #0
 800e580:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800e582:	687b      	ldr	r3, [r7, #4]
 800e584:	3308      	adds	r3, #8
 800e586:	2201      	movs	r2, #1
 800e588:	4619      	mov	r1, r3
 800e58a:	6878      	ldr	r0, [r7, #4]
 800e58c:	f000 f927 	bl	800e7de <USBD_CtlSendData>
        break;
 800e590:	e00c      	b.n	800e5ac <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800e592:	687b      	ldr	r3, [r7, #4]
 800e594:	3304      	adds	r3, #4
 800e596:	2201      	movs	r2, #1
 800e598:	4619      	mov	r1, r3
 800e59a:	6878      	ldr	r0, [r7, #4]
 800e59c:	f000 f91f 	bl	800e7de <USBD_CtlSendData>
        break;
 800e5a0:	e004      	b.n	800e5ac <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800e5a2:	6839      	ldr	r1, [r7, #0]
 800e5a4:	6878      	ldr	r0, [r7, #4]
 800e5a6:	f000 f8a9 	bl	800e6fc <USBD_CtlError>
        break;
 800e5aa:	bf00      	nop
}
 800e5ac:	bf00      	nop
 800e5ae:	3708      	adds	r7, #8
 800e5b0:	46bd      	mov	sp, r7
 800e5b2:	bd80      	pop	{r7, pc}

0800e5b4 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800e5b4:	b580      	push	{r7, lr}
 800e5b6:	b082      	sub	sp, #8
 800e5b8:	af00      	add	r7, sp, #0
 800e5ba:	6078      	str	r0, [r7, #4]
 800e5bc:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800e5be:	687b      	ldr	r3, [r7, #4]
 800e5c0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800e5c4:	b2db      	uxtb	r3, r3
 800e5c6:	3b01      	subs	r3, #1
 800e5c8:	2b02      	cmp	r3, #2
 800e5ca:	d81e      	bhi.n	800e60a <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800e5cc:	683b      	ldr	r3, [r7, #0]
 800e5ce:	88db      	ldrh	r3, [r3, #6]
 800e5d0:	2b02      	cmp	r3, #2
 800e5d2:	d004      	beq.n	800e5de <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800e5d4:	6839      	ldr	r1, [r7, #0]
 800e5d6:	6878      	ldr	r0, [r7, #4]
 800e5d8:	f000 f890 	bl	800e6fc <USBD_CtlError>
        break;
 800e5dc:	e01a      	b.n	800e614 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800e5de:	687b      	ldr	r3, [r7, #4]
 800e5e0:	2201      	movs	r2, #1
 800e5e2:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup != 0U)
 800e5e4:	687b      	ldr	r3, [r7, #4]
 800e5e6:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800e5ea:	2b00      	cmp	r3, #0
 800e5ec:	d005      	beq.n	800e5fa <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800e5ee:	687b      	ldr	r3, [r7, #4]
 800e5f0:	68db      	ldr	r3, [r3, #12]
 800e5f2:	f043 0202 	orr.w	r2, r3, #2
 800e5f6:	687b      	ldr	r3, [r7, #4]
 800e5f8:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800e5fa:	687b      	ldr	r3, [r7, #4]
 800e5fc:	330c      	adds	r3, #12
 800e5fe:	2202      	movs	r2, #2
 800e600:	4619      	mov	r1, r3
 800e602:	6878      	ldr	r0, [r7, #4]
 800e604:	f000 f8eb 	bl	800e7de <USBD_CtlSendData>
      break;
 800e608:	e004      	b.n	800e614 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800e60a:	6839      	ldr	r1, [r7, #0]
 800e60c:	6878      	ldr	r0, [r7, #4]
 800e60e:	f000 f875 	bl	800e6fc <USBD_CtlError>
      break;
 800e612:	bf00      	nop
  }
}
 800e614:	bf00      	nop
 800e616:	3708      	adds	r7, #8
 800e618:	46bd      	mov	sp, r7
 800e61a:	bd80      	pop	{r7, pc}

0800e61c <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800e61c:	b580      	push	{r7, lr}
 800e61e:	b082      	sub	sp, #8
 800e620:	af00      	add	r7, sp, #0
 800e622:	6078      	str	r0, [r7, #4]
 800e624:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800e626:	683b      	ldr	r3, [r7, #0]
 800e628:	885b      	ldrh	r3, [r3, #2]
 800e62a:	2b01      	cmp	r3, #1
 800e62c:	d106      	bne.n	800e63c <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 800e62e:	687b      	ldr	r3, [r7, #4]
 800e630:	2201      	movs	r2, #1
 800e632:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800e636:	6878      	ldr	r0, [r7, #4]
 800e638:	f000 f92b 	bl	800e892 <USBD_CtlSendStatus>
  }
}
 800e63c:	bf00      	nop
 800e63e:	3708      	adds	r7, #8
 800e640:	46bd      	mov	sp, r7
 800e642:	bd80      	pop	{r7, pc}

0800e644 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800e644:	b580      	push	{r7, lr}
 800e646:	b082      	sub	sp, #8
 800e648:	af00      	add	r7, sp, #0
 800e64a:	6078      	str	r0, [r7, #4]
 800e64c:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800e64e:	687b      	ldr	r3, [r7, #4]
 800e650:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800e654:	b2db      	uxtb	r3, r3
 800e656:	3b01      	subs	r3, #1
 800e658:	2b02      	cmp	r3, #2
 800e65a:	d80b      	bhi.n	800e674 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800e65c:	683b      	ldr	r3, [r7, #0]
 800e65e:	885b      	ldrh	r3, [r3, #2]
 800e660:	2b01      	cmp	r3, #1
 800e662:	d10c      	bne.n	800e67e <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800e664:	687b      	ldr	r3, [r7, #4]
 800e666:	2200      	movs	r2, #0
 800e668:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800e66c:	6878      	ldr	r0, [r7, #4]
 800e66e:	f000 f910 	bl	800e892 <USBD_CtlSendStatus>
      }
      break;
 800e672:	e004      	b.n	800e67e <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800e674:	6839      	ldr	r1, [r7, #0]
 800e676:	6878      	ldr	r0, [r7, #4]
 800e678:	f000 f840 	bl	800e6fc <USBD_CtlError>
      break;
 800e67c:	e000      	b.n	800e680 <USBD_ClrFeature+0x3c>
      break;
 800e67e:	bf00      	nop
  }
}
 800e680:	bf00      	nop
 800e682:	3708      	adds	r7, #8
 800e684:	46bd      	mov	sp, r7
 800e686:	bd80      	pop	{r7, pc}

0800e688 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800e688:	b580      	push	{r7, lr}
 800e68a:	b084      	sub	sp, #16
 800e68c:	af00      	add	r7, sp, #0
 800e68e:	6078      	str	r0, [r7, #4]
 800e690:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800e692:	683b      	ldr	r3, [r7, #0]
 800e694:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800e696:	68fb      	ldr	r3, [r7, #12]
 800e698:	781a      	ldrb	r2, [r3, #0]
 800e69a:	687b      	ldr	r3, [r7, #4]
 800e69c:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800e69e:	68fb      	ldr	r3, [r7, #12]
 800e6a0:	3301      	adds	r3, #1
 800e6a2:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800e6a4:	68fb      	ldr	r3, [r7, #12]
 800e6a6:	781a      	ldrb	r2, [r3, #0]
 800e6a8:	687b      	ldr	r3, [r7, #4]
 800e6aa:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800e6ac:	68fb      	ldr	r3, [r7, #12]
 800e6ae:	3301      	adds	r3, #1
 800e6b0:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800e6b2:	68f8      	ldr	r0, [r7, #12]
 800e6b4:	f7ff fabb 	bl	800dc2e <SWAPBYTE>
 800e6b8:	4603      	mov	r3, r0
 800e6ba:	461a      	mov	r2, r3
 800e6bc:	687b      	ldr	r3, [r7, #4]
 800e6be:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800e6c0:	68fb      	ldr	r3, [r7, #12]
 800e6c2:	3301      	adds	r3, #1
 800e6c4:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800e6c6:	68fb      	ldr	r3, [r7, #12]
 800e6c8:	3301      	adds	r3, #1
 800e6ca:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800e6cc:	68f8      	ldr	r0, [r7, #12]
 800e6ce:	f7ff faae 	bl	800dc2e <SWAPBYTE>
 800e6d2:	4603      	mov	r3, r0
 800e6d4:	461a      	mov	r2, r3
 800e6d6:	687b      	ldr	r3, [r7, #4]
 800e6d8:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800e6da:	68fb      	ldr	r3, [r7, #12]
 800e6dc:	3301      	adds	r3, #1
 800e6de:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800e6e0:	68fb      	ldr	r3, [r7, #12]
 800e6e2:	3301      	adds	r3, #1
 800e6e4:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800e6e6:	68f8      	ldr	r0, [r7, #12]
 800e6e8:	f7ff faa1 	bl	800dc2e <SWAPBYTE>
 800e6ec:	4603      	mov	r3, r0
 800e6ee:	461a      	mov	r2, r3
 800e6f0:	687b      	ldr	r3, [r7, #4]
 800e6f2:	80da      	strh	r2, [r3, #6]
}
 800e6f4:	bf00      	nop
 800e6f6:	3710      	adds	r7, #16
 800e6f8:	46bd      	mov	sp, r7
 800e6fa:	bd80      	pop	{r7, pc}

0800e6fc <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800e6fc:	b580      	push	{r7, lr}
 800e6fe:	b082      	sub	sp, #8
 800e700:	af00      	add	r7, sp, #0
 800e702:	6078      	str	r0, [r7, #4]
 800e704:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800e706:	2180      	movs	r1, #128	; 0x80
 800e708:	6878      	ldr	r0, [r7, #4]
 800e70a:	f003 fd03 	bl	8012114 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800e70e:	2100      	movs	r1, #0
 800e710:	6878      	ldr	r0, [r7, #4]
 800e712:	f003 fcff 	bl	8012114 <USBD_LL_StallEP>
}
 800e716:	bf00      	nop
 800e718:	3708      	adds	r7, #8
 800e71a:	46bd      	mov	sp, r7
 800e71c:	bd80      	pop	{r7, pc}

0800e71e <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800e71e:	b580      	push	{r7, lr}
 800e720:	b086      	sub	sp, #24
 800e722:	af00      	add	r7, sp, #0
 800e724:	60f8      	str	r0, [r7, #12]
 800e726:	60b9      	str	r1, [r7, #8]
 800e728:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800e72a:	2300      	movs	r3, #0
 800e72c:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800e72e:	68fb      	ldr	r3, [r7, #12]
 800e730:	2b00      	cmp	r3, #0
 800e732:	d036      	beq.n	800e7a2 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800e734:	68fb      	ldr	r3, [r7, #12]
 800e736:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800e738:	6938      	ldr	r0, [r7, #16]
 800e73a:	f000 f836 	bl	800e7aa <USBD_GetLen>
 800e73e:	4603      	mov	r3, r0
 800e740:	3301      	adds	r3, #1
 800e742:	b29b      	uxth	r3, r3
 800e744:	005b      	lsls	r3, r3, #1
 800e746:	b29a      	uxth	r2, r3
 800e748:	687b      	ldr	r3, [r7, #4]
 800e74a:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800e74c:	7dfb      	ldrb	r3, [r7, #23]
 800e74e:	68ba      	ldr	r2, [r7, #8]
 800e750:	4413      	add	r3, r2
 800e752:	687a      	ldr	r2, [r7, #4]
 800e754:	7812      	ldrb	r2, [r2, #0]
 800e756:	701a      	strb	r2, [r3, #0]
  idx++;
 800e758:	7dfb      	ldrb	r3, [r7, #23]
 800e75a:	3301      	adds	r3, #1
 800e75c:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800e75e:	7dfb      	ldrb	r3, [r7, #23]
 800e760:	68ba      	ldr	r2, [r7, #8]
 800e762:	4413      	add	r3, r2
 800e764:	2203      	movs	r2, #3
 800e766:	701a      	strb	r2, [r3, #0]
  idx++;
 800e768:	7dfb      	ldrb	r3, [r7, #23]
 800e76a:	3301      	adds	r3, #1
 800e76c:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800e76e:	e013      	b.n	800e798 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800e770:	7dfb      	ldrb	r3, [r7, #23]
 800e772:	68ba      	ldr	r2, [r7, #8]
 800e774:	4413      	add	r3, r2
 800e776:	693a      	ldr	r2, [r7, #16]
 800e778:	7812      	ldrb	r2, [r2, #0]
 800e77a:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800e77c:	693b      	ldr	r3, [r7, #16]
 800e77e:	3301      	adds	r3, #1
 800e780:	613b      	str	r3, [r7, #16]
    idx++;
 800e782:	7dfb      	ldrb	r3, [r7, #23]
 800e784:	3301      	adds	r3, #1
 800e786:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800e788:	7dfb      	ldrb	r3, [r7, #23]
 800e78a:	68ba      	ldr	r2, [r7, #8]
 800e78c:	4413      	add	r3, r2
 800e78e:	2200      	movs	r2, #0
 800e790:	701a      	strb	r2, [r3, #0]
    idx++;
 800e792:	7dfb      	ldrb	r3, [r7, #23]
 800e794:	3301      	adds	r3, #1
 800e796:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800e798:	693b      	ldr	r3, [r7, #16]
 800e79a:	781b      	ldrb	r3, [r3, #0]
 800e79c:	2b00      	cmp	r3, #0
 800e79e:	d1e7      	bne.n	800e770 <USBD_GetString+0x52>
 800e7a0:	e000      	b.n	800e7a4 <USBD_GetString+0x86>
    return;
 800e7a2:	bf00      	nop
  }
}
 800e7a4:	3718      	adds	r7, #24
 800e7a6:	46bd      	mov	sp, r7
 800e7a8:	bd80      	pop	{r7, pc}

0800e7aa <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800e7aa:	b480      	push	{r7}
 800e7ac:	b085      	sub	sp, #20
 800e7ae:	af00      	add	r7, sp, #0
 800e7b0:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800e7b2:	2300      	movs	r3, #0
 800e7b4:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800e7b6:	687b      	ldr	r3, [r7, #4]
 800e7b8:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800e7ba:	e005      	b.n	800e7c8 <USBD_GetLen+0x1e>
  {
    len++;
 800e7bc:	7bfb      	ldrb	r3, [r7, #15]
 800e7be:	3301      	adds	r3, #1
 800e7c0:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800e7c2:	68bb      	ldr	r3, [r7, #8]
 800e7c4:	3301      	adds	r3, #1
 800e7c6:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800e7c8:	68bb      	ldr	r3, [r7, #8]
 800e7ca:	781b      	ldrb	r3, [r3, #0]
 800e7cc:	2b00      	cmp	r3, #0
 800e7ce:	d1f5      	bne.n	800e7bc <USBD_GetLen+0x12>
  }

  return len;
 800e7d0:	7bfb      	ldrb	r3, [r7, #15]
}
 800e7d2:	4618      	mov	r0, r3
 800e7d4:	3714      	adds	r7, #20
 800e7d6:	46bd      	mov	sp, r7
 800e7d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e7dc:	4770      	bx	lr

0800e7de <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800e7de:	b580      	push	{r7, lr}
 800e7e0:	b084      	sub	sp, #16
 800e7e2:	af00      	add	r7, sp, #0
 800e7e4:	60f8      	str	r0, [r7, #12]
 800e7e6:	60b9      	str	r1, [r7, #8]
 800e7e8:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800e7ea:	68fb      	ldr	r3, [r7, #12]
 800e7ec:	2202      	movs	r2, #2
 800e7ee:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800e7f2:	68fb      	ldr	r3, [r7, #12]
 800e7f4:	687a      	ldr	r2, [r7, #4]
 800e7f6:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800e7f8:	68fb      	ldr	r3, [r7, #12]
 800e7fa:	687a      	ldr	r2, [r7, #4]
 800e7fc:	61da      	str	r2, [r3, #28]
#endif

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800e7fe:	687b      	ldr	r3, [r7, #4]
 800e800:	68ba      	ldr	r2, [r7, #8]
 800e802:	2100      	movs	r1, #0
 800e804:	68f8      	ldr	r0, [r7, #12]
 800e806:	f003 fd0e 	bl	8012226 <USBD_LL_Transmit>

  return USBD_OK;
 800e80a:	2300      	movs	r3, #0
}
 800e80c:	4618      	mov	r0, r3
 800e80e:	3710      	adds	r7, #16
 800e810:	46bd      	mov	sp, r7
 800e812:	bd80      	pop	{r7, pc}

0800e814 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800e814:	b580      	push	{r7, lr}
 800e816:	b084      	sub	sp, #16
 800e818:	af00      	add	r7, sp, #0
 800e81a:	60f8      	str	r0, [r7, #12]
 800e81c:	60b9      	str	r1, [r7, #8]
 800e81e:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800e820:	687b      	ldr	r3, [r7, #4]
 800e822:	68ba      	ldr	r2, [r7, #8]
 800e824:	2100      	movs	r1, #0
 800e826:	68f8      	ldr	r0, [r7, #12]
 800e828:	f003 fcfd 	bl	8012226 <USBD_LL_Transmit>

  return USBD_OK;
 800e82c:	2300      	movs	r3, #0
}
 800e82e:	4618      	mov	r0, r3
 800e830:	3710      	adds	r7, #16
 800e832:	46bd      	mov	sp, r7
 800e834:	bd80      	pop	{r7, pc}

0800e836 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800e836:	b580      	push	{r7, lr}
 800e838:	b084      	sub	sp, #16
 800e83a:	af00      	add	r7, sp, #0
 800e83c:	60f8      	str	r0, [r7, #12]
 800e83e:	60b9      	str	r1, [r7, #8]
 800e840:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800e842:	68fb      	ldr	r3, [r7, #12]
 800e844:	2203      	movs	r2, #3
 800e846:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800e84a:	68fb      	ldr	r3, [r7, #12]
 800e84c:	687a      	ldr	r2, [r7, #4]
 800e84e:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800e852:	68fb      	ldr	r3, [r7, #12]
 800e854:	687a      	ldr	r2, [r7, #4]
 800e856:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800e85a:	687b      	ldr	r3, [r7, #4]
 800e85c:	68ba      	ldr	r2, [r7, #8]
 800e85e:	2100      	movs	r1, #0
 800e860:	68f8      	ldr	r0, [r7, #12]
 800e862:	f003 fd01 	bl	8012268 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800e866:	2300      	movs	r3, #0
}
 800e868:	4618      	mov	r0, r3
 800e86a:	3710      	adds	r7, #16
 800e86c:	46bd      	mov	sp, r7
 800e86e:	bd80      	pop	{r7, pc}

0800e870 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800e870:	b580      	push	{r7, lr}
 800e872:	b084      	sub	sp, #16
 800e874:	af00      	add	r7, sp, #0
 800e876:	60f8      	str	r0, [r7, #12]
 800e878:	60b9      	str	r1, [r7, #8]
 800e87a:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800e87c:	687b      	ldr	r3, [r7, #4]
 800e87e:	68ba      	ldr	r2, [r7, #8]
 800e880:	2100      	movs	r1, #0
 800e882:	68f8      	ldr	r0, [r7, #12]
 800e884:	f003 fcf0 	bl	8012268 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800e888:	2300      	movs	r3, #0
}
 800e88a:	4618      	mov	r0, r3
 800e88c:	3710      	adds	r7, #16
 800e88e:	46bd      	mov	sp, r7
 800e890:	bd80      	pop	{r7, pc}

0800e892 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800e892:	b580      	push	{r7, lr}
 800e894:	b082      	sub	sp, #8
 800e896:	af00      	add	r7, sp, #0
 800e898:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800e89a:	687b      	ldr	r3, [r7, #4]
 800e89c:	2204      	movs	r2, #4
 800e89e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800e8a2:	2300      	movs	r3, #0
 800e8a4:	2200      	movs	r2, #0
 800e8a6:	2100      	movs	r1, #0
 800e8a8:	6878      	ldr	r0, [r7, #4]
 800e8aa:	f003 fcbc 	bl	8012226 <USBD_LL_Transmit>

  return USBD_OK;
 800e8ae:	2300      	movs	r3, #0
}
 800e8b0:	4618      	mov	r0, r3
 800e8b2:	3708      	adds	r7, #8
 800e8b4:	46bd      	mov	sp, r7
 800e8b6:	bd80      	pop	{r7, pc}

0800e8b8 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800e8b8:	b580      	push	{r7, lr}
 800e8ba:	b082      	sub	sp, #8
 800e8bc:	af00      	add	r7, sp, #0
 800e8be:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800e8c0:	687b      	ldr	r3, [r7, #4]
 800e8c2:	2205      	movs	r2, #5
 800e8c4:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800e8c8:	2300      	movs	r3, #0
 800e8ca:	2200      	movs	r2, #0
 800e8cc:	2100      	movs	r1, #0
 800e8ce:	6878      	ldr	r0, [r7, #4]
 800e8d0:	f003 fcca 	bl	8012268 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800e8d4:	2300      	movs	r3, #0
}
 800e8d6:	4618      	mov	r0, r3
 800e8d8:	3708      	adds	r7, #8
 800e8da:	46bd      	mov	sp, r7
 800e8dc:	bd80      	pop	{r7, pc}
	...

0800e8e0 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800e8e0:	b480      	push	{r7}
 800e8e2:	b087      	sub	sp, #28
 800e8e4:	af00      	add	r7, sp, #0
 800e8e6:	60f8      	str	r0, [r7, #12]
 800e8e8:	60b9      	str	r1, [r7, #8]
 800e8ea:	4613      	mov	r3, r2
 800e8ec:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800e8ee:	2301      	movs	r3, #1
 800e8f0:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800e8f2:	2300      	movs	r3, #0
 800e8f4:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800e8f6:	4b1f      	ldr	r3, [pc, #124]	; (800e974 <FATFS_LinkDriverEx+0x94>)
 800e8f8:	7a5b      	ldrb	r3, [r3, #9]
 800e8fa:	b2db      	uxtb	r3, r3
 800e8fc:	2b00      	cmp	r3, #0
 800e8fe:	d131      	bne.n	800e964 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800e900:	4b1c      	ldr	r3, [pc, #112]	; (800e974 <FATFS_LinkDriverEx+0x94>)
 800e902:	7a5b      	ldrb	r3, [r3, #9]
 800e904:	b2db      	uxtb	r3, r3
 800e906:	461a      	mov	r2, r3
 800e908:	4b1a      	ldr	r3, [pc, #104]	; (800e974 <FATFS_LinkDriverEx+0x94>)
 800e90a:	2100      	movs	r1, #0
 800e90c:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800e90e:	4b19      	ldr	r3, [pc, #100]	; (800e974 <FATFS_LinkDriverEx+0x94>)
 800e910:	7a5b      	ldrb	r3, [r3, #9]
 800e912:	b2db      	uxtb	r3, r3
 800e914:	4a17      	ldr	r2, [pc, #92]	; (800e974 <FATFS_LinkDriverEx+0x94>)
 800e916:	009b      	lsls	r3, r3, #2
 800e918:	4413      	add	r3, r2
 800e91a:	68fa      	ldr	r2, [r7, #12]
 800e91c:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800e91e:	4b15      	ldr	r3, [pc, #84]	; (800e974 <FATFS_LinkDriverEx+0x94>)
 800e920:	7a5b      	ldrb	r3, [r3, #9]
 800e922:	b2db      	uxtb	r3, r3
 800e924:	461a      	mov	r2, r3
 800e926:	4b13      	ldr	r3, [pc, #76]	; (800e974 <FATFS_LinkDriverEx+0x94>)
 800e928:	4413      	add	r3, r2
 800e92a:	79fa      	ldrb	r2, [r7, #7]
 800e92c:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800e92e:	4b11      	ldr	r3, [pc, #68]	; (800e974 <FATFS_LinkDriverEx+0x94>)
 800e930:	7a5b      	ldrb	r3, [r3, #9]
 800e932:	b2db      	uxtb	r3, r3
 800e934:	1c5a      	adds	r2, r3, #1
 800e936:	b2d1      	uxtb	r1, r2
 800e938:	4a0e      	ldr	r2, [pc, #56]	; (800e974 <FATFS_LinkDriverEx+0x94>)
 800e93a:	7251      	strb	r1, [r2, #9]
 800e93c:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800e93e:	7dbb      	ldrb	r3, [r7, #22]
 800e940:	3330      	adds	r3, #48	; 0x30
 800e942:	b2da      	uxtb	r2, r3
 800e944:	68bb      	ldr	r3, [r7, #8]
 800e946:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800e948:	68bb      	ldr	r3, [r7, #8]
 800e94a:	3301      	adds	r3, #1
 800e94c:	223a      	movs	r2, #58	; 0x3a
 800e94e:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800e950:	68bb      	ldr	r3, [r7, #8]
 800e952:	3302      	adds	r3, #2
 800e954:	222f      	movs	r2, #47	; 0x2f
 800e956:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800e958:	68bb      	ldr	r3, [r7, #8]
 800e95a:	3303      	adds	r3, #3
 800e95c:	2200      	movs	r2, #0
 800e95e:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800e960:	2300      	movs	r3, #0
 800e962:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800e964:	7dfb      	ldrb	r3, [r7, #23]
}
 800e966:	4618      	mov	r0, r3
 800e968:	371c      	adds	r7, #28
 800e96a:	46bd      	mov	sp, r7
 800e96c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e970:	4770      	bx	lr
 800e972:	bf00      	nop
 800e974:	200001b0 	.word	0x200001b0

0800e978 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800e978:	b580      	push	{r7, lr}
 800e97a:	b082      	sub	sp, #8
 800e97c:	af00      	add	r7, sp, #0
 800e97e:	6078      	str	r0, [r7, #4]
 800e980:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800e982:	2200      	movs	r2, #0
 800e984:	6839      	ldr	r1, [r7, #0]
 800e986:	6878      	ldr	r0, [r7, #4]
 800e988:	f7ff ffaa 	bl	800e8e0 <FATFS_LinkDriverEx>
 800e98c:	4603      	mov	r3, r0
}
 800e98e:	4618      	mov	r0, r3
 800e990:	3708      	adds	r7, #8
 800e992:	46bd      	mov	sp, r7
 800e994:	bd80      	pop	{r7, pc}
	...

0800e998 <__NVIC_SetPriority>:
{
 800e998:	b480      	push	{r7}
 800e99a:	b083      	sub	sp, #12
 800e99c:	af00      	add	r7, sp, #0
 800e99e:	4603      	mov	r3, r0
 800e9a0:	6039      	str	r1, [r7, #0]
 800e9a2:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800e9a4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800e9a8:	2b00      	cmp	r3, #0
 800e9aa:	db0a      	blt.n	800e9c2 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800e9ac:	683b      	ldr	r3, [r7, #0]
 800e9ae:	b2da      	uxtb	r2, r3
 800e9b0:	490c      	ldr	r1, [pc, #48]	; (800e9e4 <__NVIC_SetPriority+0x4c>)
 800e9b2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800e9b6:	0112      	lsls	r2, r2, #4
 800e9b8:	b2d2      	uxtb	r2, r2
 800e9ba:	440b      	add	r3, r1
 800e9bc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800e9c0:	e00a      	b.n	800e9d8 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800e9c2:	683b      	ldr	r3, [r7, #0]
 800e9c4:	b2da      	uxtb	r2, r3
 800e9c6:	4908      	ldr	r1, [pc, #32]	; (800e9e8 <__NVIC_SetPriority+0x50>)
 800e9c8:	88fb      	ldrh	r3, [r7, #6]
 800e9ca:	f003 030f 	and.w	r3, r3, #15
 800e9ce:	3b04      	subs	r3, #4
 800e9d0:	0112      	lsls	r2, r2, #4
 800e9d2:	b2d2      	uxtb	r2, r2
 800e9d4:	440b      	add	r3, r1
 800e9d6:	761a      	strb	r2, [r3, #24]
}
 800e9d8:	bf00      	nop
 800e9da:	370c      	adds	r7, #12
 800e9dc:	46bd      	mov	sp, r7
 800e9de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e9e2:	4770      	bx	lr
 800e9e4:	e000e100 	.word	0xe000e100
 800e9e8:	e000ed00 	.word	0xe000ed00

0800e9ec <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 800e9ec:	b580      	push	{r7, lr}
 800e9ee:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 800e9f0:	4b05      	ldr	r3, [pc, #20]	; (800ea08 <SysTick_Handler+0x1c>)
 800e9f2:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 800e9f4:	f001 fed2 	bl	801079c <xTaskGetSchedulerState>
 800e9f8:	4603      	mov	r3, r0
 800e9fa:	2b01      	cmp	r3, #1
 800e9fc:	d001      	beq.n	800ea02 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 800e9fe:	f002 fcbb 	bl	8011378 <xPortSysTickHandler>
  }
}
 800ea02:	bf00      	nop
 800ea04:	bd80      	pop	{r7, pc}
 800ea06:	bf00      	nop
 800ea08:	e000e010 	.word	0xe000e010

0800ea0c <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800ea0c:	b580      	push	{r7, lr}
 800ea0e:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 800ea10:	2100      	movs	r1, #0
 800ea12:	f06f 0004 	mvn.w	r0, #4
 800ea16:	f7ff ffbf 	bl	800e998 <__NVIC_SetPriority>
#endif
}
 800ea1a:	bf00      	nop
 800ea1c:	bd80      	pop	{r7, pc}
	...

0800ea20 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800ea20:	b480      	push	{r7}
 800ea22:	b083      	sub	sp, #12
 800ea24:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800ea26:	f3ef 8305 	mrs	r3, IPSR
 800ea2a:	603b      	str	r3, [r7, #0]
  return(result);
 800ea2c:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800ea2e:	2b00      	cmp	r3, #0
 800ea30:	d003      	beq.n	800ea3a <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800ea32:	f06f 0305 	mvn.w	r3, #5
 800ea36:	607b      	str	r3, [r7, #4]
 800ea38:	e00c      	b.n	800ea54 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800ea3a:	4b0a      	ldr	r3, [pc, #40]	; (800ea64 <osKernelInitialize+0x44>)
 800ea3c:	681b      	ldr	r3, [r3, #0]
 800ea3e:	2b00      	cmp	r3, #0
 800ea40:	d105      	bne.n	800ea4e <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800ea42:	4b08      	ldr	r3, [pc, #32]	; (800ea64 <osKernelInitialize+0x44>)
 800ea44:	2201      	movs	r2, #1
 800ea46:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800ea48:	2300      	movs	r3, #0
 800ea4a:	607b      	str	r3, [r7, #4]
 800ea4c:	e002      	b.n	800ea54 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800ea4e:	f04f 33ff 	mov.w	r3, #4294967295
 800ea52:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800ea54:	687b      	ldr	r3, [r7, #4]
}
 800ea56:	4618      	mov	r0, r3
 800ea58:	370c      	adds	r7, #12
 800ea5a:	46bd      	mov	sp, r7
 800ea5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea60:	4770      	bx	lr
 800ea62:	bf00      	nop
 800ea64:	200001bc 	.word	0x200001bc

0800ea68 <osKernelGetState>:
  }

  return (osOK);
}

osKernelState_t osKernelGetState (void) {
 800ea68:	b580      	push	{r7, lr}
 800ea6a:	b082      	sub	sp, #8
 800ea6c:	af00      	add	r7, sp, #0
  osKernelState_t state;

  switch (xTaskGetSchedulerState()) {
 800ea6e:	f001 fe95 	bl	801079c <xTaskGetSchedulerState>
 800ea72:	4603      	mov	r3, r0
 800ea74:	2b00      	cmp	r3, #0
 800ea76:	d004      	beq.n	800ea82 <osKernelGetState+0x1a>
 800ea78:	2b02      	cmp	r3, #2
 800ea7a:	d105      	bne.n	800ea88 <osKernelGetState+0x20>
    case taskSCHEDULER_RUNNING:
      state = osKernelRunning;
 800ea7c:	2302      	movs	r3, #2
 800ea7e:	607b      	str	r3, [r7, #4]
      break;
 800ea80:	e00c      	b.n	800ea9c <osKernelGetState+0x34>

    case taskSCHEDULER_SUSPENDED:
      state = osKernelLocked;
 800ea82:	2303      	movs	r3, #3
 800ea84:	607b      	str	r3, [r7, #4]
      break;
 800ea86:	e009      	b.n	800ea9c <osKernelGetState+0x34>

    case taskSCHEDULER_NOT_STARTED:
    default:
      if (KernelState == osKernelReady) {
 800ea88:	4b07      	ldr	r3, [pc, #28]	; (800eaa8 <osKernelGetState+0x40>)
 800ea8a:	681b      	ldr	r3, [r3, #0]
 800ea8c:	2b01      	cmp	r3, #1
 800ea8e:	d102      	bne.n	800ea96 <osKernelGetState+0x2e>
        state = osKernelReady;
 800ea90:	2301      	movs	r3, #1
 800ea92:	607b      	str	r3, [r7, #4]
      } else {
        state = osKernelInactive;
      }
      break;
 800ea94:	e001      	b.n	800ea9a <osKernelGetState+0x32>
        state = osKernelInactive;
 800ea96:	2300      	movs	r3, #0
 800ea98:	607b      	str	r3, [r7, #4]
      break;
 800ea9a:	bf00      	nop
  }

  return (state);
 800ea9c:	687b      	ldr	r3, [r7, #4]
}
 800ea9e:	4618      	mov	r0, r3
 800eaa0:	3708      	adds	r7, #8
 800eaa2:	46bd      	mov	sp, r7
 800eaa4:	bd80      	pop	{r7, pc}
 800eaa6:	bf00      	nop
 800eaa8:	200001bc 	.word	0x200001bc

0800eaac <osKernelStart>:

osStatus_t osKernelStart (void) {
 800eaac:	b580      	push	{r7, lr}
 800eaae:	b082      	sub	sp, #8
 800eab0:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800eab2:	f3ef 8305 	mrs	r3, IPSR
 800eab6:	603b      	str	r3, [r7, #0]
  return(result);
 800eab8:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800eaba:	2b00      	cmp	r3, #0
 800eabc:	d003      	beq.n	800eac6 <osKernelStart+0x1a>
    stat = osErrorISR;
 800eabe:	f06f 0305 	mvn.w	r3, #5
 800eac2:	607b      	str	r3, [r7, #4]
 800eac4:	e010      	b.n	800eae8 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800eac6:	4b0b      	ldr	r3, [pc, #44]	; (800eaf4 <osKernelStart+0x48>)
 800eac8:	681b      	ldr	r3, [r3, #0]
 800eaca:	2b01      	cmp	r3, #1
 800eacc:	d109      	bne.n	800eae2 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800eace:	f7ff ff9d 	bl	800ea0c <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800ead2:	4b08      	ldr	r3, [pc, #32]	; (800eaf4 <osKernelStart+0x48>)
 800ead4:	2202      	movs	r2, #2
 800ead6:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800ead8:	f001 fa06 	bl	800fee8 <vTaskStartScheduler>
      stat = osOK;
 800eadc:	2300      	movs	r3, #0
 800eade:	607b      	str	r3, [r7, #4]
 800eae0:	e002      	b.n	800eae8 <osKernelStart+0x3c>
    } else {
      stat = osError;
 800eae2:	f04f 33ff 	mov.w	r3, #4294967295
 800eae6:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800eae8:	687b      	ldr	r3, [r7, #4]
}
 800eaea:	4618      	mov	r0, r3
 800eaec:	3708      	adds	r7, #8
 800eaee:	46bd      	mov	sp, r7
 800eaf0:	bd80      	pop	{r7, pc}
 800eaf2:	bf00      	nop
 800eaf4:	200001bc 	.word	0x200001bc

0800eaf8 <osKernelGetTickCount>:
  }

  return (lock);
}

uint32_t osKernelGetTickCount (void) {
 800eaf8:	b580      	push	{r7, lr}
 800eafa:	b082      	sub	sp, #8
 800eafc:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800eafe:	f3ef 8305 	mrs	r3, IPSR
 800eb02:	603b      	str	r3, [r7, #0]
  return(result);
 800eb04:	683b      	ldr	r3, [r7, #0]
  TickType_t ticks;

  if (IS_IRQ()) {
 800eb06:	2b00      	cmp	r3, #0
 800eb08:	d003      	beq.n	800eb12 <osKernelGetTickCount+0x1a>
    ticks = xTaskGetTickCountFromISR();
 800eb0a:	f001 fb0f 	bl	801012c <xTaskGetTickCountFromISR>
 800eb0e:	6078      	str	r0, [r7, #4]
 800eb10:	e002      	b.n	800eb18 <osKernelGetTickCount+0x20>
  } else {
    ticks = xTaskGetTickCount();
 800eb12:	f001 fafb 	bl	801010c <xTaskGetTickCount>
 800eb16:	6078      	str	r0, [r7, #4]
  }

  return (ticks);
 800eb18:	687b      	ldr	r3, [r7, #4]
}
 800eb1a:	4618      	mov	r0, r3
 800eb1c:	3708      	adds	r7, #8
 800eb1e:	46bd      	mov	sp, r7
 800eb20:	bd80      	pop	{r7, pc}

0800eb22 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800eb22:	b580      	push	{r7, lr}
 800eb24:	b08e      	sub	sp, #56	; 0x38
 800eb26:	af04      	add	r7, sp, #16
 800eb28:	60f8      	str	r0, [r7, #12]
 800eb2a:	60b9      	str	r1, [r7, #8]
 800eb2c:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800eb2e:	2300      	movs	r3, #0
 800eb30:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800eb32:	f3ef 8305 	mrs	r3, IPSR
 800eb36:	617b      	str	r3, [r7, #20]
  return(result);
 800eb38:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 800eb3a:	2b00      	cmp	r3, #0
 800eb3c:	d17e      	bne.n	800ec3c <osThreadNew+0x11a>
 800eb3e:	68fb      	ldr	r3, [r7, #12]
 800eb40:	2b00      	cmp	r3, #0
 800eb42:	d07b      	beq.n	800ec3c <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 800eb44:	2380      	movs	r3, #128	; 0x80
 800eb46:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 800eb48:	2318      	movs	r3, #24
 800eb4a:	61fb      	str	r3, [r7, #28]

    name = NULL;
 800eb4c:	2300      	movs	r3, #0
 800eb4e:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 800eb50:	f04f 33ff 	mov.w	r3, #4294967295
 800eb54:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800eb56:	687b      	ldr	r3, [r7, #4]
 800eb58:	2b00      	cmp	r3, #0
 800eb5a:	d045      	beq.n	800ebe8 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 800eb5c:	687b      	ldr	r3, [r7, #4]
 800eb5e:	681b      	ldr	r3, [r3, #0]
 800eb60:	2b00      	cmp	r3, #0
 800eb62:	d002      	beq.n	800eb6a <osThreadNew+0x48>
        name = attr->name;
 800eb64:	687b      	ldr	r3, [r7, #4]
 800eb66:	681b      	ldr	r3, [r3, #0]
 800eb68:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 800eb6a:	687b      	ldr	r3, [r7, #4]
 800eb6c:	699b      	ldr	r3, [r3, #24]
 800eb6e:	2b00      	cmp	r3, #0
 800eb70:	d002      	beq.n	800eb78 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 800eb72:	687b      	ldr	r3, [r7, #4]
 800eb74:	699b      	ldr	r3, [r3, #24]
 800eb76:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800eb78:	69fb      	ldr	r3, [r7, #28]
 800eb7a:	2b00      	cmp	r3, #0
 800eb7c:	d008      	beq.n	800eb90 <osThreadNew+0x6e>
 800eb7e:	69fb      	ldr	r3, [r7, #28]
 800eb80:	2b38      	cmp	r3, #56	; 0x38
 800eb82:	d805      	bhi.n	800eb90 <osThreadNew+0x6e>
 800eb84:	687b      	ldr	r3, [r7, #4]
 800eb86:	685b      	ldr	r3, [r3, #4]
 800eb88:	f003 0301 	and.w	r3, r3, #1
 800eb8c:	2b00      	cmp	r3, #0
 800eb8e:	d001      	beq.n	800eb94 <osThreadNew+0x72>
        return (NULL);
 800eb90:	2300      	movs	r3, #0
 800eb92:	e054      	b.n	800ec3e <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 800eb94:	687b      	ldr	r3, [r7, #4]
 800eb96:	695b      	ldr	r3, [r3, #20]
 800eb98:	2b00      	cmp	r3, #0
 800eb9a:	d003      	beq.n	800eba4 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800eb9c:	687b      	ldr	r3, [r7, #4]
 800eb9e:	695b      	ldr	r3, [r3, #20]
 800eba0:	089b      	lsrs	r3, r3, #2
 800eba2:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800eba4:	687b      	ldr	r3, [r7, #4]
 800eba6:	689b      	ldr	r3, [r3, #8]
 800eba8:	2b00      	cmp	r3, #0
 800ebaa:	d00e      	beq.n	800ebca <osThreadNew+0xa8>
 800ebac:	687b      	ldr	r3, [r7, #4]
 800ebae:	68db      	ldr	r3, [r3, #12]
 800ebb0:	2b5b      	cmp	r3, #91	; 0x5b
 800ebb2:	d90a      	bls.n	800ebca <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800ebb4:	687b      	ldr	r3, [r7, #4]
 800ebb6:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800ebb8:	2b00      	cmp	r3, #0
 800ebba:	d006      	beq.n	800ebca <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800ebbc:	687b      	ldr	r3, [r7, #4]
 800ebbe:	695b      	ldr	r3, [r3, #20]
 800ebc0:	2b00      	cmp	r3, #0
 800ebc2:	d002      	beq.n	800ebca <osThreadNew+0xa8>
        mem = 1;
 800ebc4:	2301      	movs	r3, #1
 800ebc6:	61bb      	str	r3, [r7, #24]
 800ebc8:	e010      	b.n	800ebec <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800ebca:	687b      	ldr	r3, [r7, #4]
 800ebcc:	689b      	ldr	r3, [r3, #8]
 800ebce:	2b00      	cmp	r3, #0
 800ebd0:	d10c      	bne.n	800ebec <osThreadNew+0xca>
 800ebd2:	687b      	ldr	r3, [r7, #4]
 800ebd4:	68db      	ldr	r3, [r3, #12]
 800ebd6:	2b00      	cmp	r3, #0
 800ebd8:	d108      	bne.n	800ebec <osThreadNew+0xca>
 800ebda:	687b      	ldr	r3, [r7, #4]
 800ebdc:	691b      	ldr	r3, [r3, #16]
 800ebde:	2b00      	cmp	r3, #0
 800ebe0:	d104      	bne.n	800ebec <osThreadNew+0xca>
          mem = 0;
 800ebe2:	2300      	movs	r3, #0
 800ebe4:	61bb      	str	r3, [r7, #24]
 800ebe6:	e001      	b.n	800ebec <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 800ebe8:	2300      	movs	r3, #0
 800ebea:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800ebec:	69bb      	ldr	r3, [r7, #24]
 800ebee:	2b01      	cmp	r3, #1
 800ebf0:	d110      	bne.n	800ec14 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800ebf2:	687b      	ldr	r3, [r7, #4]
 800ebf4:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 800ebf6:	687a      	ldr	r2, [r7, #4]
 800ebf8:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800ebfa:	9202      	str	r2, [sp, #8]
 800ebfc:	9301      	str	r3, [sp, #4]
 800ebfe:	69fb      	ldr	r3, [r7, #28]
 800ec00:	9300      	str	r3, [sp, #0]
 800ec02:	68bb      	ldr	r3, [r7, #8]
 800ec04:	6a3a      	ldr	r2, [r7, #32]
 800ec06:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800ec08:	68f8      	ldr	r0, [r7, #12]
 800ec0a:	f000 ff97 	bl	800fb3c <xTaskCreateStatic>
 800ec0e:	4603      	mov	r3, r0
 800ec10:	613b      	str	r3, [r7, #16]
 800ec12:	e013      	b.n	800ec3c <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 800ec14:	69bb      	ldr	r3, [r7, #24]
 800ec16:	2b00      	cmp	r3, #0
 800ec18:	d110      	bne.n	800ec3c <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800ec1a:	6a3b      	ldr	r3, [r7, #32]
 800ec1c:	b29a      	uxth	r2, r3
 800ec1e:	f107 0310 	add.w	r3, r7, #16
 800ec22:	9301      	str	r3, [sp, #4]
 800ec24:	69fb      	ldr	r3, [r7, #28]
 800ec26:	9300      	str	r3, [sp, #0]
 800ec28:	68bb      	ldr	r3, [r7, #8]
 800ec2a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800ec2c:	68f8      	ldr	r0, [r7, #12]
 800ec2e:	f000 ffe2 	bl	800fbf6 <xTaskCreate>
 800ec32:	4603      	mov	r3, r0
 800ec34:	2b01      	cmp	r3, #1
 800ec36:	d001      	beq.n	800ec3c <osThreadNew+0x11a>
            hTask = NULL;
 800ec38:	2300      	movs	r3, #0
 800ec3a:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800ec3c:	693b      	ldr	r3, [r7, #16]
}
 800ec3e:	4618      	mov	r0, r3
 800ec40:	3728      	adds	r7, #40	; 0x28
 800ec42:	46bd      	mov	sp, r7
 800ec44:	bd80      	pop	{r7, pc}

0800ec46 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 800ec46:	b580      	push	{r7, lr}
 800ec48:	b084      	sub	sp, #16
 800ec4a:	af00      	add	r7, sp, #0
 800ec4c:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800ec4e:	f3ef 8305 	mrs	r3, IPSR
 800ec52:	60bb      	str	r3, [r7, #8]
  return(result);
 800ec54:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800ec56:	2b00      	cmp	r3, #0
 800ec58:	d003      	beq.n	800ec62 <osDelay+0x1c>
    stat = osErrorISR;
 800ec5a:	f06f 0305 	mvn.w	r3, #5
 800ec5e:	60fb      	str	r3, [r7, #12]
 800ec60:	e007      	b.n	800ec72 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 800ec62:	2300      	movs	r3, #0
 800ec64:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 800ec66:	687b      	ldr	r3, [r7, #4]
 800ec68:	2b00      	cmp	r3, #0
 800ec6a:	d002      	beq.n	800ec72 <osDelay+0x2c>
      vTaskDelay(ticks);
 800ec6c:	6878      	ldr	r0, [r7, #4]
 800ec6e:	f001 f907 	bl	800fe80 <vTaskDelay>
    }
  }

  return (stat);
 800ec72:	68fb      	ldr	r3, [r7, #12]
}
 800ec74:	4618      	mov	r0, r3
 800ec76:	3710      	adds	r7, #16
 800ec78:	46bd      	mov	sp, r7
 800ec7a:	bd80      	pop	{r7, pc}

0800ec7c <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 800ec7c:	b580      	push	{r7, lr}
 800ec7e:	b08a      	sub	sp, #40	; 0x28
 800ec80:	af02      	add	r7, sp, #8
 800ec82:	60f8      	str	r0, [r7, #12]
 800ec84:	60b9      	str	r1, [r7, #8]
 800ec86:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 800ec88:	2300      	movs	r3, #0
 800ec8a:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800ec8c:	f3ef 8305 	mrs	r3, IPSR
 800ec90:	613b      	str	r3, [r7, #16]
  return(result);
 800ec92:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 800ec94:	2b00      	cmp	r3, #0
 800ec96:	d15f      	bne.n	800ed58 <osMessageQueueNew+0xdc>
 800ec98:	68fb      	ldr	r3, [r7, #12]
 800ec9a:	2b00      	cmp	r3, #0
 800ec9c:	d05c      	beq.n	800ed58 <osMessageQueueNew+0xdc>
 800ec9e:	68bb      	ldr	r3, [r7, #8]
 800eca0:	2b00      	cmp	r3, #0
 800eca2:	d059      	beq.n	800ed58 <osMessageQueueNew+0xdc>
    mem = -1;
 800eca4:	f04f 33ff 	mov.w	r3, #4294967295
 800eca8:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800ecaa:	687b      	ldr	r3, [r7, #4]
 800ecac:	2b00      	cmp	r3, #0
 800ecae:	d029      	beq.n	800ed04 <osMessageQueueNew+0x88>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800ecb0:	687b      	ldr	r3, [r7, #4]
 800ecb2:	689b      	ldr	r3, [r3, #8]
 800ecb4:	2b00      	cmp	r3, #0
 800ecb6:	d012      	beq.n	800ecde <osMessageQueueNew+0x62>
 800ecb8:	687b      	ldr	r3, [r7, #4]
 800ecba:	68db      	ldr	r3, [r3, #12]
 800ecbc:	2b4f      	cmp	r3, #79	; 0x4f
 800ecbe:	d90e      	bls.n	800ecde <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800ecc0:	687b      	ldr	r3, [r7, #4]
 800ecc2:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800ecc4:	2b00      	cmp	r3, #0
 800ecc6:	d00a      	beq.n	800ecde <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800ecc8:	687b      	ldr	r3, [r7, #4]
 800ecca:	695a      	ldr	r2, [r3, #20]
 800eccc:	68fb      	ldr	r3, [r7, #12]
 800ecce:	68b9      	ldr	r1, [r7, #8]
 800ecd0:	fb01 f303 	mul.w	r3, r1, r3
 800ecd4:	429a      	cmp	r2, r3
 800ecd6:	d302      	bcc.n	800ecde <osMessageQueueNew+0x62>
        mem = 1;
 800ecd8:	2301      	movs	r3, #1
 800ecda:	61bb      	str	r3, [r7, #24]
 800ecdc:	e014      	b.n	800ed08 <osMessageQueueNew+0x8c>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800ecde:	687b      	ldr	r3, [r7, #4]
 800ece0:	689b      	ldr	r3, [r3, #8]
 800ece2:	2b00      	cmp	r3, #0
 800ece4:	d110      	bne.n	800ed08 <osMessageQueueNew+0x8c>
 800ece6:	687b      	ldr	r3, [r7, #4]
 800ece8:	68db      	ldr	r3, [r3, #12]
 800ecea:	2b00      	cmp	r3, #0
 800ecec:	d10c      	bne.n	800ed08 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800ecee:	687b      	ldr	r3, [r7, #4]
 800ecf0:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800ecf2:	2b00      	cmp	r3, #0
 800ecf4:	d108      	bne.n	800ed08 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800ecf6:	687b      	ldr	r3, [r7, #4]
 800ecf8:	695b      	ldr	r3, [r3, #20]
 800ecfa:	2b00      	cmp	r3, #0
 800ecfc:	d104      	bne.n	800ed08 <osMessageQueueNew+0x8c>
          mem = 0;
 800ecfe:	2300      	movs	r3, #0
 800ed00:	61bb      	str	r3, [r7, #24]
 800ed02:	e001      	b.n	800ed08 <osMessageQueueNew+0x8c>
        }
      }
    }
    else {
      mem = 0;
 800ed04:	2300      	movs	r3, #0
 800ed06:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800ed08:	69bb      	ldr	r3, [r7, #24]
 800ed0a:	2b01      	cmp	r3, #1
 800ed0c:	d10b      	bne.n	800ed26 <osMessageQueueNew+0xaa>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 800ed0e:	687b      	ldr	r3, [r7, #4]
 800ed10:	691a      	ldr	r2, [r3, #16]
 800ed12:	687b      	ldr	r3, [r7, #4]
 800ed14:	689b      	ldr	r3, [r3, #8]
 800ed16:	2100      	movs	r1, #0
 800ed18:	9100      	str	r1, [sp, #0]
 800ed1a:	68b9      	ldr	r1, [r7, #8]
 800ed1c:	68f8      	ldr	r0, [r7, #12]
 800ed1e:	f000 f9cf 	bl	800f0c0 <xQueueGenericCreateStatic>
 800ed22:	61f8      	str	r0, [r7, #28]
 800ed24:	e008      	b.n	800ed38 <osMessageQueueNew+0xbc>
      #endif
    }
    else {
      if (mem == 0) {
 800ed26:	69bb      	ldr	r3, [r7, #24]
 800ed28:	2b00      	cmp	r3, #0
 800ed2a:	d105      	bne.n	800ed38 <osMessageQueueNew+0xbc>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 800ed2c:	2200      	movs	r2, #0
 800ed2e:	68b9      	ldr	r1, [r7, #8]
 800ed30:	68f8      	ldr	r0, [r7, #12]
 800ed32:	f000 fa3d 	bl	800f1b0 <xQueueGenericCreate>
 800ed36:	61f8      	str	r0, [r7, #28]
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 800ed38:	69fb      	ldr	r3, [r7, #28]
 800ed3a:	2b00      	cmp	r3, #0
 800ed3c:	d00c      	beq.n	800ed58 <osMessageQueueNew+0xdc>
      if (attr != NULL) {
 800ed3e:	687b      	ldr	r3, [r7, #4]
 800ed40:	2b00      	cmp	r3, #0
 800ed42:	d003      	beq.n	800ed4c <osMessageQueueNew+0xd0>
        name = attr->name;
 800ed44:	687b      	ldr	r3, [r7, #4]
 800ed46:	681b      	ldr	r3, [r3, #0]
 800ed48:	617b      	str	r3, [r7, #20]
 800ed4a:	e001      	b.n	800ed50 <osMessageQueueNew+0xd4>
      } else {
        name = NULL;
 800ed4c:	2300      	movs	r3, #0
 800ed4e:	617b      	str	r3, [r7, #20]
      }
      vQueueAddToRegistry (hQueue, name);
 800ed50:	6979      	ldr	r1, [r7, #20]
 800ed52:	69f8      	ldr	r0, [r7, #28]
 800ed54:	f000 fe94 	bl	800fa80 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 800ed58:	69fb      	ldr	r3, [r7, #28]
}
 800ed5a:	4618      	mov	r0, r3
 800ed5c:	3720      	adds	r7, #32
 800ed5e:	46bd      	mov	sp, r7
 800ed60:	bd80      	pop	{r7, pc}
	...

0800ed64 <osMessageQueueGet>:
  }

  return (stat);
}

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 800ed64:	b580      	push	{r7, lr}
 800ed66:	b088      	sub	sp, #32
 800ed68:	af00      	add	r7, sp, #0
 800ed6a:	60f8      	str	r0, [r7, #12]
 800ed6c:	60b9      	str	r1, [r7, #8]
 800ed6e:	607a      	str	r2, [r7, #4]
 800ed70:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 800ed72:	68fb      	ldr	r3, [r7, #12]
 800ed74:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 800ed76:	2300      	movs	r3, #0
 800ed78:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800ed7a:	f3ef 8305 	mrs	r3, IPSR
 800ed7e:	617b      	str	r3, [r7, #20]
  return(result);
 800ed80:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 800ed82:	2b00      	cmp	r3, #0
 800ed84:	d028      	beq.n	800edd8 <osMessageQueueGet+0x74>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800ed86:	69bb      	ldr	r3, [r7, #24]
 800ed88:	2b00      	cmp	r3, #0
 800ed8a:	d005      	beq.n	800ed98 <osMessageQueueGet+0x34>
 800ed8c:	68bb      	ldr	r3, [r7, #8]
 800ed8e:	2b00      	cmp	r3, #0
 800ed90:	d002      	beq.n	800ed98 <osMessageQueueGet+0x34>
 800ed92:	683b      	ldr	r3, [r7, #0]
 800ed94:	2b00      	cmp	r3, #0
 800ed96:	d003      	beq.n	800eda0 <osMessageQueueGet+0x3c>
      stat = osErrorParameter;
 800ed98:	f06f 0303 	mvn.w	r3, #3
 800ed9c:	61fb      	str	r3, [r7, #28]
 800ed9e:	e037      	b.n	800ee10 <osMessageQueueGet+0xac>
    }
    else {
      yield = pdFALSE;
 800eda0:	2300      	movs	r3, #0
 800eda2:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 800eda4:	f107 0310 	add.w	r3, r7, #16
 800eda8:	461a      	mov	r2, r3
 800edaa:	68b9      	ldr	r1, [r7, #8]
 800edac:	69b8      	ldr	r0, [r7, #24]
 800edae:	f000 fcd7 	bl	800f760 <xQueueReceiveFromISR>
 800edb2:	4603      	mov	r3, r0
 800edb4:	2b01      	cmp	r3, #1
 800edb6:	d003      	beq.n	800edc0 <osMessageQueueGet+0x5c>
        stat = osErrorResource;
 800edb8:	f06f 0302 	mvn.w	r3, #2
 800edbc:	61fb      	str	r3, [r7, #28]
 800edbe:	e027      	b.n	800ee10 <osMessageQueueGet+0xac>
      } else {
        portYIELD_FROM_ISR (yield);
 800edc0:	693b      	ldr	r3, [r7, #16]
 800edc2:	2b00      	cmp	r3, #0
 800edc4:	d024      	beq.n	800ee10 <osMessageQueueGet+0xac>
 800edc6:	4b15      	ldr	r3, [pc, #84]	; (800ee1c <osMessageQueueGet+0xb8>)
 800edc8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800edcc:	601a      	str	r2, [r3, #0]
 800edce:	f3bf 8f4f 	dsb	sy
 800edd2:	f3bf 8f6f 	isb	sy
 800edd6:	e01b      	b.n	800ee10 <osMessageQueueGet+0xac>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 800edd8:	69bb      	ldr	r3, [r7, #24]
 800edda:	2b00      	cmp	r3, #0
 800eddc:	d002      	beq.n	800ede4 <osMessageQueueGet+0x80>
 800edde:	68bb      	ldr	r3, [r7, #8]
 800ede0:	2b00      	cmp	r3, #0
 800ede2:	d103      	bne.n	800edec <osMessageQueueGet+0x88>
      stat = osErrorParameter;
 800ede4:	f06f 0303 	mvn.w	r3, #3
 800ede8:	61fb      	str	r3, [r7, #28]
 800edea:	e011      	b.n	800ee10 <osMessageQueueGet+0xac>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 800edec:	683a      	ldr	r2, [r7, #0]
 800edee:	68b9      	ldr	r1, [r7, #8]
 800edf0:	69b8      	ldr	r0, [r7, #24]
 800edf2:	f000 fbd5 	bl	800f5a0 <xQueueReceive>
 800edf6:	4603      	mov	r3, r0
 800edf8:	2b01      	cmp	r3, #1
 800edfa:	d009      	beq.n	800ee10 <osMessageQueueGet+0xac>
        if (timeout != 0U) {
 800edfc:	683b      	ldr	r3, [r7, #0]
 800edfe:	2b00      	cmp	r3, #0
 800ee00:	d003      	beq.n	800ee0a <osMessageQueueGet+0xa6>
          stat = osErrorTimeout;
 800ee02:	f06f 0301 	mvn.w	r3, #1
 800ee06:	61fb      	str	r3, [r7, #28]
 800ee08:	e002      	b.n	800ee10 <osMessageQueueGet+0xac>
        } else {
          stat = osErrorResource;
 800ee0a:	f06f 0302 	mvn.w	r3, #2
 800ee0e:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 800ee10:	69fb      	ldr	r3, [r7, #28]
}
 800ee12:	4618      	mov	r0, r3
 800ee14:	3720      	adds	r7, #32
 800ee16:	46bd      	mov	sp, r7
 800ee18:	bd80      	pop	{r7, pc}
 800ee1a:	bf00      	nop
 800ee1c:	e000ed04 	.word	0xe000ed04

0800ee20 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800ee20:	b480      	push	{r7}
 800ee22:	b085      	sub	sp, #20
 800ee24:	af00      	add	r7, sp, #0
 800ee26:	60f8      	str	r0, [r7, #12]
 800ee28:	60b9      	str	r1, [r7, #8]
 800ee2a:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800ee2c:	68fb      	ldr	r3, [r7, #12]
 800ee2e:	4a07      	ldr	r2, [pc, #28]	; (800ee4c <vApplicationGetIdleTaskMemory+0x2c>)
 800ee30:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800ee32:	68bb      	ldr	r3, [r7, #8]
 800ee34:	4a06      	ldr	r2, [pc, #24]	; (800ee50 <vApplicationGetIdleTaskMemory+0x30>)
 800ee36:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800ee38:	687b      	ldr	r3, [r7, #4]
 800ee3a:	2280      	movs	r2, #128	; 0x80
 800ee3c:	601a      	str	r2, [r3, #0]
}
 800ee3e:	bf00      	nop
 800ee40:	3714      	adds	r7, #20
 800ee42:	46bd      	mov	sp, r7
 800ee44:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee48:	4770      	bx	lr
 800ee4a:	bf00      	nop
 800ee4c:	200001c0 	.word	0x200001c0
 800ee50:	2000021c 	.word	0x2000021c

0800ee54 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800ee54:	b480      	push	{r7}
 800ee56:	b085      	sub	sp, #20
 800ee58:	af00      	add	r7, sp, #0
 800ee5a:	60f8      	str	r0, [r7, #12]
 800ee5c:	60b9      	str	r1, [r7, #8]
 800ee5e:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800ee60:	68fb      	ldr	r3, [r7, #12]
 800ee62:	4a07      	ldr	r2, [pc, #28]	; (800ee80 <vApplicationGetTimerTaskMemory+0x2c>)
 800ee64:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800ee66:	68bb      	ldr	r3, [r7, #8]
 800ee68:	4a06      	ldr	r2, [pc, #24]	; (800ee84 <vApplicationGetTimerTaskMemory+0x30>)
 800ee6a:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800ee6c:	687b      	ldr	r3, [r7, #4]
 800ee6e:	f44f 7280 	mov.w	r2, #256	; 0x100
 800ee72:	601a      	str	r2, [r3, #0]
}
 800ee74:	bf00      	nop
 800ee76:	3714      	adds	r7, #20
 800ee78:	46bd      	mov	sp, r7
 800ee7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee7e:	4770      	bx	lr
 800ee80:	2000041c 	.word	0x2000041c
 800ee84:	20000478 	.word	0x20000478

0800ee88 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800ee88:	b480      	push	{r7}
 800ee8a:	b083      	sub	sp, #12
 800ee8c:	af00      	add	r7, sp, #0
 800ee8e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800ee90:	687b      	ldr	r3, [r7, #4]
 800ee92:	f103 0208 	add.w	r2, r3, #8
 800ee96:	687b      	ldr	r3, [r7, #4]
 800ee98:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800ee9a:	687b      	ldr	r3, [r7, #4]
 800ee9c:	f04f 32ff 	mov.w	r2, #4294967295
 800eea0:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800eea2:	687b      	ldr	r3, [r7, #4]
 800eea4:	f103 0208 	add.w	r2, r3, #8
 800eea8:	687b      	ldr	r3, [r7, #4]
 800eeaa:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800eeac:	687b      	ldr	r3, [r7, #4]
 800eeae:	f103 0208 	add.w	r2, r3, #8
 800eeb2:	687b      	ldr	r3, [r7, #4]
 800eeb4:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800eeb6:	687b      	ldr	r3, [r7, #4]
 800eeb8:	2200      	movs	r2, #0
 800eeba:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800eebc:	bf00      	nop
 800eebe:	370c      	adds	r7, #12
 800eec0:	46bd      	mov	sp, r7
 800eec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eec6:	4770      	bx	lr

0800eec8 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800eec8:	b480      	push	{r7}
 800eeca:	b083      	sub	sp, #12
 800eecc:	af00      	add	r7, sp, #0
 800eece:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800eed0:	687b      	ldr	r3, [r7, #4]
 800eed2:	2200      	movs	r2, #0
 800eed4:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800eed6:	bf00      	nop
 800eed8:	370c      	adds	r7, #12
 800eeda:	46bd      	mov	sp, r7
 800eedc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eee0:	4770      	bx	lr

0800eee2 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800eee2:	b480      	push	{r7}
 800eee4:	b085      	sub	sp, #20
 800eee6:	af00      	add	r7, sp, #0
 800eee8:	6078      	str	r0, [r7, #4]
 800eeea:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800eeec:	687b      	ldr	r3, [r7, #4]
 800eeee:	685b      	ldr	r3, [r3, #4]
 800eef0:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800eef2:	683b      	ldr	r3, [r7, #0]
 800eef4:	68fa      	ldr	r2, [r7, #12]
 800eef6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800eef8:	68fb      	ldr	r3, [r7, #12]
 800eefa:	689a      	ldr	r2, [r3, #8]
 800eefc:	683b      	ldr	r3, [r7, #0]
 800eefe:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800ef00:	68fb      	ldr	r3, [r7, #12]
 800ef02:	689b      	ldr	r3, [r3, #8]
 800ef04:	683a      	ldr	r2, [r7, #0]
 800ef06:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800ef08:	68fb      	ldr	r3, [r7, #12]
 800ef0a:	683a      	ldr	r2, [r7, #0]
 800ef0c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800ef0e:	683b      	ldr	r3, [r7, #0]
 800ef10:	687a      	ldr	r2, [r7, #4]
 800ef12:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800ef14:	687b      	ldr	r3, [r7, #4]
 800ef16:	681b      	ldr	r3, [r3, #0]
 800ef18:	1c5a      	adds	r2, r3, #1
 800ef1a:	687b      	ldr	r3, [r7, #4]
 800ef1c:	601a      	str	r2, [r3, #0]
}
 800ef1e:	bf00      	nop
 800ef20:	3714      	adds	r7, #20
 800ef22:	46bd      	mov	sp, r7
 800ef24:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef28:	4770      	bx	lr

0800ef2a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800ef2a:	b480      	push	{r7}
 800ef2c:	b085      	sub	sp, #20
 800ef2e:	af00      	add	r7, sp, #0
 800ef30:	6078      	str	r0, [r7, #4]
 800ef32:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800ef34:	683b      	ldr	r3, [r7, #0]
 800ef36:	681b      	ldr	r3, [r3, #0]
 800ef38:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800ef3a:	68bb      	ldr	r3, [r7, #8]
 800ef3c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ef40:	d103      	bne.n	800ef4a <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800ef42:	687b      	ldr	r3, [r7, #4]
 800ef44:	691b      	ldr	r3, [r3, #16]
 800ef46:	60fb      	str	r3, [r7, #12]
 800ef48:	e00c      	b.n	800ef64 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800ef4a:	687b      	ldr	r3, [r7, #4]
 800ef4c:	3308      	adds	r3, #8
 800ef4e:	60fb      	str	r3, [r7, #12]
 800ef50:	e002      	b.n	800ef58 <vListInsert+0x2e>
 800ef52:	68fb      	ldr	r3, [r7, #12]
 800ef54:	685b      	ldr	r3, [r3, #4]
 800ef56:	60fb      	str	r3, [r7, #12]
 800ef58:	68fb      	ldr	r3, [r7, #12]
 800ef5a:	685b      	ldr	r3, [r3, #4]
 800ef5c:	681b      	ldr	r3, [r3, #0]
 800ef5e:	68ba      	ldr	r2, [r7, #8]
 800ef60:	429a      	cmp	r2, r3
 800ef62:	d2f6      	bcs.n	800ef52 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800ef64:	68fb      	ldr	r3, [r7, #12]
 800ef66:	685a      	ldr	r2, [r3, #4]
 800ef68:	683b      	ldr	r3, [r7, #0]
 800ef6a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800ef6c:	683b      	ldr	r3, [r7, #0]
 800ef6e:	685b      	ldr	r3, [r3, #4]
 800ef70:	683a      	ldr	r2, [r7, #0]
 800ef72:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800ef74:	683b      	ldr	r3, [r7, #0]
 800ef76:	68fa      	ldr	r2, [r7, #12]
 800ef78:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800ef7a:	68fb      	ldr	r3, [r7, #12]
 800ef7c:	683a      	ldr	r2, [r7, #0]
 800ef7e:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800ef80:	683b      	ldr	r3, [r7, #0]
 800ef82:	687a      	ldr	r2, [r7, #4]
 800ef84:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800ef86:	687b      	ldr	r3, [r7, #4]
 800ef88:	681b      	ldr	r3, [r3, #0]
 800ef8a:	1c5a      	adds	r2, r3, #1
 800ef8c:	687b      	ldr	r3, [r7, #4]
 800ef8e:	601a      	str	r2, [r3, #0]
}
 800ef90:	bf00      	nop
 800ef92:	3714      	adds	r7, #20
 800ef94:	46bd      	mov	sp, r7
 800ef96:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef9a:	4770      	bx	lr

0800ef9c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800ef9c:	b480      	push	{r7}
 800ef9e:	b085      	sub	sp, #20
 800efa0:	af00      	add	r7, sp, #0
 800efa2:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800efa4:	687b      	ldr	r3, [r7, #4]
 800efa6:	691b      	ldr	r3, [r3, #16]
 800efa8:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800efaa:	687b      	ldr	r3, [r7, #4]
 800efac:	685b      	ldr	r3, [r3, #4]
 800efae:	687a      	ldr	r2, [r7, #4]
 800efb0:	6892      	ldr	r2, [r2, #8]
 800efb2:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800efb4:	687b      	ldr	r3, [r7, #4]
 800efb6:	689b      	ldr	r3, [r3, #8]
 800efb8:	687a      	ldr	r2, [r7, #4]
 800efba:	6852      	ldr	r2, [r2, #4]
 800efbc:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800efbe:	68fb      	ldr	r3, [r7, #12]
 800efc0:	685b      	ldr	r3, [r3, #4]
 800efc2:	687a      	ldr	r2, [r7, #4]
 800efc4:	429a      	cmp	r2, r3
 800efc6:	d103      	bne.n	800efd0 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800efc8:	687b      	ldr	r3, [r7, #4]
 800efca:	689a      	ldr	r2, [r3, #8]
 800efcc:	68fb      	ldr	r3, [r7, #12]
 800efce:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800efd0:	687b      	ldr	r3, [r7, #4]
 800efd2:	2200      	movs	r2, #0
 800efd4:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800efd6:	68fb      	ldr	r3, [r7, #12]
 800efd8:	681b      	ldr	r3, [r3, #0]
 800efda:	1e5a      	subs	r2, r3, #1
 800efdc:	68fb      	ldr	r3, [r7, #12]
 800efde:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800efe0:	68fb      	ldr	r3, [r7, #12]
 800efe2:	681b      	ldr	r3, [r3, #0]
}
 800efe4:	4618      	mov	r0, r3
 800efe6:	3714      	adds	r7, #20
 800efe8:	46bd      	mov	sp, r7
 800efea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800efee:	4770      	bx	lr

0800eff0 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800eff0:	b580      	push	{r7, lr}
 800eff2:	b084      	sub	sp, #16
 800eff4:	af00      	add	r7, sp, #0
 800eff6:	6078      	str	r0, [r7, #4]
 800eff8:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800effa:	687b      	ldr	r3, [r7, #4]
 800effc:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800effe:	68fb      	ldr	r3, [r7, #12]
 800f000:	2b00      	cmp	r3, #0
 800f002:	d10a      	bne.n	800f01a <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800f004:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f008:	f383 8811 	msr	BASEPRI, r3
 800f00c:	f3bf 8f6f 	isb	sy
 800f010:	f3bf 8f4f 	dsb	sy
 800f014:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800f016:	bf00      	nop
 800f018:	e7fe      	b.n	800f018 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800f01a:	f002 f91b 	bl	8011254 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800f01e:	68fb      	ldr	r3, [r7, #12]
 800f020:	681a      	ldr	r2, [r3, #0]
 800f022:	68fb      	ldr	r3, [r7, #12]
 800f024:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f026:	68f9      	ldr	r1, [r7, #12]
 800f028:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800f02a:	fb01 f303 	mul.w	r3, r1, r3
 800f02e:	441a      	add	r2, r3
 800f030:	68fb      	ldr	r3, [r7, #12]
 800f032:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800f034:	68fb      	ldr	r3, [r7, #12]
 800f036:	2200      	movs	r2, #0
 800f038:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800f03a:	68fb      	ldr	r3, [r7, #12]
 800f03c:	681a      	ldr	r2, [r3, #0]
 800f03e:	68fb      	ldr	r3, [r7, #12]
 800f040:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800f042:	68fb      	ldr	r3, [r7, #12]
 800f044:	681a      	ldr	r2, [r3, #0]
 800f046:	68fb      	ldr	r3, [r7, #12]
 800f048:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f04a:	3b01      	subs	r3, #1
 800f04c:	68f9      	ldr	r1, [r7, #12]
 800f04e:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800f050:	fb01 f303 	mul.w	r3, r1, r3
 800f054:	441a      	add	r2, r3
 800f056:	68fb      	ldr	r3, [r7, #12]
 800f058:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800f05a:	68fb      	ldr	r3, [r7, #12]
 800f05c:	22ff      	movs	r2, #255	; 0xff
 800f05e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800f062:	68fb      	ldr	r3, [r7, #12]
 800f064:	22ff      	movs	r2, #255	; 0xff
 800f066:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800f06a:	683b      	ldr	r3, [r7, #0]
 800f06c:	2b00      	cmp	r3, #0
 800f06e:	d114      	bne.n	800f09a <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800f070:	68fb      	ldr	r3, [r7, #12]
 800f072:	691b      	ldr	r3, [r3, #16]
 800f074:	2b00      	cmp	r3, #0
 800f076:	d01a      	beq.n	800f0ae <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800f078:	68fb      	ldr	r3, [r7, #12]
 800f07a:	3310      	adds	r3, #16
 800f07c:	4618      	mov	r0, r3
 800f07e:	f001 f9cf 	bl	8010420 <xTaskRemoveFromEventList>
 800f082:	4603      	mov	r3, r0
 800f084:	2b00      	cmp	r3, #0
 800f086:	d012      	beq.n	800f0ae <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800f088:	4b0c      	ldr	r3, [pc, #48]	; (800f0bc <xQueueGenericReset+0xcc>)
 800f08a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f08e:	601a      	str	r2, [r3, #0]
 800f090:	f3bf 8f4f 	dsb	sy
 800f094:	f3bf 8f6f 	isb	sy
 800f098:	e009      	b.n	800f0ae <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800f09a:	68fb      	ldr	r3, [r7, #12]
 800f09c:	3310      	adds	r3, #16
 800f09e:	4618      	mov	r0, r3
 800f0a0:	f7ff fef2 	bl	800ee88 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800f0a4:	68fb      	ldr	r3, [r7, #12]
 800f0a6:	3324      	adds	r3, #36	; 0x24
 800f0a8:	4618      	mov	r0, r3
 800f0aa:	f7ff feed 	bl	800ee88 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800f0ae:	f002 f901 	bl	80112b4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800f0b2:	2301      	movs	r3, #1
}
 800f0b4:	4618      	mov	r0, r3
 800f0b6:	3710      	adds	r7, #16
 800f0b8:	46bd      	mov	sp, r7
 800f0ba:	bd80      	pop	{r7, pc}
 800f0bc:	e000ed04 	.word	0xe000ed04

0800f0c0 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800f0c0:	b580      	push	{r7, lr}
 800f0c2:	b08e      	sub	sp, #56	; 0x38
 800f0c4:	af02      	add	r7, sp, #8
 800f0c6:	60f8      	str	r0, [r7, #12]
 800f0c8:	60b9      	str	r1, [r7, #8]
 800f0ca:	607a      	str	r2, [r7, #4]
 800f0cc:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800f0ce:	68fb      	ldr	r3, [r7, #12]
 800f0d0:	2b00      	cmp	r3, #0
 800f0d2:	d10a      	bne.n	800f0ea <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 800f0d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f0d8:	f383 8811 	msr	BASEPRI, r3
 800f0dc:	f3bf 8f6f 	isb	sy
 800f0e0:	f3bf 8f4f 	dsb	sy
 800f0e4:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800f0e6:	bf00      	nop
 800f0e8:	e7fe      	b.n	800f0e8 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800f0ea:	683b      	ldr	r3, [r7, #0]
 800f0ec:	2b00      	cmp	r3, #0
 800f0ee:	d10a      	bne.n	800f106 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 800f0f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f0f4:	f383 8811 	msr	BASEPRI, r3
 800f0f8:	f3bf 8f6f 	isb	sy
 800f0fc:	f3bf 8f4f 	dsb	sy
 800f100:	627b      	str	r3, [r7, #36]	; 0x24
}
 800f102:	bf00      	nop
 800f104:	e7fe      	b.n	800f104 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800f106:	687b      	ldr	r3, [r7, #4]
 800f108:	2b00      	cmp	r3, #0
 800f10a:	d002      	beq.n	800f112 <xQueueGenericCreateStatic+0x52>
 800f10c:	68bb      	ldr	r3, [r7, #8]
 800f10e:	2b00      	cmp	r3, #0
 800f110:	d001      	beq.n	800f116 <xQueueGenericCreateStatic+0x56>
 800f112:	2301      	movs	r3, #1
 800f114:	e000      	b.n	800f118 <xQueueGenericCreateStatic+0x58>
 800f116:	2300      	movs	r3, #0
 800f118:	2b00      	cmp	r3, #0
 800f11a:	d10a      	bne.n	800f132 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 800f11c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f120:	f383 8811 	msr	BASEPRI, r3
 800f124:	f3bf 8f6f 	isb	sy
 800f128:	f3bf 8f4f 	dsb	sy
 800f12c:	623b      	str	r3, [r7, #32]
}
 800f12e:	bf00      	nop
 800f130:	e7fe      	b.n	800f130 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800f132:	687b      	ldr	r3, [r7, #4]
 800f134:	2b00      	cmp	r3, #0
 800f136:	d102      	bne.n	800f13e <xQueueGenericCreateStatic+0x7e>
 800f138:	68bb      	ldr	r3, [r7, #8]
 800f13a:	2b00      	cmp	r3, #0
 800f13c:	d101      	bne.n	800f142 <xQueueGenericCreateStatic+0x82>
 800f13e:	2301      	movs	r3, #1
 800f140:	e000      	b.n	800f144 <xQueueGenericCreateStatic+0x84>
 800f142:	2300      	movs	r3, #0
 800f144:	2b00      	cmp	r3, #0
 800f146:	d10a      	bne.n	800f15e <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 800f148:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f14c:	f383 8811 	msr	BASEPRI, r3
 800f150:	f3bf 8f6f 	isb	sy
 800f154:	f3bf 8f4f 	dsb	sy
 800f158:	61fb      	str	r3, [r7, #28]
}
 800f15a:	bf00      	nop
 800f15c:	e7fe      	b.n	800f15c <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800f15e:	2350      	movs	r3, #80	; 0x50
 800f160:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800f162:	697b      	ldr	r3, [r7, #20]
 800f164:	2b50      	cmp	r3, #80	; 0x50
 800f166:	d00a      	beq.n	800f17e <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 800f168:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f16c:	f383 8811 	msr	BASEPRI, r3
 800f170:	f3bf 8f6f 	isb	sy
 800f174:	f3bf 8f4f 	dsb	sy
 800f178:	61bb      	str	r3, [r7, #24]
}
 800f17a:	bf00      	nop
 800f17c:	e7fe      	b.n	800f17c <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800f17e:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800f180:	683b      	ldr	r3, [r7, #0]
 800f182:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800f184:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f186:	2b00      	cmp	r3, #0
 800f188:	d00d      	beq.n	800f1a6 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800f18a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f18c:	2201      	movs	r2, #1
 800f18e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800f192:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800f196:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f198:	9300      	str	r3, [sp, #0]
 800f19a:	4613      	mov	r3, r2
 800f19c:	687a      	ldr	r2, [r7, #4]
 800f19e:	68b9      	ldr	r1, [r7, #8]
 800f1a0:	68f8      	ldr	r0, [r7, #12]
 800f1a2:	f000 f83f 	bl	800f224 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800f1a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800f1a8:	4618      	mov	r0, r3
 800f1aa:	3730      	adds	r7, #48	; 0x30
 800f1ac:	46bd      	mov	sp, r7
 800f1ae:	bd80      	pop	{r7, pc}

0800f1b0 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800f1b0:	b580      	push	{r7, lr}
 800f1b2:	b08a      	sub	sp, #40	; 0x28
 800f1b4:	af02      	add	r7, sp, #8
 800f1b6:	60f8      	str	r0, [r7, #12]
 800f1b8:	60b9      	str	r1, [r7, #8]
 800f1ba:	4613      	mov	r3, r2
 800f1bc:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800f1be:	68fb      	ldr	r3, [r7, #12]
 800f1c0:	2b00      	cmp	r3, #0
 800f1c2:	d10a      	bne.n	800f1da <xQueueGenericCreate+0x2a>
	__asm volatile
 800f1c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f1c8:	f383 8811 	msr	BASEPRI, r3
 800f1cc:	f3bf 8f6f 	isb	sy
 800f1d0:	f3bf 8f4f 	dsb	sy
 800f1d4:	613b      	str	r3, [r7, #16]
}
 800f1d6:	bf00      	nop
 800f1d8:	e7fe      	b.n	800f1d8 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800f1da:	68fb      	ldr	r3, [r7, #12]
 800f1dc:	68ba      	ldr	r2, [r7, #8]
 800f1de:	fb02 f303 	mul.w	r3, r2, r3
 800f1e2:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800f1e4:	69fb      	ldr	r3, [r7, #28]
 800f1e6:	3350      	adds	r3, #80	; 0x50
 800f1e8:	4618      	mov	r0, r3
 800f1ea:	f002 f955 	bl	8011498 <pvPortMalloc>
 800f1ee:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800f1f0:	69bb      	ldr	r3, [r7, #24]
 800f1f2:	2b00      	cmp	r3, #0
 800f1f4:	d011      	beq.n	800f21a <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800f1f6:	69bb      	ldr	r3, [r7, #24]
 800f1f8:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800f1fa:	697b      	ldr	r3, [r7, #20]
 800f1fc:	3350      	adds	r3, #80	; 0x50
 800f1fe:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800f200:	69bb      	ldr	r3, [r7, #24]
 800f202:	2200      	movs	r2, #0
 800f204:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800f208:	79fa      	ldrb	r2, [r7, #7]
 800f20a:	69bb      	ldr	r3, [r7, #24]
 800f20c:	9300      	str	r3, [sp, #0]
 800f20e:	4613      	mov	r3, r2
 800f210:	697a      	ldr	r2, [r7, #20]
 800f212:	68b9      	ldr	r1, [r7, #8]
 800f214:	68f8      	ldr	r0, [r7, #12]
 800f216:	f000 f805 	bl	800f224 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800f21a:	69bb      	ldr	r3, [r7, #24]
	}
 800f21c:	4618      	mov	r0, r3
 800f21e:	3720      	adds	r7, #32
 800f220:	46bd      	mov	sp, r7
 800f222:	bd80      	pop	{r7, pc}

0800f224 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800f224:	b580      	push	{r7, lr}
 800f226:	b084      	sub	sp, #16
 800f228:	af00      	add	r7, sp, #0
 800f22a:	60f8      	str	r0, [r7, #12]
 800f22c:	60b9      	str	r1, [r7, #8]
 800f22e:	607a      	str	r2, [r7, #4]
 800f230:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800f232:	68bb      	ldr	r3, [r7, #8]
 800f234:	2b00      	cmp	r3, #0
 800f236:	d103      	bne.n	800f240 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800f238:	69bb      	ldr	r3, [r7, #24]
 800f23a:	69ba      	ldr	r2, [r7, #24]
 800f23c:	601a      	str	r2, [r3, #0]
 800f23e:	e002      	b.n	800f246 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800f240:	69bb      	ldr	r3, [r7, #24]
 800f242:	687a      	ldr	r2, [r7, #4]
 800f244:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800f246:	69bb      	ldr	r3, [r7, #24]
 800f248:	68fa      	ldr	r2, [r7, #12]
 800f24a:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800f24c:	69bb      	ldr	r3, [r7, #24]
 800f24e:	68ba      	ldr	r2, [r7, #8]
 800f250:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800f252:	2101      	movs	r1, #1
 800f254:	69b8      	ldr	r0, [r7, #24]
 800f256:	f7ff fecb 	bl	800eff0 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800f25a:	69bb      	ldr	r3, [r7, #24]
 800f25c:	78fa      	ldrb	r2, [r7, #3]
 800f25e:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800f262:	bf00      	nop
 800f264:	3710      	adds	r7, #16
 800f266:	46bd      	mov	sp, r7
 800f268:	bd80      	pop	{r7, pc}
	...

0800f26c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800f26c:	b580      	push	{r7, lr}
 800f26e:	b08e      	sub	sp, #56	; 0x38
 800f270:	af00      	add	r7, sp, #0
 800f272:	60f8      	str	r0, [r7, #12]
 800f274:	60b9      	str	r1, [r7, #8]
 800f276:	607a      	str	r2, [r7, #4]
 800f278:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800f27a:	2300      	movs	r3, #0
 800f27c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800f27e:	68fb      	ldr	r3, [r7, #12]
 800f280:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800f282:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f284:	2b00      	cmp	r3, #0
 800f286:	d10a      	bne.n	800f29e <xQueueGenericSend+0x32>
	__asm volatile
 800f288:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f28c:	f383 8811 	msr	BASEPRI, r3
 800f290:	f3bf 8f6f 	isb	sy
 800f294:	f3bf 8f4f 	dsb	sy
 800f298:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800f29a:	bf00      	nop
 800f29c:	e7fe      	b.n	800f29c <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800f29e:	68bb      	ldr	r3, [r7, #8]
 800f2a0:	2b00      	cmp	r3, #0
 800f2a2:	d103      	bne.n	800f2ac <xQueueGenericSend+0x40>
 800f2a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f2a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f2a8:	2b00      	cmp	r3, #0
 800f2aa:	d101      	bne.n	800f2b0 <xQueueGenericSend+0x44>
 800f2ac:	2301      	movs	r3, #1
 800f2ae:	e000      	b.n	800f2b2 <xQueueGenericSend+0x46>
 800f2b0:	2300      	movs	r3, #0
 800f2b2:	2b00      	cmp	r3, #0
 800f2b4:	d10a      	bne.n	800f2cc <xQueueGenericSend+0x60>
	__asm volatile
 800f2b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f2ba:	f383 8811 	msr	BASEPRI, r3
 800f2be:	f3bf 8f6f 	isb	sy
 800f2c2:	f3bf 8f4f 	dsb	sy
 800f2c6:	627b      	str	r3, [r7, #36]	; 0x24
}
 800f2c8:	bf00      	nop
 800f2ca:	e7fe      	b.n	800f2ca <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800f2cc:	683b      	ldr	r3, [r7, #0]
 800f2ce:	2b02      	cmp	r3, #2
 800f2d0:	d103      	bne.n	800f2da <xQueueGenericSend+0x6e>
 800f2d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f2d4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f2d6:	2b01      	cmp	r3, #1
 800f2d8:	d101      	bne.n	800f2de <xQueueGenericSend+0x72>
 800f2da:	2301      	movs	r3, #1
 800f2dc:	e000      	b.n	800f2e0 <xQueueGenericSend+0x74>
 800f2de:	2300      	movs	r3, #0
 800f2e0:	2b00      	cmp	r3, #0
 800f2e2:	d10a      	bne.n	800f2fa <xQueueGenericSend+0x8e>
	__asm volatile
 800f2e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f2e8:	f383 8811 	msr	BASEPRI, r3
 800f2ec:	f3bf 8f6f 	isb	sy
 800f2f0:	f3bf 8f4f 	dsb	sy
 800f2f4:	623b      	str	r3, [r7, #32]
}
 800f2f6:	bf00      	nop
 800f2f8:	e7fe      	b.n	800f2f8 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800f2fa:	f001 fa4f 	bl	801079c <xTaskGetSchedulerState>
 800f2fe:	4603      	mov	r3, r0
 800f300:	2b00      	cmp	r3, #0
 800f302:	d102      	bne.n	800f30a <xQueueGenericSend+0x9e>
 800f304:	687b      	ldr	r3, [r7, #4]
 800f306:	2b00      	cmp	r3, #0
 800f308:	d101      	bne.n	800f30e <xQueueGenericSend+0xa2>
 800f30a:	2301      	movs	r3, #1
 800f30c:	e000      	b.n	800f310 <xQueueGenericSend+0xa4>
 800f30e:	2300      	movs	r3, #0
 800f310:	2b00      	cmp	r3, #0
 800f312:	d10a      	bne.n	800f32a <xQueueGenericSend+0xbe>
	__asm volatile
 800f314:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f318:	f383 8811 	msr	BASEPRI, r3
 800f31c:	f3bf 8f6f 	isb	sy
 800f320:	f3bf 8f4f 	dsb	sy
 800f324:	61fb      	str	r3, [r7, #28]
}
 800f326:	bf00      	nop
 800f328:	e7fe      	b.n	800f328 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800f32a:	f001 ff93 	bl	8011254 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800f32e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f330:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800f332:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f334:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f336:	429a      	cmp	r2, r3
 800f338:	d302      	bcc.n	800f340 <xQueueGenericSend+0xd4>
 800f33a:	683b      	ldr	r3, [r7, #0]
 800f33c:	2b02      	cmp	r3, #2
 800f33e:	d129      	bne.n	800f394 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800f340:	683a      	ldr	r2, [r7, #0]
 800f342:	68b9      	ldr	r1, [r7, #8]
 800f344:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800f346:	f000 fa8b 	bl	800f860 <prvCopyDataToQueue>
 800f34a:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800f34c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f34e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f350:	2b00      	cmp	r3, #0
 800f352:	d010      	beq.n	800f376 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800f354:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f356:	3324      	adds	r3, #36	; 0x24
 800f358:	4618      	mov	r0, r3
 800f35a:	f001 f861 	bl	8010420 <xTaskRemoveFromEventList>
 800f35e:	4603      	mov	r3, r0
 800f360:	2b00      	cmp	r3, #0
 800f362:	d013      	beq.n	800f38c <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800f364:	4b3f      	ldr	r3, [pc, #252]	; (800f464 <xQueueGenericSend+0x1f8>)
 800f366:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f36a:	601a      	str	r2, [r3, #0]
 800f36c:	f3bf 8f4f 	dsb	sy
 800f370:	f3bf 8f6f 	isb	sy
 800f374:	e00a      	b.n	800f38c <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800f376:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f378:	2b00      	cmp	r3, #0
 800f37a:	d007      	beq.n	800f38c <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800f37c:	4b39      	ldr	r3, [pc, #228]	; (800f464 <xQueueGenericSend+0x1f8>)
 800f37e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f382:	601a      	str	r2, [r3, #0]
 800f384:	f3bf 8f4f 	dsb	sy
 800f388:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800f38c:	f001 ff92 	bl	80112b4 <vPortExitCritical>
				return pdPASS;
 800f390:	2301      	movs	r3, #1
 800f392:	e063      	b.n	800f45c <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800f394:	687b      	ldr	r3, [r7, #4]
 800f396:	2b00      	cmp	r3, #0
 800f398:	d103      	bne.n	800f3a2 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800f39a:	f001 ff8b 	bl	80112b4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800f39e:	2300      	movs	r3, #0
 800f3a0:	e05c      	b.n	800f45c <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800f3a2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f3a4:	2b00      	cmp	r3, #0
 800f3a6:	d106      	bne.n	800f3b6 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800f3a8:	f107 0314 	add.w	r3, r7, #20
 800f3ac:	4618      	mov	r0, r3
 800f3ae:	f001 f89b 	bl	80104e8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800f3b2:	2301      	movs	r3, #1
 800f3b4:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800f3b6:	f001 ff7d 	bl	80112b4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800f3ba:	f000 fdfb 	bl	800ffb4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800f3be:	f001 ff49 	bl	8011254 <vPortEnterCritical>
 800f3c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f3c4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800f3c8:	b25b      	sxtb	r3, r3
 800f3ca:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f3ce:	d103      	bne.n	800f3d8 <xQueueGenericSend+0x16c>
 800f3d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f3d2:	2200      	movs	r2, #0
 800f3d4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800f3d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f3da:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800f3de:	b25b      	sxtb	r3, r3
 800f3e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f3e4:	d103      	bne.n	800f3ee <xQueueGenericSend+0x182>
 800f3e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f3e8:	2200      	movs	r2, #0
 800f3ea:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800f3ee:	f001 ff61 	bl	80112b4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800f3f2:	1d3a      	adds	r2, r7, #4
 800f3f4:	f107 0314 	add.w	r3, r7, #20
 800f3f8:	4611      	mov	r1, r2
 800f3fa:	4618      	mov	r0, r3
 800f3fc:	f001 f88a 	bl	8010514 <xTaskCheckForTimeOut>
 800f400:	4603      	mov	r3, r0
 800f402:	2b00      	cmp	r3, #0
 800f404:	d124      	bne.n	800f450 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800f406:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800f408:	f000 fb22 	bl	800fa50 <prvIsQueueFull>
 800f40c:	4603      	mov	r3, r0
 800f40e:	2b00      	cmp	r3, #0
 800f410:	d018      	beq.n	800f444 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800f412:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f414:	3310      	adds	r3, #16
 800f416:	687a      	ldr	r2, [r7, #4]
 800f418:	4611      	mov	r1, r2
 800f41a:	4618      	mov	r0, r3
 800f41c:	f000 ffb0 	bl	8010380 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800f420:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800f422:	f000 faad 	bl	800f980 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800f426:	f000 fdd3 	bl	800ffd0 <xTaskResumeAll>
 800f42a:	4603      	mov	r3, r0
 800f42c:	2b00      	cmp	r3, #0
 800f42e:	f47f af7c 	bne.w	800f32a <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800f432:	4b0c      	ldr	r3, [pc, #48]	; (800f464 <xQueueGenericSend+0x1f8>)
 800f434:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f438:	601a      	str	r2, [r3, #0]
 800f43a:	f3bf 8f4f 	dsb	sy
 800f43e:	f3bf 8f6f 	isb	sy
 800f442:	e772      	b.n	800f32a <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800f444:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800f446:	f000 fa9b 	bl	800f980 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800f44a:	f000 fdc1 	bl	800ffd0 <xTaskResumeAll>
 800f44e:	e76c      	b.n	800f32a <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800f450:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800f452:	f000 fa95 	bl	800f980 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800f456:	f000 fdbb 	bl	800ffd0 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800f45a:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800f45c:	4618      	mov	r0, r3
 800f45e:	3738      	adds	r7, #56	; 0x38
 800f460:	46bd      	mov	sp, r7
 800f462:	bd80      	pop	{r7, pc}
 800f464:	e000ed04 	.word	0xe000ed04

0800f468 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800f468:	b580      	push	{r7, lr}
 800f46a:	b090      	sub	sp, #64	; 0x40
 800f46c:	af00      	add	r7, sp, #0
 800f46e:	60f8      	str	r0, [r7, #12]
 800f470:	60b9      	str	r1, [r7, #8]
 800f472:	607a      	str	r2, [r7, #4]
 800f474:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800f476:	68fb      	ldr	r3, [r7, #12]
 800f478:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 800f47a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f47c:	2b00      	cmp	r3, #0
 800f47e:	d10a      	bne.n	800f496 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 800f480:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f484:	f383 8811 	msr	BASEPRI, r3
 800f488:	f3bf 8f6f 	isb	sy
 800f48c:	f3bf 8f4f 	dsb	sy
 800f490:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800f492:	bf00      	nop
 800f494:	e7fe      	b.n	800f494 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800f496:	68bb      	ldr	r3, [r7, #8]
 800f498:	2b00      	cmp	r3, #0
 800f49a:	d103      	bne.n	800f4a4 <xQueueGenericSendFromISR+0x3c>
 800f49c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f49e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f4a0:	2b00      	cmp	r3, #0
 800f4a2:	d101      	bne.n	800f4a8 <xQueueGenericSendFromISR+0x40>
 800f4a4:	2301      	movs	r3, #1
 800f4a6:	e000      	b.n	800f4aa <xQueueGenericSendFromISR+0x42>
 800f4a8:	2300      	movs	r3, #0
 800f4aa:	2b00      	cmp	r3, #0
 800f4ac:	d10a      	bne.n	800f4c4 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 800f4ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f4b2:	f383 8811 	msr	BASEPRI, r3
 800f4b6:	f3bf 8f6f 	isb	sy
 800f4ba:	f3bf 8f4f 	dsb	sy
 800f4be:	627b      	str	r3, [r7, #36]	; 0x24
}
 800f4c0:	bf00      	nop
 800f4c2:	e7fe      	b.n	800f4c2 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800f4c4:	683b      	ldr	r3, [r7, #0]
 800f4c6:	2b02      	cmp	r3, #2
 800f4c8:	d103      	bne.n	800f4d2 <xQueueGenericSendFromISR+0x6a>
 800f4ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f4cc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f4ce:	2b01      	cmp	r3, #1
 800f4d0:	d101      	bne.n	800f4d6 <xQueueGenericSendFromISR+0x6e>
 800f4d2:	2301      	movs	r3, #1
 800f4d4:	e000      	b.n	800f4d8 <xQueueGenericSendFromISR+0x70>
 800f4d6:	2300      	movs	r3, #0
 800f4d8:	2b00      	cmp	r3, #0
 800f4da:	d10a      	bne.n	800f4f2 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 800f4dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f4e0:	f383 8811 	msr	BASEPRI, r3
 800f4e4:	f3bf 8f6f 	isb	sy
 800f4e8:	f3bf 8f4f 	dsb	sy
 800f4ec:	623b      	str	r3, [r7, #32]
}
 800f4ee:	bf00      	nop
 800f4f0:	e7fe      	b.n	800f4f0 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800f4f2:	f001 ff91 	bl	8011418 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800f4f6:	f3ef 8211 	mrs	r2, BASEPRI
 800f4fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f4fe:	f383 8811 	msr	BASEPRI, r3
 800f502:	f3bf 8f6f 	isb	sy
 800f506:	f3bf 8f4f 	dsb	sy
 800f50a:	61fa      	str	r2, [r7, #28]
 800f50c:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800f50e:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800f510:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800f512:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f514:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800f516:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f518:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f51a:	429a      	cmp	r2, r3
 800f51c:	d302      	bcc.n	800f524 <xQueueGenericSendFromISR+0xbc>
 800f51e:	683b      	ldr	r3, [r7, #0]
 800f520:	2b02      	cmp	r3, #2
 800f522:	d12f      	bne.n	800f584 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800f524:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f526:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800f52a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800f52e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f530:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f532:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800f534:	683a      	ldr	r2, [r7, #0]
 800f536:	68b9      	ldr	r1, [r7, #8]
 800f538:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800f53a:	f000 f991 	bl	800f860 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800f53e:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 800f542:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f546:	d112      	bne.n	800f56e <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800f548:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f54a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f54c:	2b00      	cmp	r3, #0
 800f54e:	d016      	beq.n	800f57e <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800f550:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f552:	3324      	adds	r3, #36	; 0x24
 800f554:	4618      	mov	r0, r3
 800f556:	f000 ff63 	bl	8010420 <xTaskRemoveFromEventList>
 800f55a:	4603      	mov	r3, r0
 800f55c:	2b00      	cmp	r3, #0
 800f55e:	d00e      	beq.n	800f57e <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800f560:	687b      	ldr	r3, [r7, #4]
 800f562:	2b00      	cmp	r3, #0
 800f564:	d00b      	beq.n	800f57e <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800f566:	687b      	ldr	r3, [r7, #4]
 800f568:	2201      	movs	r2, #1
 800f56a:	601a      	str	r2, [r3, #0]
 800f56c:	e007      	b.n	800f57e <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800f56e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800f572:	3301      	adds	r3, #1
 800f574:	b2db      	uxtb	r3, r3
 800f576:	b25a      	sxtb	r2, r3
 800f578:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f57a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800f57e:	2301      	movs	r3, #1
 800f580:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 800f582:	e001      	b.n	800f588 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800f584:	2300      	movs	r3, #0
 800f586:	63fb      	str	r3, [r7, #60]	; 0x3c
 800f588:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f58a:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800f58c:	697b      	ldr	r3, [r7, #20]
 800f58e:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800f592:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800f594:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800f596:	4618      	mov	r0, r3
 800f598:	3740      	adds	r7, #64	; 0x40
 800f59a:	46bd      	mov	sp, r7
 800f59c:	bd80      	pop	{r7, pc}
	...

0800f5a0 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800f5a0:	b580      	push	{r7, lr}
 800f5a2:	b08c      	sub	sp, #48	; 0x30
 800f5a4:	af00      	add	r7, sp, #0
 800f5a6:	60f8      	str	r0, [r7, #12]
 800f5a8:	60b9      	str	r1, [r7, #8]
 800f5aa:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800f5ac:	2300      	movs	r3, #0
 800f5ae:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800f5b0:	68fb      	ldr	r3, [r7, #12]
 800f5b2:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800f5b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f5b6:	2b00      	cmp	r3, #0
 800f5b8:	d10a      	bne.n	800f5d0 <xQueueReceive+0x30>
	__asm volatile
 800f5ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f5be:	f383 8811 	msr	BASEPRI, r3
 800f5c2:	f3bf 8f6f 	isb	sy
 800f5c6:	f3bf 8f4f 	dsb	sy
 800f5ca:	623b      	str	r3, [r7, #32]
}
 800f5cc:	bf00      	nop
 800f5ce:	e7fe      	b.n	800f5ce <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800f5d0:	68bb      	ldr	r3, [r7, #8]
 800f5d2:	2b00      	cmp	r3, #0
 800f5d4:	d103      	bne.n	800f5de <xQueueReceive+0x3e>
 800f5d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f5d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f5da:	2b00      	cmp	r3, #0
 800f5dc:	d101      	bne.n	800f5e2 <xQueueReceive+0x42>
 800f5de:	2301      	movs	r3, #1
 800f5e0:	e000      	b.n	800f5e4 <xQueueReceive+0x44>
 800f5e2:	2300      	movs	r3, #0
 800f5e4:	2b00      	cmp	r3, #0
 800f5e6:	d10a      	bne.n	800f5fe <xQueueReceive+0x5e>
	__asm volatile
 800f5e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f5ec:	f383 8811 	msr	BASEPRI, r3
 800f5f0:	f3bf 8f6f 	isb	sy
 800f5f4:	f3bf 8f4f 	dsb	sy
 800f5f8:	61fb      	str	r3, [r7, #28]
}
 800f5fa:	bf00      	nop
 800f5fc:	e7fe      	b.n	800f5fc <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800f5fe:	f001 f8cd 	bl	801079c <xTaskGetSchedulerState>
 800f602:	4603      	mov	r3, r0
 800f604:	2b00      	cmp	r3, #0
 800f606:	d102      	bne.n	800f60e <xQueueReceive+0x6e>
 800f608:	687b      	ldr	r3, [r7, #4]
 800f60a:	2b00      	cmp	r3, #0
 800f60c:	d101      	bne.n	800f612 <xQueueReceive+0x72>
 800f60e:	2301      	movs	r3, #1
 800f610:	e000      	b.n	800f614 <xQueueReceive+0x74>
 800f612:	2300      	movs	r3, #0
 800f614:	2b00      	cmp	r3, #0
 800f616:	d10a      	bne.n	800f62e <xQueueReceive+0x8e>
	__asm volatile
 800f618:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f61c:	f383 8811 	msr	BASEPRI, r3
 800f620:	f3bf 8f6f 	isb	sy
 800f624:	f3bf 8f4f 	dsb	sy
 800f628:	61bb      	str	r3, [r7, #24]
}
 800f62a:	bf00      	nop
 800f62c:	e7fe      	b.n	800f62c <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800f62e:	f001 fe11 	bl	8011254 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800f632:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f634:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f636:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800f638:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f63a:	2b00      	cmp	r3, #0
 800f63c:	d01f      	beq.n	800f67e <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800f63e:	68b9      	ldr	r1, [r7, #8]
 800f640:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800f642:	f000 f977 	bl	800f934 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800f646:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f648:	1e5a      	subs	r2, r3, #1
 800f64a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f64c:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800f64e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f650:	691b      	ldr	r3, [r3, #16]
 800f652:	2b00      	cmp	r3, #0
 800f654:	d00f      	beq.n	800f676 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800f656:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f658:	3310      	adds	r3, #16
 800f65a:	4618      	mov	r0, r3
 800f65c:	f000 fee0 	bl	8010420 <xTaskRemoveFromEventList>
 800f660:	4603      	mov	r3, r0
 800f662:	2b00      	cmp	r3, #0
 800f664:	d007      	beq.n	800f676 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800f666:	4b3d      	ldr	r3, [pc, #244]	; (800f75c <xQueueReceive+0x1bc>)
 800f668:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f66c:	601a      	str	r2, [r3, #0]
 800f66e:	f3bf 8f4f 	dsb	sy
 800f672:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800f676:	f001 fe1d 	bl	80112b4 <vPortExitCritical>
				return pdPASS;
 800f67a:	2301      	movs	r3, #1
 800f67c:	e069      	b.n	800f752 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800f67e:	687b      	ldr	r3, [r7, #4]
 800f680:	2b00      	cmp	r3, #0
 800f682:	d103      	bne.n	800f68c <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800f684:	f001 fe16 	bl	80112b4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800f688:	2300      	movs	r3, #0
 800f68a:	e062      	b.n	800f752 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 800f68c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f68e:	2b00      	cmp	r3, #0
 800f690:	d106      	bne.n	800f6a0 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800f692:	f107 0310 	add.w	r3, r7, #16
 800f696:	4618      	mov	r0, r3
 800f698:	f000 ff26 	bl	80104e8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800f69c:	2301      	movs	r3, #1
 800f69e:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800f6a0:	f001 fe08 	bl	80112b4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800f6a4:	f000 fc86 	bl	800ffb4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800f6a8:	f001 fdd4 	bl	8011254 <vPortEnterCritical>
 800f6ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f6ae:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800f6b2:	b25b      	sxtb	r3, r3
 800f6b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f6b8:	d103      	bne.n	800f6c2 <xQueueReceive+0x122>
 800f6ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f6bc:	2200      	movs	r2, #0
 800f6be:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800f6c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f6c4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800f6c8:	b25b      	sxtb	r3, r3
 800f6ca:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f6ce:	d103      	bne.n	800f6d8 <xQueueReceive+0x138>
 800f6d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f6d2:	2200      	movs	r2, #0
 800f6d4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800f6d8:	f001 fdec 	bl	80112b4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800f6dc:	1d3a      	adds	r2, r7, #4
 800f6de:	f107 0310 	add.w	r3, r7, #16
 800f6e2:	4611      	mov	r1, r2
 800f6e4:	4618      	mov	r0, r3
 800f6e6:	f000 ff15 	bl	8010514 <xTaskCheckForTimeOut>
 800f6ea:	4603      	mov	r3, r0
 800f6ec:	2b00      	cmp	r3, #0
 800f6ee:	d123      	bne.n	800f738 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800f6f0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800f6f2:	f000 f997 	bl	800fa24 <prvIsQueueEmpty>
 800f6f6:	4603      	mov	r3, r0
 800f6f8:	2b00      	cmp	r3, #0
 800f6fa:	d017      	beq.n	800f72c <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800f6fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f6fe:	3324      	adds	r3, #36	; 0x24
 800f700:	687a      	ldr	r2, [r7, #4]
 800f702:	4611      	mov	r1, r2
 800f704:	4618      	mov	r0, r3
 800f706:	f000 fe3b 	bl	8010380 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800f70a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800f70c:	f000 f938 	bl	800f980 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800f710:	f000 fc5e 	bl	800ffd0 <xTaskResumeAll>
 800f714:	4603      	mov	r3, r0
 800f716:	2b00      	cmp	r3, #0
 800f718:	d189      	bne.n	800f62e <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800f71a:	4b10      	ldr	r3, [pc, #64]	; (800f75c <xQueueReceive+0x1bc>)
 800f71c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f720:	601a      	str	r2, [r3, #0]
 800f722:	f3bf 8f4f 	dsb	sy
 800f726:	f3bf 8f6f 	isb	sy
 800f72a:	e780      	b.n	800f62e <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800f72c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800f72e:	f000 f927 	bl	800f980 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800f732:	f000 fc4d 	bl	800ffd0 <xTaskResumeAll>
 800f736:	e77a      	b.n	800f62e <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800f738:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800f73a:	f000 f921 	bl	800f980 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800f73e:	f000 fc47 	bl	800ffd0 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800f742:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800f744:	f000 f96e 	bl	800fa24 <prvIsQueueEmpty>
 800f748:	4603      	mov	r3, r0
 800f74a:	2b00      	cmp	r3, #0
 800f74c:	f43f af6f 	beq.w	800f62e <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800f750:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800f752:	4618      	mov	r0, r3
 800f754:	3730      	adds	r7, #48	; 0x30
 800f756:	46bd      	mov	sp, r7
 800f758:	bd80      	pop	{r7, pc}
 800f75a:	bf00      	nop
 800f75c:	e000ed04 	.word	0xe000ed04

0800f760 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800f760:	b580      	push	{r7, lr}
 800f762:	b08e      	sub	sp, #56	; 0x38
 800f764:	af00      	add	r7, sp, #0
 800f766:	60f8      	str	r0, [r7, #12]
 800f768:	60b9      	str	r1, [r7, #8]
 800f76a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800f76c:	68fb      	ldr	r3, [r7, #12]
 800f76e:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800f770:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f772:	2b00      	cmp	r3, #0
 800f774:	d10a      	bne.n	800f78c <xQueueReceiveFromISR+0x2c>
	__asm volatile
 800f776:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f77a:	f383 8811 	msr	BASEPRI, r3
 800f77e:	f3bf 8f6f 	isb	sy
 800f782:	f3bf 8f4f 	dsb	sy
 800f786:	623b      	str	r3, [r7, #32]
}
 800f788:	bf00      	nop
 800f78a:	e7fe      	b.n	800f78a <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800f78c:	68bb      	ldr	r3, [r7, #8]
 800f78e:	2b00      	cmp	r3, #0
 800f790:	d103      	bne.n	800f79a <xQueueReceiveFromISR+0x3a>
 800f792:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f794:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f796:	2b00      	cmp	r3, #0
 800f798:	d101      	bne.n	800f79e <xQueueReceiveFromISR+0x3e>
 800f79a:	2301      	movs	r3, #1
 800f79c:	e000      	b.n	800f7a0 <xQueueReceiveFromISR+0x40>
 800f79e:	2300      	movs	r3, #0
 800f7a0:	2b00      	cmp	r3, #0
 800f7a2:	d10a      	bne.n	800f7ba <xQueueReceiveFromISR+0x5a>
	__asm volatile
 800f7a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f7a8:	f383 8811 	msr	BASEPRI, r3
 800f7ac:	f3bf 8f6f 	isb	sy
 800f7b0:	f3bf 8f4f 	dsb	sy
 800f7b4:	61fb      	str	r3, [r7, #28]
}
 800f7b6:	bf00      	nop
 800f7b8:	e7fe      	b.n	800f7b8 <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800f7ba:	f001 fe2d 	bl	8011418 <vPortValidateInterruptPriority>
	__asm volatile
 800f7be:	f3ef 8211 	mrs	r2, BASEPRI
 800f7c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f7c6:	f383 8811 	msr	BASEPRI, r3
 800f7ca:	f3bf 8f6f 	isb	sy
 800f7ce:	f3bf 8f4f 	dsb	sy
 800f7d2:	61ba      	str	r2, [r7, #24]
 800f7d4:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800f7d6:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800f7d8:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800f7da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f7dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f7de:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800f7e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f7e2:	2b00      	cmp	r3, #0
 800f7e4:	d02f      	beq.n	800f846 <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800f7e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f7e8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800f7ec:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800f7f0:	68b9      	ldr	r1, [r7, #8]
 800f7f2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800f7f4:	f000 f89e 	bl	800f934 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800f7f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f7fa:	1e5a      	subs	r2, r3, #1
 800f7fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f7fe:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 800f800:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800f804:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f808:	d112      	bne.n	800f830 <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800f80a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f80c:	691b      	ldr	r3, [r3, #16]
 800f80e:	2b00      	cmp	r3, #0
 800f810:	d016      	beq.n	800f840 <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800f812:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f814:	3310      	adds	r3, #16
 800f816:	4618      	mov	r0, r3
 800f818:	f000 fe02 	bl	8010420 <xTaskRemoveFromEventList>
 800f81c:	4603      	mov	r3, r0
 800f81e:	2b00      	cmp	r3, #0
 800f820:	d00e      	beq.n	800f840 <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800f822:	687b      	ldr	r3, [r7, #4]
 800f824:	2b00      	cmp	r3, #0
 800f826:	d00b      	beq.n	800f840 <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 800f828:	687b      	ldr	r3, [r7, #4]
 800f82a:	2201      	movs	r2, #1
 800f82c:	601a      	str	r2, [r3, #0]
 800f82e:	e007      	b.n	800f840 <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800f830:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800f834:	3301      	adds	r3, #1
 800f836:	b2db      	uxtb	r3, r3
 800f838:	b25a      	sxtb	r2, r3
 800f83a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f83c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 800f840:	2301      	movs	r3, #1
 800f842:	637b      	str	r3, [r7, #52]	; 0x34
 800f844:	e001      	b.n	800f84a <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 800f846:	2300      	movs	r3, #0
 800f848:	637b      	str	r3, [r7, #52]	; 0x34
 800f84a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f84c:	613b      	str	r3, [r7, #16]
	__asm volatile
 800f84e:	693b      	ldr	r3, [r7, #16]
 800f850:	f383 8811 	msr	BASEPRI, r3
}
 800f854:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800f856:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800f858:	4618      	mov	r0, r3
 800f85a:	3738      	adds	r7, #56	; 0x38
 800f85c:	46bd      	mov	sp, r7
 800f85e:	bd80      	pop	{r7, pc}

0800f860 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800f860:	b580      	push	{r7, lr}
 800f862:	b086      	sub	sp, #24
 800f864:	af00      	add	r7, sp, #0
 800f866:	60f8      	str	r0, [r7, #12]
 800f868:	60b9      	str	r1, [r7, #8]
 800f86a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800f86c:	2300      	movs	r3, #0
 800f86e:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800f870:	68fb      	ldr	r3, [r7, #12]
 800f872:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f874:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800f876:	68fb      	ldr	r3, [r7, #12]
 800f878:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f87a:	2b00      	cmp	r3, #0
 800f87c:	d10d      	bne.n	800f89a <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800f87e:	68fb      	ldr	r3, [r7, #12]
 800f880:	681b      	ldr	r3, [r3, #0]
 800f882:	2b00      	cmp	r3, #0
 800f884:	d14d      	bne.n	800f922 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800f886:	68fb      	ldr	r3, [r7, #12]
 800f888:	689b      	ldr	r3, [r3, #8]
 800f88a:	4618      	mov	r0, r3
 800f88c:	f000 ffa4 	bl	80107d8 <xTaskPriorityDisinherit>
 800f890:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800f892:	68fb      	ldr	r3, [r7, #12]
 800f894:	2200      	movs	r2, #0
 800f896:	609a      	str	r2, [r3, #8]
 800f898:	e043      	b.n	800f922 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800f89a:	687b      	ldr	r3, [r7, #4]
 800f89c:	2b00      	cmp	r3, #0
 800f89e:	d119      	bne.n	800f8d4 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800f8a0:	68fb      	ldr	r3, [r7, #12]
 800f8a2:	6858      	ldr	r0, [r3, #4]
 800f8a4:	68fb      	ldr	r3, [r7, #12]
 800f8a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f8a8:	461a      	mov	r2, r3
 800f8aa:	68b9      	ldr	r1, [r7, #8]
 800f8ac:	f002 fd78 	bl	80123a0 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800f8b0:	68fb      	ldr	r3, [r7, #12]
 800f8b2:	685a      	ldr	r2, [r3, #4]
 800f8b4:	68fb      	ldr	r3, [r7, #12]
 800f8b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f8b8:	441a      	add	r2, r3
 800f8ba:	68fb      	ldr	r3, [r7, #12]
 800f8bc:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800f8be:	68fb      	ldr	r3, [r7, #12]
 800f8c0:	685a      	ldr	r2, [r3, #4]
 800f8c2:	68fb      	ldr	r3, [r7, #12]
 800f8c4:	689b      	ldr	r3, [r3, #8]
 800f8c6:	429a      	cmp	r2, r3
 800f8c8:	d32b      	bcc.n	800f922 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800f8ca:	68fb      	ldr	r3, [r7, #12]
 800f8cc:	681a      	ldr	r2, [r3, #0]
 800f8ce:	68fb      	ldr	r3, [r7, #12]
 800f8d0:	605a      	str	r2, [r3, #4]
 800f8d2:	e026      	b.n	800f922 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800f8d4:	68fb      	ldr	r3, [r7, #12]
 800f8d6:	68d8      	ldr	r0, [r3, #12]
 800f8d8:	68fb      	ldr	r3, [r7, #12]
 800f8da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f8dc:	461a      	mov	r2, r3
 800f8de:	68b9      	ldr	r1, [r7, #8]
 800f8e0:	f002 fd5e 	bl	80123a0 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800f8e4:	68fb      	ldr	r3, [r7, #12]
 800f8e6:	68da      	ldr	r2, [r3, #12]
 800f8e8:	68fb      	ldr	r3, [r7, #12]
 800f8ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f8ec:	425b      	negs	r3, r3
 800f8ee:	441a      	add	r2, r3
 800f8f0:	68fb      	ldr	r3, [r7, #12]
 800f8f2:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800f8f4:	68fb      	ldr	r3, [r7, #12]
 800f8f6:	68da      	ldr	r2, [r3, #12]
 800f8f8:	68fb      	ldr	r3, [r7, #12]
 800f8fa:	681b      	ldr	r3, [r3, #0]
 800f8fc:	429a      	cmp	r2, r3
 800f8fe:	d207      	bcs.n	800f910 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800f900:	68fb      	ldr	r3, [r7, #12]
 800f902:	689a      	ldr	r2, [r3, #8]
 800f904:	68fb      	ldr	r3, [r7, #12]
 800f906:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f908:	425b      	negs	r3, r3
 800f90a:	441a      	add	r2, r3
 800f90c:	68fb      	ldr	r3, [r7, #12]
 800f90e:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800f910:	687b      	ldr	r3, [r7, #4]
 800f912:	2b02      	cmp	r3, #2
 800f914:	d105      	bne.n	800f922 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800f916:	693b      	ldr	r3, [r7, #16]
 800f918:	2b00      	cmp	r3, #0
 800f91a:	d002      	beq.n	800f922 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800f91c:	693b      	ldr	r3, [r7, #16]
 800f91e:	3b01      	subs	r3, #1
 800f920:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800f922:	693b      	ldr	r3, [r7, #16]
 800f924:	1c5a      	adds	r2, r3, #1
 800f926:	68fb      	ldr	r3, [r7, #12]
 800f928:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800f92a:	697b      	ldr	r3, [r7, #20]
}
 800f92c:	4618      	mov	r0, r3
 800f92e:	3718      	adds	r7, #24
 800f930:	46bd      	mov	sp, r7
 800f932:	bd80      	pop	{r7, pc}

0800f934 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800f934:	b580      	push	{r7, lr}
 800f936:	b082      	sub	sp, #8
 800f938:	af00      	add	r7, sp, #0
 800f93a:	6078      	str	r0, [r7, #4]
 800f93c:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800f93e:	687b      	ldr	r3, [r7, #4]
 800f940:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f942:	2b00      	cmp	r3, #0
 800f944:	d018      	beq.n	800f978 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800f946:	687b      	ldr	r3, [r7, #4]
 800f948:	68da      	ldr	r2, [r3, #12]
 800f94a:	687b      	ldr	r3, [r7, #4]
 800f94c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f94e:	441a      	add	r2, r3
 800f950:	687b      	ldr	r3, [r7, #4]
 800f952:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800f954:	687b      	ldr	r3, [r7, #4]
 800f956:	68da      	ldr	r2, [r3, #12]
 800f958:	687b      	ldr	r3, [r7, #4]
 800f95a:	689b      	ldr	r3, [r3, #8]
 800f95c:	429a      	cmp	r2, r3
 800f95e:	d303      	bcc.n	800f968 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800f960:	687b      	ldr	r3, [r7, #4]
 800f962:	681a      	ldr	r2, [r3, #0]
 800f964:	687b      	ldr	r3, [r7, #4]
 800f966:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800f968:	687b      	ldr	r3, [r7, #4]
 800f96a:	68d9      	ldr	r1, [r3, #12]
 800f96c:	687b      	ldr	r3, [r7, #4]
 800f96e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f970:	461a      	mov	r2, r3
 800f972:	6838      	ldr	r0, [r7, #0]
 800f974:	f002 fd14 	bl	80123a0 <memcpy>
	}
}
 800f978:	bf00      	nop
 800f97a:	3708      	adds	r7, #8
 800f97c:	46bd      	mov	sp, r7
 800f97e:	bd80      	pop	{r7, pc}

0800f980 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800f980:	b580      	push	{r7, lr}
 800f982:	b084      	sub	sp, #16
 800f984:	af00      	add	r7, sp, #0
 800f986:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800f988:	f001 fc64 	bl	8011254 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800f98c:	687b      	ldr	r3, [r7, #4]
 800f98e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800f992:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800f994:	e011      	b.n	800f9ba <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800f996:	687b      	ldr	r3, [r7, #4]
 800f998:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f99a:	2b00      	cmp	r3, #0
 800f99c:	d012      	beq.n	800f9c4 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800f99e:	687b      	ldr	r3, [r7, #4]
 800f9a0:	3324      	adds	r3, #36	; 0x24
 800f9a2:	4618      	mov	r0, r3
 800f9a4:	f000 fd3c 	bl	8010420 <xTaskRemoveFromEventList>
 800f9a8:	4603      	mov	r3, r0
 800f9aa:	2b00      	cmp	r3, #0
 800f9ac:	d001      	beq.n	800f9b2 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800f9ae:	f000 fe13 	bl	80105d8 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800f9b2:	7bfb      	ldrb	r3, [r7, #15]
 800f9b4:	3b01      	subs	r3, #1
 800f9b6:	b2db      	uxtb	r3, r3
 800f9b8:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800f9ba:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800f9be:	2b00      	cmp	r3, #0
 800f9c0:	dce9      	bgt.n	800f996 <prvUnlockQueue+0x16>
 800f9c2:	e000      	b.n	800f9c6 <prvUnlockQueue+0x46>
					break;
 800f9c4:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800f9c6:	687b      	ldr	r3, [r7, #4]
 800f9c8:	22ff      	movs	r2, #255	; 0xff
 800f9ca:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800f9ce:	f001 fc71 	bl	80112b4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800f9d2:	f001 fc3f 	bl	8011254 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800f9d6:	687b      	ldr	r3, [r7, #4]
 800f9d8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800f9dc:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800f9de:	e011      	b.n	800fa04 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800f9e0:	687b      	ldr	r3, [r7, #4]
 800f9e2:	691b      	ldr	r3, [r3, #16]
 800f9e4:	2b00      	cmp	r3, #0
 800f9e6:	d012      	beq.n	800fa0e <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800f9e8:	687b      	ldr	r3, [r7, #4]
 800f9ea:	3310      	adds	r3, #16
 800f9ec:	4618      	mov	r0, r3
 800f9ee:	f000 fd17 	bl	8010420 <xTaskRemoveFromEventList>
 800f9f2:	4603      	mov	r3, r0
 800f9f4:	2b00      	cmp	r3, #0
 800f9f6:	d001      	beq.n	800f9fc <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800f9f8:	f000 fdee 	bl	80105d8 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800f9fc:	7bbb      	ldrb	r3, [r7, #14]
 800f9fe:	3b01      	subs	r3, #1
 800fa00:	b2db      	uxtb	r3, r3
 800fa02:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800fa04:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800fa08:	2b00      	cmp	r3, #0
 800fa0a:	dce9      	bgt.n	800f9e0 <prvUnlockQueue+0x60>
 800fa0c:	e000      	b.n	800fa10 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800fa0e:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800fa10:	687b      	ldr	r3, [r7, #4]
 800fa12:	22ff      	movs	r2, #255	; 0xff
 800fa14:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800fa18:	f001 fc4c 	bl	80112b4 <vPortExitCritical>
}
 800fa1c:	bf00      	nop
 800fa1e:	3710      	adds	r7, #16
 800fa20:	46bd      	mov	sp, r7
 800fa22:	bd80      	pop	{r7, pc}

0800fa24 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800fa24:	b580      	push	{r7, lr}
 800fa26:	b084      	sub	sp, #16
 800fa28:	af00      	add	r7, sp, #0
 800fa2a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800fa2c:	f001 fc12 	bl	8011254 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800fa30:	687b      	ldr	r3, [r7, #4]
 800fa32:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800fa34:	2b00      	cmp	r3, #0
 800fa36:	d102      	bne.n	800fa3e <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800fa38:	2301      	movs	r3, #1
 800fa3a:	60fb      	str	r3, [r7, #12]
 800fa3c:	e001      	b.n	800fa42 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800fa3e:	2300      	movs	r3, #0
 800fa40:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800fa42:	f001 fc37 	bl	80112b4 <vPortExitCritical>

	return xReturn;
 800fa46:	68fb      	ldr	r3, [r7, #12]
}
 800fa48:	4618      	mov	r0, r3
 800fa4a:	3710      	adds	r7, #16
 800fa4c:	46bd      	mov	sp, r7
 800fa4e:	bd80      	pop	{r7, pc}

0800fa50 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800fa50:	b580      	push	{r7, lr}
 800fa52:	b084      	sub	sp, #16
 800fa54:	af00      	add	r7, sp, #0
 800fa56:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800fa58:	f001 fbfc 	bl	8011254 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800fa5c:	687b      	ldr	r3, [r7, #4]
 800fa5e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800fa60:	687b      	ldr	r3, [r7, #4]
 800fa62:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800fa64:	429a      	cmp	r2, r3
 800fa66:	d102      	bne.n	800fa6e <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800fa68:	2301      	movs	r3, #1
 800fa6a:	60fb      	str	r3, [r7, #12]
 800fa6c:	e001      	b.n	800fa72 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800fa6e:	2300      	movs	r3, #0
 800fa70:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800fa72:	f001 fc1f 	bl	80112b4 <vPortExitCritical>

	return xReturn;
 800fa76:	68fb      	ldr	r3, [r7, #12]
}
 800fa78:	4618      	mov	r0, r3
 800fa7a:	3710      	adds	r7, #16
 800fa7c:	46bd      	mov	sp, r7
 800fa7e:	bd80      	pop	{r7, pc}

0800fa80 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800fa80:	b480      	push	{r7}
 800fa82:	b085      	sub	sp, #20
 800fa84:	af00      	add	r7, sp, #0
 800fa86:	6078      	str	r0, [r7, #4]
 800fa88:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800fa8a:	2300      	movs	r3, #0
 800fa8c:	60fb      	str	r3, [r7, #12]
 800fa8e:	e014      	b.n	800faba <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800fa90:	4a0f      	ldr	r2, [pc, #60]	; (800fad0 <vQueueAddToRegistry+0x50>)
 800fa92:	68fb      	ldr	r3, [r7, #12]
 800fa94:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800fa98:	2b00      	cmp	r3, #0
 800fa9a:	d10b      	bne.n	800fab4 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800fa9c:	490c      	ldr	r1, [pc, #48]	; (800fad0 <vQueueAddToRegistry+0x50>)
 800fa9e:	68fb      	ldr	r3, [r7, #12]
 800faa0:	683a      	ldr	r2, [r7, #0]
 800faa2:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800faa6:	4a0a      	ldr	r2, [pc, #40]	; (800fad0 <vQueueAddToRegistry+0x50>)
 800faa8:	68fb      	ldr	r3, [r7, #12]
 800faaa:	00db      	lsls	r3, r3, #3
 800faac:	4413      	add	r3, r2
 800faae:	687a      	ldr	r2, [r7, #4]
 800fab0:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800fab2:	e006      	b.n	800fac2 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800fab4:	68fb      	ldr	r3, [r7, #12]
 800fab6:	3301      	adds	r3, #1
 800fab8:	60fb      	str	r3, [r7, #12]
 800faba:	68fb      	ldr	r3, [r7, #12]
 800fabc:	2b07      	cmp	r3, #7
 800fabe:	d9e7      	bls.n	800fa90 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800fac0:	bf00      	nop
 800fac2:	bf00      	nop
 800fac4:	3714      	adds	r7, #20
 800fac6:	46bd      	mov	sp, r7
 800fac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800facc:	4770      	bx	lr
 800face:	bf00      	nop
 800fad0:	2000575c 	.word	0x2000575c

0800fad4 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800fad4:	b580      	push	{r7, lr}
 800fad6:	b086      	sub	sp, #24
 800fad8:	af00      	add	r7, sp, #0
 800fada:	60f8      	str	r0, [r7, #12]
 800fadc:	60b9      	str	r1, [r7, #8]
 800fade:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800fae0:	68fb      	ldr	r3, [r7, #12]
 800fae2:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800fae4:	f001 fbb6 	bl	8011254 <vPortEnterCritical>
 800fae8:	697b      	ldr	r3, [r7, #20]
 800faea:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800faee:	b25b      	sxtb	r3, r3
 800faf0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800faf4:	d103      	bne.n	800fafe <vQueueWaitForMessageRestricted+0x2a>
 800faf6:	697b      	ldr	r3, [r7, #20]
 800faf8:	2200      	movs	r2, #0
 800fafa:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800fafe:	697b      	ldr	r3, [r7, #20]
 800fb00:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800fb04:	b25b      	sxtb	r3, r3
 800fb06:	f1b3 3fff 	cmp.w	r3, #4294967295
 800fb0a:	d103      	bne.n	800fb14 <vQueueWaitForMessageRestricted+0x40>
 800fb0c:	697b      	ldr	r3, [r7, #20]
 800fb0e:	2200      	movs	r2, #0
 800fb10:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800fb14:	f001 fbce 	bl	80112b4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800fb18:	697b      	ldr	r3, [r7, #20]
 800fb1a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800fb1c:	2b00      	cmp	r3, #0
 800fb1e:	d106      	bne.n	800fb2e <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800fb20:	697b      	ldr	r3, [r7, #20]
 800fb22:	3324      	adds	r3, #36	; 0x24
 800fb24:	687a      	ldr	r2, [r7, #4]
 800fb26:	68b9      	ldr	r1, [r7, #8]
 800fb28:	4618      	mov	r0, r3
 800fb2a:	f000 fc4d 	bl	80103c8 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800fb2e:	6978      	ldr	r0, [r7, #20]
 800fb30:	f7ff ff26 	bl	800f980 <prvUnlockQueue>
	}
 800fb34:	bf00      	nop
 800fb36:	3718      	adds	r7, #24
 800fb38:	46bd      	mov	sp, r7
 800fb3a:	bd80      	pop	{r7, pc}

0800fb3c <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800fb3c:	b580      	push	{r7, lr}
 800fb3e:	b08e      	sub	sp, #56	; 0x38
 800fb40:	af04      	add	r7, sp, #16
 800fb42:	60f8      	str	r0, [r7, #12]
 800fb44:	60b9      	str	r1, [r7, #8]
 800fb46:	607a      	str	r2, [r7, #4]
 800fb48:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800fb4a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fb4c:	2b00      	cmp	r3, #0
 800fb4e:	d10a      	bne.n	800fb66 <xTaskCreateStatic+0x2a>
	__asm volatile
 800fb50:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fb54:	f383 8811 	msr	BASEPRI, r3
 800fb58:	f3bf 8f6f 	isb	sy
 800fb5c:	f3bf 8f4f 	dsb	sy
 800fb60:	623b      	str	r3, [r7, #32]
}
 800fb62:	bf00      	nop
 800fb64:	e7fe      	b.n	800fb64 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800fb66:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fb68:	2b00      	cmp	r3, #0
 800fb6a:	d10a      	bne.n	800fb82 <xTaskCreateStatic+0x46>
	__asm volatile
 800fb6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fb70:	f383 8811 	msr	BASEPRI, r3
 800fb74:	f3bf 8f6f 	isb	sy
 800fb78:	f3bf 8f4f 	dsb	sy
 800fb7c:	61fb      	str	r3, [r7, #28]
}
 800fb7e:	bf00      	nop
 800fb80:	e7fe      	b.n	800fb80 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800fb82:	235c      	movs	r3, #92	; 0x5c
 800fb84:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800fb86:	693b      	ldr	r3, [r7, #16]
 800fb88:	2b5c      	cmp	r3, #92	; 0x5c
 800fb8a:	d00a      	beq.n	800fba2 <xTaskCreateStatic+0x66>
	__asm volatile
 800fb8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fb90:	f383 8811 	msr	BASEPRI, r3
 800fb94:	f3bf 8f6f 	isb	sy
 800fb98:	f3bf 8f4f 	dsb	sy
 800fb9c:	61bb      	str	r3, [r7, #24]
}
 800fb9e:	bf00      	nop
 800fba0:	e7fe      	b.n	800fba0 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800fba2:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800fba4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fba6:	2b00      	cmp	r3, #0
 800fba8:	d01e      	beq.n	800fbe8 <xTaskCreateStatic+0xac>
 800fbaa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fbac:	2b00      	cmp	r3, #0
 800fbae:	d01b      	beq.n	800fbe8 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800fbb0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fbb2:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800fbb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fbb6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800fbb8:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800fbba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fbbc:	2202      	movs	r2, #2
 800fbbe:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800fbc2:	2300      	movs	r3, #0
 800fbc4:	9303      	str	r3, [sp, #12]
 800fbc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fbc8:	9302      	str	r3, [sp, #8]
 800fbca:	f107 0314 	add.w	r3, r7, #20
 800fbce:	9301      	str	r3, [sp, #4]
 800fbd0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fbd2:	9300      	str	r3, [sp, #0]
 800fbd4:	683b      	ldr	r3, [r7, #0]
 800fbd6:	687a      	ldr	r2, [r7, #4]
 800fbd8:	68b9      	ldr	r1, [r7, #8]
 800fbda:	68f8      	ldr	r0, [r7, #12]
 800fbdc:	f000 f850 	bl	800fc80 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800fbe0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800fbe2:	f000 f8dd 	bl	800fda0 <prvAddNewTaskToReadyList>
 800fbe6:	e001      	b.n	800fbec <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 800fbe8:	2300      	movs	r3, #0
 800fbea:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800fbec:	697b      	ldr	r3, [r7, #20]
	}
 800fbee:	4618      	mov	r0, r3
 800fbf0:	3728      	adds	r7, #40	; 0x28
 800fbf2:	46bd      	mov	sp, r7
 800fbf4:	bd80      	pop	{r7, pc}

0800fbf6 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800fbf6:	b580      	push	{r7, lr}
 800fbf8:	b08c      	sub	sp, #48	; 0x30
 800fbfa:	af04      	add	r7, sp, #16
 800fbfc:	60f8      	str	r0, [r7, #12]
 800fbfe:	60b9      	str	r1, [r7, #8]
 800fc00:	603b      	str	r3, [r7, #0]
 800fc02:	4613      	mov	r3, r2
 800fc04:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800fc06:	88fb      	ldrh	r3, [r7, #6]
 800fc08:	009b      	lsls	r3, r3, #2
 800fc0a:	4618      	mov	r0, r3
 800fc0c:	f001 fc44 	bl	8011498 <pvPortMalloc>
 800fc10:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800fc12:	697b      	ldr	r3, [r7, #20]
 800fc14:	2b00      	cmp	r3, #0
 800fc16:	d00e      	beq.n	800fc36 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800fc18:	205c      	movs	r0, #92	; 0x5c
 800fc1a:	f001 fc3d 	bl	8011498 <pvPortMalloc>
 800fc1e:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800fc20:	69fb      	ldr	r3, [r7, #28]
 800fc22:	2b00      	cmp	r3, #0
 800fc24:	d003      	beq.n	800fc2e <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800fc26:	69fb      	ldr	r3, [r7, #28]
 800fc28:	697a      	ldr	r2, [r7, #20]
 800fc2a:	631a      	str	r2, [r3, #48]	; 0x30
 800fc2c:	e005      	b.n	800fc3a <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800fc2e:	6978      	ldr	r0, [r7, #20]
 800fc30:	f001 fcfe 	bl	8011630 <vPortFree>
 800fc34:	e001      	b.n	800fc3a <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800fc36:	2300      	movs	r3, #0
 800fc38:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800fc3a:	69fb      	ldr	r3, [r7, #28]
 800fc3c:	2b00      	cmp	r3, #0
 800fc3e:	d017      	beq.n	800fc70 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800fc40:	69fb      	ldr	r3, [r7, #28]
 800fc42:	2200      	movs	r2, #0
 800fc44:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800fc48:	88fa      	ldrh	r2, [r7, #6]
 800fc4a:	2300      	movs	r3, #0
 800fc4c:	9303      	str	r3, [sp, #12]
 800fc4e:	69fb      	ldr	r3, [r7, #28]
 800fc50:	9302      	str	r3, [sp, #8]
 800fc52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fc54:	9301      	str	r3, [sp, #4]
 800fc56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fc58:	9300      	str	r3, [sp, #0]
 800fc5a:	683b      	ldr	r3, [r7, #0]
 800fc5c:	68b9      	ldr	r1, [r7, #8]
 800fc5e:	68f8      	ldr	r0, [r7, #12]
 800fc60:	f000 f80e 	bl	800fc80 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800fc64:	69f8      	ldr	r0, [r7, #28]
 800fc66:	f000 f89b 	bl	800fda0 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800fc6a:	2301      	movs	r3, #1
 800fc6c:	61bb      	str	r3, [r7, #24]
 800fc6e:	e002      	b.n	800fc76 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800fc70:	f04f 33ff 	mov.w	r3, #4294967295
 800fc74:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800fc76:	69bb      	ldr	r3, [r7, #24]
	}
 800fc78:	4618      	mov	r0, r3
 800fc7a:	3720      	adds	r7, #32
 800fc7c:	46bd      	mov	sp, r7
 800fc7e:	bd80      	pop	{r7, pc}

0800fc80 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800fc80:	b580      	push	{r7, lr}
 800fc82:	b088      	sub	sp, #32
 800fc84:	af00      	add	r7, sp, #0
 800fc86:	60f8      	str	r0, [r7, #12]
 800fc88:	60b9      	str	r1, [r7, #8]
 800fc8a:	607a      	str	r2, [r7, #4]
 800fc8c:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800fc8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fc90:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800fc92:	687b      	ldr	r3, [r7, #4]
 800fc94:	009b      	lsls	r3, r3, #2
 800fc96:	461a      	mov	r2, r3
 800fc98:	21a5      	movs	r1, #165	; 0xa5
 800fc9a:	f002 fb8f 	bl	80123bc <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800fc9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fca0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800fca2:	6879      	ldr	r1, [r7, #4]
 800fca4:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 800fca8:	440b      	add	r3, r1
 800fcaa:	009b      	lsls	r3, r3, #2
 800fcac:	4413      	add	r3, r2
 800fcae:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800fcb0:	69bb      	ldr	r3, [r7, #24]
 800fcb2:	f023 0307 	bic.w	r3, r3, #7
 800fcb6:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800fcb8:	69bb      	ldr	r3, [r7, #24]
 800fcba:	f003 0307 	and.w	r3, r3, #7
 800fcbe:	2b00      	cmp	r3, #0
 800fcc0:	d00a      	beq.n	800fcd8 <prvInitialiseNewTask+0x58>
	__asm volatile
 800fcc2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fcc6:	f383 8811 	msr	BASEPRI, r3
 800fcca:	f3bf 8f6f 	isb	sy
 800fcce:	f3bf 8f4f 	dsb	sy
 800fcd2:	617b      	str	r3, [r7, #20]
}
 800fcd4:	bf00      	nop
 800fcd6:	e7fe      	b.n	800fcd6 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800fcd8:	68bb      	ldr	r3, [r7, #8]
 800fcda:	2b00      	cmp	r3, #0
 800fcdc:	d01f      	beq.n	800fd1e <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800fcde:	2300      	movs	r3, #0
 800fce0:	61fb      	str	r3, [r7, #28]
 800fce2:	e012      	b.n	800fd0a <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800fce4:	68ba      	ldr	r2, [r7, #8]
 800fce6:	69fb      	ldr	r3, [r7, #28]
 800fce8:	4413      	add	r3, r2
 800fcea:	7819      	ldrb	r1, [r3, #0]
 800fcec:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800fcee:	69fb      	ldr	r3, [r7, #28]
 800fcf0:	4413      	add	r3, r2
 800fcf2:	3334      	adds	r3, #52	; 0x34
 800fcf4:	460a      	mov	r2, r1
 800fcf6:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800fcf8:	68ba      	ldr	r2, [r7, #8]
 800fcfa:	69fb      	ldr	r3, [r7, #28]
 800fcfc:	4413      	add	r3, r2
 800fcfe:	781b      	ldrb	r3, [r3, #0]
 800fd00:	2b00      	cmp	r3, #0
 800fd02:	d006      	beq.n	800fd12 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800fd04:	69fb      	ldr	r3, [r7, #28]
 800fd06:	3301      	adds	r3, #1
 800fd08:	61fb      	str	r3, [r7, #28]
 800fd0a:	69fb      	ldr	r3, [r7, #28]
 800fd0c:	2b0f      	cmp	r3, #15
 800fd0e:	d9e9      	bls.n	800fce4 <prvInitialiseNewTask+0x64>
 800fd10:	e000      	b.n	800fd14 <prvInitialiseNewTask+0x94>
			{
				break;
 800fd12:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800fd14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fd16:	2200      	movs	r2, #0
 800fd18:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800fd1c:	e003      	b.n	800fd26 <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800fd1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fd20:	2200      	movs	r2, #0
 800fd22:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800fd26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fd28:	2b37      	cmp	r3, #55	; 0x37
 800fd2a:	d901      	bls.n	800fd30 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800fd2c:	2337      	movs	r3, #55	; 0x37
 800fd2e:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800fd30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fd32:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800fd34:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800fd36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fd38:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800fd3a:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800fd3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fd3e:	2200      	movs	r2, #0
 800fd40:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800fd42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fd44:	3304      	adds	r3, #4
 800fd46:	4618      	mov	r0, r3
 800fd48:	f7ff f8be 	bl	800eec8 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800fd4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fd4e:	3318      	adds	r3, #24
 800fd50:	4618      	mov	r0, r3
 800fd52:	f7ff f8b9 	bl	800eec8 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800fd56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fd58:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800fd5a:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800fd5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fd5e:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800fd62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fd64:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800fd66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fd68:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800fd6a:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800fd6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fd6e:	2200      	movs	r2, #0
 800fd70:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800fd72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fd74:	2200      	movs	r2, #0
 800fd76:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800fd7a:	683a      	ldr	r2, [r7, #0]
 800fd7c:	68f9      	ldr	r1, [r7, #12]
 800fd7e:	69b8      	ldr	r0, [r7, #24]
 800fd80:	f001 f93a 	bl	8010ff8 <pxPortInitialiseStack>
 800fd84:	4602      	mov	r2, r0
 800fd86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fd88:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800fd8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fd8c:	2b00      	cmp	r3, #0
 800fd8e:	d002      	beq.n	800fd96 <prvInitialiseNewTask+0x116>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800fd90:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fd92:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800fd94:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800fd96:	bf00      	nop
 800fd98:	3720      	adds	r7, #32
 800fd9a:	46bd      	mov	sp, r7
 800fd9c:	bd80      	pop	{r7, pc}
	...

0800fda0 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800fda0:	b580      	push	{r7, lr}
 800fda2:	b082      	sub	sp, #8
 800fda4:	af00      	add	r7, sp, #0
 800fda6:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800fda8:	f001 fa54 	bl	8011254 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800fdac:	4b2d      	ldr	r3, [pc, #180]	; (800fe64 <prvAddNewTaskToReadyList+0xc4>)
 800fdae:	681b      	ldr	r3, [r3, #0]
 800fdb0:	3301      	adds	r3, #1
 800fdb2:	4a2c      	ldr	r2, [pc, #176]	; (800fe64 <prvAddNewTaskToReadyList+0xc4>)
 800fdb4:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800fdb6:	4b2c      	ldr	r3, [pc, #176]	; (800fe68 <prvAddNewTaskToReadyList+0xc8>)
 800fdb8:	681b      	ldr	r3, [r3, #0]
 800fdba:	2b00      	cmp	r3, #0
 800fdbc:	d109      	bne.n	800fdd2 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800fdbe:	4a2a      	ldr	r2, [pc, #168]	; (800fe68 <prvAddNewTaskToReadyList+0xc8>)
 800fdc0:	687b      	ldr	r3, [r7, #4]
 800fdc2:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800fdc4:	4b27      	ldr	r3, [pc, #156]	; (800fe64 <prvAddNewTaskToReadyList+0xc4>)
 800fdc6:	681b      	ldr	r3, [r3, #0]
 800fdc8:	2b01      	cmp	r3, #1
 800fdca:	d110      	bne.n	800fdee <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800fdcc:	f000 fc28 	bl	8010620 <prvInitialiseTaskLists>
 800fdd0:	e00d      	b.n	800fdee <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800fdd2:	4b26      	ldr	r3, [pc, #152]	; (800fe6c <prvAddNewTaskToReadyList+0xcc>)
 800fdd4:	681b      	ldr	r3, [r3, #0]
 800fdd6:	2b00      	cmp	r3, #0
 800fdd8:	d109      	bne.n	800fdee <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800fdda:	4b23      	ldr	r3, [pc, #140]	; (800fe68 <prvAddNewTaskToReadyList+0xc8>)
 800fddc:	681b      	ldr	r3, [r3, #0]
 800fdde:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800fde0:	687b      	ldr	r3, [r7, #4]
 800fde2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fde4:	429a      	cmp	r2, r3
 800fde6:	d802      	bhi.n	800fdee <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800fde8:	4a1f      	ldr	r2, [pc, #124]	; (800fe68 <prvAddNewTaskToReadyList+0xc8>)
 800fdea:	687b      	ldr	r3, [r7, #4]
 800fdec:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800fdee:	4b20      	ldr	r3, [pc, #128]	; (800fe70 <prvAddNewTaskToReadyList+0xd0>)
 800fdf0:	681b      	ldr	r3, [r3, #0]
 800fdf2:	3301      	adds	r3, #1
 800fdf4:	4a1e      	ldr	r2, [pc, #120]	; (800fe70 <prvAddNewTaskToReadyList+0xd0>)
 800fdf6:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800fdf8:	4b1d      	ldr	r3, [pc, #116]	; (800fe70 <prvAddNewTaskToReadyList+0xd0>)
 800fdfa:	681a      	ldr	r2, [r3, #0]
 800fdfc:	687b      	ldr	r3, [r7, #4]
 800fdfe:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800fe00:	687b      	ldr	r3, [r7, #4]
 800fe02:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800fe04:	4b1b      	ldr	r3, [pc, #108]	; (800fe74 <prvAddNewTaskToReadyList+0xd4>)
 800fe06:	681b      	ldr	r3, [r3, #0]
 800fe08:	429a      	cmp	r2, r3
 800fe0a:	d903      	bls.n	800fe14 <prvAddNewTaskToReadyList+0x74>
 800fe0c:	687b      	ldr	r3, [r7, #4]
 800fe0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fe10:	4a18      	ldr	r2, [pc, #96]	; (800fe74 <prvAddNewTaskToReadyList+0xd4>)
 800fe12:	6013      	str	r3, [r2, #0]
 800fe14:	687b      	ldr	r3, [r7, #4]
 800fe16:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800fe18:	4613      	mov	r3, r2
 800fe1a:	009b      	lsls	r3, r3, #2
 800fe1c:	4413      	add	r3, r2
 800fe1e:	009b      	lsls	r3, r3, #2
 800fe20:	4a15      	ldr	r2, [pc, #84]	; (800fe78 <prvAddNewTaskToReadyList+0xd8>)
 800fe22:	441a      	add	r2, r3
 800fe24:	687b      	ldr	r3, [r7, #4]
 800fe26:	3304      	adds	r3, #4
 800fe28:	4619      	mov	r1, r3
 800fe2a:	4610      	mov	r0, r2
 800fe2c:	f7ff f859 	bl	800eee2 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800fe30:	f001 fa40 	bl	80112b4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800fe34:	4b0d      	ldr	r3, [pc, #52]	; (800fe6c <prvAddNewTaskToReadyList+0xcc>)
 800fe36:	681b      	ldr	r3, [r3, #0]
 800fe38:	2b00      	cmp	r3, #0
 800fe3a:	d00e      	beq.n	800fe5a <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800fe3c:	4b0a      	ldr	r3, [pc, #40]	; (800fe68 <prvAddNewTaskToReadyList+0xc8>)
 800fe3e:	681b      	ldr	r3, [r3, #0]
 800fe40:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800fe42:	687b      	ldr	r3, [r7, #4]
 800fe44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fe46:	429a      	cmp	r2, r3
 800fe48:	d207      	bcs.n	800fe5a <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800fe4a:	4b0c      	ldr	r3, [pc, #48]	; (800fe7c <prvAddNewTaskToReadyList+0xdc>)
 800fe4c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800fe50:	601a      	str	r2, [r3, #0]
 800fe52:	f3bf 8f4f 	dsb	sy
 800fe56:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800fe5a:	bf00      	nop
 800fe5c:	3708      	adds	r7, #8
 800fe5e:	46bd      	mov	sp, r7
 800fe60:	bd80      	pop	{r7, pc}
 800fe62:	bf00      	nop
 800fe64:	20000d4c 	.word	0x20000d4c
 800fe68:	20000878 	.word	0x20000878
 800fe6c:	20000d58 	.word	0x20000d58
 800fe70:	20000d68 	.word	0x20000d68
 800fe74:	20000d54 	.word	0x20000d54
 800fe78:	2000087c 	.word	0x2000087c
 800fe7c:	e000ed04 	.word	0xe000ed04

0800fe80 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800fe80:	b580      	push	{r7, lr}
 800fe82:	b084      	sub	sp, #16
 800fe84:	af00      	add	r7, sp, #0
 800fe86:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800fe88:	2300      	movs	r3, #0
 800fe8a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800fe8c:	687b      	ldr	r3, [r7, #4]
 800fe8e:	2b00      	cmp	r3, #0
 800fe90:	d017      	beq.n	800fec2 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800fe92:	4b13      	ldr	r3, [pc, #76]	; (800fee0 <vTaskDelay+0x60>)
 800fe94:	681b      	ldr	r3, [r3, #0]
 800fe96:	2b00      	cmp	r3, #0
 800fe98:	d00a      	beq.n	800feb0 <vTaskDelay+0x30>
	__asm volatile
 800fe9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fe9e:	f383 8811 	msr	BASEPRI, r3
 800fea2:	f3bf 8f6f 	isb	sy
 800fea6:	f3bf 8f4f 	dsb	sy
 800feaa:	60bb      	str	r3, [r7, #8]
}
 800feac:	bf00      	nop
 800feae:	e7fe      	b.n	800feae <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800feb0:	f000 f880 	bl	800ffb4 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800feb4:	2100      	movs	r1, #0
 800feb6:	6878      	ldr	r0, [r7, #4]
 800feb8:	f000 fcfc 	bl	80108b4 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800febc:	f000 f888 	bl	800ffd0 <xTaskResumeAll>
 800fec0:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800fec2:	68fb      	ldr	r3, [r7, #12]
 800fec4:	2b00      	cmp	r3, #0
 800fec6:	d107      	bne.n	800fed8 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 800fec8:	4b06      	ldr	r3, [pc, #24]	; (800fee4 <vTaskDelay+0x64>)
 800feca:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800fece:	601a      	str	r2, [r3, #0]
 800fed0:	f3bf 8f4f 	dsb	sy
 800fed4:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800fed8:	bf00      	nop
 800feda:	3710      	adds	r7, #16
 800fedc:	46bd      	mov	sp, r7
 800fede:	bd80      	pop	{r7, pc}
 800fee0:	20000d74 	.word	0x20000d74
 800fee4:	e000ed04 	.word	0xe000ed04

0800fee8 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800fee8:	b580      	push	{r7, lr}
 800feea:	b08a      	sub	sp, #40	; 0x28
 800feec:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800feee:	2300      	movs	r3, #0
 800fef0:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800fef2:	2300      	movs	r3, #0
 800fef4:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800fef6:	463a      	mov	r2, r7
 800fef8:	1d39      	adds	r1, r7, #4
 800fefa:	f107 0308 	add.w	r3, r7, #8
 800fefe:	4618      	mov	r0, r3
 800ff00:	f7fe ff8e 	bl	800ee20 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800ff04:	6839      	ldr	r1, [r7, #0]
 800ff06:	687b      	ldr	r3, [r7, #4]
 800ff08:	68ba      	ldr	r2, [r7, #8]
 800ff0a:	9202      	str	r2, [sp, #8]
 800ff0c:	9301      	str	r3, [sp, #4]
 800ff0e:	2300      	movs	r3, #0
 800ff10:	9300      	str	r3, [sp, #0]
 800ff12:	2300      	movs	r3, #0
 800ff14:	460a      	mov	r2, r1
 800ff16:	4921      	ldr	r1, [pc, #132]	; (800ff9c <vTaskStartScheduler+0xb4>)
 800ff18:	4821      	ldr	r0, [pc, #132]	; (800ffa0 <vTaskStartScheduler+0xb8>)
 800ff1a:	f7ff fe0f 	bl	800fb3c <xTaskCreateStatic>
 800ff1e:	4603      	mov	r3, r0
 800ff20:	4a20      	ldr	r2, [pc, #128]	; (800ffa4 <vTaskStartScheduler+0xbc>)
 800ff22:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800ff24:	4b1f      	ldr	r3, [pc, #124]	; (800ffa4 <vTaskStartScheduler+0xbc>)
 800ff26:	681b      	ldr	r3, [r3, #0]
 800ff28:	2b00      	cmp	r3, #0
 800ff2a:	d002      	beq.n	800ff32 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800ff2c:	2301      	movs	r3, #1
 800ff2e:	617b      	str	r3, [r7, #20]
 800ff30:	e001      	b.n	800ff36 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800ff32:	2300      	movs	r3, #0
 800ff34:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800ff36:	697b      	ldr	r3, [r7, #20]
 800ff38:	2b01      	cmp	r3, #1
 800ff3a:	d102      	bne.n	800ff42 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800ff3c:	f000 fd0e 	bl	801095c <xTimerCreateTimerTask>
 800ff40:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800ff42:	697b      	ldr	r3, [r7, #20]
 800ff44:	2b01      	cmp	r3, #1
 800ff46:	d116      	bne.n	800ff76 <vTaskStartScheduler+0x8e>
	__asm volatile
 800ff48:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ff4c:	f383 8811 	msr	BASEPRI, r3
 800ff50:	f3bf 8f6f 	isb	sy
 800ff54:	f3bf 8f4f 	dsb	sy
 800ff58:	613b      	str	r3, [r7, #16]
}
 800ff5a:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800ff5c:	4b12      	ldr	r3, [pc, #72]	; (800ffa8 <vTaskStartScheduler+0xc0>)
 800ff5e:	f04f 32ff 	mov.w	r2, #4294967295
 800ff62:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800ff64:	4b11      	ldr	r3, [pc, #68]	; (800ffac <vTaskStartScheduler+0xc4>)
 800ff66:	2201      	movs	r2, #1
 800ff68:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800ff6a:	4b11      	ldr	r3, [pc, #68]	; (800ffb0 <vTaskStartScheduler+0xc8>)
 800ff6c:	2200      	movs	r2, #0
 800ff6e:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800ff70:	f001 f8ce 	bl	8011110 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800ff74:	e00e      	b.n	800ff94 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800ff76:	697b      	ldr	r3, [r7, #20]
 800ff78:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ff7c:	d10a      	bne.n	800ff94 <vTaskStartScheduler+0xac>
	__asm volatile
 800ff7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ff82:	f383 8811 	msr	BASEPRI, r3
 800ff86:	f3bf 8f6f 	isb	sy
 800ff8a:	f3bf 8f4f 	dsb	sy
 800ff8e:	60fb      	str	r3, [r7, #12]
}
 800ff90:	bf00      	nop
 800ff92:	e7fe      	b.n	800ff92 <vTaskStartScheduler+0xaa>
}
 800ff94:	bf00      	nop
 800ff96:	3718      	adds	r7, #24
 800ff98:	46bd      	mov	sp, r7
 800ff9a:	bd80      	pop	{r7, pc}
 800ff9c:	0801243c 	.word	0x0801243c
 800ffa0:	080105f1 	.word	0x080105f1
 800ffa4:	20000d70 	.word	0x20000d70
 800ffa8:	20000d6c 	.word	0x20000d6c
 800ffac:	20000d58 	.word	0x20000d58
 800ffb0:	20000d50 	.word	0x20000d50

0800ffb4 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800ffb4:	b480      	push	{r7}
 800ffb6:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800ffb8:	4b04      	ldr	r3, [pc, #16]	; (800ffcc <vTaskSuspendAll+0x18>)
 800ffba:	681b      	ldr	r3, [r3, #0]
 800ffbc:	3301      	adds	r3, #1
 800ffbe:	4a03      	ldr	r2, [pc, #12]	; (800ffcc <vTaskSuspendAll+0x18>)
 800ffc0:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800ffc2:	bf00      	nop
 800ffc4:	46bd      	mov	sp, r7
 800ffc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ffca:	4770      	bx	lr
 800ffcc:	20000d74 	.word	0x20000d74

0800ffd0 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800ffd0:	b580      	push	{r7, lr}
 800ffd2:	b084      	sub	sp, #16
 800ffd4:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800ffd6:	2300      	movs	r3, #0
 800ffd8:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800ffda:	2300      	movs	r3, #0
 800ffdc:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800ffde:	4b42      	ldr	r3, [pc, #264]	; (80100e8 <xTaskResumeAll+0x118>)
 800ffe0:	681b      	ldr	r3, [r3, #0]
 800ffe2:	2b00      	cmp	r3, #0
 800ffe4:	d10a      	bne.n	800fffc <xTaskResumeAll+0x2c>
	__asm volatile
 800ffe6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ffea:	f383 8811 	msr	BASEPRI, r3
 800ffee:	f3bf 8f6f 	isb	sy
 800fff2:	f3bf 8f4f 	dsb	sy
 800fff6:	603b      	str	r3, [r7, #0]
}
 800fff8:	bf00      	nop
 800fffa:	e7fe      	b.n	800fffa <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800fffc:	f001 f92a 	bl	8011254 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8010000:	4b39      	ldr	r3, [pc, #228]	; (80100e8 <xTaskResumeAll+0x118>)
 8010002:	681b      	ldr	r3, [r3, #0]
 8010004:	3b01      	subs	r3, #1
 8010006:	4a38      	ldr	r2, [pc, #224]	; (80100e8 <xTaskResumeAll+0x118>)
 8010008:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 801000a:	4b37      	ldr	r3, [pc, #220]	; (80100e8 <xTaskResumeAll+0x118>)
 801000c:	681b      	ldr	r3, [r3, #0]
 801000e:	2b00      	cmp	r3, #0
 8010010:	d162      	bne.n	80100d8 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8010012:	4b36      	ldr	r3, [pc, #216]	; (80100ec <xTaskResumeAll+0x11c>)
 8010014:	681b      	ldr	r3, [r3, #0]
 8010016:	2b00      	cmp	r3, #0
 8010018:	d05e      	beq.n	80100d8 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 801001a:	e02f      	b.n	801007c <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801001c:	4b34      	ldr	r3, [pc, #208]	; (80100f0 <xTaskResumeAll+0x120>)
 801001e:	68db      	ldr	r3, [r3, #12]
 8010020:	68db      	ldr	r3, [r3, #12]
 8010022:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8010024:	68fb      	ldr	r3, [r7, #12]
 8010026:	3318      	adds	r3, #24
 8010028:	4618      	mov	r0, r3
 801002a:	f7fe ffb7 	bl	800ef9c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 801002e:	68fb      	ldr	r3, [r7, #12]
 8010030:	3304      	adds	r3, #4
 8010032:	4618      	mov	r0, r3
 8010034:	f7fe ffb2 	bl	800ef9c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8010038:	68fb      	ldr	r3, [r7, #12]
 801003a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801003c:	4b2d      	ldr	r3, [pc, #180]	; (80100f4 <xTaskResumeAll+0x124>)
 801003e:	681b      	ldr	r3, [r3, #0]
 8010040:	429a      	cmp	r2, r3
 8010042:	d903      	bls.n	801004c <xTaskResumeAll+0x7c>
 8010044:	68fb      	ldr	r3, [r7, #12]
 8010046:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010048:	4a2a      	ldr	r2, [pc, #168]	; (80100f4 <xTaskResumeAll+0x124>)
 801004a:	6013      	str	r3, [r2, #0]
 801004c:	68fb      	ldr	r3, [r7, #12]
 801004e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010050:	4613      	mov	r3, r2
 8010052:	009b      	lsls	r3, r3, #2
 8010054:	4413      	add	r3, r2
 8010056:	009b      	lsls	r3, r3, #2
 8010058:	4a27      	ldr	r2, [pc, #156]	; (80100f8 <xTaskResumeAll+0x128>)
 801005a:	441a      	add	r2, r3
 801005c:	68fb      	ldr	r3, [r7, #12]
 801005e:	3304      	adds	r3, #4
 8010060:	4619      	mov	r1, r3
 8010062:	4610      	mov	r0, r2
 8010064:	f7fe ff3d 	bl	800eee2 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8010068:	68fb      	ldr	r3, [r7, #12]
 801006a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801006c:	4b23      	ldr	r3, [pc, #140]	; (80100fc <xTaskResumeAll+0x12c>)
 801006e:	681b      	ldr	r3, [r3, #0]
 8010070:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010072:	429a      	cmp	r2, r3
 8010074:	d302      	bcc.n	801007c <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8010076:	4b22      	ldr	r3, [pc, #136]	; (8010100 <xTaskResumeAll+0x130>)
 8010078:	2201      	movs	r2, #1
 801007a:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 801007c:	4b1c      	ldr	r3, [pc, #112]	; (80100f0 <xTaskResumeAll+0x120>)
 801007e:	681b      	ldr	r3, [r3, #0]
 8010080:	2b00      	cmp	r3, #0
 8010082:	d1cb      	bne.n	801001c <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8010084:	68fb      	ldr	r3, [r7, #12]
 8010086:	2b00      	cmp	r3, #0
 8010088:	d001      	beq.n	801008e <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 801008a:	f000 fb67 	bl	801075c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 801008e:	4b1d      	ldr	r3, [pc, #116]	; (8010104 <xTaskResumeAll+0x134>)
 8010090:	681b      	ldr	r3, [r3, #0]
 8010092:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8010094:	687b      	ldr	r3, [r7, #4]
 8010096:	2b00      	cmp	r3, #0
 8010098:	d010      	beq.n	80100bc <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 801009a:	f000 f859 	bl	8010150 <xTaskIncrementTick>
 801009e:	4603      	mov	r3, r0
 80100a0:	2b00      	cmp	r3, #0
 80100a2:	d002      	beq.n	80100aa <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 80100a4:	4b16      	ldr	r3, [pc, #88]	; (8010100 <xTaskResumeAll+0x130>)
 80100a6:	2201      	movs	r2, #1
 80100a8:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 80100aa:	687b      	ldr	r3, [r7, #4]
 80100ac:	3b01      	subs	r3, #1
 80100ae:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 80100b0:	687b      	ldr	r3, [r7, #4]
 80100b2:	2b00      	cmp	r3, #0
 80100b4:	d1f1      	bne.n	801009a <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 80100b6:	4b13      	ldr	r3, [pc, #76]	; (8010104 <xTaskResumeAll+0x134>)
 80100b8:	2200      	movs	r2, #0
 80100ba:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80100bc:	4b10      	ldr	r3, [pc, #64]	; (8010100 <xTaskResumeAll+0x130>)
 80100be:	681b      	ldr	r3, [r3, #0]
 80100c0:	2b00      	cmp	r3, #0
 80100c2:	d009      	beq.n	80100d8 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80100c4:	2301      	movs	r3, #1
 80100c6:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80100c8:	4b0f      	ldr	r3, [pc, #60]	; (8010108 <xTaskResumeAll+0x138>)
 80100ca:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80100ce:	601a      	str	r2, [r3, #0]
 80100d0:	f3bf 8f4f 	dsb	sy
 80100d4:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80100d8:	f001 f8ec 	bl	80112b4 <vPortExitCritical>

	return xAlreadyYielded;
 80100dc:	68bb      	ldr	r3, [r7, #8]
}
 80100de:	4618      	mov	r0, r3
 80100e0:	3710      	adds	r7, #16
 80100e2:	46bd      	mov	sp, r7
 80100e4:	bd80      	pop	{r7, pc}
 80100e6:	bf00      	nop
 80100e8:	20000d74 	.word	0x20000d74
 80100ec:	20000d4c 	.word	0x20000d4c
 80100f0:	20000d0c 	.word	0x20000d0c
 80100f4:	20000d54 	.word	0x20000d54
 80100f8:	2000087c 	.word	0x2000087c
 80100fc:	20000878 	.word	0x20000878
 8010100:	20000d60 	.word	0x20000d60
 8010104:	20000d5c 	.word	0x20000d5c
 8010108:	e000ed04 	.word	0xe000ed04

0801010c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 801010c:	b480      	push	{r7}
 801010e:	b083      	sub	sp, #12
 8010110:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8010112:	4b05      	ldr	r3, [pc, #20]	; (8010128 <xTaskGetTickCount+0x1c>)
 8010114:	681b      	ldr	r3, [r3, #0]
 8010116:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8010118:	687b      	ldr	r3, [r7, #4]
}
 801011a:	4618      	mov	r0, r3
 801011c:	370c      	adds	r7, #12
 801011e:	46bd      	mov	sp, r7
 8010120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010124:	4770      	bx	lr
 8010126:	bf00      	nop
 8010128:	20000d50 	.word	0x20000d50

0801012c <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 801012c:	b580      	push	{r7, lr}
 801012e:	b082      	sub	sp, #8
 8010130:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8010132:	f001 f971 	bl	8011418 <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 8010136:	2300      	movs	r3, #0
 8010138:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 801013a:	4b04      	ldr	r3, [pc, #16]	; (801014c <xTaskGetTickCountFromISR+0x20>)
 801013c:	681b      	ldr	r3, [r3, #0]
 801013e:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8010140:	683b      	ldr	r3, [r7, #0]
}
 8010142:	4618      	mov	r0, r3
 8010144:	3708      	adds	r7, #8
 8010146:	46bd      	mov	sp, r7
 8010148:	bd80      	pop	{r7, pc}
 801014a:	bf00      	nop
 801014c:	20000d50 	.word	0x20000d50

08010150 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8010150:	b580      	push	{r7, lr}
 8010152:	b086      	sub	sp, #24
 8010154:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8010156:	2300      	movs	r3, #0
 8010158:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 801015a:	4b4f      	ldr	r3, [pc, #316]	; (8010298 <xTaskIncrementTick+0x148>)
 801015c:	681b      	ldr	r3, [r3, #0]
 801015e:	2b00      	cmp	r3, #0
 8010160:	f040 808f 	bne.w	8010282 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8010164:	4b4d      	ldr	r3, [pc, #308]	; (801029c <xTaskIncrementTick+0x14c>)
 8010166:	681b      	ldr	r3, [r3, #0]
 8010168:	3301      	adds	r3, #1
 801016a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 801016c:	4a4b      	ldr	r2, [pc, #300]	; (801029c <xTaskIncrementTick+0x14c>)
 801016e:	693b      	ldr	r3, [r7, #16]
 8010170:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8010172:	693b      	ldr	r3, [r7, #16]
 8010174:	2b00      	cmp	r3, #0
 8010176:	d120      	bne.n	80101ba <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8010178:	4b49      	ldr	r3, [pc, #292]	; (80102a0 <xTaskIncrementTick+0x150>)
 801017a:	681b      	ldr	r3, [r3, #0]
 801017c:	681b      	ldr	r3, [r3, #0]
 801017e:	2b00      	cmp	r3, #0
 8010180:	d00a      	beq.n	8010198 <xTaskIncrementTick+0x48>
	__asm volatile
 8010182:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010186:	f383 8811 	msr	BASEPRI, r3
 801018a:	f3bf 8f6f 	isb	sy
 801018e:	f3bf 8f4f 	dsb	sy
 8010192:	603b      	str	r3, [r7, #0]
}
 8010194:	bf00      	nop
 8010196:	e7fe      	b.n	8010196 <xTaskIncrementTick+0x46>
 8010198:	4b41      	ldr	r3, [pc, #260]	; (80102a0 <xTaskIncrementTick+0x150>)
 801019a:	681b      	ldr	r3, [r3, #0]
 801019c:	60fb      	str	r3, [r7, #12]
 801019e:	4b41      	ldr	r3, [pc, #260]	; (80102a4 <xTaskIncrementTick+0x154>)
 80101a0:	681b      	ldr	r3, [r3, #0]
 80101a2:	4a3f      	ldr	r2, [pc, #252]	; (80102a0 <xTaskIncrementTick+0x150>)
 80101a4:	6013      	str	r3, [r2, #0]
 80101a6:	4a3f      	ldr	r2, [pc, #252]	; (80102a4 <xTaskIncrementTick+0x154>)
 80101a8:	68fb      	ldr	r3, [r7, #12]
 80101aa:	6013      	str	r3, [r2, #0]
 80101ac:	4b3e      	ldr	r3, [pc, #248]	; (80102a8 <xTaskIncrementTick+0x158>)
 80101ae:	681b      	ldr	r3, [r3, #0]
 80101b0:	3301      	adds	r3, #1
 80101b2:	4a3d      	ldr	r2, [pc, #244]	; (80102a8 <xTaskIncrementTick+0x158>)
 80101b4:	6013      	str	r3, [r2, #0]
 80101b6:	f000 fad1 	bl	801075c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80101ba:	4b3c      	ldr	r3, [pc, #240]	; (80102ac <xTaskIncrementTick+0x15c>)
 80101bc:	681b      	ldr	r3, [r3, #0]
 80101be:	693a      	ldr	r2, [r7, #16]
 80101c0:	429a      	cmp	r2, r3
 80101c2:	d349      	bcc.n	8010258 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80101c4:	4b36      	ldr	r3, [pc, #216]	; (80102a0 <xTaskIncrementTick+0x150>)
 80101c6:	681b      	ldr	r3, [r3, #0]
 80101c8:	681b      	ldr	r3, [r3, #0]
 80101ca:	2b00      	cmp	r3, #0
 80101cc:	d104      	bne.n	80101d8 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80101ce:	4b37      	ldr	r3, [pc, #220]	; (80102ac <xTaskIncrementTick+0x15c>)
 80101d0:	f04f 32ff 	mov.w	r2, #4294967295
 80101d4:	601a      	str	r2, [r3, #0]
					break;
 80101d6:	e03f      	b.n	8010258 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80101d8:	4b31      	ldr	r3, [pc, #196]	; (80102a0 <xTaskIncrementTick+0x150>)
 80101da:	681b      	ldr	r3, [r3, #0]
 80101dc:	68db      	ldr	r3, [r3, #12]
 80101de:	68db      	ldr	r3, [r3, #12]
 80101e0:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80101e2:	68bb      	ldr	r3, [r7, #8]
 80101e4:	685b      	ldr	r3, [r3, #4]
 80101e6:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80101e8:	693a      	ldr	r2, [r7, #16]
 80101ea:	687b      	ldr	r3, [r7, #4]
 80101ec:	429a      	cmp	r2, r3
 80101ee:	d203      	bcs.n	80101f8 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80101f0:	4a2e      	ldr	r2, [pc, #184]	; (80102ac <xTaskIncrementTick+0x15c>)
 80101f2:	687b      	ldr	r3, [r7, #4]
 80101f4:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80101f6:	e02f      	b.n	8010258 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80101f8:	68bb      	ldr	r3, [r7, #8]
 80101fa:	3304      	adds	r3, #4
 80101fc:	4618      	mov	r0, r3
 80101fe:	f7fe fecd 	bl	800ef9c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8010202:	68bb      	ldr	r3, [r7, #8]
 8010204:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010206:	2b00      	cmp	r3, #0
 8010208:	d004      	beq.n	8010214 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 801020a:	68bb      	ldr	r3, [r7, #8]
 801020c:	3318      	adds	r3, #24
 801020e:	4618      	mov	r0, r3
 8010210:	f7fe fec4 	bl	800ef9c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8010214:	68bb      	ldr	r3, [r7, #8]
 8010216:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010218:	4b25      	ldr	r3, [pc, #148]	; (80102b0 <xTaskIncrementTick+0x160>)
 801021a:	681b      	ldr	r3, [r3, #0]
 801021c:	429a      	cmp	r2, r3
 801021e:	d903      	bls.n	8010228 <xTaskIncrementTick+0xd8>
 8010220:	68bb      	ldr	r3, [r7, #8]
 8010222:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010224:	4a22      	ldr	r2, [pc, #136]	; (80102b0 <xTaskIncrementTick+0x160>)
 8010226:	6013      	str	r3, [r2, #0]
 8010228:	68bb      	ldr	r3, [r7, #8]
 801022a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801022c:	4613      	mov	r3, r2
 801022e:	009b      	lsls	r3, r3, #2
 8010230:	4413      	add	r3, r2
 8010232:	009b      	lsls	r3, r3, #2
 8010234:	4a1f      	ldr	r2, [pc, #124]	; (80102b4 <xTaskIncrementTick+0x164>)
 8010236:	441a      	add	r2, r3
 8010238:	68bb      	ldr	r3, [r7, #8]
 801023a:	3304      	adds	r3, #4
 801023c:	4619      	mov	r1, r3
 801023e:	4610      	mov	r0, r2
 8010240:	f7fe fe4f 	bl	800eee2 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8010244:	68bb      	ldr	r3, [r7, #8]
 8010246:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010248:	4b1b      	ldr	r3, [pc, #108]	; (80102b8 <xTaskIncrementTick+0x168>)
 801024a:	681b      	ldr	r3, [r3, #0]
 801024c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801024e:	429a      	cmp	r2, r3
 8010250:	d3b8      	bcc.n	80101c4 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8010252:	2301      	movs	r3, #1
 8010254:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8010256:	e7b5      	b.n	80101c4 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8010258:	4b17      	ldr	r3, [pc, #92]	; (80102b8 <xTaskIncrementTick+0x168>)
 801025a:	681b      	ldr	r3, [r3, #0]
 801025c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801025e:	4915      	ldr	r1, [pc, #84]	; (80102b4 <xTaskIncrementTick+0x164>)
 8010260:	4613      	mov	r3, r2
 8010262:	009b      	lsls	r3, r3, #2
 8010264:	4413      	add	r3, r2
 8010266:	009b      	lsls	r3, r3, #2
 8010268:	440b      	add	r3, r1
 801026a:	681b      	ldr	r3, [r3, #0]
 801026c:	2b01      	cmp	r3, #1
 801026e:	d901      	bls.n	8010274 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8010270:	2301      	movs	r3, #1
 8010272:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8010274:	4b11      	ldr	r3, [pc, #68]	; (80102bc <xTaskIncrementTick+0x16c>)
 8010276:	681b      	ldr	r3, [r3, #0]
 8010278:	2b00      	cmp	r3, #0
 801027a:	d007      	beq.n	801028c <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 801027c:	2301      	movs	r3, #1
 801027e:	617b      	str	r3, [r7, #20]
 8010280:	e004      	b.n	801028c <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8010282:	4b0f      	ldr	r3, [pc, #60]	; (80102c0 <xTaskIncrementTick+0x170>)
 8010284:	681b      	ldr	r3, [r3, #0]
 8010286:	3301      	adds	r3, #1
 8010288:	4a0d      	ldr	r2, [pc, #52]	; (80102c0 <xTaskIncrementTick+0x170>)
 801028a:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 801028c:	697b      	ldr	r3, [r7, #20]
}
 801028e:	4618      	mov	r0, r3
 8010290:	3718      	adds	r7, #24
 8010292:	46bd      	mov	sp, r7
 8010294:	bd80      	pop	{r7, pc}
 8010296:	bf00      	nop
 8010298:	20000d74 	.word	0x20000d74
 801029c:	20000d50 	.word	0x20000d50
 80102a0:	20000d04 	.word	0x20000d04
 80102a4:	20000d08 	.word	0x20000d08
 80102a8:	20000d64 	.word	0x20000d64
 80102ac:	20000d6c 	.word	0x20000d6c
 80102b0:	20000d54 	.word	0x20000d54
 80102b4:	2000087c 	.word	0x2000087c
 80102b8:	20000878 	.word	0x20000878
 80102bc:	20000d60 	.word	0x20000d60
 80102c0:	20000d5c 	.word	0x20000d5c

080102c4 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80102c4:	b480      	push	{r7}
 80102c6:	b085      	sub	sp, #20
 80102c8:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80102ca:	4b28      	ldr	r3, [pc, #160]	; (801036c <vTaskSwitchContext+0xa8>)
 80102cc:	681b      	ldr	r3, [r3, #0]
 80102ce:	2b00      	cmp	r3, #0
 80102d0:	d003      	beq.n	80102da <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80102d2:	4b27      	ldr	r3, [pc, #156]	; (8010370 <vTaskSwitchContext+0xac>)
 80102d4:	2201      	movs	r2, #1
 80102d6:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80102d8:	e041      	b.n	801035e <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 80102da:	4b25      	ldr	r3, [pc, #148]	; (8010370 <vTaskSwitchContext+0xac>)
 80102dc:	2200      	movs	r2, #0
 80102de:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80102e0:	4b24      	ldr	r3, [pc, #144]	; (8010374 <vTaskSwitchContext+0xb0>)
 80102e2:	681b      	ldr	r3, [r3, #0]
 80102e4:	60fb      	str	r3, [r7, #12]
 80102e6:	e010      	b.n	801030a <vTaskSwitchContext+0x46>
 80102e8:	68fb      	ldr	r3, [r7, #12]
 80102ea:	2b00      	cmp	r3, #0
 80102ec:	d10a      	bne.n	8010304 <vTaskSwitchContext+0x40>
	__asm volatile
 80102ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80102f2:	f383 8811 	msr	BASEPRI, r3
 80102f6:	f3bf 8f6f 	isb	sy
 80102fa:	f3bf 8f4f 	dsb	sy
 80102fe:	607b      	str	r3, [r7, #4]
}
 8010300:	bf00      	nop
 8010302:	e7fe      	b.n	8010302 <vTaskSwitchContext+0x3e>
 8010304:	68fb      	ldr	r3, [r7, #12]
 8010306:	3b01      	subs	r3, #1
 8010308:	60fb      	str	r3, [r7, #12]
 801030a:	491b      	ldr	r1, [pc, #108]	; (8010378 <vTaskSwitchContext+0xb4>)
 801030c:	68fa      	ldr	r2, [r7, #12]
 801030e:	4613      	mov	r3, r2
 8010310:	009b      	lsls	r3, r3, #2
 8010312:	4413      	add	r3, r2
 8010314:	009b      	lsls	r3, r3, #2
 8010316:	440b      	add	r3, r1
 8010318:	681b      	ldr	r3, [r3, #0]
 801031a:	2b00      	cmp	r3, #0
 801031c:	d0e4      	beq.n	80102e8 <vTaskSwitchContext+0x24>
 801031e:	68fa      	ldr	r2, [r7, #12]
 8010320:	4613      	mov	r3, r2
 8010322:	009b      	lsls	r3, r3, #2
 8010324:	4413      	add	r3, r2
 8010326:	009b      	lsls	r3, r3, #2
 8010328:	4a13      	ldr	r2, [pc, #76]	; (8010378 <vTaskSwitchContext+0xb4>)
 801032a:	4413      	add	r3, r2
 801032c:	60bb      	str	r3, [r7, #8]
 801032e:	68bb      	ldr	r3, [r7, #8]
 8010330:	685b      	ldr	r3, [r3, #4]
 8010332:	685a      	ldr	r2, [r3, #4]
 8010334:	68bb      	ldr	r3, [r7, #8]
 8010336:	605a      	str	r2, [r3, #4]
 8010338:	68bb      	ldr	r3, [r7, #8]
 801033a:	685a      	ldr	r2, [r3, #4]
 801033c:	68bb      	ldr	r3, [r7, #8]
 801033e:	3308      	adds	r3, #8
 8010340:	429a      	cmp	r2, r3
 8010342:	d104      	bne.n	801034e <vTaskSwitchContext+0x8a>
 8010344:	68bb      	ldr	r3, [r7, #8]
 8010346:	685b      	ldr	r3, [r3, #4]
 8010348:	685a      	ldr	r2, [r3, #4]
 801034a:	68bb      	ldr	r3, [r7, #8]
 801034c:	605a      	str	r2, [r3, #4]
 801034e:	68bb      	ldr	r3, [r7, #8]
 8010350:	685b      	ldr	r3, [r3, #4]
 8010352:	68db      	ldr	r3, [r3, #12]
 8010354:	4a09      	ldr	r2, [pc, #36]	; (801037c <vTaskSwitchContext+0xb8>)
 8010356:	6013      	str	r3, [r2, #0]
 8010358:	4a06      	ldr	r2, [pc, #24]	; (8010374 <vTaskSwitchContext+0xb0>)
 801035a:	68fb      	ldr	r3, [r7, #12]
 801035c:	6013      	str	r3, [r2, #0]
}
 801035e:	bf00      	nop
 8010360:	3714      	adds	r7, #20
 8010362:	46bd      	mov	sp, r7
 8010364:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010368:	4770      	bx	lr
 801036a:	bf00      	nop
 801036c:	20000d74 	.word	0x20000d74
 8010370:	20000d60 	.word	0x20000d60
 8010374:	20000d54 	.word	0x20000d54
 8010378:	2000087c 	.word	0x2000087c
 801037c:	20000878 	.word	0x20000878

08010380 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8010380:	b580      	push	{r7, lr}
 8010382:	b084      	sub	sp, #16
 8010384:	af00      	add	r7, sp, #0
 8010386:	6078      	str	r0, [r7, #4]
 8010388:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 801038a:	687b      	ldr	r3, [r7, #4]
 801038c:	2b00      	cmp	r3, #0
 801038e:	d10a      	bne.n	80103a6 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8010390:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010394:	f383 8811 	msr	BASEPRI, r3
 8010398:	f3bf 8f6f 	isb	sy
 801039c:	f3bf 8f4f 	dsb	sy
 80103a0:	60fb      	str	r3, [r7, #12]
}
 80103a2:	bf00      	nop
 80103a4:	e7fe      	b.n	80103a4 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80103a6:	4b07      	ldr	r3, [pc, #28]	; (80103c4 <vTaskPlaceOnEventList+0x44>)
 80103a8:	681b      	ldr	r3, [r3, #0]
 80103aa:	3318      	adds	r3, #24
 80103ac:	4619      	mov	r1, r3
 80103ae:	6878      	ldr	r0, [r7, #4]
 80103b0:	f7fe fdbb 	bl	800ef2a <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80103b4:	2101      	movs	r1, #1
 80103b6:	6838      	ldr	r0, [r7, #0]
 80103b8:	f000 fa7c 	bl	80108b4 <prvAddCurrentTaskToDelayedList>
}
 80103bc:	bf00      	nop
 80103be:	3710      	adds	r7, #16
 80103c0:	46bd      	mov	sp, r7
 80103c2:	bd80      	pop	{r7, pc}
 80103c4:	20000878 	.word	0x20000878

080103c8 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80103c8:	b580      	push	{r7, lr}
 80103ca:	b086      	sub	sp, #24
 80103cc:	af00      	add	r7, sp, #0
 80103ce:	60f8      	str	r0, [r7, #12]
 80103d0:	60b9      	str	r1, [r7, #8]
 80103d2:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 80103d4:	68fb      	ldr	r3, [r7, #12]
 80103d6:	2b00      	cmp	r3, #0
 80103d8:	d10a      	bne.n	80103f0 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 80103da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80103de:	f383 8811 	msr	BASEPRI, r3
 80103e2:	f3bf 8f6f 	isb	sy
 80103e6:	f3bf 8f4f 	dsb	sy
 80103ea:	617b      	str	r3, [r7, #20]
}
 80103ec:	bf00      	nop
 80103ee:	e7fe      	b.n	80103ee <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80103f0:	4b0a      	ldr	r3, [pc, #40]	; (801041c <vTaskPlaceOnEventListRestricted+0x54>)
 80103f2:	681b      	ldr	r3, [r3, #0]
 80103f4:	3318      	adds	r3, #24
 80103f6:	4619      	mov	r1, r3
 80103f8:	68f8      	ldr	r0, [r7, #12]
 80103fa:	f7fe fd72 	bl	800eee2 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 80103fe:	687b      	ldr	r3, [r7, #4]
 8010400:	2b00      	cmp	r3, #0
 8010402:	d002      	beq.n	801040a <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8010404:	f04f 33ff 	mov.w	r3, #4294967295
 8010408:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 801040a:	6879      	ldr	r1, [r7, #4]
 801040c:	68b8      	ldr	r0, [r7, #8]
 801040e:	f000 fa51 	bl	80108b4 <prvAddCurrentTaskToDelayedList>
	}
 8010412:	bf00      	nop
 8010414:	3718      	adds	r7, #24
 8010416:	46bd      	mov	sp, r7
 8010418:	bd80      	pop	{r7, pc}
 801041a:	bf00      	nop
 801041c:	20000878 	.word	0x20000878

08010420 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8010420:	b580      	push	{r7, lr}
 8010422:	b086      	sub	sp, #24
 8010424:	af00      	add	r7, sp, #0
 8010426:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8010428:	687b      	ldr	r3, [r7, #4]
 801042a:	68db      	ldr	r3, [r3, #12]
 801042c:	68db      	ldr	r3, [r3, #12]
 801042e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8010430:	693b      	ldr	r3, [r7, #16]
 8010432:	2b00      	cmp	r3, #0
 8010434:	d10a      	bne.n	801044c <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8010436:	f04f 0350 	mov.w	r3, #80	; 0x50
 801043a:	f383 8811 	msr	BASEPRI, r3
 801043e:	f3bf 8f6f 	isb	sy
 8010442:	f3bf 8f4f 	dsb	sy
 8010446:	60fb      	str	r3, [r7, #12]
}
 8010448:	bf00      	nop
 801044a:	e7fe      	b.n	801044a <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 801044c:	693b      	ldr	r3, [r7, #16]
 801044e:	3318      	adds	r3, #24
 8010450:	4618      	mov	r0, r3
 8010452:	f7fe fda3 	bl	800ef9c <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8010456:	4b1e      	ldr	r3, [pc, #120]	; (80104d0 <xTaskRemoveFromEventList+0xb0>)
 8010458:	681b      	ldr	r3, [r3, #0]
 801045a:	2b00      	cmp	r3, #0
 801045c:	d11d      	bne.n	801049a <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 801045e:	693b      	ldr	r3, [r7, #16]
 8010460:	3304      	adds	r3, #4
 8010462:	4618      	mov	r0, r3
 8010464:	f7fe fd9a 	bl	800ef9c <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8010468:	693b      	ldr	r3, [r7, #16]
 801046a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801046c:	4b19      	ldr	r3, [pc, #100]	; (80104d4 <xTaskRemoveFromEventList+0xb4>)
 801046e:	681b      	ldr	r3, [r3, #0]
 8010470:	429a      	cmp	r2, r3
 8010472:	d903      	bls.n	801047c <xTaskRemoveFromEventList+0x5c>
 8010474:	693b      	ldr	r3, [r7, #16]
 8010476:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010478:	4a16      	ldr	r2, [pc, #88]	; (80104d4 <xTaskRemoveFromEventList+0xb4>)
 801047a:	6013      	str	r3, [r2, #0]
 801047c:	693b      	ldr	r3, [r7, #16]
 801047e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010480:	4613      	mov	r3, r2
 8010482:	009b      	lsls	r3, r3, #2
 8010484:	4413      	add	r3, r2
 8010486:	009b      	lsls	r3, r3, #2
 8010488:	4a13      	ldr	r2, [pc, #76]	; (80104d8 <xTaskRemoveFromEventList+0xb8>)
 801048a:	441a      	add	r2, r3
 801048c:	693b      	ldr	r3, [r7, #16]
 801048e:	3304      	adds	r3, #4
 8010490:	4619      	mov	r1, r3
 8010492:	4610      	mov	r0, r2
 8010494:	f7fe fd25 	bl	800eee2 <vListInsertEnd>
 8010498:	e005      	b.n	80104a6 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 801049a:	693b      	ldr	r3, [r7, #16]
 801049c:	3318      	adds	r3, #24
 801049e:	4619      	mov	r1, r3
 80104a0:	480e      	ldr	r0, [pc, #56]	; (80104dc <xTaskRemoveFromEventList+0xbc>)
 80104a2:	f7fe fd1e 	bl	800eee2 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80104a6:	693b      	ldr	r3, [r7, #16]
 80104a8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80104aa:	4b0d      	ldr	r3, [pc, #52]	; (80104e0 <xTaskRemoveFromEventList+0xc0>)
 80104ac:	681b      	ldr	r3, [r3, #0]
 80104ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80104b0:	429a      	cmp	r2, r3
 80104b2:	d905      	bls.n	80104c0 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80104b4:	2301      	movs	r3, #1
 80104b6:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80104b8:	4b0a      	ldr	r3, [pc, #40]	; (80104e4 <xTaskRemoveFromEventList+0xc4>)
 80104ba:	2201      	movs	r2, #1
 80104bc:	601a      	str	r2, [r3, #0]
 80104be:	e001      	b.n	80104c4 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 80104c0:	2300      	movs	r3, #0
 80104c2:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 80104c4:	697b      	ldr	r3, [r7, #20]
}
 80104c6:	4618      	mov	r0, r3
 80104c8:	3718      	adds	r7, #24
 80104ca:	46bd      	mov	sp, r7
 80104cc:	bd80      	pop	{r7, pc}
 80104ce:	bf00      	nop
 80104d0:	20000d74 	.word	0x20000d74
 80104d4:	20000d54 	.word	0x20000d54
 80104d8:	2000087c 	.word	0x2000087c
 80104dc:	20000d0c 	.word	0x20000d0c
 80104e0:	20000878 	.word	0x20000878
 80104e4:	20000d60 	.word	0x20000d60

080104e8 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80104e8:	b480      	push	{r7}
 80104ea:	b083      	sub	sp, #12
 80104ec:	af00      	add	r7, sp, #0
 80104ee:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80104f0:	4b06      	ldr	r3, [pc, #24]	; (801050c <vTaskInternalSetTimeOutState+0x24>)
 80104f2:	681a      	ldr	r2, [r3, #0]
 80104f4:	687b      	ldr	r3, [r7, #4]
 80104f6:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80104f8:	4b05      	ldr	r3, [pc, #20]	; (8010510 <vTaskInternalSetTimeOutState+0x28>)
 80104fa:	681a      	ldr	r2, [r3, #0]
 80104fc:	687b      	ldr	r3, [r7, #4]
 80104fe:	605a      	str	r2, [r3, #4]
}
 8010500:	bf00      	nop
 8010502:	370c      	adds	r7, #12
 8010504:	46bd      	mov	sp, r7
 8010506:	f85d 7b04 	ldr.w	r7, [sp], #4
 801050a:	4770      	bx	lr
 801050c:	20000d64 	.word	0x20000d64
 8010510:	20000d50 	.word	0x20000d50

08010514 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8010514:	b580      	push	{r7, lr}
 8010516:	b088      	sub	sp, #32
 8010518:	af00      	add	r7, sp, #0
 801051a:	6078      	str	r0, [r7, #4]
 801051c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 801051e:	687b      	ldr	r3, [r7, #4]
 8010520:	2b00      	cmp	r3, #0
 8010522:	d10a      	bne.n	801053a <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8010524:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010528:	f383 8811 	msr	BASEPRI, r3
 801052c:	f3bf 8f6f 	isb	sy
 8010530:	f3bf 8f4f 	dsb	sy
 8010534:	613b      	str	r3, [r7, #16]
}
 8010536:	bf00      	nop
 8010538:	e7fe      	b.n	8010538 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 801053a:	683b      	ldr	r3, [r7, #0]
 801053c:	2b00      	cmp	r3, #0
 801053e:	d10a      	bne.n	8010556 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8010540:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010544:	f383 8811 	msr	BASEPRI, r3
 8010548:	f3bf 8f6f 	isb	sy
 801054c:	f3bf 8f4f 	dsb	sy
 8010550:	60fb      	str	r3, [r7, #12]
}
 8010552:	bf00      	nop
 8010554:	e7fe      	b.n	8010554 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8010556:	f000 fe7d 	bl	8011254 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 801055a:	4b1d      	ldr	r3, [pc, #116]	; (80105d0 <xTaskCheckForTimeOut+0xbc>)
 801055c:	681b      	ldr	r3, [r3, #0]
 801055e:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8010560:	687b      	ldr	r3, [r7, #4]
 8010562:	685b      	ldr	r3, [r3, #4]
 8010564:	69ba      	ldr	r2, [r7, #24]
 8010566:	1ad3      	subs	r3, r2, r3
 8010568:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 801056a:	683b      	ldr	r3, [r7, #0]
 801056c:	681b      	ldr	r3, [r3, #0]
 801056e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010572:	d102      	bne.n	801057a <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8010574:	2300      	movs	r3, #0
 8010576:	61fb      	str	r3, [r7, #28]
 8010578:	e023      	b.n	80105c2 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 801057a:	687b      	ldr	r3, [r7, #4]
 801057c:	681a      	ldr	r2, [r3, #0]
 801057e:	4b15      	ldr	r3, [pc, #84]	; (80105d4 <xTaskCheckForTimeOut+0xc0>)
 8010580:	681b      	ldr	r3, [r3, #0]
 8010582:	429a      	cmp	r2, r3
 8010584:	d007      	beq.n	8010596 <xTaskCheckForTimeOut+0x82>
 8010586:	687b      	ldr	r3, [r7, #4]
 8010588:	685b      	ldr	r3, [r3, #4]
 801058a:	69ba      	ldr	r2, [r7, #24]
 801058c:	429a      	cmp	r2, r3
 801058e:	d302      	bcc.n	8010596 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8010590:	2301      	movs	r3, #1
 8010592:	61fb      	str	r3, [r7, #28]
 8010594:	e015      	b.n	80105c2 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8010596:	683b      	ldr	r3, [r7, #0]
 8010598:	681b      	ldr	r3, [r3, #0]
 801059a:	697a      	ldr	r2, [r7, #20]
 801059c:	429a      	cmp	r2, r3
 801059e:	d20b      	bcs.n	80105b8 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80105a0:	683b      	ldr	r3, [r7, #0]
 80105a2:	681a      	ldr	r2, [r3, #0]
 80105a4:	697b      	ldr	r3, [r7, #20]
 80105a6:	1ad2      	subs	r2, r2, r3
 80105a8:	683b      	ldr	r3, [r7, #0]
 80105aa:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80105ac:	6878      	ldr	r0, [r7, #4]
 80105ae:	f7ff ff9b 	bl	80104e8 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80105b2:	2300      	movs	r3, #0
 80105b4:	61fb      	str	r3, [r7, #28]
 80105b6:	e004      	b.n	80105c2 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 80105b8:	683b      	ldr	r3, [r7, #0]
 80105ba:	2200      	movs	r2, #0
 80105bc:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80105be:	2301      	movs	r3, #1
 80105c0:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80105c2:	f000 fe77 	bl	80112b4 <vPortExitCritical>

	return xReturn;
 80105c6:	69fb      	ldr	r3, [r7, #28]
}
 80105c8:	4618      	mov	r0, r3
 80105ca:	3720      	adds	r7, #32
 80105cc:	46bd      	mov	sp, r7
 80105ce:	bd80      	pop	{r7, pc}
 80105d0:	20000d50 	.word	0x20000d50
 80105d4:	20000d64 	.word	0x20000d64

080105d8 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80105d8:	b480      	push	{r7}
 80105da:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80105dc:	4b03      	ldr	r3, [pc, #12]	; (80105ec <vTaskMissedYield+0x14>)
 80105de:	2201      	movs	r2, #1
 80105e0:	601a      	str	r2, [r3, #0]
}
 80105e2:	bf00      	nop
 80105e4:	46bd      	mov	sp, r7
 80105e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80105ea:	4770      	bx	lr
 80105ec:	20000d60 	.word	0x20000d60

080105f0 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80105f0:	b580      	push	{r7, lr}
 80105f2:	b082      	sub	sp, #8
 80105f4:	af00      	add	r7, sp, #0
 80105f6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80105f8:	f000 f852 	bl	80106a0 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80105fc:	4b06      	ldr	r3, [pc, #24]	; (8010618 <prvIdleTask+0x28>)
 80105fe:	681b      	ldr	r3, [r3, #0]
 8010600:	2b01      	cmp	r3, #1
 8010602:	d9f9      	bls.n	80105f8 <prvIdleTask+0x8>
			{
				taskYIELD();
 8010604:	4b05      	ldr	r3, [pc, #20]	; (801061c <prvIdleTask+0x2c>)
 8010606:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801060a:	601a      	str	r2, [r3, #0]
 801060c:	f3bf 8f4f 	dsb	sy
 8010610:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8010614:	e7f0      	b.n	80105f8 <prvIdleTask+0x8>
 8010616:	bf00      	nop
 8010618:	2000087c 	.word	0x2000087c
 801061c:	e000ed04 	.word	0xe000ed04

08010620 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8010620:	b580      	push	{r7, lr}
 8010622:	b082      	sub	sp, #8
 8010624:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8010626:	2300      	movs	r3, #0
 8010628:	607b      	str	r3, [r7, #4]
 801062a:	e00c      	b.n	8010646 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 801062c:	687a      	ldr	r2, [r7, #4]
 801062e:	4613      	mov	r3, r2
 8010630:	009b      	lsls	r3, r3, #2
 8010632:	4413      	add	r3, r2
 8010634:	009b      	lsls	r3, r3, #2
 8010636:	4a12      	ldr	r2, [pc, #72]	; (8010680 <prvInitialiseTaskLists+0x60>)
 8010638:	4413      	add	r3, r2
 801063a:	4618      	mov	r0, r3
 801063c:	f7fe fc24 	bl	800ee88 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8010640:	687b      	ldr	r3, [r7, #4]
 8010642:	3301      	adds	r3, #1
 8010644:	607b      	str	r3, [r7, #4]
 8010646:	687b      	ldr	r3, [r7, #4]
 8010648:	2b37      	cmp	r3, #55	; 0x37
 801064a:	d9ef      	bls.n	801062c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 801064c:	480d      	ldr	r0, [pc, #52]	; (8010684 <prvInitialiseTaskLists+0x64>)
 801064e:	f7fe fc1b 	bl	800ee88 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8010652:	480d      	ldr	r0, [pc, #52]	; (8010688 <prvInitialiseTaskLists+0x68>)
 8010654:	f7fe fc18 	bl	800ee88 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8010658:	480c      	ldr	r0, [pc, #48]	; (801068c <prvInitialiseTaskLists+0x6c>)
 801065a:	f7fe fc15 	bl	800ee88 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 801065e:	480c      	ldr	r0, [pc, #48]	; (8010690 <prvInitialiseTaskLists+0x70>)
 8010660:	f7fe fc12 	bl	800ee88 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8010664:	480b      	ldr	r0, [pc, #44]	; (8010694 <prvInitialiseTaskLists+0x74>)
 8010666:	f7fe fc0f 	bl	800ee88 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 801066a:	4b0b      	ldr	r3, [pc, #44]	; (8010698 <prvInitialiseTaskLists+0x78>)
 801066c:	4a05      	ldr	r2, [pc, #20]	; (8010684 <prvInitialiseTaskLists+0x64>)
 801066e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8010670:	4b0a      	ldr	r3, [pc, #40]	; (801069c <prvInitialiseTaskLists+0x7c>)
 8010672:	4a05      	ldr	r2, [pc, #20]	; (8010688 <prvInitialiseTaskLists+0x68>)
 8010674:	601a      	str	r2, [r3, #0]
}
 8010676:	bf00      	nop
 8010678:	3708      	adds	r7, #8
 801067a:	46bd      	mov	sp, r7
 801067c:	bd80      	pop	{r7, pc}
 801067e:	bf00      	nop
 8010680:	2000087c 	.word	0x2000087c
 8010684:	20000cdc 	.word	0x20000cdc
 8010688:	20000cf0 	.word	0x20000cf0
 801068c:	20000d0c 	.word	0x20000d0c
 8010690:	20000d20 	.word	0x20000d20
 8010694:	20000d38 	.word	0x20000d38
 8010698:	20000d04 	.word	0x20000d04
 801069c:	20000d08 	.word	0x20000d08

080106a0 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80106a0:	b580      	push	{r7, lr}
 80106a2:	b082      	sub	sp, #8
 80106a4:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80106a6:	e019      	b.n	80106dc <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80106a8:	f000 fdd4 	bl	8011254 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80106ac:	4b10      	ldr	r3, [pc, #64]	; (80106f0 <prvCheckTasksWaitingTermination+0x50>)
 80106ae:	68db      	ldr	r3, [r3, #12]
 80106b0:	68db      	ldr	r3, [r3, #12]
 80106b2:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80106b4:	687b      	ldr	r3, [r7, #4]
 80106b6:	3304      	adds	r3, #4
 80106b8:	4618      	mov	r0, r3
 80106ba:	f7fe fc6f 	bl	800ef9c <uxListRemove>
				--uxCurrentNumberOfTasks;
 80106be:	4b0d      	ldr	r3, [pc, #52]	; (80106f4 <prvCheckTasksWaitingTermination+0x54>)
 80106c0:	681b      	ldr	r3, [r3, #0]
 80106c2:	3b01      	subs	r3, #1
 80106c4:	4a0b      	ldr	r2, [pc, #44]	; (80106f4 <prvCheckTasksWaitingTermination+0x54>)
 80106c6:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80106c8:	4b0b      	ldr	r3, [pc, #44]	; (80106f8 <prvCheckTasksWaitingTermination+0x58>)
 80106ca:	681b      	ldr	r3, [r3, #0]
 80106cc:	3b01      	subs	r3, #1
 80106ce:	4a0a      	ldr	r2, [pc, #40]	; (80106f8 <prvCheckTasksWaitingTermination+0x58>)
 80106d0:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80106d2:	f000 fdef 	bl	80112b4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80106d6:	6878      	ldr	r0, [r7, #4]
 80106d8:	f000 f810 	bl	80106fc <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80106dc:	4b06      	ldr	r3, [pc, #24]	; (80106f8 <prvCheckTasksWaitingTermination+0x58>)
 80106de:	681b      	ldr	r3, [r3, #0]
 80106e0:	2b00      	cmp	r3, #0
 80106e2:	d1e1      	bne.n	80106a8 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80106e4:	bf00      	nop
 80106e6:	bf00      	nop
 80106e8:	3708      	adds	r7, #8
 80106ea:	46bd      	mov	sp, r7
 80106ec:	bd80      	pop	{r7, pc}
 80106ee:	bf00      	nop
 80106f0:	20000d20 	.word	0x20000d20
 80106f4:	20000d4c 	.word	0x20000d4c
 80106f8:	20000d34 	.word	0x20000d34

080106fc <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80106fc:	b580      	push	{r7, lr}
 80106fe:	b084      	sub	sp, #16
 8010700:	af00      	add	r7, sp, #0
 8010702:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8010704:	687b      	ldr	r3, [r7, #4]
 8010706:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 801070a:	2b00      	cmp	r3, #0
 801070c:	d108      	bne.n	8010720 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 801070e:	687b      	ldr	r3, [r7, #4]
 8010710:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010712:	4618      	mov	r0, r3
 8010714:	f000 ff8c 	bl	8011630 <vPortFree>
				vPortFree( pxTCB );
 8010718:	6878      	ldr	r0, [r7, #4]
 801071a:	f000 ff89 	bl	8011630 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 801071e:	e018      	b.n	8010752 <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8010720:	687b      	ldr	r3, [r7, #4]
 8010722:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8010726:	2b01      	cmp	r3, #1
 8010728:	d103      	bne.n	8010732 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 801072a:	6878      	ldr	r0, [r7, #4]
 801072c:	f000 ff80 	bl	8011630 <vPortFree>
	}
 8010730:	e00f      	b.n	8010752 <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8010732:	687b      	ldr	r3, [r7, #4]
 8010734:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8010738:	2b02      	cmp	r3, #2
 801073a:	d00a      	beq.n	8010752 <prvDeleteTCB+0x56>
	__asm volatile
 801073c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010740:	f383 8811 	msr	BASEPRI, r3
 8010744:	f3bf 8f6f 	isb	sy
 8010748:	f3bf 8f4f 	dsb	sy
 801074c:	60fb      	str	r3, [r7, #12]
}
 801074e:	bf00      	nop
 8010750:	e7fe      	b.n	8010750 <prvDeleteTCB+0x54>
	}
 8010752:	bf00      	nop
 8010754:	3710      	adds	r7, #16
 8010756:	46bd      	mov	sp, r7
 8010758:	bd80      	pop	{r7, pc}
	...

0801075c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 801075c:	b480      	push	{r7}
 801075e:	b083      	sub	sp, #12
 8010760:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8010762:	4b0c      	ldr	r3, [pc, #48]	; (8010794 <prvResetNextTaskUnblockTime+0x38>)
 8010764:	681b      	ldr	r3, [r3, #0]
 8010766:	681b      	ldr	r3, [r3, #0]
 8010768:	2b00      	cmp	r3, #0
 801076a:	d104      	bne.n	8010776 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 801076c:	4b0a      	ldr	r3, [pc, #40]	; (8010798 <prvResetNextTaskUnblockTime+0x3c>)
 801076e:	f04f 32ff 	mov.w	r2, #4294967295
 8010772:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8010774:	e008      	b.n	8010788 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8010776:	4b07      	ldr	r3, [pc, #28]	; (8010794 <prvResetNextTaskUnblockTime+0x38>)
 8010778:	681b      	ldr	r3, [r3, #0]
 801077a:	68db      	ldr	r3, [r3, #12]
 801077c:	68db      	ldr	r3, [r3, #12]
 801077e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8010780:	687b      	ldr	r3, [r7, #4]
 8010782:	685b      	ldr	r3, [r3, #4]
 8010784:	4a04      	ldr	r2, [pc, #16]	; (8010798 <prvResetNextTaskUnblockTime+0x3c>)
 8010786:	6013      	str	r3, [r2, #0]
}
 8010788:	bf00      	nop
 801078a:	370c      	adds	r7, #12
 801078c:	46bd      	mov	sp, r7
 801078e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010792:	4770      	bx	lr
 8010794:	20000d04 	.word	0x20000d04
 8010798:	20000d6c 	.word	0x20000d6c

0801079c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 801079c:	b480      	push	{r7}
 801079e:	b083      	sub	sp, #12
 80107a0:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80107a2:	4b0b      	ldr	r3, [pc, #44]	; (80107d0 <xTaskGetSchedulerState+0x34>)
 80107a4:	681b      	ldr	r3, [r3, #0]
 80107a6:	2b00      	cmp	r3, #0
 80107a8:	d102      	bne.n	80107b0 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80107aa:	2301      	movs	r3, #1
 80107ac:	607b      	str	r3, [r7, #4]
 80107ae:	e008      	b.n	80107c2 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80107b0:	4b08      	ldr	r3, [pc, #32]	; (80107d4 <xTaskGetSchedulerState+0x38>)
 80107b2:	681b      	ldr	r3, [r3, #0]
 80107b4:	2b00      	cmp	r3, #0
 80107b6:	d102      	bne.n	80107be <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80107b8:	2302      	movs	r3, #2
 80107ba:	607b      	str	r3, [r7, #4]
 80107bc:	e001      	b.n	80107c2 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80107be:	2300      	movs	r3, #0
 80107c0:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80107c2:	687b      	ldr	r3, [r7, #4]
	}
 80107c4:	4618      	mov	r0, r3
 80107c6:	370c      	adds	r7, #12
 80107c8:	46bd      	mov	sp, r7
 80107ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80107ce:	4770      	bx	lr
 80107d0:	20000d58 	.word	0x20000d58
 80107d4:	20000d74 	.word	0x20000d74

080107d8 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80107d8:	b580      	push	{r7, lr}
 80107da:	b086      	sub	sp, #24
 80107dc:	af00      	add	r7, sp, #0
 80107de:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 80107e0:	687b      	ldr	r3, [r7, #4]
 80107e2:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80107e4:	2300      	movs	r3, #0
 80107e6:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80107e8:	687b      	ldr	r3, [r7, #4]
 80107ea:	2b00      	cmp	r3, #0
 80107ec:	d056      	beq.n	801089c <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80107ee:	4b2e      	ldr	r3, [pc, #184]	; (80108a8 <xTaskPriorityDisinherit+0xd0>)
 80107f0:	681b      	ldr	r3, [r3, #0]
 80107f2:	693a      	ldr	r2, [r7, #16]
 80107f4:	429a      	cmp	r2, r3
 80107f6:	d00a      	beq.n	801080e <xTaskPriorityDisinherit+0x36>
	__asm volatile
 80107f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80107fc:	f383 8811 	msr	BASEPRI, r3
 8010800:	f3bf 8f6f 	isb	sy
 8010804:	f3bf 8f4f 	dsb	sy
 8010808:	60fb      	str	r3, [r7, #12]
}
 801080a:	bf00      	nop
 801080c:	e7fe      	b.n	801080c <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 801080e:	693b      	ldr	r3, [r7, #16]
 8010810:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8010812:	2b00      	cmp	r3, #0
 8010814:	d10a      	bne.n	801082c <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8010816:	f04f 0350 	mov.w	r3, #80	; 0x50
 801081a:	f383 8811 	msr	BASEPRI, r3
 801081e:	f3bf 8f6f 	isb	sy
 8010822:	f3bf 8f4f 	dsb	sy
 8010826:	60bb      	str	r3, [r7, #8]
}
 8010828:	bf00      	nop
 801082a:	e7fe      	b.n	801082a <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 801082c:	693b      	ldr	r3, [r7, #16]
 801082e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8010830:	1e5a      	subs	r2, r3, #1
 8010832:	693b      	ldr	r3, [r7, #16]
 8010834:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8010836:	693b      	ldr	r3, [r7, #16]
 8010838:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801083a:	693b      	ldr	r3, [r7, #16]
 801083c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801083e:	429a      	cmp	r2, r3
 8010840:	d02c      	beq.n	801089c <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8010842:	693b      	ldr	r3, [r7, #16]
 8010844:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8010846:	2b00      	cmp	r3, #0
 8010848:	d128      	bne.n	801089c <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 801084a:	693b      	ldr	r3, [r7, #16]
 801084c:	3304      	adds	r3, #4
 801084e:	4618      	mov	r0, r3
 8010850:	f7fe fba4 	bl	800ef9c <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8010854:	693b      	ldr	r3, [r7, #16]
 8010856:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8010858:	693b      	ldr	r3, [r7, #16]
 801085a:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801085c:	693b      	ldr	r3, [r7, #16]
 801085e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010860:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8010864:	693b      	ldr	r3, [r7, #16]
 8010866:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8010868:	693b      	ldr	r3, [r7, #16]
 801086a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801086c:	4b0f      	ldr	r3, [pc, #60]	; (80108ac <xTaskPriorityDisinherit+0xd4>)
 801086e:	681b      	ldr	r3, [r3, #0]
 8010870:	429a      	cmp	r2, r3
 8010872:	d903      	bls.n	801087c <xTaskPriorityDisinherit+0xa4>
 8010874:	693b      	ldr	r3, [r7, #16]
 8010876:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010878:	4a0c      	ldr	r2, [pc, #48]	; (80108ac <xTaskPriorityDisinherit+0xd4>)
 801087a:	6013      	str	r3, [r2, #0]
 801087c:	693b      	ldr	r3, [r7, #16]
 801087e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010880:	4613      	mov	r3, r2
 8010882:	009b      	lsls	r3, r3, #2
 8010884:	4413      	add	r3, r2
 8010886:	009b      	lsls	r3, r3, #2
 8010888:	4a09      	ldr	r2, [pc, #36]	; (80108b0 <xTaskPriorityDisinherit+0xd8>)
 801088a:	441a      	add	r2, r3
 801088c:	693b      	ldr	r3, [r7, #16]
 801088e:	3304      	adds	r3, #4
 8010890:	4619      	mov	r1, r3
 8010892:	4610      	mov	r0, r2
 8010894:	f7fe fb25 	bl	800eee2 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8010898:	2301      	movs	r3, #1
 801089a:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 801089c:	697b      	ldr	r3, [r7, #20]
	}
 801089e:	4618      	mov	r0, r3
 80108a0:	3718      	adds	r7, #24
 80108a2:	46bd      	mov	sp, r7
 80108a4:	bd80      	pop	{r7, pc}
 80108a6:	bf00      	nop
 80108a8:	20000878 	.word	0x20000878
 80108ac:	20000d54 	.word	0x20000d54
 80108b0:	2000087c 	.word	0x2000087c

080108b4 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80108b4:	b580      	push	{r7, lr}
 80108b6:	b084      	sub	sp, #16
 80108b8:	af00      	add	r7, sp, #0
 80108ba:	6078      	str	r0, [r7, #4]
 80108bc:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80108be:	4b21      	ldr	r3, [pc, #132]	; (8010944 <prvAddCurrentTaskToDelayedList+0x90>)
 80108c0:	681b      	ldr	r3, [r3, #0]
 80108c2:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80108c4:	4b20      	ldr	r3, [pc, #128]	; (8010948 <prvAddCurrentTaskToDelayedList+0x94>)
 80108c6:	681b      	ldr	r3, [r3, #0]
 80108c8:	3304      	adds	r3, #4
 80108ca:	4618      	mov	r0, r3
 80108cc:	f7fe fb66 	bl	800ef9c <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80108d0:	687b      	ldr	r3, [r7, #4]
 80108d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80108d6:	d10a      	bne.n	80108ee <prvAddCurrentTaskToDelayedList+0x3a>
 80108d8:	683b      	ldr	r3, [r7, #0]
 80108da:	2b00      	cmp	r3, #0
 80108dc:	d007      	beq.n	80108ee <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80108de:	4b1a      	ldr	r3, [pc, #104]	; (8010948 <prvAddCurrentTaskToDelayedList+0x94>)
 80108e0:	681b      	ldr	r3, [r3, #0]
 80108e2:	3304      	adds	r3, #4
 80108e4:	4619      	mov	r1, r3
 80108e6:	4819      	ldr	r0, [pc, #100]	; (801094c <prvAddCurrentTaskToDelayedList+0x98>)
 80108e8:	f7fe fafb 	bl	800eee2 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80108ec:	e026      	b.n	801093c <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80108ee:	68fa      	ldr	r2, [r7, #12]
 80108f0:	687b      	ldr	r3, [r7, #4]
 80108f2:	4413      	add	r3, r2
 80108f4:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80108f6:	4b14      	ldr	r3, [pc, #80]	; (8010948 <prvAddCurrentTaskToDelayedList+0x94>)
 80108f8:	681b      	ldr	r3, [r3, #0]
 80108fa:	68ba      	ldr	r2, [r7, #8]
 80108fc:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80108fe:	68ba      	ldr	r2, [r7, #8]
 8010900:	68fb      	ldr	r3, [r7, #12]
 8010902:	429a      	cmp	r2, r3
 8010904:	d209      	bcs.n	801091a <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8010906:	4b12      	ldr	r3, [pc, #72]	; (8010950 <prvAddCurrentTaskToDelayedList+0x9c>)
 8010908:	681a      	ldr	r2, [r3, #0]
 801090a:	4b0f      	ldr	r3, [pc, #60]	; (8010948 <prvAddCurrentTaskToDelayedList+0x94>)
 801090c:	681b      	ldr	r3, [r3, #0]
 801090e:	3304      	adds	r3, #4
 8010910:	4619      	mov	r1, r3
 8010912:	4610      	mov	r0, r2
 8010914:	f7fe fb09 	bl	800ef2a <vListInsert>
}
 8010918:	e010      	b.n	801093c <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 801091a:	4b0e      	ldr	r3, [pc, #56]	; (8010954 <prvAddCurrentTaskToDelayedList+0xa0>)
 801091c:	681a      	ldr	r2, [r3, #0]
 801091e:	4b0a      	ldr	r3, [pc, #40]	; (8010948 <prvAddCurrentTaskToDelayedList+0x94>)
 8010920:	681b      	ldr	r3, [r3, #0]
 8010922:	3304      	adds	r3, #4
 8010924:	4619      	mov	r1, r3
 8010926:	4610      	mov	r0, r2
 8010928:	f7fe faff 	bl	800ef2a <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 801092c:	4b0a      	ldr	r3, [pc, #40]	; (8010958 <prvAddCurrentTaskToDelayedList+0xa4>)
 801092e:	681b      	ldr	r3, [r3, #0]
 8010930:	68ba      	ldr	r2, [r7, #8]
 8010932:	429a      	cmp	r2, r3
 8010934:	d202      	bcs.n	801093c <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8010936:	4a08      	ldr	r2, [pc, #32]	; (8010958 <prvAddCurrentTaskToDelayedList+0xa4>)
 8010938:	68bb      	ldr	r3, [r7, #8]
 801093a:	6013      	str	r3, [r2, #0]
}
 801093c:	bf00      	nop
 801093e:	3710      	adds	r7, #16
 8010940:	46bd      	mov	sp, r7
 8010942:	bd80      	pop	{r7, pc}
 8010944:	20000d50 	.word	0x20000d50
 8010948:	20000878 	.word	0x20000878
 801094c:	20000d38 	.word	0x20000d38
 8010950:	20000d08 	.word	0x20000d08
 8010954:	20000d04 	.word	0x20000d04
 8010958:	20000d6c 	.word	0x20000d6c

0801095c <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 801095c:	b580      	push	{r7, lr}
 801095e:	b08a      	sub	sp, #40	; 0x28
 8010960:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8010962:	2300      	movs	r3, #0
 8010964:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8010966:	f000 fb07 	bl	8010f78 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 801096a:	4b1c      	ldr	r3, [pc, #112]	; (80109dc <xTimerCreateTimerTask+0x80>)
 801096c:	681b      	ldr	r3, [r3, #0]
 801096e:	2b00      	cmp	r3, #0
 8010970:	d021      	beq.n	80109b6 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8010972:	2300      	movs	r3, #0
 8010974:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8010976:	2300      	movs	r3, #0
 8010978:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 801097a:	1d3a      	adds	r2, r7, #4
 801097c:	f107 0108 	add.w	r1, r7, #8
 8010980:	f107 030c 	add.w	r3, r7, #12
 8010984:	4618      	mov	r0, r3
 8010986:	f7fe fa65 	bl	800ee54 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 801098a:	6879      	ldr	r1, [r7, #4]
 801098c:	68bb      	ldr	r3, [r7, #8]
 801098e:	68fa      	ldr	r2, [r7, #12]
 8010990:	9202      	str	r2, [sp, #8]
 8010992:	9301      	str	r3, [sp, #4]
 8010994:	2302      	movs	r3, #2
 8010996:	9300      	str	r3, [sp, #0]
 8010998:	2300      	movs	r3, #0
 801099a:	460a      	mov	r2, r1
 801099c:	4910      	ldr	r1, [pc, #64]	; (80109e0 <xTimerCreateTimerTask+0x84>)
 801099e:	4811      	ldr	r0, [pc, #68]	; (80109e4 <xTimerCreateTimerTask+0x88>)
 80109a0:	f7ff f8cc 	bl	800fb3c <xTaskCreateStatic>
 80109a4:	4603      	mov	r3, r0
 80109a6:	4a10      	ldr	r2, [pc, #64]	; (80109e8 <xTimerCreateTimerTask+0x8c>)
 80109a8:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 80109aa:	4b0f      	ldr	r3, [pc, #60]	; (80109e8 <xTimerCreateTimerTask+0x8c>)
 80109ac:	681b      	ldr	r3, [r3, #0]
 80109ae:	2b00      	cmp	r3, #0
 80109b0:	d001      	beq.n	80109b6 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 80109b2:	2301      	movs	r3, #1
 80109b4:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 80109b6:	697b      	ldr	r3, [r7, #20]
 80109b8:	2b00      	cmp	r3, #0
 80109ba:	d10a      	bne.n	80109d2 <xTimerCreateTimerTask+0x76>
	__asm volatile
 80109bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80109c0:	f383 8811 	msr	BASEPRI, r3
 80109c4:	f3bf 8f6f 	isb	sy
 80109c8:	f3bf 8f4f 	dsb	sy
 80109cc:	613b      	str	r3, [r7, #16]
}
 80109ce:	bf00      	nop
 80109d0:	e7fe      	b.n	80109d0 <xTimerCreateTimerTask+0x74>
	return xReturn;
 80109d2:	697b      	ldr	r3, [r7, #20]
}
 80109d4:	4618      	mov	r0, r3
 80109d6:	3718      	adds	r7, #24
 80109d8:	46bd      	mov	sp, r7
 80109da:	bd80      	pop	{r7, pc}
 80109dc:	20000da8 	.word	0x20000da8
 80109e0:	08012444 	.word	0x08012444
 80109e4:	08010b21 	.word	0x08010b21
 80109e8:	20000dac 	.word	0x20000dac

080109ec <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 80109ec:	b580      	push	{r7, lr}
 80109ee:	b08a      	sub	sp, #40	; 0x28
 80109f0:	af00      	add	r7, sp, #0
 80109f2:	60f8      	str	r0, [r7, #12]
 80109f4:	60b9      	str	r1, [r7, #8]
 80109f6:	607a      	str	r2, [r7, #4]
 80109f8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 80109fa:	2300      	movs	r3, #0
 80109fc:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 80109fe:	68fb      	ldr	r3, [r7, #12]
 8010a00:	2b00      	cmp	r3, #0
 8010a02:	d10a      	bne.n	8010a1a <xTimerGenericCommand+0x2e>
	__asm volatile
 8010a04:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010a08:	f383 8811 	msr	BASEPRI, r3
 8010a0c:	f3bf 8f6f 	isb	sy
 8010a10:	f3bf 8f4f 	dsb	sy
 8010a14:	623b      	str	r3, [r7, #32]
}
 8010a16:	bf00      	nop
 8010a18:	e7fe      	b.n	8010a18 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8010a1a:	4b1a      	ldr	r3, [pc, #104]	; (8010a84 <xTimerGenericCommand+0x98>)
 8010a1c:	681b      	ldr	r3, [r3, #0]
 8010a1e:	2b00      	cmp	r3, #0
 8010a20:	d02a      	beq.n	8010a78 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8010a22:	68bb      	ldr	r3, [r7, #8]
 8010a24:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8010a26:	687b      	ldr	r3, [r7, #4]
 8010a28:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8010a2a:	68fb      	ldr	r3, [r7, #12]
 8010a2c:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8010a2e:	68bb      	ldr	r3, [r7, #8]
 8010a30:	2b05      	cmp	r3, #5
 8010a32:	dc18      	bgt.n	8010a66 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8010a34:	f7ff feb2 	bl	801079c <xTaskGetSchedulerState>
 8010a38:	4603      	mov	r3, r0
 8010a3a:	2b02      	cmp	r3, #2
 8010a3c:	d109      	bne.n	8010a52 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8010a3e:	4b11      	ldr	r3, [pc, #68]	; (8010a84 <xTimerGenericCommand+0x98>)
 8010a40:	6818      	ldr	r0, [r3, #0]
 8010a42:	f107 0110 	add.w	r1, r7, #16
 8010a46:	2300      	movs	r3, #0
 8010a48:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8010a4a:	f7fe fc0f 	bl	800f26c <xQueueGenericSend>
 8010a4e:	6278      	str	r0, [r7, #36]	; 0x24
 8010a50:	e012      	b.n	8010a78 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8010a52:	4b0c      	ldr	r3, [pc, #48]	; (8010a84 <xTimerGenericCommand+0x98>)
 8010a54:	6818      	ldr	r0, [r3, #0]
 8010a56:	f107 0110 	add.w	r1, r7, #16
 8010a5a:	2300      	movs	r3, #0
 8010a5c:	2200      	movs	r2, #0
 8010a5e:	f7fe fc05 	bl	800f26c <xQueueGenericSend>
 8010a62:	6278      	str	r0, [r7, #36]	; 0x24
 8010a64:	e008      	b.n	8010a78 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8010a66:	4b07      	ldr	r3, [pc, #28]	; (8010a84 <xTimerGenericCommand+0x98>)
 8010a68:	6818      	ldr	r0, [r3, #0]
 8010a6a:	f107 0110 	add.w	r1, r7, #16
 8010a6e:	2300      	movs	r3, #0
 8010a70:	683a      	ldr	r2, [r7, #0]
 8010a72:	f7fe fcf9 	bl	800f468 <xQueueGenericSendFromISR>
 8010a76:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8010a78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8010a7a:	4618      	mov	r0, r3
 8010a7c:	3728      	adds	r7, #40	; 0x28
 8010a7e:	46bd      	mov	sp, r7
 8010a80:	bd80      	pop	{r7, pc}
 8010a82:	bf00      	nop
 8010a84:	20000da8 	.word	0x20000da8

08010a88 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8010a88:	b580      	push	{r7, lr}
 8010a8a:	b088      	sub	sp, #32
 8010a8c:	af02      	add	r7, sp, #8
 8010a8e:	6078      	str	r0, [r7, #4]
 8010a90:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8010a92:	4b22      	ldr	r3, [pc, #136]	; (8010b1c <prvProcessExpiredTimer+0x94>)
 8010a94:	681b      	ldr	r3, [r3, #0]
 8010a96:	68db      	ldr	r3, [r3, #12]
 8010a98:	68db      	ldr	r3, [r3, #12]
 8010a9a:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8010a9c:	697b      	ldr	r3, [r7, #20]
 8010a9e:	3304      	adds	r3, #4
 8010aa0:	4618      	mov	r0, r3
 8010aa2:	f7fe fa7b 	bl	800ef9c <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8010aa6:	697b      	ldr	r3, [r7, #20]
 8010aa8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8010aac:	f003 0304 	and.w	r3, r3, #4
 8010ab0:	2b00      	cmp	r3, #0
 8010ab2:	d022      	beq.n	8010afa <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8010ab4:	697b      	ldr	r3, [r7, #20]
 8010ab6:	699a      	ldr	r2, [r3, #24]
 8010ab8:	687b      	ldr	r3, [r7, #4]
 8010aba:	18d1      	adds	r1, r2, r3
 8010abc:	687b      	ldr	r3, [r7, #4]
 8010abe:	683a      	ldr	r2, [r7, #0]
 8010ac0:	6978      	ldr	r0, [r7, #20]
 8010ac2:	f000 f8d1 	bl	8010c68 <prvInsertTimerInActiveList>
 8010ac6:	4603      	mov	r3, r0
 8010ac8:	2b00      	cmp	r3, #0
 8010aca:	d01f      	beq.n	8010b0c <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8010acc:	2300      	movs	r3, #0
 8010ace:	9300      	str	r3, [sp, #0]
 8010ad0:	2300      	movs	r3, #0
 8010ad2:	687a      	ldr	r2, [r7, #4]
 8010ad4:	2100      	movs	r1, #0
 8010ad6:	6978      	ldr	r0, [r7, #20]
 8010ad8:	f7ff ff88 	bl	80109ec <xTimerGenericCommand>
 8010adc:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8010ade:	693b      	ldr	r3, [r7, #16]
 8010ae0:	2b00      	cmp	r3, #0
 8010ae2:	d113      	bne.n	8010b0c <prvProcessExpiredTimer+0x84>
	__asm volatile
 8010ae4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010ae8:	f383 8811 	msr	BASEPRI, r3
 8010aec:	f3bf 8f6f 	isb	sy
 8010af0:	f3bf 8f4f 	dsb	sy
 8010af4:	60fb      	str	r3, [r7, #12]
}
 8010af6:	bf00      	nop
 8010af8:	e7fe      	b.n	8010af8 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8010afa:	697b      	ldr	r3, [r7, #20]
 8010afc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8010b00:	f023 0301 	bic.w	r3, r3, #1
 8010b04:	b2da      	uxtb	r2, r3
 8010b06:	697b      	ldr	r3, [r7, #20]
 8010b08:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8010b0c:	697b      	ldr	r3, [r7, #20]
 8010b0e:	6a1b      	ldr	r3, [r3, #32]
 8010b10:	6978      	ldr	r0, [r7, #20]
 8010b12:	4798      	blx	r3
}
 8010b14:	bf00      	nop
 8010b16:	3718      	adds	r7, #24
 8010b18:	46bd      	mov	sp, r7
 8010b1a:	bd80      	pop	{r7, pc}
 8010b1c:	20000da0 	.word	0x20000da0

08010b20 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8010b20:	b580      	push	{r7, lr}
 8010b22:	b084      	sub	sp, #16
 8010b24:	af00      	add	r7, sp, #0
 8010b26:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8010b28:	f107 0308 	add.w	r3, r7, #8
 8010b2c:	4618      	mov	r0, r3
 8010b2e:	f000 f857 	bl	8010be0 <prvGetNextExpireTime>
 8010b32:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8010b34:	68bb      	ldr	r3, [r7, #8]
 8010b36:	4619      	mov	r1, r3
 8010b38:	68f8      	ldr	r0, [r7, #12]
 8010b3a:	f000 f803 	bl	8010b44 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8010b3e:	f000 f8d5 	bl	8010cec <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8010b42:	e7f1      	b.n	8010b28 <prvTimerTask+0x8>

08010b44 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8010b44:	b580      	push	{r7, lr}
 8010b46:	b084      	sub	sp, #16
 8010b48:	af00      	add	r7, sp, #0
 8010b4a:	6078      	str	r0, [r7, #4]
 8010b4c:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8010b4e:	f7ff fa31 	bl	800ffb4 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8010b52:	f107 0308 	add.w	r3, r7, #8
 8010b56:	4618      	mov	r0, r3
 8010b58:	f000 f866 	bl	8010c28 <prvSampleTimeNow>
 8010b5c:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8010b5e:	68bb      	ldr	r3, [r7, #8]
 8010b60:	2b00      	cmp	r3, #0
 8010b62:	d130      	bne.n	8010bc6 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8010b64:	683b      	ldr	r3, [r7, #0]
 8010b66:	2b00      	cmp	r3, #0
 8010b68:	d10a      	bne.n	8010b80 <prvProcessTimerOrBlockTask+0x3c>
 8010b6a:	687a      	ldr	r2, [r7, #4]
 8010b6c:	68fb      	ldr	r3, [r7, #12]
 8010b6e:	429a      	cmp	r2, r3
 8010b70:	d806      	bhi.n	8010b80 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8010b72:	f7ff fa2d 	bl	800ffd0 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8010b76:	68f9      	ldr	r1, [r7, #12]
 8010b78:	6878      	ldr	r0, [r7, #4]
 8010b7a:	f7ff ff85 	bl	8010a88 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8010b7e:	e024      	b.n	8010bca <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8010b80:	683b      	ldr	r3, [r7, #0]
 8010b82:	2b00      	cmp	r3, #0
 8010b84:	d008      	beq.n	8010b98 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8010b86:	4b13      	ldr	r3, [pc, #76]	; (8010bd4 <prvProcessTimerOrBlockTask+0x90>)
 8010b88:	681b      	ldr	r3, [r3, #0]
 8010b8a:	681b      	ldr	r3, [r3, #0]
 8010b8c:	2b00      	cmp	r3, #0
 8010b8e:	d101      	bne.n	8010b94 <prvProcessTimerOrBlockTask+0x50>
 8010b90:	2301      	movs	r3, #1
 8010b92:	e000      	b.n	8010b96 <prvProcessTimerOrBlockTask+0x52>
 8010b94:	2300      	movs	r3, #0
 8010b96:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8010b98:	4b0f      	ldr	r3, [pc, #60]	; (8010bd8 <prvProcessTimerOrBlockTask+0x94>)
 8010b9a:	6818      	ldr	r0, [r3, #0]
 8010b9c:	687a      	ldr	r2, [r7, #4]
 8010b9e:	68fb      	ldr	r3, [r7, #12]
 8010ba0:	1ad3      	subs	r3, r2, r3
 8010ba2:	683a      	ldr	r2, [r7, #0]
 8010ba4:	4619      	mov	r1, r3
 8010ba6:	f7fe ff95 	bl	800fad4 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8010baa:	f7ff fa11 	bl	800ffd0 <xTaskResumeAll>
 8010bae:	4603      	mov	r3, r0
 8010bb0:	2b00      	cmp	r3, #0
 8010bb2:	d10a      	bne.n	8010bca <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8010bb4:	4b09      	ldr	r3, [pc, #36]	; (8010bdc <prvProcessTimerOrBlockTask+0x98>)
 8010bb6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8010bba:	601a      	str	r2, [r3, #0]
 8010bbc:	f3bf 8f4f 	dsb	sy
 8010bc0:	f3bf 8f6f 	isb	sy
}
 8010bc4:	e001      	b.n	8010bca <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8010bc6:	f7ff fa03 	bl	800ffd0 <xTaskResumeAll>
}
 8010bca:	bf00      	nop
 8010bcc:	3710      	adds	r7, #16
 8010bce:	46bd      	mov	sp, r7
 8010bd0:	bd80      	pop	{r7, pc}
 8010bd2:	bf00      	nop
 8010bd4:	20000da4 	.word	0x20000da4
 8010bd8:	20000da8 	.word	0x20000da8
 8010bdc:	e000ed04 	.word	0xe000ed04

08010be0 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8010be0:	b480      	push	{r7}
 8010be2:	b085      	sub	sp, #20
 8010be4:	af00      	add	r7, sp, #0
 8010be6:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8010be8:	4b0e      	ldr	r3, [pc, #56]	; (8010c24 <prvGetNextExpireTime+0x44>)
 8010bea:	681b      	ldr	r3, [r3, #0]
 8010bec:	681b      	ldr	r3, [r3, #0]
 8010bee:	2b00      	cmp	r3, #0
 8010bf0:	d101      	bne.n	8010bf6 <prvGetNextExpireTime+0x16>
 8010bf2:	2201      	movs	r2, #1
 8010bf4:	e000      	b.n	8010bf8 <prvGetNextExpireTime+0x18>
 8010bf6:	2200      	movs	r2, #0
 8010bf8:	687b      	ldr	r3, [r7, #4]
 8010bfa:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8010bfc:	687b      	ldr	r3, [r7, #4]
 8010bfe:	681b      	ldr	r3, [r3, #0]
 8010c00:	2b00      	cmp	r3, #0
 8010c02:	d105      	bne.n	8010c10 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8010c04:	4b07      	ldr	r3, [pc, #28]	; (8010c24 <prvGetNextExpireTime+0x44>)
 8010c06:	681b      	ldr	r3, [r3, #0]
 8010c08:	68db      	ldr	r3, [r3, #12]
 8010c0a:	681b      	ldr	r3, [r3, #0]
 8010c0c:	60fb      	str	r3, [r7, #12]
 8010c0e:	e001      	b.n	8010c14 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8010c10:	2300      	movs	r3, #0
 8010c12:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8010c14:	68fb      	ldr	r3, [r7, #12]
}
 8010c16:	4618      	mov	r0, r3
 8010c18:	3714      	adds	r7, #20
 8010c1a:	46bd      	mov	sp, r7
 8010c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010c20:	4770      	bx	lr
 8010c22:	bf00      	nop
 8010c24:	20000da0 	.word	0x20000da0

08010c28 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8010c28:	b580      	push	{r7, lr}
 8010c2a:	b084      	sub	sp, #16
 8010c2c:	af00      	add	r7, sp, #0
 8010c2e:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8010c30:	f7ff fa6c 	bl	801010c <xTaskGetTickCount>
 8010c34:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8010c36:	4b0b      	ldr	r3, [pc, #44]	; (8010c64 <prvSampleTimeNow+0x3c>)
 8010c38:	681b      	ldr	r3, [r3, #0]
 8010c3a:	68fa      	ldr	r2, [r7, #12]
 8010c3c:	429a      	cmp	r2, r3
 8010c3e:	d205      	bcs.n	8010c4c <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8010c40:	f000 f936 	bl	8010eb0 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8010c44:	687b      	ldr	r3, [r7, #4]
 8010c46:	2201      	movs	r2, #1
 8010c48:	601a      	str	r2, [r3, #0]
 8010c4a:	e002      	b.n	8010c52 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8010c4c:	687b      	ldr	r3, [r7, #4]
 8010c4e:	2200      	movs	r2, #0
 8010c50:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8010c52:	4a04      	ldr	r2, [pc, #16]	; (8010c64 <prvSampleTimeNow+0x3c>)
 8010c54:	68fb      	ldr	r3, [r7, #12]
 8010c56:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8010c58:	68fb      	ldr	r3, [r7, #12]
}
 8010c5a:	4618      	mov	r0, r3
 8010c5c:	3710      	adds	r7, #16
 8010c5e:	46bd      	mov	sp, r7
 8010c60:	bd80      	pop	{r7, pc}
 8010c62:	bf00      	nop
 8010c64:	20000db0 	.word	0x20000db0

08010c68 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8010c68:	b580      	push	{r7, lr}
 8010c6a:	b086      	sub	sp, #24
 8010c6c:	af00      	add	r7, sp, #0
 8010c6e:	60f8      	str	r0, [r7, #12]
 8010c70:	60b9      	str	r1, [r7, #8]
 8010c72:	607a      	str	r2, [r7, #4]
 8010c74:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8010c76:	2300      	movs	r3, #0
 8010c78:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8010c7a:	68fb      	ldr	r3, [r7, #12]
 8010c7c:	68ba      	ldr	r2, [r7, #8]
 8010c7e:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8010c80:	68fb      	ldr	r3, [r7, #12]
 8010c82:	68fa      	ldr	r2, [r7, #12]
 8010c84:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8010c86:	68ba      	ldr	r2, [r7, #8]
 8010c88:	687b      	ldr	r3, [r7, #4]
 8010c8a:	429a      	cmp	r2, r3
 8010c8c:	d812      	bhi.n	8010cb4 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8010c8e:	687a      	ldr	r2, [r7, #4]
 8010c90:	683b      	ldr	r3, [r7, #0]
 8010c92:	1ad2      	subs	r2, r2, r3
 8010c94:	68fb      	ldr	r3, [r7, #12]
 8010c96:	699b      	ldr	r3, [r3, #24]
 8010c98:	429a      	cmp	r2, r3
 8010c9a:	d302      	bcc.n	8010ca2 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8010c9c:	2301      	movs	r3, #1
 8010c9e:	617b      	str	r3, [r7, #20]
 8010ca0:	e01b      	b.n	8010cda <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8010ca2:	4b10      	ldr	r3, [pc, #64]	; (8010ce4 <prvInsertTimerInActiveList+0x7c>)
 8010ca4:	681a      	ldr	r2, [r3, #0]
 8010ca6:	68fb      	ldr	r3, [r7, #12]
 8010ca8:	3304      	adds	r3, #4
 8010caa:	4619      	mov	r1, r3
 8010cac:	4610      	mov	r0, r2
 8010cae:	f7fe f93c 	bl	800ef2a <vListInsert>
 8010cb2:	e012      	b.n	8010cda <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8010cb4:	687a      	ldr	r2, [r7, #4]
 8010cb6:	683b      	ldr	r3, [r7, #0]
 8010cb8:	429a      	cmp	r2, r3
 8010cba:	d206      	bcs.n	8010cca <prvInsertTimerInActiveList+0x62>
 8010cbc:	68ba      	ldr	r2, [r7, #8]
 8010cbe:	683b      	ldr	r3, [r7, #0]
 8010cc0:	429a      	cmp	r2, r3
 8010cc2:	d302      	bcc.n	8010cca <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8010cc4:	2301      	movs	r3, #1
 8010cc6:	617b      	str	r3, [r7, #20]
 8010cc8:	e007      	b.n	8010cda <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8010cca:	4b07      	ldr	r3, [pc, #28]	; (8010ce8 <prvInsertTimerInActiveList+0x80>)
 8010ccc:	681a      	ldr	r2, [r3, #0]
 8010cce:	68fb      	ldr	r3, [r7, #12]
 8010cd0:	3304      	adds	r3, #4
 8010cd2:	4619      	mov	r1, r3
 8010cd4:	4610      	mov	r0, r2
 8010cd6:	f7fe f928 	bl	800ef2a <vListInsert>
		}
	}

	return xProcessTimerNow;
 8010cda:	697b      	ldr	r3, [r7, #20]
}
 8010cdc:	4618      	mov	r0, r3
 8010cde:	3718      	adds	r7, #24
 8010ce0:	46bd      	mov	sp, r7
 8010ce2:	bd80      	pop	{r7, pc}
 8010ce4:	20000da4 	.word	0x20000da4
 8010ce8:	20000da0 	.word	0x20000da0

08010cec <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8010cec:	b580      	push	{r7, lr}
 8010cee:	b08e      	sub	sp, #56	; 0x38
 8010cf0:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8010cf2:	e0ca      	b.n	8010e8a <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8010cf4:	687b      	ldr	r3, [r7, #4]
 8010cf6:	2b00      	cmp	r3, #0
 8010cf8:	da18      	bge.n	8010d2c <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8010cfa:	1d3b      	adds	r3, r7, #4
 8010cfc:	3304      	adds	r3, #4
 8010cfe:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8010d00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010d02:	2b00      	cmp	r3, #0
 8010d04:	d10a      	bne.n	8010d1c <prvProcessReceivedCommands+0x30>
	__asm volatile
 8010d06:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010d0a:	f383 8811 	msr	BASEPRI, r3
 8010d0e:	f3bf 8f6f 	isb	sy
 8010d12:	f3bf 8f4f 	dsb	sy
 8010d16:	61fb      	str	r3, [r7, #28]
}
 8010d18:	bf00      	nop
 8010d1a:	e7fe      	b.n	8010d1a <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8010d1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010d1e:	681b      	ldr	r3, [r3, #0]
 8010d20:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8010d22:	6850      	ldr	r0, [r2, #4]
 8010d24:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8010d26:	6892      	ldr	r2, [r2, #8]
 8010d28:	4611      	mov	r1, r2
 8010d2a:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8010d2c:	687b      	ldr	r3, [r7, #4]
 8010d2e:	2b00      	cmp	r3, #0
 8010d30:	f2c0 80aa 	blt.w	8010e88 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8010d34:	68fb      	ldr	r3, [r7, #12]
 8010d36:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8010d38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010d3a:	695b      	ldr	r3, [r3, #20]
 8010d3c:	2b00      	cmp	r3, #0
 8010d3e:	d004      	beq.n	8010d4a <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8010d40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010d42:	3304      	adds	r3, #4
 8010d44:	4618      	mov	r0, r3
 8010d46:	f7fe f929 	bl	800ef9c <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8010d4a:	463b      	mov	r3, r7
 8010d4c:	4618      	mov	r0, r3
 8010d4e:	f7ff ff6b 	bl	8010c28 <prvSampleTimeNow>
 8010d52:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8010d54:	687b      	ldr	r3, [r7, #4]
 8010d56:	2b09      	cmp	r3, #9
 8010d58:	f200 8097 	bhi.w	8010e8a <prvProcessReceivedCommands+0x19e>
 8010d5c:	a201      	add	r2, pc, #4	; (adr r2, 8010d64 <prvProcessReceivedCommands+0x78>)
 8010d5e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010d62:	bf00      	nop
 8010d64:	08010d8d 	.word	0x08010d8d
 8010d68:	08010d8d 	.word	0x08010d8d
 8010d6c:	08010d8d 	.word	0x08010d8d
 8010d70:	08010e01 	.word	0x08010e01
 8010d74:	08010e15 	.word	0x08010e15
 8010d78:	08010e5f 	.word	0x08010e5f
 8010d7c:	08010d8d 	.word	0x08010d8d
 8010d80:	08010d8d 	.word	0x08010d8d
 8010d84:	08010e01 	.word	0x08010e01
 8010d88:	08010e15 	.word	0x08010e15
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8010d8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010d8e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8010d92:	f043 0301 	orr.w	r3, r3, #1
 8010d96:	b2da      	uxtb	r2, r3
 8010d98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010d9a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8010d9e:	68ba      	ldr	r2, [r7, #8]
 8010da0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010da2:	699b      	ldr	r3, [r3, #24]
 8010da4:	18d1      	adds	r1, r2, r3
 8010da6:	68bb      	ldr	r3, [r7, #8]
 8010da8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8010daa:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8010dac:	f7ff ff5c 	bl	8010c68 <prvInsertTimerInActiveList>
 8010db0:	4603      	mov	r3, r0
 8010db2:	2b00      	cmp	r3, #0
 8010db4:	d069      	beq.n	8010e8a <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8010db6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010db8:	6a1b      	ldr	r3, [r3, #32]
 8010dba:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8010dbc:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8010dbe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010dc0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8010dc4:	f003 0304 	and.w	r3, r3, #4
 8010dc8:	2b00      	cmp	r3, #0
 8010dca:	d05e      	beq.n	8010e8a <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8010dcc:	68ba      	ldr	r2, [r7, #8]
 8010dce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010dd0:	699b      	ldr	r3, [r3, #24]
 8010dd2:	441a      	add	r2, r3
 8010dd4:	2300      	movs	r3, #0
 8010dd6:	9300      	str	r3, [sp, #0]
 8010dd8:	2300      	movs	r3, #0
 8010dda:	2100      	movs	r1, #0
 8010ddc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8010dde:	f7ff fe05 	bl	80109ec <xTimerGenericCommand>
 8010de2:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8010de4:	6a3b      	ldr	r3, [r7, #32]
 8010de6:	2b00      	cmp	r3, #0
 8010de8:	d14f      	bne.n	8010e8a <prvProcessReceivedCommands+0x19e>
	__asm volatile
 8010dea:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010dee:	f383 8811 	msr	BASEPRI, r3
 8010df2:	f3bf 8f6f 	isb	sy
 8010df6:	f3bf 8f4f 	dsb	sy
 8010dfa:	61bb      	str	r3, [r7, #24]
}
 8010dfc:	bf00      	nop
 8010dfe:	e7fe      	b.n	8010dfe <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8010e00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010e02:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8010e06:	f023 0301 	bic.w	r3, r3, #1
 8010e0a:	b2da      	uxtb	r2, r3
 8010e0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010e0e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8010e12:	e03a      	b.n	8010e8a <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8010e14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010e16:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8010e1a:	f043 0301 	orr.w	r3, r3, #1
 8010e1e:	b2da      	uxtb	r2, r3
 8010e20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010e22:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8010e26:	68ba      	ldr	r2, [r7, #8]
 8010e28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010e2a:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8010e2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010e2e:	699b      	ldr	r3, [r3, #24]
 8010e30:	2b00      	cmp	r3, #0
 8010e32:	d10a      	bne.n	8010e4a <prvProcessReceivedCommands+0x15e>
	__asm volatile
 8010e34:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010e38:	f383 8811 	msr	BASEPRI, r3
 8010e3c:	f3bf 8f6f 	isb	sy
 8010e40:	f3bf 8f4f 	dsb	sy
 8010e44:	617b      	str	r3, [r7, #20]
}
 8010e46:	bf00      	nop
 8010e48:	e7fe      	b.n	8010e48 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8010e4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010e4c:	699a      	ldr	r2, [r3, #24]
 8010e4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010e50:	18d1      	adds	r1, r2, r3
 8010e52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010e54:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8010e56:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8010e58:	f7ff ff06 	bl	8010c68 <prvInsertTimerInActiveList>
					break;
 8010e5c:	e015      	b.n	8010e8a <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8010e5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010e60:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8010e64:	f003 0302 	and.w	r3, r3, #2
 8010e68:	2b00      	cmp	r3, #0
 8010e6a:	d103      	bne.n	8010e74 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 8010e6c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8010e6e:	f000 fbdf 	bl	8011630 <vPortFree>
 8010e72:	e00a      	b.n	8010e8a <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8010e74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010e76:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8010e7a:	f023 0301 	bic.w	r3, r3, #1
 8010e7e:	b2da      	uxtb	r2, r3
 8010e80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010e82:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8010e86:	e000      	b.n	8010e8a <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8010e88:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8010e8a:	4b08      	ldr	r3, [pc, #32]	; (8010eac <prvProcessReceivedCommands+0x1c0>)
 8010e8c:	681b      	ldr	r3, [r3, #0]
 8010e8e:	1d39      	adds	r1, r7, #4
 8010e90:	2200      	movs	r2, #0
 8010e92:	4618      	mov	r0, r3
 8010e94:	f7fe fb84 	bl	800f5a0 <xQueueReceive>
 8010e98:	4603      	mov	r3, r0
 8010e9a:	2b00      	cmp	r3, #0
 8010e9c:	f47f af2a 	bne.w	8010cf4 <prvProcessReceivedCommands+0x8>
	}
}
 8010ea0:	bf00      	nop
 8010ea2:	bf00      	nop
 8010ea4:	3730      	adds	r7, #48	; 0x30
 8010ea6:	46bd      	mov	sp, r7
 8010ea8:	bd80      	pop	{r7, pc}
 8010eaa:	bf00      	nop
 8010eac:	20000da8 	.word	0x20000da8

08010eb0 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8010eb0:	b580      	push	{r7, lr}
 8010eb2:	b088      	sub	sp, #32
 8010eb4:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8010eb6:	e048      	b.n	8010f4a <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8010eb8:	4b2d      	ldr	r3, [pc, #180]	; (8010f70 <prvSwitchTimerLists+0xc0>)
 8010eba:	681b      	ldr	r3, [r3, #0]
 8010ebc:	68db      	ldr	r3, [r3, #12]
 8010ebe:	681b      	ldr	r3, [r3, #0]
 8010ec0:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8010ec2:	4b2b      	ldr	r3, [pc, #172]	; (8010f70 <prvSwitchTimerLists+0xc0>)
 8010ec4:	681b      	ldr	r3, [r3, #0]
 8010ec6:	68db      	ldr	r3, [r3, #12]
 8010ec8:	68db      	ldr	r3, [r3, #12]
 8010eca:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8010ecc:	68fb      	ldr	r3, [r7, #12]
 8010ece:	3304      	adds	r3, #4
 8010ed0:	4618      	mov	r0, r3
 8010ed2:	f7fe f863 	bl	800ef9c <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8010ed6:	68fb      	ldr	r3, [r7, #12]
 8010ed8:	6a1b      	ldr	r3, [r3, #32]
 8010eda:	68f8      	ldr	r0, [r7, #12]
 8010edc:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8010ede:	68fb      	ldr	r3, [r7, #12]
 8010ee0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8010ee4:	f003 0304 	and.w	r3, r3, #4
 8010ee8:	2b00      	cmp	r3, #0
 8010eea:	d02e      	beq.n	8010f4a <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8010eec:	68fb      	ldr	r3, [r7, #12]
 8010eee:	699b      	ldr	r3, [r3, #24]
 8010ef0:	693a      	ldr	r2, [r7, #16]
 8010ef2:	4413      	add	r3, r2
 8010ef4:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8010ef6:	68ba      	ldr	r2, [r7, #8]
 8010ef8:	693b      	ldr	r3, [r7, #16]
 8010efa:	429a      	cmp	r2, r3
 8010efc:	d90e      	bls.n	8010f1c <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8010efe:	68fb      	ldr	r3, [r7, #12]
 8010f00:	68ba      	ldr	r2, [r7, #8]
 8010f02:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8010f04:	68fb      	ldr	r3, [r7, #12]
 8010f06:	68fa      	ldr	r2, [r7, #12]
 8010f08:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8010f0a:	4b19      	ldr	r3, [pc, #100]	; (8010f70 <prvSwitchTimerLists+0xc0>)
 8010f0c:	681a      	ldr	r2, [r3, #0]
 8010f0e:	68fb      	ldr	r3, [r7, #12]
 8010f10:	3304      	adds	r3, #4
 8010f12:	4619      	mov	r1, r3
 8010f14:	4610      	mov	r0, r2
 8010f16:	f7fe f808 	bl	800ef2a <vListInsert>
 8010f1a:	e016      	b.n	8010f4a <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8010f1c:	2300      	movs	r3, #0
 8010f1e:	9300      	str	r3, [sp, #0]
 8010f20:	2300      	movs	r3, #0
 8010f22:	693a      	ldr	r2, [r7, #16]
 8010f24:	2100      	movs	r1, #0
 8010f26:	68f8      	ldr	r0, [r7, #12]
 8010f28:	f7ff fd60 	bl	80109ec <xTimerGenericCommand>
 8010f2c:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8010f2e:	687b      	ldr	r3, [r7, #4]
 8010f30:	2b00      	cmp	r3, #0
 8010f32:	d10a      	bne.n	8010f4a <prvSwitchTimerLists+0x9a>
	__asm volatile
 8010f34:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010f38:	f383 8811 	msr	BASEPRI, r3
 8010f3c:	f3bf 8f6f 	isb	sy
 8010f40:	f3bf 8f4f 	dsb	sy
 8010f44:	603b      	str	r3, [r7, #0]
}
 8010f46:	bf00      	nop
 8010f48:	e7fe      	b.n	8010f48 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8010f4a:	4b09      	ldr	r3, [pc, #36]	; (8010f70 <prvSwitchTimerLists+0xc0>)
 8010f4c:	681b      	ldr	r3, [r3, #0]
 8010f4e:	681b      	ldr	r3, [r3, #0]
 8010f50:	2b00      	cmp	r3, #0
 8010f52:	d1b1      	bne.n	8010eb8 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8010f54:	4b06      	ldr	r3, [pc, #24]	; (8010f70 <prvSwitchTimerLists+0xc0>)
 8010f56:	681b      	ldr	r3, [r3, #0]
 8010f58:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8010f5a:	4b06      	ldr	r3, [pc, #24]	; (8010f74 <prvSwitchTimerLists+0xc4>)
 8010f5c:	681b      	ldr	r3, [r3, #0]
 8010f5e:	4a04      	ldr	r2, [pc, #16]	; (8010f70 <prvSwitchTimerLists+0xc0>)
 8010f60:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8010f62:	4a04      	ldr	r2, [pc, #16]	; (8010f74 <prvSwitchTimerLists+0xc4>)
 8010f64:	697b      	ldr	r3, [r7, #20]
 8010f66:	6013      	str	r3, [r2, #0]
}
 8010f68:	bf00      	nop
 8010f6a:	3718      	adds	r7, #24
 8010f6c:	46bd      	mov	sp, r7
 8010f6e:	bd80      	pop	{r7, pc}
 8010f70:	20000da0 	.word	0x20000da0
 8010f74:	20000da4 	.word	0x20000da4

08010f78 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8010f78:	b580      	push	{r7, lr}
 8010f7a:	b082      	sub	sp, #8
 8010f7c:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8010f7e:	f000 f969 	bl	8011254 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8010f82:	4b15      	ldr	r3, [pc, #84]	; (8010fd8 <prvCheckForValidListAndQueue+0x60>)
 8010f84:	681b      	ldr	r3, [r3, #0]
 8010f86:	2b00      	cmp	r3, #0
 8010f88:	d120      	bne.n	8010fcc <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8010f8a:	4814      	ldr	r0, [pc, #80]	; (8010fdc <prvCheckForValidListAndQueue+0x64>)
 8010f8c:	f7fd ff7c 	bl	800ee88 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8010f90:	4813      	ldr	r0, [pc, #76]	; (8010fe0 <prvCheckForValidListAndQueue+0x68>)
 8010f92:	f7fd ff79 	bl	800ee88 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8010f96:	4b13      	ldr	r3, [pc, #76]	; (8010fe4 <prvCheckForValidListAndQueue+0x6c>)
 8010f98:	4a10      	ldr	r2, [pc, #64]	; (8010fdc <prvCheckForValidListAndQueue+0x64>)
 8010f9a:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8010f9c:	4b12      	ldr	r3, [pc, #72]	; (8010fe8 <prvCheckForValidListAndQueue+0x70>)
 8010f9e:	4a10      	ldr	r2, [pc, #64]	; (8010fe0 <prvCheckForValidListAndQueue+0x68>)
 8010fa0:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8010fa2:	2300      	movs	r3, #0
 8010fa4:	9300      	str	r3, [sp, #0]
 8010fa6:	4b11      	ldr	r3, [pc, #68]	; (8010fec <prvCheckForValidListAndQueue+0x74>)
 8010fa8:	4a11      	ldr	r2, [pc, #68]	; (8010ff0 <prvCheckForValidListAndQueue+0x78>)
 8010faa:	2110      	movs	r1, #16
 8010fac:	200a      	movs	r0, #10
 8010fae:	f7fe f887 	bl	800f0c0 <xQueueGenericCreateStatic>
 8010fb2:	4603      	mov	r3, r0
 8010fb4:	4a08      	ldr	r2, [pc, #32]	; (8010fd8 <prvCheckForValidListAndQueue+0x60>)
 8010fb6:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8010fb8:	4b07      	ldr	r3, [pc, #28]	; (8010fd8 <prvCheckForValidListAndQueue+0x60>)
 8010fba:	681b      	ldr	r3, [r3, #0]
 8010fbc:	2b00      	cmp	r3, #0
 8010fbe:	d005      	beq.n	8010fcc <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8010fc0:	4b05      	ldr	r3, [pc, #20]	; (8010fd8 <prvCheckForValidListAndQueue+0x60>)
 8010fc2:	681b      	ldr	r3, [r3, #0]
 8010fc4:	490b      	ldr	r1, [pc, #44]	; (8010ff4 <prvCheckForValidListAndQueue+0x7c>)
 8010fc6:	4618      	mov	r0, r3
 8010fc8:	f7fe fd5a 	bl	800fa80 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8010fcc:	f000 f972 	bl	80112b4 <vPortExitCritical>
}
 8010fd0:	bf00      	nop
 8010fd2:	46bd      	mov	sp, r7
 8010fd4:	bd80      	pop	{r7, pc}
 8010fd6:	bf00      	nop
 8010fd8:	20000da8 	.word	0x20000da8
 8010fdc:	20000d78 	.word	0x20000d78
 8010fe0:	20000d8c 	.word	0x20000d8c
 8010fe4:	20000da0 	.word	0x20000da0
 8010fe8:	20000da4 	.word	0x20000da4
 8010fec:	20000e54 	.word	0x20000e54
 8010ff0:	20000db4 	.word	0x20000db4
 8010ff4:	0801244c 	.word	0x0801244c

08010ff8 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8010ff8:	b480      	push	{r7}
 8010ffa:	b085      	sub	sp, #20
 8010ffc:	af00      	add	r7, sp, #0
 8010ffe:	60f8      	str	r0, [r7, #12]
 8011000:	60b9      	str	r1, [r7, #8]
 8011002:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8011004:	68fb      	ldr	r3, [r7, #12]
 8011006:	3b04      	subs	r3, #4
 8011008:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 801100a:	68fb      	ldr	r3, [r7, #12]
 801100c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8011010:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8011012:	68fb      	ldr	r3, [r7, #12]
 8011014:	3b04      	subs	r3, #4
 8011016:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8011018:	68bb      	ldr	r3, [r7, #8]
 801101a:	f023 0201 	bic.w	r2, r3, #1
 801101e:	68fb      	ldr	r3, [r7, #12]
 8011020:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8011022:	68fb      	ldr	r3, [r7, #12]
 8011024:	3b04      	subs	r3, #4
 8011026:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8011028:	4a0c      	ldr	r2, [pc, #48]	; (801105c <pxPortInitialiseStack+0x64>)
 801102a:	68fb      	ldr	r3, [r7, #12]
 801102c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 801102e:	68fb      	ldr	r3, [r7, #12]
 8011030:	3b14      	subs	r3, #20
 8011032:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8011034:	687a      	ldr	r2, [r7, #4]
 8011036:	68fb      	ldr	r3, [r7, #12]
 8011038:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 801103a:	68fb      	ldr	r3, [r7, #12]
 801103c:	3b04      	subs	r3, #4
 801103e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8011040:	68fb      	ldr	r3, [r7, #12]
 8011042:	f06f 0202 	mvn.w	r2, #2
 8011046:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8011048:	68fb      	ldr	r3, [r7, #12]
 801104a:	3b20      	subs	r3, #32
 801104c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 801104e:	68fb      	ldr	r3, [r7, #12]
}
 8011050:	4618      	mov	r0, r3
 8011052:	3714      	adds	r7, #20
 8011054:	46bd      	mov	sp, r7
 8011056:	f85d 7b04 	ldr.w	r7, [sp], #4
 801105a:	4770      	bx	lr
 801105c:	08011061 	.word	0x08011061

08011060 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8011060:	b480      	push	{r7}
 8011062:	b085      	sub	sp, #20
 8011064:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8011066:	2300      	movs	r3, #0
 8011068:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 801106a:	4b12      	ldr	r3, [pc, #72]	; (80110b4 <prvTaskExitError+0x54>)
 801106c:	681b      	ldr	r3, [r3, #0]
 801106e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011072:	d00a      	beq.n	801108a <prvTaskExitError+0x2a>
	__asm volatile
 8011074:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011078:	f383 8811 	msr	BASEPRI, r3
 801107c:	f3bf 8f6f 	isb	sy
 8011080:	f3bf 8f4f 	dsb	sy
 8011084:	60fb      	str	r3, [r7, #12]
}
 8011086:	bf00      	nop
 8011088:	e7fe      	b.n	8011088 <prvTaskExitError+0x28>
	__asm volatile
 801108a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801108e:	f383 8811 	msr	BASEPRI, r3
 8011092:	f3bf 8f6f 	isb	sy
 8011096:	f3bf 8f4f 	dsb	sy
 801109a:	60bb      	str	r3, [r7, #8]
}
 801109c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 801109e:	bf00      	nop
 80110a0:	687b      	ldr	r3, [r7, #4]
 80110a2:	2b00      	cmp	r3, #0
 80110a4:	d0fc      	beq.n	80110a0 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80110a6:	bf00      	nop
 80110a8:	bf00      	nop
 80110aa:	3714      	adds	r7, #20
 80110ac:	46bd      	mov	sp, r7
 80110ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80110b2:	4770      	bx	lr
 80110b4:	20000120 	.word	0x20000120
	...

080110c0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80110c0:	4b07      	ldr	r3, [pc, #28]	; (80110e0 <pxCurrentTCBConst2>)
 80110c2:	6819      	ldr	r1, [r3, #0]
 80110c4:	6808      	ldr	r0, [r1, #0]
 80110c6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80110ca:	f380 8809 	msr	PSP, r0
 80110ce:	f3bf 8f6f 	isb	sy
 80110d2:	f04f 0000 	mov.w	r0, #0
 80110d6:	f380 8811 	msr	BASEPRI, r0
 80110da:	4770      	bx	lr
 80110dc:	f3af 8000 	nop.w

080110e0 <pxCurrentTCBConst2>:
 80110e0:	20000878 	.word	0x20000878
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80110e4:	bf00      	nop
 80110e6:	bf00      	nop

080110e8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80110e8:	4808      	ldr	r0, [pc, #32]	; (801110c <prvPortStartFirstTask+0x24>)
 80110ea:	6800      	ldr	r0, [r0, #0]
 80110ec:	6800      	ldr	r0, [r0, #0]
 80110ee:	f380 8808 	msr	MSP, r0
 80110f2:	f04f 0000 	mov.w	r0, #0
 80110f6:	f380 8814 	msr	CONTROL, r0
 80110fa:	b662      	cpsie	i
 80110fc:	b661      	cpsie	f
 80110fe:	f3bf 8f4f 	dsb	sy
 8011102:	f3bf 8f6f 	isb	sy
 8011106:	df00      	svc	0
 8011108:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 801110a:	bf00      	nop
 801110c:	e000ed08 	.word	0xe000ed08

08011110 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8011110:	b580      	push	{r7, lr}
 8011112:	b086      	sub	sp, #24
 8011114:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8011116:	4b46      	ldr	r3, [pc, #280]	; (8011230 <xPortStartScheduler+0x120>)
 8011118:	681b      	ldr	r3, [r3, #0]
 801111a:	4a46      	ldr	r2, [pc, #280]	; (8011234 <xPortStartScheduler+0x124>)
 801111c:	4293      	cmp	r3, r2
 801111e:	d10a      	bne.n	8011136 <xPortStartScheduler+0x26>
	__asm volatile
 8011120:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011124:	f383 8811 	msr	BASEPRI, r3
 8011128:	f3bf 8f6f 	isb	sy
 801112c:	f3bf 8f4f 	dsb	sy
 8011130:	613b      	str	r3, [r7, #16]
}
 8011132:	bf00      	nop
 8011134:	e7fe      	b.n	8011134 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8011136:	4b3e      	ldr	r3, [pc, #248]	; (8011230 <xPortStartScheduler+0x120>)
 8011138:	681b      	ldr	r3, [r3, #0]
 801113a:	4a3f      	ldr	r2, [pc, #252]	; (8011238 <xPortStartScheduler+0x128>)
 801113c:	4293      	cmp	r3, r2
 801113e:	d10a      	bne.n	8011156 <xPortStartScheduler+0x46>
	__asm volatile
 8011140:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011144:	f383 8811 	msr	BASEPRI, r3
 8011148:	f3bf 8f6f 	isb	sy
 801114c:	f3bf 8f4f 	dsb	sy
 8011150:	60fb      	str	r3, [r7, #12]
}
 8011152:	bf00      	nop
 8011154:	e7fe      	b.n	8011154 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8011156:	4b39      	ldr	r3, [pc, #228]	; (801123c <xPortStartScheduler+0x12c>)
 8011158:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 801115a:	697b      	ldr	r3, [r7, #20]
 801115c:	781b      	ldrb	r3, [r3, #0]
 801115e:	b2db      	uxtb	r3, r3
 8011160:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8011162:	697b      	ldr	r3, [r7, #20]
 8011164:	22ff      	movs	r2, #255	; 0xff
 8011166:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8011168:	697b      	ldr	r3, [r7, #20]
 801116a:	781b      	ldrb	r3, [r3, #0]
 801116c:	b2db      	uxtb	r3, r3
 801116e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8011170:	78fb      	ldrb	r3, [r7, #3]
 8011172:	b2db      	uxtb	r3, r3
 8011174:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8011178:	b2da      	uxtb	r2, r3
 801117a:	4b31      	ldr	r3, [pc, #196]	; (8011240 <xPortStartScheduler+0x130>)
 801117c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 801117e:	4b31      	ldr	r3, [pc, #196]	; (8011244 <xPortStartScheduler+0x134>)
 8011180:	2207      	movs	r2, #7
 8011182:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8011184:	e009      	b.n	801119a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8011186:	4b2f      	ldr	r3, [pc, #188]	; (8011244 <xPortStartScheduler+0x134>)
 8011188:	681b      	ldr	r3, [r3, #0]
 801118a:	3b01      	subs	r3, #1
 801118c:	4a2d      	ldr	r2, [pc, #180]	; (8011244 <xPortStartScheduler+0x134>)
 801118e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8011190:	78fb      	ldrb	r3, [r7, #3]
 8011192:	b2db      	uxtb	r3, r3
 8011194:	005b      	lsls	r3, r3, #1
 8011196:	b2db      	uxtb	r3, r3
 8011198:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 801119a:	78fb      	ldrb	r3, [r7, #3]
 801119c:	b2db      	uxtb	r3, r3
 801119e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80111a2:	2b80      	cmp	r3, #128	; 0x80
 80111a4:	d0ef      	beq.n	8011186 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80111a6:	4b27      	ldr	r3, [pc, #156]	; (8011244 <xPortStartScheduler+0x134>)
 80111a8:	681b      	ldr	r3, [r3, #0]
 80111aa:	f1c3 0307 	rsb	r3, r3, #7
 80111ae:	2b04      	cmp	r3, #4
 80111b0:	d00a      	beq.n	80111c8 <xPortStartScheduler+0xb8>
	__asm volatile
 80111b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80111b6:	f383 8811 	msr	BASEPRI, r3
 80111ba:	f3bf 8f6f 	isb	sy
 80111be:	f3bf 8f4f 	dsb	sy
 80111c2:	60bb      	str	r3, [r7, #8]
}
 80111c4:	bf00      	nop
 80111c6:	e7fe      	b.n	80111c6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80111c8:	4b1e      	ldr	r3, [pc, #120]	; (8011244 <xPortStartScheduler+0x134>)
 80111ca:	681b      	ldr	r3, [r3, #0]
 80111cc:	021b      	lsls	r3, r3, #8
 80111ce:	4a1d      	ldr	r2, [pc, #116]	; (8011244 <xPortStartScheduler+0x134>)
 80111d0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80111d2:	4b1c      	ldr	r3, [pc, #112]	; (8011244 <xPortStartScheduler+0x134>)
 80111d4:	681b      	ldr	r3, [r3, #0]
 80111d6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80111da:	4a1a      	ldr	r2, [pc, #104]	; (8011244 <xPortStartScheduler+0x134>)
 80111dc:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80111de:	687b      	ldr	r3, [r7, #4]
 80111e0:	b2da      	uxtb	r2, r3
 80111e2:	697b      	ldr	r3, [r7, #20]
 80111e4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80111e6:	4b18      	ldr	r3, [pc, #96]	; (8011248 <xPortStartScheduler+0x138>)
 80111e8:	681b      	ldr	r3, [r3, #0]
 80111ea:	4a17      	ldr	r2, [pc, #92]	; (8011248 <xPortStartScheduler+0x138>)
 80111ec:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80111f0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80111f2:	4b15      	ldr	r3, [pc, #84]	; (8011248 <xPortStartScheduler+0x138>)
 80111f4:	681b      	ldr	r3, [r3, #0]
 80111f6:	4a14      	ldr	r2, [pc, #80]	; (8011248 <xPortStartScheduler+0x138>)
 80111f8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80111fc:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80111fe:	f000 f8dd 	bl	80113bc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8011202:	4b12      	ldr	r3, [pc, #72]	; (801124c <xPortStartScheduler+0x13c>)
 8011204:	2200      	movs	r2, #0
 8011206:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8011208:	f000 f8fc 	bl	8011404 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 801120c:	4b10      	ldr	r3, [pc, #64]	; (8011250 <xPortStartScheduler+0x140>)
 801120e:	681b      	ldr	r3, [r3, #0]
 8011210:	4a0f      	ldr	r2, [pc, #60]	; (8011250 <xPortStartScheduler+0x140>)
 8011212:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8011216:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8011218:	f7ff ff66 	bl	80110e8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 801121c:	f7ff f852 	bl	80102c4 <vTaskSwitchContext>
	prvTaskExitError();
 8011220:	f7ff ff1e 	bl	8011060 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8011224:	2300      	movs	r3, #0
}
 8011226:	4618      	mov	r0, r3
 8011228:	3718      	adds	r7, #24
 801122a:	46bd      	mov	sp, r7
 801122c:	bd80      	pop	{r7, pc}
 801122e:	bf00      	nop
 8011230:	e000ed00 	.word	0xe000ed00
 8011234:	410fc271 	.word	0x410fc271
 8011238:	410fc270 	.word	0x410fc270
 801123c:	e000e400 	.word	0xe000e400
 8011240:	20000ea4 	.word	0x20000ea4
 8011244:	20000ea8 	.word	0x20000ea8
 8011248:	e000ed20 	.word	0xe000ed20
 801124c:	20000120 	.word	0x20000120
 8011250:	e000ef34 	.word	0xe000ef34

08011254 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8011254:	b480      	push	{r7}
 8011256:	b083      	sub	sp, #12
 8011258:	af00      	add	r7, sp, #0
	__asm volatile
 801125a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801125e:	f383 8811 	msr	BASEPRI, r3
 8011262:	f3bf 8f6f 	isb	sy
 8011266:	f3bf 8f4f 	dsb	sy
 801126a:	607b      	str	r3, [r7, #4]
}
 801126c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 801126e:	4b0f      	ldr	r3, [pc, #60]	; (80112ac <vPortEnterCritical+0x58>)
 8011270:	681b      	ldr	r3, [r3, #0]
 8011272:	3301      	adds	r3, #1
 8011274:	4a0d      	ldr	r2, [pc, #52]	; (80112ac <vPortEnterCritical+0x58>)
 8011276:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8011278:	4b0c      	ldr	r3, [pc, #48]	; (80112ac <vPortEnterCritical+0x58>)
 801127a:	681b      	ldr	r3, [r3, #0]
 801127c:	2b01      	cmp	r3, #1
 801127e:	d10f      	bne.n	80112a0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8011280:	4b0b      	ldr	r3, [pc, #44]	; (80112b0 <vPortEnterCritical+0x5c>)
 8011282:	681b      	ldr	r3, [r3, #0]
 8011284:	b2db      	uxtb	r3, r3
 8011286:	2b00      	cmp	r3, #0
 8011288:	d00a      	beq.n	80112a0 <vPortEnterCritical+0x4c>
	__asm volatile
 801128a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801128e:	f383 8811 	msr	BASEPRI, r3
 8011292:	f3bf 8f6f 	isb	sy
 8011296:	f3bf 8f4f 	dsb	sy
 801129a:	603b      	str	r3, [r7, #0]
}
 801129c:	bf00      	nop
 801129e:	e7fe      	b.n	801129e <vPortEnterCritical+0x4a>
	}
}
 80112a0:	bf00      	nop
 80112a2:	370c      	adds	r7, #12
 80112a4:	46bd      	mov	sp, r7
 80112a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80112aa:	4770      	bx	lr
 80112ac:	20000120 	.word	0x20000120
 80112b0:	e000ed04 	.word	0xe000ed04

080112b4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80112b4:	b480      	push	{r7}
 80112b6:	b083      	sub	sp, #12
 80112b8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80112ba:	4b12      	ldr	r3, [pc, #72]	; (8011304 <vPortExitCritical+0x50>)
 80112bc:	681b      	ldr	r3, [r3, #0]
 80112be:	2b00      	cmp	r3, #0
 80112c0:	d10a      	bne.n	80112d8 <vPortExitCritical+0x24>
	__asm volatile
 80112c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80112c6:	f383 8811 	msr	BASEPRI, r3
 80112ca:	f3bf 8f6f 	isb	sy
 80112ce:	f3bf 8f4f 	dsb	sy
 80112d2:	607b      	str	r3, [r7, #4]
}
 80112d4:	bf00      	nop
 80112d6:	e7fe      	b.n	80112d6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 80112d8:	4b0a      	ldr	r3, [pc, #40]	; (8011304 <vPortExitCritical+0x50>)
 80112da:	681b      	ldr	r3, [r3, #0]
 80112dc:	3b01      	subs	r3, #1
 80112de:	4a09      	ldr	r2, [pc, #36]	; (8011304 <vPortExitCritical+0x50>)
 80112e0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80112e2:	4b08      	ldr	r3, [pc, #32]	; (8011304 <vPortExitCritical+0x50>)
 80112e4:	681b      	ldr	r3, [r3, #0]
 80112e6:	2b00      	cmp	r3, #0
 80112e8:	d105      	bne.n	80112f6 <vPortExitCritical+0x42>
 80112ea:	2300      	movs	r3, #0
 80112ec:	603b      	str	r3, [r7, #0]
	__asm volatile
 80112ee:	683b      	ldr	r3, [r7, #0]
 80112f0:	f383 8811 	msr	BASEPRI, r3
}
 80112f4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80112f6:	bf00      	nop
 80112f8:	370c      	adds	r7, #12
 80112fa:	46bd      	mov	sp, r7
 80112fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011300:	4770      	bx	lr
 8011302:	bf00      	nop
 8011304:	20000120 	.word	0x20000120
	...

08011310 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8011310:	f3ef 8009 	mrs	r0, PSP
 8011314:	f3bf 8f6f 	isb	sy
 8011318:	4b15      	ldr	r3, [pc, #84]	; (8011370 <pxCurrentTCBConst>)
 801131a:	681a      	ldr	r2, [r3, #0]
 801131c:	f01e 0f10 	tst.w	lr, #16
 8011320:	bf08      	it	eq
 8011322:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8011326:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801132a:	6010      	str	r0, [r2, #0]
 801132c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8011330:	f04f 0050 	mov.w	r0, #80	; 0x50
 8011334:	f380 8811 	msr	BASEPRI, r0
 8011338:	f3bf 8f4f 	dsb	sy
 801133c:	f3bf 8f6f 	isb	sy
 8011340:	f7fe ffc0 	bl	80102c4 <vTaskSwitchContext>
 8011344:	f04f 0000 	mov.w	r0, #0
 8011348:	f380 8811 	msr	BASEPRI, r0
 801134c:	bc09      	pop	{r0, r3}
 801134e:	6819      	ldr	r1, [r3, #0]
 8011350:	6808      	ldr	r0, [r1, #0]
 8011352:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011356:	f01e 0f10 	tst.w	lr, #16
 801135a:	bf08      	it	eq
 801135c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8011360:	f380 8809 	msr	PSP, r0
 8011364:	f3bf 8f6f 	isb	sy
 8011368:	4770      	bx	lr
 801136a:	bf00      	nop
 801136c:	f3af 8000 	nop.w

08011370 <pxCurrentTCBConst>:
 8011370:	20000878 	.word	0x20000878
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8011374:	bf00      	nop
 8011376:	bf00      	nop

08011378 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8011378:	b580      	push	{r7, lr}
 801137a:	b082      	sub	sp, #8
 801137c:	af00      	add	r7, sp, #0
	__asm volatile
 801137e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011382:	f383 8811 	msr	BASEPRI, r3
 8011386:	f3bf 8f6f 	isb	sy
 801138a:	f3bf 8f4f 	dsb	sy
 801138e:	607b      	str	r3, [r7, #4]
}
 8011390:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8011392:	f7fe fedd 	bl	8010150 <xTaskIncrementTick>
 8011396:	4603      	mov	r3, r0
 8011398:	2b00      	cmp	r3, #0
 801139a:	d003      	beq.n	80113a4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 801139c:	4b06      	ldr	r3, [pc, #24]	; (80113b8 <xPortSysTickHandler+0x40>)
 801139e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80113a2:	601a      	str	r2, [r3, #0]
 80113a4:	2300      	movs	r3, #0
 80113a6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80113a8:	683b      	ldr	r3, [r7, #0]
 80113aa:	f383 8811 	msr	BASEPRI, r3
}
 80113ae:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80113b0:	bf00      	nop
 80113b2:	3708      	adds	r7, #8
 80113b4:	46bd      	mov	sp, r7
 80113b6:	bd80      	pop	{r7, pc}
 80113b8:	e000ed04 	.word	0xe000ed04

080113bc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80113bc:	b480      	push	{r7}
 80113be:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80113c0:	4b0b      	ldr	r3, [pc, #44]	; (80113f0 <vPortSetupTimerInterrupt+0x34>)
 80113c2:	2200      	movs	r2, #0
 80113c4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80113c6:	4b0b      	ldr	r3, [pc, #44]	; (80113f4 <vPortSetupTimerInterrupt+0x38>)
 80113c8:	2200      	movs	r2, #0
 80113ca:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80113cc:	4b0a      	ldr	r3, [pc, #40]	; (80113f8 <vPortSetupTimerInterrupt+0x3c>)
 80113ce:	681b      	ldr	r3, [r3, #0]
 80113d0:	4a0a      	ldr	r2, [pc, #40]	; (80113fc <vPortSetupTimerInterrupt+0x40>)
 80113d2:	fba2 2303 	umull	r2, r3, r2, r3
 80113d6:	099b      	lsrs	r3, r3, #6
 80113d8:	4a09      	ldr	r2, [pc, #36]	; (8011400 <vPortSetupTimerInterrupt+0x44>)
 80113da:	3b01      	subs	r3, #1
 80113dc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80113de:	4b04      	ldr	r3, [pc, #16]	; (80113f0 <vPortSetupTimerInterrupt+0x34>)
 80113e0:	2207      	movs	r2, #7
 80113e2:	601a      	str	r2, [r3, #0]
}
 80113e4:	bf00      	nop
 80113e6:	46bd      	mov	sp, r7
 80113e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80113ec:	4770      	bx	lr
 80113ee:	bf00      	nop
 80113f0:	e000e010 	.word	0xe000e010
 80113f4:	e000e018 	.word	0xe000e018
 80113f8:	20000000 	.word	0x20000000
 80113fc:	10624dd3 	.word	0x10624dd3
 8011400:	e000e014 	.word	0xe000e014

08011404 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8011404:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8011414 <vPortEnableVFP+0x10>
 8011408:	6801      	ldr	r1, [r0, #0]
 801140a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 801140e:	6001      	str	r1, [r0, #0]
 8011410:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8011412:	bf00      	nop
 8011414:	e000ed88 	.word	0xe000ed88

08011418 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8011418:	b480      	push	{r7}
 801141a:	b085      	sub	sp, #20
 801141c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 801141e:	f3ef 8305 	mrs	r3, IPSR
 8011422:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8011424:	68fb      	ldr	r3, [r7, #12]
 8011426:	2b0f      	cmp	r3, #15
 8011428:	d914      	bls.n	8011454 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 801142a:	4a17      	ldr	r2, [pc, #92]	; (8011488 <vPortValidateInterruptPriority+0x70>)
 801142c:	68fb      	ldr	r3, [r7, #12]
 801142e:	4413      	add	r3, r2
 8011430:	781b      	ldrb	r3, [r3, #0]
 8011432:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8011434:	4b15      	ldr	r3, [pc, #84]	; (801148c <vPortValidateInterruptPriority+0x74>)
 8011436:	781b      	ldrb	r3, [r3, #0]
 8011438:	7afa      	ldrb	r2, [r7, #11]
 801143a:	429a      	cmp	r2, r3
 801143c:	d20a      	bcs.n	8011454 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 801143e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011442:	f383 8811 	msr	BASEPRI, r3
 8011446:	f3bf 8f6f 	isb	sy
 801144a:	f3bf 8f4f 	dsb	sy
 801144e:	607b      	str	r3, [r7, #4]
}
 8011450:	bf00      	nop
 8011452:	e7fe      	b.n	8011452 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8011454:	4b0e      	ldr	r3, [pc, #56]	; (8011490 <vPortValidateInterruptPriority+0x78>)
 8011456:	681b      	ldr	r3, [r3, #0]
 8011458:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 801145c:	4b0d      	ldr	r3, [pc, #52]	; (8011494 <vPortValidateInterruptPriority+0x7c>)
 801145e:	681b      	ldr	r3, [r3, #0]
 8011460:	429a      	cmp	r2, r3
 8011462:	d90a      	bls.n	801147a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8011464:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011468:	f383 8811 	msr	BASEPRI, r3
 801146c:	f3bf 8f6f 	isb	sy
 8011470:	f3bf 8f4f 	dsb	sy
 8011474:	603b      	str	r3, [r7, #0]
}
 8011476:	bf00      	nop
 8011478:	e7fe      	b.n	8011478 <vPortValidateInterruptPriority+0x60>
	}
 801147a:	bf00      	nop
 801147c:	3714      	adds	r7, #20
 801147e:	46bd      	mov	sp, r7
 8011480:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011484:	4770      	bx	lr
 8011486:	bf00      	nop
 8011488:	e000e3f0 	.word	0xe000e3f0
 801148c:	20000ea4 	.word	0x20000ea4
 8011490:	e000ed0c 	.word	0xe000ed0c
 8011494:	20000ea8 	.word	0x20000ea8

08011498 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8011498:	b580      	push	{r7, lr}
 801149a:	b08a      	sub	sp, #40	; 0x28
 801149c:	af00      	add	r7, sp, #0
 801149e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80114a0:	2300      	movs	r3, #0
 80114a2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80114a4:	f7fe fd86 	bl	800ffb4 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80114a8:	4b5b      	ldr	r3, [pc, #364]	; (8011618 <pvPortMalloc+0x180>)
 80114aa:	681b      	ldr	r3, [r3, #0]
 80114ac:	2b00      	cmp	r3, #0
 80114ae:	d101      	bne.n	80114b4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80114b0:	f000 f920 	bl	80116f4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80114b4:	4b59      	ldr	r3, [pc, #356]	; (801161c <pvPortMalloc+0x184>)
 80114b6:	681a      	ldr	r2, [r3, #0]
 80114b8:	687b      	ldr	r3, [r7, #4]
 80114ba:	4013      	ands	r3, r2
 80114bc:	2b00      	cmp	r3, #0
 80114be:	f040 8093 	bne.w	80115e8 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80114c2:	687b      	ldr	r3, [r7, #4]
 80114c4:	2b00      	cmp	r3, #0
 80114c6:	d01d      	beq.n	8011504 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 80114c8:	2208      	movs	r2, #8
 80114ca:	687b      	ldr	r3, [r7, #4]
 80114cc:	4413      	add	r3, r2
 80114ce:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80114d0:	687b      	ldr	r3, [r7, #4]
 80114d2:	f003 0307 	and.w	r3, r3, #7
 80114d6:	2b00      	cmp	r3, #0
 80114d8:	d014      	beq.n	8011504 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80114da:	687b      	ldr	r3, [r7, #4]
 80114dc:	f023 0307 	bic.w	r3, r3, #7
 80114e0:	3308      	adds	r3, #8
 80114e2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80114e4:	687b      	ldr	r3, [r7, #4]
 80114e6:	f003 0307 	and.w	r3, r3, #7
 80114ea:	2b00      	cmp	r3, #0
 80114ec:	d00a      	beq.n	8011504 <pvPortMalloc+0x6c>
	__asm volatile
 80114ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80114f2:	f383 8811 	msr	BASEPRI, r3
 80114f6:	f3bf 8f6f 	isb	sy
 80114fa:	f3bf 8f4f 	dsb	sy
 80114fe:	617b      	str	r3, [r7, #20]
}
 8011500:	bf00      	nop
 8011502:	e7fe      	b.n	8011502 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8011504:	687b      	ldr	r3, [r7, #4]
 8011506:	2b00      	cmp	r3, #0
 8011508:	d06e      	beq.n	80115e8 <pvPortMalloc+0x150>
 801150a:	4b45      	ldr	r3, [pc, #276]	; (8011620 <pvPortMalloc+0x188>)
 801150c:	681b      	ldr	r3, [r3, #0]
 801150e:	687a      	ldr	r2, [r7, #4]
 8011510:	429a      	cmp	r2, r3
 8011512:	d869      	bhi.n	80115e8 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8011514:	4b43      	ldr	r3, [pc, #268]	; (8011624 <pvPortMalloc+0x18c>)
 8011516:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8011518:	4b42      	ldr	r3, [pc, #264]	; (8011624 <pvPortMalloc+0x18c>)
 801151a:	681b      	ldr	r3, [r3, #0]
 801151c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 801151e:	e004      	b.n	801152a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8011520:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011522:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8011524:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011526:	681b      	ldr	r3, [r3, #0]
 8011528:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 801152a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801152c:	685b      	ldr	r3, [r3, #4]
 801152e:	687a      	ldr	r2, [r7, #4]
 8011530:	429a      	cmp	r2, r3
 8011532:	d903      	bls.n	801153c <pvPortMalloc+0xa4>
 8011534:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011536:	681b      	ldr	r3, [r3, #0]
 8011538:	2b00      	cmp	r3, #0
 801153a:	d1f1      	bne.n	8011520 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 801153c:	4b36      	ldr	r3, [pc, #216]	; (8011618 <pvPortMalloc+0x180>)
 801153e:	681b      	ldr	r3, [r3, #0]
 8011540:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8011542:	429a      	cmp	r2, r3
 8011544:	d050      	beq.n	80115e8 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8011546:	6a3b      	ldr	r3, [r7, #32]
 8011548:	681b      	ldr	r3, [r3, #0]
 801154a:	2208      	movs	r2, #8
 801154c:	4413      	add	r3, r2
 801154e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8011550:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011552:	681a      	ldr	r2, [r3, #0]
 8011554:	6a3b      	ldr	r3, [r7, #32]
 8011556:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8011558:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801155a:	685a      	ldr	r2, [r3, #4]
 801155c:	687b      	ldr	r3, [r7, #4]
 801155e:	1ad2      	subs	r2, r2, r3
 8011560:	2308      	movs	r3, #8
 8011562:	005b      	lsls	r3, r3, #1
 8011564:	429a      	cmp	r2, r3
 8011566:	d91f      	bls.n	80115a8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8011568:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801156a:	687b      	ldr	r3, [r7, #4]
 801156c:	4413      	add	r3, r2
 801156e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8011570:	69bb      	ldr	r3, [r7, #24]
 8011572:	f003 0307 	and.w	r3, r3, #7
 8011576:	2b00      	cmp	r3, #0
 8011578:	d00a      	beq.n	8011590 <pvPortMalloc+0xf8>
	__asm volatile
 801157a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801157e:	f383 8811 	msr	BASEPRI, r3
 8011582:	f3bf 8f6f 	isb	sy
 8011586:	f3bf 8f4f 	dsb	sy
 801158a:	613b      	str	r3, [r7, #16]
}
 801158c:	bf00      	nop
 801158e:	e7fe      	b.n	801158e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8011590:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011592:	685a      	ldr	r2, [r3, #4]
 8011594:	687b      	ldr	r3, [r7, #4]
 8011596:	1ad2      	subs	r2, r2, r3
 8011598:	69bb      	ldr	r3, [r7, #24]
 801159a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 801159c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801159e:	687a      	ldr	r2, [r7, #4]
 80115a0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80115a2:	69b8      	ldr	r0, [r7, #24]
 80115a4:	f000 f908 	bl	80117b8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80115a8:	4b1d      	ldr	r3, [pc, #116]	; (8011620 <pvPortMalloc+0x188>)
 80115aa:	681a      	ldr	r2, [r3, #0]
 80115ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80115ae:	685b      	ldr	r3, [r3, #4]
 80115b0:	1ad3      	subs	r3, r2, r3
 80115b2:	4a1b      	ldr	r2, [pc, #108]	; (8011620 <pvPortMalloc+0x188>)
 80115b4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80115b6:	4b1a      	ldr	r3, [pc, #104]	; (8011620 <pvPortMalloc+0x188>)
 80115b8:	681a      	ldr	r2, [r3, #0]
 80115ba:	4b1b      	ldr	r3, [pc, #108]	; (8011628 <pvPortMalloc+0x190>)
 80115bc:	681b      	ldr	r3, [r3, #0]
 80115be:	429a      	cmp	r2, r3
 80115c0:	d203      	bcs.n	80115ca <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80115c2:	4b17      	ldr	r3, [pc, #92]	; (8011620 <pvPortMalloc+0x188>)
 80115c4:	681b      	ldr	r3, [r3, #0]
 80115c6:	4a18      	ldr	r2, [pc, #96]	; (8011628 <pvPortMalloc+0x190>)
 80115c8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80115ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80115cc:	685a      	ldr	r2, [r3, #4]
 80115ce:	4b13      	ldr	r3, [pc, #76]	; (801161c <pvPortMalloc+0x184>)
 80115d0:	681b      	ldr	r3, [r3, #0]
 80115d2:	431a      	orrs	r2, r3
 80115d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80115d6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80115d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80115da:	2200      	movs	r2, #0
 80115dc:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 80115de:	4b13      	ldr	r3, [pc, #76]	; (801162c <pvPortMalloc+0x194>)
 80115e0:	681b      	ldr	r3, [r3, #0]
 80115e2:	3301      	adds	r3, #1
 80115e4:	4a11      	ldr	r2, [pc, #68]	; (801162c <pvPortMalloc+0x194>)
 80115e6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80115e8:	f7fe fcf2 	bl	800ffd0 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80115ec:	69fb      	ldr	r3, [r7, #28]
 80115ee:	f003 0307 	and.w	r3, r3, #7
 80115f2:	2b00      	cmp	r3, #0
 80115f4:	d00a      	beq.n	801160c <pvPortMalloc+0x174>
	__asm volatile
 80115f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80115fa:	f383 8811 	msr	BASEPRI, r3
 80115fe:	f3bf 8f6f 	isb	sy
 8011602:	f3bf 8f4f 	dsb	sy
 8011606:	60fb      	str	r3, [r7, #12]
}
 8011608:	bf00      	nop
 801160a:	e7fe      	b.n	801160a <pvPortMalloc+0x172>
	return pvReturn;
 801160c:	69fb      	ldr	r3, [r7, #28]
}
 801160e:	4618      	mov	r0, r3
 8011610:	3728      	adds	r7, #40	; 0x28
 8011612:	46bd      	mov	sp, r7
 8011614:	bd80      	pop	{r7, pc}
 8011616:	bf00      	nop
 8011618:	20004ab4 	.word	0x20004ab4
 801161c:	20004ac8 	.word	0x20004ac8
 8011620:	20004ab8 	.word	0x20004ab8
 8011624:	20004aac 	.word	0x20004aac
 8011628:	20004abc 	.word	0x20004abc
 801162c:	20004ac0 	.word	0x20004ac0

08011630 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8011630:	b580      	push	{r7, lr}
 8011632:	b086      	sub	sp, #24
 8011634:	af00      	add	r7, sp, #0
 8011636:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8011638:	687b      	ldr	r3, [r7, #4]
 801163a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 801163c:	687b      	ldr	r3, [r7, #4]
 801163e:	2b00      	cmp	r3, #0
 8011640:	d04d      	beq.n	80116de <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8011642:	2308      	movs	r3, #8
 8011644:	425b      	negs	r3, r3
 8011646:	697a      	ldr	r2, [r7, #20]
 8011648:	4413      	add	r3, r2
 801164a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 801164c:	697b      	ldr	r3, [r7, #20]
 801164e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8011650:	693b      	ldr	r3, [r7, #16]
 8011652:	685a      	ldr	r2, [r3, #4]
 8011654:	4b24      	ldr	r3, [pc, #144]	; (80116e8 <vPortFree+0xb8>)
 8011656:	681b      	ldr	r3, [r3, #0]
 8011658:	4013      	ands	r3, r2
 801165a:	2b00      	cmp	r3, #0
 801165c:	d10a      	bne.n	8011674 <vPortFree+0x44>
	__asm volatile
 801165e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011662:	f383 8811 	msr	BASEPRI, r3
 8011666:	f3bf 8f6f 	isb	sy
 801166a:	f3bf 8f4f 	dsb	sy
 801166e:	60fb      	str	r3, [r7, #12]
}
 8011670:	bf00      	nop
 8011672:	e7fe      	b.n	8011672 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8011674:	693b      	ldr	r3, [r7, #16]
 8011676:	681b      	ldr	r3, [r3, #0]
 8011678:	2b00      	cmp	r3, #0
 801167a:	d00a      	beq.n	8011692 <vPortFree+0x62>
	__asm volatile
 801167c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011680:	f383 8811 	msr	BASEPRI, r3
 8011684:	f3bf 8f6f 	isb	sy
 8011688:	f3bf 8f4f 	dsb	sy
 801168c:	60bb      	str	r3, [r7, #8]
}
 801168e:	bf00      	nop
 8011690:	e7fe      	b.n	8011690 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8011692:	693b      	ldr	r3, [r7, #16]
 8011694:	685a      	ldr	r2, [r3, #4]
 8011696:	4b14      	ldr	r3, [pc, #80]	; (80116e8 <vPortFree+0xb8>)
 8011698:	681b      	ldr	r3, [r3, #0]
 801169a:	4013      	ands	r3, r2
 801169c:	2b00      	cmp	r3, #0
 801169e:	d01e      	beq.n	80116de <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80116a0:	693b      	ldr	r3, [r7, #16]
 80116a2:	681b      	ldr	r3, [r3, #0]
 80116a4:	2b00      	cmp	r3, #0
 80116a6:	d11a      	bne.n	80116de <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80116a8:	693b      	ldr	r3, [r7, #16]
 80116aa:	685a      	ldr	r2, [r3, #4]
 80116ac:	4b0e      	ldr	r3, [pc, #56]	; (80116e8 <vPortFree+0xb8>)
 80116ae:	681b      	ldr	r3, [r3, #0]
 80116b0:	43db      	mvns	r3, r3
 80116b2:	401a      	ands	r2, r3
 80116b4:	693b      	ldr	r3, [r7, #16]
 80116b6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80116b8:	f7fe fc7c 	bl	800ffb4 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80116bc:	693b      	ldr	r3, [r7, #16]
 80116be:	685a      	ldr	r2, [r3, #4]
 80116c0:	4b0a      	ldr	r3, [pc, #40]	; (80116ec <vPortFree+0xbc>)
 80116c2:	681b      	ldr	r3, [r3, #0]
 80116c4:	4413      	add	r3, r2
 80116c6:	4a09      	ldr	r2, [pc, #36]	; (80116ec <vPortFree+0xbc>)
 80116c8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80116ca:	6938      	ldr	r0, [r7, #16]
 80116cc:	f000 f874 	bl	80117b8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 80116d0:	4b07      	ldr	r3, [pc, #28]	; (80116f0 <vPortFree+0xc0>)
 80116d2:	681b      	ldr	r3, [r3, #0]
 80116d4:	3301      	adds	r3, #1
 80116d6:	4a06      	ldr	r2, [pc, #24]	; (80116f0 <vPortFree+0xc0>)
 80116d8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 80116da:	f7fe fc79 	bl	800ffd0 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80116de:	bf00      	nop
 80116e0:	3718      	adds	r7, #24
 80116e2:	46bd      	mov	sp, r7
 80116e4:	bd80      	pop	{r7, pc}
 80116e6:	bf00      	nop
 80116e8:	20004ac8 	.word	0x20004ac8
 80116ec:	20004ab8 	.word	0x20004ab8
 80116f0:	20004ac4 	.word	0x20004ac4

080116f4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80116f4:	b480      	push	{r7}
 80116f6:	b085      	sub	sp, #20
 80116f8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80116fa:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 80116fe:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8011700:	4b27      	ldr	r3, [pc, #156]	; (80117a0 <prvHeapInit+0xac>)
 8011702:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8011704:	68fb      	ldr	r3, [r7, #12]
 8011706:	f003 0307 	and.w	r3, r3, #7
 801170a:	2b00      	cmp	r3, #0
 801170c:	d00c      	beq.n	8011728 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 801170e:	68fb      	ldr	r3, [r7, #12]
 8011710:	3307      	adds	r3, #7
 8011712:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8011714:	68fb      	ldr	r3, [r7, #12]
 8011716:	f023 0307 	bic.w	r3, r3, #7
 801171a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 801171c:	68ba      	ldr	r2, [r7, #8]
 801171e:	68fb      	ldr	r3, [r7, #12]
 8011720:	1ad3      	subs	r3, r2, r3
 8011722:	4a1f      	ldr	r2, [pc, #124]	; (80117a0 <prvHeapInit+0xac>)
 8011724:	4413      	add	r3, r2
 8011726:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8011728:	68fb      	ldr	r3, [r7, #12]
 801172a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 801172c:	4a1d      	ldr	r2, [pc, #116]	; (80117a4 <prvHeapInit+0xb0>)
 801172e:	687b      	ldr	r3, [r7, #4]
 8011730:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8011732:	4b1c      	ldr	r3, [pc, #112]	; (80117a4 <prvHeapInit+0xb0>)
 8011734:	2200      	movs	r2, #0
 8011736:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8011738:	687b      	ldr	r3, [r7, #4]
 801173a:	68ba      	ldr	r2, [r7, #8]
 801173c:	4413      	add	r3, r2
 801173e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8011740:	2208      	movs	r2, #8
 8011742:	68fb      	ldr	r3, [r7, #12]
 8011744:	1a9b      	subs	r3, r3, r2
 8011746:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8011748:	68fb      	ldr	r3, [r7, #12]
 801174a:	f023 0307 	bic.w	r3, r3, #7
 801174e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8011750:	68fb      	ldr	r3, [r7, #12]
 8011752:	4a15      	ldr	r2, [pc, #84]	; (80117a8 <prvHeapInit+0xb4>)
 8011754:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8011756:	4b14      	ldr	r3, [pc, #80]	; (80117a8 <prvHeapInit+0xb4>)
 8011758:	681b      	ldr	r3, [r3, #0]
 801175a:	2200      	movs	r2, #0
 801175c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 801175e:	4b12      	ldr	r3, [pc, #72]	; (80117a8 <prvHeapInit+0xb4>)
 8011760:	681b      	ldr	r3, [r3, #0]
 8011762:	2200      	movs	r2, #0
 8011764:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8011766:	687b      	ldr	r3, [r7, #4]
 8011768:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 801176a:	683b      	ldr	r3, [r7, #0]
 801176c:	68fa      	ldr	r2, [r7, #12]
 801176e:	1ad2      	subs	r2, r2, r3
 8011770:	683b      	ldr	r3, [r7, #0]
 8011772:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8011774:	4b0c      	ldr	r3, [pc, #48]	; (80117a8 <prvHeapInit+0xb4>)
 8011776:	681a      	ldr	r2, [r3, #0]
 8011778:	683b      	ldr	r3, [r7, #0]
 801177a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 801177c:	683b      	ldr	r3, [r7, #0]
 801177e:	685b      	ldr	r3, [r3, #4]
 8011780:	4a0a      	ldr	r2, [pc, #40]	; (80117ac <prvHeapInit+0xb8>)
 8011782:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8011784:	683b      	ldr	r3, [r7, #0]
 8011786:	685b      	ldr	r3, [r3, #4]
 8011788:	4a09      	ldr	r2, [pc, #36]	; (80117b0 <prvHeapInit+0xbc>)
 801178a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 801178c:	4b09      	ldr	r3, [pc, #36]	; (80117b4 <prvHeapInit+0xc0>)
 801178e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8011792:	601a      	str	r2, [r3, #0]
}
 8011794:	bf00      	nop
 8011796:	3714      	adds	r7, #20
 8011798:	46bd      	mov	sp, r7
 801179a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801179e:	4770      	bx	lr
 80117a0:	20000eac 	.word	0x20000eac
 80117a4:	20004aac 	.word	0x20004aac
 80117a8:	20004ab4 	.word	0x20004ab4
 80117ac:	20004abc 	.word	0x20004abc
 80117b0:	20004ab8 	.word	0x20004ab8
 80117b4:	20004ac8 	.word	0x20004ac8

080117b8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80117b8:	b480      	push	{r7}
 80117ba:	b085      	sub	sp, #20
 80117bc:	af00      	add	r7, sp, #0
 80117be:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80117c0:	4b28      	ldr	r3, [pc, #160]	; (8011864 <prvInsertBlockIntoFreeList+0xac>)
 80117c2:	60fb      	str	r3, [r7, #12]
 80117c4:	e002      	b.n	80117cc <prvInsertBlockIntoFreeList+0x14>
 80117c6:	68fb      	ldr	r3, [r7, #12]
 80117c8:	681b      	ldr	r3, [r3, #0]
 80117ca:	60fb      	str	r3, [r7, #12]
 80117cc:	68fb      	ldr	r3, [r7, #12]
 80117ce:	681b      	ldr	r3, [r3, #0]
 80117d0:	687a      	ldr	r2, [r7, #4]
 80117d2:	429a      	cmp	r2, r3
 80117d4:	d8f7      	bhi.n	80117c6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80117d6:	68fb      	ldr	r3, [r7, #12]
 80117d8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80117da:	68fb      	ldr	r3, [r7, #12]
 80117dc:	685b      	ldr	r3, [r3, #4]
 80117de:	68ba      	ldr	r2, [r7, #8]
 80117e0:	4413      	add	r3, r2
 80117e2:	687a      	ldr	r2, [r7, #4]
 80117e4:	429a      	cmp	r2, r3
 80117e6:	d108      	bne.n	80117fa <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80117e8:	68fb      	ldr	r3, [r7, #12]
 80117ea:	685a      	ldr	r2, [r3, #4]
 80117ec:	687b      	ldr	r3, [r7, #4]
 80117ee:	685b      	ldr	r3, [r3, #4]
 80117f0:	441a      	add	r2, r3
 80117f2:	68fb      	ldr	r3, [r7, #12]
 80117f4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80117f6:	68fb      	ldr	r3, [r7, #12]
 80117f8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80117fa:	687b      	ldr	r3, [r7, #4]
 80117fc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80117fe:	687b      	ldr	r3, [r7, #4]
 8011800:	685b      	ldr	r3, [r3, #4]
 8011802:	68ba      	ldr	r2, [r7, #8]
 8011804:	441a      	add	r2, r3
 8011806:	68fb      	ldr	r3, [r7, #12]
 8011808:	681b      	ldr	r3, [r3, #0]
 801180a:	429a      	cmp	r2, r3
 801180c:	d118      	bne.n	8011840 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 801180e:	68fb      	ldr	r3, [r7, #12]
 8011810:	681a      	ldr	r2, [r3, #0]
 8011812:	4b15      	ldr	r3, [pc, #84]	; (8011868 <prvInsertBlockIntoFreeList+0xb0>)
 8011814:	681b      	ldr	r3, [r3, #0]
 8011816:	429a      	cmp	r2, r3
 8011818:	d00d      	beq.n	8011836 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 801181a:	687b      	ldr	r3, [r7, #4]
 801181c:	685a      	ldr	r2, [r3, #4]
 801181e:	68fb      	ldr	r3, [r7, #12]
 8011820:	681b      	ldr	r3, [r3, #0]
 8011822:	685b      	ldr	r3, [r3, #4]
 8011824:	441a      	add	r2, r3
 8011826:	687b      	ldr	r3, [r7, #4]
 8011828:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 801182a:	68fb      	ldr	r3, [r7, #12]
 801182c:	681b      	ldr	r3, [r3, #0]
 801182e:	681a      	ldr	r2, [r3, #0]
 8011830:	687b      	ldr	r3, [r7, #4]
 8011832:	601a      	str	r2, [r3, #0]
 8011834:	e008      	b.n	8011848 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8011836:	4b0c      	ldr	r3, [pc, #48]	; (8011868 <prvInsertBlockIntoFreeList+0xb0>)
 8011838:	681a      	ldr	r2, [r3, #0]
 801183a:	687b      	ldr	r3, [r7, #4]
 801183c:	601a      	str	r2, [r3, #0]
 801183e:	e003      	b.n	8011848 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8011840:	68fb      	ldr	r3, [r7, #12]
 8011842:	681a      	ldr	r2, [r3, #0]
 8011844:	687b      	ldr	r3, [r7, #4]
 8011846:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8011848:	68fa      	ldr	r2, [r7, #12]
 801184a:	687b      	ldr	r3, [r7, #4]
 801184c:	429a      	cmp	r2, r3
 801184e:	d002      	beq.n	8011856 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8011850:	68fb      	ldr	r3, [r7, #12]
 8011852:	687a      	ldr	r2, [r7, #4]
 8011854:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8011856:	bf00      	nop
 8011858:	3714      	adds	r7, #20
 801185a:	46bd      	mov	sp, r7
 801185c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011860:	4770      	bx	lr
 8011862:	bf00      	nop
 8011864:	20004aac 	.word	0x20004aac
 8011868:	20004ab4 	.word	0x20004ab4

0801186c <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 801186c:	b580      	push	{r7, lr}
 801186e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceHS, &HS_Desc, DEVICE_HS) != USBD_OK)
 8011870:	2201      	movs	r2, #1
 8011872:	4913      	ldr	r1, [pc, #76]	; (80118c0 <MX_USB_DEVICE_Init+0x54>)
 8011874:	4813      	ldr	r0, [pc, #76]	; (80118c4 <MX_USB_DEVICE_Init+0x58>)
 8011876:	f7fb fec9 	bl	800d60c <USBD_Init>
 801187a:	4603      	mov	r3, r0
 801187c:	2b00      	cmp	r3, #0
 801187e:	d001      	beq.n	8011884 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8011880:	f7ef fa78 	bl	8000d74 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceHS, &USBD_CDC) != USBD_OK)
 8011884:	4910      	ldr	r1, [pc, #64]	; (80118c8 <MX_USB_DEVICE_Init+0x5c>)
 8011886:	480f      	ldr	r0, [pc, #60]	; (80118c4 <MX_USB_DEVICE_Init+0x58>)
 8011888:	f7fb fef0 	bl	800d66c <USBD_RegisterClass>
 801188c:	4603      	mov	r3, r0
 801188e:	2b00      	cmp	r3, #0
 8011890:	d001      	beq.n	8011896 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8011892:	f7ef fa6f 	bl	8000d74 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceHS, &USBD_Interface_fops_HS) != USBD_OK)
 8011896:	490d      	ldr	r1, [pc, #52]	; (80118cc <MX_USB_DEVICE_Init+0x60>)
 8011898:	480a      	ldr	r0, [pc, #40]	; (80118c4 <MX_USB_DEVICE_Init+0x58>)
 801189a:	f7fb fe41 	bl	800d520 <USBD_CDC_RegisterInterface>
 801189e:	4603      	mov	r3, r0
 80118a0:	2b00      	cmp	r3, #0
 80118a2:	d001      	beq.n	80118a8 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 80118a4:	f7ef fa66 	bl	8000d74 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceHS) != USBD_OK)
 80118a8:	4806      	ldr	r0, [pc, #24]	; (80118c4 <MX_USB_DEVICE_Init+0x58>)
 80118aa:	f7fb ff06 	bl	800d6ba <USBD_Start>
 80118ae:	4603      	mov	r3, r0
 80118b0:	2b00      	cmp	r3, #0
 80118b2:	d001      	beq.n	80118b8 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 80118b4:	f7ef fa5e 	bl	8000d74 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */
  HAL_PWREx_EnableUSBVoltageDetector();
 80118b8:	f7f2 fef4 	bl	80046a4 <HAL_PWREx_EnableUSBVoltageDetector>

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 80118bc:	bf00      	nop
 80118be:	bd80      	pop	{r7, pc}
 80118c0:	20000138 	.word	0x20000138
 80118c4:	2000579c 	.word	0x2000579c
 80118c8:	2000001c 	.word	0x2000001c
 80118cc:	20000124 	.word	0x20000124

080118d0 <CDC_Init_HS>:
/**
  * @brief  Initializes the CDC media low layer over the USB HS IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_HS(void)
{
 80118d0:	b580      	push	{r7, lr}
 80118d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 8 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceHS, UserTxBufferHS, 0);
 80118d4:	2200      	movs	r2, #0
 80118d6:	4905      	ldr	r1, [pc, #20]	; (80118ec <CDC_Init_HS+0x1c>)
 80118d8:	4805      	ldr	r0, [pc, #20]	; (80118f0 <CDC_Init_HS+0x20>)
 80118da:	f7fb fe36 	bl	800d54a <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceHS, UserRxBufferHS);
 80118de:	4905      	ldr	r1, [pc, #20]	; (80118f4 <CDC_Init_HS+0x24>)
 80118e0:	4803      	ldr	r0, [pc, #12]	; (80118f0 <CDC_Init_HS+0x20>)
 80118e2:	f7fb fe50 	bl	800d586 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 80118e6:	2300      	movs	r3, #0
  /* USER CODE END 8 */
}
 80118e8:	4618      	mov	r0, r3
 80118ea:	bd80      	pop	{r7, pc}
 80118ec:	2000626c 	.word	0x2000626c
 80118f0:	2000579c 	.word	0x2000579c
 80118f4:	20005a6c 	.word	0x20005a6c

080118f8 <CDC_DeInit_HS>:
  * @brief  DeInitializes the CDC media low layer
  * @param  None
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_HS(void)
{
 80118f8:	b480      	push	{r7}
 80118fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 9 */
  return (USBD_OK);
 80118fc:	2300      	movs	r3, #0
  /* USER CODE END 9 */
}
 80118fe:	4618      	mov	r0, r3
 8011900:	46bd      	mov	sp, r7
 8011902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011906:	4770      	bx	lr

08011908 <CDC_Control_HS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_HS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8011908:	b480      	push	{r7}
 801190a:	b083      	sub	sp, #12
 801190c:	af00      	add	r7, sp, #0
 801190e:	4603      	mov	r3, r0
 8011910:	6039      	str	r1, [r7, #0]
 8011912:	71fb      	strb	r3, [r7, #7]
 8011914:	4613      	mov	r3, r2
 8011916:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 10 */
  switch(cmd)
 8011918:	79fb      	ldrb	r3, [r7, #7]
 801191a:	2b23      	cmp	r3, #35	; 0x23
 801191c:	d84a      	bhi.n	80119b4 <CDC_Control_HS+0xac>
 801191e:	a201      	add	r2, pc, #4	; (adr r2, 8011924 <CDC_Control_HS+0x1c>)
 8011920:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011924:	080119b5 	.word	0x080119b5
 8011928:	080119b5 	.word	0x080119b5
 801192c:	080119b5 	.word	0x080119b5
 8011930:	080119b5 	.word	0x080119b5
 8011934:	080119b5 	.word	0x080119b5
 8011938:	080119b5 	.word	0x080119b5
 801193c:	080119b5 	.word	0x080119b5
 8011940:	080119b5 	.word	0x080119b5
 8011944:	080119b5 	.word	0x080119b5
 8011948:	080119b5 	.word	0x080119b5
 801194c:	080119b5 	.word	0x080119b5
 8011950:	080119b5 	.word	0x080119b5
 8011954:	080119b5 	.word	0x080119b5
 8011958:	080119b5 	.word	0x080119b5
 801195c:	080119b5 	.word	0x080119b5
 8011960:	080119b5 	.word	0x080119b5
 8011964:	080119b5 	.word	0x080119b5
 8011968:	080119b5 	.word	0x080119b5
 801196c:	080119b5 	.word	0x080119b5
 8011970:	080119b5 	.word	0x080119b5
 8011974:	080119b5 	.word	0x080119b5
 8011978:	080119b5 	.word	0x080119b5
 801197c:	080119b5 	.word	0x080119b5
 8011980:	080119b5 	.word	0x080119b5
 8011984:	080119b5 	.word	0x080119b5
 8011988:	080119b5 	.word	0x080119b5
 801198c:	080119b5 	.word	0x080119b5
 8011990:	080119b5 	.word	0x080119b5
 8011994:	080119b5 	.word	0x080119b5
 8011998:	080119b5 	.word	0x080119b5
 801199c:	080119b5 	.word	0x080119b5
 80119a0:	080119b5 	.word	0x080119b5
 80119a4:	080119b5 	.word	0x080119b5
 80119a8:	080119b5 	.word	0x080119b5
 80119ac:	080119b5 	.word	0x080119b5
 80119b0:	080119b5 	.word	0x080119b5
  case CDC_SEND_BREAK:

    break;

  default:
    break;
 80119b4:	bf00      	nop
  }

  return (USBD_OK);
 80119b6:	2300      	movs	r3, #0
  /* USER CODE END 10 */
}
 80119b8:	4618      	mov	r0, r3
 80119ba:	370c      	adds	r7, #12
 80119bc:	46bd      	mov	sp, r7
 80119be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80119c2:	4770      	bx	lr

080119c4 <CDC_Receive_HS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAILL
  */
static int8_t CDC_Receive_HS(uint8_t* Buf, uint32_t *Len)
{
 80119c4:	b580      	push	{r7, lr}
 80119c6:	b082      	sub	sp, #8
 80119c8:	af00      	add	r7, sp, #0
 80119ca:	6078      	str	r0, [r7, #4]
 80119cc:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 11 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceHS, &Buf[0]);
 80119ce:	6879      	ldr	r1, [r7, #4]
 80119d0:	4805      	ldr	r0, [pc, #20]	; (80119e8 <CDC_Receive_HS+0x24>)
 80119d2:	f7fb fdd8 	bl	800d586 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceHS);
 80119d6:	4804      	ldr	r0, [pc, #16]	; (80119e8 <CDC_Receive_HS+0x24>)
 80119d8:	f7fb fdee 	bl	800d5b8 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 80119dc:	2300      	movs	r3, #0
  /* USER CODE END 11 */
}
 80119de:	4618      	mov	r0, r3
 80119e0:	3708      	adds	r7, #8
 80119e2:	46bd      	mov	sp, r7
 80119e4:	bd80      	pop	{r7, pc}
 80119e6:	bf00      	nop
 80119e8:	2000579c 	.word	0x2000579c

080119ec <CDC_TransmitCplt_HS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_HS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 80119ec:	b480      	push	{r7}
 80119ee:	b087      	sub	sp, #28
 80119f0:	af00      	add	r7, sp, #0
 80119f2:	60f8      	str	r0, [r7, #12]
 80119f4:	60b9      	str	r1, [r7, #8]
 80119f6:	4613      	mov	r3, r2
 80119f8:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 80119fa:	2300      	movs	r3, #0
 80119fc:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 14 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 14 */
  return result;
 80119fe:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8011a02:	4618      	mov	r0, r3
 8011a04:	371c      	adds	r7, #28
 8011a06:	46bd      	mov	sp, r7
 8011a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011a0c:	4770      	bx	lr
	...

08011a10 <USBD_HS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8011a10:	b480      	push	{r7}
 8011a12:	b083      	sub	sp, #12
 8011a14:	af00      	add	r7, sp, #0
 8011a16:	4603      	mov	r3, r0
 8011a18:	6039      	str	r1, [r7, #0]
 8011a1a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_HS_DeviceDesc);
 8011a1c:	683b      	ldr	r3, [r7, #0]
 8011a1e:	2212      	movs	r2, #18
 8011a20:	801a      	strh	r2, [r3, #0]
  return USBD_HS_DeviceDesc;
 8011a22:	4b03      	ldr	r3, [pc, #12]	; (8011a30 <USBD_HS_DeviceDescriptor+0x20>)
}
 8011a24:	4618      	mov	r0, r3
 8011a26:	370c      	adds	r7, #12
 8011a28:	46bd      	mov	sp, r7
 8011a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011a2e:	4770      	bx	lr
 8011a30:	20000154 	.word	0x20000154

08011a34 <USBD_HS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8011a34:	b480      	push	{r7}
 8011a36:	b083      	sub	sp, #12
 8011a38:	af00      	add	r7, sp, #0
 8011a3a:	4603      	mov	r3, r0
 8011a3c:	6039      	str	r1, [r7, #0]
 8011a3e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8011a40:	683b      	ldr	r3, [r7, #0]
 8011a42:	2204      	movs	r2, #4
 8011a44:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8011a46:	4b03      	ldr	r3, [pc, #12]	; (8011a54 <USBD_HS_LangIDStrDescriptor+0x20>)
}
 8011a48:	4618      	mov	r0, r3
 8011a4a:	370c      	adds	r7, #12
 8011a4c:	46bd      	mov	sp, r7
 8011a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011a52:	4770      	bx	lr
 8011a54:	20000168 	.word	0x20000168

08011a58 <USBD_HS_ProductStrDescriptor>:
  * @param  speed : current device speed
  * @param  length : pointer to data length variable
  * @retval pointer to descriptor buffer
  */
uint8_t * USBD_HS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8011a58:	b580      	push	{r7, lr}
 8011a5a:	b082      	sub	sp, #8
 8011a5c:	af00      	add	r7, sp, #0
 8011a5e:	4603      	mov	r3, r0
 8011a60:	6039      	str	r1, [r7, #0]
 8011a62:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8011a64:	79fb      	ldrb	r3, [r7, #7]
 8011a66:	2b00      	cmp	r3, #0
 8011a68:	d105      	bne.n	8011a76 <USBD_HS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_HS, USBD_StrDesc, length);
 8011a6a:	683a      	ldr	r2, [r7, #0]
 8011a6c:	4907      	ldr	r1, [pc, #28]	; (8011a8c <USBD_HS_ProductStrDescriptor+0x34>)
 8011a6e:	4808      	ldr	r0, [pc, #32]	; (8011a90 <USBD_HS_ProductStrDescriptor+0x38>)
 8011a70:	f7fc fe55 	bl	800e71e <USBD_GetString>
 8011a74:	e004      	b.n	8011a80 <USBD_HS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_HS, USBD_StrDesc, length);
 8011a76:	683a      	ldr	r2, [r7, #0]
 8011a78:	4904      	ldr	r1, [pc, #16]	; (8011a8c <USBD_HS_ProductStrDescriptor+0x34>)
 8011a7a:	4805      	ldr	r0, [pc, #20]	; (8011a90 <USBD_HS_ProductStrDescriptor+0x38>)
 8011a7c:	f7fc fe4f 	bl	800e71e <USBD_GetString>
  }
  return USBD_StrDesc;
 8011a80:	4b02      	ldr	r3, [pc, #8]	; (8011a8c <USBD_HS_ProductStrDescriptor+0x34>)
}
 8011a82:	4618      	mov	r0, r3
 8011a84:	3708      	adds	r7, #8
 8011a86:	46bd      	mov	sp, r7
 8011a88:	bd80      	pop	{r7, pc}
 8011a8a:	bf00      	nop
 8011a8c:	20006a6c 	.word	0x20006a6c
 8011a90:	08012454 	.word	0x08012454

08011a94 <USBD_HS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8011a94:	b580      	push	{r7, lr}
 8011a96:	b082      	sub	sp, #8
 8011a98:	af00      	add	r7, sp, #0
 8011a9a:	4603      	mov	r3, r0
 8011a9c:	6039      	str	r1, [r7, #0]
 8011a9e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8011aa0:	683a      	ldr	r2, [r7, #0]
 8011aa2:	4904      	ldr	r1, [pc, #16]	; (8011ab4 <USBD_HS_ManufacturerStrDescriptor+0x20>)
 8011aa4:	4804      	ldr	r0, [pc, #16]	; (8011ab8 <USBD_HS_ManufacturerStrDescriptor+0x24>)
 8011aa6:	f7fc fe3a 	bl	800e71e <USBD_GetString>
  return USBD_StrDesc;
 8011aaa:	4b02      	ldr	r3, [pc, #8]	; (8011ab4 <USBD_HS_ManufacturerStrDescriptor+0x20>)
}
 8011aac:	4618      	mov	r0, r3
 8011aae:	3708      	adds	r7, #8
 8011ab0:	46bd      	mov	sp, r7
 8011ab2:	bd80      	pop	{r7, pc}
 8011ab4:	20006a6c 	.word	0x20006a6c
 8011ab8:	0801246c 	.word	0x0801246c

08011abc <USBD_HS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8011abc:	b580      	push	{r7, lr}
 8011abe:	b082      	sub	sp, #8
 8011ac0:	af00      	add	r7, sp, #0
 8011ac2:	4603      	mov	r3, r0
 8011ac4:	6039      	str	r1, [r7, #0]
 8011ac6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8011ac8:	683b      	ldr	r3, [r7, #0]
 8011aca:	221a      	movs	r2, #26
 8011acc:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8011ace:	f000 f843 	bl	8011b58 <Get_SerialNum>
  /* USER CODE BEGIN USBD_HS_SerialStrDescriptor */

  /* USER CODE END USBD_HS_SerialStrDescriptor */

  return (uint8_t *) USBD_StringSerial;
 8011ad2:	4b02      	ldr	r3, [pc, #8]	; (8011adc <USBD_HS_SerialStrDescriptor+0x20>)
}
 8011ad4:	4618      	mov	r0, r3
 8011ad6:	3708      	adds	r7, #8
 8011ad8:	46bd      	mov	sp, r7
 8011ada:	bd80      	pop	{r7, pc}
 8011adc:	2000016c 	.word	0x2000016c

08011ae0 <USBD_HS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8011ae0:	b580      	push	{r7, lr}
 8011ae2:	b082      	sub	sp, #8
 8011ae4:	af00      	add	r7, sp, #0
 8011ae6:	4603      	mov	r3, r0
 8011ae8:	6039      	str	r1, [r7, #0]
 8011aea:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8011aec:	79fb      	ldrb	r3, [r7, #7]
 8011aee:	2b00      	cmp	r3, #0
 8011af0:	d105      	bne.n	8011afe <USBD_HS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_HS, USBD_StrDesc, length);
 8011af2:	683a      	ldr	r2, [r7, #0]
 8011af4:	4907      	ldr	r1, [pc, #28]	; (8011b14 <USBD_HS_ConfigStrDescriptor+0x34>)
 8011af6:	4808      	ldr	r0, [pc, #32]	; (8011b18 <USBD_HS_ConfigStrDescriptor+0x38>)
 8011af8:	f7fc fe11 	bl	800e71e <USBD_GetString>
 8011afc:	e004      	b.n	8011b08 <USBD_HS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_HS, USBD_StrDesc, length);
 8011afe:	683a      	ldr	r2, [r7, #0]
 8011b00:	4904      	ldr	r1, [pc, #16]	; (8011b14 <USBD_HS_ConfigStrDescriptor+0x34>)
 8011b02:	4805      	ldr	r0, [pc, #20]	; (8011b18 <USBD_HS_ConfigStrDescriptor+0x38>)
 8011b04:	f7fc fe0b 	bl	800e71e <USBD_GetString>
  }
  return USBD_StrDesc;
 8011b08:	4b02      	ldr	r3, [pc, #8]	; (8011b14 <USBD_HS_ConfigStrDescriptor+0x34>)
}
 8011b0a:	4618      	mov	r0, r3
 8011b0c:	3708      	adds	r7, #8
 8011b0e:	46bd      	mov	sp, r7
 8011b10:	bd80      	pop	{r7, pc}
 8011b12:	bf00      	nop
 8011b14:	20006a6c 	.word	0x20006a6c
 8011b18:	08012480 	.word	0x08012480

08011b1c <USBD_HS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8011b1c:	b580      	push	{r7, lr}
 8011b1e:	b082      	sub	sp, #8
 8011b20:	af00      	add	r7, sp, #0
 8011b22:	4603      	mov	r3, r0
 8011b24:	6039      	str	r1, [r7, #0]
 8011b26:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8011b28:	79fb      	ldrb	r3, [r7, #7]
 8011b2a:	2b00      	cmp	r3, #0
 8011b2c:	d105      	bne.n	8011b3a <USBD_HS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_HS, USBD_StrDesc, length);
 8011b2e:	683a      	ldr	r2, [r7, #0]
 8011b30:	4907      	ldr	r1, [pc, #28]	; (8011b50 <USBD_HS_InterfaceStrDescriptor+0x34>)
 8011b32:	4808      	ldr	r0, [pc, #32]	; (8011b54 <USBD_HS_InterfaceStrDescriptor+0x38>)
 8011b34:	f7fc fdf3 	bl	800e71e <USBD_GetString>
 8011b38:	e004      	b.n	8011b44 <USBD_HS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_HS, USBD_StrDesc, length);
 8011b3a:	683a      	ldr	r2, [r7, #0]
 8011b3c:	4904      	ldr	r1, [pc, #16]	; (8011b50 <USBD_HS_InterfaceStrDescriptor+0x34>)
 8011b3e:	4805      	ldr	r0, [pc, #20]	; (8011b54 <USBD_HS_InterfaceStrDescriptor+0x38>)
 8011b40:	f7fc fded 	bl	800e71e <USBD_GetString>
  }
  return USBD_StrDesc;
 8011b44:	4b02      	ldr	r3, [pc, #8]	; (8011b50 <USBD_HS_InterfaceStrDescriptor+0x34>)
}
 8011b46:	4618      	mov	r0, r3
 8011b48:	3708      	adds	r7, #8
 8011b4a:	46bd      	mov	sp, r7
 8011b4c:	bd80      	pop	{r7, pc}
 8011b4e:	bf00      	nop
 8011b50:	20006a6c 	.word	0x20006a6c
 8011b54:	0801248c 	.word	0x0801248c

08011b58 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8011b58:	b580      	push	{r7, lr}
 8011b5a:	b084      	sub	sp, #16
 8011b5c:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8011b5e:	4b0f      	ldr	r3, [pc, #60]	; (8011b9c <Get_SerialNum+0x44>)
 8011b60:	681b      	ldr	r3, [r3, #0]
 8011b62:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8011b64:	4b0e      	ldr	r3, [pc, #56]	; (8011ba0 <Get_SerialNum+0x48>)
 8011b66:	681b      	ldr	r3, [r3, #0]
 8011b68:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8011b6a:	4b0e      	ldr	r3, [pc, #56]	; (8011ba4 <Get_SerialNum+0x4c>)
 8011b6c:	681b      	ldr	r3, [r3, #0]
 8011b6e:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8011b70:	68fa      	ldr	r2, [r7, #12]
 8011b72:	687b      	ldr	r3, [r7, #4]
 8011b74:	4413      	add	r3, r2
 8011b76:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8011b78:	68fb      	ldr	r3, [r7, #12]
 8011b7a:	2b00      	cmp	r3, #0
 8011b7c:	d009      	beq.n	8011b92 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8011b7e:	2208      	movs	r2, #8
 8011b80:	4909      	ldr	r1, [pc, #36]	; (8011ba8 <Get_SerialNum+0x50>)
 8011b82:	68f8      	ldr	r0, [r7, #12]
 8011b84:	f000 f814 	bl	8011bb0 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8011b88:	2204      	movs	r2, #4
 8011b8a:	4908      	ldr	r1, [pc, #32]	; (8011bac <Get_SerialNum+0x54>)
 8011b8c:	68b8      	ldr	r0, [r7, #8]
 8011b8e:	f000 f80f 	bl	8011bb0 <IntToUnicode>
  }
}
 8011b92:	bf00      	nop
 8011b94:	3710      	adds	r7, #16
 8011b96:	46bd      	mov	sp, r7
 8011b98:	bd80      	pop	{r7, pc}
 8011b9a:	bf00      	nop
 8011b9c:	1ff1e800 	.word	0x1ff1e800
 8011ba0:	1ff1e804 	.word	0x1ff1e804
 8011ba4:	1ff1e808 	.word	0x1ff1e808
 8011ba8:	2000016e 	.word	0x2000016e
 8011bac:	2000017e 	.word	0x2000017e

08011bb0 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8011bb0:	b480      	push	{r7}
 8011bb2:	b087      	sub	sp, #28
 8011bb4:	af00      	add	r7, sp, #0
 8011bb6:	60f8      	str	r0, [r7, #12]
 8011bb8:	60b9      	str	r1, [r7, #8]
 8011bba:	4613      	mov	r3, r2
 8011bbc:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8011bbe:	2300      	movs	r3, #0
 8011bc0:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8011bc2:	2300      	movs	r3, #0
 8011bc4:	75fb      	strb	r3, [r7, #23]
 8011bc6:	e027      	b.n	8011c18 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8011bc8:	68fb      	ldr	r3, [r7, #12]
 8011bca:	0f1b      	lsrs	r3, r3, #28
 8011bcc:	2b09      	cmp	r3, #9
 8011bce:	d80b      	bhi.n	8011be8 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8011bd0:	68fb      	ldr	r3, [r7, #12]
 8011bd2:	0f1b      	lsrs	r3, r3, #28
 8011bd4:	b2da      	uxtb	r2, r3
 8011bd6:	7dfb      	ldrb	r3, [r7, #23]
 8011bd8:	005b      	lsls	r3, r3, #1
 8011bda:	4619      	mov	r1, r3
 8011bdc:	68bb      	ldr	r3, [r7, #8]
 8011bde:	440b      	add	r3, r1
 8011be0:	3230      	adds	r2, #48	; 0x30
 8011be2:	b2d2      	uxtb	r2, r2
 8011be4:	701a      	strb	r2, [r3, #0]
 8011be6:	e00a      	b.n	8011bfe <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8011be8:	68fb      	ldr	r3, [r7, #12]
 8011bea:	0f1b      	lsrs	r3, r3, #28
 8011bec:	b2da      	uxtb	r2, r3
 8011bee:	7dfb      	ldrb	r3, [r7, #23]
 8011bf0:	005b      	lsls	r3, r3, #1
 8011bf2:	4619      	mov	r1, r3
 8011bf4:	68bb      	ldr	r3, [r7, #8]
 8011bf6:	440b      	add	r3, r1
 8011bf8:	3237      	adds	r2, #55	; 0x37
 8011bfa:	b2d2      	uxtb	r2, r2
 8011bfc:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8011bfe:	68fb      	ldr	r3, [r7, #12]
 8011c00:	011b      	lsls	r3, r3, #4
 8011c02:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8011c04:	7dfb      	ldrb	r3, [r7, #23]
 8011c06:	005b      	lsls	r3, r3, #1
 8011c08:	3301      	adds	r3, #1
 8011c0a:	68ba      	ldr	r2, [r7, #8]
 8011c0c:	4413      	add	r3, r2
 8011c0e:	2200      	movs	r2, #0
 8011c10:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8011c12:	7dfb      	ldrb	r3, [r7, #23]
 8011c14:	3301      	adds	r3, #1
 8011c16:	75fb      	strb	r3, [r7, #23]
 8011c18:	7dfa      	ldrb	r2, [r7, #23]
 8011c1a:	79fb      	ldrb	r3, [r7, #7]
 8011c1c:	429a      	cmp	r2, r3
 8011c1e:	d3d3      	bcc.n	8011bc8 <IntToUnicode+0x18>
  }
}
 8011c20:	bf00      	nop
 8011c22:	bf00      	nop
 8011c24:	371c      	adds	r7, #28
 8011c26:	46bd      	mov	sp, r7
 8011c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011c2c:	4770      	bx	lr
	...

08011c30 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8011c30:	b580      	push	{r7, lr}
 8011c32:	b0ba      	sub	sp, #232	; 0xe8
 8011c34:	af00      	add	r7, sp, #0
 8011c36:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8011c38:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8011c3c:	2200      	movs	r2, #0
 8011c3e:	601a      	str	r2, [r3, #0]
 8011c40:	605a      	str	r2, [r3, #4]
 8011c42:	609a      	str	r2, [r3, #8]
 8011c44:	60da      	str	r2, [r3, #12]
 8011c46:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8011c48:	f107 0320 	add.w	r3, r7, #32
 8011c4c:	22b4      	movs	r2, #180	; 0xb4
 8011c4e:	2100      	movs	r1, #0
 8011c50:	4618      	mov	r0, r3
 8011c52:	f000 fbb3 	bl	80123bc <memset>
  if(pcdHandle->Instance==USB_OTG_HS)
 8011c56:	687b      	ldr	r3, [r7, #4]
 8011c58:	681b      	ldr	r3, [r3, #0]
 8011c5a:	4a57      	ldr	r2, [pc, #348]	; (8011db8 <HAL_PCD_MspInit+0x188>)
 8011c5c:	4293      	cmp	r3, r2
 8011c5e:	f040 80a6 	bne.w	8011dae <HAL_PCD_MspInit+0x17e>
  /* USER CODE BEGIN USB_OTG_HS_MspInit 0 */

  /* USER CODE END USB_OTG_HS_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8011c62:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8011c66:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_PLL;
 8011c68:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8011c6c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8011c70:	f107 0320 	add.w	r3, r7, #32
 8011c74:	4618      	mov	r0, r3
 8011c76:	f7f3 fc81 	bl	800557c <HAL_RCCEx_PeriphCLKConfig>
 8011c7a:	4603      	mov	r3, r0
 8011c7c:	2b00      	cmp	r3, #0
 8011c7e:	d001      	beq.n	8011c84 <HAL_PCD_MspInit+0x54>
    {
      Error_Handler();
 8011c80:	f7ef f878 	bl	8000d74 <Error_Handler>
    }
  /** Enable USB Voltage detector
  */
    HAL_PWREx_EnableUSBVoltageDetector();
 8011c84:	f7f2 fd0e 	bl	80046a4 <HAL_PWREx_EnableUSBVoltageDetector>

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8011c88:	4b4c      	ldr	r3, [pc, #304]	; (8011dbc <HAL_PCD_MspInit+0x18c>)
 8011c8a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8011c8e:	4a4b      	ldr	r2, [pc, #300]	; (8011dbc <HAL_PCD_MspInit+0x18c>)
 8011c90:	f043 0304 	orr.w	r3, r3, #4
 8011c94:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8011c98:	4b48      	ldr	r3, [pc, #288]	; (8011dbc <HAL_PCD_MspInit+0x18c>)
 8011c9a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8011c9e:	f003 0304 	and.w	r3, r3, #4
 8011ca2:	61fb      	str	r3, [r7, #28]
 8011ca4:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8011ca6:	4b45      	ldr	r3, [pc, #276]	; (8011dbc <HAL_PCD_MspInit+0x18c>)
 8011ca8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8011cac:	4a43      	ldr	r2, [pc, #268]	; (8011dbc <HAL_PCD_MspInit+0x18c>)
 8011cae:	f043 0301 	orr.w	r3, r3, #1
 8011cb2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8011cb6:	4b41      	ldr	r3, [pc, #260]	; (8011dbc <HAL_PCD_MspInit+0x18c>)
 8011cb8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8011cbc:	f003 0301 	and.w	r3, r3, #1
 8011cc0:	61bb      	str	r3, [r7, #24]
 8011cc2:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8011cc4:	4b3d      	ldr	r3, [pc, #244]	; (8011dbc <HAL_PCD_MspInit+0x18c>)
 8011cc6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8011cca:	4a3c      	ldr	r2, [pc, #240]	; (8011dbc <HAL_PCD_MspInit+0x18c>)
 8011ccc:	f043 0302 	orr.w	r3, r3, #2
 8011cd0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8011cd4:	4b39      	ldr	r3, [pc, #228]	; (8011dbc <HAL_PCD_MspInit+0x18c>)
 8011cd6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8011cda:	f003 0302 	and.w	r3, r3, #2
 8011cde:	617b      	str	r3, [r7, #20]
 8011ce0:	697b      	ldr	r3, [r7, #20]
    PB11     ------> USB_OTG_HS_ULPI_D4
    PB12     ------> USB_OTG_HS_ULPI_D5
    PB13     ------> USB_OTG_HS_ULPI_D6
    PB5     ------> USB_OTG_HS_ULPI_D7
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_2|GPIO_PIN_3;
 8011ce2:	230d      	movs	r3, #13
 8011ce4:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8011ce8:	2302      	movs	r3, #2
 8011cea:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8011cee:	2300      	movs	r3, #0
 8011cf0:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8011cf4:	2302      	movs	r3, #2
 8011cf6:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_HS;
 8011cfa:	230a      	movs	r3, #10
 8011cfc:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8011d00:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8011d04:	4619      	mov	r1, r3
 8011d06:	482e      	ldr	r0, [pc, #184]	; (8011dc0 <HAL_PCD_MspInit+0x190>)
 8011d08:	f7f0 f994 	bl	8002034 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_5;
 8011d0c:	2328      	movs	r3, #40	; 0x28
 8011d0e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8011d12:	2302      	movs	r3, #2
 8011d14:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8011d18:	2300      	movs	r3, #0
 8011d1a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8011d1e:	2302      	movs	r3, #2
 8011d20:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_HS;
 8011d24:	230a      	movs	r3, #10
 8011d26:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8011d2a:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8011d2e:	4619      	mov	r1, r3
 8011d30:	4824      	ldr	r0, [pc, #144]	; (8011dc4 <HAL_PCD_MspInit+0x194>)
 8011d32:	f7f0 f97f 	bl	8002034 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_10|GPIO_PIN_11
 8011d36:	f643 4323 	movw	r3, #15395	; 0x3c23
 8011d3a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
                          |GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_5;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8011d3e:	2302      	movs	r3, #2
 8011d40:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8011d44:	2300      	movs	r3, #0
 8011d46:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8011d4a:	2302      	movs	r3, #2
 8011d4c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_HS;
 8011d50:	230a      	movs	r3, #10
 8011d52:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8011d56:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8011d5a:	4619      	mov	r1, r3
 8011d5c:	481a      	ldr	r0, [pc, #104]	; (8011dc8 <HAL_PCD_MspInit+0x198>)
 8011d5e:	f7f0 f969 	bl	8002034 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_HS_CLK_ENABLE();
 8011d62:	4b16      	ldr	r3, [pc, #88]	; (8011dbc <HAL_PCD_MspInit+0x18c>)
 8011d64:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8011d68:	4a14      	ldr	r2, [pc, #80]	; (8011dbc <HAL_PCD_MspInit+0x18c>)
 8011d6a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8011d6e:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8011d72:	4b12      	ldr	r3, [pc, #72]	; (8011dbc <HAL_PCD_MspInit+0x18c>)
 8011d74:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8011d78:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8011d7c:	613b      	str	r3, [r7, #16]
 8011d7e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_USB_OTG_HS_ULPI_CLK_ENABLE();
 8011d80:	4b0e      	ldr	r3, [pc, #56]	; (8011dbc <HAL_PCD_MspInit+0x18c>)
 8011d82:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8011d86:	4a0d      	ldr	r2, [pc, #52]	; (8011dbc <HAL_PCD_MspInit+0x18c>)
 8011d88:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8011d8c:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8011d90:	4b0a      	ldr	r3, [pc, #40]	; (8011dbc <HAL_PCD_MspInit+0x18c>)
 8011d92:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8011d96:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8011d9a:	60fb      	str	r3, [r7, #12]
 8011d9c:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_HS_IRQn, 5, 0);
 8011d9e:	2200      	movs	r2, #0
 8011da0:	2105      	movs	r1, #5
 8011da2:	204d      	movs	r0, #77	; 0x4d
 8011da4:	f7ef fdb6 	bl	8001914 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_HS_IRQn);
 8011da8:	204d      	movs	r0, #77	; 0x4d
 8011daa:	f7ef fdcd 	bl	8001948 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_HS_MspInit 1 */

  /* USER CODE END USB_OTG_HS_MspInit 1 */
  }
}
 8011dae:	bf00      	nop
 8011db0:	37e8      	adds	r7, #232	; 0xe8
 8011db2:	46bd      	mov	sp, r7
 8011db4:	bd80      	pop	{r7, pc}
 8011db6:	bf00      	nop
 8011db8:	40040000 	.word	0x40040000
 8011dbc:	58024400 	.word	0x58024400
 8011dc0:	58020800 	.word	0x58020800
 8011dc4:	58020000 	.word	0x58020000
 8011dc8:	58020400 	.word	0x58020400

08011dcc <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8011dcc:	b580      	push	{r7, lr}
 8011dce:	b082      	sub	sp, #8
 8011dd0:	af00      	add	r7, sp, #0
 8011dd2:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8011dd4:	687b      	ldr	r3, [r7, #4]
 8011dd6:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 8011dda:	687b      	ldr	r3, [r7, #4]
 8011ddc:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8011de0:	4619      	mov	r1, r3
 8011de2:	4610      	mov	r0, r2
 8011de4:	f7fb fcb4 	bl	800d750 <USBD_LL_SetupStage>
}
 8011de8:	bf00      	nop
 8011dea:	3708      	adds	r7, #8
 8011dec:	46bd      	mov	sp, r7
 8011dee:	bd80      	pop	{r7, pc}

08011df0 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8011df0:	b580      	push	{r7, lr}
 8011df2:	b082      	sub	sp, #8
 8011df4:	af00      	add	r7, sp, #0
 8011df6:	6078      	str	r0, [r7, #4]
 8011df8:	460b      	mov	r3, r1
 8011dfa:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8011dfc:	687b      	ldr	r3, [r7, #4]
 8011dfe:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 8011e02:	78fa      	ldrb	r2, [r7, #3]
 8011e04:	6879      	ldr	r1, [r7, #4]
 8011e06:	4613      	mov	r3, r2
 8011e08:	00db      	lsls	r3, r3, #3
 8011e0a:	1a9b      	subs	r3, r3, r2
 8011e0c:	009b      	lsls	r3, r3, #2
 8011e0e:	440b      	add	r3, r1
 8011e10:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8011e14:	681a      	ldr	r2, [r3, #0]
 8011e16:	78fb      	ldrb	r3, [r7, #3]
 8011e18:	4619      	mov	r1, r3
 8011e1a:	f7fb fcee 	bl	800d7fa <USBD_LL_DataOutStage>
}
 8011e1e:	bf00      	nop
 8011e20:	3708      	adds	r7, #8
 8011e22:	46bd      	mov	sp, r7
 8011e24:	bd80      	pop	{r7, pc}

08011e26 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8011e26:	b580      	push	{r7, lr}
 8011e28:	b082      	sub	sp, #8
 8011e2a:	af00      	add	r7, sp, #0
 8011e2c:	6078      	str	r0, [r7, #4]
 8011e2e:	460b      	mov	r3, r1
 8011e30:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8011e32:	687b      	ldr	r3, [r7, #4]
 8011e34:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 8011e38:	78fa      	ldrb	r2, [r7, #3]
 8011e3a:	6879      	ldr	r1, [r7, #4]
 8011e3c:	4613      	mov	r3, r2
 8011e3e:	00db      	lsls	r3, r3, #3
 8011e40:	1a9b      	subs	r3, r3, r2
 8011e42:	009b      	lsls	r3, r3, #2
 8011e44:	440b      	add	r3, r1
 8011e46:	3348      	adds	r3, #72	; 0x48
 8011e48:	681a      	ldr	r2, [r3, #0]
 8011e4a:	78fb      	ldrb	r3, [r7, #3]
 8011e4c:	4619      	mov	r1, r3
 8011e4e:	f7fb fd37 	bl	800d8c0 <USBD_LL_DataInStage>
}
 8011e52:	bf00      	nop
 8011e54:	3708      	adds	r7, #8
 8011e56:	46bd      	mov	sp, r7
 8011e58:	bd80      	pop	{r7, pc}

08011e5a <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8011e5a:	b580      	push	{r7, lr}
 8011e5c:	b082      	sub	sp, #8
 8011e5e:	af00      	add	r7, sp, #0
 8011e60:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8011e62:	687b      	ldr	r3, [r7, #4]
 8011e64:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8011e68:	4618      	mov	r0, r3
 8011e6a:	f7fb fe4b 	bl	800db04 <USBD_LL_SOF>
}
 8011e6e:	bf00      	nop
 8011e70:	3708      	adds	r7, #8
 8011e72:	46bd      	mov	sp, r7
 8011e74:	bd80      	pop	{r7, pc}

08011e76 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8011e76:	b580      	push	{r7, lr}
 8011e78:	b084      	sub	sp, #16
 8011e7a:	af00      	add	r7, sp, #0
 8011e7c:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8011e7e:	2301      	movs	r3, #1
 8011e80:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 8011e82:	687b      	ldr	r3, [r7, #4]
 8011e84:	68db      	ldr	r3, [r3, #12]
 8011e86:	2b00      	cmp	r3, #0
 8011e88:	d102      	bne.n	8011e90 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 8011e8a:	2300      	movs	r3, #0
 8011e8c:	73fb      	strb	r3, [r7, #15]
 8011e8e:	e008      	b.n	8011ea2 <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 8011e90:	687b      	ldr	r3, [r7, #4]
 8011e92:	68db      	ldr	r3, [r3, #12]
 8011e94:	2b02      	cmp	r3, #2
 8011e96:	d102      	bne.n	8011e9e <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 8011e98:	2301      	movs	r3, #1
 8011e9a:	73fb      	strb	r3, [r7, #15]
 8011e9c:	e001      	b.n	8011ea2 <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 8011e9e:	f7ee ff69 	bl	8000d74 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8011ea2:	687b      	ldr	r3, [r7, #4]
 8011ea4:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8011ea8:	7bfa      	ldrb	r2, [r7, #15]
 8011eaa:	4611      	mov	r1, r2
 8011eac:	4618      	mov	r0, r3
 8011eae:	f7fb fdeb 	bl	800da88 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8011eb2:	687b      	ldr	r3, [r7, #4]
 8011eb4:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8011eb8:	4618      	mov	r0, r3
 8011eba:	f7fb fd97 	bl	800d9ec <USBD_LL_Reset>
}
 8011ebe:	bf00      	nop
 8011ec0:	3710      	adds	r7, #16
 8011ec2:	46bd      	mov	sp, r7
 8011ec4:	bd80      	pop	{r7, pc}
	...

08011ec8 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8011ec8:	b580      	push	{r7, lr}
 8011eca:	b082      	sub	sp, #8
 8011ecc:	af00      	add	r7, sp, #0
 8011ece:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8011ed0:	687b      	ldr	r3, [r7, #4]
 8011ed2:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8011ed6:	4618      	mov	r0, r3
 8011ed8:	f7fb fde6 	bl	800daa8 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8011edc:	687b      	ldr	r3, [r7, #4]
 8011ede:	681b      	ldr	r3, [r3, #0]
 8011ee0:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8011ee4:	681b      	ldr	r3, [r3, #0]
 8011ee6:	687a      	ldr	r2, [r7, #4]
 8011ee8:	6812      	ldr	r2, [r2, #0]
 8011eea:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8011eee:	f043 0301 	orr.w	r3, r3, #1
 8011ef2:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8011ef4:	687b      	ldr	r3, [r7, #4]
 8011ef6:	6a1b      	ldr	r3, [r3, #32]
 8011ef8:	2b00      	cmp	r3, #0
 8011efa:	d005      	beq.n	8011f08 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8011efc:	4b04      	ldr	r3, [pc, #16]	; (8011f10 <HAL_PCD_SuspendCallback+0x48>)
 8011efe:	691b      	ldr	r3, [r3, #16]
 8011f00:	4a03      	ldr	r2, [pc, #12]	; (8011f10 <HAL_PCD_SuspendCallback+0x48>)
 8011f02:	f043 0306 	orr.w	r3, r3, #6
 8011f06:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8011f08:	bf00      	nop
 8011f0a:	3708      	adds	r7, #8
 8011f0c:	46bd      	mov	sp, r7
 8011f0e:	bd80      	pop	{r7, pc}
 8011f10:	e000ed00 	.word	0xe000ed00

08011f14 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8011f14:	b580      	push	{r7, lr}
 8011f16:	b082      	sub	sp, #8
 8011f18:	af00      	add	r7, sp, #0
 8011f1a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8011f1c:	687b      	ldr	r3, [r7, #4]
 8011f1e:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8011f22:	4618      	mov	r0, r3
 8011f24:	f7fb fdd6 	bl	800dad4 <USBD_LL_Resume>
}
 8011f28:	bf00      	nop
 8011f2a:	3708      	adds	r7, #8
 8011f2c:	46bd      	mov	sp, r7
 8011f2e:	bd80      	pop	{r7, pc}

08011f30 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8011f30:	b580      	push	{r7, lr}
 8011f32:	b082      	sub	sp, #8
 8011f34:	af00      	add	r7, sp, #0
 8011f36:	6078      	str	r0, [r7, #4]
 8011f38:	460b      	mov	r3, r1
 8011f3a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8011f3c:	687b      	ldr	r3, [r7, #4]
 8011f3e:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8011f42:	78fa      	ldrb	r2, [r7, #3]
 8011f44:	4611      	mov	r1, r2
 8011f46:	4618      	mov	r0, r3
 8011f48:	f7fb fe24 	bl	800db94 <USBD_LL_IsoOUTIncomplete>
}
 8011f4c:	bf00      	nop
 8011f4e:	3708      	adds	r7, #8
 8011f50:	46bd      	mov	sp, r7
 8011f52:	bd80      	pop	{r7, pc}

08011f54 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8011f54:	b580      	push	{r7, lr}
 8011f56:	b082      	sub	sp, #8
 8011f58:	af00      	add	r7, sp, #0
 8011f5a:	6078      	str	r0, [r7, #4]
 8011f5c:	460b      	mov	r3, r1
 8011f5e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8011f60:	687b      	ldr	r3, [r7, #4]
 8011f62:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8011f66:	78fa      	ldrb	r2, [r7, #3]
 8011f68:	4611      	mov	r1, r2
 8011f6a:	4618      	mov	r0, r3
 8011f6c:	f7fb fdec 	bl	800db48 <USBD_LL_IsoINIncomplete>
}
 8011f70:	bf00      	nop
 8011f72:	3708      	adds	r7, #8
 8011f74:	46bd      	mov	sp, r7
 8011f76:	bd80      	pop	{r7, pc}

08011f78 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8011f78:	b580      	push	{r7, lr}
 8011f7a:	b082      	sub	sp, #8
 8011f7c:	af00      	add	r7, sp, #0
 8011f7e:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8011f80:	687b      	ldr	r3, [r7, #4]
 8011f82:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8011f86:	4618      	mov	r0, r3
 8011f88:	f7fb fe2a 	bl	800dbe0 <USBD_LL_DevConnected>
}
 8011f8c:	bf00      	nop
 8011f8e:	3708      	adds	r7, #8
 8011f90:	46bd      	mov	sp, r7
 8011f92:	bd80      	pop	{r7, pc}

08011f94 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8011f94:	b580      	push	{r7, lr}
 8011f96:	b082      	sub	sp, #8
 8011f98:	af00      	add	r7, sp, #0
 8011f9a:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8011f9c:	687b      	ldr	r3, [r7, #4]
 8011f9e:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8011fa2:	4618      	mov	r0, r3
 8011fa4:	f7fb fe27 	bl	800dbf6 <USBD_LL_DevDisconnected>
}
 8011fa8:	bf00      	nop
 8011faa:	3708      	adds	r7, #8
 8011fac:	46bd      	mov	sp, r7
 8011fae:	bd80      	pop	{r7, pc}

08011fb0 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8011fb0:	b580      	push	{r7, lr}
 8011fb2:	b082      	sub	sp, #8
 8011fb4:	af00      	add	r7, sp, #0
 8011fb6:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_HS) {
 8011fb8:	687b      	ldr	r3, [r7, #4]
 8011fba:	781b      	ldrb	r3, [r3, #0]
 8011fbc:	2b01      	cmp	r3, #1
 8011fbe:	d140      	bne.n	8012042 <USBD_LL_Init+0x92>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_HS.pData = pdev;
 8011fc0:	4a22      	ldr	r2, [pc, #136]	; (801204c <USBD_LL_Init+0x9c>)
 8011fc2:	687b      	ldr	r3, [r7, #4]
 8011fc4:	f8c2 3404 	str.w	r3, [r2, #1028]	; 0x404
  pdev->pData = &hpcd_USB_OTG_HS;
 8011fc8:	687b      	ldr	r3, [r7, #4]
 8011fca:	4a20      	ldr	r2, [pc, #128]	; (801204c <USBD_LL_Init+0x9c>)
 8011fcc:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4

  hpcd_USB_OTG_HS.Instance = USB_OTG_HS;
 8011fd0:	4b1e      	ldr	r3, [pc, #120]	; (801204c <USBD_LL_Init+0x9c>)
 8011fd2:	4a1f      	ldr	r2, [pc, #124]	; (8012050 <USBD_LL_Init+0xa0>)
 8011fd4:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_HS.Init.dev_endpoints = 9;
 8011fd6:	4b1d      	ldr	r3, [pc, #116]	; (801204c <USBD_LL_Init+0x9c>)
 8011fd8:	2209      	movs	r2, #9
 8011fda:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_HS.Init.speed = PCD_SPEED_HIGH;
 8011fdc:	4b1b      	ldr	r3, [pc, #108]	; (801204c <USBD_LL_Init+0x9c>)
 8011fde:	2200      	movs	r2, #0
 8011fe0:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_HS.Init.dma_enable = DISABLE;
 8011fe2:	4b1a      	ldr	r3, [pc, #104]	; (801204c <USBD_LL_Init+0x9c>)
 8011fe4:	2200      	movs	r2, #0
 8011fe6:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_HS.Init.phy_itface = USB_OTG_ULPI_PHY;
 8011fe8:	4b18      	ldr	r3, [pc, #96]	; (801204c <USBD_LL_Init+0x9c>)
 8011fea:	2201      	movs	r2, #1
 8011fec:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_HS.Init.Sof_enable = DISABLE;
 8011fee:	4b17      	ldr	r3, [pc, #92]	; (801204c <USBD_LL_Init+0x9c>)
 8011ff0:	2200      	movs	r2, #0
 8011ff2:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_HS.Init.low_power_enable = DISABLE;
 8011ff4:	4b15      	ldr	r3, [pc, #84]	; (801204c <USBD_LL_Init+0x9c>)
 8011ff6:	2200      	movs	r2, #0
 8011ff8:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_HS.Init.lpm_enable = DISABLE;
 8011ffa:	4b14      	ldr	r3, [pc, #80]	; (801204c <USBD_LL_Init+0x9c>)
 8011ffc:	2200      	movs	r2, #0
 8011ffe:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_HS.Init.vbus_sensing_enable = DISABLE;
 8012000:	4b12      	ldr	r3, [pc, #72]	; (801204c <USBD_LL_Init+0x9c>)
 8012002:	2200      	movs	r2, #0
 8012004:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_HS.Init.use_dedicated_ep1 = DISABLE;
 8012006:	4b11      	ldr	r3, [pc, #68]	; (801204c <USBD_LL_Init+0x9c>)
 8012008:	2200      	movs	r2, #0
 801200a:	631a      	str	r2, [r3, #48]	; 0x30
  hpcd_USB_OTG_HS.Init.use_external_vbus = DISABLE;
 801200c:	4b0f      	ldr	r3, [pc, #60]	; (801204c <USBD_LL_Init+0x9c>)
 801200e:	2200      	movs	r2, #0
 8012010:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_PCD_Init(&hpcd_USB_OTG_HS) != HAL_OK)
 8012012:	480e      	ldr	r0, [pc, #56]	; (801204c <USBD_LL_Init+0x9c>)
 8012014:	f7f1 f900 	bl	8003218 <HAL_PCD_Init>
 8012018:	4603      	mov	r3, r0
 801201a:	2b00      	cmp	r3, #0
 801201c:	d001      	beq.n	8012022 <USBD_LL_Init+0x72>
  {
    Error_Handler( );
 801201e:	f7ee fea9 	bl	8000d74 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_HS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_HS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_HS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_HS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_HS, 0x200);
 8012022:	f44f 7100 	mov.w	r1, #512	; 0x200
 8012026:	4809      	ldr	r0, [pc, #36]	; (801204c <USBD_LL_Init+0x9c>)
 8012028:	f7f2 fa91 	bl	800454e <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_HS, 0, 0x80);
 801202c:	2280      	movs	r2, #128	; 0x80
 801202e:	2100      	movs	r1, #0
 8012030:	4806      	ldr	r0, [pc, #24]	; (801204c <USBD_LL_Init+0x9c>)
 8012032:	f7f2 fa45 	bl	80044c0 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_HS, 1, 0x174);
 8012036:	f44f 72ba 	mov.w	r2, #372	; 0x174
 801203a:	2101      	movs	r1, #1
 801203c:	4803      	ldr	r0, [pc, #12]	; (801204c <USBD_LL_Init+0x9c>)
 801203e:	f7f2 fa3f 	bl	80044c0 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 8012042:	2300      	movs	r3, #0
}
 8012044:	4618      	mov	r0, r3
 8012046:	3708      	adds	r7, #8
 8012048:	46bd      	mov	sp, r7
 801204a:	bd80      	pop	{r7, pc}
 801204c:	20006c6c 	.word	0x20006c6c
 8012050:	40040000 	.word	0x40040000

08012054 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8012054:	b580      	push	{r7, lr}
 8012056:	b084      	sub	sp, #16
 8012058:	af00      	add	r7, sp, #0
 801205a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801205c:	2300      	movs	r3, #0
 801205e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8012060:	2300      	movs	r3, #0
 8012062:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8012064:	687b      	ldr	r3, [r7, #4]
 8012066:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 801206a:	4618      	mov	r0, r3
 801206c:	f7f1 f9f8 	bl	8003460 <HAL_PCD_Start>
 8012070:	4603      	mov	r3, r0
 8012072:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8012074:	7bfb      	ldrb	r3, [r7, #15]
 8012076:	4618      	mov	r0, r3
 8012078:	f000 f942 	bl	8012300 <USBD_Get_USB_Status>
 801207c:	4603      	mov	r3, r0
 801207e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8012080:	7bbb      	ldrb	r3, [r7, #14]
}
 8012082:	4618      	mov	r0, r3
 8012084:	3710      	adds	r7, #16
 8012086:	46bd      	mov	sp, r7
 8012088:	bd80      	pop	{r7, pc}

0801208a <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 801208a:	b580      	push	{r7, lr}
 801208c:	b084      	sub	sp, #16
 801208e:	af00      	add	r7, sp, #0
 8012090:	6078      	str	r0, [r7, #4]
 8012092:	4608      	mov	r0, r1
 8012094:	4611      	mov	r1, r2
 8012096:	461a      	mov	r2, r3
 8012098:	4603      	mov	r3, r0
 801209a:	70fb      	strb	r3, [r7, #3]
 801209c:	460b      	mov	r3, r1
 801209e:	70bb      	strb	r3, [r7, #2]
 80120a0:	4613      	mov	r3, r2
 80120a2:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80120a4:	2300      	movs	r3, #0
 80120a6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80120a8:	2300      	movs	r3, #0
 80120aa:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 80120ac:	687b      	ldr	r3, [r7, #4]
 80120ae:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 80120b2:	78bb      	ldrb	r3, [r7, #2]
 80120b4:	883a      	ldrh	r2, [r7, #0]
 80120b6:	78f9      	ldrb	r1, [r7, #3]
 80120b8:	f7f1 fe09 	bl	8003cce <HAL_PCD_EP_Open>
 80120bc:	4603      	mov	r3, r0
 80120be:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80120c0:	7bfb      	ldrb	r3, [r7, #15]
 80120c2:	4618      	mov	r0, r3
 80120c4:	f000 f91c 	bl	8012300 <USBD_Get_USB_Status>
 80120c8:	4603      	mov	r3, r0
 80120ca:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80120cc:	7bbb      	ldrb	r3, [r7, #14]
}
 80120ce:	4618      	mov	r0, r3
 80120d0:	3710      	adds	r7, #16
 80120d2:	46bd      	mov	sp, r7
 80120d4:	bd80      	pop	{r7, pc}

080120d6 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80120d6:	b580      	push	{r7, lr}
 80120d8:	b084      	sub	sp, #16
 80120da:	af00      	add	r7, sp, #0
 80120dc:	6078      	str	r0, [r7, #4]
 80120de:	460b      	mov	r3, r1
 80120e0:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80120e2:	2300      	movs	r3, #0
 80120e4:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80120e6:	2300      	movs	r3, #0
 80120e8:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 80120ea:	687b      	ldr	r3, [r7, #4]
 80120ec:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80120f0:	78fa      	ldrb	r2, [r7, #3]
 80120f2:	4611      	mov	r1, r2
 80120f4:	4618      	mov	r0, r3
 80120f6:	f7f1 fe52 	bl	8003d9e <HAL_PCD_EP_Close>
 80120fa:	4603      	mov	r3, r0
 80120fc:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80120fe:	7bfb      	ldrb	r3, [r7, #15]
 8012100:	4618      	mov	r0, r3
 8012102:	f000 f8fd 	bl	8012300 <USBD_Get_USB_Status>
 8012106:	4603      	mov	r3, r0
 8012108:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801210a:	7bbb      	ldrb	r3, [r7, #14]
}
 801210c:	4618      	mov	r0, r3
 801210e:	3710      	adds	r7, #16
 8012110:	46bd      	mov	sp, r7
 8012112:	bd80      	pop	{r7, pc}

08012114 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8012114:	b580      	push	{r7, lr}
 8012116:	b084      	sub	sp, #16
 8012118:	af00      	add	r7, sp, #0
 801211a:	6078      	str	r0, [r7, #4]
 801211c:	460b      	mov	r3, r1
 801211e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8012120:	2300      	movs	r3, #0
 8012122:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8012124:	2300      	movs	r3, #0
 8012126:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8012128:	687b      	ldr	r3, [r7, #4]
 801212a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 801212e:	78fa      	ldrb	r2, [r7, #3]
 8012130:	4611      	mov	r1, r2
 8012132:	4618      	mov	r0, r3
 8012134:	f7f1 ff2a 	bl	8003f8c <HAL_PCD_EP_SetStall>
 8012138:	4603      	mov	r3, r0
 801213a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801213c:	7bfb      	ldrb	r3, [r7, #15]
 801213e:	4618      	mov	r0, r3
 8012140:	f000 f8de 	bl	8012300 <USBD_Get_USB_Status>
 8012144:	4603      	mov	r3, r0
 8012146:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8012148:	7bbb      	ldrb	r3, [r7, #14]
}
 801214a:	4618      	mov	r0, r3
 801214c:	3710      	adds	r7, #16
 801214e:	46bd      	mov	sp, r7
 8012150:	bd80      	pop	{r7, pc}

08012152 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8012152:	b580      	push	{r7, lr}
 8012154:	b084      	sub	sp, #16
 8012156:	af00      	add	r7, sp, #0
 8012158:	6078      	str	r0, [r7, #4]
 801215a:	460b      	mov	r3, r1
 801215c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801215e:	2300      	movs	r3, #0
 8012160:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8012162:	2300      	movs	r3, #0
 8012164:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8012166:	687b      	ldr	r3, [r7, #4]
 8012168:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 801216c:	78fa      	ldrb	r2, [r7, #3]
 801216e:	4611      	mov	r1, r2
 8012170:	4618      	mov	r0, r3
 8012172:	f7f1 ff6f 	bl	8004054 <HAL_PCD_EP_ClrStall>
 8012176:	4603      	mov	r3, r0
 8012178:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801217a:	7bfb      	ldrb	r3, [r7, #15]
 801217c:	4618      	mov	r0, r3
 801217e:	f000 f8bf 	bl	8012300 <USBD_Get_USB_Status>
 8012182:	4603      	mov	r3, r0
 8012184:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8012186:	7bbb      	ldrb	r3, [r7, #14]
}
 8012188:	4618      	mov	r0, r3
 801218a:	3710      	adds	r7, #16
 801218c:	46bd      	mov	sp, r7
 801218e:	bd80      	pop	{r7, pc}

08012190 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8012190:	b480      	push	{r7}
 8012192:	b085      	sub	sp, #20
 8012194:	af00      	add	r7, sp, #0
 8012196:	6078      	str	r0, [r7, #4]
 8012198:	460b      	mov	r3, r1
 801219a:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 801219c:	687b      	ldr	r3, [r7, #4]
 801219e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80121a2:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 80121a4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80121a8:	2b00      	cmp	r3, #0
 80121aa:	da0b      	bge.n	80121c4 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 80121ac:	78fb      	ldrb	r3, [r7, #3]
 80121ae:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80121b2:	68f9      	ldr	r1, [r7, #12]
 80121b4:	4613      	mov	r3, r2
 80121b6:	00db      	lsls	r3, r3, #3
 80121b8:	1a9b      	subs	r3, r3, r2
 80121ba:	009b      	lsls	r3, r3, #2
 80121bc:	440b      	add	r3, r1
 80121be:	333e      	adds	r3, #62	; 0x3e
 80121c0:	781b      	ldrb	r3, [r3, #0]
 80121c2:	e00b      	b.n	80121dc <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 80121c4:	78fb      	ldrb	r3, [r7, #3]
 80121c6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80121ca:	68f9      	ldr	r1, [r7, #12]
 80121cc:	4613      	mov	r3, r2
 80121ce:	00db      	lsls	r3, r3, #3
 80121d0:	1a9b      	subs	r3, r3, r2
 80121d2:	009b      	lsls	r3, r3, #2
 80121d4:	440b      	add	r3, r1
 80121d6:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 80121da:	781b      	ldrb	r3, [r3, #0]
  }
}
 80121dc:	4618      	mov	r0, r3
 80121de:	3714      	adds	r7, #20
 80121e0:	46bd      	mov	sp, r7
 80121e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80121e6:	4770      	bx	lr

080121e8 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 80121e8:	b580      	push	{r7, lr}
 80121ea:	b084      	sub	sp, #16
 80121ec:	af00      	add	r7, sp, #0
 80121ee:	6078      	str	r0, [r7, #4]
 80121f0:	460b      	mov	r3, r1
 80121f2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80121f4:	2300      	movs	r3, #0
 80121f6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80121f8:	2300      	movs	r3, #0
 80121fa:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 80121fc:	687b      	ldr	r3, [r7, #4]
 80121fe:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8012202:	78fa      	ldrb	r2, [r7, #3]
 8012204:	4611      	mov	r1, r2
 8012206:	4618      	mov	r0, r3
 8012208:	f7f1 fd3c 	bl	8003c84 <HAL_PCD_SetAddress>
 801220c:	4603      	mov	r3, r0
 801220e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8012210:	7bfb      	ldrb	r3, [r7, #15]
 8012212:	4618      	mov	r0, r3
 8012214:	f000 f874 	bl	8012300 <USBD_Get_USB_Status>
 8012218:	4603      	mov	r3, r0
 801221a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801221c:	7bbb      	ldrb	r3, [r7, #14]
}
 801221e:	4618      	mov	r0, r3
 8012220:	3710      	adds	r7, #16
 8012222:	46bd      	mov	sp, r7
 8012224:	bd80      	pop	{r7, pc}

08012226 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8012226:	b580      	push	{r7, lr}
 8012228:	b086      	sub	sp, #24
 801222a:	af00      	add	r7, sp, #0
 801222c:	60f8      	str	r0, [r7, #12]
 801222e:	607a      	str	r2, [r7, #4]
 8012230:	603b      	str	r3, [r7, #0]
 8012232:	460b      	mov	r3, r1
 8012234:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8012236:	2300      	movs	r3, #0
 8012238:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801223a:	2300      	movs	r3, #0
 801223c:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 801223e:	68fb      	ldr	r3, [r7, #12]
 8012240:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8012244:	7af9      	ldrb	r1, [r7, #11]
 8012246:	683b      	ldr	r3, [r7, #0]
 8012248:	687a      	ldr	r2, [r7, #4]
 801224a:	f7f1 fe55 	bl	8003ef8 <HAL_PCD_EP_Transmit>
 801224e:	4603      	mov	r3, r0
 8012250:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8012252:	7dfb      	ldrb	r3, [r7, #23]
 8012254:	4618      	mov	r0, r3
 8012256:	f000 f853 	bl	8012300 <USBD_Get_USB_Status>
 801225a:	4603      	mov	r3, r0
 801225c:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 801225e:	7dbb      	ldrb	r3, [r7, #22]
}
 8012260:	4618      	mov	r0, r3
 8012262:	3718      	adds	r7, #24
 8012264:	46bd      	mov	sp, r7
 8012266:	bd80      	pop	{r7, pc}

08012268 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8012268:	b580      	push	{r7, lr}
 801226a:	b086      	sub	sp, #24
 801226c:	af00      	add	r7, sp, #0
 801226e:	60f8      	str	r0, [r7, #12]
 8012270:	607a      	str	r2, [r7, #4]
 8012272:	603b      	str	r3, [r7, #0]
 8012274:	460b      	mov	r3, r1
 8012276:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8012278:	2300      	movs	r3, #0
 801227a:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801227c:	2300      	movs	r3, #0
 801227e:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8012280:	68fb      	ldr	r3, [r7, #12]
 8012282:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8012286:	7af9      	ldrb	r1, [r7, #11]
 8012288:	683b      	ldr	r3, [r7, #0]
 801228a:	687a      	ldr	r2, [r7, #4]
 801228c:	f7f1 fdd1 	bl	8003e32 <HAL_PCD_EP_Receive>
 8012290:	4603      	mov	r3, r0
 8012292:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8012294:	7dfb      	ldrb	r3, [r7, #23]
 8012296:	4618      	mov	r0, r3
 8012298:	f000 f832 	bl	8012300 <USBD_Get_USB_Status>
 801229c:	4603      	mov	r3, r0
 801229e:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 80122a0:	7dbb      	ldrb	r3, [r7, #22]
}
 80122a2:	4618      	mov	r0, r3
 80122a4:	3718      	adds	r7, #24
 80122a6:	46bd      	mov	sp, r7
 80122a8:	bd80      	pop	{r7, pc}

080122aa <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80122aa:	b580      	push	{r7, lr}
 80122ac:	b082      	sub	sp, #8
 80122ae:	af00      	add	r7, sp, #0
 80122b0:	6078      	str	r0, [r7, #4]
 80122b2:	460b      	mov	r3, r1
 80122b4:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 80122b6:	687b      	ldr	r3, [r7, #4]
 80122b8:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80122bc:	78fa      	ldrb	r2, [r7, #3]
 80122be:	4611      	mov	r1, r2
 80122c0:	4618      	mov	r0, r3
 80122c2:	f7f1 fe01 	bl	8003ec8 <HAL_PCD_EP_GetRxCount>
 80122c6:	4603      	mov	r3, r0
}
 80122c8:	4618      	mov	r0, r3
 80122ca:	3708      	adds	r7, #8
 80122cc:	46bd      	mov	sp, r7
 80122ce:	bd80      	pop	{r7, pc}

080122d0 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 80122d0:	b480      	push	{r7}
 80122d2:	b083      	sub	sp, #12
 80122d4:	af00      	add	r7, sp, #0
 80122d6:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 80122d8:	4b03      	ldr	r3, [pc, #12]	; (80122e8 <USBD_static_malloc+0x18>)
}
 80122da:	4618      	mov	r0, r3
 80122dc:	370c      	adds	r7, #12
 80122de:	46bd      	mov	sp, r7
 80122e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80122e4:	4770      	bx	lr
 80122e6:	bf00      	nop
 80122e8:	20004acc 	.word	0x20004acc

080122ec <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 80122ec:	b480      	push	{r7}
 80122ee:	b083      	sub	sp, #12
 80122f0:	af00      	add	r7, sp, #0
 80122f2:	6078      	str	r0, [r7, #4]

}
 80122f4:	bf00      	nop
 80122f6:	370c      	adds	r7, #12
 80122f8:	46bd      	mov	sp, r7
 80122fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80122fe:	4770      	bx	lr

08012300 <USBD_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8012300:	b480      	push	{r7}
 8012302:	b085      	sub	sp, #20
 8012304:	af00      	add	r7, sp, #0
 8012306:	4603      	mov	r3, r0
 8012308:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801230a:	2300      	movs	r3, #0
 801230c:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 801230e:	79fb      	ldrb	r3, [r7, #7]
 8012310:	2b03      	cmp	r3, #3
 8012312:	d817      	bhi.n	8012344 <USBD_Get_USB_Status+0x44>
 8012314:	a201      	add	r2, pc, #4	; (adr r2, 801231c <USBD_Get_USB_Status+0x1c>)
 8012316:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801231a:	bf00      	nop
 801231c:	0801232d 	.word	0x0801232d
 8012320:	08012333 	.word	0x08012333
 8012324:	08012339 	.word	0x08012339
 8012328:	0801233f 	.word	0x0801233f
  {
    case HAL_OK :
      usb_status = USBD_OK;
 801232c:	2300      	movs	r3, #0
 801232e:	73fb      	strb	r3, [r7, #15]
    break;
 8012330:	e00b      	b.n	801234a <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8012332:	2303      	movs	r3, #3
 8012334:	73fb      	strb	r3, [r7, #15]
    break;
 8012336:	e008      	b.n	801234a <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8012338:	2301      	movs	r3, #1
 801233a:	73fb      	strb	r3, [r7, #15]
    break;
 801233c:	e005      	b.n	801234a <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 801233e:	2303      	movs	r3, #3
 8012340:	73fb      	strb	r3, [r7, #15]
    break;
 8012342:	e002      	b.n	801234a <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8012344:	2303      	movs	r3, #3
 8012346:	73fb      	strb	r3, [r7, #15]
    break;
 8012348:	bf00      	nop
  }
  return usb_status;
 801234a:	7bfb      	ldrb	r3, [r7, #15]
}
 801234c:	4618      	mov	r0, r3
 801234e:	3714      	adds	r7, #20
 8012350:	46bd      	mov	sp, r7
 8012352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012356:	4770      	bx	lr

08012358 <__libc_init_array>:
 8012358:	b570      	push	{r4, r5, r6, lr}
 801235a:	4d0d      	ldr	r5, [pc, #52]	; (8012390 <__libc_init_array+0x38>)
 801235c:	4c0d      	ldr	r4, [pc, #52]	; (8012394 <__libc_init_array+0x3c>)
 801235e:	1b64      	subs	r4, r4, r5
 8012360:	10a4      	asrs	r4, r4, #2
 8012362:	2600      	movs	r6, #0
 8012364:	42a6      	cmp	r6, r4
 8012366:	d109      	bne.n	801237c <__libc_init_array+0x24>
 8012368:	4d0b      	ldr	r5, [pc, #44]	; (8012398 <__libc_init_array+0x40>)
 801236a:	4c0c      	ldr	r4, [pc, #48]	; (801239c <__libc_init_array+0x44>)
 801236c:	f000 f82e 	bl	80123cc <_init>
 8012370:	1b64      	subs	r4, r4, r5
 8012372:	10a4      	asrs	r4, r4, #2
 8012374:	2600      	movs	r6, #0
 8012376:	42a6      	cmp	r6, r4
 8012378:	d105      	bne.n	8012386 <__libc_init_array+0x2e>
 801237a:	bd70      	pop	{r4, r5, r6, pc}
 801237c:	f855 3b04 	ldr.w	r3, [r5], #4
 8012380:	4798      	blx	r3
 8012382:	3601      	adds	r6, #1
 8012384:	e7ee      	b.n	8012364 <__libc_init_array+0xc>
 8012386:	f855 3b04 	ldr.w	r3, [r5], #4
 801238a:	4798      	blx	r3
 801238c:	3601      	adds	r6, #1
 801238e:	e7f2      	b.n	8012376 <__libc_init_array+0x1e>
 8012390:	08012514 	.word	0x08012514
 8012394:	08012514 	.word	0x08012514
 8012398:	08012514 	.word	0x08012514
 801239c:	08012518 	.word	0x08012518

080123a0 <memcpy>:
 80123a0:	440a      	add	r2, r1
 80123a2:	4291      	cmp	r1, r2
 80123a4:	f100 33ff 	add.w	r3, r0, #4294967295
 80123a8:	d100      	bne.n	80123ac <memcpy+0xc>
 80123aa:	4770      	bx	lr
 80123ac:	b510      	push	{r4, lr}
 80123ae:	f811 4b01 	ldrb.w	r4, [r1], #1
 80123b2:	f803 4f01 	strb.w	r4, [r3, #1]!
 80123b6:	4291      	cmp	r1, r2
 80123b8:	d1f9      	bne.n	80123ae <memcpy+0xe>
 80123ba:	bd10      	pop	{r4, pc}

080123bc <memset>:
 80123bc:	4402      	add	r2, r0
 80123be:	4603      	mov	r3, r0
 80123c0:	4293      	cmp	r3, r2
 80123c2:	d100      	bne.n	80123c6 <memset+0xa>
 80123c4:	4770      	bx	lr
 80123c6:	f803 1b01 	strb.w	r1, [r3], #1
 80123ca:	e7f9      	b.n	80123c0 <memset+0x4>

080123cc <_init>:
 80123cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80123ce:	bf00      	nop
 80123d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80123d2:	bc08      	pop	{r3}
 80123d4:	469e      	mov	lr, r3
 80123d6:	4770      	bx	lr

080123d8 <_fini>:
 80123d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80123da:	bf00      	nop
 80123dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80123de:	bc08      	pop	{r3}
 80123e0:	469e      	mov	lr, r3
 80123e2:	4770      	bx	lr
